
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002650  0801a750  0801a750  0002a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cda0  0801cda0  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801cda0  0801cda0  0002cda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cda8  0801cda8  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cda8  0801cda8  0002cda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cdac  0801cdac  0002cdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801cdb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c234  200001ec  0801cf9c  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c420  0801cf9c  0003c420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d1d7  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009e2b  00000000  00000000  0007d3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002be8  00000000  00000000  00087220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002870  00000000  00000000  00089e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001804f  00000000  00000000  0008c678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00037da1  00000000  00000000  000a46c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010f2ef  00000000  00000000  000dc468  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001eb757  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b968  00000000  00000000  001eb7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a738 	.word	0x0801a738

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0801a738 	.word	0x0801a738

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <F_QEI_Reset>:
	F_QEI_Reset();
}
///*
// * F_QEI_Reset Localization data are reseted to zero;
// */
void F_QEI_Reset(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
	__disable_irq();

	g_oldLeftCount	= 0;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <F_QEI_Reset+0x38>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
	g_oldRightCount	= 0;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <F_QEI_Reset+0x3c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
	g_leftSpeed		= 0;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <F_QEI_Reset+0x40>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
	g_rightSpeed	= 0;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <F_QEI_Reset+0x44>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
//
//	g_estimate.x = RBT_OF7_X;
//	g_estimate.y = RBT_OF7_Y;
//	g_estimate.teta = 0;

	TIM2->CNT=0;
 80005ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT=0;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <F_QEI_Reset+0x48>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24

	F_QEI_Read();
 80005bc:	f000 f80e 	bl	80005dc <F_QEI_Read>
  __ASM volatile ("cpsie i" : : : "memory");
 80005c0:	b662      	cpsie	i
	__enable_irq();
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000435c 	.word	0x2000435c
 80005cc:	20004374 	.word	0x20004374
 80005d0:	2000436c 	.word	0x2000436c
 80005d4:	20004370 	.word	0x20004370
 80005d8:	40000400 	.word	0x40000400

080005dc <F_QEI_Read>:
///*
// * F_QEI_Read is called every Timer 9 interrupt to update encoder's data
// */
void F_QEI_Read (void){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

	g_oldLeftCount  = g_leftCount ;
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <F_QEI_Read+0x104>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a3f      	ldr	r2, [pc, #252]	; (80006e4 <F_QEI_Read+0x108>)
 80005e6:	6013      	str	r3, [r2, #0]
	g_oldRightCount = g_rightCount;
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <F_QEI_Read+0x10c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a3f      	ldr	r2, [pc, #252]	; (80006ec <F_QEI_Read+0x110>)
 80005ee:	6013      	str	r3, [r2, #0]

	g_rightCount = TIM2->CNT ;
 80005f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <F_QEI_Read+0x10c>)
 80005fa:	601a      	str	r2, [r3, #0]
	g_leftCount  = TIM3->CNT ;
 80005fc:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <F_QEI_Read+0x114>)
 80005fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000600:	461a      	mov	r2, r3
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <F_QEI_Read+0x104>)
 8000604:	601a      	str	r2, [r3, #0]

	g_leftSpeed  = g_leftCount  - g_oldLeftCount ;
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <F_QEI_Read+0x104>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <F_QEI_Read+0x108>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	4a38      	ldr	r2, [pc, #224]	; (80006f4 <F_QEI_Read+0x118>)
 8000612:	6013      	str	r3, [r2, #0]
	g_rightSpeed = g_rightCount - g_oldRightCount;
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <F_QEI_Read+0x10c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <F_QEI_Read+0x110>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	4a36      	ldr	r2, [pc, #216]	; (80006f8 <F_QEI_Read+0x11c>)
 8000620:	6013      	str	r3, [r2, #0]

	// Si on passe par zero en phase descendante
	if(g_leftSpeed  > 4096) g_leftSpeed = -(g_oldLeftCount  + (65535-g_leftCount));
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <F_QEI_Read+0x118>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800062a:	dd0a      	ble.n	8000642 <F_QEI_Read+0x66>
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <F_QEI_Read+0x104>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000634:	33ff      	adds	r3, #255	; 0xff
 8000636:	4a2b      	ldr	r2, [pc, #172]	; (80006e4 <F_QEI_Read+0x108>)
 8000638:	6812      	ldr	r2, [r2, #0]
 800063a:	4413      	add	r3, r2
 800063c:	425b      	negs	r3, r3
 800063e:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <F_QEI_Read+0x118>)
 8000640:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed > 4096) g_rightSpeed= -(g_oldRightCount + (65535-g_rightCount));
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <F_QEI_Read+0x11c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800064a:	dd0a      	ble.n	8000662 <F_QEI_Read+0x86>
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <F_QEI_Read+0x10c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000654:	33ff      	adds	r3, #255	; 0xff
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <F_QEI_Read+0x110>)
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	4413      	add	r3, r2
 800065c:	425b      	negs	r3, r3
 800065e:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <F_QEI_Read+0x11c>)
 8000660:	6013      	str	r3, [r2, #0]
	// Si on passe par zero en phase montante
	if(g_leftSpeed  < -4096) g_leftSpeed = (g_leftCount + (65535  - g_oldLeftCount));
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <F_QEI_Read+0x118>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800066a:	da09      	bge.n	8000680 <F_QEI_Read+0xa4>
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <F_QEI_Read+0x108>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000674:	33ff      	adds	r3, #255	; 0xff
 8000676:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <F_QEI_Read+0x104>)
 8000678:	6812      	ldr	r2, [r2, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <F_QEI_Read+0x118>)
 800067e:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed < -4096) g_rightSpeed= (g_rightCount + (65535 - g_oldRightCount));
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <F_QEI_Read+0x11c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000688:	da09      	bge.n	800069e <F_QEI_Read+0xc2>
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <F_QEI_Read+0x110>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000692:	33ff      	adds	r3, #255	; 0xff
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <F_QEI_Read+0x10c>)
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	4413      	add	r3, r2
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <F_QEI_Read+0x11c>)
 800069c:	6013      	str	r3, [r2, #0]

	g_fwdSpeed = (float)( g_leftSpeed + g_rightSpeed ) / 2;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <F_QEI_Read+0x118>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <F_QEI_Read+0x11c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80006b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <F_QEI_Read+0x120>)
 80006ba:	edc3 7a00 	vstr	s15, [r3]
	g_rotSpeed =  g_rightSpeed - g_leftSpeed;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <F_QEI_Read+0x11c>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <F_QEI_Read+0x118>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <F_QEI_Read+0x124>)
 80006d2:	edc3 7a00 	vstr	s15, [r3]

	//F_QEI_XYTetaProcessing();
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	20004368 	.word	0x20004368
 80006e4:	2000435c 	.word	0x2000435c
 80006e8:	20004364 	.word	0x20004364
 80006ec:	20004374 	.word	0x20004374
 80006f0:	40000400 	.word	0x40000400
 80006f4:	2000436c 	.word	0x2000436c
 80006f8:	20004370 	.word	0x20004370
 80006fc:	20004358 	.word	0x20004358
 8000700:	20004360 	.word	0x20004360

08000704 <F_LCD_Init>:
#include "D_QEI.h"

extern int g_leftCount;
extern int g_rightCount;

void F_LCD_Init(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	g_addr = LCD_ADDR;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <F_LCD_Init+0x2c>)
 800070a:	2227      	movs	r2, #39	; 0x27
 800070c:	701a      	strb	r2, [r3, #0]
	g_cols = LCD_COLS;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <F_LCD_Init+0x30>)
 8000710:	2210      	movs	r2, #16
 8000712:	701a      	strb	r2, [r3, #0]
	g_rows = LCD_ROWS;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <F_LCD_Init+0x34>)
 8000716:	2202      	movs	r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
	g_charsize = LCD_CHARSIZE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <F_LCD_Init+0x38>)
 800071c:	2204      	movs	r2, #4
 800071e:	701a      	strb	r2, [r3, #0]
	g_backlightval = LCD_BACKLIGHT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <F_LCD_Init+0x3c>)
 8000722:	2208      	movs	r2, #8
 8000724:	701a      	strb	r2, [r3, #0]

	F_LCD_begin();
 8000726:	f000 f80d 	bl	8000744 <F_LCD_begin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000437a 	.word	0x2000437a
 8000734:	2000437f 	.word	0x2000437f
 8000738:	20004379 	.word	0x20004379
 800073c:	2000437b 	.word	0x2000437b
 8000740:	2000437c 	.word	0x2000437c

08000744 <F_LCD_begin>:
void F_LCD_begin() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	g_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <F_LCD_begin+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]

	if (g_rows > 1) {
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <F_LCD_begin+0xc0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d906      	bls.n	8000764 <F_LCD_begin+0x20>
		g_displayfunction |= LCD_2LINE;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <F_LCD_begin+0xbc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <F_LCD_begin+0xbc>)
 8000762:	701a      	strb	r2, [r3, #0]
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((g_charsize != 0) && (g_rows == 1)) {
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <F_LCD_begin+0xc4>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00a      	beq.n	8000782 <F_LCD_begin+0x3e>
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <F_LCD_begin+0xc0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d106      	bne.n	8000782 <F_LCD_begin+0x3e>
		g_displayfunction |= LCD_5x10DOTS;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <F_LCD_begin+0xbc>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <F_LCD_begin+0xbc>)
 8000780:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f001 fdfa 	bl	800237c <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	D_LCD_expanderWrite(g_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <F_LCD_begin+0xc8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f939 	bl	8000a04 <D_LCD_expanderWrite>
	HAL_Delay(100);
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	f001 fdf2 	bl	800237c <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	D_LCD_write4bits(0x03 << 4);
 8000798:	2030      	movs	r0, #48	; 0x30
 800079a:	f000 f922 	bl	80009e2 <D_LCD_write4bits>
	HAL_Delay(5); // wait min 4.1ms
 800079e:	2005      	movs	r0, #5
 80007a0:	f001 fdec 	bl	800237c <HAL_Delay>

	// second try
	D_LCD_write4bits(0x03 << 4);
 80007a4:	2030      	movs	r0, #48	; 0x30
 80007a6:	f000 f91c 	bl	80009e2 <D_LCD_write4bits>
	HAL_Delay(5); // wait min 4.1ms
 80007aa:	2005      	movs	r0, #5
 80007ac:	f001 fde6 	bl	800237c <HAL_Delay>

	// third go!
	D_LCD_write4bits(0x03 << 4);
 80007b0:	2030      	movs	r0, #48	; 0x30
 80007b2:	f000 f916 	bl	80009e2 <D_LCD_write4bits>
	HAL_Delay(5);
 80007b6:	2005      	movs	r0, #5
 80007b8:	f001 fde0 	bl	800237c <HAL_Delay>

	// finally, set to 4-bit interface
	D_LCD_write4bits(0x02 << 4);
 80007bc:	2020      	movs	r0, #32
 80007be:	f000 f910 	bl	80009e2 <D_LCD_write4bits>

	// set # lines, font size, etc.
	F_LCD_command(LCD_FUNCTIONSET | g_displayfunction);
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <F_LCD_begin+0xbc>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f87f 	bl	80008d0 <F_LCD_command>

	// turn the display on with no cursor or blinking default
	g_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <F_LCD_begin+0xcc>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	701a      	strb	r2, [r3, #0]
	F_LCD_display();
 80007d8:	f000 f864 	bl	80008a4 <F_LCD_display>

	// clear it off
	F_LCD_clear();
 80007dc:	f000 f81c 	bl	8000818 <F_LCD_clear>

	// Initialize to default text direction (for roman languages)
	g_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <F_LCD_begin+0xd0>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	F_LCD_command(LCD_ENTRYMODESET | g_displaymode);
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <F_LCD_begin+0xd0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f86d 	bl	80008d0 <F_LCD_command>

	F_LCD_home();
 80007f6:	f000 f819 	bl	800082c <F_LCD_home>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000437e 	.word	0x2000437e
 8000804:	20004379 	.word	0x20004379
 8000808:	2000437b 	.word	0x2000437b
 800080c:	2000437c 	.word	0x2000437c
 8000810:	2000437d 	.word	0x2000437d
 8000814:	20004378 	.word	0x20004378

08000818 <F_LCD_clear>:
/********** high level commands, for the user! */
void F_LCD_clear(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	F_LCD_command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 800081c:	2001      	movs	r0, #1
 800081e:	f000 f857 	bl	80008d0 <F_LCD_command>
	HAL_Delay(50);  // this command takes a long time!
 8000822:	2032      	movs	r0, #50	; 0x32
 8000824:	f001 fdaa 	bl	800237c <HAL_Delay>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <F_LCD_home>:
void F_LCD_home(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	F_LCD_command(LCD_RETURNHOME);  // set cursor position to zero
 8000830:	2002      	movs	r0, #2
 8000832:	f000 f84d 	bl	80008d0 <F_LCD_command>
	HAL_Delay(50);  // this command takes a long time!
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f001 fda0 	bl	800237c <HAL_Delay>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <F_LCD_setCursor>:
void F_LCD_setCursor(uint8_t col, uint8_t row){
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	460a      	mov	r2, r1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	4613      	mov	r3, r2
 800084e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <F_LCD_setCursor+0x5c>)
 8000852:	f107 0408 	add.w	r4, r7, #8
 8000856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > g_rows) {
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <F_LCD_setCursor+0x60>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	429a      	cmp	r2, r3
 8000864:	d903      	bls.n	800086e <F_LCD_setCursor+0x2e>
		row = g_rows-1;    // we count rows starting w/0
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <F_LCD_setCursor+0x60>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3b01      	subs	r3, #1
 800086c:	71bb      	strb	r3, [r7, #6]
	}
	F_LCD_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	f107 0218 	add.w	r2, r7, #24
 8000876:	4413      	add	r3, r2
 8000878:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4413      	add	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	b25b      	sxtb	r3, r3
 8000886:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800088a:	b25b      	sxtb	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f81e 	bl	80008d0 <F_LCD_command>
}
 8000894:	bf00      	nop
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	0801a750 	.word	0x0801a750
 80008a0:	20004379 	.word	0x20004379

080008a4 <F_LCD_display>:
// Turn the display on/off (quickly)
void F_LCD_noDisplay() {
	g_displaycontrol &= ~LCD_DISPLAYON;
	F_LCD_command(LCD_DISPLAYCONTROL | g_displaycontrol);
}
void F_LCD_display() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	g_displaycontrol |= LCD_DISPLAYON;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <F_LCD_display+0x28>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <F_LCD_display+0x28>)
 80008b4:	701a      	strb	r2, [r3, #0]
	F_LCD_command(LCD_DISPLAYCONTROL | g_displaycontrol);
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <F_LCD_display+0x28>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f805 	bl	80008d0 <F_LCD_command>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000437d 	.word	0x2000437d

080008d0 <F_LCD_command>:
  return g_backlightval == LCD_BACKLIGHT;
}

/*********** mid level commands, for sending data/cmds */

void F_LCD_command(uint8_t value) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	D_LCD_send(value, 0);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f85e 	bl	80009a0 <D_LCD_send>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <F_LCD_write>:
void F_LCD_write(uint8_t value) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	D_LCD_send(value, LCD_RS);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2101      	movs	r1, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f850 	bl	80009a0 <D_LCD_send>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <F_LCD_printstr>:
void F_LCD_printstr(char *c){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	//This function is not identical to the function used for "real" I2C displays
	//it's here so the user sketch doesn't have to be changed
	int idx=0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	while (c[idx] !='\0') {
 8000914:	e009      	b.n	800092a <F_LCD_printstr+0x22>
		F_LCD_write(c[idx]);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffe4 	bl	80008ec <F_LCD_write>
		idx++;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
	while (c[idx] !='\0') {
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1ef      	bne.n	8000916 <F_LCD_printstr+0xe>
	}
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <F_LCD_PrintQEI>:
	F_LCD_printstr(line1);
	F_LCD_setCursor(0,1);
	F_LCD_printstr(line2);
}

void F_LCD_PrintQEI(void){
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
	char line1[16];
	char line2[16];

	//(teta_deg<0) ? (signe = '-') : (signe = '+');

	sprintf(line1,"Lcnt:%4d",g_leftCount);
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <F_LCD_PrintQEI+0x50>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4911      	ldr	r1, [pc, #68]	; (8000994 <F_LCD_PrintQEI+0x54>)
 8000950:	4618      	mov	r0, r3
 8000952:	f018 ff23 	bl	801979c <siprintf>
	sprintf(line2,"Rcnt:%4d",g_rightCount);
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <F_LCD_PrintQEI+0x58>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	463b      	mov	r3, r7
 800095c:	490f      	ldr	r1, [pc, #60]	; (800099c <F_LCD_PrintQEI+0x5c>)
 800095e:	4618      	mov	r0, r3
 8000960:	f018 ff1c 	bl	801979c <siprintf>

	F_LCD_setCursor(0,0);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff ff6a 	bl	8000840 <F_LCD_setCursor>
	F_LCD_printstr(line1);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ffc9 	bl	8000908 <F_LCD_printstr>
	F_LCD_setCursor(0,1);
 8000976:	2101      	movs	r1, #1
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff61 	bl	8000840 <F_LCD_setCursor>
	F_LCD_printstr(line2);
 800097e:	463b      	mov	r3, r7
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffc1 	bl	8000908 <F_LCD_printstr>
}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20004368 	.word	0x20004368
 8000994:	0801a778 	.word	0x0801a778
 8000998:	20004364 	.word	0x20004364
 800099c:	0801a784 	.word	0x0801a784

080009a0 <D_LCD_send>:
/************ low level data pushing commands **********/

// write either command or data
void D_LCD_send(uint8_t value, uint8_t mode) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib=value&0xf0;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib=(value<<4)&0xf0;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	73bb      	strb	r3, [r7, #14]

	D_LCD_write4bits((highnib)|mode);
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f80b 	bl	80009e2 <D_LCD_write4bits>
	D_LCD_write4bits((lownib)|mode);
 80009cc:	7bba      	ldrb	r2, [r7, #14]
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f804 	bl	80009e2 <D_LCD_write4bits>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <D_LCD_write4bits>:
void D_LCD_write4bits(uint8_t value) {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
	D_LCD_expanderWrite(value);
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f808 	bl	8000a04 <D_LCD_expanderWrite>
	D_LCD_pulseEnable(value);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f81c 	bl	8000a34 <D_LCD_pulseEnable>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <D_LCD_expanderWrite>:
void D_LCD_expanderWrite(uint8_t a_data){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]

	F_I2C1_WriteValue(g_addr,a_data | g_backlightval);
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <D_LCD_expanderWrite+0x28>)
 8000a10:	7818      	ldrb	r0, [r3, #0]
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <D_LCD_expanderWrite+0x2c>)
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f000 fd3f 	bl	80014a0 <F_I2C1_WriteValue>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000437a 	.word	0x2000437a
 8000a30:	2000437c 	.word	0x2000437c

08000a34 <D_LCD_pulseEnable>:
void D_LCD_pulseEnable(uint8_t _data){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	D_LCD_expanderWrite(_data | LCD_EN);	// En high
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffdc 	bl	8000a04 <D_LCD_expanderWrite>
	HAL_Delay(1);		// enable pulse must be >450ns
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f001 fc95 	bl	800237c <HAL_Delay>

	D_LCD_expanderWrite(_data & ~LCD_EN);	// En low
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f023 0304 	bic.w	r3, r3, #4
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ffd2 	bl	8000a04 <D_LCD_expanderWrite>
	HAL_Delay(10);		// commands need > 37us to settle
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 fc8b 	bl	800237c <HAL_Delay>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <F_LCD_DebugTask_Handler>:
	} else {
		F_LCD_noBacklight();		// turn backlight off
	}
}

void F_LCD_DebugTask_Handler(void const * argument){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

	char line1[16],line2[16];

	sprintf(line1,"Time %s",__TIME__);
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <F_LCD_DebugTask_Handler+0x68>)
 8000a7e:	4917      	ldr	r1, [pc, #92]	; (8000adc <F_LCD_DebugTask_Handler+0x6c>)
 8000a80:	4618      	mov	r0, r3
 8000a82:	f018 fe8b 	bl	801979c <siprintf>
	sprintf(line2,"Date%s",__DATE__);
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <F_LCD_DebugTask_Handler+0x70>)
 8000a8c:	4915      	ldr	r1, [pc, #84]	; (8000ae4 <F_LCD_DebugTask_Handler+0x74>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f018 fe84 	bl	801979c <siprintf>

	F_LCD_Init();
 8000a94:	f7ff fe36 	bl	8000704 <F_LCD_Init>
	F_LCD_setCursor(0,0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fed0 	bl	8000840 <F_LCD_setCursor>
	F_LCD_printstr(line1);
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff2f 	bl	8000908 <F_LCD_printstr>
	F_LCD_setCursor(0,1);
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fec7 	bl	8000840 <F_LCD_setCursor>
	F_LCD_printstr(line2);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff26 	bl	8000908 <F_LCD_printstr>

	HAL_Delay(100);
 8000abc:	2064      	movs	r0, #100	; 0x64
 8000abe:	f001 fc5d 	bl	800237c <HAL_Delay>
	F_LCD_clear();
 8000ac2:	f7ff fea9 	bl	8000818 <F_LCD_clear>

    while(1){
        // 2. Wait until period elapse
    	osDelay(500);
 8000ac6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aca:	f00a f9c6 	bl	800ae5a <osDelay>
    	F_GPIO_ToogleLed4();
 8000ace:	f000 fafb 	bl	80010c8 <F_GPIO_ToogleLed4>

        // 3. Send data
    	F_LCD_PrintQEI();
 8000ad2:	f7ff ff35 	bl	8000940 <F_LCD_PrintQEI>
    	osDelay(500);
 8000ad6:	e7f6      	b.n	8000ac6 <F_LCD_DebugTask_Handler+0x56>
 8000ad8:	0801a790 	.word	0x0801a790
 8000adc:	0801a79c 	.word	0x0801a79c
 8000ae0:	0801a7a4 	.word	0x0801a7a4
 8000ae4:	0801a7b0 	.word	0x0801a7b0

08000ae8 <F_Odometry_Compute>:
#include "F_Odometry.h"

#include "D_QEI.h"
#include "cmsis_os.h"

void F_Odometry_Compute(uint32_t period_inTick){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	F_QEI_Read();
 8000af0:	f7ff fd74 	bl	80005dc <F_QEI_Read>
	//	g_estimate.x +=  TICKTOMM * g_fwdSpeed  * cosf(g_estimate.teta);
	//	g_estimate.y +=  TICKTOMM * g_fwdSpeed  * sinf(g_estimate.teta);
	//	g_estimate.teta +=  tanf( TICKTOMM * g_rotSpeed  / ENTRAXE ) ;
	//
	//	F_Math_ModuloPi(&g_estimate.teta);
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <F_Odometry_RegTask_Handler>:

void F_Odometry_RegTask_Handler(void const * argument){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    //TickType_t xLastWakeTime;

    TickType_t prevTick = 0u,  tick = 0u;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]

    uint32_t period;

    // 1. Initialise periodical task
    //xLastWakeTime = osKernelSysTick();
    F_QEI_Reset();
 8000b0c:	f7ff fd40 	bl	8000590 <F_QEI_Reset>
    // 2. Get tick count
    prevTick = osKernelSysTick();
 8000b10:	f00a f947 	bl	800ada2 <osKernelSysTick>
 8000b14:	6178      	str	r0, [r7, #20]

    while(1){
        // 2. Wait until period elapse
    	osDelay(ODO_TECH);
 8000b16:	2005      	movs	r0, #5
 8000b18:	f00a f99f 	bl	800ae5a <osDelay>
    	F_GPIO_ToogleLed1();
 8000b1c:	f000 fa80 	bl	8001020 <F_GPIO_ToogleLed1>

        // 3. Get tick
        tick = osKernelSysTick();
 8000b20:	f00a f93f 	bl	800ada2 <osKernelSysTick>
 8000b24:	6138      	str	r0, [r7, #16]

        period = tick - prevTick; // Attention l'overflow n'est pas géré
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	60fb      	str	r3, [r7, #12]

        //4. Compute location
        F_Odometry_Compute(period);
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff ffda 	bl	8000ae8 <F_Odometry_Compute>

        // 5. Set previous tick
        prevTick = tick;
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	617b      	str	r3, [r7, #20]
    	osDelay(ODO_TECH);
 8000b38:	e7ed      	b.n	8000b16 <F_Odometry_RegTask_Handler+0x1a>
	...

08000b3c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <vApplicationGetIdleTaskMemory+0x30>)
 8000b52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000208 	.word	0x20000208
 8000b6c:	2000025c 	.word	0x2000025c

08000b70 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b70:	b5b0      	push	{r4, r5, r7, lr}
 8000b72:	b0a4      	sub	sp, #144	; 0x90
 8000b74:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <MX_FREERTOS_Init+0xc8>)
 8000b78:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b7c:	461d      	mov	r5, r3
 8000b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f00a f916 	bl	800adc2 <osThreadCreate>
 8000b96:	4602      	mov	r2, r0
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <MX_FREERTOS_Init+0xcc>)
 8000b9a:	601a      	str	r2, [r3, #0]

  /* definition and creation of MotionRegTask */
  osThreadDef(MotionRegTask, StartMotionRegTask, osPriorityHigh, 0, 128);
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <MX_FREERTOS_Init+0xd0>)
 8000b9e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ba2:	461d      	mov	r5, r3
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotionRegTaskHandle = osThreadCreate(osThread(MotionRegTask), NULL);
 8000bb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00a f903 	bl	800adc2 <osThreadCreate>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_FREERTOS_Init+0xd4>)
 8000bc0:	601a      	str	r2, [r3, #0]

  /* definition and creation of OdometryRegTask */
  osThreadDef(OdometryRegTask, StartOdometryRegTask, osPriorityRealtime, 0, 128);
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_FREERTOS_Init+0xd8>)
 8000bc4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bc8:	461d      	mov	r5, r3
 8000bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OdometryRegTaskHandle = osThreadCreate(osThread(OdometryRegTask), NULL);
 8000bd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00a f8f0 	bl	800adc2 <osThreadCreate>
 8000be2:	4602      	mov	r2, r0
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_FREERTOS_Init+0xdc>)
 8000be6:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 128);
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_FREERTOS_Init+0xe0>)
 8000bea:	f107 0420 	add.w	r4, r7, #32
 8000bee:	461d      	mov	r5, r3
 8000bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00a f8dd 	bl	800adc2 <osThreadCreate>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_FREERTOS_Init+0xe4>)
 8000c0c:	601a      	str	r2, [r3, #0]

  /* definition and creation of DebugTask */
  osThreadDef(DebugTask, StartDebugTask, osPriorityNormal, 0, 128);
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_FREERTOS_Init+0xe8>)
 8000c10:	1d3c      	adds	r4, r7, #4
 8000c12:	461d      	mov	r5, r3
 8000c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugTaskHandle = osThreadCreate(osThread(DebugTask), NULL);
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00a f8cc 	bl	800adc2 <osThreadCreate>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_FREERTOS_Init+0xec>)
 8000c2e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c30:	bf00      	nop
 8000c32:	3790      	adds	r7, #144	; 0x90
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}
 8000c38:	0801a7c4 	.word	0x0801a7c4
 8000c3c:	20004380 	.word	0x20004380
 8000c40:	0801a7f0 	.word	0x0801a7f0
 8000c44:	20004390 	.word	0x20004390
 8000c48:	0801a81c 	.word	0x0801a81c
 8000c4c:	20004388 	.word	0x20004388
 8000c50:	0801a844 	.word	0x0801a844
 8000c54:	2000438c 	.word	0x2000438c
 8000c58:	0801a86c 	.word	0x0801a86c
 8000c5c:	20004384 	.word	0x20004384

08000c60 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c68:	f008 f9ca 	bl	8009000 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c6c:	f017 ff62 	bl	8018b34 <MX_USB_DEVICE_Init>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f00a f8f2 	bl	800ae5a <osDelay>
 8000c76:	e7fb      	b.n	8000c70 <StartDefaultTask+0x10>

08000c78 <StartMotionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionRegTask */
void StartMotionRegTask(void const * argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotionRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000c80:	20c8      	movs	r0, #200	; 0xc8
 8000c82:	f00a f8ea 	bl	800ae5a <osDelay>
    F_GPIO_ToogleLed2();
 8000c86:	f000 f9e7 	bl	8001058 <F_GPIO_ToogleLed2>
    osDelay(200);
 8000c8a:	e7f9      	b.n	8000c80 <StartMotionRegTask+0x8>

08000c8c <StartOdometryRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOdometryRegTask */
void StartOdometryRegTask(void const * argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOdometryRegTask */
	F_Odometry_RegTask_Handler(argument);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff31 	bl	8000afc <F_Odometry_RegTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000c9a:	2064      	movs	r0, #100	; 0x64
 8000c9c:	f00a f8dd 	bl	800ae5a <osDelay>
 8000ca0:	e7fb      	b.n	8000c9a <StartOdometryRegTask+0xe>

08000ca2 <StartSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsTask */
void StartSensorsTask(void const * argument)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f00a f8d5 	bl	800ae5a <osDelay>
 8000cb0:	e7fb      	b.n	8000caa <StartSensorsTask+0x8>

08000cb2 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	//F_UART_DebugTask_Handler(argument);
	F_LCD_DebugTask_Handler(argument);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fed8 	bl	8000a70 <F_LCD_DebugTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f00a f8ca 	bl	800ae5a <osDelay>
 8000cc6:	e7fb      	b.n	8000cc0 <StartDebugTask+0xe>

08000cc8 <MX_GPIO_Init>:
     PC9   ------> S_TIM8_CH4
     PG9   ------> USART6_RX
     PG14   ------> USART6_TX
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
 8000ce2:	4bb3      	ldr	r3, [pc, #716]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4ab2      	ldr	r2, [pc, #712]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4bb0      	ldr	r3, [pc, #704]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	623b      	str	r3, [r7, #32]
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	4bac      	ldr	r3, [pc, #688]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4aab      	ldr	r2, [pc, #684]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4ba9      	ldr	r3, [pc, #676]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	4ba5      	ldr	r3, [pc, #660]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4aa4      	ldr	r2, [pc, #656]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d20:	f043 0320 	orr.w	r3, r3, #32
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4ba2      	ldr	r3, [pc, #648]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0320 	and.w	r3, r3, #32
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	4b9e      	ldr	r3, [pc, #632]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a9d      	ldr	r2, [pc, #628]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b9b      	ldr	r3, [pc, #620]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b97      	ldr	r3, [pc, #604]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a96      	ldr	r2, [pc, #600]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b94      	ldr	r3, [pc, #592]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b90      	ldr	r3, [pc, #576]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a8f      	ldr	r2, [pc, #572]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b8d      	ldr	r3, [pc, #564]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b89      	ldr	r3, [pc, #548]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a88      	ldr	r2, [pc, #544]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b86      	ldr	r3, [pc, #536]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b82      	ldr	r3, [pc, #520]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a81      	ldr	r2, [pc, #516]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b7f      	ldr	r3, [pc, #508]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f247 4130 	movw	r1, #29744	; 0x7430
 8000dc4:	487b      	ldr	r0, [pc, #492]	; (8000fb4 <MX_GPIO_Init+0x2ec>)
 8000dc6:	f002 fdbb 	bl	8003940 <HAL_GPIO_WritePin>
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2108      	movs	r1, #8
 8000dce:	487a      	ldr	r0, [pc, #488]	; (8000fb8 <MX_GPIO_Init+0x2f0>)
 8000dd0:	f002 fdb6 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f244 41c1 	movw	r1, #17601	; 0x44c1
 8000dda:	4878      	ldr	r0, [pc, #480]	; (8000fbc <MX_GPIO_Init+0x2f4>)
 8000ddc:	f002 fdb0 	bl	8003940 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8000de6:	4876      	ldr	r0, [pc, #472]	; (8000fc0 <MX_GPIO_Init+0x2f8>)
 8000de8:	f002 fdaa 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df2:	4874      	ldr	r0, [pc, #464]	; (8000fc4 <MX_GPIO_Init+0x2fc>)
 8000df4:	f002 fda4 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|XSHUNT_3_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000dfe:	4872      	ldr	r0, [pc, #456]	; (8000fc8 <MX_GPIO_Init+0x300>)
 8000e00:	f002 fd9e 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e04:	2374      	movs	r3, #116	; 0x74
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000e14:	2305      	movs	r3, #5
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4868      	ldr	r0, [pc, #416]	; (8000fc0 <MX_GPIO_Init+0x2f8>)
 8000e20:	f002 fbe4 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e2a:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <MX_GPIO_Init+0x304>)
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4865      	ldr	r0, [pc, #404]	; (8000fd0 <MX_GPIO_Init+0x308>)
 8000e3a:	f002 fbd7 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_FB_Pin;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_FB_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4858      	ldr	r0, [pc, #352]	; (8000fb4 <MX_GPIO_Init+0x2ec>)
 8000e52:	f002 fbcb 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000e56:	f247 4330 	movw	r3, #29744	; 0x7430
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4851      	ldr	r0, [pc, #324]	; (8000fb4 <MX_GPIO_Init+0x2ec>)
 8000e70:	f002 fbbc 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000e74:	2308      	movs	r3, #8
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	484b      	ldr	r0, [pc, #300]	; (8000fb8 <MX_GPIO_Init+0x2f0>)
 8000e8c:	f002 fbae 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TIRETTE_Pin|M_SF_Pin;
 8000e90:	2360      	movs	r3, #96	; 0x60
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4845      	ldr	r0, [pc, #276]	; (8000fb8 <MX_GPIO_Init+0x2f0>)
 8000ea4:	f002 fba2 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000ea8:	f244 43c1 	movw	r3, #17601	; 0x44c1
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	483e      	ldr	r0, [pc, #248]	; (8000fbc <MX_GPIO_Init+0x2f4>)
 8000ec2:	f002 fb93 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_FB_Pin;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_FB_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4838      	ldr	r0, [pc, #224]	; (8000fbc <MX_GPIO_Init+0x2f4>)
 8000eda:	f002 fb87 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CONTACT_4_Pin|USB_OverCurrent_Pin;
 8000ede:	2381      	movs	r3, #129	; 0x81
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4835      	ldr	r0, [pc, #212]	; (8000fc8 <MX_GPIO_Init+0x300>)
 8000ef2:	f002 fb7b 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin;
 8000ef6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <MX_GPIO_Init+0x2f8>)
 8000f10:	f002 fb6c 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PWM_SERVO_5_Pin|PWM_SERVO_6_Pin|PWM_SERVO_7_Pin|PWM_SERVO_8_Pin;
 8000f14:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <MX_GPIO_Init+0x2f8>)
 8000f32:	f002 fb5b 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 8000f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <MX_GPIO_Init+0x2fc>)
 8000f50:	f002 fb4c 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|XSHUNT_3_Pin;
 8000f54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <MX_GPIO_Init+0x300>)
 8000f6e:	f002 fb3d 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin|PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 8000f72:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f84:	2303      	movs	r3, #3
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <MX_GPIO_Init+0x308>)
 8000f90:	f002 fb2c 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CONTACT_5_Pin|CONTACT_1_Pin|CONTACT_2_Pin|CONTACT_3_Pin;
 8000f94:	23b1      	movs	r3, #177	; 0xb1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_GPIO_Init+0x2fc>)
 8000fa8:	f002 fb20 	bl	80035ec <HAL_GPIO_Init>
 8000fac:	e012      	b.n	8000fd4 <MX_GPIO_Init+0x30c>
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40021400 	.word	0x40021400
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40021800 	.word	0x40021800
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	40020800 	.word	0x40020800

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000fd4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <MX_GPIO_Init+0x350>)
 8000ff2:	f002 fafb 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTACT_6_Pin;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONTACT_6_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_GPIO_Init+0x354>)
 800100a:	f002 faef 	bl	80035ec <HAL_GPIO_Init>

}
 800100e:	bf00      	nop
 8001010:	3738      	adds	r7, #56	; 0x38
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021800 	.word	0x40021800
 800101c:	40021000 	.word	0x40021000

08001020 <F_GPIO_ToogleLed1>:
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
	}else{
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
	}
}
void F_GPIO_ToogleLed1(void){
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	if((LED_1_GPIO_Port->ODR & LED_1_Pin) > 0){
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <F_GPIO_ToogleLed1+0x34>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <F_GPIO_ToogleLed1+0x1e>
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <F_GPIO_ToogleLed1+0x34>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <F_GPIO_ToogleLed1+0x34>)
 8001036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800103a:	6153      	str	r3, [r2, #20]
	}else{
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
	}
}
 800103c:	e005      	b.n	800104a <F_GPIO_ToogleLed1+0x2a>
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <F_GPIO_ToogleLed1+0x34>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <F_GPIO_ToogleLed1+0x34>)
 8001044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001048:	6153      	str	r3, [r2, #20]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40020400 	.word	0x40020400

08001058 <F_GPIO_ToogleLed2>:
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
	}else{
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
	}
}
void F_GPIO_ToogleLed2(void){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	if((LED_4_GPIO_Port->ODR & LED_4_Pin) > 0){
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <F_GPIO_ToogleLed2+0x34>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <F_GPIO_ToogleLed2+0x1e>
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <F_GPIO_ToogleLed2+0x34>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <F_GPIO_ToogleLed2+0x34>)
 800106e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001072:	6153      	str	r3, [r2, #20]
	}else{
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
	}
}
 8001074:	e005      	b.n	8001082 <F_GPIO_ToogleLed2+0x2a>
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <F_GPIO_ToogleLed2+0x34>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <F_GPIO_ToogleLed2+0x34>)
 800107c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001080:	6153      	str	r3, [r2, #20]
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40020400 	.word	0x40020400

08001090 <F_GPIO_ToogleLed3>:
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
	}else{
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
	}
}
void F_GPIO_ToogleLed3(void){
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	if((LED_3_GPIO_Port->ODR & LED_3_Pin) > 0){
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <F_GPIO_ToogleLed3+0x34>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <F_GPIO_ToogleLed3+0x1e>
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <F_GPIO_ToogleLed3+0x34>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <F_GPIO_ToogleLed3+0x34>)
 80010a6:	f023 0308 	bic.w	r3, r3, #8
 80010aa:	6153      	str	r3, [r2, #20]
	}else{
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
	}
}
 80010ac:	e005      	b.n	80010ba <F_GPIO_ToogleLed3+0x2a>
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <F_GPIO_ToogleLed3+0x34>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <F_GPIO_ToogleLed3+0x34>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6153      	str	r3, [r2, #20]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40020000 	.word	0x40020000

080010c8 <F_GPIO_ToogleLed4>:
		LED_5_GPIO_Port->ODR &= ~LED_5_Pin;
	}else{
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
	}
}
void F_GPIO_ToogleLed4(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	if((LED_5_GPIO_Port->ODR & LED_5_Pin) > 0){
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <F_GPIO_ToogleLed4+0x34>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <F_GPIO_ToogleLed4+0x1e>
		LED_5_GPIO_Port->ODR &= ~LED_5_Pin;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <F_GPIO_ToogleLed4+0x34>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <F_GPIO_ToogleLed4+0x34>)
 80010de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010e2:	6153      	str	r3, [r2, #20]
	}else{
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
	}
}
 80010e4:	e005      	b.n	80010f2 <F_GPIO_ToogleLed4+0x2a>
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <F_GPIO_ToogleLed4+0x34>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <F_GPIO_ToogleLed4+0x34>)
 80010ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f0:	6153      	str	r3, [r2, #20]
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40020c00 	.word	0x40020c00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f023 0201 	bic.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	60da      	str	r2, [r3, #12]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4013      	ands	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40023800 	.word	0x40023800

080012c8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4013      	ands	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	; 0x38
 80012fc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	2220      	movs	r2, #32
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f018 f93c 	bl	8019584 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff ffbb 	bl	8001298 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001326:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001328:	2302      	movs	r3, #2
 800132a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001334:	2301      	movs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001338:	2304      	movs	r3, #4
 800133a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4827      	ldr	r0, [pc, #156]	; (80013e0 <MX_I2C1_Init+0xe8>)
 8001342:	f005 ff0c 	bl	800715e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001346:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800134a:	f7ff ffbd 	bl	80012c8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800134e:	f7ff fed7 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001352:	4603      	mov	r3, r0
 8001354:	2200      	movs	r2, #0
 8001356:	2105      	movs	r1, #5
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff27 	bl	80011ac <NVIC_EncodePriority>
 800135e:	4603      	mov	r3, r0
 8001360:	4619      	mov	r1, r3
 8001362:	201f      	movs	r0, #31
 8001364:	f7ff fef8 	bl	8001158 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001368:	201f      	movs	r0, #31
 800136a:	f7ff fed7 	bl	800111c <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800136e:	f7ff fec7 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001372:	4603      	mov	r3, r0
 8001374:	2200      	movs	r2, #0
 8001376:	2105      	movs	r1, #5
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff17 	bl	80011ac <NVIC_EncodePriority>
 800137e:	4603      	mov	r3, r0
 8001380:	4619      	mov	r1, r3
 8001382:	2020      	movs	r0, #32
 8001384:	f7ff fee8 	bl	8001158 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001388:	2020      	movs	r0, #32
 800138a:	f7ff fec7 	bl	800111c <__NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800138e:	4815      	ldr	r0, [pc, #84]	; (80013e4 <MX_I2C1_Init+0xec>)
 8001390:	f7ff ff72 	bl	8001278 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_I2C1_Init+0xec>)
 8001396:	f7ff ff4c 	bl	8001232 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800139a:	4812      	ldr	r0, [pc, #72]	; (80013e4 <MX_I2C1_Init+0xec>)
 800139c:	f7ff ff39 	bl	8001212 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_I2C1_Init+0xf0>)
 80013a6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80013b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80013be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <MX_I2C1_Init+0xec>)
 80013cc:	f006 f848 	bl	8007460 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_I2C1_Init+0xec>)
 80013d4:	f7ff ff3d 	bl	8001252 <LL_I2C_SetOwnAddress2>

}
 80013d8:	bf00      	nop
 80013da:	3738      	adds	r7, #56	; 0x38
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40005400 	.word	0x40005400
 80013e8:	000186a0 	.word	0x000186a0

080013ec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	2220      	movs	r2, #32
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f018 f8c2 	bl	8019584 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001410:	2020      	movs	r0, #32
 8001412:	f7ff ff41 	bl	8001298 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001416:	2303      	movs	r3, #3
 8001418:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800141a:	2302      	movs	r3, #2
 800141c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001422:	2301      	movs	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001426:	2301      	movs	r3, #1
 8001428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800142a:	2304      	movs	r3, #4
 800142c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4818      	ldr	r0, [pc, #96]	; (8001494 <MX_I2C2_Init+0xa8>)
 8001434:	f005 fe93 	bl	800715e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001438:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800143c:	f7ff ff44 	bl	80012c8 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <MX_I2C2_Init+0xac>)
 8001442:	f7ff ff19 	bl	8001278 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8001446:	4814      	ldr	r0, [pc, #80]	; (8001498 <MX_I2C2_Init+0xac>)
 8001448:	f7ff fef3 	bl	8001232 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <MX_I2C2_Init+0xac>)
 800144e:	f7ff fee0 	bl	8001212 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_I2C2_Init+0xb0>)
 8001458:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800146a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	4619      	mov	r1, r3
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_I2C2_Init+0xac>)
 800147e:	f005 ffef 	bl	8007460 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8001482:	2100      	movs	r1, #0
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_I2C2_Init+0xac>)
 8001486:	f7ff fee4 	bl	8001252 <LL_I2C_SetOwnAddress2>

}
 800148a:	bf00      	nop
 800148c:	3738      	adds	r7, #56	; 0x38
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021400 	.word	0x40021400
 8001498:	40005800 	.word	0x40005800
 800149c:	000186a0 	.word	0x000186a0

080014a0 <F_I2C1_WriteValue>:
/* USER CODE BEGIN 1 */

/**
 * Write a single value in a slave register
 */
int F_I2C1_WriteValue(uint8_t slave_addr, uint8_t value){
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i

	__disable_irq();

	int i2c_status = I2C_STATUS_OK;
 80014b2:	2301      	movs	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
	uint32_t timeout = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
//	uint16_t i = 0;

	// Send start
	I2C1->CR1 |= I2C_CR1_START; // send START bit
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <F_I2C1_WriteValue+0xbc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a27      	ldr	r2, [pc, #156]	; (800155c <F_I2C1_WriteValue+0xbc>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 80014c6:	e008      	b.n	80014da <F_I2C1_WriteValue+0x3a>
		if(timeout > I2C_TIMEOUT){
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4a25      	ldr	r2, [pc, #148]	; (8001560 <F_I2C1_WriteValue+0xc0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <F_I2C1_WriteValue+0x34>
			//printf("Erreur : Start Condition \n");
			return I2C_STATUS_KO;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e03c      	b.n	800154e <F_I2C1_WriteValue+0xae>
		}
	timeout++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
	while (!(I2C1->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <F_I2C1_WriteValue+0xbc>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <F_I2C1_WriteValue+0x28>
	}
	timeout=0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
	// Send slave address
	I2C1->DR = (slave_addr<<1) & 0xFE  ;	// address + write
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4a1b      	ldr	r2, [pc, #108]	; (800155c <F_I2C1_WriteValue+0xbc>)
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80014f4:	e008      	b.n	8001508 <F_I2C1_WriteValue+0x68>
		if(timeout > I2C_TIMEOUT){
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <F_I2C1_WriteValue+0xc0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <F_I2C1_WriteValue+0x62>
			//printf("Erreur : Send slave address \n");
			return I2C_STATUS_KO;
 80014fe:	2300      	movs	r3, #0
 8001500:	e025      	b.n	800154e <F_I2C1_WriteValue+0xae>
		}
		timeout++;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <F_I2C1_WriteValue+0xbc>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <F_I2C1_WriteValue+0x56>
	}
	timeout=0;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
	i2c_status = I2C1->SR2; // read status to clear flag
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <F_I2C1_WriteValue+0xbc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	60bb      	str	r3, [r7, #8]

	// Send register address
	I2C1->DR = value;
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <F_I2C1_WriteValue+0xbc>)
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	6113      	str	r3, [r2, #16]
	while ((!(I2C1->SR1 & I2C_SR1_TXE)) && (!(I2C1->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8001524:	bf00      	nop
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <F_I2C1_WriteValue+0xbc>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	2b00      	cmp	r3, #0
 8001530:	d105      	bne.n	800153e <F_I2C1_WriteValue+0x9e>
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <F_I2C1_WriteValue+0xbc>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f3      	beq.n	8001526 <F_I2C1_WriteValue+0x86>


	I2C1->CR1 |= I2C_CR1_STOP; // send STOP bit
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <F_I2C1_WriteValue+0xbc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <F_I2C1_WriteValue+0xbc>)
 8001544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001548:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800154a:	b662      	cpsie	i

	__enable_irq();

	return i2c_status;
 800154c:	68bb      	ldr	r3, [r7, #8]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40005400 	.word	0x40005400
 8001560:	000186a0 	.word	0x000186a0

08001564 <LL_I2C_Enable>:
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f000 feb6 	bl	80022f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f81a 	bl	80015c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff fb9a 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001594:	f000 fdcc 	bl	8002130 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001598:	f7ff feae 	bl	80012f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800159c:	f7ff ff26 	bl	80013ec <MX_I2C2_Init>
  MX_TIM4_Init();
 80015a0:	f000 fb4e 	bl	8001c40 <MX_TIM4_Init>
  MX_UART4_Init();
 80015a4:	f000 fd9a 	bl	80020dc <MX_UART4_Init>
  MX_TIM2_Init();
 80015a8:	f000 fa56 	bl	8001a58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015ac:	f000 face 	bl	8001b4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Init_Motors();
  LL_I2C_Enable(I2C1);
 80015b0:	4803      	ldr	r0, [pc, #12]	; (80015c0 <main+0x3c>)
 80015b2:	f7ff ffd7 	bl	8001564 <LL_I2C_Enable>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80015b6:	f7ff fadb 	bl	8000b70 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015ba:	f009 fbeb 	bl	800ad94 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015be:	e7fe      	b.n	80015be <main+0x3a>
 80015c0:	40005400 	.word	0x40005400

080015c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b094      	sub	sp, #80	; 0x50
 80015c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ca:	f107 0320 	add.w	r3, r7, #32
 80015ce:	2230      	movs	r2, #48	; 0x30
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f017 ffd6 	bl	8019584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <SystemClock_Config+0xcc>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <SystemClock_Config+0xcc>)
 80015f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <SystemClock_Config+0xcc>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <SystemClock_Config+0xd0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <SystemClock_Config+0xd0>)
 800160e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <SystemClock_Config+0xd0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001620:	2301      	movs	r3, #1
 8001622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001634:	2304      	movs	r3, #4
 8001636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001638:	23a8      	movs	r3, #168	; 0xa8
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163c:	2302      	movs	r3, #2
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001640:	2307      	movs	r3, #7
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fb1d 	bl	8004c88 <HAL_RCC_OscConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001654:	f000 f832 	bl	80016bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	230f      	movs	r3, #15
 800165a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165c:	2302      	movs	r3, #2
 800165e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2105      	movs	r1, #5
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fd48 	bl	800510c <HAL_RCC_ClockConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001682:	f000 f81b 	bl	80016bc <Error_Handler>
  }
}
 8001686:	bf00      	nop
 8001688:	3750      	adds	r7, #80	; 0x50
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000

08001698 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016aa:	f000 fe47 	bl	800233c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40014400 	.word	0x40014400

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_MspInit+0x54>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_MspInit+0x54>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_MspInit+0x54>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_MspInit+0x54>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_MspInit+0x54>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_MspInit+0x54>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	210f      	movs	r1, #15
 800170e:	f06f 0001 	mvn.w	r0, #1
 8001712:	f000 ff0d 	bl	8002530 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	2019      	movs	r0, #25
 800173a:	f000 fef9 	bl	8002530 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800173e:	2019      	movs	r0, #25
 8001740:	f000 ff12 	bl	8002568 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_InitTick+0xa4>)
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <HAL_InitTick+0xa4>)
 800174e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001752:	6453      	str	r3, [r2, #68]	; 0x44
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_InitTick+0xa4>)
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001760:	f107 0210 	add.w	r2, r7, #16
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f003 febc 	bl	80054e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001770:	f003 fea6 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8001774:	4603      	mov	r3, r0
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	4a13      	ldr	r2, [pc, #76]	; (80017cc <HAL_InitTick+0xa8>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	3b01      	subs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_InitTick+0xac>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_InitTick+0xb0>)
 800178c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_InitTick+0xac>)
 8001790:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001794:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_InitTick+0xac>)
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_InitTick+0xac>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_InitTick+0xac>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80017a8:	4809      	ldr	r0, [pc, #36]	; (80017d0 <HAL_InitTick+0xac>)
 80017aa:	f003 fecf 	bl	800554c <HAL_TIM_Base_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d104      	bne.n	80017be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <HAL_InitTick+0xac>)
 80017b6:	f003 fef4 	bl	80055a2 <HAL_TIM_Base_Start_IT>
 80017ba:	4603      	mov	r3, r0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	431bde83 	.word	0x431bde83
 80017d0:	20004394 	.word	0x20004394
 80017d4:	40014400 	.word	0x40014400

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001812:	f003 ff54 	bl	80056be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20004394 	.word	0x20004394

08001820 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(UART4->SR & USART_SR_RXNE){
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <UART4_IRQHandler+0x34>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00c      	beq.n	8001876 <UART4_IRQHandler+0x2a>
		UART4->SR &= ~USART_SR_RXNE;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <UART4_IRQHandler+0x34>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <UART4_IRQHandler+0x34>)
 8001862:	f023 0320 	bic.w	r3, r3, #32
 8001866:	6013      	str	r3, [r2, #0]

		F_GPIO_ToogleLed3();
 8001868:	f7ff fc12 	bl	8001090 <F_GPIO_ToogleLed3>
		g_uart_buff = UART4->DR;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <UART4_IRQHandler+0x34>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <UART4_IRQHandler+0x38>)
 8001874:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <UART4_IRQHandler+0x3c>)
 8001878:	f004 ff26 	bl	80066c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40004c00 	.word	0x40004c00
 8001884:	200043d4 	.word	0x200043d4
 8001888:	20004498 	.word	0x20004498

0800188c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <ETH_IRQHandler+0x10>)
 8001892:	f001 fa7f 	bl	8002d94 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20005dec 	.word	0x20005dec

080018a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <OTG_FS_IRQHandler+0x10>)
 80018a6:	f002 f9b4 	bl	8003c12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000c018 	.word	0x2000c018

080018b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e00a      	b.n	80018dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c6:	f3af 8000 	nop.w
 80018ca:	4601      	mov	r1, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf0      	blt.n	80018c6 <_read+0x12>
	}

return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e009      	b.n	8001914 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf1      	blt.n	8001900 <_write+0x12>
	}
	return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x50>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x16>
		heap_end = &end;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <_sbrk+0x50>)
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <_sbrk+0x54>)
 80019a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <_sbrk+0x50>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <_sbrk+0x50>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	466a      	mov	r2, sp
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d905      	bls.n	80019c6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <_sbrk+0x58>)
 80019bc:	220c      	movs	r2, #12
 80019be:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c4:	e006      	b.n	80019d4 <_sbrk+0x44>
	}

	heap_end += incr;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <_sbrk+0x50>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <_sbrk+0x50>)
 80019d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	2000045c 	.word	0x2000045c
 80019e4:	2000c420 	.word	0x2000c420
 80019e8:	2000ab74 	.word	0x2000ab74

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <SystemInit+0x60>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <SystemInit+0x60>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <SystemInit+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <SystemInit+0x64>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <SystemInit+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <SystemInit+0x64>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <SystemInit+0x64>)
 8001a18:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <SystemInit+0x64>)
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <SystemInit+0x68>)
 8001a26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <SystemInit+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <SystemInit+0x64>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <SystemInit+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SystemInit+0x60>)
 8001a3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a40:	609a      	str	r2, [r3, #8]
#endif
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	24003010 	.word	0x24003010

08001a58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0318 	add.w	r3, r7, #24
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aa8:	4827      	ldr	r0, [pc, #156]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001aaa:	f003 fd4f 	bl	800554c <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001ab4:	f7ff fe02 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4820      	ldr	r0, [pc, #128]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001ac6:	f004 f865 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f7ff fdf4 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001ad4:	481c      	ldr	r0, [pc, #112]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001ad6:	f003 fdbd 	bl	8005654 <HAL_TIM_IC_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ae0:	f7ff fdec 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4619      	mov	r1, r3
 8001af2:	4815      	ldr	r0, [pc, #84]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001af4:	f004 fd42 	bl	800657c <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001afe:	f7ff fddd 	bl	80016bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b02:	230a      	movs	r3, #10
 8001b04:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b06:	2301      	movs	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	2200      	movs	r2, #0
 8001b16:	4619      	mov	r1, r3
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001b1a:	f003 fed8 	bl	80058ce <HAL_TIM_IC_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001b24:	f7ff fdca 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_TIM2_Init+0xf0>)
 8001b30:	f003 fecd 	bl	80058ce <HAL_TIM_IC_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001b3a:	f7ff fdbf 	bl	80016bc <Error_Handler>
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20004458 	.word	0x20004458

08001b4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0318 	add.w	r3, r7, #24
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001b76:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001b78:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <MX_TIM3_Init+0xf0>)
 8001b7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b9a:	4827      	ldr	r0, [pc, #156]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001b9c:	f003 fcd6 	bl	800554c <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8001ba6:	f7ff fd89 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4820      	ldr	r0, [pc, #128]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001bb8:	f003 ffec 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001bc2:	f7ff fd7b 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001bc6:	481c      	ldr	r0, [pc, #112]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001bc8:	f003 fd44 	bl	8005654 <HAL_TIM_IC_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001bd2:	f7ff fd73 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	4619      	mov	r1, r3
 8001be4:	4814      	ldr	r0, [pc, #80]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001be6:	f004 fcc9 	bl	800657c <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001bf0:	f7ff fd64 	bl	80016bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480b      	ldr	r0, [pc, #44]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001c0c:	f003 fe5f 	bl	80058ce <HAL_TIM_IC_ConfigChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8001c16:	f7ff fd51 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_TIM3_Init+0xec>)
 8001c22:	f003 fe54 	bl	80058ce <HAL_TIM_IC_ConfigChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001c2c:	f7ff fd46 	bl	80016bc <Error_Handler>
  }

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20004418 	.word	0x20004418
 8001c3c:	40000400 	.word	0x40000400

08001c40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	; 0x38
 8001c44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <MX_TIM4_Init+0x104>)
 8001c74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001c76:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2250;
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001c84:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c96:	482a      	ldr	r0, [pc, #168]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001c98:	f003 fc58 	bl	800554c <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ca2:	f7ff fd0b 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4823      	ldr	r0, [pc, #140]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001cb4:	f003 ff6e 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001cbe:	f7ff fcfd 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cc2:	481f      	ldr	r0, [pc, #124]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001cc4:	f003 fc91 	bl	80055ea <HAL_TIM_PWM_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001cce:	f7ff fcf5 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cda:	f107 0320 	add.w	r3, r7, #32
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4817      	ldr	r0, [pc, #92]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001ce2:	f004 fc4b 	bl	800657c <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001cec:	f7ff fce6 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf0:	2360      	movs	r3, #96	; 0x60
 8001cf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8001cf4:	2314      	movs	r3, #20
 8001cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2208      	movs	r2, #8
 8001d04:	4619      	mov	r1, r3
 8001d06:	480e      	ldr	r0, [pc, #56]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001d08:	f003 fe7e 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001d12:	f7ff fcd3 	bl	80016bc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001d22:	f003 fe71 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001d2c:	f7ff fcc6 	bl	80016bc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <MX_TIM4_Init+0x100>)
 8001d32:	f000 f8b9 	bl	8001ea8 <HAL_TIM_MspPostInit>

}
 8001d36:	bf00      	nop
 8001d38:	3738      	adds	r7, #56	; 0x38
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200043d8 	.word	0x200043d8
 8001d44:	40000800 	.word	0x40000800

08001d48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d68:	d14b      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a41      	ldr	r2, [pc, #260]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = QEI_M1_CH1_Pin;
 8001dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QEI_M1_CH1_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	482f      	ldr	r0, [pc, #188]	; (8001e98 <HAL_TIM_Base_MspInit+0x150>)
 8001ddc:	f001 fc06 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QEI_M1_CH2_Pin;
 8001de0:	2308      	movs	r3, #8
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001df0:	2301      	movs	r3, #1
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QEI_M1_CH2_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4828      	ldr	r0, [pc, #160]	; (8001e9c <HAL_TIM_Base_MspInit+0x154>)
 8001dfc:	f001 fbf6 	bl	80035ec <HAL_GPIO_Init>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e00:	e044      	b.n	8001e8c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM3)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <HAL_TIM_Base_MspInit+0x158>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d12c      	bne.n	8001e66 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	6313      	str	r3, [r2, #48]	; 0x30
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI_M2_CH1_Pin|QEI_M2_CH2_Pin;
 8001e44:	2330      	movs	r3, #48	; 0x30
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e54:	2302      	movs	r3, #2
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <HAL_TIM_Base_MspInit+0x154>)
 8001e60:	f001 fbc4 	bl	80035ec <HAL_GPIO_Init>
}
 8001e64:	e012      	b.n	8001e8c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM4)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <HAL_TIM_Base_MspInit+0x15c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d10d      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <HAL_TIM_Base_MspInit+0x14c>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3738      	adds	r7, #56	; 0x38
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40000800 	.word	0x40000800

08001ea8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <HAL_TIM_MspPostInit+0x68>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d11e      	bne.n	8001f08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_TIM_MspPostInit+0x6c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_TIM_MspPostInit+0x6c>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_TIM_MspPostInit+0x6c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = CMD_MOTEUR_DROIT_Pin|CMD_MOTEUR_GAUCHE_Pin;
 8001ee6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001eea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4619      	mov	r1, r3
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <HAL_TIM_MspPostInit+0x70>)
 8001f04:	f001 fb72 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40000800 	.word	0x40000800
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020c00 	.word	0x40020c00

08001f1c <__NVIC_GetPriorityGrouping>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4907      	ldr	r1, [pc, #28]	; (8001f70 <__NVIC_EnableIRQ+0x38>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_SetPriority>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <NVIC_EncodePriority>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	2304      	movcs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d902      	bls.n	8001ff8 <NVIC_EncodePriority+0x30>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b03      	subs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <NVIC_EncodePriority+0x32>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43d9      	mvns	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	4313      	orrs	r3, r2
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60da      	str	r2, [r3, #12]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	615a      	str	r2, [r3, #20]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <LL_AHB1_GRP1_EnableClock>:
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40023800 	.word	0x40023800

080020ac <LL_APB1_GRP1_EnableClock>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4313      	orrs	r3, r2
 80020be:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40023800 	.word	0x40023800

080020dc <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_UART4_Init+0x4c>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <MX_UART4_Init+0x50>)
 80020e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_UART4_Init+0x4c>)
 80020e8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80020ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_UART4_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_UART4_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_UART4_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_UART4_Init+0x4c>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_UART4_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_UART4_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_UART4_Init+0x4c>)
 8002114:	f004 fa8b 	bl	800662e <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800211e:	f7ff facd 	bl	80016bc <Error_Handler>
  }

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20004498 	.word	0x20004498
 800212c:	40004c00 	.word	0x40004c00

08002130 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	615a      	str	r2, [r3, #20]
 8002148:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
 8002158:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800215a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800215e:	f7ff ffa5 	bl	80020ac <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002162:	2008      	movs	r0, #8
 8002164:	f7ff ff8a 	bl	800207c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002168:	f44f 7340 	mov.w	r3, #768	; 0x300
 800216c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800216e:	2302      	movs	r3, #2
 8002170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800217a:	2301      	movs	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800217e:	2307      	movs	r3, #7
 8002180:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4819      	ldr	r0, [pc, #100]	; (80021ec <MX_USART3_UART_Init+0xbc>)
 8002188:	f004 ffe9 	bl	800715e <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800218c:	f7ff fec6 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 8002190:	4603      	mov	r3, r0
 8002192:	2200      	movs	r2, #0
 8002194:	2105      	movs	r1, #5
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff16 	bl	8001fc8 <NVIC_EncodePriority>
 800219c:	4603      	mov	r3, r0
 800219e:	4619      	mov	r1, r3
 80021a0:	2027      	movs	r0, #39	; 0x27
 80021a2:	f7ff fee7 	bl	8001f74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80021a6:	2027      	movs	r0, #39	; 0x27
 80021a8:	f7ff fec6 	bl	8001f38 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 57600;
 80021ac:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80021b0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80021be:	230c      	movs	r3, #12
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <MX_USART3_UART_Init+0xc0>)
 80021d2:	f005 fba7 	bl	8007924 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <MX_USART3_UART_Init+0xc0>)
 80021d8:	f7ff ff39 	bl	800204e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <MX_USART3_UART_Init+0xc0>)
 80021de:	f7ff ff26 	bl	800202e <LL_USART_Enable>

}
 80021e2:	bf00      	nop
 80021e4:	3738      	adds	r7, #56	; 0x38
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40004800 	.word	0x40004800

080021f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a21      	ldr	r2, [pc, #132]	; (8002298 <HAL_UART_MspInit+0xa4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d13c      	bne.n	8002290 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_UART_MspInit+0xa8>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <HAL_UART_MspInit+0xa8>)
 8002220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_UART_MspInit+0xa8>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_UART_MspInit+0xa8>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_UART_MspInit+0xa8>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_UART_MspInit+0xa8>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800224e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002258:	2301      	movs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002260:	2308      	movs	r3, #8
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <HAL_UART_MspInit+0xac>)
 800226c:	f001 f9be 	bl	80035ec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2105      	movs	r1, #5
 8002274:	2034      	movs	r0, #52	; 0x34
 8002276:	f000 f95b 	bl	8002530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800227a:	2034      	movs	r0, #52	; 0x34
 800227c:	f000 f974 	bl	8002568 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */
	UART4->CR1 |= USART_CR1_UE 	// UART Enable
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_UART_MspInit+0xa4>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_UART_MspInit+0xa4>)
 8002286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800228a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800228e:	60d3      	str	r3, [r2, #12]
				| USART_CR1_RE		// Rx enbale
				| USART_CR1_RXNEIE;	// Rx enable interrupt
  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002290:	bf00      	nop
 8002292:	3728      	adds	r7, #40	; 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40004c00 	.word	0x40004c00
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020800 	.word	0x40020800

080022a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022dc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022aa:	e003      	b.n	80022b4 <LoopCopyDataInit>

080022ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022b2:	3104      	adds	r1, #4

080022b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022b4:	480b      	ldr	r0, [pc, #44]	; (80022e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022bc:	d3f6      	bcc.n	80022ac <CopyDataInit>
  ldr  r2, =_sbss
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022c0:	e002      	b.n	80022c8 <LoopFillZerobss>

080022c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022c4:	f842 3b04 	str.w	r3, [r2], #4

080022c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022cc:	d3f9      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ce:	f7ff fb8d 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f017 f909 	bl	80194e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d6:	f7ff f955 	bl	8001584 <main>
  bx  lr    
 80022da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022dc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80022e0:	0801cdb0 	.word	0x0801cdb0
  ldr  r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022e8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80022ec:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80022f0:	2000c420 	.word	0x2000c420

080022f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC_IRQHandler>
	...

080022f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_Init+0x40>)
 8002302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_Init+0x40>)
 800230e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_Init+0x40>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 f8fa 	bl	800251a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff f9fc 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232c:	f7ff f9ce 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023c00 	.word	0x40023c00

0800233c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x20>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x24>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_IncTick+0x24>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000004 	.word	0x20000004
 8002360:	200044d8 	.word	0x200044d8

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200044d8 	.word	0x200044d8

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002394:	d005      	beq.n	80023a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_Delay+0x40>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a2:	bf00      	nop
 80023a4:	f7ff ffde 	bl	8002364 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8f7      	bhi.n	80023a4 <HAL_Delay+0x28>
  {
  }
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000004 	.word	0x20000004

080023c0 <__NVIC_SetPriorityGrouping>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_GetPriorityGrouping>:
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ff4c 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002542:	f7ff ff61 	bl	8002408 <__NVIC_GetPriorityGrouping>
 8002546:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	6978      	ldr	r0, [r7, #20]
 800254e:	f7ff ffb1 	bl	80024b4 <NVIC_EncodePriority>
 8002552:	4602      	mov	r2, r0
 8002554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff80 	bl	8002460 <__NVIC_SetPriority>
}
 8002560:	bf00      	nop
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff54 	bl	8002424 <__NVIC_EnableIRQ>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d004      	beq.n	80025a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00c      	b.n	80025bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2205      	movs	r2, #5
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80025d8:	4baa      	ldr	r3, [pc, #680]	; (8002884 <HAL_ETH_Init+0x2bc>)
 80025da:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e185      	b.n	80028fa <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f006 fd3e 	bl	8009084 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	4b9e      	ldr	r3, [pc, #632]	; (8002888 <HAL_ETH_Init+0x2c0>)
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	4a9d      	ldr	r2, [pc, #628]	; (8002888 <HAL_ETH_Init+0x2c0>)
 8002612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002616:	6453      	str	r3, [r2, #68]	; 0x44
 8002618:	4b9b      	ldr	r3, [pc, #620]	; (8002888 <HAL_ETH_Init+0x2c0>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002624:	4b99      	ldr	r3, [pc, #612]	; (800288c <HAL_ETH_Init+0x2c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a98      	ldr	r2, [pc, #608]	; (800288c <HAL_ETH_Init+0x2c4>)
 800262a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800262e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002630:	4b96      	ldr	r3, [pc, #600]	; (800288c <HAL_ETH_Init+0x2c4>)
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4994      	ldr	r1, [pc, #592]	; (800288c <HAL_ETH_Init+0x2c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002654:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002656:	f7ff fe85 	bl	8002364 <HAL_GetTick>
 800265a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800265c:	e011      	b.n	8002682 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800265e:	f7ff fe81 	bl	8002364 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800266c:	d909      	bls.n	8002682 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2203      	movs	r2, #3
 8002672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e13b      	b.n	80028fa <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e4      	bne.n	800265e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f023 031c 	bic.w	r3, r3, #28
 80026a2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026a4:	f002 feec 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80026a8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4a78      	ldr	r2, [pc, #480]	; (8002890 <HAL_ETH_Init+0x2c8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d908      	bls.n	80026c4 <HAL_ETH_Init+0xfc>
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4a77      	ldr	r2, [pc, #476]	; (8002894 <HAL_ETH_Init+0x2cc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d804      	bhi.n	80026c4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e027      	b.n	8002714 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4a73      	ldr	r2, [pc, #460]	; (8002894 <HAL_ETH_Init+0x2cc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d908      	bls.n	80026de <HAL_ETH_Init+0x116>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4a72      	ldr	r2, [pc, #456]	; (8002898 <HAL_ETH_Init+0x2d0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d804      	bhi.n	80026de <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f043 030c 	orr.w	r3, r3, #12
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	e01a      	b.n	8002714 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4a6d      	ldr	r2, [pc, #436]	; (8002898 <HAL_ETH_Init+0x2d0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d903      	bls.n	80026ee <HAL_ETH_Init+0x126>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4a6c      	ldr	r2, [pc, #432]	; (800289c <HAL_ETH_Init+0x2d4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d911      	bls.n	8002712 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4a6a      	ldr	r2, [pc, #424]	; (800289c <HAL_ETH_Init+0x2d4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d908      	bls.n	8002708 <HAL_ETH_Init+0x140>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_ETH_Init+0x2d8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d804      	bhi.n	8002708 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e005      	b.n	8002714 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	e000      	b.n	8002714 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002712:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800271c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002720:	2100      	movs	r1, #0
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fc19 	bl	8002f5a <HAL_ETH_WritePHYRegister>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fca5 	bl	8003084 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0d9      	b.n	80028fa <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002746:	20ff      	movs	r0, #255	; 0xff
 8002748:	f7ff fe18 	bl	800237c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a7 	beq.w	80028a4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002756:	f7ff fe05 	bl	8002364 <HAL_GetTick>
 800275a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	461a      	mov	r2, r3
 8002762:	2101      	movs	r1, #1
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fb90 	bl	8002e8a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800276a:	f7ff fdfb 	bl	8002364 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d90f      	bls.n	800279c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002780:	6939      	ldr	r1, [r7, #16]
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fc7e 	bl	8003084 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0ae      	b.n	80028fa <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0da      	beq.n	800275c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80027a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027aa:	2100      	movs	r1, #0
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fbd4 	bl	8002f5a <HAL_ETH_WritePHYRegister>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027bc:	6939      	ldr	r1, [r7, #16]
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fc60 	bl	8003084 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80027cc:	2301      	movs	r3, #1
 80027ce:	e094      	b.n	80028fa <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff fdc8 	bl	8002364 <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	461a      	mov	r2, r3
 80027dc:	2101      	movs	r1, #1
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fb53 	bl	8002e8a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80027e4:	f7ff fdbe 	bl	8002364 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d90f      	bls.n	8002816 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80027fa:	6939      	ldr	r1, [r7, #16]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fc41 	bl	8003084 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e071      	b.n	80028fa <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0da      	beq.n	80027d6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	461a      	mov	r2, r3
 8002826:	211f      	movs	r1, #31
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fb2e 	bl	8002e8a <HAL_ETH_ReadPHYRegister>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002838:	6939      	ldr	r1, [r7, #16]
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fc22 	bl	8003084 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002848:	2301      	movs	r3, #1
 800284a:	e056      	b.n	80028fa <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	e002      	b.n	8002866 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	e037      	b.n	80028e8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e032      	b.n	80028e8 <HAL_ETH_Init+0x320>
 8002882:	bf00      	nop
 8002884:	03938700 	.word	0x03938700
 8002888:	40023800 	.word	0x40023800
 800288c:	40013800 	.word	0x40013800
 8002890:	01312cff 	.word	0x01312cff
 8002894:	02160ebf 	.word	0x02160ebf
 8002898:	039386ff 	.word	0x039386ff
 800289c:	05f5e0ff 	.word	0x05f5e0ff
 80028a0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	08db      	lsrs	r3, r3, #3
 80028aa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	2100      	movs	r1, #0
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fb4c 	bl	8002f5a <HAL_ETH_WritePHYRegister>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80028cc:	6939      	ldr	r1, [r7, #16]
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fbd8 	bl	8003084 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e00c      	b.n	80028fa <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80028e0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80028e4:	f7ff fd4a 	bl	800237c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80028e8:	6939      	ldr	r1, [r7, #16]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fbca 	bl	8003084 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop

08002904 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_ETH_DMATxDescListInit+0x20>
 8002920:	2302      	movs	r3, #2
 8002922:	e052      	b.n	80029ca <HAL_ETH_DMATxDescListInit+0xc6>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e030      	b.n	80029a2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	4413      	add	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002950:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	461a      	mov	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	3b01      	subs	r3, #1
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	d208      	bcs.n	8002996 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3301      	adds	r3, #1
 8002988:	015b      	lsls	r3, r3, #5
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	4413      	add	r3, r2
 800298e:	461a      	mov	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	e002      	b.n	800299c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d3ca      	bcc.n	8002940 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b4:	3310      	adds	r3, #16
 80029b6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_ETH_DMARxDescListInit+0x20>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e056      	b.n	8002aa4 <HAL_ETH_DMARxDescListInit+0xce>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e034      	b.n	8002a7c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	015b      	lsls	r3, r3, #5
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4413      	add	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a22:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a2a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d208      	bcs.n	8002a70 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3301      	adds	r3, #1
 8002a62:	015b      	lsls	r3, r3, #5
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	4413      	add	r3, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e002      	b.n	8002a76 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3c6      	bcc.n	8002a12 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a8e:	330c      	adds	r3, #12
 8002a90:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_ETH_TransmitFrame+0x24>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e0cd      	b.n	8002c70 <HAL_ETH_TransmitFrame+0x1c0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0b8      	b.n	8002c70 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	da09      	bge.n	8002b1c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2212      	movs	r2, #18
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0a9      	b.n	8002c70 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d915      	bls.n	8002b52 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4a54      	ldr	r2, [pc, #336]	; (8002c7c <HAL_ETH_TransmitFrame+0x1cc>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0a9b      	lsrs	r3, r3, #10
 8002b30:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4b51      	ldr	r3, [pc, #324]	; (8002c7c <HAL_ETH_TransmitFrame+0x1cc>)
 8002b36:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3a:	0a9b      	lsrs	r3, r3, #10
 8002b3c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e001      	b.n	8002b56 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002b52:	2301      	movs	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d11c      	bne.n	8002b96 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002b6a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b76:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b86:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b94:	e04b      	b.n	8002c2e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e044      	b.n	8002c26 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002baa:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d107      	bne.n	8002bc2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bc0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002bca:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d116      	bne.n	8002c04 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002be4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <HAL_ETH_TransmitFrame+0x1d0>)
 8002bea:	fb02 f203 	mul.w	r2, r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002bf6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002c02:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c12:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	3301      	adds	r3, #1
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d3b6      	bcc.n	8002b9c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c36:	3314      	adds	r3, #20
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	ac02b00b 	.word	0xac02b00b
 8002c80:	fffffa0c 	.word	0xfffffa0c

08002c84 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e074      	b.n	8002d88 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002cae:	e05a      	b.n	8002d66 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce0:	e041      	b.n	8002d66 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
 8002d06:	e02e      	b.n	8002d66 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d103      	bne.n	8002d2a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d36:	1f1a      	subs	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e010      	b.n	8002d88 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db02      	blt.n	8002d76 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d99c      	bls.n	8002cb0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da4:	3314      	adds	r3, #20
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d112      	bne.n	8002dd6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f006 fa35 	bl	8009220 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dbe:	3314      	adds	r3, #20
 8002dc0:	2240      	movs	r2, #64	; 0x40
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd4:	e01b      	b.n	8002e0e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dde:	3314      	adds	r3, #20
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d111      	bne.n	8002e0e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f839 	bl	8002e62 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df8:	3314      	adds	r3, #20
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e16:	3314      	adds	r3, #20
 8002e18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e1c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e26:	3314      	adds	r3, #20
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e32:	d112      	bne.n	8002e5a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f81e 	bl	8002e76 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e42:	3314      	adds	r3, #20
 8002e44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e48:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	460b      	mov	r3, r1
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b82      	cmp	r3, #130	; 0x82
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
 8002eae:	e050      	b.n	8002f52 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2282      	movs	r2, #130	; 0x82
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 031c 	and.w	r3, r3, #28
 8002ec6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8a1b      	ldrh	r3, [r3, #16]
 8002ecc:	02db      	lsls	r3, r3, #11
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0302 	bic.w	r3, r3, #2
 8002eea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002efc:	f7ff fa32 	bl	8002364 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f02:	e015      	b.n	8002f30 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002f04:	f7ff fa2e 	bl	8002364 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d309      	bcc.n	8002f28 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e014      	b.n	8002f52 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e4      	bne.n	8002f04 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	460b      	mov	r3, r1
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b42      	cmp	r3, #66	; 0x42
 8002f7a:	d101      	bne.n	8002f80 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e04e      	b.n	800301e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2242      	movs	r2, #66	; 0x42
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 031c 	and.w	r3, r3, #28
 8002f96:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8a1b      	ldrh	r3, [r3, #16]
 8002f9c:	02db      	lsls	r3, r3, #11
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002fa6:	897b      	ldrh	r3, [r7, #10]
 8002fa8:	019b      	lsls	r3, r3, #6
 8002faa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002fd6:	f7ff f9c5 	bl	8002364 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fdc:	e015      	b.n	800300a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002fde:	f7ff f9c1 	bl	8002364 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d309      	bcc.n	8003002 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e00d      	b.n	800301e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e4      	bne.n	8002fde <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_ETH_Start+0x16>
 8003038:	2302      	movs	r3, #2
 800303a:	e01f      	b.n	800307c <HAL_ETH_Start+0x56>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fa1b 	bl	8003488 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa35 	bl	80034c2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa7f 	bl	800355c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa4c 	bl	80034fc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fa61 	bl	800352c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b0b0      	sub	sp, #192	; 0xc0
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030a0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80030b2:	2300      	movs	r3, #0
 80030b4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80030ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ce:	663b      	str	r3, [r7, #96]	; 0x60
 80030d0:	e001      	b.n	80030d6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80030d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030da:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030e0:	2300      	movs	r3, #0
 80030e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800315c:	4bac      	ldr	r3, [pc, #688]	; (8003410 <ETH_MACDMAConfig+0x38c>)
 800315e:	4013      	ands	r3, r2
 8003160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003164:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003168:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800316c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800316e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003170:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003176:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800317a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800317c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800317e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003184:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003188:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800318a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800318c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800318e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003190:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003194:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003198:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800319a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031ac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031b8:	2001      	movs	r0, #1
 80031ba:	f7ff f8df 	bl	800237c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031c6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80031ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031cc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80031ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80031d0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80031d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80031d6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80031d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80031dc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80031de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80031e2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80031e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80031e8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80031ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80031f4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031f6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003202:	2001      	movs	r0, #1
 8003204:	f7ff f8ba 	bl	800237c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003210:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800321a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003224:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003230:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003234:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003238:	4013      	ands	r3, r2
 800323a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800323e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003242:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003244:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003248:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800324a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800324e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003254:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800325a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800325c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003260:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003274:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003280:	2001      	movs	r0, #1
 8003282:	f7ff f87b 	bl	800237c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800328e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003290:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003294:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7ff f866 	bl	800237c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032b8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80032c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032cc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80032de:	2304      	movs	r3, #4
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80032e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80032e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003302:	2300      	movs	r3, #0
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330e:	3318      	adds	r3, #24
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003316:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800331a:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <ETH_MACDMAConfig+0x390>)
 800331c:	4013      	ands	r3, r2
 800331e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003322:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003324:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003326:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003328:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800332a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800332c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800332e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003330:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003332:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003334:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003336:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003338:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800333a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800333e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003342:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003344:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003356:	3318      	adds	r3, #24
 8003358:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800335c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003366:	3318      	adds	r3, #24
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800336e:	2001      	movs	r0, #1
 8003370:	f7ff f804 	bl	800237c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337c:	3318      	adds	r3, #24
 800337e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003382:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003388:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800338c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003390:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003394:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003398:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800339a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800339c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800339e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ac:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80033bc:	2001      	movs	r0, #1
 80033be:	f7fe ffdd 	bl	800237c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033ce:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d10f      	bne.n	80033f8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e0:	331c      	adds	r3, #28
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f4:	331c      	adds	r3, #28
 80033f6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	461a      	mov	r2, r3
 80033fe:	2100      	movs	r1, #0
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f809 	bl	8003418 <ETH_MACAddressConfig>
}
 8003406:	bf00      	nop
 8003408:	37c0      	adds	r7, #192	; 0xc0
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	ff20810f 	.word	0xff20810f
 8003414:	f8de3f23 	.word	0xf8de3f23

08003418 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3305      	adds	r3, #5
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	3204      	adds	r2, #4
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <ETH_MACAddressConfig+0x68>)
 800343a:	4413      	add	r3, r2
 800343c:	461a      	mov	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3303      	adds	r3, #3
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	061a      	lsls	r2, r3, #24
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3302      	adds	r3, #2
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	4313      	orrs	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	7812      	ldrb	r2, [r2, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <ETH_MACAddressConfig+0x6c>)
 800346a:	4413      	add	r3, r2
 800346c:	461a      	mov	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40028040 	.word	0x40028040
 8003484:	40028044 	.word	0x40028044

08003488 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0208 	orr.w	r2, r2, #8
 80034a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034ac:	2001      	movs	r0, #1
 80034ae:	f000 f87f 	bl	80035b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0204 	orr.w	r2, r2, #4
 80034dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034e6:	2001      	movs	r0, #1
 80034e8:	f000 f862 	bl	80035b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350c:	3318      	adds	r3, #24
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351c:	3318      	adds	r3, #24
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353c:	3318      	adds	r3, #24
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0202 	orr.w	r2, r2, #2
 8003548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354c:	3318      	adds	r3, #24
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003570:	3318      	adds	r3, #24
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800357c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003580:	3318      	adds	r3, #24
 8003582:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	3318      	adds	r3, #24
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003592:	2001      	movs	r0, #1
 8003594:	f000 f80c 	bl	80035b0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a2:	3318      	adds	r3, #24
 80035a4:	601a      	str	r2, [r3, #0]
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <ETH_Delay+0x34>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <ETH_Delay+0x38>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80035cc:	bf00      	nop
  } 
  while (Delay --);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1e5a      	subs	r2, r3, #1
 80035d2:	60fa      	str	r2, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f9      	bne.n	80035cc <ETH_Delay+0x1c>
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	20000000 	.word	0x20000000
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	; 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e177      	b.n	80038f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003608:	2201      	movs	r2, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	f040 8166 	bne.w	80038f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x4a>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b12      	cmp	r3, #18
 8003634:	d123      	bne.n	800367e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	08da      	lsrs	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3208      	adds	r2, #8
 800363e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	220f      	movs	r2, #15
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	08da      	lsrs	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3208      	adds	r2, #8
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d00b      	beq.n	80036d2 <HAL_GPIO_Init+0xe6>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d007      	beq.n	80036d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c6:	2b11      	cmp	r3, #17
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b12      	cmp	r3, #18
 80036d0:	d130      	bne.n	8003734 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2203      	movs	r2, #3
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003708:	2201      	movs	r2, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 0201 	and.w	r2, r3, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	2203      	movs	r2, #3
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80c0 	beq.w	80038f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_GPIO_Init+0x320>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	4a64      	ldr	r2, [pc, #400]	; (800390c <HAL_GPIO_Init+0x320>)
 800377c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003780:	6453      	str	r3, [r2, #68]	; 0x44
 8003782:	4b62      	ldr	r3, [pc, #392]	; (800390c <HAL_GPIO_Init+0x320>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800378e:	4a60      	ldr	r2, [pc, #384]	; (8003910 <HAL_GPIO_Init+0x324>)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	3302      	adds	r3, #2
 8003796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	220f      	movs	r2, #15
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a57      	ldr	r2, [pc, #348]	; (8003914 <HAL_GPIO_Init+0x328>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d037      	beq.n	800382a <HAL_GPIO_Init+0x23e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a56      	ldr	r2, [pc, #344]	; (8003918 <HAL_GPIO_Init+0x32c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d031      	beq.n	8003826 <HAL_GPIO_Init+0x23a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a55      	ldr	r2, [pc, #340]	; (800391c <HAL_GPIO_Init+0x330>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02b      	beq.n	8003822 <HAL_GPIO_Init+0x236>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a54      	ldr	r2, [pc, #336]	; (8003920 <HAL_GPIO_Init+0x334>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d025      	beq.n	800381e <HAL_GPIO_Init+0x232>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a53      	ldr	r2, [pc, #332]	; (8003924 <HAL_GPIO_Init+0x338>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01f      	beq.n	800381a <HAL_GPIO_Init+0x22e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_GPIO_Init+0x33c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d019      	beq.n	8003816 <HAL_GPIO_Init+0x22a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a51      	ldr	r2, [pc, #324]	; (800392c <HAL_GPIO_Init+0x340>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_GPIO_Init+0x226>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_GPIO_Init+0x344>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00d      	beq.n	800380e <HAL_GPIO_Init+0x222>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4f      	ldr	r2, [pc, #316]	; (8003934 <HAL_GPIO_Init+0x348>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <HAL_GPIO_Init+0x21e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a4e      	ldr	r2, [pc, #312]	; (8003938 <HAL_GPIO_Init+0x34c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_GPIO_Init+0x21a>
 8003802:	2309      	movs	r3, #9
 8003804:	e012      	b.n	800382c <HAL_GPIO_Init+0x240>
 8003806:	230a      	movs	r3, #10
 8003808:	e010      	b.n	800382c <HAL_GPIO_Init+0x240>
 800380a:	2308      	movs	r3, #8
 800380c:	e00e      	b.n	800382c <HAL_GPIO_Init+0x240>
 800380e:	2307      	movs	r3, #7
 8003810:	e00c      	b.n	800382c <HAL_GPIO_Init+0x240>
 8003812:	2306      	movs	r3, #6
 8003814:	e00a      	b.n	800382c <HAL_GPIO_Init+0x240>
 8003816:	2305      	movs	r3, #5
 8003818:	e008      	b.n	800382c <HAL_GPIO_Init+0x240>
 800381a:	2304      	movs	r3, #4
 800381c:	e006      	b.n	800382c <HAL_GPIO_Init+0x240>
 800381e:	2303      	movs	r3, #3
 8003820:	e004      	b.n	800382c <HAL_GPIO_Init+0x240>
 8003822:	2302      	movs	r3, #2
 8003824:	e002      	b.n	800382c <HAL_GPIO_Init+0x240>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_GPIO_Init+0x240>
 800382a:	2300      	movs	r3, #0
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	f002 0203 	and.w	r2, r2, #3
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	4093      	lsls	r3, r2
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800383c:	4934      	ldr	r1, [pc, #208]	; (8003910 <HAL_GPIO_Init+0x324>)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	089b      	lsrs	r3, r3, #2
 8003842:	3302      	adds	r3, #2
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384a:	4b3c      	ldr	r3, [pc, #240]	; (800393c <HAL_GPIO_Init+0x350>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800386e:	4a33      	ldr	r2, [pc, #204]	; (800393c <HAL_GPIO_Init+0x350>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003874:	4b31      	ldr	r3, [pc, #196]	; (800393c <HAL_GPIO_Init+0x350>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_GPIO_Init+0x350>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389e:	4b27      	ldr	r3, [pc, #156]	; (800393c <HAL_GPIO_Init+0x350>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_GPIO_Init+0x350>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <HAL_GPIO_Init+0x350>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ec:	4a13      	ldr	r2, [pc, #76]	; (800393c <HAL_GPIO_Init+0x350>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	f67f ae84 	bls.w	8003608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003900:	bf00      	nop
 8003902:	3724      	adds	r7, #36	; 0x24
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40023800 	.word	0x40023800
 8003910:	40013800 	.word	0x40013800
 8003914:	40020000 	.word	0x40020000
 8003918:	40020400 	.word	0x40020400
 800391c:	40020800 	.word	0x40020800
 8003920:	40020c00 	.word	0x40020c00
 8003924:	40021000 	.word	0x40021000
 8003928:	40021400 	.word	0x40021400
 800392c:	40021800 	.word	0x40021800
 8003930:	40021c00 	.word	0x40021c00
 8003934:	40022000 	.word	0x40022000
 8003938:	40022400 	.word	0x40022400
 800393c:	40013c00 	.word	0x40013c00

08003940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
 800394c:	4613      	mov	r3, r2
 800394e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003950:	787b      	ldrb	r3, [r7, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800395c:	e003      	b.n	8003966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	041a      	lsls	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	619a      	str	r2, [r3, #24]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003974:	b08f      	sub	sp, #60	; 0x3c
 8003976:	af0a      	add	r7, sp, #40	; 0x28
 8003978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e10f      	b.n	8003ba4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f015 fa94 	bl	8018ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f004 f955 	bl	8007c72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	687e      	ldr	r6, [r7, #4]
 80039d0:	466d      	mov	r5, sp
 80039d2:	f106 0410 	add.w	r4, r6, #16
 80039d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e6:	1d33      	adds	r3, r6, #4
 80039e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ea:	6838      	ldr	r0, [r7, #0]
 80039ec:	f004 f82c 	bl	8007a48 <USB_CoreInit>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0d0      	b.n	8003ba4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f004 f943 	bl	8007c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e04a      	b.n	8003aaa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	333d      	adds	r3, #61	; 0x3d
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	333c      	adds	r3, #60	; 0x3c
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	b298      	uxth	r0, r3
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3342      	adds	r3, #66	; 0x42
 8003a50:	4602      	mov	r2, r0
 8003a52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	333f      	adds	r3, #63	; 0x3f
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3344      	adds	r3, #68	; 0x44
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3348      	adds	r3, #72	; 0x48
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3350      	adds	r3, #80	; 0x50
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d3af      	bcc.n	8003a14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e044      	b.n	8003b44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	3301      	adds	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d3b5      	bcc.n	8003aba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	687e      	ldr	r6, [r7, #4]
 8003b56:	466d      	mov	r5, sp
 8003b58:	f106 0410 	add.w	r4, r6, #16
 8003b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b6c:	1d33      	adds	r3, r6, #4
 8003b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b70:	6838      	ldr	r0, [r7, #0]
 8003b72:	f004 f8b9 	bl	8007ce8 <USB_DevInit>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e00d      	b.n	8003ba4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f005 f8ae 	bl	8008cfe <USB_DevDisconnect>

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_PCD_Start+0x1c>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e020      	b.n	8003c0a <HAL_PCD_Start+0x5e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d109      	bne.n	8003bec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d005      	beq.n	8003bec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f005 f86c 	bl	8008cce <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f004 f828 	bl	8007c50 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c12:	b590      	push	{r4, r7, lr}
 8003c14:	b08d      	sub	sp, #52	; 0x34
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f005 f913 	bl	8008e54 <USB_GetMode>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f040 838e 	bne.w	8004352 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f005 f877 	bl	8008d2e <USB_ReadInterrupts>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8384 	beq.w	8004350 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f005 f86e 	bl	8008d2e <USB_ReadInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d107      	bne.n	8003c6c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f002 0202 	and.w	r2, r2, #2
 8003c6a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f005 f85c 	bl	8008d2e <USB_ReadInterrupts>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c80:	d17b      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f005 f862 	bl	8008d54 <USB_ReadDevAllOutEpInterrupt>
 8003c90:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c92:	e06f      	b.n	8003d74 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d064      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f005 f887 	bl	8008dbc <USB_ReadDevOutEPInterrupt>
 8003cae:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2301      	movs	r3, #1
 8003cca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fe0e 	bl	80048f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 ff0d 	bl	8004b00 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2310      	movs	r3, #16
 8003d12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d108      	bne.n	8003d38 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d30:	461a      	mov	r2, r3
 8003d32:	2101      	movs	r1, #1
 8003d34:	f005 f8d2 	bl	8008edc <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2320      	movs	r3, #32
 8003d48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d009      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	461a      	mov	r2, r3
 8003d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d18c      	bne.n	8003c94 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 ffd5 	bl	8008d2e <USB_ReadInterrupts>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d8e:	f040 80c4 	bne.w	8003f1a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f004 fff6 	bl	8008d88 <USB_ReadDevAllInEpInterrupt>
 8003d9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003da2:	e0b6      	b.n	8003f12 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80ab 	beq.w	8003f06 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f005 f81c 	bl	8008df8 <USB_ReadDevInEPInterrupt>
 8003dc0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05b      	beq.n	8003e84 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69f9      	ldr	r1, [r7, #28]
 8003de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dec:	4013      	ands	r3, r2
 8003dee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2301      	movs	r3, #1
 8003e00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d11b      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3348      	adds	r3, #72	; 0x48
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4403      	add	r3, r0
 8003e2a:	3344      	adds	r3, #68	; 0x44
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4419      	add	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4403      	add	r3, r0
 8003e3e:	3348      	adds	r3, #72	; 0x48
 8003e40:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f015 f8ce 	bl	8018fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d116      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x272>
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3350      	adds	r3, #80	; 0x50
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2101      	movs	r1, #1
 8003e80:	f005 f82c 	bl	8008edc <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2310      	movs	r3, #16
 8003eba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2340      	movs	r3, #64	; 0x40
 8003ed6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fc67 	bl	80047d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	3301      	adds	r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f47f af45 	bne.w	8003da4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 ff05 	bl	8008d2e <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f2e:	d122      	bne.n	8003f76 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f56:	2100      	movs	r1, #0
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fe89 	bl	8004c70 <HAL_PCDEx_LPM_Callback>
 8003f5e:	e002      	b.n	8003f66 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f015 f8b9 	bl	80190d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f004 fed7 	bl	8008d2e <USB_ReadInterrupts>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8a:	d112      	bne.n	8003fb2 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d102      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f015 f875 	bl	801908c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003fb0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f004 feb9 	bl	8008d2e <USB_ReadInterrupts>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc6:	f040 80a7 	bne.w	8004118 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2110      	movs	r1, #16
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f003 fff1 	bl	8007fcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fee:	e036      	b.n	800405e <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004002:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004022:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	461a      	mov	r2, r3
 8004032:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004036:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004052:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004056:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	3301      	adds	r3, #1
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004064:	429a      	cmp	r2, r3
 8004066:	d3c3      	bcc.n	8003ff0 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004076:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800407a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	2b00      	cmp	r3, #0
 8004082:	d016      	beq.n	80040b2 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004094:	f043 030b 	orr.w	r3, r3, #11
 8004098:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040aa:	f043 030b 	orr.w	r3, r3, #11
 80040ae:	6453      	str	r3, [r2, #68]	; 0x44
 80040b0:	e015      	b.n	80040de <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80040c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d8:	f043 030b 	orr.w	r3, r3, #11
 80040dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004102:	461a      	mov	r2, r3
 8004104:	f004 feea 	bl	8008edc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f004 fe06 	bl	8008d2e <USB_ReadInterrupts>
 8004122:	4603      	mov	r3, r0
 8004124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412c:	d124      	bne.n	8004178 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f004 fe9c 	bl	8008e70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f003 ffa6 	bl	800808e <USB_GetDevSpeed>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681c      	ldr	r4, [r3, #0]
 800414e:	f001 f997 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 8004152:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	4620      	mov	r0, r4
 800415e:	f003 fcd5 	bl	8007b0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f014 ff69 	bl	801903a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004176:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f004 fdd6 	bl	8008d2e <USB_ReadInterrupts>
 8004182:	4603      	mov	r3, r0
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b10      	cmp	r3, #16
 800418a:	d161      	bne.n	8004250 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0210 	bic.w	r2, r2, #16
 800419a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4413      	add	r3, r2
 80041b8:	3304      	adds	r3, #4
 80041ba:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	0c5b      	lsrs	r3, r3, #17
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d124      	bne.n	8004212 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d035      	beq.n	8004240 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	6a38      	ldr	r0, [r7, #32]
 80041e8:	f004 fc4e 	bl	8008a88 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f8:	441a      	add	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800420a:	441a      	add	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	619a      	str	r2, [r3, #24]
 8004210:	e016      	b.n	8004240 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	0c5b      	lsrs	r3, r3, #17
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	2b06      	cmp	r3, #6
 800421c:	d110      	bne.n	8004240 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004224:	2208      	movs	r2, #8
 8004226:	4619      	mov	r1, r3
 8004228:	6a38      	ldr	r0, [r7, #32]
 800422a:	f004 fc2d 	bl	8008a88 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800423a:	441a      	add	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0210 	orr.w	r2, r2, #16
 800424e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f004 fd6a 	bl	8008d2e <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b08      	cmp	r3, #8
 8004262:	d10a      	bne.n	800427a <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f014 feda 	bl	801901e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f002 0208 	and.w	r2, r2, #8
 8004278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f004 fd55 	bl	8008d2e <USB_ReadInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800428e:	d10f      	bne.n	80042b0 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f014 ff3c 	bl	8019118 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80042ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f004 fd3a 	bl	8008d2e <USB_ReadInterrupts>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042c4:	d10f      	bne.n	80042e6 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f014 ff0f 	bl	80190f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f004 fd1f 	bl	8008d2e <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fa:	d10a      	bne.n	8004312 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f014 ff1d 	bl	801913c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f004 fd09 	bl	8008d2e <USB_ReadInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b04      	cmp	r3, #4
 8004324:	d115      	bne.n	8004352 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f014 ff0d 	bl	8019158 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	e000      	b.n	8004352 <HAL_PCD_IRQHandler+0x740>
      return;
 8004350:	bf00      	nop
    }
  }
}
 8004352:	3734      	adds	r7, #52	; 0x34
 8004354:	46bd      	mov	sp, r7
 8004356:	bd90      	pop	{r4, r7, pc}

08004358 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_PCD_SetAddress+0x1a>
 800436e:	2302      	movs	r3, #2
 8004370:	e013      	b.n	800439a <HAL_PCD_SetAddress+0x42>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	4611      	mov	r1, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f004 fc79 	bl	8008c82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	4608      	mov	r0, r1
 80043ac:	4611      	mov	r1, r2
 80043ae:	461a      	mov	r2, r3
 80043b0:	4603      	mov	r3, r0
 80043b2:	70fb      	strb	r3, [r7, #3]
 80043b4:	460b      	mov	r3, r1
 80043b6:	803b      	strh	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da0f      	bge.n	80043e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 020f 	and.w	r2, r3, #15
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	3338      	adds	r3, #56	; 0x38
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4413      	add	r3, r2
 80043dc:	3304      	adds	r3, #4
 80043de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	705a      	strb	r2, [r3, #1]
 80043e6:	e00f      	b.n	8004408 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 020f 	and.w	r2, r3, #15
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	3304      	adds	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004414:	883a      	ldrh	r2, [r7, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	78ba      	ldrb	r2, [r7, #2]
 800441e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004432:	78bb      	ldrb	r3, [r7, #2]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d102      	bne.n	800443e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_PCD_EP_Open+0xaa>
 8004448:	2302      	movs	r3, #2
 800444a:	e00e      	b.n	800446a <HAL_PCD_EP_Open+0xc8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	4618      	mov	r0, r3
 800445c:	f003 fe3c 	bl	80080d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004468:	7afb      	ldrb	r3, [r7, #11]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800447e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da0f      	bge.n	80044a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	3338      	adds	r3, #56	; 0x38
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	3304      	adds	r3, #4
 800449c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	705a      	strb	r2, [r3, #1]
 80044a4:	e00f      	b.n	80044c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 020f 	and.w	r2, r3, #15
 80044ac:	4613      	mov	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4413      	add	r3, r2
 80044bc:	3304      	adds	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_PCD_EP_Close+0x6e>
 80044dc:	2302      	movs	r3, #2
 80044de:	e00e      	b.n	80044fe <HAL_PCD_EP_Close+0x8c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68f9      	ldr	r1, [r7, #12]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f003 fe7a 	bl	80081e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	460b      	mov	r3, r1
 8004514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004516:	7afb      	ldrb	r3, [r7, #11]
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004548:	7afb      	ldrb	r3, [r7, #11]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	b2da      	uxtb	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d102      	bne.n	8004562 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004562:	7afb      	ldrb	r3, [r7, #11]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	f004 f8fd 	bl	8008778 <USB_EP0StartXfer>
 800457e:	e008      	b.n	8004592 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	6979      	ldr	r1, [r7, #20]
 800458e:	f003 feaf 	bl	80082f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	f003 020f 	and.w	r2, r3, #15
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80045be:	681b      	ldr	r3, [r3, #0]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	460b      	mov	r3, r1
 80045da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045dc:	7afb      	ldrb	r3, [r7, #11]
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	3338      	adds	r3, #56	; 0x38
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2200      	movs	r2, #0
 8004604:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2201      	movs	r2, #1
 800460a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	b2da      	uxtb	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d102      	bne.n	8004626 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004626:	7afb      	ldrb	r3, [r7, #11]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	f004 f89b 	bl	8008778 <USB_EP0StartXfer>
 8004642:	e008      	b.n	8004656 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	6979      	ldr	r1, [r7, #20]
 8004652:	f003 fe4d 	bl	80082f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d901      	bls.n	800467e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e050      	b.n	8004720 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800467e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004682:	2b00      	cmp	r3, #0
 8004684:	da0f      	bge.n	80046a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	f003 020f 	and.w	r2, r3, #15
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	3338      	adds	r3, #56	; 0x38
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	3304      	adds	r3, #4
 800469c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	705a      	strb	r2, [r3, #1]
 80046a4:	e00d      	b.n	80046c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_PCD_EP_SetStall+0x82>
 80046de:	2302      	movs	r3, #2
 80046e0:	e01e      	b.n	8004720 <HAL_PCD_EP_SetStall+0xc0>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f004 f9f2 	bl	8008ada <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	b2d9      	uxtb	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004710:	461a      	mov	r2, r3
 8004712:	f004 fbe3 	bl	8008edc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	f003 020f 	and.w	r2, r3, #15
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d901      	bls.n	8004746 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e042      	b.n	80047cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da0f      	bge.n	800476e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 020f 	and.w	r2, r3, #15
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	3338      	adds	r3, #56	; 0x38
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	3304      	adds	r3, #4
 8004764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	705a      	strb	r2, [r3, #1]
 800476c:	e00f      	b.n	800478e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_PCD_EP_ClrStall+0x86>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e00e      	b.n	80047cc <HAL_PCD_EP_ClrStall+0xa4>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	4618      	mov	r0, r3
 80047be:	f004 f9fa 	bl	8008bb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af02      	add	r7, sp, #8
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	3338      	adds	r3, #56	; 0x38
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	3304      	adds	r3, #4
 80047fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	429a      	cmp	r2, r3
 8004806:	d901      	bls.n	800480c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e06c      	b.n	80048e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	429a      	cmp	r2, r3
 8004820:	d902      	bls.n	8004828 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3303      	adds	r3, #3
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004830:	e02b      	b.n	800488a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	429a      	cmp	r2, r3
 8004846:	d902      	bls.n	800484e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3303      	adds	r3, #3
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68d9      	ldr	r1, [r3, #12]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004866:	b2db      	uxtb	r3, r3
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	4603      	mov	r3, r0
 800486c:	6978      	ldr	r0, [r7, #20]
 800486e:	f004 f8d6 	bl	8008a1e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	441a      	add	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	b29b      	uxth	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	429a      	cmp	r2, r3
 800489e:	d809      	bhi.n	80048b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d203      	bcs.n	80048b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1be      	bne.n	8004832 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d811      	bhi.n	80048e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	2201      	movs	r2, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	43db      	mvns	r3, r3
 80048da:	6939      	ldr	r1, [r7, #16]
 80048dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e0:	4013      	ands	r3, r2
 80048e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	333c      	adds	r3, #60	; 0x3c
 8004908:	3304      	adds	r3, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b01      	cmp	r3, #1
 8004924:	f040 80b3 	bne.w	8004a8e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d028      	beq.n	8004984 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a70      	ldr	r2, [pc, #448]	; (8004af8 <PCD_EP_OutXfrComplete_int+0x208>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d90e      	bls.n	8004958 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004940:	2b00      	cmp	r3, #0
 8004942:	d009      	beq.n	8004958 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	461a      	mov	r2, r3
 8004952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004956:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f014 fb19 	bl	8018f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004968:	461a      	mov	r2, r3
 800496a:	2101      	movs	r1, #1
 800496c:	f004 fab6 	bl	8008edc <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497c:	461a      	mov	r2, r3
 800497e:	2308      	movs	r3, #8
 8004980:	6093      	str	r3, [r2, #8]
 8004982:	e0b3      	b.n	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	461a      	mov	r2, r3
 800499c:	2320      	movs	r3, #32
 800499e:	6093      	str	r3, [r2, #8]
 80049a0:	e0a4      	b.n	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f040 809f 	bne.w	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a51      	ldr	r2, [pc, #324]	; (8004af8 <PCD_EP_OutXfrComplete_int+0x208>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d90f      	bls.n	80049d6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049cc:	461a      	mov	r2, r3
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	6093      	str	r3, [r2, #8]
 80049d4:	e08a      	b.n	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80049e8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	0159      	lsls	r1, r3, #5
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	440b      	add	r3, r1
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80049fc:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4403      	add	r3, r0
 8004a0c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004a10:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4403      	add	r3, r0
 8004a34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4419      	add	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4403      	add	r3, r0
 8004a4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a4e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f014 faac 	bl	8018fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d144      	bne.n	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d138      	bne.n	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a84:	461a      	mov	r2, r3
 8004a86:	2101      	movs	r1, #1
 8004a88:	f004 fa28 	bl	8008edc <USB_EP0_OutStart>
 8004a8c:	e02e      	b.n	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <PCD_EP_OutXfrComplete_int+0x20c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d124      	bne.n	8004ae0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	461a      	mov	r2, r3
 8004aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab2:	6093      	str	r3, [r2, #8]
 8004ab4:	e01a      	b.n	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004acc:	461a      	mov	r2, r3
 8004ace:	2320      	movs	r3, #32
 8004ad0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f014 fa6b 	bl	8018fb4 <HAL_PCD_DataOutStageCallback>
 8004ade:	e005      	b.n	8004aec <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f014 fa64 	bl	8018fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	4f54300a 	.word	0x4f54300a
 8004afc:	4f54310a 	.word	0x4f54310a

08004b00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	333c      	adds	r3, #60	; 0x3c
 8004b18:	3304      	adds	r3, #4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d113      	bne.n	8004b5e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4a1f      	ldr	r2, [pc, #124]	; (8004bb8 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d922      	bls.n	8004b84 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01d      	beq.n	8004b84 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	6093      	str	r3, [r2, #8]
 8004b5c:	e012      	b.n	8004b84 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <PCD_EP_OutSetupPacket_int+0xbc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d10e      	bne.n	8004b84 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f014 fa03 	bl	8018f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d90c      	bls.n	8004bac <PCD_EP_OutSetupPacket_int+0xac>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d108      	bne.n	8004bac <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	f004 f998 	bl	8008edc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	4f54300a 	.word	0x4f54300a
 8004bbc:	4f54310a 	.word	0x4f54310a

08004bc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bde:	883b      	ldrh	r3, [r7, #0]
 8004be0:	0419      	lsls	r1, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
 8004bec:	e028      	b.n	8004c40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]
 8004c00:	e00d      	b.n	8004c1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	3340      	adds	r3, #64	; 0x40
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4413      	add	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	7bfa      	ldrb	r2, [r7, #15]
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d3ec      	bcc.n	8004c02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c28:	883b      	ldrh	r3, [r7, #0]
 8004c2a:	0418      	lsls	r0, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6819      	ldr	r1, [r3, #0]
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	4302      	orrs	r2, r0
 8004c38:	3340      	adds	r3, #64	; 0x40
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e22d      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d075      	beq.n	8004d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ca6:	4ba3      	ldr	r3, [pc, #652]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d00c      	beq.n	8004ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb2:	4ba0      	ldr	r3, [pc, #640]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d112      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cbe:	4b9d      	ldr	r3, [pc, #628]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	4b99      	ldr	r3, [pc, #612]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05b      	beq.n	8004d90 <HAL_RCC_OscConfig+0x108>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d157      	bne.n	8004d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e208      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d106      	bne.n	8004cfc <HAL_RCC_OscConfig+0x74>
 8004cee:	4b91      	ldr	r3, [pc, #580]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a90      	ldr	r2, [pc, #576]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x98>
 8004d06:	4b8b      	ldr	r3, [pc, #556]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a8a      	ldr	r2, [pc, #552]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a87      	ldr	r2, [pc, #540]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004d20:	4b84      	ldr	r3, [pc, #528]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a83      	ldr	r2, [pc, #524]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b81      	ldr	r3, [pc, #516]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a80      	ldr	r2, [pc, #512]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fd fb10 	bl	8002364 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd fb0c 	bl	8002364 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e1cd      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b76      	ldr	r3, [pc, #472]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xc0>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fd fafc 	bl	8002364 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fd faf8 	bl	8002364 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e1b9      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	4b6c      	ldr	r3, [pc, #432]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0xe8>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d063      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d9e:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b62      	ldr	r3, [pc, #392]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db6:	4b5f      	ldr	r3, [pc, #380]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x152>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e18d      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b56      	ldr	r3, [pc, #344]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4952      	ldr	r1, [pc, #328]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e03a      	b.n	8004e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d020      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b4f      	ldr	r3, [pc, #316]	; (8004f38 <HAL_RCC_OscConfig+0x2b0>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fd fab1 	bl	8002364 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e06:	f7fd faad 	bl	8002364 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e16e      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	4b46      	ldr	r3, [pc, #280]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b43      	ldr	r3, [pc, #268]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4940      	ldr	r1, [pc, #256]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
 8004e38:	e015      	b.n	8004e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <HAL_RCC_OscConfig+0x2b0>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fd fa90 	bl	8002364 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e48:	f7fd fa8c 	bl	8002364 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e14d      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d030      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <HAL_RCC_OscConfig+0x2b4>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e80:	f7fd fa70 	bl	8002364 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fd fa6c 	bl	8002364 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e12d      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	4b26      	ldr	r3, [pc, #152]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x200>
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_RCC_OscConfig+0x2b4>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fd fa59 	bl	8002364 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fd fa55 	bl	8002364 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e116      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80a0 	beq.w	8005022 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6413      	str	r3, [r2, #64]	; 0x40
 8004f02:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_RCC_OscConfig+0x2b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d121      	bne.n	8004f62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1e:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <HAL_RCC_OscConfig+0x2b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a07      	ldr	r2, [pc, #28]	; (8004f40 <HAL_RCC_OscConfig+0x2b8>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7fd fa1b 	bl	8002364 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	e011      	b.n	8004f56 <HAL_RCC_OscConfig+0x2ce>
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800
 8004f38:	42470000 	.word	0x42470000
 8004f3c:	42470e80 	.word	0x42470e80
 8004f40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f44:	f7fd fa0e 	bl	8002364 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0cf      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <HAL_RCC_OscConfig+0x478>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d106      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
 8004f6a:	4b66      	ldr	r3, [pc, #408]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a65      	ldr	r2, [pc, #404]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6713      	str	r3, [r2, #112]	; 0x70
 8004f76:	e01c      	b.n	8004fb2 <HAL_RCC_OscConfig+0x32a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b05      	cmp	r3, #5
 8004f7e:	d10c      	bne.n	8004f9a <HAL_RCC_OscConfig+0x312>
 8004f80:	4b60      	ldr	r3, [pc, #384]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a5f      	ldr	r2, [pc, #380]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004f86:	f043 0304 	orr.w	r3, r3, #4
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	4b5d      	ldr	r3, [pc, #372]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	4a5c      	ldr	r2, [pc, #368]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	6713      	str	r3, [r2, #112]	; 0x70
 8004f98:	e00b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x32a>
 8004f9a:	4b5a      	ldr	r3, [pc, #360]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a59      	ldr	r2, [pc, #356]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa6:	4b57      	ldr	r3, [pc, #348]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	4a56      	ldr	r2, [pc, #344]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d015      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fd f9d3 	bl	8002364 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fd f9cf 	bl	8002364 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e08e      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd8:	4b4a      	ldr	r3, [pc, #296]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ee      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x33a>
 8004fe4:	e014      	b.n	8005010 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe6:	f7fd f9bd 	bl	8002364 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fd f9b9 	bl	8002364 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e078      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005004:	4b3f      	ldr	r3, [pc, #252]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ee      	bne.n	8004fee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d105      	bne.n	8005022 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005016:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	4a3a      	ldr	r2, [pc, #232]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 800501c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d064      	beq.n	80050f4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b36      	ldr	r3, [pc, #216]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b32      	ldr	r3, [pc, #200]	; (8005108 <HAL_RCC_OscConfig+0x480>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd f98e 	bl	8002364 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd f98a 	bl	8002364 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e04b      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b29      	ldr	r3, [pc, #164]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491d      	ldr	r1, [pc, #116]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1c      	ldr	r3, [pc, #112]	; (8005108 <HAL_RCC_OscConfig+0x480>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd f963 	bl	8002364 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fd f95f 	bl	8002364 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e020      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x41a>
 80050c0:	e018      	b.n	80050f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <HAL_RCC_OscConfig+0x480>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fd f94c 	bl	8002364 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fd f948 	bl	8002364 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e009      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <HAL_RCC_OscConfig+0x47c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x448>
 80050ee:	e001      	b.n	80050f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40007000 	.word	0x40007000
 8005104:	40023800 	.word	0x40023800
 8005108:	42470060 	.word	0x42470060

0800510c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0ca      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b67      	ldr	r3, [pc, #412]	; (80052c0 <HAL_RCC_ClockConfig+0x1b4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d90c      	bls.n	8005148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b64      	ldr	r3, [pc, #400]	; (80052c0 <HAL_RCC_ClockConfig+0x1b4>)
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b62      	ldr	r3, [pc, #392]	; (80052c0 <HAL_RCC_ClockConfig+0x1b4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0b6      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005160:	4b58      	ldr	r3, [pc, #352]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a57      	ldr	r2, [pc, #348]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800516a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005178:	4b52      	ldr	r3, [pc, #328]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4a51      	ldr	r2, [pc, #324]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800517e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005184:	4b4f      	ldr	r3, [pc, #316]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	494c      	ldr	r1, [pc, #304]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d044      	beq.n	800522c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	4b46      	ldr	r3, [pc, #280]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d119      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07d      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d003      	beq.n	80051ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ca:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e06d      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051da:	4b3a      	ldr	r3, [pc, #232]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e065      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 0203 	bic.w	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4933      	ldr	r1, [pc, #204]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051fc:	f7fd f8b2 	bl	8002364 <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	e00a      	b.n	800521a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005204:	f7fd f8ae 	bl	8002364 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e04d      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	4b2a      	ldr	r3, [pc, #168]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 020c 	and.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	429a      	cmp	r2, r3
 800522a:	d1eb      	bne.n	8005204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_RCC_ClockConfig+0x1b4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d20c      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b21      	ldr	r3, [pc, #132]	; (80052c0 <HAL_RCC_ClockConfig+0x1b4>)
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b1f      	ldr	r3, [pc, #124]	; (80052c0 <HAL_RCC_ClockConfig+0x1b4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e030      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005260:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4915      	ldr	r1, [pc, #84]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	490d      	ldr	r1, [pc, #52]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005292:	f000 f81d 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
 8005296:	4601      	mov	r1, r0
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a4:	5cd3      	ldrb	r3, [r2, r3]
 80052a6:	fa21 f303 	lsr.w	r3, r1, r3
 80052aa:	4a08      	ldr	r2, [pc, #32]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 80052ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80052ae:	2000      	movs	r0, #0
 80052b0:	f7fc fa38 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40023c00 	.word	0x40023c00
 80052c4:	40023800 	.word	0x40023800
 80052c8:	0801cbb0 	.word	0x0801cbb0
 80052cc:	20000000 	.word	0x20000000

080052d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	2300      	movs	r3, #0
 80052e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e6:	4b63      	ldr	r3, [pc, #396]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d007      	beq.n	8005302 <HAL_RCC_GetSysClockFreq+0x32>
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d008      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x38>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 80b4 	bne.w	8005464 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052fc:	4b5e      	ldr	r3, [pc, #376]	; (8005478 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052fe:	60bb      	str	r3, [r7, #8]
       break;
 8005300:	e0b3      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005302:	4b5e      	ldr	r3, [pc, #376]	; (800547c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005304:	60bb      	str	r3, [r7, #8]
      break;
 8005306:	e0b0      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005308:	4b5a      	ldr	r3, [pc, #360]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005310:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005312:	4b58      	ldr	r3, [pc, #352]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d04a      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800531e:	4b55      	ldr	r3, [pc, #340]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	099b      	lsrs	r3, r3, #6
 8005324:	f04f 0400 	mov.w	r4, #0
 8005328:	f240 11ff 	movw	r1, #511	; 0x1ff
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	ea03 0501 	and.w	r5, r3, r1
 8005334:	ea04 0602 	and.w	r6, r4, r2
 8005338:	4629      	mov	r1, r5
 800533a:	4632      	mov	r2, r6
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	0154      	lsls	r4, r2, #5
 8005346:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800534a:	014b      	lsls	r3, r1, #5
 800534c:	4619      	mov	r1, r3
 800534e:	4622      	mov	r2, r4
 8005350:	1b49      	subs	r1, r1, r5
 8005352:	eb62 0206 	sbc.w	r2, r2, r6
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	f04f 0400 	mov.w	r4, #0
 800535e:	0194      	lsls	r4, r2, #6
 8005360:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005364:	018b      	lsls	r3, r1, #6
 8005366:	1a5b      	subs	r3, r3, r1
 8005368:	eb64 0402 	sbc.w	r4, r4, r2
 800536c:	f04f 0100 	mov.w	r1, #0
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	00e2      	lsls	r2, r4, #3
 8005376:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800537a:	00d9      	lsls	r1, r3, #3
 800537c:	460b      	mov	r3, r1
 800537e:	4614      	mov	r4, r2
 8005380:	195b      	adds	r3, r3, r5
 8005382:	eb44 0406 	adc.w	r4, r4, r6
 8005386:	f04f 0100 	mov.w	r1, #0
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	0262      	lsls	r2, r4, #9
 8005390:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005394:	0259      	lsls	r1, r3, #9
 8005396:	460b      	mov	r3, r1
 8005398:	4614      	mov	r4, r2
 800539a:	4618      	mov	r0, r3
 800539c:	4621      	mov	r1, r4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	461a      	mov	r2, r3
 80053a6:	4623      	mov	r3, r4
 80053a8:	f7fa ff72 	bl	8000290 <__aeabi_uldivmod>
 80053ac:	4603      	mov	r3, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e049      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b4:	4b2f      	ldr	r3, [pc, #188]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	099b      	lsrs	r3, r3, #6
 80053ba:	f04f 0400 	mov.w	r4, #0
 80053be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	ea03 0501 	and.w	r5, r3, r1
 80053ca:	ea04 0602 	and.w	r6, r4, r2
 80053ce:	4629      	mov	r1, r5
 80053d0:	4632      	mov	r2, r6
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	0154      	lsls	r4, r2, #5
 80053dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053e0:	014b      	lsls	r3, r1, #5
 80053e2:	4619      	mov	r1, r3
 80053e4:	4622      	mov	r2, r4
 80053e6:	1b49      	subs	r1, r1, r5
 80053e8:	eb62 0206 	sbc.w	r2, r2, r6
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	f04f 0400 	mov.w	r4, #0
 80053f4:	0194      	lsls	r4, r2, #6
 80053f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053fa:	018b      	lsls	r3, r1, #6
 80053fc:	1a5b      	subs	r3, r3, r1
 80053fe:	eb64 0402 	sbc.w	r4, r4, r2
 8005402:	f04f 0100 	mov.w	r1, #0
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	00e2      	lsls	r2, r4, #3
 800540c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005410:	00d9      	lsls	r1, r3, #3
 8005412:	460b      	mov	r3, r1
 8005414:	4614      	mov	r4, r2
 8005416:	195b      	adds	r3, r3, r5
 8005418:	eb44 0406 	adc.w	r4, r4, r6
 800541c:	f04f 0100 	mov.w	r1, #0
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	02a2      	lsls	r2, r4, #10
 8005426:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800542a:	0299      	lsls	r1, r3, #10
 800542c:	460b      	mov	r3, r1
 800542e:	4614      	mov	r4, r2
 8005430:	4618      	mov	r0, r3
 8005432:	4621      	mov	r1, r4
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	461a      	mov	r2, r3
 800543c:	4623      	mov	r3, r4
 800543e:	f7fa ff27 	bl	8000290 <__aeabi_uldivmod>
 8005442:	4603      	mov	r3, r0
 8005444:	460c      	mov	r4, r1
 8005446:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	3301      	adds	r3, #1
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	60bb      	str	r3, [r7, #8]
      break;
 8005462:	e002      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b04      	ldr	r3, [pc, #16]	; (8005478 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005466:	60bb      	str	r3, [r7, #8]
      break;
 8005468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800546a:	68bb      	ldr	r3, [r7, #8]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005474:	40023800 	.word	0x40023800
 8005478:	00f42400 	.word	0x00f42400
 800547c:	007a1200 	.word	0x007a1200

08005480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005484:	4b03      	ldr	r3, [pc, #12]	; (8005494 <HAL_RCC_GetHCLKFreq+0x14>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000000 	.word	0x20000000

08005498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800549c:	f7ff fff0 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054a0:	4601      	mov	r1, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0a9b      	lsrs	r3, r3, #10
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4a03      	ldr	r2, [pc, #12]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40023800 	.word	0x40023800
 80054bc:	0801cbc0 	.word	0x0801cbc0

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054c4:	f7ff ffdc 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054c8:	4601      	mov	r1, r0
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0b5b      	lsrs	r3, r3, #13
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d6:	5cd3      	ldrb	r3, [r2, r3]
 80054d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40023800 	.word	0x40023800
 80054e4:	0801cbc0 	.word	0x0801cbc0

080054e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	220f      	movs	r2, #15
 80054f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0203 	and.w	r2, r3, #3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005510:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <HAL_RCC_GetClockConfig+0x60>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 020f 	and.w	r2, r3, #15
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	601a      	str	r2, [r3, #0]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	40023c00 	.word	0x40023c00

0800554c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e01d      	b.n	800559a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fbe8 	bl	8001d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f000 fbe2 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0201 	orr.w	r2, r2, #1
 80055b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b06      	cmp	r3, #6
 80055ca:	d007      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e01d      	b.n	8005638 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f815 	bl	8005640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f000 fb93 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e01d      	b.n	80056a2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f815 	bl	80056aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fb5e 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d122      	bne.n	800571a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d11b      	bne.n	800571a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0202 	mvn.w	r2, #2
 80056ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fb08 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005706:	e005      	b.n	8005714 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fafa 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fb0b 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b04      	cmp	r3, #4
 8005726:	d122      	bne.n	800576e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b04      	cmp	r3, #4
 8005734:	d11b      	bne.n	800576e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f06f 0204 	mvn.w	r2, #4
 800573e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fade 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 800575a:	e005      	b.n	8005768 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fad0 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fae1 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b08      	cmp	r3, #8
 800577a:	d122      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b08      	cmp	r3, #8
 8005788:	d11b      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f06f 0208 	mvn.w	r2, #8
 8005792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2204      	movs	r2, #4
 8005798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fab4 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 80057ae:	e005      	b.n	80057bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 faa6 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fab7 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d122      	bne.n	8005816 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d11b      	bne.n	8005816 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0210 	mvn.w	r2, #16
 80057e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2208      	movs	r2, #8
 80057ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fa8a 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005802:	e005      	b.n	8005810 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fa7c 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa8d 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10e      	bne.n	8005842 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b01      	cmp	r3, #1
 8005830:	d107      	bne.n	8005842 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f06f 0201 	mvn.w	r2, #1
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7fb ff2b 	bl	8001698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584c:	2b80      	cmp	r3, #128	; 0x80
 800584e:	d10e      	bne.n	800586e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d107      	bne.n	800586e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fed6 	bl	800661a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d10e      	bne.n	800589a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d107      	bne.n	800589a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa52 	bl	8005d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d10e      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d107      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f06f 0220 	mvn.w	r2, #32
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fea0 	bl	8006606 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e08a      	b.n	80059fe <HAL_TIM_IC_ConfigChannel+0x130>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11b      	bne.n	8005936 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f000 fc71 	bl	80061f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 020c 	bic.w	r2, r2, #12
 8005920:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6999      	ldr	r1, [r3, #24]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	619a      	str	r2, [r3, #24]
 8005934:	e05a      	b.n	80059ec <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d11c      	bne.n	8005976 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f000 fcf5 	bl	800633a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800595e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6999      	ldr	r1, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	021a      	lsls	r2, r3, #8
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	619a      	str	r2, [r3, #24]
 8005974:	e03a      	b.n	80059ec <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d11b      	bne.n	80059b4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f000 fd42 	bl	8006414 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 020c 	bic.w	r2, r2, #12
 800599e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69d9      	ldr	r1, [r3, #28]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	61da      	str	r2, [r3, #28]
 80059b2:	e01b      	b.n	80059ec <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6819      	ldr	r1, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 fd62 	bl	800648c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69d9      	ldr	r1, [r3, #28]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	021a      	lsls	r2, r3, #8
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e0b4      	b.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	f200 809f 	bhi.w	8005b78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a75 	.word	0x08005a75
 8005a44:	08005b79 	.word	0x08005b79
 8005a48:	08005b79 	.word	0x08005b79
 8005a4c:	08005b79 	.word	0x08005b79
 8005a50:	08005ab5 	.word	0x08005ab5
 8005a54:	08005b79 	.word	0x08005b79
 8005a58:	08005b79 	.word	0x08005b79
 8005a5c:	08005b79 	.word	0x08005b79
 8005a60:	08005af7 	.word	0x08005af7
 8005a64:	08005b79 	.word	0x08005b79
 8005a68:	08005b79 	.word	0x08005b79
 8005a6c:	08005b79 	.word	0x08005b79
 8005a70:	08005b37 	.word	0x08005b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa0a 	bl	8005e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0208 	orr.w	r2, r2, #8
 8005a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0204 	bic.w	r2, r2, #4
 8005a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	619a      	str	r2, [r3, #24]
      break;
 8005ab2:	e062      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fa5a 	bl	8005f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	021a      	lsls	r2, r3, #8
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	619a      	str	r2, [r3, #24]
      break;
 8005af4:	e041      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 faaf 	bl	8006060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0208 	orr.w	r2, r2, #8
 8005b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0204 	bic.w	r2, r2, #4
 8005b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	61da      	str	r2, [r3, #28]
      break;
 8005b34:	e021      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fb03 	bl	8006148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	61da      	str	r2, [r3, #28]
      break;
 8005b76:	e000      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005b78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIM_ConfigClockSource+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e0a6      	b.n	8005cfa <HAL_TIM_ConfigClockSource+0x166>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d067      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x120>
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d80b      	bhi.n	8005c00 <HAL_TIM_ConfigClockSource+0x6c>
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d073      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0x140>
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d802      	bhi.n	8005bf6 <HAL_TIM_ConfigClockSource+0x62>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d06f      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005bf4:	e078      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d06c      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0x140>
 8005bfa:	2b30      	cmp	r3, #48	; 0x30
 8005bfc:	d06a      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005bfe:	e073      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c00:	2b70      	cmp	r3, #112	; 0x70
 8005c02:	d00d      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0x8c>
 8005c04:	2b70      	cmp	r3, #112	; 0x70
 8005c06:	d804      	bhi.n	8005c12 <HAL_TIM_ConfigClockSource+0x7e>
 8005c08:	2b50      	cmp	r3, #80	; 0x50
 8005c0a:	d033      	beq.n	8005c74 <HAL_TIM_ConfigClockSource+0xe0>
 8005c0c:	2b60      	cmp	r3, #96	; 0x60
 8005c0e:	d041      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c10:	e06a      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c16:	d066      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x152>
 8005c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1c:	d017      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c1e:	e063      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6899      	ldr	r1, [r3, #8]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f000 fc84 	bl	800653c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	609a      	str	r2, [r3, #8]
      break;
 8005c4c:	e04c      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6899      	ldr	r1, [r3, #8]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f000 fc6d 	bl	800653c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c70:	609a      	str	r2, [r3, #8]
      break;
 8005c72:	e039      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	461a      	mov	r2, r3
 8005c82:	f000 fb2b 	bl	80062dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2150      	movs	r1, #80	; 0x50
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fc3a 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005c92:	e029      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f000 fb87 	bl	80063b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2160      	movs	r1, #96	; 0x60
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fc2a 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005cb2:	e019      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f000 fb0b 	bl	80062dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2140      	movs	r1, #64	; 0x40
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fc1a 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005cd2:	e009      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f000 fc11 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e000      	b.n	8005ce8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a40      	ldr	r2, [pc, #256]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d72:	d00f      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <TIM_Base_SetConfig+0x118>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <TIM_Base_SetConfig+0x11c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3b      	ldr	r2, [pc, #236]	; (8005e74 <TIM_Base_SetConfig+0x120>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3a      	ldr	r2, [pc, #232]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d02b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d027      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <TIM_Base_SetConfig+0x118>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d023      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <TIM_Base_SetConfig+0x11c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01f      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <TIM_Base_SetConfig+0x120>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d01b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a29      	ldr	r2, [pc, #164]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d017      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a28      	ldr	r2, [pc, #160]	; (8005e7c <TIM_Base_SetConfig+0x128>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00f      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <TIM_Base_SetConfig+0x130>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <TIM_Base_SetConfig+0x134>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <TIM_Base_SetConfig+0x138>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a23      	ldr	r2, [pc, #140]	; (8005e90 <TIM_Base_SetConfig+0x13c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d108      	bne.n	8005e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a0a      	ldr	r2, [pc, #40]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d103      	bne.n	8005e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	615a      	str	r2, [r3, #20]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800
 8005e88:	40001800 	.word	0x40001800
 8005e8c:	40001c00 	.word	0x40001c00
 8005e90:	40002000 	.word	0x40002000

08005e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0201 	bic.w	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 0302 	bic.w	r3, r3, #2
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <TIM_OC1_SetConfig+0xd8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC1_SetConfig+0x64>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <TIM_OC1_SetConfig+0xdc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10c      	bne.n	8005f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0308 	bic.w	r3, r3, #8
 8005efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 0304 	bic.w	r3, r3, #4
 8005f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <TIM_OC1_SetConfig+0xd8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_OC1_SetConfig+0x8e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <TIM_OC1_SetConfig+0xdc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d111      	bne.n	8005f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	621a      	str	r2, [r3, #32]
}
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40010400 	.word	0x40010400

08005f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0320 	bic.w	r3, r3, #32
 8005fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a22      	ldr	r2, [pc, #136]	; (8006058 <TIM_OC2_SetConfig+0xe4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC2_SetConfig+0x68>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a21      	ldr	r2, [pc, #132]	; (800605c <TIM_OC2_SetConfig+0xe8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d10d      	bne.n	8005ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <TIM_OC2_SetConfig+0xe4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_OC2_SetConfig+0x94>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a16      	ldr	r2, [pc, #88]	; (800605c <TIM_OC2_SetConfig+0xe8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d113      	bne.n	8006030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800600e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40010400 	.word	0x40010400

08006060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a21      	ldr	r2, [pc, #132]	; (8006140 <TIM_OC3_SetConfig+0xe0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC3_SetConfig+0x66>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a20      	ldr	r2, [pc, #128]	; (8006144 <TIM_OC3_SetConfig+0xe4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d10d      	bne.n	80060e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a16      	ldr	r2, [pc, #88]	; (8006140 <TIM_OC3_SetConfig+0xe0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_OC3_SetConfig+0x92>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a15      	ldr	r2, [pc, #84]	; (8006144 <TIM_OC3_SetConfig+0xe4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d113      	bne.n	800611a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	621a      	str	r2, [r3, #32]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	40010000 	.word	0x40010000
 8006144:	40010400 	.word	0x40010400

08006148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a12      	ldr	r2, [pc, #72]	; (80061ec <TIM_OC4_SetConfig+0xa4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC4_SetConfig+0x68>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a11      	ldr	r2, [pc, #68]	; (80061f0 <TIM_OC4_SetConfig+0xa8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40010400 	.word	0x40010400

080061f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f023 0201 	bic.w	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a28      	ldr	r2, [pc, #160]	; (80062c0 <TIM_TI1_SetConfig+0xcc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01b      	beq.n	800625a <TIM_TI1_SetConfig+0x66>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006228:	d017      	beq.n	800625a <TIM_TI1_SetConfig+0x66>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a25      	ldr	r2, [pc, #148]	; (80062c4 <TIM_TI1_SetConfig+0xd0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <TIM_TI1_SetConfig+0x66>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a24      	ldr	r2, [pc, #144]	; (80062c8 <TIM_TI1_SetConfig+0xd4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00f      	beq.n	800625a <TIM_TI1_SetConfig+0x66>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a23      	ldr	r2, [pc, #140]	; (80062cc <TIM_TI1_SetConfig+0xd8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00b      	beq.n	800625a <TIM_TI1_SetConfig+0x66>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a22      	ldr	r2, [pc, #136]	; (80062d0 <TIM_TI1_SetConfig+0xdc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <TIM_TI1_SetConfig+0x66>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <TIM_TI1_SetConfig+0xe0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_TI1_SetConfig+0x66>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a20      	ldr	r2, [pc, #128]	; (80062d8 <TIM_TI1_SetConfig+0xe4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <TIM_TI1_SetConfig+0x6a>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <TIM_TI1_SetConfig+0x6c>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e003      	b.n	800627e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	b2db      	uxtb	r3, r3
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f023 030a 	bic.w	r3, r3, #10
 8006298:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 030a 	and.w	r3, r3, #10
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	40000c00 	.word	0x40000c00
 80062d0:	40010400 	.word	0x40010400
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40001800 	.word	0x40001800

080062dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f023 0201 	bic.w	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f023 030a 	bic.w	r3, r3, #10
 8006318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800633a:	b480      	push	{r7}
 800633c:	b087      	sub	sp, #28
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f023 0210 	bic.w	r2, r3, #16
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006366:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	031b      	lsls	r3, r3, #12
 800637e:	b29b      	uxth	r3, r3
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800638c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f023 0210 	bic.w	r2, r3, #16
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	031b      	lsls	r3, r3, #12
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	621a      	str	r2, [r3, #32]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006450:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	b2db      	uxtb	r3, r3
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006464:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	031b      	lsls	r3, r3, #12
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	031b      	lsls	r3, r3, #12
 80064e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	f043 0307 	orr.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	431a      	orrs	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006590:	2302      	movs	r3, #2
 8006592:	e032      	b.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065cc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e03f      	b.n	80066c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fb fdcd 	bl	80021f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2224      	movs	r2, #36	; 0x24
 800665e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006670:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa64 	bl	8006b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006686:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006696:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d008      	beq.n	800671a <HAL_UART_IRQHandler+0x52>
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f992 	bl	8006a3c <UART_Receive_IT>
      return;
 8006718:	e0cc      	b.n	80068b4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80ab 	beq.w	8006878 <HAL_UART_IRQHandler+0x1b0>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d105      	bne.n	8006738 <HAL_UART_IRQHandler+0x70>
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80a0 	beq.w	8006878 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_UART_IRQHandler+0x90>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	f043 0201 	orr.w	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_UART_IRQHandler+0xb0>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006770:	f043 0202 	orr.w	r2, r3, #2
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <HAL_UART_IRQHandler+0xd0>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006790:	f043 0204 	orr.w	r2, r3, #4
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_UART_IRQHandler+0xf0>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	f043 0208 	orr.w	r2, r3, #8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d078      	beq.n	80068b2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <HAL_UART_IRQHandler+0x112>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f931 	bl	8006a3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b40      	cmp	r3, #64	; 0x40
 80067e6:	bf0c      	ite	eq
 80067e8:	2301      	moveq	r3, #1
 80067ea:	2300      	movne	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <HAL_UART_IRQHandler+0x13a>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d031      	beq.n	8006866 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f87a 	bl	80068fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d123      	bne.n	800685e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695a      	ldr	r2, [r3, #20]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006824:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682a:	2b00      	cmp	r3, #0
 800682c:	d013      	beq.n	8006856 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	4a22      	ldr	r2, [pc, #136]	; (80068bc <HAL_UART_IRQHandler+0x1f4>)
 8006834:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	4618      	mov	r0, r3
 800683c:	f7fb fea2 	bl	8002584 <HAL_DMA_Abort_IT>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d016      	beq.n	8006874 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	e00e      	b.n	8006874 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f846 	bl	80068e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	e00a      	b.n	8006874 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f842 	bl	80068e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	e006      	b.n	8006874 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f83e 	bl	80068e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006872:	e01e      	b.n	80068b2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	bf00      	nop
    return;
 8006876:	e01c      	b.n	80068b2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <HAL_UART_IRQHandler+0x1cc>
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f867 	bl	8006960 <UART_Transmit_IT>
    return;
 8006892:	e00f      	b.n	80068b4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <HAL_UART_IRQHandler+0x1ec>
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f8af 	bl	8006a0c <UART_EndTransmit_IT>
    return;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80068b2:	bf00      	nop
  }
}
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	08006939 	.word	0x08006939

080068c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006912:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff ffc8 	bl	80068e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b21      	cmp	r3, #33	; 0x21
 8006972:	d144      	bne.n	80069fe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d11a      	bne.n	80069b4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006992:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	1c9a      	adds	r2, r3, #2
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]
 80069a6:	e00e      	b.n	80069c6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	621a      	str	r2, [r3, #32]
 80069b2:	e008      	b.n	80069c6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	1c59      	adds	r1, r3, #1
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6211      	str	r1, [r2, #32]
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	4619      	mov	r1, r3
 80069d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10f      	bne.n	80069fa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
  }
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff47 	bl	80068c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b22      	cmp	r3, #34	; 0x22
 8006a4e:	d171      	bne.n	8006b34 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a58:	d123      	bne.n	8006aa2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10e      	bne.n	8006a86 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	1c9a      	adds	r2, r3, #2
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28
 8006a84:	e029      	b.n	8006ada <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa0:	e01b      	b.n	8006ada <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6858      	ldr	r0, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	1c59      	adds	r1, r3, #1
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6291      	str	r1, [r2, #40]	; 0x28
 8006aba:	b2c2      	uxtb	r2, r0
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e00c      	b.n	8006ada <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	1c58      	adds	r0, r3, #1
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	6288      	str	r0, [r1, #40]	; 0x28
 8006ad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d120      	bne.n	8006b30 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0220 	bic.w	r2, r2, #32
 8006afc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695a      	ldr	r2, [r3, #20]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fed4 	bl	80068d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e002      	b.n	8006b36 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	e000      	b.n	8006b36 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b34:	2302      	movs	r3, #2
  }
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b40:	b5b0      	push	{r4, r5, r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b80:	f023 030c 	bic.w	r3, r3, #12
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	68f9      	ldr	r1, [r7, #12]
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bac:	f040 80e4 	bne.w	8006d78 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4aab      	ldr	r2, [pc, #684]	; (8006e64 <UART_SetConfig+0x324>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <UART_SetConfig+0x84>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4aaa      	ldr	r2, [pc, #680]	; (8006e68 <UART_SetConfig+0x328>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d16c      	bne.n	8006c9e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006bc4:	f7fe fc7c 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009a      	lsls	r2, r3, #2
 8006bd2:	441a      	add	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bde:	4aa3      	ldr	r2, [pc, #652]	; (8006e6c <UART_SetConfig+0x32c>)
 8006be0:	fba2 2303 	umull	r2, r3, r2, r3
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	011c      	lsls	r4, r3, #4
 8006be8:	f7fe fc6a 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006bec:	4602      	mov	r2, r0
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009a      	lsls	r2, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c02:	f7fe fc5d 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006c06:	4602      	mov	r2, r0
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009a      	lsls	r2, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	4a93      	ldr	r2, [pc, #588]	; (8006e6c <UART_SetConfig+0x32c>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	2264      	movs	r2, #100	; 0x64
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	1aeb      	subs	r3, r5, r3
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	3332      	adds	r3, #50	; 0x32
 8006c30:	4a8e      	ldr	r2, [pc, #568]	; (8006e6c <UART_SetConfig+0x32c>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c3e:	441c      	add	r4, r3
 8006c40:	f7fe fc3e 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006c44:	4602      	mov	r2, r0
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009a      	lsls	r2, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c5a:	f7fe fc31 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009a      	lsls	r2, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c74:	4a7d      	ldr	r2, [pc, #500]	; (8006e6c <UART_SetConfig+0x32c>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	2264      	movs	r2, #100	; 0x64
 8006c7e:	fb02 f303 	mul.w	r3, r2, r3
 8006c82:	1aeb      	subs	r3, r5, r3
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	3332      	adds	r3, #50	; 0x32
 8006c88:	4a78      	ldr	r2, [pc, #480]	; (8006e6c <UART_SetConfig+0x32c>)
 8006c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	f003 0207 	and.w	r2, r3, #7
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4422      	add	r2, r4
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	e154      	b.n	8006f48 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006c9e:	f7fe fbfb 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009a      	lsls	r2, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb8:	4a6c      	ldr	r2, [pc, #432]	; (8006e6c <UART_SetConfig+0x32c>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	011c      	lsls	r4, r3, #4
 8006cc2:	f7fe fbe9 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009a      	lsls	r2, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8006cdc:	f7fe fbdc 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009a      	lsls	r2, r3, #2
 8006cea:	441a      	add	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	4a5d      	ldr	r2, [pc, #372]	; (8006e6c <UART_SetConfig+0x32c>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	095b      	lsrs	r3, r3, #5
 8006cfe:	2264      	movs	r2, #100	; 0x64
 8006d00:	fb02 f303 	mul.w	r3, r2, r3
 8006d04:	1aeb      	subs	r3, r5, r3
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	3332      	adds	r3, #50	; 0x32
 8006d0a:	4a58      	ldr	r2, [pc, #352]	; (8006e6c <UART_SetConfig+0x32c>)
 8006d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d18:	441c      	add	r4, r3
 8006d1a:	f7fe fbbd 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	009a      	lsls	r2, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d34:	f7fe fbb0 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009a      	lsls	r2, r3, #2
 8006d42:	441a      	add	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4e:	4a47      	ldr	r2, [pc, #284]	; (8006e6c <UART_SetConfig+0x32c>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	2264      	movs	r2, #100	; 0x64
 8006d58:	fb02 f303 	mul.w	r3, r2, r3
 8006d5c:	1aeb      	subs	r3, r5, r3
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	3332      	adds	r3, #50	; 0x32
 8006d62:	4a42      	ldr	r2, [pc, #264]	; (8006e6c <UART_SetConfig+0x32c>)
 8006d64:	fba2 2303 	umull	r2, r3, r2, r3
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	f003 0207 	and.w	r2, r3, #7
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4422      	add	r2, r4
 8006d74:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006d76:	e0e7      	b.n	8006f48 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a39      	ldr	r2, [pc, #228]	; (8006e64 <UART_SetConfig+0x324>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d004      	beq.n	8006d8c <UART_SetConfig+0x24c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a38      	ldr	r2, [pc, #224]	; (8006e68 <UART_SetConfig+0x328>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d171      	bne.n	8006e70 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006d8c:	f7fe fb98 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009a      	lsls	r2, r3, #2
 8006d9a:	441a      	add	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da6:	4a31      	ldr	r2, [pc, #196]	; (8006e6c <UART_SetConfig+0x32c>)
 8006da8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	011c      	lsls	r4, r3, #4
 8006db0:	f7fe fb86 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006db4:	4602      	mov	r2, r0
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009a      	lsls	r2, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	fbb2 f5f3 	udiv	r5, r2, r3
 8006dca:	f7fe fb79 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009a      	lsls	r2, r3, #2
 8006dd8:	441a      	add	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de4:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <UART_SetConfig+0x32c>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2264      	movs	r2, #100	; 0x64
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	1aeb      	subs	r3, r5, r3
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	3332      	adds	r3, #50	; 0x32
 8006df8:	4a1c      	ldr	r2, [pc, #112]	; (8006e6c <UART_SetConfig+0x32c>)
 8006dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e04:	441c      	add	r4, r3
 8006e06:	f7fe fb5b 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009a      	lsls	r2, r3, #2
 8006e14:	441a      	add	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e20:	f7fe fb4e 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009a      	lsls	r2, r3, #2
 8006e2e:	441a      	add	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3a:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <UART_SetConfig+0x32c>)
 8006e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	2264      	movs	r2, #100	; 0x64
 8006e44:	fb02 f303 	mul.w	r3, r2, r3
 8006e48:	1aeb      	subs	r3, r5, r3
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	3332      	adds	r3, #50	; 0x32
 8006e4e:	4a07      	ldr	r2, [pc, #28]	; (8006e6c <UART_SetConfig+0x32c>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	f003 020f 	and.w	r2, r3, #15
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4422      	add	r2, r4
 8006e60:	609a      	str	r2, [r3, #8]
 8006e62:	e071      	b.n	8006f48 <UART_SetConfig+0x408>
 8006e64:	40011000 	.word	0x40011000
 8006e68:	40011400 	.word	0x40011400
 8006e6c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006e70:	f7fe fb12 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009a      	lsls	r2, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8a:	4a31      	ldr	r2, [pc, #196]	; (8006f50 <UART_SetConfig+0x410>)
 8006e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	011c      	lsls	r4, r3, #4
 8006e94:	f7fe fb00 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009a      	lsls	r2, r3, #2
 8006ea2:	441a      	add	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	fbb2 f5f3 	udiv	r5, r2, r3
 8006eae:	f7fe faf3 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009a      	lsls	r2, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <UART_SetConfig+0x410>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	2264      	movs	r2, #100	; 0x64
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	1aeb      	subs	r3, r5, r3
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	3332      	adds	r3, #50	; 0x32
 8006edc:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <UART_SetConfig+0x410>)
 8006ede:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ee8:	441c      	add	r4, r3
 8006eea:	f7fe fad5 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009a      	lsls	r2, r3, #2
 8006ef8:	441a      	add	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f04:	f7fe fac8 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009a      	lsls	r2, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <UART_SetConfig+0x410>)
 8006f20:	fba2 2303 	umull	r2, r3, r2, r3
 8006f24:	095b      	lsrs	r3, r3, #5
 8006f26:	2264      	movs	r2, #100	; 0x64
 8006f28:	fb02 f303 	mul.w	r3, r2, r3
 8006f2c:	1aeb      	subs	r3, r5, r3
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	3332      	adds	r3, #50	; 0x32
 8006f32:	4a07      	ldr	r2, [pc, #28]	; (8006f50 <UART_SetConfig+0x410>)
 8006f34:	fba2 2303 	umull	r2, r3, r2, r3
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	f003 020f 	and.w	r2, r3, #15
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4422      	add	r2, r4
 8006f44:	609a      	str	r2, [r3, #8]
}
 8006f46:	e7ff      	b.n	8006f48 <UART_SetConfig+0x408>
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f50:	51eb851f 	.word	0x51eb851f

08006f54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b089      	sub	sp, #36	; 0x24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	fa93 f3a3 	rbit	r3, r3
 8006f6e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	fab3 f383 	clz	r3, r3
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	2103      	movs	r1, #3
 8006f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f80:	43db      	mvns	r3, r3
 8006f82:	401a      	ands	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	fa93 f3a3 	rbit	r3, r3
 8006f8e:	61bb      	str	r3, [r7, #24]
  return result;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	fab3 f383 	clz	r3, r3
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	601a      	str	r2, [r3, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	3724      	adds	r7, #36	; 0x24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	43db      	mvns	r3, r3
 8006fc6:	401a      	ands	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	605a      	str	r2, [r3, #4]
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b089      	sub	sp, #36	; 0x24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	fa93 f3a3 	rbit	r3, r3
 8006ffc:	613b      	str	r3, [r7, #16]
  return result;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	fab3 f383 	clz	r3, r3
 8007004:	b2db      	uxtb	r3, r3
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	2103      	movs	r1, #3
 800700a:	fa01 f303 	lsl.w	r3, r1, r3
 800700e:	43db      	mvns	r3, r3
 8007010:	401a      	ands	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	fa93 f3a3 	rbit	r3, r3
 800701c:	61bb      	str	r3, [r7, #24]
  return result;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	fab3 f383 	clz	r3, r3
 8007024:	b2db      	uxtb	r3, r3
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	fa01 f303 	lsl.w	r3, r1, r3
 800702e:	431a      	orrs	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007034:	bf00      	nop
 8007036:	3724      	adds	r7, #36	; 0x24
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007040:	b480      	push	{r7}
 8007042:	b089      	sub	sp, #36	; 0x24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	fa93 f3a3 	rbit	r3, r3
 800705a:	613b      	str	r3, [r7, #16]
  return result;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	fab3 f383 	clz	r3, r3
 8007062:	b2db      	uxtb	r3, r3
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	2103      	movs	r1, #3
 8007068:	fa01 f303 	lsl.w	r3, r1, r3
 800706c:	43db      	mvns	r3, r3
 800706e:	401a      	ands	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	fa93 f3a3 	rbit	r3, r3
 800707a:	61bb      	str	r3, [r7, #24]
  return result;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	fab3 f383 	clz	r3, r3
 8007082:	b2db      	uxtb	r3, r3
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	fa01 f303 	lsl.w	r3, r1, r3
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	60da      	str	r2, [r3, #12]
}
 8007092:	bf00      	nop
 8007094:	3724      	adds	r7, #36	; 0x24
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800709e:	b480      	push	{r7}
 80070a0:	b089      	sub	sp, #36	; 0x24
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a1a      	ldr	r2, [r3, #32]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	fa93 f3a3 	rbit	r3, r3
 80070b8:	613b      	str	r3, [r7, #16]
  return result;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	fab3 f383 	clz	r3, r3
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	210f      	movs	r1, #15
 80070c6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ca:	43db      	mvns	r3, r3
 80070cc:	401a      	ands	r2, r3
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	fa93 f3a3 	rbit	r3, r3
 80070d8:	61bb      	str	r3, [r7, #24]
  return result;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	fab3 f383 	clz	r3, r3
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ea:	431a      	orrs	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80070f0:	bf00      	nop
 80070f2:	3724      	adds	r7, #36	; 0x24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b089      	sub	sp, #36	; 0x24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	fa93 f3a3 	rbit	r3, r3
 8007118:	613b      	str	r3, [r7, #16]
  return result;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	fab3 f383 	clz	r3, r3
 8007120:	b2db      	uxtb	r3, r3
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	210f      	movs	r1, #15
 8007126:	fa01 f303 	lsl.w	r3, r1, r3
 800712a:	43db      	mvns	r3, r3
 800712c:	401a      	ands	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	0a1b      	lsrs	r3, r3, #8
 8007132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	fa93 f3a3 	rbit	r3, r3
 800713a:	61bb      	str	r3, [r7, #24]
  return result;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	fab3 f383 	clz	r3, r3
 8007142:	b2db      	uxtb	r3, r3
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	fa01 f303 	lsl.w	r3, r1, r3
 800714c:	431a      	orrs	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007152:	bf00      	nop
 8007154:	3724      	adds	r7, #36	; 0x24
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b088      	sub	sp, #32
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007168:	2300      	movs	r3, #0
 800716a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800716c:	2300      	movs	r3, #0
 800716e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	fa93 f3a3 	rbit	r3, r3
 800717c:	613b      	str	r3, [r7, #16]
  return result;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	fab3 f383 	clz	r3, r3
 8007184:	b2db      	uxtb	r3, r3
 8007186:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007188:	e049      	b.n	800721e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	2101      	movs	r1, #1
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	fa01 f303 	lsl.w	r3, r1, r3
 8007196:	4013      	ands	r3, r2
 8007198:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d03b      	beq.n	8007218 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	461a      	mov	r2, r3
 80071a6:	69b9      	ldr	r1, [r7, #24]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff fed3 	bl	8006f54 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d003      	beq.n	80071be <LL_GPIO_Init+0x60>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d106      	bne.n	80071cc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	461a      	mov	r2, r3
 80071c4:	69b9      	ldr	r1, [r7, #24]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff ff0b 	bl	8006fe2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	461a      	mov	r2, r3
 80071d2:	69b9      	ldr	r1, [r7, #24]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff ff33 	bl	8007040 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d11a      	bne.n	8007218 <LL_GPIO_Init+0xba>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	fa93 f3a3 	rbit	r3, r3
 80071ec:	60bb      	str	r3, [r7, #8]
  return result;
 80071ee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80071f0:	fab3 f383 	clz	r3, r3
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b07      	cmp	r3, #7
 80071f8:	d807      	bhi.n	800720a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	461a      	mov	r2, r3
 8007200:	69b9      	ldr	r1, [r7, #24]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff ff4b 	bl	800709e <LL_GPIO_SetAFPin_0_7>
 8007208:	e006      	b.n	8007218 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	461a      	mov	r2, r3
 8007210:	69b9      	ldr	r1, [r7, #24]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff ff72 	bl	80070fc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	3301      	adds	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1ae      	bne.n	800718a <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d003      	beq.n	800723c <LL_GPIO_Init+0xde>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d107      	bne.n	800724c <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	461a      	mov	r2, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff feb3 	bl	8006fb2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <LL_I2C_Enable>:
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f043 0201 	orr.w	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <LL_I2C_Disable>:
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 0201 	bic.w	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	601a      	str	r2, [r3, #0]
}
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <LL_I2C_ConfigFilters>:
{
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	f023 021f 	bic.w	r2, r3, #31
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	430b      	orrs	r3, r1
 80072b0:	431a      	orrs	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80072b6:	bf00      	nop
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <LL_I2C_SetOwnAddress1>:
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80072d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	430a      	orrs	r2, r1
 80072e0:	431a      	orrs	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	609a      	str	r2, [r3, #8]
}
 80072e6:	bf00      	nop
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
	...

080072f4 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80072f4:	b490      	push	{r4, r7}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8007302:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8007304:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	4a3f      	ldr	r2, [pc, #252]	; (8007408 <LL_I2C_ConfigSpeed+0x114>)
 800730a:	fba2 2303 	umull	r2, r3, r2, r3
 800730e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007318:	ea44 0203 	orr.w	r2, r4, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4938      	ldr	r1, [pc, #224]	; (800740c <LL_I2C_ConfigSpeed+0x118>)
 800732c:	428b      	cmp	r3, r1
 800732e:	d801      	bhi.n	8007334 <LL_I2C_ConfigSpeed+0x40>
 8007330:	1c63      	adds	r3, r4, #1
 8007332:	e008      	b.n	8007346 <LL_I2C_ConfigSpeed+0x52>
 8007334:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007338:	fb03 f304 	mul.w	r3, r3, r4
 800733c:	4934      	ldr	r1, [pc, #208]	; (8007410 <LL_I2C_ConfigSpeed+0x11c>)
 800733e:	fba1 1303 	umull	r1, r3, r1, r3
 8007342:	099b      	lsrs	r3, r3, #6
 8007344:	3301      	adds	r3, #1
 8007346:	431a      	orrs	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a2f      	ldr	r2, [pc, #188]	; (800740c <LL_I2C_ConfigSpeed+0x118>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d939      	bls.n	80073c8 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d117      	bne.n	800738a <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	4413      	add	r3, r2
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	fbb2 f3f3 	udiv	r3, r2, r3
 8007368:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800736c:	2b00      	cmp	r3, #0
 800736e:	d009      	beq.n	8007384 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4413      	add	r3, r2
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800737e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007382:	e01d      	b.n	80073c0 <LL_I2C_ConfigSpeed+0xcc>
 8007384:	f248 0301 	movw	r3, #32769	; 0x8001
 8007388:	e01a      	b.n	80073c0 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009a      	lsls	r2, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009a      	lsls	r2, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ba:	e001      	b.n	80073c0 <LL_I2C_ConfigSpeed+0xcc>
 80073bc:	f248 0301 	movw	r3, #32769	; 0x8001
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	ea43 0402 	orr.w	r4, r3, r2
 80073c6:	e010      	b.n	80073ea <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d905      	bls.n	80073e6 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e4:	e000      	b.n	80073e8 <LL_I2C_ConfigSpeed+0xf4>
 80073e6:	2304      	movs	r3, #4
 80073e8:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80073f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073f6:	ea44 0203 	orr.w	r2, r4, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	61da      	str	r2, [r3, #28]
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bc90      	pop	{r4, r7}
 8007406:	4770      	bx	lr
 8007408:	431bde83 	.word	0x431bde83
 800740c:	000186a0 	.word	0x000186a0
 8007410:	10624dd3 	.word	0x10624dd3

08007414 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f023 021a 	bic.w	r2, r3, #26
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	601a      	str	r2, [r3, #0]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff ff03 	bl	8007276 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007470:	f107 0308 	add.w	r3, r7, #8
 8007474:	4618      	mov	r0, r3
 8007476:	f000 f89d 	bl	80075b4 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68d9      	ldr	r1, [r3, #12]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	461a      	mov	r2, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff ff06 	bl	8007296 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800748a:	6939      	ldr	r1, [r7, #16]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff ff2d 	bl	80072f4 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	6959      	ldr	r1, [r3, #20]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	461a      	mov	r2, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff ff0c 	bl	80072c2 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff ffaf 	bl	8007414 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fecd 	bl	8007256 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff ffb9 	bl	800743a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80074d8:	4b04      	ldr	r3, [pc, #16]	; (80074ec <LL_RCC_GetSysClkSource+0x18>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 030c 	and.w	r3, r3, #12
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800

080074f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80074f4:	4b04      	ldr	r3, [pc, #16]	; (8007508 <LL_RCC_GetAHBPrescaler+0x18>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40023800 	.word	0x40023800

0800750c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007510:	4b04      	ldr	r3, [pc, #16]	; (8007524 <LL_RCC_GetAPB1Prescaler+0x18>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8007518:	4618      	mov	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40023800 	.word	0x40023800

08007528 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800752c:	4b04      	ldr	r3, [pc, #16]	; (8007540 <LL_RCC_GetAPB2Prescaler+0x18>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8007534:	4618      	mov	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40023800 	.word	0x40023800

08007544 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <LL_RCC_PLL_GetMainSource+0x18>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8007550:	4618      	mov	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800

08007560 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007564:	4b04      	ldr	r3, [pc, #16]	; (8007578 <LL_RCC_PLL_GetN+0x18>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	099b      	lsrs	r3, r3, #6
 800756a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800756e:	4618      	mov	r0, r3
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	40023800 	.word	0x40023800

0800757c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007580:	4b04      	ldr	r3, [pc, #16]	; (8007594 <LL_RCC_PLL_GetP+0x18>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007588:	4618      	mov	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40023800 	.word	0x40023800

08007598 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <LL_RCC_PLL_GetDivider+0x18>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40023800 	.word	0x40023800

080075b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80075bc:	f000 f820 	bl	8007600 <RCC_GetSystemClockFreq>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f83e 	bl	800764c <RCC_GetHCLKClockFreq>
 80075d0:	4602      	mov	r2, r0
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f84c 	bl	8007678 <RCC_GetPCLK1ClockFreq>
 80075e0:	4602      	mov	r2, r0
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f858 	bl	80076a0 <RCC_GetPCLK2ClockFreq>
 80075f0:	4602      	mov	r2, r0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60da      	str	r2, [r3, #12]
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800760a:	f7ff ff63 	bl	80074d4 <LL_RCC_GetSysClkSource>
 800760e:	4603      	mov	r3, r0
 8007610:	2b04      	cmp	r3, #4
 8007612:	d006      	beq.n	8007622 <RCC_GetSystemClockFreq+0x22>
 8007614:	2b08      	cmp	r3, #8
 8007616:	d007      	beq.n	8007628 <RCC_GetSystemClockFreq+0x28>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800761c:	4b09      	ldr	r3, [pc, #36]	; (8007644 <RCC_GetSystemClockFreq+0x44>)
 800761e:	607b      	str	r3, [r7, #4]
      break;
 8007620:	e00a      	b.n	8007638 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <RCC_GetSystemClockFreq+0x48>)
 8007624:	607b      	str	r3, [r7, #4]
      break;
 8007626:	e007      	b.n	8007638 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8007628:	2008      	movs	r0, #8
 800762a:	f000 f84d 	bl	80076c8 <RCC_PLL_GetFreqDomain_SYS>
 800762e:	6078      	str	r0, [r7, #4]
      break;
 8007630:	e002      	b.n	8007638 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007632:	4b04      	ldr	r3, [pc, #16]	; (8007644 <RCC_GetSystemClockFreq+0x44>)
 8007634:	607b      	str	r3, [r7, #4]
      break;
 8007636:	bf00      	nop
  }

  return frequency;
 8007638:	687b      	ldr	r3, [r7, #4]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	00f42400 	.word	0x00f42400
 8007648:	007a1200 	.word	0x007a1200

0800764c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007654:	f7ff ff4c 	bl	80074f0 <LL_RCC_GetAHBPrescaler>
 8007658:	4603      	mov	r3, r0
 800765a:	091b      	lsrs	r3, r3, #4
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	4a04      	ldr	r2, [pc, #16]	; (8007674 <RCC_GetHCLKClockFreq+0x28>)
 8007662:	5cd3      	ldrb	r3, [r2, r3]
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	40d3      	lsrs	r3, r2
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	0801cbb0 	.word	0x0801cbb0

08007678 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007680:	f7ff ff44 	bl	800750c <LL_RCC_GetAPB1Prescaler>
 8007684:	4603      	mov	r3, r0
 8007686:	0a9b      	lsrs	r3, r3, #10
 8007688:	4a04      	ldr	r2, [pc, #16]	; (800769c <RCC_GetPCLK1ClockFreq+0x24>)
 800768a:	5cd3      	ldrb	r3, [r2, r3]
 800768c:	461a      	mov	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	40d3      	lsrs	r3, r2
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	0801cbc0 	.word	0x0801cbc0

080076a0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80076a8:	f7ff ff3e 	bl	8007528 <LL_RCC_GetAPB2Prescaler>
 80076ac:	4603      	mov	r3, r0
 80076ae:	0b5b      	lsrs	r3, r3, #13
 80076b0:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <RCC_GetPCLK2ClockFreq+0x24>)
 80076b2:	5cd3      	ldrb	r3, [r2, r3]
 80076b4:	461a      	mov	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	40d3      	lsrs	r3, r2
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	0801cbc0 	.word	0x0801cbc0

080076c8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	2300      	movs	r3, #0
 80076da:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80076dc:	f7ff ff32 	bl	8007544 <LL_RCC_PLL_GetMainSource>
 80076e0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80076e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ec:	d003      	beq.n	80076f6 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80076ee:	e005      	b.n	80076fc <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80076f0:	4b12      	ldr	r3, [pc, #72]	; (800773c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80076f2:	617b      	str	r3, [r7, #20]
      break;
 80076f4:	e005      	b.n	8007702 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80076f8:	617b      	str	r3, [r7, #20]
      break;
 80076fa:	e002      	b.n	8007702 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80076fe:	617b      	str	r3, [r7, #20]
      break;
 8007700:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b08      	cmp	r3, #8
 8007706:	d113      	bne.n	8007730 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007708:	f7ff ff46 	bl	8007598 <LL_RCC_PLL_GetDivider>
 800770c:	4602      	mov	r2, r0
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	fbb3 f4f2 	udiv	r4, r3, r2
 8007714:	f7ff ff24 	bl	8007560 <LL_RCC_PLL_GetN>
 8007718:	4603      	mov	r3, r0
 800771a:	fb03 f404 	mul.w	r4, r3, r4
 800771e:	f7ff ff2d 	bl	800757c <LL_RCC_PLL_GetP>
 8007722:	4603      	mov	r3, r0
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	3301      	adds	r3, #1
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	fbb4 f3f3 	udiv	r3, r4, r3
 800772e:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007730:	693b      	ldr	r3, [r7, #16]
}
 8007732:	4618      	mov	r0, r3
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	bd90      	pop	{r4, r7, pc}
 800773a:	bf00      	nop
 800773c:	00f42400 	.word	0x00f42400
 8007740:	007a1200 	.word	0x007a1200

08007744 <LL_USART_IsEnabled>:
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007758:	bf0c      	ite	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	2300      	movne	r3, #0
 800775e:	b2db      	uxtb	r3, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <LL_USART_SetStopBitsLength>:
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	611a      	str	r2, [r3, #16]
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <LL_USART_SetHWFlowCtrl>:
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	615a      	str	r2, [r3, #20]
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <LL_USART_SetBaudRate>:
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077cc:	d152      	bne.n	8007874 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009a      	lsls	r2, r3, #2
 80077d8:	441a      	add	r2, r3
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	4a4f      	ldr	r2, [pc, #316]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 80077e4:	fba2 2303 	umull	r2, r3, r2, r3
 80077e8:	095b      	lsrs	r3, r3, #5
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	b299      	uxth	r1, r3
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009a      	lsls	r2, r3, #2
 80077fa:	441a      	add	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	fbb2 f2f3 	udiv	r2, r2, r3
 8007804:	4b46      	ldr	r3, [pc, #280]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 8007806:	fba3 0302 	umull	r0, r3, r3, r2
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	2064      	movs	r0, #100	; 0x64
 800780e:	fb00 f303 	mul.w	r3, r0, r3
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	3332      	adds	r3, #50	; 0x32
 8007818:	4a41      	ldr	r2, [pc, #260]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 800781a:	fba2 2303 	umull	r2, r3, r2, r3
 800781e:	095b      	lsrs	r3, r3, #5
 8007820:	b29b      	uxth	r3, r3
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	b29b      	uxth	r3, r3
 8007826:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800782a:	b29b      	uxth	r3, r3
 800782c:	440b      	add	r3, r1
 800782e:	b299      	uxth	r1, r3
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009a      	lsls	r2, r3, #2
 800783a:	441a      	add	r2, r3
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	fbb2 f2f3 	udiv	r2, r2, r3
 8007844:	4b36      	ldr	r3, [pc, #216]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 8007846:	fba3 0302 	umull	r0, r3, r3, r2
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	2064      	movs	r0, #100	; 0x64
 800784e:	fb00 f303 	mul.w	r3, r0, r3
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	3332      	adds	r3, #50	; 0x32
 8007858:	4a31      	ldr	r2, [pc, #196]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 800785a:	fba2 2303 	umull	r2, r3, r2, r3
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	b29b      	uxth	r3, r3
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	b29b      	uxth	r3, r3
 8007868:	440b      	add	r3, r1
 800786a:	b29b      	uxth	r3, r3
 800786c:	461a      	mov	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	609a      	str	r2, [r3, #8]
}
 8007872:	e04f      	b.n	8007914 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009a      	lsls	r2, r3, #2
 800787e:	441a      	add	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	fbb2 f3f3 	udiv	r3, r2, r3
 8007888:	4a25      	ldr	r2, [pc, #148]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	b29b      	uxth	r3, r3
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	b299      	uxth	r1, r3
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009a      	lsls	r2, r3, #2
 80078a0:	441a      	add	r2, r3
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80078aa:	4b1d      	ldr	r3, [pc, #116]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 80078ac:	fba3 0302 	umull	r0, r3, r3, r2
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	2064      	movs	r0, #100	; 0x64
 80078b4:	fb00 f303 	mul.w	r3, r0, r3
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	3332      	adds	r3, #50	; 0x32
 80078be:	4a18      	ldr	r2, [pc, #96]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 80078c0:	fba2 2303 	umull	r2, r3, r2, r3
 80078c4:	095b      	lsrs	r3, r3, #5
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	440b      	add	r3, r1
 80078d0:	b299      	uxth	r1, r3
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009a      	lsls	r2, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80078e6:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 80078e8:	fba3 0302 	umull	r0, r3, r3, r2
 80078ec:	095b      	lsrs	r3, r3, #5
 80078ee:	2064      	movs	r0, #100	; 0x64
 80078f0:	fb00 f303 	mul.w	r3, r0, r3
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	3332      	adds	r3, #50	; 0x32
 80078fa:	4a09      	ldr	r2, [pc, #36]	; (8007920 <LL_USART_SetBaudRate+0x168>)
 80078fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	b29b      	uxth	r3, r3
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	b29b      	uxth	r3, r3
 800790a:	440b      	add	r3, r1
 800790c:	b29b      	uxth	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	609a      	str	r2, [r3, #8]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	51eb851f 	.word	0x51eb851f

08007924 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007932:	2300      	movs	r3, #0
 8007934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff ff04 	bl	8007744 <LL_USART_IsEnabled>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d16c      	bne.n	8007a1c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800794a:	f023 030c 	bic.w	r3, r3, #12
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	6851      	ldr	r1, [r2, #4]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	68d2      	ldr	r2, [r2, #12]
 8007956:	4311      	orrs	r1, r2
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	6912      	ldr	r2, [r2, #16]
 800795c:	4311      	orrs	r1, r2
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	6992      	ldr	r2, [r2, #24]
 8007962:	430a      	orrs	r2, r1
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fefb 	bl	800776c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff ff08 	bl	8007792 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007982:	f107 0308 	add.w	r3, r7, #8
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff fe14 	bl	80075b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a26      	ldr	r2, [pc, #152]	; (8007a28 <LL_USART_Init+0x104>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d102      	bne.n	800799a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	61bb      	str	r3, [r7, #24]
 8007998:	e02f      	b.n	80079fa <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a23      	ldr	r2, [pc, #140]	; (8007a2c <LL_USART_Init+0x108>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d102      	bne.n	80079a8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	61bb      	str	r3, [r7, #24]
 80079a6:	e028      	b.n	80079fa <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a21      	ldr	r2, [pc, #132]	; (8007a30 <LL_USART_Init+0x10c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d102      	bne.n	80079b6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	e021      	b.n	80079fa <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <LL_USART_Init+0x110>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d102      	bne.n	80079c4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	e01a      	b.n	80079fa <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <LL_USART_Init+0x114>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d102      	bne.n	80079d2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	e013      	b.n	80079fa <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a19      	ldr	r2, [pc, #100]	; (8007a3c <LL_USART_Init+0x118>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d102      	bne.n	80079e0 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	e00c      	b.n	80079fa <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a17      	ldr	r2, [pc, #92]	; (8007a40 <LL_USART_Init+0x11c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d102      	bne.n	80079ee <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	e005      	b.n	80079fa <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a14      	ldr	r2, [pc, #80]	; (8007a44 <LL_USART_Init+0x120>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d101      	bne.n	80079fa <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00d      	beq.n	8007a1c <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d009      	beq.n	8007a1c <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	699a      	ldr	r2, [r3, #24]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69b9      	ldr	r1, [r7, #24]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff fece 	bl	80077b8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007a1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3720      	adds	r7, #32
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40011000 	.word	0x40011000
 8007a2c:	40004400 	.word	0x40004400
 8007a30:	40004800 	.word	0x40004800
 8007a34:	40011400 	.word	0x40011400
 8007a38:	40004c00 	.word	0x40004c00
 8007a3c:	40005000 	.word	0x40005000
 8007a40:	40007800 	.word	0x40007800
 8007a44:	40007c00 	.word	0x40007c00

08007a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a48:	b084      	sub	sp, #16
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	f107 001c 	add.w	r0, r7, #28
 8007a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d122      	bne.n	8007aa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d105      	bne.n	8007a9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 fa7c 	bl	8008f98 <USB_CoreReset>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e01a      	b.n	8007adc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 fa70 	bl	8008f98 <USB_CoreReset>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d106      	bne.n	8007ad0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ace:	e005      	b.n	8007adc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d10b      	bne.n	8007afa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f043 0206 	orr.w	r2, r3, #6
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f043 0220 	orr.w	r2, r3, #32
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b06:	b004      	add	sp, #16
 8007b08:	4770      	bx	lr
	...

08007b0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d165      	bne.n	8007bec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4a41      	ldr	r2, [pc, #260]	; (8007c28 <USB_SetTurnaroundTime+0x11c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d906      	bls.n	8007b36 <USB_SetTurnaroundTime+0x2a>
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4a40      	ldr	r2, [pc, #256]	; (8007c2c <USB_SetTurnaroundTime+0x120>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d802      	bhi.n	8007b36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b30:	230f      	movs	r3, #15
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	e062      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	4a3c      	ldr	r2, [pc, #240]	; (8007c2c <USB_SetTurnaroundTime+0x120>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d906      	bls.n	8007b4c <USB_SetTurnaroundTime+0x40>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4a3b      	ldr	r2, [pc, #236]	; (8007c30 <USB_SetTurnaroundTime+0x124>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d802      	bhi.n	8007b4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b46:	230e      	movs	r3, #14
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	e057      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4a38      	ldr	r2, [pc, #224]	; (8007c30 <USB_SetTurnaroundTime+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d906      	bls.n	8007b62 <USB_SetTurnaroundTime+0x56>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4a37      	ldr	r2, [pc, #220]	; (8007c34 <USB_SetTurnaroundTime+0x128>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d802      	bhi.n	8007b62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b5c:	230d      	movs	r3, #13
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e04c      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4a33      	ldr	r2, [pc, #204]	; (8007c34 <USB_SetTurnaroundTime+0x128>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d906      	bls.n	8007b78 <USB_SetTurnaroundTime+0x6c>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	4a32      	ldr	r2, [pc, #200]	; (8007c38 <USB_SetTurnaroundTime+0x12c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d802      	bhi.n	8007b78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b72:	230c      	movs	r3, #12
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	e041      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4a2f      	ldr	r2, [pc, #188]	; (8007c38 <USB_SetTurnaroundTime+0x12c>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d906      	bls.n	8007b8e <USB_SetTurnaroundTime+0x82>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4a2e      	ldr	r2, [pc, #184]	; (8007c3c <USB_SetTurnaroundTime+0x130>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d802      	bhi.n	8007b8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b88:	230b      	movs	r3, #11
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e036      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	4a2a      	ldr	r2, [pc, #168]	; (8007c3c <USB_SetTurnaroundTime+0x130>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d906      	bls.n	8007ba4 <USB_SetTurnaroundTime+0x98>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4a29      	ldr	r2, [pc, #164]	; (8007c40 <USB_SetTurnaroundTime+0x134>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d802      	bhi.n	8007ba4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007b9e:	230a      	movs	r3, #10
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	e02b      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4a26      	ldr	r2, [pc, #152]	; (8007c40 <USB_SetTurnaroundTime+0x134>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d906      	bls.n	8007bba <USB_SetTurnaroundTime+0xae>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4a25      	ldr	r2, [pc, #148]	; (8007c44 <USB_SetTurnaroundTime+0x138>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d802      	bhi.n	8007bba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007bb4:	2309      	movs	r3, #9
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	e020      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	4a21      	ldr	r2, [pc, #132]	; (8007c44 <USB_SetTurnaroundTime+0x138>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d906      	bls.n	8007bd0 <USB_SetTurnaroundTime+0xc4>
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	4a20      	ldr	r2, [pc, #128]	; (8007c48 <USB_SetTurnaroundTime+0x13c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d802      	bhi.n	8007bd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007bca:	2308      	movs	r3, #8
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	e015      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4a1d      	ldr	r2, [pc, #116]	; (8007c48 <USB_SetTurnaroundTime+0x13c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d906      	bls.n	8007be6 <USB_SetTurnaroundTime+0xda>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <USB_SetTurnaroundTime+0x140>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d802      	bhi.n	8007be6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007be0:	2307      	movs	r3, #7
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	e00a      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007be6:	2306      	movs	r3, #6
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	e007      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d102      	bne.n	8007bf8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007bf2:	2309      	movs	r3, #9
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	e001      	b.n	8007bfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007bf8:	2309      	movs	r3, #9
 8007bfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	029b      	lsls	r3, r3, #10
 8007c10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c14:	431a      	orrs	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	00d8acbf 	.word	0x00d8acbf
 8007c2c:	00e4e1bf 	.word	0x00e4e1bf
 8007c30:	00f423ff 	.word	0x00f423ff
 8007c34:	0106737f 	.word	0x0106737f
 8007c38:	011a499f 	.word	0x011a499f
 8007c3c:	01312cff 	.word	0x01312cff
 8007c40:	014ca43f 	.word	0x014ca43f
 8007c44:	016e35ff 	.word	0x016e35ff
 8007c48:	01a6ab1f 	.word	0x01a6ab1f
 8007c4c:	01e847ff 	.word	0x01e847ff

08007c50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f043 0201 	orr.w	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f023 0201 	bic.w	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d106      	bne.n	8007cc0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	e00b      	b.n	8007cd8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60da      	str	r2, [r3, #12]
 8007cd2:	e001      	b.n	8007cd8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e003      	b.n	8007ce0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007cd8:	2032      	movs	r0, #50	; 0x32
 8007cda:	f7fa fb4f 	bl	800237c <HAL_Delay>

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ce8:	b084      	sub	sp, #16
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d02:	2300      	movs	r3, #0
 8007d04:	613b      	str	r3, [r7, #16]
 8007d06:	e009      	b.n	8007d1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3340      	adds	r3, #64	; 0x40
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	613b      	str	r3, [r7, #16]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2b0e      	cmp	r3, #14
 8007d20:	d9f2      	bls.n	8007d08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d112      	bne.n	8007d4e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8007d4c:	e00b      	b.n	8007d66 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d78:	4619      	mov	r1, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d80:	461a      	mov	r2, r3
 8007d82:	680b      	ldr	r3, [r1, #0]
 8007d84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d10c      	bne.n	8007da6 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d92:	2100      	movs	r1, #0
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f961 	bl	800805c <USB_SetDevSpeed>
 8007d9a:	e008      	b.n	8007dae <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f95c 	bl	800805c <USB_SetDevSpeed>
 8007da4:	e003      	b.n	8007dae <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007da6:	2103      	movs	r1, #3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f957 	bl	800805c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dae:	2110      	movs	r1, #16
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f90b 	bl	8007fcc <USB_FlushTxFifo>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f929 	bl	8008018 <USB_FlushRxFifo>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de2:	461a      	mov	r2, r3
 8007de4:	2300      	movs	r3, #0
 8007de6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dee:	461a      	mov	r2, r3
 8007df0:	2300      	movs	r3, #0
 8007df2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007df4:	2300      	movs	r3, #0
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	e043      	b.n	8007e82 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e10:	d118      	bne.n	8007e44 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e24:	461a      	mov	r2, r3
 8007e26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e2a:	6013      	str	r3, [r2, #0]
 8007e2c:	e013      	b.n	8007e56 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	e008      	b.n	8007e56 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	461a      	mov	r2, r3
 8007e52:	2300      	movs	r3, #0
 8007e54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e62:	461a      	mov	r2, r3
 8007e64:	2300      	movs	r3, #0
 8007e66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	461a      	mov	r2, r3
 8007e76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d3b7      	bcc.n	8007dfa <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	613b      	str	r3, [r7, #16]
 8007e8e:	e043      	b.n	8007f18 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ea6:	d118      	bne.n	8007eda <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	e013      	b.n	8007eec <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	e008      	b.n	8007eec <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef8:	461a      	mov	r2, r3
 8007efa:	2300      	movs	r3, #0
 8007efc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	3301      	adds	r3, #1
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3b7      	bcc.n	8007e90 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f32:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d111      	bne.n	8007f5e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f40:	461a      	mov	r2, r3
 8007f42:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <USB_DevInit+0x2dc>)
 8007f44:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f58:	f043 0303 	orr.w	r3, r3, #3
 8007f5c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f043 0210 	orr.w	r2, r3, #16
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <USB_DevInit+0x2e0>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	f043 0208 	orr.w	r2, r3, #8
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d107      	bne.n	8007fb2 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007faa:	f043 0304 	orr.w	r3, r3, #4
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fbe:	b004      	add	sp, #16
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	00800100 	.word	0x00800100
 8007fc8:	803c3800 	.word	0x803c3800

08007fcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	019b      	lsls	r3, r3, #6
 8007fde:	f043 0220 	orr.w	r2, r3, #32
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a09      	ldr	r2, [pc, #36]	; (8008014 <USB_FlushTxFifo+0x48>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d901      	bls.n	8007ff8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e006      	b.n	8008006 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f003 0320 	and.w	r3, r3, #32
 8008000:	2b20      	cmp	r3, #32
 8008002:	d0f0      	beq.n	8007fe6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	00030d40 	.word	0x00030d40

08008018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2210      	movs	r2, #16
 8008028:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3301      	adds	r3, #1
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4a09      	ldr	r2, [pc, #36]	; (8008058 <USB_FlushRxFifo+0x40>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d901      	bls.n	800803c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e006      	b.n	800804a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b10      	cmp	r3, #16
 8008046:	d0f0      	beq.n	800802a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	00030d40 	.word	0x00030d40

0800805c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800807c:	4313      	orrs	r3, r2
 800807e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800808e:	b480      	push	{r7}
 8008090:	b087      	sub	sp, #28
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 0306 	and.w	r3, r3, #6
 80080a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d102      	bne.n	80080b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75fb      	strb	r3, [r7, #23]
 80080b2:	e00a      	b.n	80080ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d002      	beq.n	80080c0 <USB_GetDevSpeed+0x32>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b06      	cmp	r3, #6
 80080be:	d102      	bne.n	80080c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80080c0:	2302      	movs	r3, #2
 80080c2:	75fb      	strb	r3, [r7, #23]
 80080c4:	e001      	b.n	80080ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80080c6:	230f      	movs	r3, #15
 80080c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	785b      	ldrb	r3, [r3, #1]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d13a      	bne.n	800816a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	69da      	ldr	r2, [r3, #28]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	f003 030f 	and.w	r3, r3, #15
 8008104:	2101      	movs	r1, #1
 8008106:	fa01 f303 	lsl.w	r3, r1, r3
 800810a:	b29b      	uxth	r3, r3
 800810c:	68f9      	ldr	r1, [r7, #12]
 800810e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008112:	4313      	orrs	r3, r2
 8008114:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d155      	bne.n	80081d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	78db      	ldrb	r3, [r3, #3]
 8008146:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008148:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	059b      	lsls	r3, r3, #22
 800814e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008150:	4313      	orrs	r3, r2
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	440a      	add	r2, r1
 800815a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	e036      	b.n	80081d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008170:	69da      	ldr	r2, [r3, #28]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	2101      	movs	r1, #1
 800817c:	fa01 f303 	lsl.w	r3, r1, r3
 8008180:	041b      	lsls	r3, r3, #16
 8008182:	68f9      	ldr	r1, [r7, #12]
 8008184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008188:	4313      	orrs	r3, r2
 800818a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d11a      	bne.n	80081d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	78db      	ldrb	r3, [r3, #3]
 80081bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081be:	430b      	orrs	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d135      	bne.n	8008270 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	2101      	movs	r1, #1
 8008216:	fa01 f303 	lsl.w	r3, r1, r3
 800821a:	b29b      	uxth	r3, r3
 800821c:	43db      	mvns	r3, r3
 800821e:	68f9      	ldr	r1, [r7, #12]
 8008220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008224:	4013      	ands	r3, r2
 8008226:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	2101      	movs	r1, #1
 800823a:	fa01 f303 	lsl.w	r3, r1, r3
 800823e:	b29b      	uxth	r3, r3
 8008240:	43db      	mvns	r3, r3
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008248:	4013      	ands	r3, r2
 800824a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	0159      	lsls	r1, r3, #5
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	440b      	add	r3, r1
 8008262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008266:	4619      	mov	r1, r3
 8008268:	4b1f      	ldr	r3, [pc, #124]	; (80082e8 <USB_DeactivateEndpoint+0x100>)
 800826a:	4013      	ands	r3, r2
 800826c:	600b      	str	r3, [r1, #0]
 800826e:	e034      	b.n	80082da <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	2101      	movs	r1, #1
 8008282:	fa01 f303 	lsl.w	r3, r1, r3
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	43db      	mvns	r3, r3
 800828a:	68f9      	ldr	r1, [r7, #12]
 800828c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008290:	4013      	ands	r3, r2
 8008292:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	2101      	movs	r1, #1
 80082a6:	fa01 f303 	lsl.w	r3, r1, r3
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	43db      	mvns	r3, r3
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b4:	4013      	ands	r3, r2
 80082b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	0159      	lsls	r1, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	440b      	add	r3, r1
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	4619      	mov	r1, r3
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <USB_DeactivateEndpoint+0x104>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	ec337800 	.word	0xec337800
 80082ec:	eff37800 	.word	0xeff37800

080082f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4613      	mov	r3, r2
 80082fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	2b01      	cmp	r3, #1
 800830e:	f040 815c 	bne.w	80085ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d132      	bne.n	8008380 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	0151      	lsls	r1, r2, #5
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	440a      	add	r2, r1
 8008330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008334:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008338:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800833c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	4413      	add	r3, r2
 8008346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	0151      	lsls	r1, r2, #5
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	440a      	add	r2, r1
 8008354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800835c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	0151      	lsls	r1, r2, #5
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	440a      	add	r2, r1
 8008374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008378:	0cdb      	lsrs	r3, r3, #19
 800837a:	04db      	lsls	r3, r3, #19
 800837c:	6113      	str	r3, [r2, #16]
 800837e:	e074      	b.n	800846a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	0151      	lsls	r1, r2, #5
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	440a      	add	r2, r1
 8008396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800839a:	0cdb      	lsrs	r3, r3, #19
 800839c:	04db      	lsls	r3, r3, #19
 800839e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	6959      	ldr	r1, [r3, #20]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	440b      	add	r3, r1
 80083dc:	1e59      	subs	r1, r3, #1
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80083e6:	04d9      	lsls	r1, r3, #19
 80083e8:	4b9d      	ldr	r3, [pc, #628]	; (8008660 <USB_EPStartXfer+0x370>)
 80083ea:	400b      	ands	r3, r1
 80083ec:	69b9      	ldr	r1, [r7, #24]
 80083ee:	0148      	lsls	r0, r1, #5
 80083f0:	69f9      	ldr	r1, [r7, #28]
 80083f2:	4401      	add	r1, r0
 80083f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083f8:	4313      	orrs	r3, r2
 80083fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008408:	691a      	ldr	r2, [r3, #16]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008412:	69b9      	ldr	r1, [r7, #24]
 8008414:	0148      	lsls	r0, r1, #5
 8008416:	69f9      	ldr	r1, [r7, #28]
 8008418:	4401      	add	r1, r0
 800841a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800841e:	4313      	orrs	r3, r2
 8008420:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	78db      	ldrb	r3, [r3, #3]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d11f      	bne.n	800846a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	440a      	add	r2, r1
 8008440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008444:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008448:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	440a      	add	r2, r1
 8008460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008468:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d14b      	bne.n	8008508 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008484:	461a      	mov	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	78db      	ldrb	r3, [r3, #3]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d128      	bne.n	80084e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d110      	bne.n	80084c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	69fa      	ldr	r2, [r7, #28]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	e00f      	b.n	80084e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	69fa      	ldr	r2, [r7, #28]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	69fa      	ldr	r2, [r7, #28]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008500:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	e12f      	b.n	8008768 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	0151      	lsls	r1, r2, #5
 800851a:	69fa      	ldr	r2, [r7, #28]
 800851c:	440a      	add	r2, r1
 800851e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008526:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	78db      	ldrb	r3, [r3, #3]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d015      	beq.n	800855c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8117 	beq.w	8008768 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	2101      	movs	r1, #1
 800854c:	fa01 f303 	lsl.w	r3, r1, r3
 8008550:	69f9      	ldr	r1, [r7, #28]
 8008552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008556:	4313      	orrs	r3, r2
 8008558:	634b      	str	r3, [r1, #52]	; 0x34
 800855a:	e105      	b.n	8008768 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008568:	2b00      	cmp	r3, #0
 800856a:	d110      	bne.n	800858e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	440a      	add	r2, r1
 8008582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008586:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	e00f      	b.n	80085ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	68d9      	ldr	r1, [r3, #12]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	781a      	ldrb	r2, [r3, #0]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	b298      	uxth	r0, r3
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	4603      	mov	r3, r0
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fa2b 	bl	8008a1e <USB_WritePacket>
 80085c8:	e0ce      	b.n	8008768 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e4:	0cdb      	lsrs	r3, r3, #19
 80085e6:	04db      	lsls	r3, r3, #19
 80085e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008604:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008608:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800860c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d126      	bne.n	8008664 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008622:	691a      	ldr	r2, [r3, #16]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800862c:	69b9      	ldr	r1, [r7, #24]
 800862e:	0148      	lsls	r0, r1, #5
 8008630:	69f9      	ldr	r1, [r7, #28]
 8008632:	4401      	add	r1, r0
 8008634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008638:	4313      	orrs	r3, r2
 800863a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	69ba      	ldr	r2, [r7, #24]
 800864c:	0151      	lsls	r1, r2, #5
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	440a      	add	r2, r1
 8008652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800865a:	6113      	str	r3, [r2, #16]
 800865c:	e036      	b.n	80086cc <USB_EPStartXfer+0x3dc>
 800865e:	bf00      	nop
 8008660:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	695a      	ldr	r2, [r3, #20]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	4413      	add	r3, r2
 800866e:	1e5a      	subs	r2, r3, #1
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	fbb2 f3f3 	udiv	r3, r2, r3
 8008678:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	8afb      	ldrh	r3, [r7, #22]
 800868a:	04d9      	lsls	r1, r3, #19
 800868c:	4b39      	ldr	r3, [pc, #228]	; (8008774 <USB_EPStartXfer+0x484>)
 800868e:	400b      	ands	r3, r1
 8008690:	69b9      	ldr	r1, [r7, #24]
 8008692:	0148      	lsls	r0, r1, #5
 8008694:	69f9      	ldr	r1, [r7, #28]
 8008696:	4401      	add	r1, r0
 8008698:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800869c:	4313      	orrs	r3, r2
 800869e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	8af9      	ldrh	r1, [r7, #22]
 80086b4:	fb01 f303 	mul.w	r3, r1, r3
 80086b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086bc:	69b9      	ldr	r1, [r7, #24]
 80086be:	0148      	lsls	r0, r1, #5
 80086c0:	69f9      	ldr	r1, [r7, #28]
 80086c2:	4401      	add	r1, r0
 80086c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086c8:	4313      	orrs	r3, r2
 80086ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d10d      	bne.n	80086ee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	68d9      	ldr	r1, [r3, #12]
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ea:	460a      	mov	r2, r1
 80086ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	78db      	ldrb	r3, [r3, #3]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d128      	bne.n	8008748 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008702:	2b00      	cmp	r3, #0
 8008704:	d110      	bne.n	8008728 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	440a      	add	r2, r1
 800871c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	e00f      	b.n	8008748 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008746:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	440a      	add	r2, r1
 800875e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008766:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3720      	adds	r7, #32
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	1ff80000 	.word	0x1ff80000

08008778 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	785b      	ldrb	r3, [r3, #1]
 8008794:	2b01      	cmp	r3, #1
 8008796:	f040 80cd 	bne.w	8008934 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d132      	bne.n	8008808 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008800:	0cdb      	lsrs	r3, r3, #19
 8008802:	04db      	lsls	r3, r3, #19
 8008804:	6113      	str	r3, [r2, #16]
 8008806:	e04e      	b.n	80088a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	440a      	add	r2, r1
 800881e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008822:	0cdb      	lsrs	r3, r3, #19
 8008824:	04db      	lsls	r3, r3, #19
 8008826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800884a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	695a      	ldr	r2, [r3, #20]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	429a      	cmp	r2, r3
 8008856:	d903      	bls.n	8008860 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	440a      	add	r2, r1
 8008876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800887e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008896:	6939      	ldr	r1, [r7, #16]
 8008898:	0148      	lsls	r0, r1, #5
 800889a:	6979      	ldr	r1, [r7, #20]
 800889c:	4401      	add	r1, r0
 800889e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088a2:	4313      	orrs	r3, r2
 80088a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d11e      	bne.n	80088ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c0:	461a      	mov	r2, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	e092      	b.n	8008a10 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	0151      	lsls	r1, r2, #5
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	440a      	add	r2, r1
 8008900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008904:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008908:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d07e      	beq.n	8008a10 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	f003 030f 	and.w	r3, r3, #15
 8008922:	2101      	movs	r1, #1
 8008924:	fa01 f303 	lsl.w	r3, r1, r3
 8008928:	6979      	ldr	r1, [r7, #20]
 800892a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800892e:	4313      	orrs	r3, r2
 8008930:	634b      	str	r3, [r1, #52]	; 0x34
 8008932:	e06d      	b.n	8008a10 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894e:	0cdb      	lsrs	r3, r3, #19
 8008950:	04db      	lsls	r3, r3, #19
 8008952:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	440a      	add	r2, r1
 800896a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800896e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008972:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008976:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	4413      	add	r3, r2
 8008990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	440a      	add	r2, r1
 800899e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089be:	6939      	ldr	r1, [r7, #16]
 80089c0:	0148      	lsls	r0, r1, #5
 80089c2:	6979      	ldr	r1, [r7, #20]
 80089c4:	4401      	add	r1, r0
 80089c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089ca:	4313      	orrs	r3, r2
 80089cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d10d      	bne.n	80089f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	68d9      	ldr	r1, [r3, #12]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	460a      	mov	r2, r1
 80089ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	0151      	lsls	r1, r2, #5
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	440a      	add	r2, r1
 8008a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	371c      	adds	r7, #28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b089      	sub	sp, #36	; 0x24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	4611      	mov	r1, r2
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	71fb      	strb	r3, [r7, #7]
 8008a30:	4613      	mov	r3, r2
 8008a32:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008a3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d11a      	bne.n	8008a7a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a44:	88bb      	ldrh	r3, [r7, #4]
 8008a46:	3303      	adds	r3, #3
 8008a48:	089b      	lsrs	r3, r3, #2
 8008a4a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	e00f      	b.n	8008a72 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	031a      	lsls	r2, r3, #12
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5e:	461a      	mov	r2, r3
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61bb      	str	r3, [r7, #24]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d3eb      	bcc.n	8008a52 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3724      	adds	r7, #36	; 0x24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b089      	sub	sp, #36	; 0x24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	3303      	adds	r3, #3
 8008aa2:	089b      	lsrs	r3, r3, #2
 8008aa4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e00b      	b.n	8008ac4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	3304      	adds	r3, #4
 8008abc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	61bb      	str	r3, [r7, #24]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d3ef      	bcc.n	8008aac <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008acc:	69fb      	ldr	r3, [r7, #28]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3724      	adds	r7, #36	; 0x24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b085      	sub	sp, #20
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	785b      	ldrb	r3, [r3, #1]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d12c      	bne.n	8008b50 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	db12      	blt.n	8008b2e <USB_EPSetStall+0x54>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00f      	beq.n	8008b2e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b2c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	e02b      	b.n	8008ba8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	db12      	blt.n	8008b88 <USB_EPSetStall+0xae>
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00f      	beq.n	8008b88 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b86:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	0151      	lsls	r1, r2, #5
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	440a      	add	r2, r1
 8008b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ba6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	785b      	ldrb	r3, [r3, #1]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d128      	bne.n	8008c24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	0151      	lsls	r1, r2, #5
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	440a      	add	r2, r1
 8008be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	78db      	ldrb	r3, [r3, #3]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d003      	beq.n	8008c02 <USB_EPClearStall+0x4c>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	78db      	ldrb	r3, [r3, #3]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d138      	bne.n	8008c74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	0151      	lsls	r1, r2, #5
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	440a      	add	r2, r1
 8008c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	e027      	b.n	8008c74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	0151      	lsls	r1, r2, #5
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	440a      	add	r2, r1
 8008c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	78db      	ldrb	r3, [r3, #3]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d003      	beq.n	8008c54 <USB_EPClearStall+0x9e>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	78db      	ldrb	r3, [r3, #3]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d10f      	bne.n	8008c74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	0151      	lsls	r1, r2, #5
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	440a      	add	r2, r1
 8008c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ca4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	011b      	lsls	r3, r3, #4
 8008cb2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ce8:	f023 0302 	bic.w	r3, r3, #2
 8008cec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008cee:	2003      	movs	r0, #3
 8008cf0:	f7f9 fb44 	bl	800237c <HAL_Delay>

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d18:	f043 0302 	orr.w	r3, r3, #2
 8008d1c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008d1e:	2003      	movs	r0, #3
 8008d20:	f7f9 fb2c 	bl	800237c <HAL_Delay>

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b085      	sub	sp, #20
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	4013      	ands	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d46:	68fb      	ldr	r3, [r7, #12]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	4013      	ands	r3, r2
 8008d76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	0c1b      	lsrs	r3, r3, #16
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	4013      	ands	r3, r2
 8008daa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	b29b      	uxth	r3, r3
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	4013      	ands	r3, r2
 8008de8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dea:	68bb      	ldr	r3, [r7, #8]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
 8008e28:	01db      	lsls	r3, r3, #7
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	4013      	ands	r3, r2
 8008e44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e46:	68bb      	ldr	r3, [r7, #8]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	371c      	adds	r7, #28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	f003 0301 	and.w	r3, r3, #1
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e8e:	f023 0307 	bic.w	r3, r3, #7
 8008e92:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f003 0306 	and.w	r3, r3, #6
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d109      	bne.n	8008eb8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb2:	f043 0303 	orr.w	r3, r3, #3
 8008eb6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
	...

08008edc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	333c      	adds	r3, #60	; 0x3c
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4a26      	ldr	r2, [pc, #152]	; (8008f94 <USB_EP0_OutStart+0xb8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d90a      	bls.n	8008f16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f10:	d101      	bne.n	8008f16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e037      	b.n	8008f86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	2300      	movs	r3, #0
 8008f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f44:	f043 0318 	orr.w	r3, r3, #24
 8008f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d10f      	bne.n	8008f84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	4f54300a 	.word	0x4f54300a

08008f98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4a13      	ldr	r2, [pc, #76]	; (8008ffc <USB_CoreReset+0x64>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d901      	bls.n	8008fb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e01b      	b.n	8008fee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	daf2      	bge.n	8008fa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f043 0201 	orr.w	r2, r3, #1
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4a09      	ldr	r2, [pc, #36]	; (8008ffc <USB_CoreReset+0x64>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d901      	bls.n	8008fe0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e006      	b.n	8008fee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d0f0      	beq.n	8008fce <USB_CoreReset+0x36>

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	00030d40 	.word	0x00030d40

08009000 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009006:	2100      	movs	r1, #0
 8009008:	2000      	movs	r0, #0
 800900a:	f004 fe8d 	bl	800dd28 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800900e:	4b17      	ldr	r3, [pc, #92]	; (800906c <MX_LWIP_Init+0x6c>)
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009014:	4b16      	ldr	r3, [pc, #88]	; (8009070 <MX_LWIP_Init+0x70>)
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800901a:	4b16      	ldr	r3, [pc, #88]	; (8009074 <MX_LWIP_Init+0x74>)
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009020:	4b15      	ldr	r3, [pc, #84]	; (8009078 <MX_LWIP_Init+0x78>)
 8009022:	9302      	str	r3, [sp, #8]
 8009024:	4b15      	ldr	r3, [pc, #84]	; (800907c <MX_LWIP_Init+0x7c>)
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	2300      	movs	r3, #0
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	4b11      	ldr	r3, [pc, #68]	; (8009074 <MX_LWIP_Init+0x74>)
 800902e:	4a10      	ldr	r2, [pc, #64]	; (8009070 <MX_LWIP_Init+0x70>)
 8009030:	490e      	ldr	r1, [pc, #56]	; (800906c <MX_LWIP_Init+0x6c>)
 8009032:	4813      	ldr	r0, [pc, #76]	; (8009080 <MX_LWIP_Init+0x80>)
 8009034:	f005 fb34 	bl	800e6a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009038:	4811      	ldr	r0, [pc, #68]	; (8009080 <MX_LWIP_Init+0x80>)
 800903a:	f005 fc19 	bl	800e870 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800903e:	4b10      	ldr	r3, [pc, #64]	; (8009080 <MX_LWIP_Init+0x80>)
 8009040:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009044:	089b      	lsrs	r3, r3, #2
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009050:	480b      	ldr	r0, [pc, #44]	; (8009080 <MX_LWIP_Init+0x80>)
 8009052:	f005 fc1d 	bl	800e890 <netif_set_up>
 8009056:	e002      	b.n	800905e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009058:	4809      	ldr	r0, [pc, #36]	; (8009080 <MX_LWIP_Init+0x80>)
 800905a:	f005 fc5d 	bl	800e918 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800905e:	4808      	ldr	r0, [pc, #32]	; (8009080 <MX_LWIP_Init+0x80>)
 8009060:	f00b fe80 	bl	8014d64 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009064:	bf00      	nop
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20004510 	.word	0x20004510
 8009070:	20004514 	.word	0x20004514
 8009074:	20004518 	.word	0x20004518
 8009078:	0800dc51 	.word	0x0800dc51
 800907c:	080096d1 	.word	0x080096d1
 8009080:	200044dc 	.word	0x200044dc

08009084 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08e      	sub	sp, #56	; 0x38
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800908c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	605a      	str	r2, [r3, #4]
 8009096:	609a      	str	r2, [r3, #8]
 8009098:	60da      	str	r2, [r3, #12]
 800909a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a59      	ldr	r2, [pc, #356]	; (8009208 <HAL_ETH_MspInit+0x184>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	f040 80ac 	bne.w	8009200 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80090a8:	2300      	movs	r3, #0
 80090aa:	623b      	str	r3, [r7, #32]
 80090ac:	4b57      	ldr	r3, [pc, #348]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	4a56      	ldr	r2, [pc, #344]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80090b6:	6313      	str	r3, [r2, #48]	; 0x30
 80090b8:	4b54      	ldr	r3, [pc, #336]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090c0:	623b      	str	r3, [r7, #32]
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	2300      	movs	r3, #0
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	4b50      	ldr	r3, [pc, #320]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090cc:	4a4f      	ldr	r2, [pc, #316]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090d2:	6313      	str	r3, [r2, #48]	; 0x30
 80090d4:	4b4d      	ldr	r3, [pc, #308]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	2300      	movs	r3, #0
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	4b49      	ldr	r3, [pc, #292]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	4a48      	ldr	r2, [pc, #288]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090ee:	6313      	str	r3, [r2, #48]	; 0x30
 80090f0:	4b46      	ldr	r3, [pc, #280]	; (800920c <HAL_ETH_MspInit+0x188>)
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]
 8009100:	4b42      	ldr	r3, [pc, #264]	; (800920c <HAL_ETH_MspInit+0x188>)
 8009102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009104:	4a41      	ldr	r2, [pc, #260]	; (800920c <HAL_ETH_MspInit+0x188>)
 8009106:	f043 0304 	orr.w	r3, r3, #4
 800910a:	6313      	str	r3, [r2, #48]	; 0x30
 800910c:	4b3f      	ldr	r3, [pc, #252]	; (800920c <HAL_ETH_MspInit+0x188>)
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009118:	2300      	movs	r3, #0
 800911a:	613b      	str	r3, [r7, #16]
 800911c:	4b3b      	ldr	r3, [pc, #236]	; (800920c <HAL_ETH_MspInit+0x188>)
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	4a3a      	ldr	r2, [pc, #232]	; (800920c <HAL_ETH_MspInit+0x188>)
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	6313      	str	r3, [r2, #48]	; 0x30
 8009128:	4b38      	ldr	r3, [pc, #224]	; (800920c <HAL_ETH_MspInit+0x188>)
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	613b      	str	r3, [r7, #16]
 8009132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	4b34      	ldr	r3, [pc, #208]	; (800920c <HAL_ETH_MspInit+0x188>)
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	4a33      	ldr	r2, [pc, #204]	; (800920c <HAL_ETH_MspInit+0x188>)
 800913e:	f043 0302 	orr.w	r3, r3, #2
 8009142:	6313      	str	r3, [r2, #48]	; 0x30
 8009144:	4b31      	ldr	r3, [pc, #196]	; (800920c <HAL_ETH_MspInit+0x188>)
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	60fb      	str	r3, [r7, #12]
 800914e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009150:	2300      	movs	r3, #0
 8009152:	60bb      	str	r3, [r7, #8]
 8009154:	4b2d      	ldr	r3, [pc, #180]	; (800920c <HAL_ETH_MspInit+0x188>)
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	4a2c      	ldr	r2, [pc, #176]	; (800920c <HAL_ETH_MspInit+0x188>)
 800915a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800915e:	6313      	str	r3, [r2, #48]	; 0x30
 8009160:	4b2a      	ldr	r3, [pc, #168]	; (800920c <HAL_ETH_MspInit+0x188>)
 8009162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800916c:	2332      	movs	r3, #50	; 0x32
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009170:	2302      	movs	r3, #2
 8009172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009174:	2300      	movs	r3, #0
 8009176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009178:	2303      	movs	r3, #3
 800917a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800917c:	230b      	movs	r3, #11
 800917e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009184:	4619      	mov	r1, r3
 8009186:	4822      	ldr	r0, [pc, #136]	; (8009210 <HAL_ETH_MspInit+0x18c>)
 8009188:	f7fa fa30 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800918c:	2386      	movs	r3, #134	; 0x86
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009190:	2302      	movs	r3, #2
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009194:	2300      	movs	r3, #0
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009198:	2303      	movs	r3, #3
 800919a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800919c:	230b      	movs	r3, #11
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a4:	4619      	mov	r1, r3
 80091a6:	481b      	ldr	r0, [pc, #108]	; (8009214 <HAL_ETH_MspInit+0x190>)
 80091a8:	f7fa fa20 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80091ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091b2:	2302      	movs	r3, #2
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091ba:	2303      	movs	r3, #3
 80091bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80091be:	230b      	movs	r3, #11
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80091c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091c6:	4619      	mov	r1, r3
 80091c8:	4813      	ldr	r0, [pc, #76]	; (8009218 <HAL_ETH_MspInit+0x194>)
 80091ca:	f7fa fa0f 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80091ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091d4:	2302      	movs	r3, #2
 80091d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091dc:	2303      	movs	r3, #3
 80091de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80091e0:	230b      	movs	r3, #11
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80091e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e8:	4619      	mov	r1, r3
 80091ea:	480c      	ldr	r0, [pc, #48]	; (800921c <HAL_ETH_MspInit+0x198>)
 80091ec:	f7fa f9fe 	bl	80035ec <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80091f0:	2200      	movs	r2, #0
 80091f2:	2105      	movs	r1, #5
 80091f4:	203d      	movs	r0, #61	; 0x3d
 80091f6:	f7f9 f99b 	bl	8002530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80091fa:	203d      	movs	r0, #61	; 0x3d
 80091fc:	f7f9 f9b4 	bl	8002568 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009200:	bf00      	nop
 8009202:	3738      	adds	r7, #56	; 0x38
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40028000 	.word	0x40028000
 800920c:	40023800 	.word	0x40023800
 8009210:	40020800 	.word	0x40020800
 8009214:	40020000 	.word	0x40020000
 8009218:	40020400 	.word	0x40020400
 800921c:	40021800 	.word	0x40021800

08009220 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8009228:	4b04      	ldr	r3, [pc, #16]	; (800923c <HAL_ETH_RxCpltCallback+0x1c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f001 ff47 	bl	800b0c0 <osSemaphoreRelease>
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000460 	.word	0x20000460

08009240 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8009240:	b5b0      	push	{r4, r5, r7, lr}
 8009242:	b090      	sub	sp, #64	; 0x40
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800924c:	4b5c      	ldr	r3, [pc, #368]	; (80093c0 <low_level_init+0x180>)
 800924e:	4a5d      	ldr	r2, [pc, #372]	; (80093c4 <low_level_init+0x184>)
 8009250:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009252:	4b5b      	ldr	r3, [pc, #364]	; (80093c0 <low_level_init+0x180>)
 8009254:	2201      	movs	r2, #1
 8009256:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009258:	4b59      	ldr	r3, [pc, #356]	; (80093c0 <low_level_init+0x180>)
 800925a:	2200      	movs	r2, #0
 800925c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800925e:	2300      	movs	r3, #0
 8009260:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009264:	2380      	movs	r3, #128	; 0x80
 8009266:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800926a:	23e1      	movs	r3, #225	; 0xe1
 800926c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009276:	2300      	movs	r3, #0
 8009278:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800927c:	2300      	movs	r3, #0
 800927e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009282:	4a4f      	ldr	r2, [pc, #316]	; (80093c0 <low_level_init+0x180>)
 8009284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009288:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800928a:	4b4d      	ldr	r3, [pc, #308]	; (80093c0 <low_level_init+0x180>)
 800928c:	2201      	movs	r2, #1
 800928e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009290:	4b4b      	ldr	r3, [pc, #300]	; (80093c0 <low_level_init+0x180>)
 8009292:	2200      	movs	r2, #0
 8009294:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009296:	4b4a      	ldr	r3, [pc, #296]	; (80093c0 <low_level_init+0x180>)
 8009298:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800929c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800929e:	4848      	ldr	r0, [pc, #288]	; (80093c0 <low_level_init+0x180>)
 80092a0:	f7f9 f992 	bl	80025c8 <HAL_ETH_Init>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80092aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d108      	bne.n	80092c4 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80092b8:	f043 0304 	orr.w	r3, r3, #4
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80092c4:	2304      	movs	r3, #4
 80092c6:	4a40      	ldr	r2, [pc, #256]	; (80093c8 <low_level_init+0x188>)
 80092c8:	4940      	ldr	r1, [pc, #256]	; (80093cc <low_level_init+0x18c>)
 80092ca:	483d      	ldr	r0, [pc, #244]	; (80093c0 <low_level_init+0x180>)
 80092cc:	f7f9 fb1a 	bl	8002904 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80092d0:	2304      	movs	r3, #4
 80092d2:	4a3f      	ldr	r2, [pc, #252]	; (80093d0 <low_level_init+0x190>)
 80092d4:	493f      	ldr	r1, [pc, #252]	; (80093d4 <low_level_init+0x194>)
 80092d6:	483a      	ldr	r0, [pc, #232]	; (80093c0 <low_level_init+0x180>)
 80092d8:	f7f9 fb7d 	bl	80029d6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2206      	movs	r2, #6
 80092e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80092e4:	4b36      	ldr	r3, [pc, #216]	; (80093c0 <low_level_init+0x180>)
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	781a      	ldrb	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80092f0:	4b33      	ldr	r3, [pc, #204]	; (80093c0 <low_level_init+0x180>)
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	785a      	ldrb	r2, [r3, #1]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80092fc:	4b30      	ldr	r3, [pc, #192]	; (80093c0 <low_level_init+0x180>)
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	789a      	ldrb	r2, [r3, #2]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009308:	4b2d      	ldr	r3, [pc, #180]	; (80093c0 <low_level_init+0x180>)
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	78da      	ldrb	r2, [r3, #3]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009314:	4b2a      	ldr	r3, [pc, #168]	; (80093c0 <low_level_init+0x180>)
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	791a      	ldrb	r2, [r3, #4]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009320:	4b27      	ldr	r3, [pc, #156]	; (80093c0 <low_level_init+0x180>)
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	795a      	ldrb	r2, [r3, #5]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009332:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800933a:	f043 030a 	orr.w	r3, r3, #10
 800933e:	b2da      	uxtb	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009346:	2300      	movs	r3, #0
 8009348:	62bb      	str	r3, [r7, #40]	; 0x28
 800934a:	2300      	movs	r3, #0
 800934c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800934e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009352:	2101      	movs	r1, #1
 8009354:	4618      	mov	r0, r3
 8009356:	f001 fe31 	bl	800afbc <osSemaphoreCreate>
 800935a:	4602      	mov	r2, r0
 800935c:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <low_level_init+0x198>)
 800935e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009360:	4b1e      	ldr	r3, [pc, #120]	; (80093dc <low_level_init+0x19c>)
 8009362:	f107 040c 	add.w	r4, r7, #12
 8009366:	461d      	mov	r5, r3
 8009368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800936a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800936c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4618      	mov	r0, r3
 800937c:	f001 fd21 	bl	800adc2 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009380:	480f      	ldr	r0, [pc, #60]	; (80093c0 <low_level_init+0x180>)
 8009382:	f7f9 fe50 	bl	8003026 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800938a:	461a      	mov	r2, r3
 800938c:	211d      	movs	r1, #29
 800938e:	480c      	ldr	r0, [pc, #48]	; (80093c0 <low_level_init+0x180>)
 8009390:	f7f9 fd7b 	bl	8002e8a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	f043 030b 	orr.w	r3, r3, #11
 800939a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	461a      	mov	r2, r3
 80093a0:	211d      	movs	r1, #29
 80093a2:	4807      	ldr	r0, [pc, #28]	; (80093c0 <low_level_init+0x180>)
 80093a4:	f7f9 fdd9 	bl	8002f5a <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80093a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80093ac:	461a      	mov	r2, r3
 80093ae:	211d      	movs	r1, #29
 80093b0:	4803      	ldr	r0, [pc, #12]	; (80093c0 <low_level_init+0x180>)
 80093b2:	f7f9 fd6a 	bl	8002e8a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80093b6:	bf00      	nop
 80093b8:	3740      	adds	r7, #64	; 0x40
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bdb0      	pop	{r4, r5, r7, pc}
 80093be:	bf00      	nop
 80093c0:	20005dec 	.word	0x20005dec
 80093c4:	40028000 	.word	0x40028000
 80093c8:	20005e34 	.word	0x20005e34
 80093cc:	2000451c 	.word	0x2000451c
 80093d0:	2000459c 	.word	0x2000459c
 80093d4:	20005d6c 	.word	0x20005d6c
 80093d8:	20000460 	.word	0x20000460
 80093dc:	0801a890 	.word	0x0801a890

080093e0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08a      	sub	sp, #40	; 0x28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80093ea:	4b4b      	ldr	r3, [pc, #300]	; (8009518 <low_level_output+0x138>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8009402:	4b45      	ldr	r3, [pc, #276]	; (8009518 <low_level_output+0x138>)
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	623b      	str	r3, [r7, #32]
 8009410:	e05a      	b.n	80094c8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	da03      	bge.n	8009422 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800941a:	23f8      	movs	r3, #248	; 0xf8
 800941c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009420:	e05c      	b.n	80094dc <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	895b      	ldrh	r3, [r3, #10]
 8009426:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800942c:	e02f      	b.n	800948e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	18d0      	adds	r0, r2, r3
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	18d1      	adds	r1, r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009442:	3304      	adds	r3, #4
 8009444:	461a      	mov	r2, r3
 8009446:	f010 f892 	bl	801956e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	da03      	bge.n	8009460 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009458:	23f8      	movs	r3, #248	; 0xf8
 800945a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800945e:	e03d      	b.n	80094dc <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4413      	add	r3, r2
 800946c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009470:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800947c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009488:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	4413      	add	r3, r2
 8009494:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009498:	4293      	cmp	r3, r2
 800949a:	d8c8      	bhi.n	800942e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	18d0      	adds	r0, r2, r3
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	4413      	add	r3, r2
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	4619      	mov	r1, r3
 80094ae:	f010 f85e 	bl	801956e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4413      	add	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4413      	add	r3, r2
 80094c0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	623b      	str	r3, [r7, #32]
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1a1      	bne.n	8009412 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80094ce:	6979      	ldr	r1, [r7, #20]
 80094d0:	4811      	ldr	r0, [pc, #68]	; (8009518 <low_level_output+0x138>)
 80094d2:	f7f9 faed 	bl	8002ab0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80094dc:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <low_level_output+0x138>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e4:	3314      	adds	r3, #20
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00d      	beq.n	800950c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80094f0:	4b09      	ldr	r3, [pc, #36]	; (8009518 <low_level_output+0x138>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f8:	3314      	adds	r3, #20
 80094fa:	2220      	movs	r2, #32
 80094fc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80094fe:	4b06      	ldr	r3, [pc, #24]	; (8009518 <low_level_output+0x138>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009506:	3304      	adds	r3, #4
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800950c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009510:	4618      	mov	r0, r3
 8009512:	3728      	adds	r7, #40	; 0x28
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20005dec 	.word	0x20005dec

0800951c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08c      	sub	sp, #48	; 0x30
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009524:	2300      	movs	r3, #0
 8009526:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009528:	2300      	movs	r3, #0
 800952a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8009534:	2300      	movs	r3, #0
 8009536:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800953c:	2300      	movs	r3, #0
 800953e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009540:	484e      	ldr	r0, [pc, #312]	; (800967c <low_level_input+0x160>)
 8009542:	f7f9 fb9f 	bl	8002c84 <HAL_ETH_GetReceivedFrame_IT>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <low_level_input+0x34>
    return NULL;
 800954c:	2300      	movs	r3, #0
 800954e:	e091      	b.n	8009674 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009550:	4b4a      	ldr	r3, [pc, #296]	; (800967c <low_level_input+0x160>)
 8009552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009554:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009556:	4b49      	ldr	r3, [pc, #292]	; (800967c <low_level_input+0x160>)
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d006      	beq.n	8009570 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009562:	89fb      	ldrh	r3, [r7, #14]
 8009564:	2203      	movs	r2, #3
 8009566:	4619      	mov	r1, r3
 8009568:	2004      	movs	r0, #4
 800956a:	f005 fa57 	bl	800ea1c <pbuf_alloc>
 800956e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d04b      	beq.n	800960e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009576:	4b41      	ldr	r3, [pc, #260]	; (800967c <low_level_input+0x160>)
 8009578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800957c:	2300      	movs	r3, #0
 800957e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	62bb      	str	r3, [r7, #40]	; 0x28
 8009584:	e040      	b.n	8009608 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	895b      	ldrh	r3, [r3, #10]
 800958a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009590:	e021      	b.n	80095d6 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	18d0      	adds	r0, r2, r3
 800959a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	18d1      	adds	r1, r2, r3
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80095a6:	3304      	adds	r3, #4
 80095a8:	461a      	mov	r2, r3
 80095aa:	f00f ffe0 	bl	801956e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80095ba:	69fa      	ldr	r2, [r7, #28]
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	4413      	add	r3, r2
 80095c0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80095c4:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80095d0:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	4413      	add	r3, r2
 80095dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d8d6      	bhi.n	8009592 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	18d0      	adds	r0, r2, r3
 80095ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	4413      	add	r3, r2
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4619      	mov	r1, r3
 80095f6:	f00f ffba 	bl	801956e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	4413      	add	r3, r2
 8009600:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	62bb      	str	r3, [r7, #40]	; 0x28
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1bb      	bne.n	8009586 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800960e:	4b1b      	ldr	r3, [pc, #108]	; (800967c <low_level_input+0x160>)
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009614:	2300      	movs	r3, #0
 8009616:	613b      	str	r3, [r7, #16]
 8009618:	e00b      	b.n	8009632 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	3301      	adds	r3, #1
 8009630:	613b      	str	r3, [r7, #16]
 8009632:	4b12      	ldr	r3, [pc, #72]	; (800967c <low_level_input+0x160>)
 8009634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	429a      	cmp	r2, r3
 800963a:	d3ee      	bcc.n	800961a <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800963c:	4b0f      	ldr	r3, [pc, #60]	; (800967c <low_level_input+0x160>)
 800963e:	2200      	movs	r2, #0
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8009642:	4b0e      	ldr	r3, [pc, #56]	; (800967c <low_level_input+0x160>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964a:	3314      	adds	r3, #20
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00d      	beq.n	8009672 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009656:	4b09      	ldr	r3, [pc, #36]	; (800967c <low_level_input+0x160>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965e:	3314      	adds	r3, #20
 8009660:	2280      	movs	r2, #128	; 0x80
 8009662:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009664:	4b05      	ldr	r3, [pc, #20]	; (800967c <low_level_input+0x160>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966c:	3308      	adds	r3, #8
 800966e:	2200      	movs	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009674:	4618      	mov	r0, r3
 8009676:	3730      	adds	r7, #48	; 0x30
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20005dec 	.word	0x20005dec

08009680 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800968c:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <ethernetif_input+0x4c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009694:	4618      	mov	r0, r3
 8009696:	f001 fcc5 	bl	800b024 <osSemaphoreWait>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1f5      	bne.n	800968c <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7ff ff3b 	bl	800951c <low_level_input>
 80096a6:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	68f9      	ldr	r1, [r7, #12]
 80096b4:	68b8      	ldr	r0, [r7, #8]
 80096b6:	4798      	blx	r3
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80096be:	68b8      	ldr	r0, [r7, #8]
 80096c0:	f005 fd1e 	bl	800f100 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1ea      	bne.n	80096a0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80096ca:	e7df      	b.n	800968c <ethernetif_input+0xc>
 80096cc:	20000460 	.word	0x20000460

080096d0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <ethernetif_init+0x1c>
 80096de:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <ethernetif_init+0x48>)
 80096e0:	f240 222d 	movw	r2, #557	; 0x22d
 80096e4:	490d      	ldr	r1, [pc, #52]	; (800971c <ethernetif_init+0x4c>)
 80096e6:	480e      	ldr	r0, [pc, #56]	; (8009720 <ethernetif_init+0x50>)
 80096e8:	f00f fffc 	bl	80196e4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2273      	movs	r2, #115	; 0x73
 80096f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2274      	movs	r2, #116	; 0x74
 80096f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a09      	ldr	r2, [pc, #36]	; (8009724 <ethernetif_init+0x54>)
 8009700:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a08      	ldr	r2, [pc, #32]	; (8009728 <ethernetif_init+0x58>)
 8009706:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fd99 	bl	8009240 <low_level_init>

  return ERR_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	0801a8ac 	.word	0x0801a8ac
 800971c:	0801a8c8 	.word	0x0801a8c8
 8009720:	0801a8d8 	.word	0x0801a8d8
 8009724:	08016ccd 	.word	0x08016ccd
 8009728:	080093e1 	.word	0x080093e1

0800972c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009730:	f7f8 fe18 	bl	8002364 <HAL_GetTick>
 8009734:	4603      	mov	r3, r0
}
 8009736:	4618      	mov	r0, r3
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	7c1b      	ldrb	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d115      	bne.n	800977e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009756:	2202      	movs	r2, #2
 8009758:	2181      	movs	r1, #129	; 0x81
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f00f fd71 	bl	8019242 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800976a:	2202      	movs	r2, #2
 800976c:	2101      	movs	r1, #1
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f00f fd67 	bl	8019242 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800977c:	e012      	b.n	80097a4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800977e:	2340      	movs	r3, #64	; 0x40
 8009780:	2202      	movs	r2, #2
 8009782:	2181      	movs	r1, #129	; 0x81
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f00f fd5c 	bl	8019242 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009790:	2340      	movs	r3, #64	; 0x40
 8009792:	2202      	movs	r2, #2
 8009794:	2101      	movs	r1, #1
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f00f fd53 	bl	8019242 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097a4:	2308      	movs	r3, #8
 80097a6:	2203      	movs	r2, #3
 80097a8:	2182      	movs	r1, #130	; 0x82
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f00f fd49 	bl	8019242 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80097b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80097ba:	f00f feb9 	bl	8019530 <malloc>
 80097be:	4603      	mov	r3, r0
 80097c0:	461a      	mov	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80097d2:	2301      	movs	r3, #1
 80097d4:	73fb      	strb	r3, [r7, #15]
 80097d6:	e026      	b.n	8009826 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80097de:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	7c1b      	ldrb	r3, [r3, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800980c:	2101      	movs	r1, #1
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f00f fe08 	bl	8019424 <USBD_LL_PrepareReceive>
 8009814:	e007      	b.n	8009826 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	2101      	movs	r1, #1
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f00f fdff 	bl	8019424 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009840:	2181      	movs	r1, #129	; 0x81
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f00f fd23 	bl	801928e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800984e:	2101      	movs	r1, #1
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f00f fd1c 	bl	801928e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800985e:	2182      	movs	r1, #130	; 0x82
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f00f fd14 	bl	801928e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00e      	beq.n	8009894 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009886:	4618      	mov	r0, r3
 8009888:	f00f fe5a 	bl	8019540 <free>
    pdev->pClassData = NULL;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b086      	sub	sp, #24
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80098ae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d039      	beq.n	800993c <USBD_CDC_Setup+0x9e>
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d17c      	bne.n	80099c6 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	88db      	ldrh	r3, [r3, #6]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d029      	beq.n	8009928 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	b25b      	sxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	da11      	bge.n	8009902 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80098ea:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	88d2      	ldrh	r2, [r2, #6]
 80098f0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80098f2:	6939      	ldr	r1, [r7, #16]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	88db      	ldrh	r3, [r3, #6]
 80098f8:	461a      	mov	r2, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 f99c 	bl	800ac38 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009900:	e068      	b.n	80099d4 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	785a      	ldrb	r2, [r3, #1]
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	88db      	ldrh	r3, [r3, #6]
 8009910:	b2da      	uxtb	r2, r3
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009918:	6939      	ldr	r1, [r7, #16]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	88db      	ldrh	r3, [r3, #6]
 800991e:	461a      	mov	r2, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 f9b7 	bl	800ac94 <USBD_CtlPrepareRx>
    break;
 8009926:	e055      	b.n	80099d4 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	7850      	ldrb	r0, [r2, #1]
 8009934:	2200      	movs	r2, #0
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	4798      	blx	r3
    break;
 800993a:	e04b      	b.n	80099d4 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	2b0a      	cmp	r3, #10
 8009942:	d017      	beq.n	8009974 <USBD_CDC_Setup+0xd6>
 8009944:	2b0b      	cmp	r3, #11
 8009946:	d029      	beq.n	800999c <USBD_CDC_Setup+0xfe>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d133      	bne.n	80099b4 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009952:	2b03      	cmp	r3, #3
 8009954:	d107      	bne.n	8009966 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009956:	f107 030c 	add.w	r3, r7, #12
 800995a:	2202      	movs	r2, #2
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 f96a 	bl	800ac38 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009964:	e02e      	b.n	80099c4 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 f8fa 	bl	800ab62 <USBD_CtlError>
			  ret = USBD_FAIL;
 800996e:	2302      	movs	r3, #2
 8009970:	75fb      	strb	r3, [r7, #23]
      break;
 8009972:	e027      	b.n	80099c4 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800997a:	2b03      	cmp	r3, #3
 800997c:	d107      	bne.n	800998e <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800997e:	f107 030f 	add.w	r3, r7, #15
 8009982:	2201      	movs	r2, #1
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 f956 	bl	800ac38 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800998c:	e01a      	b.n	80099c4 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f8e6 	bl	800ab62 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009996:	2302      	movs	r3, #2
 8009998:	75fb      	strb	r3, [r7, #23]
      break;
 800999a:	e013      	b.n	80099c4 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d00d      	beq.n	80099c2 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f8da 	bl	800ab62 <USBD_CtlError>
			  ret = USBD_FAIL;
 80099ae:	2302      	movs	r3, #2
 80099b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80099b2:	e006      	b.n	80099c2 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 f8d3 	bl	800ab62 <USBD_CtlError>
      ret = USBD_FAIL;
 80099bc:	2302      	movs	r3, #2
 80099be:	75fb      	strb	r3, [r7, #23]
      break;
 80099c0:	e000      	b.n	80099c4 <USBD_CDC_Setup+0x126>
      break;
 80099c2:	bf00      	nop
    }
    break;
 80099c4:	e006      	b.n	80099d4 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 f8ca 	bl	800ab62 <USBD_CtlError>
    ret = USBD_FAIL;
 80099ce:	2302      	movs	r3, #2
 80099d0:	75fb      	strb	r3, [r7, #23]
    break;
 80099d2:	bf00      	nop
  }

  return ret;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80099f0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80099f8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d03a      	beq.n	8009a7a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a04:	78fa      	ldrb	r2, [r7, #3]
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	331c      	adds	r3, #28
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d029      	beq.n	8009a6e <USBD_CDC_DataIn+0x90>
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	440b      	add	r3, r1
 8009a28:	331c      	adds	r3, #28
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	78f9      	ldrb	r1, [r7, #3]
 8009a2e:	68b8      	ldr	r0, [r7, #8]
 8009a30:	460b      	mov	r3, r1
 8009a32:	00db      	lsls	r3, r3, #3
 8009a34:	1a5b      	subs	r3, r3, r1
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4403      	add	r3, r0
 8009a3a:	3344      	adds	r3, #68	; 0x44
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a42:	fb03 f301 	mul.w	r3, r3, r1
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d110      	bne.n	8009a6e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	440b      	add	r3, r1
 8009a5a:	331c      	adds	r3, #28
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009a60:	78f9      	ldrb	r1, [r7, #3]
 8009a62:	2300      	movs	r3, #0
 8009a64:	2200      	movs	r2, #0
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f00f fcb9 	bl	80193de <USBD_LL_Transmit>
 8009a6c:	e003      	b.n	8009a76 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	e000      	b.n	8009a7c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009a7a:	2302      	movs	r3, #2
  }
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f00f fce4 	bl	801946a <USBD_LL_GetRxDataSize>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00d      	beq.n	8009ad0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4798      	blx	r3

    return USBD_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	e000      	b.n	8009ad2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009ad0:	2302      	movs	r3, #2
  }
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ae8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d015      	beq.n	8009b20 <USBD_CDC_EP0_RxReady+0x46>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009afa:	2bff      	cmp	r3, #255	; 0xff
 8009afc:	d010      	beq.n	8009b20 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009b0c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b14:	b292      	uxth	r2, r2
 8009b16:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	22ff      	movs	r2, #255	; 0xff
 8009b1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2243      	movs	r2, #67	; 0x43
 8009b38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009b3a:	4b03      	ldr	r3, [pc, #12]	; (8009b48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	20000090 	.word	0x20000090

08009b4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2243      	movs	r2, #67	; 0x43
 8009b58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009b5a:	4b03      	ldr	r3, [pc, #12]	; (8009b68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	2000004c 	.word	0x2000004c

08009b6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2243      	movs	r2, #67	; 0x43
 8009b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009b7a:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	200000d4 	.word	0x200000d4

08009b8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	220a      	movs	r2, #10
 8009b98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009b9a:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	20000008 	.word	0x20000008

08009bac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b087      	sub	sp, #28
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	4613      	mov	r3, r2
 8009be6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009bee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009bf8:	88fa      	ldrh	r2, [r7, #6]
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b085      	sub	sp, #20
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d017      	beq.n	8009c80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	7c1b      	ldrb	r3, [r3, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d109      	bne.n	8009c6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c62:	2101      	movs	r1, #1
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f00f fbdd 	bl	8019424 <USBD_LL_PrepareReceive>
 8009c6a:	e007      	b.n	8009c7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	2101      	movs	r1, #1
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f00f fbd4 	bl	8019424 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e000      	b.n	8009c82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009c80:	2302      	movs	r3, #2
  }
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	4613      	mov	r3, r2
 8009c96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e01a      	b.n	8009cd8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	79fa      	ldrb	r2, [r7, #7]
 8009cce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f00f fa4f 	bl	8019174 <USBD_LL_Init>

  return USBD_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73fb      	strb	r3, [r7, #15]
 8009d00:	e001      	b.n	8009d06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009d02:	2302      	movs	r3, #2
 8009d04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f00f fa75 	bl	801920c <USBD_LL_Start>

  return USBD_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009d4e:	2302      	movs	r3, #2
 8009d50:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00c      	beq.n	8009d76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	78fa      	ldrb	r2, [r7, #3]
 8009d66:	4611      	mov	r1, r2
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	4798      	blx	r3
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	78fa      	ldrb	r2, [r7, #3]
 8009d96:	4611      	mov	r1, r2
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	4798      	blx	r3
  return USBD_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 fe95 	bl	800aae8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8009dcc:	461a      	mov	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009dda:	f003 031f 	and.w	r3, r3, #31
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d00c      	beq.n	8009dfc <USBD_LL_SetupStage+0x56>
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d302      	bcc.n	8009dec <USBD_LL_SetupStage+0x46>
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d010      	beq.n	8009e0c <USBD_LL_SetupStage+0x66>
 8009dea:	e017      	b.n	8009e1c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fa05 	bl	800a204 <USBD_StdDevReq>
    break;
 8009dfa:	e01a      	b.n	8009e32 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fa67 	bl	800a2d8 <USBD_StdItfReq>
    break;
 8009e0a:	e012      	b.n	8009e32 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 faa5 	bl	800a364 <USBD_StdEPReq>
    break;
 8009e1a:	e00a      	b.n	8009e32 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009e22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f00f fa4e 	bl	80192cc <USBD_LL_StallEP>
    break;
 8009e30:	bf00      	nop
  }

  return USBD_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	460b      	mov	r3, r1
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d14b      	bne.n	8009ee8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009e56:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d134      	bne.n	8009ecc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d919      	bls.n	8009ea2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	1ad2      	subs	r2, r2, r3
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	68da      	ldr	r2, [r3, #12]
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d203      	bcs.n	8009e90 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	e002      	b.n	8009e96 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f000 ff18 	bl	800acd0 <USBD_CtlContinueRx>
 8009ea0:	e038      	b.n	8009f14 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d105      	bne.n	8009ec4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 ff15 	bl	800acf4 <USBD_CtlSendStatus>
 8009eca:	e023      	b.n	8009f14 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d11e      	bne.n	8009f14 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009ede:	2100      	movs	r1, #0
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f00f f9f3 	bl	80192cc <USBD_LL_StallEP>
 8009ee6:	e015      	b.n	8009f14 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00d      	beq.n	8009f10 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d108      	bne.n	8009f10 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	7afa      	ldrb	r2, [r7, #11]
 8009f08:	4611      	mov	r1, r2
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	4798      	blx	r3
 8009f0e:	e001      	b.n	8009f14 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f10:	2302      	movs	r3, #2
 8009f12:	e000      	b.n	8009f16 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b086      	sub	sp, #24
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	60f8      	str	r0, [r7, #12]
 8009f26:	460b      	mov	r3, r1
 8009f28:	607a      	str	r2, [r7, #4]
 8009f2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d17f      	bne.n	800a032 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3314      	adds	r3, #20
 8009f36:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d15c      	bne.n	8009ffc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d915      	bls.n	8009f7a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	1ad2      	subs	r2, r2, r3
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	461a      	mov	r2, r3
 8009f64:	6879      	ldr	r1, [r7, #4]
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 fe82 	bl	800ac70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2100      	movs	r1, #0
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f00f fa56 	bl	8019424 <USBD_LL_PrepareReceive>
 8009f78:	e04e      	b.n	800a018 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	6912      	ldr	r2, [r2, #16]
 8009f82:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f86:	fb02 f201 	mul.w	r2, r2, r1
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d11c      	bne.n	8009fca <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d316      	bcc.n	8009fca <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d20f      	bcs.n	8009fca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009faa:	2200      	movs	r2, #0
 8009fac:	2100      	movs	r1, #0
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 fe5e 	bl	800ac70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f00f fa2e 	bl	8019424 <USBD_LL_PrepareReceive>
 8009fc8:	e026      	b.n	800a018 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d105      	bne.n	8009fec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009fec:	2180      	movs	r1, #128	; 0x80
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f00f f96c 	bl	80192cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 fe90 	bl	800ad1a <USBD_CtlReceiveStatus>
 8009ffa:	e00d      	b.n	800a018 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a002:	2b04      	cmp	r3, #4
 800a004:	d004      	beq.n	800a010 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d103      	bne.n	800a018 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a010:	2180      	movs	r1, #128	; 0x80
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f00f f95a 	bl	80192cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d11d      	bne.n	800a05e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff fe82 	bl	8009d2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a030:	e015      	b.n	800a05e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00d      	beq.n	800a05a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a044:	2b03      	cmp	r3, #3
 800a046:	d108      	bne.n	800a05a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a04e:	695b      	ldr	r3, [r3, #20]
 800a050:	7afa      	ldrb	r2, [r7, #11]
 800a052:	4611      	mov	r1, r2
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	4798      	blx	r3
 800a058:	e001      	b.n	800a05e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a05a:	2302      	movs	r3, #2
 800a05c:	e000      	b.n	800a060 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3718      	adds	r7, #24
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a070:	2340      	movs	r3, #64	; 0x40
 800a072:	2200      	movs	r2, #0
 800a074:	2100      	movs	r1, #0
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f00f f8e3 	bl	8019242 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2240      	movs	r2, #64	; 0x40
 800a088:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a08c:	2340      	movs	r3, #64	; 0x40
 800a08e:	2200      	movs	r2, #0
 800a090:	2180      	movs	r1, #128	; 0x80
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f00f f8d5 	bl	8019242 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2240      	movs	r2, #64	; 0x40
 800a0a2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d009      	beq.n	800a0e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6852      	ldr	r2, [r2, #4]
 800a0d8:	b2d2      	uxtb	r2, r2
 800a0da:	4611      	mov	r1, r2
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	4798      	blx	r3
  }

  return USBD_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	78fa      	ldrb	r2, [r7, #3]
 800a0fa:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2204      	movs	r2, #4
 800a122:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a164:	2b03      	cmp	r3, #3
 800a166:	d10b      	bne.n	800a180 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d005      	beq.n	800a180 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b083      	sub	sp, #12
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	6852      	ldr	r2, [r2, #4]
 800a1f0:	b2d2      	uxtb	r2, r2
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	4798      	blx	r3

  return USBD_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a21a:	2b20      	cmp	r3, #32
 800a21c:	d004      	beq.n	800a228 <USBD_StdDevReq+0x24>
 800a21e:	2b40      	cmp	r3, #64	; 0x40
 800a220:	d002      	beq.n	800a228 <USBD_StdDevReq+0x24>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d008      	beq.n	800a238 <USBD_StdDevReq+0x34>
 800a226:	e04c      	b.n	800a2c2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	4798      	blx	r3
    break;
 800a236:	e049      	b.n	800a2cc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	785b      	ldrb	r3, [r3, #1]
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	d83a      	bhi.n	800a2b6 <USBD_StdDevReq+0xb2>
 800a240:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <USBD_StdDevReq+0x44>)
 800a242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a246:	bf00      	nop
 800a248:	0800a299 	.word	0x0800a299
 800a24c:	0800a2ad 	.word	0x0800a2ad
 800a250:	0800a2b7 	.word	0x0800a2b7
 800a254:	0800a2a3 	.word	0x0800a2a3
 800a258:	0800a2b7 	.word	0x0800a2b7
 800a25c:	0800a27b 	.word	0x0800a27b
 800a260:	0800a271 	.word	0x0800a271
 800a264:	0800a2b7 	.word	0x0800a2b7
 800a268:	0800a28f 	.word	0x0800a28f
 800a26c:	0800a285 	.word	0x0800a285
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f9d2 	bl	800a61c <USBD_GetDescriptor>
      break;
 800a278:	e022      	b.n	800a2c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fac7 	bl	800a810 <USBD_SetAddress>
      break;
 800a282:	e01d      	b.n	800a2c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fb04 	bl	800a894 <USBD_SetConfig>
      break;
 800a28c:	e018      	b.n	800a2c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fb8d 	bl	800a9b0 <USBD_GetConfig>
      break;
 800a296:	e013      	b.n	800a2c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fbbc 	bl	800aa18 <USBD_GetStatus>
      break;
 800a2a0:	e00e      	b.n	800a2c0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fbea 	bl	800aa7e <USBD_SetFeature>
      break;
 800a2aa:	e009      	b.n	800a2c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fbf9 	bl	800aaa6 <USBD_ClrFeature>
      break;
 800a2b4:	e004      	b.n	800a2c0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fc52 	bl	800ab62 <USBD_CtlError>
      break;
 800a2be:	bf00      	nop
    }
    break;
 800a2c0:	e004      	b.n	800a2cc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fc4c 	bl	800ab62 <USBD_CtlError>
    break;
 800a2ca:	bf00      	nop
  }

  return ret;
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop

0800a2d8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2ee:	2b20      	cmp	r3, #32
 800a2f0:	d003      	beq.n	800a2fa <USBD_StdItfReq+0x22>
 800a2f2:	2b40      	cmp	r3, #64	; 0x40
 800a2f4:	d001      	beq.n	800a2fa <USBD_StdItfReq+0x22>
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d12a      	bne.n	800a350 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a300:	3b01      	subs	r3, #1
 800a302:	2b02      	cmp	r3, #2
 800a304:	d81d      	bhi.n	800a342 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	889b      	ldrh	r3, [r3, #4]
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d813      	bhi.n	800a338 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	4798      	blx	r3
 800a31e:	4603      	mov	r3, r0
 800a320:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	88db      	ldrh	r3, [r3, #6]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d110      	bne.n	800a34c <USBD_StdItfReq+0x74>
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10d      	bne.n	800a34c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fcdf 	bl	800acf4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a336:	e009      	b.n	800a34c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fc11 	bl	800ab62 <USBD_CtlError>
      break;
 800a340:	e004      	b.n	800a34c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fc0c 	bl	800ab62 <USBD_CtlError>
      break;
 800a34a:	e000      	b.n	800a34e <USBD_StdItfReq+0x76>
      break;
 800a34c:	bf00      	nop
    }
    break;
 800a34e:	e004      	b.n	800a35a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fc05 	bl	800ab62 <USBD_CtlError>
    break;
 800a358:	bf00      	nop
  }

  return USBD_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	889b      	ldrh	r3, [r3, #4]
 800a376:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a380:	2b20      	cmp	r3, #32
 800a382:	d004      	beq.n	800a38e <USBD_StdEPReq+0x2a>
 800a384:	2b40      	cmp	r3, #64	; 0x40
 800a386:	d002      	beq.n	800a38e <USBD_StdEPReq+0x2a>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d008      	beq.n	800a39e <USBD_StdEPReq+0x3a>
 800a38c:	e13b      	b.n	800a606 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
    break;
 800a39c:	e138      	b.n	800a610 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	d10a      	bne.n	800a3c0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	4798      	blx	r3
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	e128      	b.n	800a612 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	785b      	ldrb	r3, [r3, #1]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d03e      	beq.n	800a446 <USBD_StdEPReq+0xe2>
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d002      	beq.n	800a3d2 <USBD_StdEPReq+0x6e>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d070      	beq.n	800a4b2 <USBD_StdEPReq+0x14e>
 800a3d0:	e113      	b.n	800a5fa <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d002      	beq.n	800a3e2 <USBD_StdEPReq+0x7e>
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d015      	beq.n	800a40c <USBD_StdEPReq+0xa8>
 800a3e0:	e02b      	b.n	800a43a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00c      	beq.n	800a402 <USBD_StdEPReq+0x9e>
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	2b80      	cmp	r3, #128	; 0x80
 800a3ec:	d009      	beq.n	800a402 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f00e ff6a 	bl	80192cc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a3f8:	2180      	movs	r1, #128	; 0x80
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f00e ff66 	bl	80192cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a400:	e020      	b.n	800a444 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fbac 	bl	800ab62 <USBD_CtlError>
        break;
 800a40a:	e01b      	b.n	800a444 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	885b      	ldrh	r3, [r3, #2]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10e      	bne.n	800a432 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <USBD_StdEPReq+0xce>
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	2b80      	cmp	r3, #128	; 0x80
 800a41e:	d008      	beq.n	800a432 <USBD_StdEPReq+0xce>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	88db      	ldrh	r3, [r3, #6]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d104      	bne.n	800a432 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f00e ff4d 	bl	80192cc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fc5e 	bl	800acf4 <USBD_CtlSendStatus>

        break;
 800a438:	e004      	b.n	800a444 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fb90 	bl	800ab62 <USBD_CtlError>
        break;
 800a442:	bf00      	nop
      }
      break;
 800a444:	e0de      	b.n	800a604 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d002      	beq.n	800a456 <USBD_StdEPReq+0xf2>
 800a450:	2b03      	cmp	r3, #3
 800a452:	d015      	beq.n	800a480 <USBD_StdEPReq+0x11c>
 800a454:	e026      	b.n	800a4a4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00c      	beq.n	800a476 <USBD_StdEPReq+0x112>
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b80      	cmp	r3, #128	; 0x80
 800a460:	d009      	beq.n	800a476 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f00e ff30 	bl	80192cc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a46c:	2180      	movs	r1, #128	; 0x80
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f00e ff2c 	bl	80192cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a474:	e01c      	b.n	800a4b0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fb72 	bl	800ab62 <USBD_CtlError>
        break;
 800a47e:	e017      	b.n	800a4b0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	885b      	ldrh	r3, [r3, #2]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d112      	bne.n	800a4ae <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d004      	beq.n	800a49c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f00e ff37 	bl	801930a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fc29 	bl	800acf4 <USBD_CtlSendStatus>
        }
        break;
 800a4a2:	e004      	b.n	800a4ae <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800a4a4:	6839      	ldr	r1, [r7, #0]
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fb5b 	bl	800ab62 <USBD_CtlError>
        break;
 800a4ac:	e000      	b.n	800a4b0 <USBD_StdEPReq+0x14c>
        break;
 800a4ae:	bf00      	nop
      }
      break;
 800a4b0:	e0a8      	b.n	800a604 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d002      	beq.n	800a4c2 <USBD_StdEPReq+0x15e>
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d031      	beq.n	800a524 <USBD_StdEPReq+0x1c0>
 800a4c0:	e095      	b.n	800a5ee <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d007      	beq.n	800a4d8 <USBD_StdEPReq+0x174>
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	2b80      	cmp	r3, #128	; 0x80
 800a4cc:	d004      	beq.n	800a4d8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fb46 	bl	800ab62 <USBD_CtlError>
          break;
 800a4d6:	e08f      	b.n	800a5f8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a4d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	da0b      	bge.n	800a4f8 <USBD_StdEPReq+0x194>
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	3310      	adds	r3, #16
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	e00a      	b.n	800a50e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	4413      	add	r3, r2
 800a50e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2202      	movs	r2, #2
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fb8b 	bl	800ac38 <USBD_CtlSendData>
          break;
 800a522:	e069      	b.n	800a5f8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800a524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	da11      	bge.n	800a550 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a52c:	7bbb      	ldrb	r3, [r7, #14]
 800a52e:	f003 020f 	and.w	r2, r3, #15
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	4613      	mov	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	440b      	add	r3, r1
 800a53e:	3318      	adds	r3, #24
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d117      	bne.n	800a576 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fb0a 	bl	800ab62 <USBD_CtlError>
            break;
 800a54e:	e053      	b.n	800a5f8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	f003 020f 	and.w	r2, r3, #15
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	440b      	add	r3, r1
 800a562:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d104      	bne.n	800a576 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 faf7 	bl	800ab62 <USBD_CtlError>
            break;
 800a574:	e040      	b.n	800a5f8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	da0b      	bge.n	800a596 <USBD_StdEPReq+0x232>
 800a57e:	7bbb      	ldrb	r3, [r7, #14]
 800a580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	3310      	adds	r3, #16
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4413      	add	r3, r2
 800a592:	3304      	adds	r3, #4
 800a594:	e00a      	b.n	800a5ac <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <USBD_StdEPReq+0x256>
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
 800a5b6:	2b80      	cmp	r3, #128	; 0x80
 800a5b8:	d103      	bne.n	800a5c2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	e00e      	b.n	800a5e0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f00e febe 	bl	8019348 <USBD_LL_IsStallEP>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	e002      	b.n	800a5e0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fb26 	bl	800ac38 <USBD_CtlSendData>
          break;
 800a5ec:	e004      	b.n	800a5f8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fab6 	bl	800ab62 <USBD_CtlError>
        break;
 800a5f6:	bf00      	nop
      }
      break;
 800a5f8:	e004      	b.n	800a604 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fab0 	bl	800ab62 <USBD_CtlError>
      break;
 800a602:	bf00      	nop
    }
    break;
 800a604:	e004      	b.n	800a610 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 faaa 	bl	800ab62 <USBD_CtlError>
    break;
 800a60e:	bf00      	nop
  }

  return ret;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	885b      	ldrh	r3, [r3, #2]
 800a62a:	0a1b      	lsrs	r3, r3, #8
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	3b01      	subs	r3, #1
 800a630:	2b06      	cmp	r3, #6
 800a632:	f200 80c9 	bhi.w	800a7c8 <USBD_GetDescriptor+0x1ac>
 800a636:	a201      	add	r2, pc, #4	; (adr r2, 800a63c <USBD_GetDescriptor+0x20>)
 800a638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63c:	0800a659 	.word	0x0800a659
 800a640:	0800a671 	.word	0x0800a671
 800a644:	0800a6b1 	.word	0x0800a6b1
 800a648:	0800a7c9 	.word	0x0800a7c9
 800a64c:	0800a7c9 	.word	0x0800a7c9
 800a650:	0800a775 	.word	0x0800a775
 800a654:	0800a79b 	.word	0x0800a79b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	7c12      	ldrb	r2, [r2, #16]
 800a664:	f107 010a 	add.w	r1, r7, #10
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
 800a66c:	60f8      	str	r0, [r7, #12]
    break;
 800a66e:	e0b0      	b.n	800a7d2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	7c1b      	ldrb	r3, [r3, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10d      	bne.n	800a694 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a680:	f107 020a 	add.w	r2, r7, #10
 800a684:	4610      	mov	r0, r2
 800a686:	4798      	blx	r3
 800a688:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3301      	adds	r3, #1
 800a68e:	2202      	movs	r2, #2
 800a690:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a692:	e09e      	b.n	800a7d2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	f107 020a 	add.w	r2, r7, #10
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	4798      	blx	r3
 800a6a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	701a      	strb	r2, [r3, #0]
    break;
 800a6ae:	e090      	b.n	800a7d2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	885b      	ldrh	r3, [r3, #2]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d856      	bhi.n	800a768 <USBD_GetDescriptor+0x14c>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <USBD_GetDescriptor+0xa4>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6d9 	.word	0x0800a6d9
 800a6c4:	0800a6f1 	.word	0x0800a6f1
 800a6c8:	0800a709 	.word	0x0800a709
 800a6cc:	0800a721 	.word	0x0800a721
 800a6d0:	0800a739 	.word	0x0800a739
 800a6d4:	0800a751 	.word	0x0800a751
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	7c12      	ldrb	r2, [r2, #16]
 800a6e4:	f107 010a 	add.w	r1, r7, #10
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	60f8      	str	r0, [r7, #12]
      break;
 800a6ee:	e040      	b.n	800a772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	7c12      	ldrb	r2, [r2, #16]
 800a6fc:	f107 010a 	add.w	r1, r7, #10
 800a700:	4610      	mov	r0, r2
 800a702:	4798      	blx	r3
 800a704:	60f8      	str	r0, [r7, #12]
      break;
 800a706:	e034      	b.n	800a772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	7c12      	ldrb	r2, [r2, #16]
 800a714:	f107 010a 	add.w	r1, r7, #10
 800a718:	4610      	mov	r0, r2
 800a71a:	4798      	blx	r3
 800a71c:	60f8      	str	r0, [r7, #12]
      break;
 800a71e:	e028      	b.n	800a772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	7c12      	ldrb	r2, [r2, #16]
 800a72c:	f107 010a 	add.w	r1, r7, #10
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
 800a734:	60f8      	str	r0, [r7, #12]
      break;
 800a736:	e01c      	b.n	800a772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	7c12      	ldrb	r2, [r2, #16]
 800a744:	f107 010a 	add.w	r1, r7, #10
 800a748:	4610      	mov	r0, r2
 800a74a:	4798      	blx	r3
 800a74c:	60f8      	str	r0, [r7, #12]
      break;
 800a74e:	e010      	b.n	800a772 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	7c12      	ldrb	r2, [r2, #16]
 800a75c:	f107 010a 	add.w	r1, r7, #10
 800a760:	4610      	mov	r0, r2
 800a762:	4798      	blx	r3
 800a764:	60f8      	str	r0, [r7, #12]
      break;
 800a766:	e004      	b.n	800a772 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f9f9 	bl	800ab62 <USBD_CtlError>
      return;
 800a770:	e04b      	b.n	800a80a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800a772:	e02e      	b.n	800a7d2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	7c1b      	ldrb	r3, [r3, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d109      	bne.n	800a790 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a784:	f107 020a 	add.w	r2, r7, #10
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
 800a78c:	60f8      	str	r0, [r7, #12]
      break;
 800a78e:	e020      	b.n	800a7d2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f9e5 	bl	800ab62 <USBD_CtlError>
      return;
 800a798:	e037      	b.n	800a80a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	7c1b      	ldrb	r3, [r3, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10d      	bne.n	800a7be <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	f107 020a 	add.w	r2, r7, #10
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	4798      	blx	r3
 800a7b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	2207      	movs	r2, #7
 800a7ba:	701a      	strb	r2, [r3, #0]
      break;
 800a7bc:	e009      	b.n	800a7d2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f9ce 	bl	800ab62 <USBD_CtlError>
      return;
 800a7c6:	e020      	b.n	800a80a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f9c9 	bl	800ab62 <USBD_CtlError>
    return;
 800a7d0:	e01b      	b.n	800a80a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800a7d2:	897b      	ldrh	r3, [r7, #10]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d011      	beq.n	800a7fc <USBD_GetDescriptor+0x1e0>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	88db      	ldrh	r3, [r3, #6]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00d      	beq.n	800a7fc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	88da      	ldrh	r2, [r3, #6]
 800a7e4:	897b      	ldrh	r3, [r7, #10]
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	bf28      	it	cs
 800a7ea:	4613      	movcs	r3, r2
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800a7f0:	897b      	ldrh	r3, [r7, #10]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	68f9      	ldr	r1, [r7, #12]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fa1e 	bl	800ac38 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	88db      	ldrh	r3, [r3, #6]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d102      	bne.n	800a80a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fa75 	bl	800acf4 <USBD_CtlSendStatus>
  }
}
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	889b      	ldrh	r3, [r3, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d130      	bne.n	800a884 <USBD_SetAddress+0x74>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	88db      	ldrh	r3, [r3, #6]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d12c      	bne.n	800a884 <USBD_SetAddress+0x74>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	885b      	ldrh	r3, [r3, #2]
 800a82e:	2b7f      	cmp	r3, #127	; 0x7f
 800a830:	d828      	bhi.n	800a884 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	885b      	ldrh	r3, [r3, #2]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a844:	2b03      	cmp	r3, #3
 800a846:	d104      	bne.n	800a852 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f989 	bl	800ab62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a850:	e01c      	b.n	800a88c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	7bfa      	ldrb	r2, [r7, #15]
 800a856:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f00e fd9e 	bl	80193a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fa45 	bl	800acf4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d004      	beq.n	800a87a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a878:	e008      	b.n	800a88c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a882:	e003      	b.n	800a88c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f96b 	bl	800ab62 <USBD_CtlError>
  }
}
 800a88c:	bf00      	nop
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	885b      	ldrh	r3, [r3, #2]
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	4b41      	ldr	r3, [pc, #260]	; (800a9ac <USBD_SetConfig+0x118>)
 800a8a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a8a8:	4b40      	ldr	r3, [pc, #256]	; (800a9ac <USBD_SetConfig+0x118>)
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d904      	bls.n	800a8ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f955 	bl	800ab62 <USBD_CtlError>
 800a8b8:	e075      	b.n	800a9a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d002      	beq.n	800a8ca <USBD_SetConfig+0x36>
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d023      	beq.n	800a910 <USBD_SetConfig+0x7c>
 800a8c8:	e062      	b.n	800a990 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800a8ca:	4b38      	ldr	r3, [pc, #224]	; (800a9ac <USBD_SetConfig+0x118>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d01a      	beq.n	800a908 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800a8d2:	4b36      	ldr	r3, [pc, #216]	; (800a9ac <USBD_SetConfig+0x118>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2203      	movs	r2, #3
 800a8e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a8e4:	4b31      	ldr	r3, [pc, #196]	; (800a9ac <USBD_SetConfig+0x118>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fa29 	bl	8009d42 <USBD_SetClassConfig>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d104      	bne.n	800a900 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f932 	bl	800ab62 <USBD_CtlError>
          return;
 800a8fe:	e052      	b.n	800a9a6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f9f7 	bl	800acf4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800a906:	e04e      	b.n	800a9a6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f9f3 	bl	800acf4 <USBD_CtlSendStatus>
      break;
 800a90e:	e04a      	b.n	800a9a6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a910:	4b26      	ldr	r3, [pc, #152]	; (800a9ac <USBD_SetConfig+0x118>)
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d112      	bne.n	800a93e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800a920:	4b22      	ldr	r3, [pc, #136]	; (800a9ac <USBD_SetConfig+0x118>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	461a      	mov	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800a92a:	4b20      	ldr	r3, [pc, #128]	; (800a9ac <USBD_SetConfig+0x118>)
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff fa25 	bl	8009d80 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f9dc 	bl	800acf4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800a93c:	e033      	b.n	800a9a6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800a93e:	4b1b      	ldr	r3, [pc, #108]	; (800a9ac <USBD_SetConfig+0x118>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d01d      	beq.n	800a988 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff fa13 	bl	8009d80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a95a:	4b14      	ldr	r3, [pc, #80]	; (800a9ac <USBD_SetConfig+0x118>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a964:	4b11      	ldr	r3, [pc, #68]	; (800a9ac <USBD_SetConfig+0x118>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff f9e9 	bl	8009d42 <USBD_SetClassConfig>
 800a970:	4603      	mov	r3, r0
 800a972:	2b02      	cmp	r3, #2
 800a974:	d104      	bne.n	800a980 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f8f2 	bl	800ab62 <USBD_CtlError>
          return;
 800a97e:	e012      	b.n	800a9a6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f9b7 	bl	800acf4 <USBD_CtlSendStatus>
      break;
 800a986:	e00e      	b.n	800a9a6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f9b3 	bl	800acf4 <USBD_CtlSendStatus>
      break;
 800a98e:	e00a      	b.n	800a9a6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f8e5 	bl	800ab62 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800a998:	4b04      	ldr	r3, [pc, #16]	; (800a9ac <USBD_SetConfig+0x118>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff f9ee 	bl	8009d80 <USBD_ClrClassConfig>
      break;
 800a9a4:	bf00      	nop
    }
  }
}
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	20000464 	.word	0x20000464

0800a9b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	88db      	ldrh	r3, [r3, #6]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d004      	beq.n	800a9cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f8cc 	bl	800ab62 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800a9ca:	e021      	b.n	800aa10 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	db17      	blt.n	800aa06 <USBD_GetConfig+0x56>
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	dd02      	ble.n	800a9e0 <USBD_GetConfig+0x30>
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d00b      	beq.n	800a9f6 <USBD_GetConfig+0x46>
 800a9de:	e012      	b.n	800aa06 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f922 	bl	800ac38 <USBD_CtlSendData>
      break;
 800a9f4:	e00c      	b.n	800aa10 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f91a 	bl	800ac38 <USBD_CtlSendData>
      break;
 800aa04:	e004      	b.n	800aa10 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f8aa 	bl	800ab62 <USBD_CtlError>
      break;
 800aa0e:	bf00      	nop
}
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d81e      	bhi.n	800aa6c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	88db      	ldrh	r3, [r3, #6]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d004      	beq.n	800aa40 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f892 	bl	800ab62 <USBD_CtlError>
      break;
 800aa3e:	e01a      	b.n	800aa76 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d005      	beq.n	800aa5c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	f043 0202 	orr.w	r2, r3, #2
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	330c      	adds	r3, #12
 800aa60:	2202      	movs	r2, #2
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f8e7 	bl	800ac38 <USBD_CtlSendData>
    break;
 800aa6a:	e004      	b.n	800aa76 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f877 	bl	800ab62 <USBD_CtlError>
    break;
 800aa74:	bf00      	nop
  }
}
 800aa76:	bf00      	nop
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b082      	sub	sp, #8
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	885b      	ldrh	r3, [r3, #2]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d106      	bne.n	800aa9e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f92b 	bl	800acf4 <USBD_CtlSendStatus>
  }

}
 800aa9e:	bf00      	nop
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aab6:	3b01      	subs	r3, #1
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d80b      	bhi.n	800aad4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	885b      	ldrh	r3, [r3, #2]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d10c      	bne.n	800aade <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f911 	bl	800acf4 <USBD_CtlSendStatus>
    }
    break;
 800aad2:	e004      	b.n	800aade <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f843 	bl	800ab62 <USBD_CtlError>
    break;
 800aadc:	e000      	b.n	800aae0 <USBD_ClrFeature+0x3a>
    break;
 800aade:	bf00      	nop
  }
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	785a      	ldrb	r2, [r3, #1]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	3302      	adds	r3, #2
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	3303      	adds	r3, #3
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	021b      	lsls	r3, r3, #8
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	4413      	add	r3, r2
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	3304      	adds	r3, #4
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	3305      	adds	r3, #5
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	021b      	lsls	r3, r3, #8
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	4413      	add	r3, r2
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	3306      	adds	r3, #6
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	3307      	adds	r3, #7
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	021b      	lsls	r3, r3, #8
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	4413      	add	r3, r2
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	80da      	strh	r2, [r3, #6]

}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b082      	sub	sp, #8
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800ab6c:	2180      	movs	r1, #128	; 0x80
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f00e fbac 	bl	80192cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800ab74:	2100      	movs	r1, #0
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f00e fba8 	bl	80192cc <USBD_LL_StallEP>
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d032      	beq.n	800ac00 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 f834 	bl	800ac08 <USBD_GetLen>
 800aba0:	4603      	mov	r3, r0
 800aba2:	3301      	adds	r3, #1
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	75fa      	strb	r2, [r7, #23]
 800abb4:	461a      	mov	r2, r3
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	4413      	add	r3, r2
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	7812      	ldrb	r2, [r2, #0]
 800abbe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	75fa      	strb	r2, [r7, #23]
 800abc6:	461a      	mov	r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	4413      	add	r3, r2
 800abcc:	2203      	movs	r2, #3
 800abce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800abd0:	e012      	b.n	800abf8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	60fa      	str	r2, [r7, #12]
 800abd8:	7dfa      	ldrb	r2, [r7, #23]
 800abda:	1c51      	adds	r1, r2, #1
 800abdc:	75f9      	strb	r1, [r7, #23]
 800abde:	4611      	mov	r1, r2
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	440a      	add	r2, r1
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	75fa      	strb	r2, [r7, #23]
 800abee:	461a      	mov	r2, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	4413      	add	r3, r2
 800abf4:	2200      	movs	r2, #0
 800abf6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1e8      	bne.n	800abd2 <USBD_GetString+0x4e>
    }
  }
}
 800ac00:	bf00      	nop
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800ac14:	e005      	b.n	800ac22 <USBD_GetLen+0x1a>
    {
        len++;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1f5      	bne.n	800ac16 <USBD_GetLen+0xe>
    }

    return len;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800ac4e:	88fa      	ldrh	r2, [r7, #6]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ac54:	88fa      	ldrh	r2, [r7, #6]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ac5a:	88fb      	ldrh	r3, [r7, #6]
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	2100      	movs	r1, #0
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f00e fbbc 	bl	80193de <USBD_LL_Transmit>

  return USBD_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ac7e:	88fb      	ldrh	r3, [r7, #6]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	2100      	movs	r1, #0
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f00e fbaa 	bl	80193de <USBD_LL_Transmit>

  return USBD_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2203      	movs	r2, #3
 800aca6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800acaa:	88fa      	ldrh	r2, [r7, #6]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800acb2:	88fa      	ldrh	r2, [r7, #6]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800acba:	88fb      	ldrh	r3, [r7, #6]
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	2100      	movs	r1, #0
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f00e fbaf 	bl	8019424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acde:	88fb      	ldrh	r3, [r7, #6]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	2100      	movs	r1, #0
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f00e fb9d 	bl	8019424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2204      	movs	r2, #4
 800ad00:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad04:	2300      	movs	r3, #0
 800ad06:	2200      	movs	r2, #0
 800ad08:	2100      	movs	r1, #0
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f00e fb67 	bl	80193de <USBD_LL_Transmit>

  return USBD_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b082      	sub	sp, #8
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2205      	movs	r2, #5
 800ad26:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2100      	movs	r1, #0
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f00e fb77 	bl	8019424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ad4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad52:	2b84      	cmp	r3, #132	; 0x84
 800ad54:	d005      	beq.n	800ad62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ad56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	3303      	adds	r3, #3
 800ad60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ad62:	68fb      	ldr	r3, [r7, #12]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad76:	f3ef 8305 	mrs	r3, IPSR
 800ad7a:	607b      	str	r3, [r7, #4]
  return(result);
 800ad7c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	bf14      	ite	ne
 800ad82:	2301      	movne	r3, #1
 800ad84:	2300      	moveq	r3, #0
 800ad86:	b2db      	uxtb	r3, r3
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ad98:	f001 fc3a 	bl	800c610 <vTaskStartScheduler>
  
  return osOK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ada6:	f7ff ffe3 	bl	800ad70 <inHandlerMode>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800adb0:	f001 fd46 	bl	800c840 <xTaskGetTickCountFromISR>
 800adb4:	4603      	mov	r3, r0
 800adb6:	e002      	b.n	800adbe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800adb8:	f001 fd32 	bl	800c820 <xTaskGetTickCount>
 800adbc:	4603      	mov	r3, r0
  }
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800adc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adc4:	b089      	sub	sp, #36	; 0x24
 800adc6:	af04      	add	r7, sp, #16
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d020      	beq.n	800ae16 <osThreadCreate+0x54>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01c      	beq.n	800ae16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685c      	ldr	r4, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681d      	ldr	r5, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	691e      	ldr	r6, [r3, #16]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800adee:	4618      	mov	r0, r3
 800adf0:	f7ff ffa6 	bl	800ad40 <makeFreeRtosPriority>
 800adf4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800adfe:	9202      	str	r2, [sp, #8]
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	9100      	str	r1, [sp, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	4632      	mov	r2, r6
 800ae08:	4629      	mov	r1, r5
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f001 fa45 	bl	800c29a <xTaskCreateStatic>
 800ae10:	4603      	mov	r3, r0
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	e01c      	b.n	800ae50 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685c      	ldr	r4, [r3, #4]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae22:	b29e      	uxth	r6, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff ff88 	bl	800ad40 <makeFreeRtosPriority>
 800ae30:	4602      	mov	r2, r0
 800ae32:	f107 030c 	add.w	r3, r7, #12
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	9200      	str	r2, [sp, #0]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	4632      	mov	r2, r6
 800ae3e:	4629      	mov	r1, r5
 800ae40:	4620      	mov	r0, r4
 800ae42:	f001 fa83 	bl	800c34c <xTaskCreate>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d001      	beq.n	800ae50 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e000      	b.n	800ae52 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ae50:	68fb      	ldr	r3, [r7, #12]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae5a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d001      	beq.n	800ae70 <osDelay+0x16>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	e000      	b.n	800ae72 <osDelay+0x18>
 800ae70:	2301      	movs	r3, #1
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 fb98 	bl	800c5a8 <vTaskDelay>
  
  return osOK;
 800ae78:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b082      	sub	sp, #8
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	4619      	mov	r1, r3
 800ae98:	2001      	movs	r0, #1
 800ae9a:	f000 fc41 	bl	800b720 <xQueueCreateMutexStatic>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	e003      	b.n	800aeaa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800aea2:	2001      	movs	r0, #1
 800aea4:	f000 fc24 	bl	800b6f0 <xQueueCreateMutex>
 800aea8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aebe:	2300      	movs	r3, #0
 800aec0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <osMutexWait+0x18>
    return osErrorParameter;
 800aec8:	2380      	movs	r3, #128	; 0x80
 800aeca:	e03a      	b.n	800af42 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aed6:	d103      	bne.n	800aee0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800aed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aedc:	60fb      	str	r3, [r7, #12]
 800aede:	e009      	b.n	800aef4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d006      	beq.n	800aef4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <osMutexWait+0x40>
      ticks = 1;
 800aef0:	2301      	movs	r3, #1
 800aef2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aef4:	f7ff ff3c 	bl	800ad70 <inHandlerMode>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d017      	beq.n	800af2e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aefe:	f107 0308 	add.w	r3, r7, #8
 800af02:	461a      	mov	r2, r3
 800af04:	2100      	movs	r1, #0
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f001 f822 	bl	800bf50 <xQueueReceiveFromISR>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d001      	beq.n	800af16 <osMutexWait+0x62>
      return osErrorOS;
 800af12:	23ff      	movs	r3, #255	; 0xff
 800af14:	e015      	b.n	800af42 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d011      	beq.n	800af40 <osMutexWait+0x8c>
 800af1c:	4b0b      	ldr	r3, [pc, #44]	; (800af4c <osMutexWait+0x98>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	e008      	b.n	800af40 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 ff05 	bl	800bd40 <xQueueSemaphoreTake>
 800af36:	4603      	mov	r3, r0
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d001      	beq.n	800af40 <osMutexWait+0x8c>
    return osErrorOS;
 800af3c:	23ff      	movs	r3, #255	; 0xff
 800af3e:	e000      	b.n	800af42 <osMutexWait+0x8e>
  }
  
  return osOK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	e000ed04 	.word	0xe000ed04

0800af50 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800af58:	2300      	movs	r3, #0
 800af5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800af5c:	2300      	movs	r3, #0
 800af5e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800af60:	f7ff ff06 	bl	800ad70 <inHandlerMode>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d016      	beq.n	800af98 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800af6a:	f107 0308 	add.w	r3, r7, #8
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fd7f 	bl	800ba74 <xQueueGiveFromISR>
 800af76:	4603      	mov	r3, r0
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d001      	beq.n	800af80 <osMutexRelease+0x30>
      return osErrorOS;
 800af7c:	23ff      	movs	r3, #255	; 0xff
 800af7e:	e017      	b.n	800afb0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d013      	beq.n	800afae <osMutexRelease+0x5e>
 800af86:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <osMutexRelease+0x68>)
 800af88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	e00a      	b.n	800afae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800af98:	2300      	movs	r3, #0
 800af9a:	2200      	movs	r2, #0
 800af9c:	2100      	movs	r1, #0
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fbda 	bl	800b758 <xQueueGenericSend>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d001      	beq.n	800afae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800afaa:	23ff      	movs	r3, #255	; 0xff
 800afac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800afae:	68fb      	ldr	r3, [r7, #12]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	e000ed04 	.word	0xe000ed04

0800afbc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af02      	add	r7, sp, #8
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d010      	beq.n	800aff0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d10b      	bne.n	800afec <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	2303      	movs	r3, #3
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	4613      	mov	r3, r2
 800afde:	2200      	movs	r2, #0
 800afe0:	2100      	movs	r1, #0
 800afe2:	2001      	movs	r0, #1
 800afe4:	f000 fa9c 	bl	800b520 <xQueueGenericCreateStatic>
 800afe8:	4603      	mov	r3, r0
 800afea:	e016      	b.n	800b01a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	e014      	b.n	800b01a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d110      	bne.n	800b018 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800aff6:	2203      	movs	r2, #3
 800aff8:	2100      	movs	r1, #0
 800affa:	2001      	movs	r0, #1
 800affc:	f000 fb02 	bl	800b604 <xQueueGenericCreate>
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <osSemaphoreCreate+0x58>
 800b008:	2300      	movs	r3, #0
 800b00a:	2200      	movs	r2, #0
 800b00c:	2100      	movs	r1, #0
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f000 fba2 	bl	800b758 <xQueueGenericSend>
      return sema;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	e000      	b.n	800b01a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b018:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b02e:	2300      	movs	r3, #0
 800b030:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b038:	2380      	movs	r3, #128	; 0x80
 800b03a:	e03a      	b.n	800b0b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b046:	d103      	bne.n	800b050 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b04c:	60fb      	str	r3, [r7, #12]
 800b04e:	e009      	b.n	800b064 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d006      	beq.n	800b064 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <osSemaphoreWait+0x40>
      ticks = 1;
 800b060:	2301      	movs	r3, #1
 800b062:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b064:	f7ff fe84 	bl	800ad70 <inHandlerMode>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d017      	beq.n	800b09e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b06e:	f107 0308 	add.w	r3, r7, #8
 800b072:	461a      	mov	r2, r3
 800b074:	2100      	movs	r1, #0
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 ff6a 	bl	800bf50 <xQueueReceiveFromISR>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d001      	beq.n	800b086 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b082:	23ff      	movs	r3, #255	; 0xff
 800b084:	e015      	b.n	800b0b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d011      	beq.n	800b0b0 <osSemaphoreWait+0x8c>
 800b08c:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <osSemaphoreWait+0x98>)
 800b08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	e008      	b.n	800b0b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b09e:	68f9      	ldr	r1, [r7, #12]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fe4d 	bl	800bd40 <xQueueSemaphoreTake>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d001      	beq.n	800b0b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b0ac:	23ff      	movs	r3, #255	; 0xff
 800b0ae:	e000      	b.n	800b0b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b0d0:	f7ff fe4e 	bl	800ad70 <inHandlerMode>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d016      	beq.n	800b108 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b0da:	f107 0308 	add.w	r3, r7, #8
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fcc7 	bl	800ba74 <xQueueGiveFromISR>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d001      	beq.n	800b0f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b0ec:	23ff      	movs	r3, #255	; 0xff
 800b0ee:	e017      	b.n	800b120 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d013      	beq.n	800b11e <osSemaphoreRelease+0x5e>
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <osSemaphoreRelease+0x68>)
 800b0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	e00a      	b.n	800b11e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b108:	2300      	movs	r3, #0
 800b10a:	2200      	movs	r2, #0
 800b10c:	2100      	movs	r1, #0
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fb22 	bl	800b758 <xQueueGenericSend>
 800b114:	4603      	mov	r3, r0
 800b116:	2b01      	cmp	r3, #1
 800b118:	d001      	beq.n	800b11e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b11a:	23ff      	movs	r3, #255	; 0xff
 800b11c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b11e:	68fb      	ldr	r3, [r7, #12]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b12c:	b590      	push	{r4, r7, lr}
 800b12e:	b085      	sub	sp, #20
 800b130:	af02      	add	r7, sp, #8
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d012      	beq.n	800b164 <osMessageCreate+0x38>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00e      	beq.n	800b164 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6818      	ldr	r0, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6859      	ldr	r1, [r3, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	689a      	ldr	r2, [r3, #8]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68dc      	ldr	r4, [r3, #12]
 800b156:	2300      	movs	r3, #0
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	4623      	mov	r3, r4
 800b15c:	f000 f9e0 	bl	800b520 <xQueueGenericCreateStatic>
 800b160:	4603      	mov	r3, r0
 800b162:	e008      	b.n	800b176 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	4619      	mov	r1, r3
 800b170:	f000 fa48 	bl	800b604 <xQueueGenericCreate>
 800b174:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b176:	4618      	mov	r0, r3
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd90      	pop	{r4, r7, pc}
	...

0800b180 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <osMessagePut+0x1e>
    ticks = 1;
 800b19a:	2301      	movs	r3, #1
 800b19c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b19e:	f7ff fde7 	bl	800ad70 <inHandlerMode>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d018      	beq.n	800b1da <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b1a8:	f107 0210 	add.w	r2, r7, #16
 800b1ac:	f107 0108 	add.w	r1, r7, #8
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 fbca 	bl	800b94c <xQueueGenericSendFromISR>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d001      	beq.n	800b1c2 <osMessagePut+0x42>
      return osErrorOS;
 800b1be:	23ff      	movs	r3, #255	; 0xff
 800b1c0:	e018      	b.n	800b1f4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d014      	beq.n	800b1f2 <osMessagePut+0x72>
 800b1c8:	4b0c      	ldr	r3, [pc, #48]	; (800b1fc <osMessagePut+0x7c>)
 800b1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ce:	601a      	str	r2, [r3, #0]
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	e00b      	b.n	800b1f2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b1da:	f107 0108 	add.w	r1, r7, #8
 800b1de:	2300      	movs	r3, #0
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 fab8 	bl	800b758 <xQueueGenericSend>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d001      	beq.n	800b1f2 <osMessagePut+0x72>
      return osErrorOS;
 800b1ee:	23ff      	movs	r3, #255	; 0xff
 800b1f0:	e000      	b.n	800b1f4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	e000ed04 	.word	0xe000ed04

0800b200 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b200:	b590      	push	{r4, r7, lr}
 800b202:	b08b      	sub	sp, #44	; 0x2c
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10a      	bne.n	800b230 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b21a:	2380      	movs	r3, #128	; 0x80
 800b21c:	617b      	str	r3, [r7, #20]
    return event;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	461c      	mov	r4, r3
 800b222:	f107 0314 	add.w	r3, r7, #20
 800b226:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b22a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b22e:	e054      	b.n	800b2da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b230:	2300      	movs	r3, #0
 800b232:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b23e:	d103      	bne.n	800b248 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b244:	627b      	str	r3, [r7, #36]	; 0x24
 800b246:	e009      	b.n	800b25c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d006      	beq.n	800b25c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <osMessageGet+0x5c>
      ticks = 1;
 800b258:	2301      	movs	r3, #1
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b25c:	f7ff fd88 	bl	800ad70 <inHandlerMode>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d01c      	beq.n	800b2a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b266:	f107 0220 	add.w	r2, r7, #32
 800b26a:	f107 0314 	add.w	r3, r7, #20
 800b26e:	3304      	adds	r3, #4
 800b270:	4619      	mov	r1, r3
 800b272:	68b8      	ldr	r0, [r7, #8]
 800b274:	f000 fe6c 	bl	800bf50 <xQueueReceiveFromISR>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d102      	bne.n	800b284 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b27e:	2310      	movs	r3, #16
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	e001      	b.n	800b288 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b284:	2300      	movs	r3, #0
 800b286:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d01d      	beq.n	800b2ca <osMessageGet+0xca>
 800b28e:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <osMessageGet+0xe4>)
 800b290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	e014      	b.n	800b2ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b2a0:	f107 0314 	add.w	r3, r7, #20
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	68b8      	ldr	r0, [r7, #8]
 800b2ac:	f000 fc6c 	bl	800bb88 <xQueueReceive>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d102      	bne.n	800b2bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b2b6:	2310      	movs	r3, #16
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	e006      	b.n	800b2ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <osMessageGet+0xc6>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e000      	b.n	800b2c8 <osMessageGet+0xc8>
 800b2c6:	2340      	movs	r3, #64	; 0x40
 800b2c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	461c      	mov	r4, r3
 800b2ce:	f107 0314 	add.w	r3, r7, #20
 800b2d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	372c      	adds	r7, #44	; 0x2c
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd90      	pop	{r4, r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	e000ed04 	.word	0xe000ed04

0800b2e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f103 0208 	add.w	r2, r3, #8
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b300:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f103 0208 	add.w	r2, r3, #8
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f103 0208 	add.w	r2, r3, #8
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b342:	b480      	push	{r7}
 800b344:	b085      	sub	sp, #20
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	689a      	ldr	r2, [r3, #8]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	601a      	str	r2, [r3, #0]
}
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3a0:	d103      	bne.n	800b3aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	e00c      	b.n	800b3c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e002      	b.n	800b3b8 <vListInsert+0x2e>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d2f6      	bcs.n	800b3b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	601a      	str	r2, [r3, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	6892      	ldr	r2, [r2, #8]
 800b412:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	6852      	ldr	r2, [r2, #4]
 800b41c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	429a      	cmp	r2, r3
 800b426:	d103      	bne.n	800b430 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	1e5a      	subs	r2, r3, #1
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d109      	bne.n	800b478 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	60bb      	str	r3, [r7, #8]
 800b476:	e7fe      	b.n	800b476 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b478:	f002 f850 	bl	800d51c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b484:	68f9      	ldr	r1, [r7, #12]
 800b486:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b488:	fb01 f303 	mul.w	r3, r1, r3
 800b48c:	441a      	add	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4ae:	fb01 f303 	mul.w	r3, r1, r3
 800b4b2:	441a      	add	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	22ff      	movs	r2, #255	; 0xff
 800b4bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	22ff      	movs	r2, #255	; 0xff
 800b4c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d114      	bne.n	800b4f8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d01a      	beq.n	800b50c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3310      	adds	r3, #16
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f001 fafc 	bl	800cad8 <xTaskRemoveFromEventList>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d012      	beq.n	800b50c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4e6:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <xQueueGenericReset+0xcc>)
 800b4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	e009      	b.n	800b50c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3310      	adds	r3, #16
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7ff fef3 	bl	800b2e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3324      	adds	r3, #36	; 0x24
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff feee 	bl	800b2e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b50c:	f002 f834 	bl	800d578 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b510:	2301      	movs	r3, #1
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b520:	b580      	push	{r7, lr}
 800b522:	b08e      	sub	sp, #56	; 0x38
 800b524:	af02      	add	r7, sp, #8
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
 800b52c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d109      	bne.n	800b548 <xQueueGenericCreateStatic+0x28>
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	62bb      	str	r3, [r7, #40]	; 0x28
 800b546:	e7fe      	b.n	800b546 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <xQueueGenericCreateStatic+0x42>
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
 800b560:	e7fe      	b.n	800b560 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <xQueueGenericCreateStatic+0x4e>
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <xQueueGenericCreateStatic+0x52>
 800b56e:	2301      	movs	r3, #1
 800b570:	e000      	b.n	800b574 <xQueueGenericCreateStatic+0x54>
 800b572:	2300      	movs	r3, #0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <xQueueGenericCreateStatic+0x6c>
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	623b      	str	r3, [r7, #32]
 800b58a:	e7fe      	b.n	800b58a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <xQueueGenericCreateStatic+0x78>
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <xQueueGenericCreateStatic+0x7c>
 800b598:	2301      	movs	r3, #1
 800b59a:	e000      	b.n	800b59e <xQueueGenericCreateStatic+0x7e>
 800b59c:	2300      	movs	r3, #0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d109      	bne.n	800b5b6 <xQueueGenericCreateStatic+0x96>
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	61fb      	str	r3, [r7, #28]
 800b5b4:	e7fe      	b.n	800b5b4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5b6:	2348      	movs	r3, #72	; 0x48
 800b5b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	2b48      	cmp	r3, #72	; 0x48
 800b5be:	d009      	beq.n	800b5d4 <xQueueGenericCreateStatic+0xb4>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	61bb      	str	r3, [r7, #24]
 800b5d2:	e7fe      	b.n	800b5d2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00d      	beq.n	800b5fa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	68b9      	ldr	r1, [r7, #8]
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f000 f842 	bl	800b67e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3730      	adds	r7, #48	; 0x30
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b604:	b580      	push	{r7, lr}
 800b606:	b08a      	sub	sp, #40	; 0x28
 800b608:	af02      	add	r7, sp, #8
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	4613      	mov	r3, r2
 800b610:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d109      	bne.n	800b62c <xQueueGenericCreate+0x28>
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	613b      	str	r3, [r7, #16]
 800b62a:	e7fe      	b.n	800b62a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d102      	bne.n	800b638 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b632:	2300      	movs	r3, #0
 800b634:	61fb      	str	r3, [r7, #28]
 800b636:	e004      	b.n	800b642 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	fb02 f303 	mul.w	r3, r2, r3
 800b640:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	3348      	adds	r3, #72	; 0x48
 800b646:	4618      	mov	r0, r3
 800b648:	f002 f882 	bl	800d750 <pvPortMalloc>
 800b64c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00f      	beq.n	800b674 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	3348      	adds	r3, #72	; 0x48
 800b658:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b662:	79fa      	ldrb	r2, [r7, #7]
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	4613      	mov	r3, r2
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	68b9      	ldr	r1, [r7, #8]
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f000 f805 	bl	800b67e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b674:	69bb      	ldr	r3, [r7, #24]
	}
 800b676:	4618      	mov	r0, r3
 800b678:	3720      	adds	r7, #32
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	607a      	str	r2, [r7, #4]
 800b68a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d103      	bne.n	800b69a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	601a      	str	r2, [r3, #0]
 800b698:	e002      	b.n	800b6a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	69b8      	ldr	r0, [r7, #24]
 800b6b0:	f7ff fece 	bl	800b450 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00e      	beq.n	800b6e8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b6dc:	2300      	movs	r3, #0
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f838 	bl	800b758 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b6e8:	bf00      	nop
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	617b      	str	r3, [r7, #20]
 800b6fe:	2300      	movs	r3, #0
 800b700:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	461a      	mov	r2, r3
 800b706:	6939      	ldr	r1, [r7, #16]
 800b708:	6978      	ldr	r0, [r7, #20]
 800b70a:	f7ff ff7b 	bl	800b604 <xQueueGenericCreate>
 800b70e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7ff ffd3 	bl	800b6bc <prvInitialiseMutex>

		return pxNewQueue;
 800b716:	68fb      	ldr	r3, [r7, #12]
	}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af02      	add	r7, sp, #8
 800b726:	4603      	mov	r3, r0
 800b728:	6039      	str	r1, [r7, #0]
 800b72a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b72c:	2301      	movs	r3, #1
 800b72e:	617b      	str	r3, [r7, #20]
 800b730:	2300      	movs	r3, #0
 800b732:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2200      	movs	r2, #0
 800b73c:	6939      	ldr	r1, [r7, #16]
 800b73e:	6978      	ldr	r0, [r7, #20]
 800b740:	f7ff feee 	bl	800b520 <xQueueGenericCreateStatic>
 800b744:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7ff ffb8 	bl	800b6bc <prvInitialiseMutex>

		return pxNewQueue;
 800b74c:	68fb      	ldr	r3, [r7, #12]
	}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
	...

0800b758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08e      	sub	sp, #56	; 0x38
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b766:	2300      	movs	r3, #0
 800b768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	2b00      	cmp	r3, #0
 800b772:	d109      	bne.n	800b788 <xQueueGenericSend+0x30>
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	62bb      	str	r3, [r7, #40]	; 0x28
 800b786:	e7fe      	b.n	800b786 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d103      	bne.n	800b796 <xQueueGenericSend+0x3e>
 800b78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b792:	2b00      	cmp	r3, #0
 800b794:	d101      	bne.n	800b79a <xQueueGenericSend+0x42>
 800b796:	2301      	movs	r3, #1
 800b798:	e000      	b.n	800b79c <xQueueGenericSend+0x44>
 800b79a:	2300      	movs	r3, #0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d109      	bne.n	800b7b4 <xQueueGenericSend+0x5c>
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7b2:	e7fe      	b.n	800b7b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d103      	bne.n	800b7c2 <xQueueGenericSend+0x6a>
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <xQueueGenericSend+0x6e>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e000      	b.n	800b7c8 <xQueueGenericSend+0x70>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d109      	bne.n	800b7e0 <xQueueGenericSend+0x88>
 800b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	623b      	str	r3, [r7, #32]
 800b7de:	e7fe      	b.n	800b7de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7e0:	f001 fb36 	bl	800ce50 <xTaskGetSchedulerState>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d102      	bne.n	800b7f0 <xQueueGenericSend+0x98>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <xQueueGenericSend+0x9c>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e000      	b.n	800b7f6 <xQueueGenericSend+0x9e>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <xQueueGenericSend+0xb6>
 800b7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	61fb      	str	r3, [r7, #28]
 800b80c:	e7fe      	b.n	800b80c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b80e:	f001 fe85 	bl	800d51c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d302      	bcc.n	800b824 <xQueueGenericSend+0xcc>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b02      	cmp	r3, #2
 800b822:	d129      	bne.n	800b878 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b82a:	f000 fc26 	bl	800c07a <prvCopyDataToQueue>
 800b82e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b834:	2b00      	cmp	r3, #0
 800b836:	d010      	beq.n	800b85a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	3324      	adds	r3, #36	; 0x24
 800b83c:	4618      	mov	r0, r3
 800b83e:	f001 f94b 	bl	800cad8 <xTaskRemoveFromEventList>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d013      	beq.n	800b870 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b848:	4b3f      	ldr	r3, [pc, #252]	; (800b948 <xQueueGenericSend+0x1f0>)
 800b84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	e00a      	b.n	800b870 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d007      	beq.n	800b870 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b860:	4b39      	ldr	r3, [pc, #228]	; (800b948 <xQueueGenericSend+0x1f0>)
 800b862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b870:	f001 fe82 	bl	800d578 <vPortExitCritical>
				return pdPASS;
 800b874:	2301      	movs	r3, #1
 800b876:	e063      	b.n	800b940 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d103      	bne.n	800b886 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b87e:	f001 fe7b 	bl	800d578 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b882:	2300      	movs	r3, #0
 800b884:	e05c      	b.n	800b940 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b88c:	f107 0314 	add.w	r3, r7, #20
 800b890:	4618      	mov	r0, r3
 800b892:	f001 f983 	bl	800cb9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b896:	2301      	movs	r3, #1
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b89a:	f001 fe6d 	bl	800d578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b89e:	f000 ff15 	bl	800c6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8a2:	f001 fe3b 	bl	800d51c <vPortEnterCritical>
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8ac:	b25b      	sxtb	r3, r3
 800b8ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8b2:	d103      	bne.n	800b8bc <xQueueGenericSend+0x164>
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8c2:	b25b      	sxtb	r3, r3
 800b8c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8c8:	d103      	bne.n	800b8d2 <xQueueGenericSend+0x17a>
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8d2:	f001 fe51 	bl	800d578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8d6:	1d3a      	adds	r2, r7, #4
 800b8d8:	f107 0314 	add.w	r3, r7, #20
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f001 f972 	bl	800cbc8 <xTaskCheckForTimeOut>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d124      	bne.n	800b934 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8ec:	f000 fcbd 	bl	800c26a <prvIsQueueFull>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d018      	beq.n	800b928 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	3310      	adds	r3, #16
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	4618      	mov	r0, r3
 800b900:	f001 f8c6 	bl	800ca90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b906:	f000 fc48 	bl	800c19a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b90a:	f000 feed 	bl	800c6e8 <xTaskResumeAll>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	f47f af7c 	bne.w	800b80e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b916:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <xQueueGenericSend+0x1f0>)
 800b918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	e772      	b.n	800b80e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b92a:	f000 fc36 	bl	800c19a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b92e:	f000 fedb 	bl	800c6e8 <xTaskResumeAll>
 800b932:	e76c      	b.n	800b80e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b936:	f000 fc30 	bl	800c19a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b93a:	f000 fed5 	bl	800c6e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b93e:	2300      	movs	r3, #0
		}
	}
}
 800b940:	4618      	mov	r0, r3
 800b942:	3738      	adds	r7, #56	; 0x38
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	e000ed04 	.word	0xe000ed04

0800b94c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08e      	sub	sp, #56	; 0x38
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	2b00      	cmp	r3, #0
 800b962:	d109      	bne.n	800b978 <xQueueGenericSendFromISR+0x2c>
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
 800b976:	e7fe      	b.n	800b976 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d103      	bne.n	800b986 <xQueueGenericSendFromISR+0x3a>
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <xQueueGenericSendFromISR+0x3e>
 800b986:	2301      	movs	r3, #1
 800b988:	e000      	b.n	800b98c <xQueueGenericSendFromISR+0x40>
 800b98a:	2300      	movs	r3, #0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d109      	bne.n	800b9a4 <xQueueGenericSendFromISR+0x58>
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	623b      	str	r3, [r7, #32]
 800b9a2:	e7fe      	b.n	800b9a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d103      	bne.n	800b9b2 <xQueueGenericSendFromISR+0x66>
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d101      	bne.n	800b9b6 <xQueueGenericSendFromISR+0x6a>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <xQueueGenericSendFromISR+0x6c>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d109      	bne.n	800b9d0 <xQueueGenericSendFromISR+0x84>
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	61fb      	str	r3, [r7, #28]
 800b9ce:	e7fe      	b.n	800b9ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9d0:	f001 fe80 	bl	800d6d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9d4:	f3ef 8211 	mrs	r2, BASEPRI
 800b9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	61ba      	str	r2, [r7, #24]
 800b9ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d302      	bcc.n	800ba02 <xQueueGenericSendFromISR+0xb6>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d12c      	bne.n	800ba5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba0c:	683a      	ldr	r2, [r7, #0]
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba12:	f000 fb32 	bl	800c07a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba1e:	d112      	bne.n	800ba46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d016      	beq.n	800ba56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	3324      	adds	r3, #36	; 0x24
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 f853 	bl	800cad8 <xTaskRemoveFromEventList>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00e      	beq.n	800ba56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00b      	beq.n	800ba56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	e007      	b.n	800ba56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	b25a      	sxtb	r2, r3
 800ba50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba56:	2301      	movs	r3, #1
 800ba58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ba5a:	e001      	b.n	800ba60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3738      	adds	r7, #56	; 0x38
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08e      	sub	sp, #56	; 0x38
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d109      	bne.n	800ba9c <xQueueGiveFromISR+0x28>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	623b      	str	r3, [r7, #32]
 800ba9a:	e7fe      	b.n	800ba9a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d009      	beq.n	800bab8 <xQueueGiveFromISR+0x44>
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	61fb      	str	r3, [r7, #28]
 800bab6:	e7fe      	b.n	800bab6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d103      	bne.n	800bac8 <xQueueGiveFromISR+0x54>
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <xQueueGiveFromISR+0x58>
 800bac8:	2301      	movs	r3, #1
 800baca:	e000      	b.n	800bace <xQueueGiveFromISR+0x5a>
 800bacc:	2300      	movs	r3, #0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d109      	bne.n	800bae6 <xQueueGiveFromISR+0x72>
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	61bb      	str	r3, [r7, #24]
 800bae4:	e7fe      	b.n	800bae4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bae6:	f001 fdf5 	bl	800d6d4 <vPortValidateInterruptPriority>
	__asm volatile
 800baea:	f3ef 8211 	mrs	r2, BASEPRI
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	617a      	str	r2, [r7, #20]
 800bb00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bb02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d22b      	bcs.n	800bb6e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb30:	d112      	bne.n	800bb58 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d016      	beq.n	800bb68 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	3324      	adds	r3, #36	; 0x24
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 ffca 	bl	800cad8 <xTaskRemoveFromEventList>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00e      	beq.n	800bb68 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2201      	movs	r2, #1
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	e007      	b.n	800bb68 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	b25a      	sxtb	r2, r3
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb6c:	e001      	b.n	800bb72 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	637b      	str	r3, [r7, #52]	; 0x34
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3738      	adds	r7, #56	; 0x38
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08c      	sub	sp, #48	; 0x30
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d109      	bne.n	800bbb6 <xQueueReceive+0x2e>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	623b      	str	r3, [r7, #32]
 800bbb4:	e7fe      	b.n	800bbb4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d103      	bne.n	800bbc4 <xQueueReceive+0x3c>
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d101      	bne.n	800bbc8 <xQueueReceive+0x40>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e000      	b.n	800bbca <xQueueReceive+0x42>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d109      	bne.n	800bbe2 <xQueueReceive+0x5a>
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	61fb      	str	r3, [r7, #28]
 800bbe0:	e7fe      	b.n	800bbe0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbe2:	f001 f935 	bl	800ce50 <xTaskGetSchedulerState>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <xQueueReceive+0x6a>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d101      	bne.n	800bbf6 <xQueueReceive+0x6e>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e000      	b.n	800bbf8 <xQueueReceive+0x70>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d109      	bne.n	800bc10 <xQueueReceive+0x88>
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	61bb      	str	r3, [r7, #24]
 800bc0e:	e7fe      	b.n	800bc0e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc10:	f001 fc84 	bl	800d51c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc18:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d01f      	beq.n	800bc60 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc24:	f000 fa93 	bl	800c14e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	1e5a      	subs	r2, r3, #1
 800bc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00f      	beq.n	800bc58 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3a:	3310      	adds	r3, #16
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 ff4b 	bl	800cad8 <xTaskRemoveFromEventList>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d007      	beq.n	800bc58 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc48:	4b3c      	ldr	r3, [pc, #240]	; (800bd3c <xQueueReceive+0x1b4>)
 800bc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc58:	f001 fc8e 	bl	800d578 <vPortExitCritical>
				return pdPASS;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e069      	b.n	800bd34 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d103      	bne.n	800bc6e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc66:	f001 fc87 	bl	800d578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e062      	b.n	800bd34 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d106      	bne.n	800bc82 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc74:	f107 0310 	add.w	r3, r7, #16
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 ff8f 	bl	800cb9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc82:	f001 fc79 	bl	800d578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc86:	f000 fd21 	bl	800c6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc8a:	f001 fc47 	bl	800d51c <vPortEnterCritical>
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc94:	b25b      	sxtb	r3, r3
 800bc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc9a:	d103      	bne.n	800bca4 <xQueueReceive+0x11c>
 800bc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcaa:	b25b      	sxtb	r3, r3
 800bcac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcb0:	d103      	bne.n	800bcba <xQueueReceive+0x132>
 800bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcba:	f001 fc5d 	bl	800d578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcbe:	1d3a      	adds	r2, r7, #4
 800bcc0:	f107 0310 	add.w	r3, r7, #16
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 ff7e 	bl	800cbc8 <xTaskCheckForTimeOut>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d123      	bne.n	800bd1a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd4:	f000 fab3 	bl	800c23e <prvIsQueueEmpty>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d017      	beq.n	800bd0e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	3324      	adds	r3, #36	; 0x24
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	4611      	mov	r1, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 fed2 	bl	800ca90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcee:	f000 fa54 	bl	800c19a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcf2:	f000 fcf9 	bl	800c6e8 <xTaskResumeAll>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d189      	bne.n	800bc10 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bcfc:	4b0f      	ldr	r3, [pc, #60]	; (800bd3c <xQueueReceive+0x1b4>)
 800bcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	e780      	b.n	800bc10 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd10:	f000 fa43 	bl	800c19a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd14:	f000 fce8 	bl	800c6e8 <xTaskResumeAll>
 800bd18:	e77a      	b.n	800bc10 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd1c:	f000 fa3d 	bl	800c19a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd20:	f000 fce2 	bl	800c6e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd26:	f000 fa8a 	bl	800c23e <prvIsQueueEmpty>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f43f af6f 	beq.w	800bc10 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3730      	adds	r7, #48	; 0x30
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	e000ed04 	.word	0xe000ed04

0800bd40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08e      	sub	sp, #56	; 0x38
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd52:	2300      	movs	r3, #0
 800bd54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d109      	bne.n	800bd70 <xQueueSemaphoreTake+0x30>
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	f383 8811 	msr	BASEPRI, r3
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	623b      	str	r3, [r7, #32]
 800bd6e:	e7fe      	b.n	800bd6e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d009      	beq.n	800bd8c <xQueueSemaphoreTake+0x4c>
 800bd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	61fb      	str	r3, [r7, #28]
 800bd8a:	e7fe      	b.n	800bd8a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd8c:	f001 f860 	bl	800ce50 <xTaskGetSchedulerState>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d102      	bne.n	800bd9c <xQueueSemaphoreTake+0x5c>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <xQueueSemaphoreTake+0x60>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e000      	b.n	800bda2 <xQueueSemaphoreTake+0x62>
 800bda0:	2300      	movs	r3, #0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d109      	bne.n	800bdba <xQueueSemaphoreTake+0x7a>
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	61bb      	str	r3, [r7, #24]
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdba:	f001 fbaf 	bl	800d51c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d024      	beq.n	800be14 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	1e5a      	subs	r2, r3, #1
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d104      	bne.n	800bde4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800bdda:	f001 f9ff 	bl	800d1dc <pvTaskIncrementMutexHeldCount>
 800bdde:	4602      	mov	r2, r0
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00f      	beq.n	800be0c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdee:	3310      	adds	r3, #16
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f000 fe71 	bl	800cad8 <xTaskRemoveFromEventList>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d007      	beq.n	800be0c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdfc:	4b53      	ldr	r3, [pc, #332]	; (800bf4c <xQueueSemaphoreTake+0x20c>)
 800bdfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be0c:	f001 fbb4 	bl	800d578 <vPortExitCritical>
				return pdPASS;
 800be10:	2301      	movs	r3, #1
 800be12:	e096      	b.n	800bf42 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d110      	bne.n	800be3c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d009      	beq.n	800be34 <xQueueSemaphoreTake+0xf4>
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	617b      	str	r3, [r7, #20]
 800be32:	e7fe      	b.n	800be32 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be34:	f001 fba0 	bl	800d578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be38:	2300      	movs	r3, #0
 800be3a:	e082      	b.n	800bf42 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d106      	bne.n	800be50 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be42:	f107 030c 	add.w	r3, r7, #12
 800be46:	4618      	mov	r0, r3
 800be48:	f000 fea8 	bl	800cb9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be4c:	2301      	movs	r3, #1
 800be4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be50:	f001 fb92 	bl	800d578 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be54:	f000 fc3a 	bl	800c6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be58:	f001 fb60 	bl	800d51c <vPortEnterCritical>
 800be5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be62:	b25b      	sxtb	r3, r3
 800be64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be68:	d103      	bne.n	800be72 <xQueueSemaphoreTake+0x132>
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be78:	b25b      	sxtb	r3, r3
 800be7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be7e:	d103      	bne.n	800be88 <xQueueSemaphoreTake+0x148>
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	2200      	movs	r2, #0
 800be84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be88:	f001 fb76 	bl	800d578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be8c:	463a      	mov	r2, r7
 800be8e:	f107 030c 	add.w	r3, r7, #12
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f000 fe97 	bl	800cbc8 <xTaskCheckForTimeOut>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d132      	bne.n	800bf06 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bea2:	f000 f9cc 	bl	800c23e <prvIsQueueEmpty>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d026      	beq.n	800befa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d109      	bne.n	800bec8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800beb4:	f001 fb32 	bl	800d51c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 ffe5 	bl	800ce8c <xTaskPriorityInherit>
 800bec2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bec4:	f001 fb58 	bl	800d578 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beca:	3324      	adds	r3, #36	; 0x24
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 fddd 	bl	800ca90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bed8:	f000 f95f 	bl	800c19a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bedc:	f000 fc04 	bl	800c6e8 <xTaskResumeAll>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f47f af69 	bne.w	800bdba <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800bee8:	4b18      	ldr	r3, [pc, #96]	; (800bf4c <xQueueSemaphoreTake+0x20c>)
 800beea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	e75f      	b.n	800bdba <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800befa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800befc:	f000 f94d 	bl	800c19a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf00:	f000 fbf2 	bl	800c6e8 <xTaskResumeAll>
 800bf04:	e759      	b.n	800bdba <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf08:	f000 f947 	bl	800c19a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf0c:	f000 fbec 	bl	800c6e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf12:	f000 f994 	bl	800c23e <prvIsQueueEmpty>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f43f af4e 	beq.w	800bdba <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00d      	beq.n	800bf40 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800bf24:	f001 fafa 	bl	800d51c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf2a:	f000 f88e 	bl	800c04a <prvGetDisinheritPriorityAfterTimeout>
 800bf2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800bf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf36:	4618      	mov	r0, r3
 800bf38:	f001 f8b2 	bl	800d0a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf3c:	f001 fb1c 	bl	800d578 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3738      	adds	r7, #56	; 0x38
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08e      	sub	sp, #56	; 0x38
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d109      	bne.n	800bf7a <xQueueReceiveFromISR+0x2a>
 800bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	623b      	str	r3, [r7, #32]
 800bf78:	e7fe      	b.n	800bf78 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d103      	bne.n	800bf88 <xQueueReceiveFromISR+0x38>
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <xQueueReceiveFromISR+0x3c>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e000      	b.n	800bf8e <xQueueReceiveFromISR+0x3e>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d109      	bne.n	800bfa6 <xQueueReceiveFromISR+0x56>
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	61fb      	str	r3, [r7, #28]
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfa6:	f001 fb95 	bl	800d6d4 <vPortValidateInterruptPriority>
	__asm volatile
 800bfaa:	f3ef 8211 	mrs	r2, BASEPRI
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	61ba      	str	r2, [r7, #24]
 800bfc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bfc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d02f      	beq.n	800c032 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe0:	f000 f8b5 	bl	800c14e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	1e5a      	subs	r2, r3, #1
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bfec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bff4:	d112      	bne.n	800c01c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d016      	beq.n	800c02c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	3310      	adds	r3, #16
 800c002:	4618      	mov	r0, r3
 800c004:	f000 fd68 	bl	800cad8 <xTaskRemoveFromEventList>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00e      	beq.n	800c02c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00b      	beq.n	800c02c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	e007      	b.n	800c02c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c020:	3301      	adds	r3, #1
 800c022:	b2db      	uxtb	r3, r3
 800c024:	b25a      	sxtb	r2, r3
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c02c:	2301      	movs	r3, #1
 800c02e:	637b      	str	r3, [r7, #52]	; 0x34
 800c030:	e001      	b.n	800c036 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c032:	2300      	movs	r3, #0
 800c034:	637b      	str	r3, [r7, #52]	; 0x34
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c042:	4618      	mov	r0, r3
 800c044:	3738      	adds	r7, #56	; 0x38
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c04a:	b480      	push	{r7}
 800c04c:	b085      	sub	sp, #20
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	2b00      	cmp	r3, #0
 800c058:	d006      	beq.n	800c068 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f1c3 0307 	rsb	r3, r3, #7
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	e001      	b.n	800c06c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c068:	2300      	movs	r3, #0
 800c06a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c06c:	68fb      	ldr	r3, [r7, #12]
	}
 800c06e:	4618      	mov	r0, r3
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b086      	sub	sp, #24
 800c07e:	af00      	add	r7, sp, #0
 800c080:	60f8      	str	r0, [r7, #12]
 800c082:	60b9      	str	r1, [r7, #8]
 800c084:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c086:	2300      	movs	r3, #0
 800c088:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c094:	2b00      	cmp	r3, #0
 800c096:	d10d      	bne.n	800c0b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d14d      	bne.n	800c13c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 ff77 	bl	800cf98 <xTaskPriorityDisinherit>
 800c0aa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	605a      	str	r2, [r3, #4]
 800c0b2:	e043      	b.n	800c13c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d119      	bne.n	800c0ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6898      	ldr	r0, [r3, #8]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	68b9      	ldr	r1, [r7, #8]
 800c0c6:	f00d fa52 	bl	801956e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	689a      	ldr	r2, [r3, #8]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d2:	441a      	add	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	689a      	ldr	r2, [r3, #8]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d32b      	bcc.n	800c13c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	609a      	str	r2, [r3, #8]
 800c0ec:	e026      	b.n	800c13c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	68d8      	ldr	r0, [r3, #12]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	68b9      	ldr	r1, [r7, #8]
 800c0fa:	f00d fa38 	bl	801956e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	68da      	ldr	r2, [r3, #12]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c106:	425b      	negs	r3, r3
 800c108:	441a      	add	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	68da      	ldr	r2, [r3, #12]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	429a      	cmp	r2, r3
 800c118:	d207      	bcs.n	800c12a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	425b      	negs	r3, r3
 800c124:	441a      	add	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d105      	bne.n	800c13c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	3b01      	subs	r3, #1
 800c13a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c144:	697b      	ldr	r3, [r7, #20]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b082      	sub	sp, #8
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d018      	beq.n	800c192 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68da      	ldr	r2, [r3, #12]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c168:	441a      	add	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	429a      	cmp	r2, r3
 800c178:	d303      	bcc.n	800c182 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68d9      	ldr	r1, [r3, #12]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18a:	461a      	mov	r2, r3
 800c18c:	6838      	ldr	r0, [r7, #0]
 800c18e:	f00d f9ee 	bl	801956e <memcpy>
	}
}
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c1a2:	f001 f9bb 	bl	800d51c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1ae:	e011      	b.n	800c1d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d012      	beq.n	800c1de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	3324      	adds	r3, #36	; 0x24
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 fc8b 	bl	800cad8 <xTaskRemoveFromEventList>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c1c8:	f000 fd5e 	bl	800cc88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dce9      	bgt.n	800c1b0 <prvUnlockQueue+0x16>
 800c1dc:	e000      	b.n	800c1e0 <prvUnlockQueue+0x46>
					break;
 800c1de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	22ff      	movs	r2, #255	; 0xff
 800c1e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c1e8:	f001 f9c6 	bl	800d578 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c1ec:	f001 f996 	bl	800d51c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1f8:	e011      	b.n	800c21e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d012      	beq.n	800c228 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	3310      	adds	r3, #16
 800c206:	4618      	mov	r0, r3
 800c208:	f000 fc66 	bl	800cad8 <xTaskRemoveFromEventList>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c212:	f000 fd39 	bl	800cc88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	3b01      	subs	r3, #1
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c21e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c222:	2b00      	cmp	r3, #0
 800c224:	dce9      	bgt.n	800c1fa <prvUnlockQueue+0x60>
 800c226:	e000      	b.n	800c22a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c228:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	22ff      	movs	r2, #255	; 0xff
 800c22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c232:	f001 f9a1 	bl	800d578 <vPortExitCritical>
}
 800c236:	bf00      	nop
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b084      	sub	sp, #16
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c246:	f001 f969 	bl	800d51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d102      	bne.n	800c258 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c252:	2301      	movs	r3, #1
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	e001      	b.n	800c25c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c258:	2300      	movs	r3, #0
 800c25a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c25c:	f001 f98c 	bl	800d578 <vPortExitCritical>

	return xReturn;
 800c260:	68fb      	ldr	r3, [r7, #12]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c272:	f001 f953 	bl	800d51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c27e:	429a      	cmp	r2, r3
 800c280:	d102      	bne.n	800c288 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c282:	2301      	movs	r3, #1
 800c284:	60fb      	str	r3, [r7, #12]
 800c286:	e001      	b.n	800c28c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c288:	2300      	movs	r3, #0
 800c28a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c28c:	f001 f974 	bl	800d578 <vPortExitCritical>

	return xReturn;
 800c290:	68fb      	ldr	r3, [r7, #12]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b08e      	sub	sp, #56	; 0x38
 800c29e:	af04      	add	r7, sp, #16
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
 800c2a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d109      	bne.n	800c2c2 <xTaskCreateStatic+0x28>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	623b      	str	r3, [r7, #32]
 800c2c0:	e7fe      	b.n	800c2c0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d109      	bne.n	800c2dc <xTaskCreateStatic+0x42>
 800c2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	61fb      	str	r3, [r7, #28]
 800c2da:	e7fe      	b.n	800c2da <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c2dc:	2354      	movs	r3, #84	; 0x54
 800c2de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	2b54      	cmp	r3, #84	; 0x54
 800c2e4:	d009      	beq.n	800c2fa <xTaskCreateStatic+0x60>
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	61bb      	str	r3, [r7, #24]
 800c2f8:	e7fe      	b.n	800c2f8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d01e      	beq.n	800c33e <xTaskCreateStatic+0xa4>
 800c300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c302:	2b00      	cmp	r3, #0
 800c304:	d01b      	beq.n	800c33e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c308:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	2202      	movs	r2, #2
 800c314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c318:	2300      	movs	r3, #0
 800c31a:	9303      	str	r3, [sp, #12]
 800c31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31e:	9302      	str	r3, [sp, #8]
 800c320:	f107 0314 	add.w	r3, r7, #20
 800c324:	9301      	str	r3, [sp, #4]
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 f850 	bl	800c3d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c338:	f000 f8cc 	bl	800c4d4 <prvAddNewTaskToReadyList>
 800c33c:	e001      	b.n	800c342 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800c33e:	2300      	movs	r3, #0
 800c340:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c342:	697b      	ldr	r3, [r7, #20]
	}
 800c344:	4618      	mov	r0, r3
 800c346:	3728      	adds	r7, #40	; 0x28
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08c      	sub	sp, #48	; 0x30
 800c350:	af04      	add	r7, sp, #16
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	603b      	str	r3, [r7, #0]
 800c358:	4613      	mov	r3, r2
 800c35a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c35c:	88fb      	ldrh	r3, [r7, #6]
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4618      	mov	r0, r3
 800c362:	f001 f9f5 	bl	800d750 <pvPortMalloc>
 800c366:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00e      	beq.n	800c38c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c36e:	2054      	movs	r0, #84	; 0x54
 800c370:	f001 f9ee 	bl	800d750 <pvPortMalloc>
 800c374:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	631a      	str	r2, [r3, #48]	; 0x30
 800c382:	e005      	b.n	800c390 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c384:	6978      	ldr	r0, [r7, #20]
 800c386:	f001 faa5 	bl	800d8d4 <vPortFree>
 800c38a:	e001      	b.n	800c390 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c38c:	2300      	movs	r3, #0
 800c38e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d017      	beq.n	800c3c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c39e:	88fa      	ldrh	r2, [r7, #6]
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	9303      	str	r3, [sp, #12]
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	9302      	str	r3, [sp, #8]
 800c3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3aa:	9301      	str	r3, [sp, #4]
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 f80e 	bl	800c3d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3ba:	69f8      	ldr	r0, [r7, #28]
 800c3bc:	f000 f88a 	bl	800c4d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	61bb      	str	r3, [r7, #24]
 800c3c4:	e002      	b.n	800c3cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c3cc:	69bb      	ldr	r3, [r7, #24]
	}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3720      	adds	r7, #32
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b088      	sub	sp, #32
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	607a      	str	r2, [r7, #4]
 800c3e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	f023 0307 	bic.w	r3, r3, #7
 800c3fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	f003 0307 	and.w	r3, r3, #7
 800c404:	2b00      	cmp	r3, #0
 800c406:	d009      	beq.n	800c41c <prvInitialiseNewTask+0x46>
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	617b      	str	r3, [r7, #20]
 800c41a:	e7fe      	b.n	800c41a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c41c:	2300      	movs	r3, #0
 800c41e:	61fb      	str	r3, [r7, #28]
 800c420:	e012      	b.n	800c448 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	4413      	add	r3, r2
 800c428:	7819      	ldrb	r1, [r3, #0]
 800c42a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	4413      	add	r3, r2
 800c430:	3334      	adds	r3, #52	; 0x34
 800c432:	460a      	mov	r2, r1
 800c434:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	4413      	add	r3, r2
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d006      	beq.n	800c450 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	3301      	adds	r3, #1
 800c446:	61fb      	str	r3, [r7, #28]
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	2b0f      	cmp	r3, #15
 800c44c:	d9e9      	bls.n	800c422 <prvInitialiseNewTask+0x4c>
 800c44e:	e000      	b.n	800c452 <prvInitialiseNewTask+0x7c>
		{
			break;
 800c450:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45c:	2b06      	cmp	r3, #6
 800c45e:	d901      	bls.n	800c464 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c460:	2306      	movs	r3, #6
 800c462:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c468:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c46e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	2200      	movs	r2, #0
 800c474:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	3304      	adds	r3, #4
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe ff54 	bl	800b328 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	3318      	adds	r3, #24
 800c484:	4618      	mov	r0, r3
 800c486:	f7fe ff4f 	bl	800b328 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c48e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	f1c3 0207 	rsb	r2, r3, #7
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	68f9      	ldr	r1, [r7, #12]
 800c4b2:	69b8      	ldr	r0, [r7, #24]
 800c4b4:	f000 ff0c 	bl	800d2d0 <pxPortInitialiseStack>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ca:	bf00      	nop
 800c4cc:	3720      	adds	r7, #32
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4dc:	f001 f81e 	bl	800d51c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4e0:	4b2a      	ldr	r3, [pc, #168]	; (800c58c <prvAddNewTaskToReadyList+0xb8>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	4a29      	ldr	r2, [pc, #164]	; (800c58c <prvAddNewTaskToReadyList+0xb8>)
 800c4e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4ea:	4b29      	ldr	r3, [pc, #164]	; (800c590 <prvAddNewTaskToReadyList+0xbc>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d109      	bne.n	800c506 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4f2:	4a27      	ldr	r2, [pc, #156]	; (800c590 <prvAddNewTaskToReadyList+0xbc>)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4f8:	4b24      	ldr	r3, [pc, #144]	; (800c58c <prvAddNewTaskToReadyList+0xb8>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d110      	bne.n	800c522 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c500:	f000 fbe6 	bl	800ccd0 <prvInitialiseTaskLists>
 800c504:	e00d      	b.n	800c522 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c506:	4b23      	ldr	r3, [pc, #140]	; (800c594 <prvAddNewTaskToReadyList+0xc0>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d109      	bne.n	800c522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c50e:	4b20      	ldr	r3, [pc, #128]	; (800c590 <prvAddNewTaskToReadyList+0xbc>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c518:	429a      	cmp	r2, r3
 800c51a:	d802      	bhi.n	800c522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c51c:	4a1c      	ldr	r2, [pc, #112]	; (800c590 <prvAddNewTaskToReadyList+0xbc>)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c522:	4b1d      	ldr	r3, [pc, #116]	; (800c598 <prvAddNewTaskToReadyList+0xc4>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3301      	adds	r3, #1
 800c528:	4a1b      	ldr	r2, [pc, #108]	; (800c598 <prvAddNewTaskToReadyList+0xc4>)
 800c52a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c530:	2201      	movs	r2, #1
 800c532:	409a      	lsls	r2, r3
 800c534:	4b19      	ldr	r3, [pc, #100]	; (800c59c <prvAddNewTaskToReadyList+0xc8>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4313      	orrs	r3, r2
 800c53a:	4a18      	ldr	r2, [pc, #96]	; (800c59c <prvAddNewTaskToReadyList+0xc8>)
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c542:	4613      	mov	r3, r2
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4413      	add	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4a15      	ldr	r2, [pc, #84]	; (800c5a0 <prvAddNewTaskToReadyList+0xcc>)
 800c54c:	441a      	add	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3304      	adds	r3, #4
 800c552:	4619      	mov	r1, r3
 800c554:	4610      	mov	r0, r2
 800c556:	f7fe fef4 	bl	800b342 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c55a:	f001 f80d 	bl	800d578 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c55e:	4b0d      	ldr	r3, [pc, #52]	; (800c594 <prvAddNewTaskToReadyList+0xc0>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00e      	beq.n	800c584 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c566:	4b0a      	ldr	r3, [pc, #40]	; (800c590 <prvAddNewTaskToReadyList+0xbc>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c570:	429a      	cmp	r2, r3
 800c572:	d207      	bcs.n	800c584 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c574:	4b0b      	ldr	r3, [pc, #44]	; (800c5a4 <prvAddNewTaskToReadyList+0xd0>)
 800c576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c584:	bf00      	nop
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	20000568 	.word	0x20000568
 800c590:	20000468 	.word	0x20000468
 800c594:	20000574 	.word	0x20000574
 800c598:	20000584 	.word	0x20000584
 800c59c:	20000570 	.word	0x20000570
 800c5a0:	2000046c 	.word	0x2000046c
 800c5a4:	e000ed04 	.word	0xe000ed04

0800c5a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d016      	beq.n	800c5e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c5ba:	4b13      	ldr	r3, [pc, #76]	; (800c608 <vTaskDelay+0x60>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d009      	beq.n	800c5d6 <vTaskDelay+0x2e>
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	60bb      	str	r3, [r7, #8]
 800c5d4:	e7fe      	b.n	800c5d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c5d6:	f000 f879 	bl	800c6cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c5da:	2100      	movs	r1, #0
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fe11 	bl	800d204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5e2:	f000 f881 	bl	800c6e8 <xTaskResumeAll>
 800c5e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d107      	bne.n	800c5fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c5ee:	4b07      	ldr	r3, [pc, #28]	; (800c60c <vTaskDelay+0x64>)
 800c5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f4:	601a      	str	r2, [r3, #0]
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	20000590 	.word	0x20000590
 800c60c:	e000ed04 	.word	0xe000ed04

0800c610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08a      	sub	sp, #40	; 0x28
 800c614:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c616:	2300      	movs	r3, #0
 800c618:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c61e:	463a      	mov	r2, r7
 800c620:	1d39      	adds	r1, r7, #4
 800c622:	f107 0308 	add.w	r3, r7, #8
 800c626:	4618      	mov	r0, r3
 800c628:	f7f4 fa88 	bl	8000b3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	9202      	str	r2, [sp, #8]
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	2300      	movs	r3, #0
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	2300      	movs	r3, #0
 800c63c:	460a      	mov	r2, r1
 800c63e:	491d      	ldr	r1, [pc, #116]	; (800c6b4 <vTaskStartScheduler+0xa4>)
 800c640:	481d      	ldr	r0, [pc, #116]	; (800c6b8 <vTaskStartScheduler+0xa8>)
 800c642:	f7ff fe2a 	bl	800c29a <xTaskCreateStatic>
 800c646:	4602      	mov	r2, r0
 800c648:	4b1c      	ldr	r3, [pc, #112]	; (800c6bc <vTaskStartScheduler+0xac>)
 800c64a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c64c:	4b1b      	ldr	r3, [pc, #108]	; (800c6bc <vTaskStartScheduler+0xac>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d002      	beq.n	800c65a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c654:	2301      	movs	r3, #1
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	e001      	b.n	800c65e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c65a:	2300      	movs	r3, #0
 800c65c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d115      	bne.n	800c690 <vTaskStartScheduler+0x80>
 800c664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c676:	4b12      	ldr	r3, [pc, #72]	; (800c6c0 <vTaskStartScheduler+0xb0>)
 800c678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c67c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c67e:	4b11      	ldr	r3, [pc, #68]	; (800c6c4 <vTaskStartScheduler+0xb4>)
 800c680:	2201      	movs	r2, #1
 800c682:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <vTaskStartScheduler+0xb8>)
 800c686:	2200      	movs	r2, #0
 800c688:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c68a:	f000 fea9 	bl	800d3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c68e:	e00d      	b.n	800c6ac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c696:	d109      	bne.n	800c6ac <vTaskStartScheduler+0x9c>
 800c698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	e7fe      	b.n	800c6aa <vTaskStartScheduler+0x9a>
}
 800c6ac:	bf00      	nop
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	0801a900 	.word	0x0801a900
 800c6b8:	0800cca1 	.word	0x0800cca1
 800c6bc:	2000058c 	.word	0x2000058c
 800c6c0:	20000588 	.word	0x20000588
 800c6c4:	20000574 	.word	0x20000574
 800c6c8:	2000056c 	.word	0x2000056c

0800c6cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c6d0:	4b04      	ldr	r3, [pc, #16]	; (800c6e4 <vTaskSuspendAll+0x18>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	4a03      	ldr	r2, [pc, #12]	; (800c6e4 <vTaskSuspendAll+0x18>)
 800c6d8:	6013      	str	r3, [r2, #0]
}
 800c6da:	bf00      	nop
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	20000590 	.word	0x20000590

0800c6e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c6f6:	4b41      	ldr	r3, [pc, #260]	; (800c7fc <xTaskResumeAll+0x114>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d109      	bne.n	800c712 <xTaskResumeAll+0x2a>
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	603b      	str	r3, [r7, #0]
 800c710:	e7fe      	b.n	800c710 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c712:	f000 ff03 	bl	800d51c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c716:	4b39      	ldr	r3, [pc, #228]	; (800c7fc <xTaskResumeAll+0x114>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	4a37      	ldr	r2, [pc, #220]	; (800c7fc <xTaskResumeAll+0x114>)
 800c71e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c720:	4b36      	ldr	r3, [pc, #216]	; (800c7fc <xTaskResumeAll+0x114>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d161      	bne.n	800c7ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c728:	4b35      	ldr	r3, [pc, #212]	; (800c800 <xTaskResumeAll+0x118>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d05d      	beq.n	800c7ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c730:	e02e      	b.n	800c790 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c732:	4b34      	ldr	r3, [pc, #208]	; (800c804 <xTaskResumeAll+0x11c>)
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3318      	adds	r3, #24
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe fe5c 	bl	800b3fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3304      	adds	r3, #4
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fe fe57 	bl	800b3fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c752:	2201      	movs	r2, #1
 800c754:	409a      	lsls	r2, r3
 800c756:	4b2c      	ldr	r3, [pc, #176]	; (800c808 <xTaskResumeAll+0x120>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	4a2a      	ldr	r2, [pc, #168]	; (800c808 <xTaskResumeAll+0x120>)
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c764:	4613      	mov	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4a27      	ldr	r2, [pc, #156]	; (800c80c <xTaskResumeAll+0x124>)
 800c76e:	441a      	add	r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	3304      	adds	r3, #4
 800c774:	4619      	mov	r1, r3
 800c776:	4610      	mov	r0, r2
 800c778:	f7fe fde3 	bl	800b342 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c780:	4b23      	ldr	r3, [pc, #140]	; (800c810 <xTaskResumeAll+0x128>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	429a      	cmp	r2, r3
 800c788:	d302      	bcc.n	800c790 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c78a:	4b22      	ldr	r3, [pc, #136]	; (800c814 <xTaskResumeAll+0x12c>)
 800c78c:	2201      	movs	r2, #1
 800c78e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c790:	4b1c      	ldr	r3, [pc, #112]	; (800c804 <xTaskResumeAll+0x11c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1cc      	bne.n	800c732 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c79e:	f000 fb31 	bl	800ce04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c7a2:	4b1d      	ldr	r3, [pc, #116]	; (800c818 <xTaskResumeAll+0x130>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d010      	beq.n	800c7d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c7ae:	f000 f859 	bl	800c864 <xTaskIncrementTick>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c7b8:	4b16      	ldr	r3, [pc, #88]	; (800c814 <xTaskResumeAll+0x12c>)
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1f1      	bne.n	800c7ae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c7ca:	4b13      	ldr	r3, [pc, #76]	; (800c818 <xTaskResumeAll+0x130>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c7d0:	4b10      	ldr	r3, [pc, #64]	; (800c814 <xTaskResumeAll+0x12c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d009      	beq.n	800c7ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c7dc:	4b0f      	ldr	r3, [pc, #60]	; (800c81c <xTaskResumeAll+0x134>)
 800c7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7ec:	f000 fec4 	bl	800d578 <vPortExitCritical>

	return xAlreadyYielded;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20000590 	.word	0x20000590
 800c800:	20000568 	.word	0x20000568
 800c804:	20000528 	.word	0x20000528
 800c808:	20000570 	.word	0x20000570
 800c80c:	2000046c 	.word	0x2000046c
 800c810:	20000468 	.word	0x20000468
 800c814:	2000057c 	.word	0x2000057c
 800c818:	20000578 	.word	0x20000578
 800c81c:	e000ed04 	.word	0xe000ed04

0800c820 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c826:	4b05      	ldr	r3, [pc, #20]	; (800c83c <xTaskGetTickCount+0x1c>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c82c:	687b      	ldr	r3, [r7, #4]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	2000056c 	.word	0x2000056c

0800c840 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c846:	f000 ff45 	bl	800d6d4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c84a:	2300      	movs	r3, #0
 800c84c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c84e:	4b04      	ldr	r3, [pc, #16]	; (800c860 <xTaskGetTickCountFromISR+0x20>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c854:	683b      	ldr	r3, [r7, #0]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	2000056c 	.word	0x2000056c

0800c864 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c86a:	2300      	movs	r3, #0
 800c86c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c86e:	4b50      	ldr	r3, [pc, #320]	; (800c9b0 <xTaskIncrementTick+0x14c>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	f040 808c 	bne.w	800c990 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c878:	4b4e      	ldr	r3, [pc, #312]	; (800c9b4 <xTaskIncrementTick+0x150>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3301      	adds	r3, #1
 800c87e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c880:	4a4c      	ldr	r2, [pc, #304]	; (800c9b4 <xTaskIncrementTick+0x150>)
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d11f      	bne.n	800c8cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c88c:	4b4a      	ldr	r3, [pc, #296]	; (800c9b8 <xTaskIncrementTick+0x154>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d009      	beq.n	800c8aa <xTaskIncrementTick+0x46>
 800c896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	603b      	str	r3, [r7, #0]
 800c8a8:	e7fe      	b.n	800c8a8 <xTaskIncrementTick+0x44>
 800c8aa:	4b43      	ldr	r3, [pc, #268]	; (800c9b8 <xTaskIncrementTick+0x154>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	4b42      	ldr	r3, [pc, #264]	; (800c9bc <xTaskIncrementTick+0x158>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a40      	ldr	r2, [pc, #256]	; (800c9b8 <xTaskIncrementTick+0x154>)
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	4a40      	ldr	r2, [pc, #256]	; (800c9bc <xTaskIncrementTick+0x158>)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	4b40      	ldr	r3, [pc, #256]	; (800c9c0 <xTaskIncrementTick+0x15c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	4a3e      	ldr	r2, [pc, #248]	; (800c9c0 <xTaskIncrementTick+0x15c>)
 800c8c6:	6013      	str	r3, [r2, #0]
 800c8c8:	f000 fa9c 	bl	800ce04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c8cc:	4b3d      	ldr	r3, [pc, #244]	; (800c9c4 <xTaskIncrementTick+0x160>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d34d      	bcc.n	800c972 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8d6:	4b38      	ldr	r3, [pc, #224]	; (800c9b8 <xTaskIncrementTick+0x154>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d101      	bne.n	800c8e4 <xTaskIncrementTick+0x80>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e000      	b.n	800c8e6 <xTaskIncrementTick+0x82>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d004      	beq.n	800c8f4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ea:	4b36      	ldr	r3, [pc, #216]	; (800c9c4 <xTaskIncrementTick+0x160>)
 800c8ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8f0:	601a      	str	r2, [r3, #0]
					break;
 800c8f2:	e03e      	b.n	800c972 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c8f4:	4b30      	ldr	r3, [pc, #192]	; (800c9b8 <xTaskIncrementTick+0x154>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d203      	bcs.n	800c914 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c90c:	4a2d      	ldr	r2, [pc, #180]	; (800c9c4 <xTaskIncrementTick+0x160>)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6013      	str	r3, [r2, #0]
						break;
 800c912:	e02e      	b.n	800c972 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	3304      	adds	r3, #4
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fe fd6f 	bl	800b3fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c922:	2b00      	cmp	r3, #0
 800c924:	d004      	beq.n	800c930 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	3318      	adds	r3, #24
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fe fd66 	bl	800b3fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c934:	2201      	movs	r2, #1
 800c936:	409a      	lsls	r2, r3
 800c938:	4b23      	ldr	r3, [pc, #140]	; (800c9c8 <xTaskIncrementTick+0x164>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	4a22      	ldr	r2, [pc, #136]	; (800c9c8 <xTaskIncrementTick+0x164>)
 800c940:	6013      	str	r3, [r2, #0]
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c946:	4613      	mov	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	4413      	add	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4a1f      	ldr	r2, [pc, #124]	; (800c9cc <xTaskIncrementTick+0x168>)
 800c950:	441a      	add	r2, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	3304      	adds	r3, #4
 800c956:	4619      	mov	r1, r3
 800c958:	4610      	mov	r0, r2
 800c95a:	f7fe fcf2 	bl	800b342 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c962:	4b1b      	ldr	r3, [pc, #108]	; (800c9d0 <xTaskIncrementTick+0x16c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c968:	429a      	cmp	r2, r3
 800c96a:	d3b4      	bcc.n	800c8d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c96c:	2301      	movs	r3, #1
 800c96e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c970:	e7b1      	b.n	800c8d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c972:	4b17      	ldr	r3, [pc, #92]	; (800c9d0 <xTaskIncrementTick+0x16c>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c978:	4914      	ldr	r1, [pc, #80]	; (800c9cc <xTaskIncrementTick+0x168>)
 800c97a:	4613      	mov	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4413      	add	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	440b      	add	r3, r1
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b01      	cmp	r3, #1
 800c988:	d907      	bls.n	800c99a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800c98a:	2301      	movs	r3, #1
 800c98c:	617b      	str	r3, [r7, #20]
 800c98e:	e004      	b.n	800c99a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c990:	4b10      	ldr	r3, [pc, #64]	; (800c9d4 <xTaskIncrementTick+0x170>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3301      	adds	r3, #1
 800c996:	4a0f      	ldr	r2, [pc, #60]	; (800c9d4 <xTaskIncrementTick+0x170>)
 800c998:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c99a:	4b0f      	ldr	r3, [pc, #60]	; (800c9d8 <xTaskIncrementTick+0x174>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c9a6:	697b      	ldr	r3, [r7, #20]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3718      	adds	r7, #24
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20000590 	.word	0x20000590
 800c9b4:	2000056c 	.word	0x2000056c
 800c9b8:	20000520 	.word	0x20000520
 800c9bc:	20000524 	.word	0x20000524
 800c9c0:	20000580 	.word	0x20000580
 800c9c4:	20000588 	.word	0x20000588
 800c9c8:	20000570 	.word	0x20000570
 800c9cc:	2000046c 	.word	0x2000046c
 800c9d0:	20000468 	.word	0x20000468
 800c9d4:	20000578 	.word	0x20000578
 800c9d8:	2000057c 	.word	0x2000057c

0800c9dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b087      	sub	sp, #28
 800c9e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9e2:	4b26      	ldr	r3, [pc, #152]	; (800ca7c <vTaskSwitchContext+0xa0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c9ea:	4b25      	ldr	r3, [pc, #148]	; (800ca80 <vTaskSwitchContext+0xa4>)
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c9f0:	e03e      	b.n	800ca70 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800c9f2:	4b23      	ldr	r3, [pc, #140]	; (800ca80 <vTaskSwitchContext+0xa4>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c9f8:	4b22      	ldr	r3, [pc, #136]	; (800ca84 <vTaskSwitchContext+0xa8>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	fab3 f383 	clz	r3, r3
 800ca04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ca06:	7afb      	ldrb	r3, [r7, #11]
 800ca08:	f1c3 031f 	rsb	r3, r3, #31
 800ca0c:	617b      	str	r3, [r7, #20]
 800ca0e:	491e      	ldr	r1, [pc, #120]	; (800ca88 <vTaskSwitchContext+0xac>)
 800ca10:	697a      	ldr	r2, [r7, #20]
 800ca12:	4613      	mov	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	440b      	add	r3, r1
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d109      	bne.n	800ca36 <vTaskSwitchContext+0x5a>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	607b      	str	r3, [r7, #4]
 800ca34:	e7fe      	b.n	800ca34 <vTaskSwitchContext+0x58>
 800ca36:	697a      	ldr	r2, [r7, #20]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4a11      	ldr	r2, [pc, #68]	; (800ca88 <vTaskSwitchContext+0xac>)
 800ca42:	4413      	add	r3, r2
 800ca44:	613b      	str	r3, [r7, #16]
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	605a      	str	r2, [r3, #4]
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	3308      	adds	r3, #8
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d104      	bne.n	800ca66 <vTaskSwitchContext+0x8a>
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	605a      	str	r2, [r3, #4]
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	4a07      	ldr	r2, [pc, #28]	; (800ca8c <vTaskSwitchContext+0xb0>)
 800ca6e:	6013      	str	r3, [r2, #0]
}
 800ca70:	bf00      	nop
 800ca72:	371c      	adds	r7, #28
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	20000590 	.word	0x20000590
 800ca80:	2000057c 	.word	0x2000057c
 800ca84:	20000570 	.word	0x20000570
 800ca88:	2000046c 	.word	0x2000046c
 800ca8c:	20000468 	.word	0x20000468

0800ca90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d109      	bne.n	800cab4 <vTaskPlaceOnEventList+0x24>
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	60fb      	str	r3, [r7, #12]
 800cab2:	e7fe      	b.n	800cab2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cab4:	4b07      	ldr	r3, [pc, #28]	; (800cad4 <vTaskPlaceOnEventList+0x44>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3318      	adds	r3, #24
 800caba:	4619      	mov	r1, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7fe fc64 	bl	800b38a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cac2:	2101      	movs	r1, #1
 800cac4:	6838      	ldr	r0, [r7, #0]
 800cac6:	f000 fb9d 	bl	800d204 <prvAddCurrentTaskToDelayedList>
}
 800caca:	bf00      	nop
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	20000468 	.word	0x20000468

0800cad8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d109      	bne.n	800cb02 <xTaskRemoveFromEventList+0x2a>
 800caee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	e7fe      	b.n	800cb00 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	3318      	adds	r3, #24
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fc78 	bl	800b3fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb0c:	4b1d      	ldr	r3, [pc, #116]	; (800cb84 <xTaskRemoveFromEventList+0xac>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d11c      	bne.n	800cb4e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	3304      	adds	r3, #4
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe fc6f 	bl	800b3fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	2201      	movs	r2, #1
 800cb24:	409a      	lsls	r2, r3
 800cb26:	4b18      	ldr	r3, [pc, #96]	; (800cb88 <xTaskRemoveFromEventList+0xb0>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	4a16      	ldr	r2, [pc, #88]	; (800cb88 <xTaskRemoveFromEventList+0xb0>)
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	4613      	mov	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4a13      	ldr	r2, [pc, #76]	; (800cb8c <xTaskRemoveFromEventList+0xb4>)
 800cb3e:	441a      	add	r2, r3
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	3304      	adds	r3, #4
 800cb44:	4619      	mov	r1, r3
 800cb46:	4610      	mov	r0, r2
 800cb48:	f7fe fbfb 	bl	800b342 <vListInsertEnd>
 800cb4c:	e005      	b.n	800cb5a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	3318      	adds	r3, #24
 800cb52:	4619      	mov	r1, r3
 800cb54:	480e      	ldr	r0, [pc, #56]	; (800cb90 <xTaskRemoveFromEventList+0xb8>)
 800cb56:	f7fe fbf4 	bl	800b342 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5e:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <xTaskRemoveFromEventList+0xbc>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d905      	bls.n	800cb74 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <xTaskRemoveFromEventList+0xc0>)
 800cb6e:	2201      	movs	r2, #1
 800cb70:	601a      	str	r2, [r3, #0]
 800cb72:	e001      	b.n	800cb78 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800cb74:	2300      	movs	r3, #0
 800cb76:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800cb78:	697b      	ldr	r3, [r7, #20]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3718      	adds	r7, #24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	20000590 	.word	0x20000590
 800cb88:	20000570 	.word	0x20000570
 800cb8c:	2000046c 	.word	0x2000046c
 800cb90:	20000528 	.word	0x20000528
 800cb94:	20000468 	.word	0x20000468
 800cb98:	2000057c 	.word	0x2000057c

0800cb9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cba4:	4b06      	ldr	r3, [pc, #24]	; (800cbc0 <vTaskInternalSetTimeOutState+0x24>)
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cbac:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <vTaskInternalSetTimeOutState+0x28>)
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	605a      	str	r2, [r3, #4]
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	20000580 	.word	0x20000580
 800cbc4:	2000056c 	.word	0x2000056c

0800cbc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b088      	sub	sp, #32
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d109      	bne.n	800cbec <xTaskCheckForTimeOut+0x24>
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	613b      	str	r3, [r7, #16]
 800cbea:	e7fe      	b.n	800cbea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d109      	bne.n	800cc06 <xTaskCheckForTimeOut+0x3e>
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	e7fe      	b.n	800cc04 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800cc06:	f000 fc89 	bl	800d51c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc0a:	4b1d      	ldr	r3, [pc, #116]	; (800cc80 <xTaskCheckForTimeOut+0xb8>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	69ba      	ldr	r2, [r7, #24]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc22:	d102      	bne.n	800cc2a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc24:	2300      	movs	r3, #0
 800cc26:	61fb      	str	r3, [r7, #28]
 800cc28:	e023      	b.n	800cc72 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	4b15      	ldr	r3, [pc, #84]	; (800cc84 <xTaskCheckForTimeOut+0xbc>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d007      	beq.n	800cc46 <xTaskCheckForTimeOut+0x7e>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d302      	bcc.n	800cc46 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cc40:	2301      	movs	r3, #1
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	e015      	b.n	800cc72 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d20b      	bcs.n	800cc68 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	1ad2      	subs	r2, r2, r3
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff ff9d 	bl	800cb9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc62:	2300      	movs	r3, #0
 800cc64:	61fb      	str	r3, [r7, #28]
 800cc66:	e004      	b.n	800cc72 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc72:	f000 fc81 	bl	800d578 <vPortExitCritical>

	return xReturn;
 800cc76:	69fb      	ldr	r3, [r7, #28]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3720      	adds	r7, #32
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	2000056c 	.word	0x2000056c
 800cc84:	20000580 	.word	0x20000580

0800cc88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc8c:	4b03      	ldr	r3, [pc, #12]	; (800cc9c <vTaskMissedYield+0x14>)
 800cc8e:	2201      	movs	r2, #1
 800cc90:	601a      	str	r2, [r3, #0]
}
 800cc92:	bf00      	nop
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	2000057c 	.word	0x2000057c

0800cca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cca8:	f000 f852 	bl	800cd50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ccac:	4b06      	ldr	r3, [pc, #24]	; (800ccc8 <prvIdleTask+0x28>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d9f9      	bls.n	800cca8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ccb4:	4b05      	ldr	r3, [pc, #20]	; (800cccc <prvIdleTask+0x2c>)
 800ccb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ccc4:	e7f0      	b.n	800cca8 <prvIdleTask+0x8>
 800ccc6:	bf00      	nop
 800ccc8:	2000046c 	.word	0x2000046c
 800cccc:	e000ed04 	.word	0xe000ed04

0800ccd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	607b      	str	r3, [r7, #4]
 800ccda:	e00c      	b.n	800ccf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4a12      	ldr	r2, [pc, #72]	; (800cd30 <prvInitialiseTaskLists+0x60>)
 800cce8:	4413      	add	r3, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe fafc 	bl	800b2e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	607b      	str	r3, [r7, #4]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b06      	cmp	r3, #6
 800ccfa:	d9ef      	bls.n	800ccdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ccfc:	480d      	ldr	r0, [pc, #52]	; (800cd34 <prvInitialiseTaskLists+0x64>)
 800ccfe:	f7fe faf3 	bl	800b2e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd02:	480d      	ldr	r0, [pc, #52]	; (800cd38 <prvInitialiseTaskLists+0x68>)
 800cd04:	f7fe faf0 	bl	800b2e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd08:	480c      	ldr	r0, [pc, #48]	; (800cd3c <prvInitialiseTaskLists+0x6c>)
 800cd0a:	f7fe faed 	bl	800b2e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd0e:	480c      	ldr	r0, [pc, #48]	; (800cd40 <prvInitialiseTaskLists+0x70>)
 800cd10:	f7fe faea 	bl	800b2e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cd14:	480b      	ldr	r0, [pc, #44]	; (800cd44 <prvInitialiseTaskLists+0x74>)
 800cd16:	f7fe fae7 	bl	800b2e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd1a:	4b0b      	ldr	r3, [pc, #44]	; (800cd48 <prvInitialiseTaskLists+0x78>)
 800cd1c:	4a05      	ldr	r2, [pc, #20]	; (800cd34 <prvInitialiseTaskLists+0x64>)
 800cd1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <prvInitialiseTaskLists+0x7c>)
 800cd22:	4a05      	ldr	r2, [pc, #20]	; (800cd38 <prvInitialiseTaskLists+0x68>)
 800cd24:	601a      	str	r2, [r3, #0]
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	2000046c 	.word	0x2000046c
 800cd34:	200004f8 	.word	0x200004f8
 800cd38:	2000050c 	.word	0x2000050c
 800cd3c:	20000528 	.word	0x20000528
 800cd40:	2000053c 	.word	0x2000053c
 800cd44:	20000554 	.word	0x20000554
 800cd48:	20000520 	.word	0x20000520
 800cd4c:	20000524 	.word	0x20000524

0800cd50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd56:	e019      	b.n	800cd8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd58:	f000 fbe0 	bl	800d51c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800cd5c:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <prvCheckTasksWaitingTermination+0x4c>)
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3304      	adds	r3, #4
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fe fb47 	bl	800b3fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd6e:	4b0c      	ldr	r3, [pc, #48]	; (800cda0 <prvCheckTasksWaitingTermination+0x50>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	4a0a      	ldr	r2, [pc, #40]	; (800cda0 <prvCheckTasksWaitingTermination+0x50>)
 800cd76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd78:	4b0a      	ldr	r3, [pc, #40]	; (800cda4 <prvCheckTasksWaitingTermination+0x54>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	4a09      	ldr	r2, [pc, #36]	; (800cda4 <prvCheckTasksWaitingTermination+0x54>)
 800cd80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd82:	f000 fbf9 	bl	800d578 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 f80e 	bl	800cda8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd8c:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <prvCheckTasksWaitingTermination+0x54>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1e1      	bne.n	800cd58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	2000053c 	.word	0x2000053c
 800cda0:	20000568 	.word	0x20000568
 800cda4:	20000550 	.word	0x20000550

0800cda8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d108      	bne.n	800cdcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f000 fd88 	bl	800d8d4 <vPortFree>
				vPortFree( pxTCB );
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fd85 	bl	800d8d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cdca:	e017      	b.n	800cdfc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d103      	bne.n	800cdde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 fd7c 	bl	800d8d4 <vPortFree>
	}
 800cddc:	e00e      	b.n	800cdfc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d009      	beq.n	800cdfc <prvDeleteTCB+0x54>
 800cde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdec:	f383 8811 	msr	BASEPRI, r3
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	60fb      	str	r3, [r7, #12]
 800cdfa:	e7fe      	b.n	800cdfa <prvDeleteTCB+0x52>
	}
 800cdfc:	bf00      	nop
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce0a:	4b0f      	ldr	r3, [pc, #60]	; (800ce48 <prvResetNextTaskUnblockTime+0x44>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <prvResetNextTaskUnblockTime+0x14>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e000      	b.n	800ce1a <prvResetNextTaskUnblockTime+0x16>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d004      	beq.n	800ce28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce1e:	4b0b      	ldr	r3, [pc, #44]	; (800ce4c <prvResetNextTaskUnblockTime+0x48>)
 800ce20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce26:	e008      	b.n	800ce3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ce28:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <prvResetNextTaskUnblockTime+0x44>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	4a05      	ldr	r2, [pc, #20]	; (800ce4c <prvResetNextTaskUnblockTime+0x48>)
 800ce38:	6013      	str	r3, [r2, #0]
}
 800ce3a:	bf00      	nop
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	20000520 	.word	0x20000520
 800ce4c:	20000588 	.word	0x20000588

0800ce50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <xTaskGetSchedulerState+0x34>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d102      	bne.n	800ce64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	607b      	str	r3, [r7, #4]
 800ce62:	e008      	b.n	800ce76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <xTaskGetSchedulerState+0x38>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	607b      	str	r3, [r7, #4]
 800ce70:	e001      	b.n	800ce76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce72:	2300      	movs	r3, #0
 800ce74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce76:	687b      	ldr	r3, [r7, #4]
	}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	20000574 	.word	0x20000574
 800ce88:	20000590 	.word	0x20000590

0800ce8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d06e      	beq.n	800cf80 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea6:	4b39      	ldr	r3, [pc, #228]	; (800cf8c <xTaskPriorityInherit+0x100>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d25e      	bcs.n	800cf6e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	699b      	ldr	r3, [r3, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	db06      	blt.n	800cec6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceb8:	4b34      	ldr	r3, [pc, #208]	; (800cf8c <xTaskPriorityInherit+0x100>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebe:	f1c3 0207 	rsb	r2, r3, #7
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	6959      	ldr	r1, [r3, #20]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cece:	4613      	mov	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	4413      	add	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4a2e      	ldr	r2, [pc, #184]	; (800cf90 <xTaskPriorityInherit+0x104>)
 800ced8:	4413      	add	r3, r2
 800ceda:	4299      	cmp	r1, r3
 800cedc:	d101      	bne.n	800cee2 <xTaskPriorityInherit+0x56>
 800cede:	2301      	movs	r3, #1
 800cee0:	e000      	b.n	800cee4 <xTaskPriorityInherit+0x58>
 800cee2:	2300      	movs	r3, #0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d03a      	beq.n	800cf5e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	3304      	adds	r3, #4
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe fa85 	bl	800b3fc <uxListRemove>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d115      	bne.n	800cf24 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefc:	4924      	ldr	r1, [pc, #144]	; (800cf90 <xTaskPriorityInherit+0x104>)
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	440b      	add	r3, r1
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10a      	bne.n	800cf24 <xTaskPriorityInherit+0x98>
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	2201      	movs	r2, #1
 800cf14:	fa02 f303 	lsl.w	r3, r2, r3
 800cf18:	43da      	mvns	r2, r3
 800cf1a:	4b1e      	ldr	r3, [pc, #120]	; (800cf94 <xTaskPriorityInherit+0x108>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4013      	ands	r3, r2
 800cf20:	4a1c      	ldr	r2, [pc, #112]	; (800cf94 <xTaskPriorityInherit+0x108>)
 800cf22:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf24:	4b19      	ldr	r3, [pc, #100]	; (800cf8c <xTaskPriorityInherit+0x100>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	2201      	movs	r2, #1
 800cf34:	409a      	lsls	r2, r3
 800cf36:	4b17      	ldr	r3, [pc, #92]	; (800cf94 <xTaskPriorityInherit+0x108>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	4a15      	ldr	r2, [pc, #84]	; (800cf94 <xTaskPriorityInherit+0x108>)
 800cf3e:	6013      	str	r3, [r2, #0]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf44:	4613      	mov	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	4413      	add	r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	4a10      	ldr	r2, [pc, #64]	; (800cf90 <xTaskPriorityInherit+0x104>)
 800cf4e:	441a      	add	r2, r3
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	3304      	adds	r3, #4
 800cf54:	4619      	mov	r1, r3
 800cf56:	4610      	mov	r0, r2
 800cf58:	f7fe f9f3 	bl	800b342 <vListInsertEnd>
 800cf5c:	e004      	b.n	800cf68 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf5e:	4b0b      	ldr	r3, [pc, #44]	; (800cf8c <xTaskPriorityInherit+0x100>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	e008      	b.n	800cf80 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf72:	4b06      	ldr	r3, [pc, #24]	; (800cf8c <xTaskPriorityInherit+0x100>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d201      	bcs.n	800cf80 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf80:	68fb      	ldr	r3, [r7, #12]
	}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20000468 	.word	0x20000468
 800cf90:	2000046c 	.word	0x2000046c
 800cf94:	20000570 	.word	0x20000570

0800cf98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d06c      	beq.n	800d088 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cfae:	4b39      	ldr	r3, [pc, #228]	; (800d094 <xTaskPriorityDisinherit+0xfc>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d009      	beq.n	800cfcc <xTaskPriorityDisinherit+0x34>
 800cfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	e7fe      	b.n	800cfca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d109      	bne.n	800cfe8 <xTaskPriorityDisinherit+0x50>
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	60bb      	str	r3, [r7, #8]
 800cfe6:	e7fe      	b.n	800cfe6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfec:	1e5a      	subs	r2, r3, #1
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d044      	beq.n	800d088 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d002:	2b00      	cmp	r3, #0
 800d004:	d140      	bne.n	800d088 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	3304      	adds	r3, #4
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe f9f6 	bl	800b3fc <uxListRemove>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d115      	bne.n	800d042 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01a:	491f      	ldr	r1, [pc, #124]	; (800d098 <xTaskPriorityDisinherit+0x100>)
 800d01c:	4613      	mov	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	440b      	add	r3, r1
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10a      	bne.n	800d042 <xTaskPriorityDisinherit+0xaa>
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d030:	2201      	movs	r2, #1
 800d032:	fa02 f303 	lsl.w	r3, r2, r3
 800d036:	43da      	mvns	r2, r3
 800d038:	4b18      	ldr	r3, [pc, #96]	; (800d09c <xTaskPriorityDisinherit+0x104>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4013      	ands	r3, r2
 800d03e:	4a17      	ldr	r2, [pc, #92]	; (800d09c <xTaskPriorityDisinherit+0x104>)
 800d040:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04e:	f1c3 0207 	rsb	r2, r3, #7
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05a:	2201      	movs	r2, #1
 800d05c:	409a      	lsls	r2, r3
 800d05e:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <xTaskPriorityDisinherit+0x104>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4313      	orrs	r3, r2
 800d064:	4a0d      	ldr	r2, [pc, #52]	; (800d09c <xTaskPriorityDisinherit+0x104>)
 800d066:	6013      	str	r3, [r2, #0]
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d06c:	4613      	mov	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4413      	add	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4a08      	ldr	r2, [pc, #32]	; (800d098 <xTaskPriorityDisinherit+0x100>)
 800d076:	441a      	add	r2, r3
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	3304      	adds	r3, #4
 800d07c:	4619      	mov	r1, r3
 800d07e:	4610      	mov	r0, r2
 800d080:	f7fe f95f 	bl	800b342 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d088:	697b      	ldr	r3, [r7, #20]
	}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3718      	adds	r7, #24
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	20000468 	.word	0x20000468
 800d098:	2000046c 	.word	0x2000046c
 800d09c:	20000570 	.word	0x20000570

0800d0a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 8086 	beq.w	800d1c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d109      	bne.n	800d0d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c6:	f383 8811 	msr	BASEPRI, r3
 800d0ca:	f3bf 8f6f 	isb	sy
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	e7fe      	b.n	800d0d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0da:	683a      	ldr	r2, [r7, #0]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d902      	bls.n	800d0e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	61fb      	str	r3, [r7, #28]
 800d0e4:	e002      	b.n	800d0ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f0:	69fa      	ldr	r2, [r7, #28]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d067      	beq.n	800d1c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d162      	bne.n	800d1c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d100:	4b33      	ldr	r3, [pc, #204]	; (800d1d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	69ba      	ldr	r2, [r7, #24]
 800d106:	429a      	cmp	r2, r3
 800d108:	d109      	bne.n	800d11e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	60bb      	str	r3, [r7, #8]
 800d11c:	e7fe      	b.n	800d11c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d122:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	69fa      	ldr	r2, [r7, #28]
 800d128:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	699b      	ldr	r3, [r3, #24]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	db04      	blt.n	800d13c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	f1c3 0207 	rsb	r2, r3, #7
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	6959      	ldr	r1, [r3, #20]
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	4613      	mov	r3, r2
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	4413      	add	r3, r2
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	4a22      	ldr	r2, [pc, #136]	; (800d1d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d14c:	4413      	add	r3, r2
 800d14e:	4299      	cmp	r1, r3
 800d150:	d101      	bne.n	800d156 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800d152:	2301      	movs	r3, #1
 800d154:	e000      	b.n	800d158 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d156:	2300      	movs	r3, #0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d034      	beq.n	800d1c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	3304      	adds	r3, #4
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe f94b 	bl	800b3fc <uxListRemove>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d115      	bne.n	800d198 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d170:	4918      	ldr	r1, [pc, #96]	; (800d1d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d172:	4613      	mov	r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	4413      	add	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	440b      	add	r3, r1
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d186:	2201      	movs	r2, #1
 800d188:	fa02 f303 	lsl.w	r3, r2, r3
 800d18c:	43da      	mvns	r2, r3
 800d18e:	4b12      	ldr	r3, [pc, #72]	; (800d1d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4013      	ands	r3, r2
 800d194:	4a10      	ldr	r2, [pc, #64]	; (800d1d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d196:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19c:	2201      	movs	r2, #1
 800d19e:	409a      	lsls	r2, r3
 800d1a0:	4b0d      	ldr	r3, [pc, #52]	; (800d1d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	4a0c      	ldr	r2, [pc, #48]	; (800d1d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4a07      	ldr	r2, [pc, #28]	; (800d1d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d1b8:	441a      	add	r2, r3
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	3304      	adds	r3, #4
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	f7fe f8be 	bl	800b342 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1c6:	bf00      	nop
 800d1c8:	3720      	adds	r7, #32
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20000468 	.word	0x20000468
 800d1d4:	2000046c 	.word	0x2000046c
 800d1d8:	20000570 	.word	0x20000570

0800d1dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d1e0:	4b07      	ldr	r3, [pc, #28]	; (800d200 <pvTaskIncrementMutexHeldCount+0x24>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d004      	beq.n	800d1f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d1e8:	4b05      	ldr	r3, [pc, #20]	; (800d200 <pvTaskIncrementMutexHeldCount+0x24>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d1ee:	3201      	adds	r2, #1
 800d1f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d1f2:	4b03      	ldr	r3, [pc, #12]	; (800d200 <pvTaskIncrementMutexHeldCount+0x24>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
	}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	20000468 	.word	0x20000468

0800d204 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d20e:	4b29      	ldr	r3, [pc, #164]	; (800d2b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d214:	4b28      	ldr	r3, [pc, #160]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3304      	adds	r3, #4
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe f8ee 	bl	800b3fc <uxListRemove>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10b      	bne.n	800d23e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d226:	4b24      	ldr	r3, [pc, #144]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22c:	2201      	movs	r2, #1
 800d22e:	fa02 f303 	lsl.w	r3, r2, r3
 800d232:	43da      	mvns	r2, r3
 800d234:	4b21      	ldr	r3, [pc, #132]	; (800d2bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4013      	ands	r3, r2
 800d23a:	4a20      	ldr	r2, [pc, #128]	; (800d2bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d23c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d244:	d10a      	bne.n	800d25c <prvAddCurrentTaskToDelayedList+0x58>
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d007      	beq.n	800d25c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d24c:	4b1a      	ldr	r3, [pc, #104]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3304      	adds	r3, #4
 800d252:	4619      	mov	r1, r3
 800d254:	481a      	ldr	r0, [pc, #104]	; (800d2c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d256:	f7fe f874 	bl	800b342 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d25a:	e026      	b.n	800d2aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4413      	add	r3, r2
 800d262:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d264:	4b14      	ldr	r3, [pc, #80]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	429a      	cmp	r2, r3
 800d272:	d209      	bcs.n	800d288 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d274:	4b13      	ldr	r3, [pc, #76]	; (800d2c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	4b0f      	ldr	r3, [pc, #60]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4619      	mov	r1, r3
 800d280:	4610      	mov	r0, r2
 800d282:	f7fe f882 	bl	800b38a <vListInsert>
}
 800d286:	e010      	b.n	800d2aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d288:	4b0f      	ldr	r3, [pc, #60]	; (800d2c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	4b0a      	ldr	r3, [pc, #40]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3304      	adds	r3, #4
 800d292:	4619      	mov	r1, r3
 800d294:	4610      	mov	r0, r2
 800d296:	f7fe f878 	bl	800b38a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d29a:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d202      	bcs.n	800d2aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d2a4:	4a09      	ldr	r2, [pc, #36]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	6013      	str	r3, [r2, #0]
}
 800d2aa:	bf00      	nop
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	2000056c 	.word	0x2000056c
 800d2b8:	20000468 	.word	0x20000468
 800d2bc:	20000570 	.word	0x20000570
 800d2c0:	20000554 	.word	0x20000554
 800d2c4:	20000524 	.word	0x20000524
 800d2c8:	20000520 	.word	0x20000520
 800d2cc:	20000588 	.word	0x20000588

0800d2d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	3b04      	subs	r3, #4
 800d2e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d2e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	3b04      	subs	r3, #4
 800d2ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	f023 0201 	bic.w	r2, r3, #1
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3b04      	subs	r3, #4
 800d2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d300:	4a0c      	ldr	r2, [pc, #48]	; (800d334 <pxPortInitialiseStack+0x64>)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3b14      	subs	r3, #20
 800d30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	3b04      	subs	r3, #4
 800d316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f06f 0202 	mvn.w	r2, #2
 800d31e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	3b20      	subs	r3, #32
 800d324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d326:	68fb      	ldr	r3, [r7, #12]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3714      	adds	r7, #20
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	0800d339 	.word	0x0800d339

0800d338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d33e:	2300      	movs	r3, #0
 800d340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d342:	4b11      	ldr	r3, [pc, #68]	; (800d388 <prvTaskExitError+0x50>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d34a:	d009      	beq.n	800d360 <prvTaskExitError+0x28>
 800d34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	60fb      	str	r3, [r7, #12]
 800d35e:	e7fe      	b.n	800d35e <prvTaskExitError+0x26>
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d372:	bf00      	nop
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d0fc      	beq.n	800d374 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	20000118 	.word	0x20000118
 800d38c:	00000000 	.word	0x00000000

0800d390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d390:	4b07      	ldr	r3, [pc, #28]	; (800d3b0 <pxCurrentTCBConst2>)
 800d392:	6819      	ldr	r1, [r3, #0]
 800d394:	6808      	ldr	r0, [r1, #0]
 800d396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39a:	f380 8809 	msr	PSP, r0
 800d39e:	f3bf 8f6f 	isb	sy
 800d3a2:	f04f 0000 	mov.w	r0, #0
 800d3a6:	f380 8811 	msr	BASEPRI, r0
 800d3aa:	4770      	bx	lr
 800d3ac:	f3af 8000 	nop.w

0800d3b0 <pxCurrentTCBConst2>:
 800d3b0:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d3b4:	bf00      	nop
 800d3b6:	bf00      	nop

0800d3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3b8:	4808      	ldr	r0, [pc, #32]	; (800d3dc <prvPortStartFirstTask+0x24>)
 800d3ba:	6800      	ldr	r0, [r0, #0]
 800d3bc:	6800      	ldr	r0, [r0, #0]
 800d3be:	f380 8808 	msr	MSP, r0
 800d3c2:	f04f 0000 	mov.w	r0, #0
 800d3c6:	f380 8814 	msr	CONTROL, r0
 800d3ca:	b662      	cpsie	i
 800d3cc:	b661      	cpsie	f
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	df00      	svc	0
 800d3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d3da:	bf00      	nop
 800d3dc:	e000ed08 	.word	0xe000ed08

0800d3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d3e6:	4b44      	ldr	r3, [pc, #272]	; (800d4f8 <xPortStartScheduler+0x118>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a44      	ldr	r2, [pc, #272]	; (800d4fc <xPortStartScheduler+0x11c>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d109      	bne.n	800d404 <xPortStartScheduler+0x24>
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	613b      	str	r3, [r7, #16]
 800d402:	e7fe      	b.n	800d402 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d404:	4b3c      	ldr	r3, [pc, #240]	; (800d4f8 <xPortStartScheduler+0x118>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a3d      	ldr	r2, [pc, #244]	; (800d500 <xPortStartScheduler+0x120>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d109      	bne.n	800d422 <xPortStartScheduler+0x42>
 800d40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d412:	f383 8811 	msr	BASEPRI, r3
 800d416:	f3bf 8f6f 	isb	sy
 800d41a:	f3bf 8f4f 	dsb	sy
 800d41e:	60fb      	str	r3, [r7, #12]
 800d420:	e7fe      	b.n	800d420 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d422:	4b38      	ldr	r3, [pc, #224]	; (800d504 <xPortStartScheduler+0x124>)
 800d424:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	22ff      	movs	r2, #255	; 0xff
 800d432:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d43c:	78fb      	ldrb	r3, [r7, #3]
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d444:	b2da      	uxtb	r2, r3
 800d446:	4b30      	ldr	r3, [pc, #192]	; (800d508 <xPortStartScheduler+0x128>)
 800d448:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d44a:	4b30      	ldr	r3, [pc, #192]	; (800d50c <xPortStartScheduler+0x12c>)
 800d44c:	2207      	movs	r2, #7
 800d44e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d450:	e009      	b.n	800d466 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d452:	4b2e      	ldr	r3, [pc, #184]	; (800d50c <xPortStartScheduler+0x12c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3b01      	subs	r3, #1
 800d458:	4a2c      	ldr	r2, [pc, #176]	; (800d50c <xPortStartScheduler+0x12c>)
 800d45a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d45c:	78fb      	ldrb	r3, [r7, #3]
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	b2db      	uxtb	r3, r3
 800d464:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d466:	78fb      	ldrb	r3, [r7, #3]
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d46e:	2b80      	cmp	r3, #128	; 0x80
 800d470:	d0ef      	beq.n	800d452 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d472:	4b26      	ldr	r3, [pc, #152]	; (800d50c <xPortStartScheduler+0x12c>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f1c3 0307 	rsb	r3, r3, #7
 800d47a:	2b04      	cmp	r3, #4
 800d47c:	d009      	beq.n	800d492 <xPortStartScheduler+0xb2>
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	60bb      	str	r3, [r7, #8]
 800d490:	e7fe      	b.n	800d490 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d492:	4b1e      	ldr	r3, [pc, #120]	; (800d50c <xPortStartScheduler+0x12c>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	021b      	lsls	r3, r3, #8
 800d498:	4a1c      	ldr	r2, [pc, #112]	; (800d50c <xPortStartScheduler+0x12c>)
 800d49a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d49c:	4b1b      	ldr	r3, [pc, #108]	; (800d50c <xPortStartScheduler+0x12c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4a4:	4a19      	ldr	r2, [pc, #100]	; (800d50c <xPortStartScheduler+0x12c>)
 800d4a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4b0:	4b17      	ldr	r3, [pc, #92]	; (800d510 <xPortStartScheduler+0x130>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a16      	ldr	r2, [pc, #88]	; (800d510 <xPortStartScheduler+0x130>)
 800d4b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d4ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d4bc:	4b14      	ldr	r3, [pc, #80]	; (800d510 <xPortStartScheduler+0x130>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a13      	ldr	r2, [pc, #76]	; (800d510 <xPortStartScheduler+0x130>)
 800d4c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d4c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d4c8:	f000 f8d6 	bl	800d678 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d4cc:	4b11      	ldr	r3, [pc, #68]	; (800d514 <xPortStartScheduler+0x134>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d4d2:	f000 f8f5 	bl	800d6c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4d6:	4b10      	ldr	r3, [pc, #64]	; (800d518 <xPortStartScheduler+0x138>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a0f      	ldr	r2, [pc, #60]	; (800d518 <xPortStartScheduler+0x138>)
 800d4dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d4e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d4e2:	f7ff ff69 	bl	800d3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d4e6:	f7ff fa79 	bl	800c9dc <vTaskSwitchContext>
	prvTaskExitError();
 800d4ea:	f7ff ff25 	bl	800d338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	e000ed00 	.word	0xe000ed00
 800d4fc:	410fc271 	.word	0x410fc271
 800d500:	410fc270 	.word	0x410fc270
 800d504:	e000e400 	.word	0xe000e400
 800d508:	20000594 	.word	0x20000594
 800d50c:	20000598 	.word	0x20000598
 800d510:	e000ed20 	.word	0xe000ed20
 800d514:	20000118 	.word	0x20000118
 800d518:	e000ef34 	.word	0xe000ef34

0800d51c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d534:	4b0e      	ldr	r3, [pc, #56]	; (800d570 <vPortEnterCritical+0x54>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3301      	adds	r3, #1
 800d53a:	4a0d      	ldr	r2, [pc, #52]	; (800d570 <vPortEnterCritical+0x54>)
 800d53c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d53e:	4b0c      	ldr	r3, [pc, #48]	; (800d570 <vPortEnterCritical+0x54>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d10e      	bne.n	800d564 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d546:	4b0b      	ldr	r3, [pc, #44]	; (800d574 <vPortEnterCritical+0x58>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d009      	beq.n	800d564 <vPortEnterCritical+0x48>
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	603b      	str	r3, [r7, #0]
 800d562:	e7fe      	b.n	800d562 <vPortEnterCritical+0x46>
	}
}
 800d564:	bf00      	nop
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr
 800d570:	20000118 	.word	0x20000118
 800d574:	e000ed04 	.word	0xe000ed04

0800d578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d57e:	4b11      	ldr	r3, [pc, #68]	; (800d5c4 <vPortExitCritical+0x4c>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d109      	bne.n	800d59a <vPortExitCritical+0x22>
 800d586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58a:	f383 8811 	msr	BASEPRI, r3
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f3bf 8f4f 	dsb	sy
 800d596:	607b      	str	r3, [r7, #4]
 800d598:	e7fe      	b.n	800d598 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d59a:	4b0a      	ldr	r3, [pc, #40]	; (800d5c4 <vPortExitCritical+0x4c>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	4a08      	ldr	r2, [pc, #32]	; (800d5c4 <vPortExitCritical+0x4c>)
 800d5a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5a4:	4b07      	ldr	r3, [pc, #28]	; (800d5c4 <vPortExitCritical+0x4c>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d104      	bne.n	800d5b6 <vPortExitCritical+0x3e>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5b6:	bf00      	nop
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	20000118 	.word	0x20000118
	...

0800d5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5d0:	f3ef 8009 	mrs	r0, PSP
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	4b15      	ldr	r3, [pc, #84]	; (800d630 <pxCurrentTCBConst>)
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	f01e 0f10 	tst.w	lr, #16
 800d5e0:	bf08      	it	eq
 800d5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ea:	6010      	str	r0, [r2, #0]
 800d5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5f4:	f380 8811 	msr	BASEPRI, r0
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f7ff f9ec 	bl	800c9dc <vTaskSwitchContext>
 800d604:	f04f 0000 	mov.w	r0, #0
 800d608:	f380 8811 	msr	BASEPRI, r0
 800d60c:	bc09      	pop	{r0, r3}
 800d60e:	6819      	ldr	r1, [r3, #0]
 800d610:	6808      	ldr	r0, [r1, #0]
 800d612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d616:	f01e 0f10 	tst.w	lr, #16
 800d61a:	bf08      	it	eq
 800d61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d620:	f380 8809 	msr	PSP, r0
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	f3af 8000 	nop.w

0800d630 <pxCurrentTCBConst>:
 800d630:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d634:	bf00      	nop
 800d636:	bf00      	nop

0800d638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d650:	f7ff f908 	bl	800c864 <xTaskIncrementTick>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d65a:	4b06      	ldr	r3, [pc, #24]	; (800d674 <SysTick_Handler+0x3c>)
 800d65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	2300      	movs	r3, #0
 800d664:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d66c:	bf00      	nop
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	e000ed04 	.word	0xe000ed04

0800d678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d678:	b480      	push	{r7}
 800d67a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d67c:	4b0b      	ldr	r3, [pc, #44]	; (800d6ac <vPortSetupTimerInterrupt+0x34>)
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d682:	4b0b      	ldr	r3, [pc, #44]	; (800d6b0 <vPortSetupTimerInterrupt+0x38>)
 800d684:	2200      	movs	r2, #0
 800d686:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d688:	4b0a      	ldr	r3, [pc, #40]	; (800d6b4 <vPortSetupTimerInterrupt+0x3c>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a0a      	ldr	r2, [pc, #40]	; (800d6b8 <vPortSetupTimerInterrupt+0x40>)
 800d68e:	fba2 2303 	umull	r2, r3, r2, r3
 800d692:	099b      	lsrs	r3, r3, #6
 800d694:	4a09      	ldr	r2, [pc, #36]	; (800d6bc <vPortSetupTimerInterrupt+0x44>)
 800d696:	3b01      	subs	r3, #1
 800d698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d69a:	4b04      	ldr	r3, [pc, #16]	; (800d6ac <vPortSetupTimerInterrupt+0x34>)
 800d69c:	2207      	movs	r2, #7
 800d69e:	601a      	str	r2, [r3, #0]
}
 800d6a0:	bf00      	nop
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	e000e010 	.word	0xe000e010
 800d6b0:	e000e018 	.word	0xe000e018
 800d6b4:	20000000 	.word	0x20000000
 800d6b8:	10624dd3 	.word	0x10624dd3
 800d6bc:	e000e014 	.word	0xe000e014

0800d6c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d6c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d6d0 <vPortEnableVFP+0x10>
 800d6c4:	6801      	ldr	r1, [r0, #0]
 800d6c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d6ca:	6001      	str	r1, [r0, #0]
 800d6cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d6ce:	bf00      	nop
 800d6d0:	e000ed88 	.word	0xe000ed88

0800d6d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6da:	f3ef 8305 	mrs	r3, IPSR
 800d6de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2b0f      	cmp	r3, #15
 800d6e4:	d913      	bls.n	800d70e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6e6:	4a16      	ldr	r2, [pc, #88]	; (800d740 <vPortValidateInterruptPriority+0x6c>)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6f0:	4b14      	ldr	r3, [pc, #80]	; (800d744 <vPortValidateInterruptPriority+0x70>)
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	7afa      	ldrb	r2, [r7, #11]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d209      	bcs.n	800d70e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	607b      	str	r3, [r7, #4]
 800d70c:	e7fe      	b.n	800d70c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d70e:	4b0e      	ldr	r3, [pc, #56]	; (800d748 <vPortValidateInterruptPriority+0x74>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d716:	4b0d      	ldr	r3, [pc, #52]	; (800d74c <vPortValidateInterruptPriority+0x78>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d909      	bls.n	800d732 <vPortValidateInterruptPriority+0x5e>
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	603b      	str	r3, [r7, #0]
 800d730:	e7fe      	b.n	800d730 <vPortValidateInterruptPriority+0x5c>
	}
 800d732:	bf00      	nop
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	e000e3f0 	.word	0xe000e3f0
 800d744:	20000594 	.word	0x20000594
 800d748:	e000ed0c 	.word	0xe000ed0c
 800d74c:	20000598 	.word	0x20000598

0800d750 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08a      	sub	sp, #40	; 0x28
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d758:	2300      	movs	r3, #0
 800d75a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d75c:	f7fe ffb6 	bl	800c6cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d760:	4b57      	ldr	r3, [pc, #348]	; (800d8c0 <pvPortMalloc+0x170>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d768:	f000 f90c 	bl	800d984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d76c:	4b55      	ldr	r3, [pc, #340]	; (800d8c4 <pvPortMalloc+0x174>)
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4013      	ands	r3, r2
 800d774:	2b00      	cmp	r3, #0
 800d776:	f040 808c 	bne.w	800d892 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d01c      	beq.n	800d7ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d780:	2208      	movs	r2, #8
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4413      	add	r3, r2
 800d786:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f003 0307 	and.w	r3, r3, #7
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d013      	beq.n	800d7ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f023 0307 	bic.w	r3, r3, #7
 800d798:	3308      	adds	r3, #8
 800d79a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f003 0307 	and.w	r3, r3, #7
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d009      	beq.n	800d7ba <pvPortMalloc+0x6a>
 800d7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	617b      	str	r3, [r7, #20]
 800d7b8:	e7fe      	b.n	800d7b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d068      	beq.n	800d892 <pvPortMalloc+0x142>
 800d7c0:	4b41      	ldr	r3, [pc, #260]	; (800d8c8 <pvPortMalloc+0x178>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d863      	bhi.n	800d892 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7ca:	4b40      	ldr	r3, [pc, #256]	; (800d8cc <pvPortMalloc+0x17c>)
 800d7cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7ce:	4b3f      	ldr	r3, [pc, #252]	; (800d8cc <pvPortMalloc+0x17c>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7d4:	e004      	b.n	800d7e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d903      	bls.n	800d7f2 <pvPortMalloc+0xa2>
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1f1      	bne.n	800d7d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7f2:	4b33      	ldr	r3, [pc, #204]	; (800d8c0 <pvPortMalloc+0x170>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d04a      	beq.n	800d892 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2208      	movs	r2, #8
 800d802:	4413      	add	r3, r2
 800d804:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	1ad2      	subs	r2, r2, r3
 800d816:	2308      	movs	r3, #8
 800d818:	005b      	lsls	r3, r3, #1
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d91e      	bls.n	800d85c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4413      	add	r3, r2
 800d824:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	f003 0307 	and.w	r3, r3, #7
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d009      	beq.n	800d844 <pvPortMalloc+0xf4>
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	613b      	str	r3, [r7, #16]
 800d842:	e7fe      	b.n	800d842 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	1ad2      	subs	r2, r2, r3
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d856:	69b8      	ldr	r0, [r7, #24]
 800d858:	f000 f8f6 	bl	800da48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d85c:	4b1a      	ldr	r3, [pc, #104]	; (800d8c8 <pvPortMalloc+0x178>)
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	4a18      	ldr	r2, [pc, #96]	; (800d8c8 <pvPortMalloc+0x178>)
 800d868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d86a:	4b17      	ldr	r3, [pc, #92]	; (800d8c8 <pvPortMalloc+0x178>)
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	4b18      	ldr	r3, [pc, #96]	; (800d8d0 <pvPortMalloc+0x180>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	429a      	cmp	r2, r3
 800d874:	d203      	bcs.n	800d87e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d876:	4b14      	ldr	r3, [pc, #80]	; (800d8c8 <pvPortMalloc+0x178>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a15      	ldr	r2, [pc, #84]	; (800d8d0 <pvPortMalloc+0x180>)
 800d87c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	4b10      	ldr	r3, [pc, #64]	; (800d8c4 <pvPortMalloc+0x174>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	431a      	orrs	r2, r3
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	2200      	movs	r2, #0
 800d890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d892:	f7fe ff29 	bl	800c6e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d009      	beq.n	800d8b4 <pvPortMalloc+0x164>
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	60fb      	str	r3, [r7, #12]
 800d8b2:	e7fe      	b.n	800d8b2 <pvPortMalloc+0x162>
	return pvReturn;
 800d8b4:	69fb      	ldr	r3, [r7, #28]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3728      	adds	r7, #40	; 0x28
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	200041a4 	.word	0x200041a4
 800d8c4:	200041b0 	.word	0x200041b0
 800d8c8:	200041a8 	.word	0x200041a8
 800d8cc:	2000419c 	.word	0x2000419c
 800d8d0:	200041ac 	.word	0x200041ac

0800d8d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d046      	beq.n	800d974 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8e6:	2308      	movs	r3, #8
 800d8e8:	425b      	negs	r3, r3
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	685a      	ldr	r2, [r3, #4]
 800d8f8:	4b20      	ldr	r3, [pc, #128]	; (800d97c <vPortFree+0xa8>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d109      	bne.n	800d916 <vPortFree+0x42>
 800d902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	e7fe      	b.n	800d914 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d009      	beq.n	800d932 <vPortFree+0x5e>
 800d91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	60bb      	str	r3, [r7, #8]
 800d930:	e7fe      	b.n	800d930 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	685a      	ldr	r2, [r3, #4]
 800d936:	4b11      	ldr	r3, [pc, #68]	; (800d97c <vPortFree+0xa8>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4013      	ands	r3, r2
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d019      	beq.n	800d974 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d115      	bne.n	800d974 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	685a      	ldr	r2, [r3, #4]
 800d94c:	4b0b      	ldr	r3, [pc, #44]	; (800d97c <vPortFree+0xa8>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	43db      	mvns	r3, r3
 800d952:	401a      	ands	r2, r3
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d958:	f7fe feb8 	bl	800c6cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	685a      	ldr	r2, [r3, #4]
 800d960:	4b07      	ldr	r3, [pc, #28]	; (800d980 <vPortFree+0xac>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4413      	add	r3, r2
 800d966:	4a06      	ldr	r2, [pc, #24]	; (800d980 <vPortFree+0xac>)
 800d968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d96a:	6938      	ldr	r0, [r7, #16]
 800d96c:	f000 f86c 	bl	800da48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d970:	f7fe feba 	bl	800c6e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d974:	bf00      	nop
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	200041b0 	.word	0x200041b0
 800d980:	200041a8 	.word	0x200041a8

0800d984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d98a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d98e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d990:	4b27      	ldr	r3, [pc, #156]	; (800da30 <prvHeapInit+0xac>)
 800d992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f003 0307 	and.w	r3, r3, #7
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00c      	beq.n	800d9b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	3307      	adds	r3, #7
 800d9a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f023 0307 	bic.w	r3, r3, #7
 800d9aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	1ad3      	subs	r3, r2, r3
 800d9b2:	4a1f      	ldr	r2, [pc, #124]	; (800da30 <prvHeapInit+0xac>)
 800d9b4:	4413      	add	r3, r2
 800d9b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9bc:	4a1d      	ldr	r2, [pc, #116]	; (800da34 <prvHeapInit+0xb0>)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9c2:	4b1c      	ldr	r3, [pc, #112]	; (800da34 <prvHeapInit+0xb0>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9d0:	2208      	movs	r2, #8
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	1a9b      	subs	r3, r3, r2
 800d9d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f023 0307 	bic.w	r3, r3, #7
 800d9de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	4a15      	ldr	r2, [pc, #84]	; (800da38 <prvHeapInit+0xb4>)
 800d9e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9e6:	4b14      	ldr	r3, [pc, #80]	; (800da38 <prvHeapInit+0xb4>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9ee:	4b12      	ldr	r3, [pc, #72]	; (800da38 <prvHeapInit+0xb4>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da04:	4b0c      	ldr	r3, [pc, #48]	; (800da38 <prvHeapInit+0xb4>)
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	4a0a      	ldr	r2, [pc, #40]	; (800da3c <prvHeapInit+0xb8>)
 800da12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	4a09      	ldr	r2, [pc, #36]	; (800da40 <prvHeapInit+0xbc>)
 800da1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da1c:	4b09      	ldr	r3, [pc, #36]	; (800da44 <prvHeapInit+0xc0>)
 800da1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da22:	601a      	str	r2, [r3, #0]
}
 800da24:	bf00      	nop
 800da26:	3714      	adds	r7, #20
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr
 800da30:	2000059c 	.word	0x2000059c
 800da34:	2000419c 	.word	0x2000419c
 800da38:	200041a4 	.word	0x200041a4
 800da3c:	200041ac 	.word	0x200041ac
 800da40:	200041a8 	.word	0x200041a8
 800da44:	200041b0 	.word	0x200041b0

0800da48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da50:	4b28      	ldr	r3, [pc, #160]	; (800daf4 <prvInsertBlockIntoFreeList+0xac>)
 800da52:	60fb      	str	r3, [r7, #12]
 800da54:	e002      	b.n	800da5c <prvInsertBlockIntoFreeList+0x14>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	429a      	cmp	r2, r3
 800da64:	d8f7      	bhi.n	800da56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	4413      	add	r3, r2
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	429a      	cmp	r2, r3
 800da76:	d108      	bne.n	800da8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	441a      	add	r2, r3
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	441a      	add	r2, r3
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d118      	bne.n	800dad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	4b15      	ldr	r3, [pc, #84]	; (800daf8 <prvInsertBlockIntoFreeList+0xb0>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d00d      	beq.n	800dac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	441a      	add	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	601a      	str	r2, [r3, #0]
 800dac4:	e008      	b.n	800dad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dac6:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	601a      	str	r2, [r3, #0]
 800dace:	e003      	b.n	800dad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d002      	beq.n	800dae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dae6:	bf00      	nop
 800dae8:	3714      	adds	r7, #20
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	2000419c 	.word	0x2000419c
 800daf8:	200041a4 	.word	0x200041a4

0800dafc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800db04:	4b29      	ldr	r3, [pc, #164]	; (800dbac <tcpip_thread+0xb0>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d005      	beq.n	800db18 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800db0c:	4b27      	ldr	r3, [pc, #156]	; (800dbac <tcpip_thread+0xb0>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a27      	ldr	r2, [pc, #156]	; (800dbb0 <tcpip_thread+0xb4>)
 800db12:	6812      	ldr	r2, [r2, #0]
 800db14:	4610      	mov	r0, r2
 800db16:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800db18:	4826      	ldr	r0, [pc, #152]	; (800dbb4 <tcpip_thread+0xb8>)
 800db1a:	f00a ffab 	bl	8018a74 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800db1e:	4825      	ldr	r0, [pc, #148]	; (800dbb4 <tcpip_thread+0xb8>)
 800db20:	f00a ffb7 	bl	8018a92 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800db24:	f107 030c 	add.w	r3, r7, #12
 800db28:	4619      	mov	r1, r3
 800db2a:	4823      	ldr	r0, [pc, #140]	; (800dbb8 <tcpip_thread+0xbc>)
 800db2c:	f006 fa44 	bl	8013fb8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800db30:	4820      	ldr	r0, [pc, #128]	; (800dbb4 <tcpip_thread+0xb8>)
 800db32:	f00a ff9f 	bl	8018a74 <sys_mutex_lock>
    if (msg == NULL) {
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d106      	bne.n	800db4a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800db3c:	4b1f      	ldr	r3, [pc, #124]	; (800dbbc <tcpip_thread+0xc0>)
 800db3e:	2269      	movs	r2, #105	; 0x69
 800db40:	491f      	ldr	r1, [pc, #124]	; (800dbc0 <tcpip_thread+0xc4>)
 800db42:	4820      	ldr	r0, [pc, #128]	; (800dbc4 <tcpip_thread+0xc8>)
 800db44:	f00b fdce 	bl	80196e4 <iprintf>
      continue;
 800db48:	e02f      	b.n	800dbaa <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b03      	cmp	r3, #3
 800db50:	d011      	beq.n	800db76 <tcpip_thread+0x7a>
 800db52:	2b04      	cmp	r3, #4
 800db54:	d01b      	beq.n	800db8e <tcpip_thread+0x92>
 800db56:	2b02      	cmp	r3, #2
 800db58:	d120      	bne.n	800db9c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	6850      	ldr	r0, [r2, #4]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	6892      	ldr	r2, [r2, #8]
 800db66:	4611      	mov	r1, r2
 800db68:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	4619      	mov	r1, r3
 800db6e:	2009      	movs	r0, #9
 800db70:	f000 fd64 	bl	800e63c <memp_free>
      break;
 800db74:	e019      	b.n	800dbaa <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	6892      	ldr	r2, [r2, #8]
 800db7e:	4610      	mov	r0, r2
 800db80:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	4619      	mov	r1, r3
 800db86:	2008      	movs	r0, #8
 800db88:	f000 fd58 	bl	800e63c <memp_free>
      break;
 800db8c:	e00d      	b.n	800dbaa <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	6892      	ldr	r2, [r2, #8]
 800db96:	4610      	mov	r0, r2
 800db98:	4798      	blx	r3
      break;
 800db9a:	e006      	b.n	800dbaa <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800db9c:	4b07      	ldr	r3, [pc, #28]	; (800dbbc <tcpip_thread+0xc0>)
 800db9e:	229b      	movs	r2, #155	; 0x9b
 800dba0:	4907      	ldr	r1, [pc, #28]	; (800dbc0 <tcpip_thread+0xc4>)
 800dba2:	4808      	ldr	r0, [pc, #32]	; (800dbc4 <tcpip_thread+0xc8>)
 800dba4:	f00b fd9e 	bl	80196e4 <iprintf>
      break;
 800dba8:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800dbaa:	e7b8      	b.n	800db1e <tcpip_thread+0x22>
 800dbac:	200041b4 	.word	0x200041b4
 800dbb0:	200041b8 	.word	0x200041b8
 800dbb4:	20007604 	.word	0x20007604
 800dbb8:	200041bc 	.word	0x200041bc
 800dbbc:	0801a908 	.word	0x0801a908
 800dbc0:	0801a938 	.word	0x0801a938
 800dbc4:	0801a958 	.word	0x0801a958

0800dbc8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800dbd4:	481a      	ldr	r0, [pc, #104]	; (800dc40 <tcpip_inpkt+0x78>)
 800dbd6:	f00a ff11 	bl	80189fc <sys_mbox_valid>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d105      	bne.n	800dbec <tcpip_inpkt+0x24>
 800dbe0:	4b18      	ldr	r3, [pc, #96]	; (800dc44 <tcpip_inpkt+0x7c>)
 800dbe2:	22b5      	movs	r2, #181	; 0xb5
 800dbe4:	4918      	ldr	r1, [pc, #96]	; (800dc48 <tcpip_inpkt+0x80>)
 800dbe6:	4819      	ldr	r0, [pc, #100]	; (800dc4c <tcpip_inpkt+0x84>)
 800dbe8:	f00b fd7c 	bl	80196e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dbec:	2009      	movs	r0, #9
 800dbee:	f000 fcd3 	bl	800e598 <memp_malloc>
 800dbf2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d102      	bne.n	800dc00 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dbfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbfe:	e01a      	b.n	800dc36 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	2202      	movs	r2, #2
 800dc04:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	68ba      	ldr	r2, [r7, #8]
 800dc10:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800dc18:	6979      	ldr	r1, [r7, #20]
 800dc1a:	4809      	ldr	r0, [pc, #36]	; (800dc40 <tcpip_inpkt+0x78>)
 800dc1c:	f00a fe95 	bl	801894a <sys_mbox_trypost>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d006      	beq.n	800dc34 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dc26:	6979      	ldr	r1, [r7, #20]
 800dc28:	2009      	movs	r0, #9
 800dc2a:	f000 fd07 	bl	800e63c <memp_free>
    return ERR_MEM;
 800dc2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc32:	e000      	b.n	800dc36 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dc34:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	200041bc 	.word	0x200041bc
 800dc44:	0801a908 	.word	0x0801a908
 800dc48:	0801a980 	.word	0x0801a980
 800dc4c:	0801a958 	.word	0x0801a958

0800dc50 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc60:	f003 0318 	and.w	r3, r3, #24
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d006      	beq.n	800dc76 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800dc68:	4a08      	ldr	r2, [pc, #32]	; (800dc8c <tcpip_input+0x3c>)
 800dc6a:	6839      	ldr	r1, [r7, #0]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7ff ffab 	bl	800dbc8 <tcpip_inpkt>
 800dc72:	4603      	mov	r3, r0
 800dc74:	e005      	b.n	800dc82 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800dc76:	4a06      	ldr	r2, [pc, #24]	; (800dc90 <tcpip_input+0x40>)
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7ff ffa4 	bl	800dbc8 <tcpip_inpkt>
 800dc80:	4603      	mov	r3, r0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	08018725 	.word	0x08018725
 800dc90:	080176ad 	.word	0x080176ad

0800dc94 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800dca2:	481d      	ldr	r0, [pc, #116]	; (800dd18 <tcpip_callback_with_block+0x84>)
 800dca4:	f00a feaa 	bl	80189fc <sys_mbox_valid>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d105      	bne.n	800dcba <tcpip_callback_with_block+0x26>
 800dcae:	4b1b      	ldr	r3, [pc, #108]	; (800dd1c <tcpip_callback_with_block+0x88>)
 800dcb0:	22ee      	movs	r2, #238	; 0xee
 800dcb2:	491b      	ldr	r1, [pc, #108]	; (800dd20 <tcpip_callback_with_block+0x8c>)
 800dcb4:	481b      	ldr	r0, [pc, #108]	; (800dd24 <tcpip_callback_with_block+0x90>)
 800dcb6:	f00b fd15 	bl	80196e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800dcba:	2008      	movs	r0, #8
 800dcbc:	f000 fc6c 	bl	800e598 <memp_malloc>
 800dcc0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d102      	bne.n	800dcce <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800dcc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dccc:	e01f      	b.n	800dd0e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	2203      	movs	r2, #3
 800dcd2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	609a      	str	r2, [r3, #8]
  if (block) {
 800dce0:	79fb      	ldrb	r3, [r7, #7]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d004      	beq.n	800dcf0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800dce6:	6979      	ldr	r1, [r7, #20]
 800dce8:	480b      	ldr	r0, [pc, #44]	; (800dd18 <tcpip_callback_with_block+0x84>)
 800dcea:	f00a fe19 	bl	8018920 <sys_mbox_post>
 800dcee:	e00d      	b.n	800dd0c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800dcf0:	6979      	ldr	r1, [r7, #20]
 800dcf2:	4809      	ldr	r0, [pc, #36]	; (800dd18 <tcpip_callback_with_block+0x84>)
 800dcf4:	f00a fe29 	bl	801894a <sys_mbox_trypost>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d006      	beq.n	800dd0c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800dcfe:	6979      	ldr	r1, [r7, #20]
 800dd00:	2008      	movs	r0, #8
 800dd02:	f000 fc9b 	bl	800e63c <memp_free>
      return ERR_MEM;
 800dd06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd0a:	e000      	b.n	800dd0e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	200041bc 	.word	0x200041bc
 800dd1c:	0801a908 	.word	0x0801a908
 800dd20:	0801a980 	.word	0x0801a980
 800dd24:	0801a958 	.word	0x0801a958

0800dd28 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  lwip_init();
 800dd32:	f000 f86a 	bl	800de0a <lwip_init>

  tcpip_init_done = initfunc;
 800dd36:	4a17      	ldr	r2, [pc, #92]	; (800dd94 <tcpip_init+0x6c>)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800dd3c:	4a16      	ldr	r2, [pc, #88]	; (800dd98 <tcpip_init+0x70>)
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800dd42:	2106      	movs	r1, #6
 800dd44:	4815      	ldr	r0, [pc, #84]	; (800dd9c <tcpip_init+0x74>)
 800dd46:	f00a fdc9 	bl	80188dc <sys_mbox_new>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d006      	beq.n	800dd5e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800dd50:	4b13      	ldr	r3, [pc, #76]	; (800dda0 <tcpip_init+0x78>)
 800dd52:	f240 12d5 	movw	r2, #469	; 0x1d5
 800dd56:	4913      	ldr	r1, [pc, #76]	; (800dda4 <tcpip_init+0x7c>)
 800dd58:	4813      	ldr	r0, [pc, #76]	; (800dda8 <tcpip_init+0x80>)
 800dd5a:	f00b fcc3 	bl	80196e4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800dd5e:	4813      	ldr	r0, [pc, #76]	; (800ddac <tcpip_init+0x84>)
 800dd60:	f00a fe6c 	bl	8018a3c <sys_mutex_new>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d006      	beq.n	800dd78 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800dd6a:	4b0d      	ldr	r3, [pc, #52]	; (800dda0 <tcpip_init+0x78>)
 800dd6c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800dd70:	490f      	ldr	r1, [pc, #60]	; (800ddb0 <tcpip_init+0x88>)
 800dd72:	480d      	ldr	r0, [pc, #52]	; (800dda8 <tcpip_init+0x80>)
 800dd74:	f00b fcb6 	bl	80196e4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800dd78:	2303      	movs	r3, #3
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd80:	2200      	movs	r2, #0
 800dd82:	490c      	ldr	r1, [pc, #48]	; (800ddb4 <tcpip_init+0x8c>)
 800dd84:	480c      	ldr	r0, [pc, #48]	; (800ddb8 <tcpip_init+0x90>)
 800dd86:	f00a fe91 	bl	8018aac <sys_thread_new>
}
 800dd8a:	bf00      	nop
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	200041b4 	.word	0x200041b4
 800dd98:	200041b8 	.word	0x200041b8
 800dd9c:	200041bc 	.word	0x200041bc
 800dda0:	0801a908 	.word	0x0801a908
 800dda4:	0801a990 	.word	0x0801a990
 800dda8:	0801a958 	.word	0x0801a958
 800ddac:	20007604 	.word	0x20007604
 800ddb0:	0801a9b4 	.word	0x0801a9b4
 800ddb4:	0800dafd 	.word	0x0800dafd
 800ddb8:	0801a9d8 	.word	0x0801a9d8

0800ddbc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800ddc6:	88fb      	ldrh	r3, [r7, #6]
 800ddc8:	ba5b      	rev16	r3, r3
 800ddca:	b29b      	uxth	r3, r3
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	061a      	lsls	r2, r3, #24
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	021b      	lsls	r3, r3, #8
 800dde8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddec:	431a      	orrs	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	0a1b      	lsrs	r3, r3, #8
 800ddf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	0e1b      	lsrs	r3, r3, #24
 800ddfc:	4313      	orrs	r3, r2
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr

0800de0a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b082      	sub	sp, #8
 800de0e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800de14:	f00a fe04 	bl	8018a20 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800de18:	f000 f8a6 	bl	800df68 <mem_init>
  memp_init();
 800de1c:	f000 fb70 	bl	800e500 <memp_init>
  pbuf_init();
  netif_init();
 800de20:	f000 fc36 	bl	800e690 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800de24:	f006 f8ee 	bl	8014004 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800de28:	f001 fbf0 	bl	800f60c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800de2c:	f005 ff80 	bl	8013d30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800de40:	4b40      	ldr	r3, [pc, #256]	; (800df44 <plug_holes+0x10c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	429a      	cmp	r2, r3
 800de48:	d206      	bcs.n	800de58 <plug_holes+0x20>
 800de4a:	4b3f      	ldr	r3, [pc, #252]	; (800df48 <plug_holes+0x110>)
 800de4c:	f240 125d 	movw	r2, #349	; 0x15d
 800de50:	493e      	ldr	r1, [pc, #248]	; (800df4c <plug_holes+0x114>)
 800de52:	483f      	ldr	r0, [pc, #252]	; (800df50 <plug_holes+0x118>)
 800de54:	f00b fc46 	bl	80196e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800de58:	4b3e      	ldr	r3, [pc, #248]	; (800df54 <plug_holes+0x11c>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d306      	bcc.n	800de70 <plug_holes+0x38>
 800de62:	4b39      	ldr	r3, [pc, #228]	; (800df48 <plug_holes+0x110>)
 800de64:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800de68:	493b      	ldr	r1, [pc, #236]	; (800df58 <plug_holes+0x120>)
 800de6a:	4839      	ldr	r0, [pc, #228]	; (800df50 <plug_holes+0x118>)
 800de6c:	f00b fc3a 	bl	80196e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	791b      	ldrb	r3, [r3, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d006      	beq.n	800de86 <plug_holes+0x4e>
 800de78:	4b33      	ldr	r3, [pc, #204]	; (800df48 <plug_holes+0x110>)
 800de7a:	f240 125f 	movw	r2, #351	; 0x15f
 800de7e:	4937      	ldr	r1, [pc, #220]	; (800df5c <plug_holes+0x124>)
 800de80:	4833      	ldr	r0, [pc, #204]	; (800df50 <plug_holes+0x118>)
 800de82:	f00b fc2f 	bl	80196e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800de8e:	d906      	bls.n	800de9e <plug_holes+0x66>
 800de90:	4b2d      	ldr	r3, [pc, #180]	; (800df48 <plug_holes+0x110>)
 800de92:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800de96:	4932      	ldr	r1, [pc, #200]	; (800df60 <plug_holes+0x128>)
 800de98:	482d      	ldr	r0, [pc, #180]	; (800df50 <plug_holes+0x118>)
 800de9a:	f00b fc23 	bl	80196e4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800de9e:	4b29      	ldr	r3, [pc, #164]	; (800df44 <plug_holes+0x10c>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	8812      	ldrh	r2, [r2, #0]
 800dea6:	4413      	add	r3, r2
 800dea8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d01f      	beq.n	800def2 <plug_holes+0xba>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	791b      	ldrb	r3, [r3, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d11b      	bne.n	800def2 <plug_holes+0xba>
 800deba:	4b26      	ldr	r3, [pc, #152]	; (800df54 <plug_holes+0x11c>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d016      	beq.n	800def2 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dec4:	4b27      	ldr	r3, [pc, #156]	; (800df64 <plug_holes+0x12c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	429a      	cmp	r2, r3
 800decc:	d102      	bne.n	800ded4 <plug_holes+0x9c>
      lfree = mem;
 800dece:	4a25      	ldr	r2, [pc, #148]	; (800df64 <plug_holes+0x12c>)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	881a      	ldrh	r2, [r3, #0]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a19      	ldr	r2, [pc, #100]	; (800df44 <plug_holes+0x10c>)
 800dee0:	6812      	ldr	r2, [r2, #0]
 800dee2:	1a99      	subs	r1, r3, r2
 800dee4:	4b17      	ldr	r3, [pc, #92]	; (800df44 <plug_holes+0x10c>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	8812      	ldrh	r2, [r2, #0]
 800deec:	4413      	add	r3, r2
 800deee:	b28a      	uxth	r2, r1
 800def0:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800def2:	4b14      	ldr	r3, [pc, #80]	; (800df44 <plug_holes+0x10c>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	8852      	ldrh	r2, [r2, #2]
 800defa:	4413      	add	r3, r2
 800defc:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	429a      	cmp	r2, r3
 800df04:	d01a      	beq.n	800df3c <plug_holes+0x104>
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	791b      	ldrb	r3, [r3, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d116      	bne.n	800df3c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800df0e:	4b15      	ldr	r3, [pc, #84]	; (800df64 <plug_holes+0x12c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	429a      	cmp	r2, r3
 800df16:	d102      	bne.n	800df1e <plug_holes+0xe6>
      lfree = pmem;
 800df18:	4a12      	ldr	r2, [pc, #72]	; (800df64 <plug_holes+0x12c>)
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	881a      	ldrh	r2, [r3, #0]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	4a06      	ldr	r2, [pc, #24]	; (800df44 <plug_holes+0x10c>)
 800df2a:	6812      	ldr	r2, [r2, #0]
 800df2c:	1a99      	subs	r1, r3, r2
 800df2e:	4b05      	ldr	r3, [pc, #20]	; (800df44 <plug_holes+0x10c>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	8812      	ldrh	r2, [r2, #0]
 800df36:	4413      	add	r3, r2
 800df38:	b28a      	uxth	r2, r1
 800df3a:	805a      	strh	r2, [r3, #2]
  }
}
 800df3c:	bf00      	nop
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	200041c0 	.word	0x200041c0
 800df48:	0801a9e8 	.word	0x0801a9e8
 800df4c:	0801aa18 	.word	0x0801aa18
 800df50:	0801aa30 	.word	0x0801aa30
 800df54:	200041c4 	.word	0x200041c4
 800df58:	0801aa58 	.word	0x0801aa58
 800df5c:	0801aa74 	.word	0x0801aa74
 800df60:	0801aa90 	.word	0x0801aa90
 800df64:	200041c8 	.word	0x200041c8

0800df68 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800df6e:	4b1e      	ldr	r3, [pc, #120]	; (800dfe8 <mem_init+0x80>)
 800df70:	3303      	adds	r3, #3
 800df72:	f023 0303 	bic.w	r3, r3, #3
 800df76:	461a      	mov	r2, r3
 800df78:	4b1c      	ldr	r3, [pc, #112]	; (800dfec <mem_init+0x84>)
 800df7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800df7c:	4b1b      	ldr	r3, [pc, #108]	; (800dfec <mem_init+0x84>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800df88:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800df96:	4b15      	ldr	r3, [pc, #84]	; (800dfec <mem_init+0x84>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800df9e:	4a14      	ldr	r2, [pc, #80]	; (800dff0 <mem_init+0x88>)
 800dfa0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dfa2:	4b13      	ldr	r3, [pc, #76]	; (800dff0 <mem_init+0x88>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dfaa:	4b11      	ldr	r3, [pc, #68]	; (800dff0 <mem_init+0x88>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dfb2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dfb4:	4b0e      	ldr	r3, [pc, #56]	; (800dff0 <mem_init+0x88>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dfbc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dfbe:	4b0b      	ldr	r3, [pc, #44]	; (800dfec <mem_init+0x84>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a0c      	ldr	r2, [pc, #48]	; (800dff4 <mem_init+0x8c>)
 800dfc4:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dfc6:	480c      	ldr	r0, [pc, #48]	; (800dff8 <mem_init+0x90>)
 800dfc8:	f00a fd38 	bl	8018a3c <sys_mutex_new>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d006      	beq.n	800dfe0 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dfd2:	4b0a      	ldr	r3, [pc, #40]	; (800dffc <mem_init+0x94>)
 800dfd4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dfd8:	4909      	ldr	r1, [pc, #36]	; (800e000 <mem_init+0x98>)
 800dfda:	480a      	ldr	r0, [pc, #40]	; (800e004 <mem_init+0x9c>)
 800dfdc:	f00b fb82 	bl	80196e4 <iprintf>
  }
}
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	20007620 	.word	0x20007620
 800dfec:	200041c0 	.word	0x200041c0
 800dff0:	200041c4 	.word	0x200041c4
 800dff4:	200041c8 	.word	0x200041c8
 800dff8:	200041cc 	.word	0x200041cc
 800dffc:	0801a9e8 	.word	0x0801a9e8
 800e000:	0801aabc 	.word	0x0801aabc
 800e004:	0801aa30 	.word	0x0801aa30

0800e008 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d050      	beq.n	800e0b8 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f003 0303 	and.w	r3, r3, #3
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d006      	beq.n	800e02e <mem_free+0x26>
 800e020:	4b27      	ldr	r3, [pc, #156]	; (800e0c0 <mem_free+0xb8>)
 800e022:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800e026:	4927      	ldr	r1, [pc, #156]	; (800e0c4 <mem_free+0xbc>)
 800e028:	4827      	ldr	r0, [pc, #156]	; (800e0c8 <mem_free+0xc0>)
 800e02a:	f00b fb5b 	bl	80196e4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e02e:	4b27      	ldr	r3, [pc, #156]	; (800e0cc <mem_free+0xc4>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	429a      	cmp	r2, r3
 800e036:	d304      	bcc.n	800e042 <mem_free+0x3a>
 800e038:	4b25      	ldr	r3, [pc, #148]	; (800e0d0 <mem_free+0xc8>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d306      	bcc.n	800e050 <mem_free+0x48>
 800e042:	4b1f      	ldr	r3, [pc, #124]	; (800e0c0 <mem_free+0xb8>)
 800e044:	f240 12af 	movw	r2, #431	; 0x1af
 800e048:	4922      	ldr	r1, [pc, #136]	; (800e0d4 <mem_free+0xcc>)
 800e04a:	481f      	ldr	r0, [pc, #124]	; (800e0c8 <mem_free+0xc0>)
 800e04c:	f00b fb4a 	bl	80196e4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e050:	4b1e      	ldr	r3, [pc, #120]	; (800e0cc <mem_free+0xc4>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	429a      	cmp	r2, r3
 800e058:	d304      	bcc.n	800e064 <mem_free+0x5c>
 800e05a:	4b1d      	ldr	r3, [pc, #116]	; (800e0d0 <mem_free+0xc8>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	429a      	cmp	r2, r3
 800e062:	d306      	bcc.n	800e072 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800e064:	f00a fd48 	bl	8018af8 <sys_arch_protect>
 800e068:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800e06a:	68b8      	ldr	r0, [r7, #8]
 800e06c:	f00a fd52 	bl	8018b14 <sys_arch_unprotect>
    return;
 800e070:	e023      	b.n	800e0ba <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e072:	4819      	ldr	r0, [pc, #100]	; (800e0d8 <mem_free+0xd0>)
 800e074:	f00a fcfe 	bl	8018a74 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	3b08      	subs	r3, #8
 800e07c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	791b      	ldrb	r3, [r3, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d106      	bne.n	800e094 <mem_free+0x8c>
 800e086:	4b0e      	ldr	r3, [pc, #56]	; (800e0c0 <mem_free+0xb8>)
 800e088:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800e08c:	4913      	ldr	r1, [pc, #76]	; (800e0dc <mem_free+0xd4>)
 800e08e:	480e      	ldr	r0, [pc, #56]	; (800e0c8 <mem_free+0xc0>)
 800e090:	f00b fb28 	bl	80196e4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e09a:	4b11      	ldr	r3, [pc, #68]	; (800e0e0 <mem_free+0xd8>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d202      	bcs.n	800e0aa <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e0a4:	4a0e      	ldr	r2, [pc, #56]	; (800e0e0 <mem_free+0xd8>)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f7ff fec4 	bl	800de38 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e0b0:	4809      	ldr	r0, [pc, #36]	; (800e0d8 <mem_free+0xd0>)
 800e0b2:	f00a fcee 	bl	8018a92 <sys_mutex_unlock>
 800e0b6:	e000      	b.n	800e0ba <mem_free+0xb2>
    return;
 800e0b8:	bf00      	nop
}
 800e0ba:	3710      	adds	r7, #16
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	0801a9e8 	.word	0x0801a9e8
 800e0c4:	0801aad8 	.word	0x0801aad8
 800e0c8:	0801aa30 	.word	0x0801aa30
 800e0cc:	200041c0 	.word	0x200041c0
 800e0d0:	200041c4 	.word	0x200041c4
 800e0d4:	0801aafc 	.word	0x0801aafc
 800e0d8:	200041cc 	.word	0x200041cc
 800e0dc:	0801ab14 	.word	0x0801ab14
 800e0e0:	200041c8 	.word	0x200041c8

0800e0e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b088      	sub	sp, #32
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800e0f0:	887b      	ldrh	r3, [r7, #2]
 800e0f2:	3303      	adds	r3, #3
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	f023 0303 	bic.w	r3, r3, #3
 800e0fa:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800e0fc:	887b      	ldrh	r3, [r7, #2]
 800e0fe:	2b0b      	cmp	r3, #11
 800e100:	d801      	bhi.n	800e106 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e102:	230c      	movs	r3, #12
 800e104:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800e106:	887b      	ldrh	r3, [r7, #2]
 800e108:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e10c:	d901      	bls.n	800e112 <mem_trim+0x2e>
    return NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	e0bd      	b.n	800e28e <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e112:	4b61      	ldr	r3, [pc, #388]	; (800e298 <mem_trim+0x1b4>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d304      	bcc.n	800e126 <mem_trim+0x42>
 800e11c:	4b5f      	ldr	r3, [pc, #380]	; (800e29c <mem_trim+0x1b8>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	429a      	cmp	r2, r3
 800e124:	d306      	bcc.n	800e134 <mem_trim+0x50>
 800e126:	4b5e      	ldr	r3, [pc, #376]	; (800e2a0 <mem_trim+0x1bc>)
 800e128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e12c:	495d      	ldr	r1, [pc, #372]	; (800e2a4 <mem_trim+0x1c0>)
 800e12e:	485e      	ldr	r0, [pc, #376]	; (800e2a8 <mem_trim+0x1c4>)
 800e130:	f00b fad8 	bl	80196e4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e134:	4b58      	ldr	r3, [pc, #352]	; (800e298 <mem_trim+0x1b4>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d304      	bcc.n	800e148 <mem_trim+0x64>
 800e13e:	4b57      	ldr	r3, [pc, #348]	; (800e29c <mem_trim+0x1b8>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	429a      	cmp	r2, r3
 800e146:	d307      	bcc.n	800e158 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800e148:	f00a fcd6 	bl	8018af8 <sys_arch_protect>
 800e14c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f00a fce0 	bl	8018b14 <sys_arch_unprotect>
    return rmem;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	e09a      	b.n	800e28e <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	3b08      	subs	r3, #8
 800e15c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	4a4d      	ldr	r2, [pc, #308]	; (800e298 <mem_trim+0x1b4>)
 800e162:	6812      	ldr	r2, [r2, #0]
 800e164:	1a9b      	subs	r3, r3, r2
 800e166:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	881a      	ldrh	r2, [r3, #0]
 800e16c:	8b7b      	ldrh	r3, [r7, #26]
 800e16e:	1ad3      	subs	r3, r2, r3
 800e170:	b29b      	uxth	r3, r3
 800e172:	3b08      	subs	r3, #8
 800e174:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e176:	887a      	ldrh	r2, [r7, #2]
 800e178:	8b3b      	ldrh	r3, [r7, #24]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d906      	bls.n	800e18c <mem_trim+0xa8>
 800e17e:	4b48      	ldr	r3, [pc, #288]	; (800e2a0 <mem_trim+0x1bc>)
 800e180:	f240 2206 	movw	r2, #518	; 0x206
 800e184:	4949      	ldr	r1, [pc, #292]	; (800e2ac <mem_trim+0x1c8>)
 800e186:	4848      	ldr	r0, [pc, #288]	; (800e2a8 <mem_trim+0x1c4>)
 800e188:	f00b faac 	bl	80196e4 <iprintf>
  if (newsize > size) {
 800e18c:	887a      	ldrh	r2, [r7, #2]
 800e18e:	8b3b      	ldrh	r3, [r7, #24]
 800e190:	429a      	cmp	r2, r3
 800e192:	d901      	bls.n	800e198 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800e194:	2300      	movs	r3, #0
 800e196:	e07a      	b.n	800e28e <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800e198:	887a      	ldrh	r2, [r7, #2]
 800e19a:	8b3b      	ldrh	r3, [r7, #24]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d101      	bne.n	800e1a4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	e074      	b.n	800e28e <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e1a4:	4842      	ldr	r0, [pc, #264]	; (800e2b0 <mem_trim+0x1cc>)
 800e1a6:	f00a fc65 	bl	8018a74 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800e1aa:	4b3b      	ldr	r3, [pc, #236]	; (800e298 <mem_trim+0x1b4>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	69fa      	ldr	r2, [r7, #28]
 800e1b0:	8812      	ldrh	r2, [r2, #0]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	791b      	ldrb	r3, [r3, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d131      	bne.n	800e222 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	881b      	ldrh	r3, [r3, #0]
 800e1c2:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800e1c4:	8b7a      	ldrh	r2, [r7, #26]
 800e1c6:	887b      	ldrh	r3, [r7, #2]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800e1d0:	4b38      	ldr	r3, [pc, #224]	; (800e2b4 <mem_trim+0x1d0>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	697a      	ldr	r2, [r7, #20]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d105      	bne.n	800e1e6 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800e1da:	4b2f      	ldr	r3, [pc, #188]	; (800e298 <mem_trim+0x1b4>)
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	8a7b      	ldrh	r3, [r7, #18]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	4a34      	ldr	r2, [pc, #208]	; (800e2b4 <mem_trim+0x1d0>)
 800e1e4:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800e1e6:	4b2c      	ldr	r3, [pc, #176]	; (800e298 <mem_trim+0x1b4>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	8a7b      	ldrh	r3, [r7, #18]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	8a3a      	ldrh	r2, [r7, #16]
 800e1fa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	8b7a      	ldrh	r2, [r7, #26]
 800e200:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	8a7a      	ldrh	r2, [r7, #18]
 800e206:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	881b      	ldrh	r3, [r3, #0]
 800e20c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e210:	d039      	beq.n	800e286 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800e212:	4b21      	ldr	r3, [pc, #132]	; (800e298 <mem_trim+0x1b4>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	697a      	ldr	r2, [r7, #20]
 800e218:	8812      	ldrh	r2, [r2, #0]
 800e21a:	4413      	add	r3, r2
 800e21c:	8a7a      	ldrh	r2, [r7, #18]
 800e21e:	805a      	strh	r2, [r3, #2]
 800e220:	e031      	b.n	800e286 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e222:	887b      	ldrh	r3, [r7, #2]
 800e224:	f103 0214 	add.w	r2, r3, #20
 800e228:	8b3b      	ldrh	r3, [r7, #24]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d82b      	bhi.n	800e286 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800e22e:	8b7a      	ldrh	r2, [r7, #26]
 800e230:	887b      	ldrh	r3, [r7, #2]
 800e232:	4413      	add	r3, r2
 800e234:	b29b      	uxth	r3, r3
 800e236:	3308      	adds	r3, #8
 800e238:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800e23a:	4b17      	ldr	r3, [pc, #92]	; (800e298 <mem_trim+0x1b4>)
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	8a7b      	ldrh	r3, [r7, #18]
 800e240:	4413      	add	r3, r2
 800e242:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800e244:	4b1b      	ldr	r3, [pc, #108]	; (800e2b4 <mem_trim+0x1d0>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	697a      	ldr	r2, [r7, #20]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d202      	bcs.n	800e254 <mem_trim+0x170>
      lfree = mem2;
 800e24e:	4a19      	ldr	r2, [pc, #100]	; (800e2b4 <mem_trim+0x1d0>)
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2200      	movs	r2, #0
 800e258:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	881a      	ldrh	r2, [r3, #0]
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	8b7a      	ldrh	r2, [r7, #26]
 800e266:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	8a7a      	ldrh	r2, [r7, #18]
 800e26c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e276:	d006      	beq.n	800e286 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800e278:	4b07      	ldr	r3, [pc, #28]	; (800e298 <mem_trim+0x1b4>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	8812      	ldrh	r2, [r2, #0]
 800e280:	4413      	add	r3, r2
 800e282:	8a7a      	ldrh	r2, [r7, #18]
 800e284:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e286:	480a      	ldr	r0, [pc, #40]	; (800e2b0 <mem_trim+0x1cc>)
 800e288:	f00a fc03 	bl	8018a92 <sys_mutex_unlock>
  return rmem;
 800e28c:	687b      	ldr	r3, [r7, #4]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3720      	adds	r7, #32
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	200041c0 	.word	0x200041c0
 800e29c:	200041c4 	.word	0x200041c4
 800e2a0:	0801a9e8 	.word	0x0801a9e8
 800e2a4:	0801ab28 	.word	0x0801ab28
 800e2a8:	0801aa30 	.word	0x0801aa30
 800e2ac:	0801ab40 	.word	0x0801ab40
 800e2b0:	200041cc 	.word	0x200041cc
 800e2b4:	200041c8 	.word	0x200041c8

0800e2b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b088      	sub	sp, #32
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800e2c2:	88fb      	ldrh	r3, [r7, #6]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <mem_malloc+0x14>
    return NULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	e0d1      	b.n	800e470 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800e2cc:	88fb      	ldrh	r3, [r7, #6]
 800e2ce:	3303      	adds	r3, #3
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	f023 0303 	bic.w	r3, r3, #3
 800e2d6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800e2d8:	88fb      	ldrh	r3, [r7, #6]
 800e2da:	2b0b      	cmp	r3, #11
 800e2dc:	d801      	bhi.n	800e2e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e2de:	230c      	movs	r3, #12
 800e2e0:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800e2e2:	88fb      	ldrh	r3, [r7, #6]
 800e2e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e2e8:	d901      	bls.n	800e2ee <mem_malloc+0x36>
    return NULL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e0c0      	b.n	800e470 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e2ee:	4862      	ldr	r0, [pc, #392]	; (800e478 <mem_malloc+0x1c0>)
 800e2f0:	f00a fbc0 	bl	8018a74 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800e2f4:	4b61      	ldr	r3, [pc, #388]	; (800e47c <mem_malloc+0x1c4>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	4b61      	ldr	r3, [pc, #388]	; (800e480 <mem_malloc+0x1c8>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	83fb      	strh	r3, [r7, #30]
 800e302:	e0aa      	b.n	800e45a <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800e304:	4b5e      	ldr	r3, [pc, #376]	; (800e480 <mem_malloc+0x1c8>)
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	8bfb      	ldrh	r3, [r7, #30]
 800e30a:	4413      	add	r3, r2
 800e30c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	791b      	ldrb	r3, [r3, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	f040 809b 	bne.w	800e44e <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	461a      	mov	r2, r3
 800e31e:	8bfb      	ldrh	r3, [r7, #30]
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	f1a3 0208 	sub.w	r2, r3, #8
 800e326:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800e328:	429a      	cmp	r2, r3
 800e32a:	f0c0 8090 	bcc.w	800e44e <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	461a      	mov	r2, r3
 800e334:	8bfb      	ldrh	r3, [r7, #30]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	f1a3 0208 	sub.w	r2, r3, #8
 800e33c:	88fb      	ldrh	r3, [r7, #6]
 800e33e:	3314      	adds	r3, #20
 800e340:	429a      	cmp	r2, r3
 800e342:	d327      	bcc.n	800e394 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800e344:	8bfa      	ldrh	r2, [r7, #30]
 800e346:	88fb      	ldrh	r3, [r7, #6]
 800e348:	4413      	add	r3, r2
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	3308      	adds	r3, #8
 800e34e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800e350:	4b4b      	ldr	r3, [pc, #300]	; (800e480 <mem_malloc+0x1c8>)
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	8a7b      	ldrh	r3, [r7, #18]
 800e356:	4413      	add	r3, r2
 800e358:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	881a      	ldrh	r2, [r3, #0]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	8bfa      	ldrh	r2, [r7, #30]
 800e36c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	8a7a      	ldrh	r2, [r7, #18]
 800e372:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	2201      	movs	r2, #1
 800e378:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	881b      	ldrh	r3, [r3, #0]
 800e37e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e382:	d00a      	beq.n	800e39a <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800e384:	4b3e      	ldr	r3, [pc, #248]	; (800e480 <mem_malloc+0x1c8>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	8812      	ldrh	r2, [r2, #0]
 800e38c:	4413      	add	r3, r2
 800e38e:	8a7a      	ldrh	r2, [r7, #18]
 800e390:	805a      	strh	r2, [r3, #2]
 800e392:	e002      	b.n	800e39a <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2201      	movs	r2, #1
 800e398:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e39a:	4b38      	ldr	r3, [pc, #224]	; (800e47c <mem_malloc+0x1c4>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	697a      	ldr	r2, [r7, #20]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d127      	bne.n	800e3f4 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800e3a4:	4b35      	ldr	r3, [pc, #212]	; (800e47c <mem_malloc+0x1c4>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e3aa:	e005      	b.n	800e3b8 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800e3ac:	4b34      	ldr	r3, [pc, #208]	; (800e480 <mem_malloc+0x1c8>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	69ba      	ldr	r2, [r7, #24]
 800e3b2:	8812      	ldrh	r2, [r2, #0]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	791b      	ldrb	r3, [r3, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d004      	beq.n	800e3ca <mem_malloc+0x112>
 800e3c0:	4b30      	ldr	r3, [pc, #192]	; (800e484 <mem_malloc+0x1cc>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d1f0      	bne.n	800e3ac <mem_malloc+0xf4>
          }
          lfree = cur;
 800e3ca:	4a2c      	ldr	r2, [pc, #176]	; (800e47c <mem_malloc+0x1c4>)
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e3d0:	4b2a      	ldr	r3, [pc, #168]	; (800e47c <mem_malloc+0x1c4>)
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	4b2b      	ldr	r3, [pc, #172]	; (800e484 <mem_malloc+0x1cc>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d00b      	beq.n	800e3f4 <mem_malloc+0x13c>
 800e3dc:	4b27      	ldr	r3, [pc, #156]	; (800e47c <mem_malloc+0x1c4>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	791b      	ldrb	r3, [r3, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d006      	beq.n	800e3f4 <mem_malloc+0x13c>
 800e3e6:	4b28      	ldr	r3, [pc, #160]	; (800e488 <mem_malloc+0x1d0>)
 800e3e8:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e3ec:	4927      	ldr	r1, [pc, #156]	; (800e48c <mem_malloc+0x1d4>)
 800e3ee:	4828      	ldr	r0, [pc, #160]	; (800e490 <mem_malloc+0x1d8>)
 800e3f0:	f00b f978 	bl	80196e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e3f4:	4820      	ldr	r0, [pc, #128]	; (800e478 <mem_malloc+0x1c0>)
 800e3f6:	f00a fb4c 	bl	8018a92 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e3fa:	88fa      	ldrh	r2, [r7, #6]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	4413      	add	r3, r2
 800e400:	3308      	adds	r3, #8
 800e402:	4a20      	ldr	r2, [pc, #128]	; (800e484 <mem_malloc+0x1cc>)
 800e404:	6812      	ldr	r2, [r2, #0]
 800e406:	4293      	cmp	r3, r2
 800e408:	d906      	bls.n	800e418 <mem_malloc+0x160>
 800e40a:	4b1f      	ldr	r3, [pc, #124]	; (800e488 <mem_malloc+0x1d0>)
 800e40c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e410:	4920      	ldr	r1, [pc, #128]	; (800e494 <mem_malloc+0x1dc>)
 800e412:	481f      	ldr	r0, [pc, #124]	; (800e490 <mem_malloc+0x1d8>)
 800e414:	f00b f966 	bl	80196e4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	f003 0303 	and.w	r3, r3, #3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d006      	beq.n	800e430 <mem_malloc+0x178>
 800e422:	4b19      	ldr	r3, [pc, #100]	; (800e488 <mem_malloc+0x1d0>)
 800e424:	f240 22d6 	movw	r2, #726	; 0x2d6
 800e428:	491b      	ldr	r1, [pc, #108]	; (800e498 <mem_malloc+0x1e0>)
 800e42a:	4819      	ldr	r0, [pc, #100]	; (800e490 <mem_malloc+0x1d8>)
 800e42c:	f00b f95a 	bl	80196e4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	f003 0303 	and.w	r3, r3, #3
 800e436:	2b00      	cmp	r3, #0
 800e438:	d006      	beq.n	800e448 <mem_malloc+0x190>
 800e43a:	4b13      	ldr	r3, [pc, #76]	; (800e488 <mem_malloc+0x1d0>)
 800e43c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800e440:	4916      	ldr	r1, [pc, #88]	; (800e49c <mem_malloc+0x1e4>)
 800e442:	4813      	ldr	r0, [pc, #76]	; (800e490 <mem_malloc+0x1d8>)
 800e444:	f00b f94e 	bl	80196e4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	3308      	adds	r3, #8
 800e44c:	e010      	b.n	800e470 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800e44e:	4b0c      	ldr	r3, [pc, #48]	; (800e480 <mem_malloc+0x1c8>)
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	8bfb      	ldrh	r3, [r7, #30]
 800e454:	4413      	add	r3, r2
 800e456:	881b      	ldrh	r3, [r3, #0]
 800e458:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800e45a:	8bfa      	ldrh	r2, [r7, #30]
 800e45c:	88fb      	ldrh	r3, [r7, #6]
 800e45e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e462:	429a      	cmp	r2, r3
 800e464:	f4ff af4e 	bcc.w	800e304 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e468:	4803      	ldr	r0, [pc, #12]	; (800e478 <mem_malloc+0x1c0>)
 800e46a:	f00a fb12 	bl	8018a92 <sys_mutex_unlock>
  return NULL;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	3720      	adds	r7, #32
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	200041cc 	.word	0x200041cc
 800e47c:	200041c8 	.word	0x200041c8
 800e480:	200041c0 	.word	0x200041c0
 800e484:	200041c4 	.word	0x200041c4
 800e488:	0801a9e8 	.word	0x0801a9e8
 800e48c:	0801ab60 	.word	0x0801ab60
 800e490:	0801aa30 	.word	0x0801aa30
 800e494:	0801ab7c 	.word	0x0801ab7c
 800e498:	0801abac 	.word	0x0801abac
 800e49c:	0801abdc 	.word	0x0801abdc

0800e4a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	3303      	adds	r3, #3
 800e4b6:	f023 0303 	bic.w	r3, r3, #3
 800e4ba:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e4bc:	2300      	movs	r3, #0
 800e4be:	60fb      	str	r3, [r7, #12]
 800e4c0:	e011      	b.n	800e4e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	461a      	mov	r2, r3
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	4413      	add	r3, r2
 800e4de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	60fb      	str	r3, [r7, #12]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	885b      	ldrh	r3, [r3, #2]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	dbe7      	blt.n	800e4c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e4f2:	bf00      	nop
 800e4f4:	3714      	adds	r7, #20
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
	...

0800e500 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e506:	2300      	movs	r3, #0
 800e508:	80fb      	strh	r3, [r7, #6]
 800e50a:	e009      	b.n	800e520 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e50c:	88fb      	ldrh	r3, [r7, #6]
 800e50e:	4a08      	ldr	r2, [pc, #32]	; (800e530 <memp_init+0x30>)
 800e510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff ffc3 	bl	800e4a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e51a:	88fb      	ldrh	r3, [r7, #6]
 800e51c:	3301      	adds	r3, #1
 800e51e:	80fb      	strh	r3, [r7, #6]
 800e520:	88fb      	ldrh	r3, [r7, #6]
 800e522:	2b0c      	cmp	r3, #12
 800e524:	d9f2      	bls.n	800e50c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e526:	bf00      	nop
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	0801cc64 	.word	0x0801cc64

0800e534 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e53c:	f00a fadc 	bl	8018af8 <sys_arch_protect>
 800e540:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d015      	beq.n	800e57c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	68ba      	ldr	r2, [r7, #8]
 800e556:	6812      	ldr	r2, [r2, #0]
 800e558:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	f003 0303 	and.w	r3, r3, #3
 800e560:	2b00      	cmp	r3, #0
 800e562:	d006      	beq.n	800e572 <do_memp_malloc_pool+0x3e>
 800e564:	4b09      	ldr	r3, [pc, #36]	; (800e58c <do_memp_malloc_pool+0x58>)
 800e566:	f240 1249 	movw	r2, #329	; 0x149
 800e56a:	4909      	ldr	r1, [pc, #36]	; (800e590 <do_memp_malloc_pool+0x5c>)
 800e56c:	4809      	ldr	r0, [pc, #36]	; (800e594 <do_memp_malloc_pool+0x60>)
 800e56e:	f00b f8b9 	bl	80196e4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f00a face 	bl	8018b14 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	e003      	b.n	800e584 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f00a fac9 	bl	8018b14 <sys_arch_unprotect>
  return NULL;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	0801ac00 	.word	0x0801ac00
 800e590:	0801ac30 	.word	0x0801ac30
 800e594:	0801ac54 	.word	0x0801ac54

0800e598 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e5a2:	79fb      	ldrb	r3, [r7, #7]
 800e5a4:	2b0c      	cmp	r3, #12
 800e5a6:	d908      	bls.n	800e5ba <memp_malloc+0x22>
 800e5a8:	4b0a      	ldr	r3, [pc, #40]	; (800e5d4 <memp_malloc+0x3c>)
 800e5aa:	f240 1287 	movw	r2, #391	; 0x187
 800e5ae:	490a      	ldr	r1, [pc, #40]	; (800e5d8 <memp_malloc+0x40>)
 800e5b0:	480a      	ldr	r0, [pc, #40]	; (800e5dc <memp_malloc+0x44>)
 800e5b2:	f00b f897 	bl	80196e4 <iprintf>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	e008      	b.n	800e5cc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	4a08      	ldr	r2, [pc, #32]	; (800e5e0 <memp_malloc+0x48>)
 800e5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff ffb6 	bl	800e534 <do_memp_malloc_pool>
 800e5c8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3710      	adds	r7, #16
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	0801ac00 	.word	0x0801ac00
 800e5d8:	0801ac90 	.word	0x0801ac90
 800e5dc:	0801ac54 	.word	0x0801ac54
 800e5e0:	0801cc64 	.word	0x0801cc64

0800e5e4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	f003 0303 	and.w	r3, r3, #3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d006      	beq.n	800e606 <do_memp_free_pool+0x22>
 800e5f8:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <do_memp_free_pool+0x4c>)
 800e5fa:	f240 129d 	movw	r2, #413	; 0x19d
 800e5fe:	490d      	ldr	r1, [pc, #52]	; (800e634 <do_memp_free_pool+0x50>)
 800e600:	480d      	ldr	r0, [pc, #52]	; (800e638 <do_memp_free_pool+0x54>)
 800e602:	f00b f86f 	bl	80196e4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e60a:	f00a fa75 	bl	8018af8 <sys_arch_protect>
 800e60e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e622:	68b8      	ldr	r0, [r7, #8]
 800e624:	f00a fa76 	bl	8018b14 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e628:	bf00      	nop
 800e62a:	3710      	adds	r7, #16
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	0801ac00 	.word	0x0801ac00
 800e634:	0801acb0 	.word	0x0801acb0
 800e638:	0801ac54 	.word	0x0801ac54

0800e63c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	4603      	mov	r3, r0
 800e644:	6039      	str	r1, [r7, #0]
 800e646:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e648:	79fb      	ldrb	r3, [r7, #7]
 800e64a:	2b0c      	cmp	r3, #12
 800e64c:	d907      	bls.n	800e65e <memp_free+0x22>
 800e64e:	4b0c      	ldr	r3, [pc, #48]	; (800e680 <memp_free+0x44>)
 800e650:	f240 12db 	movw	r2, #475	; 0x1db
 800e654:	490b      	ldr	r1, [pc, #44]	; (800e684 <memp_free+0x48>)
 800e656:	480c      	ldr	r0, [pc, #48]	; (800e688 <memp_free+0x4c>)
 800e658:	f00b f844 	bl	80196e4 <iprintf>
 800e65c:	e00c      	b.n	800e678 <memp_free+0x3c>

  if (mem == NULL) {
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d008      	beq.n	800e676 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e664:	79fb      	ldrb	r3, [r7, #7]
 800e666:	4a09      	ldr	r2, [pc, #36]	; (800e68c <memp_free+0x50>)
 800e668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7ff ffb8 	bl	800e5e4 <do_memp_free_pool>
 800e674:	e000      	b.n	800e678 <memp_free+0x3c>
    return;
 800e676:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	0801ac00 	.word	0x0801ac00
 800e684:	0801acd0 	.word	0x0801acd0
 800e688:	0801ac54 	.word	0x0801ac54
 800e68c:	0801cc64 	.word	0x0801cc64

0800e690 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e690:	b480      	push	{r7}
 800e692:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e694:	bf00      	nop
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr
	...

0800e6a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
 800e6ac:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d105      	bne.n	800e6c0 <netif_add+0x20>
 800e6b4:	4b23      	ldr	r3, [pc, #140]	; (800e744 <netif_add+0xa4>)
 800e6b6:	22fb      	movs	r2, #251	; 0xfb
 800e6b8:	4923      	ldr	r1, [pc, #140]	; (800e748 <netif_add+0xa8>)
 800e6ba:	4824      	ldr	r0, [pc, #144]	; (800e74c <netif_add+0xac>)
 800e6bc:	f00b f812 	bl	80196e4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	3320      	adds	r3, #32
 800e6de:	2204      	movs	r2, #4
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f00a ff4e 	bl	8019584 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2203      	movs	r2, #3
 800e6ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	69ba      	ldr	r2, [r7, #24]
 800e6f4:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800e6f6:	4b16      	ldr	r3, [pc, #88]	; (800e750 <netif_add+0xb0>)
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	b2d1      	uxtb	r1, r2
 800e6fe:	4a14      	ldr	r2, [pc, #80]	; (800e750 <netif_add+0xb0>)
 800e700:	7011      	strb	r1, [r2, #0]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6a3a      	ldr	r2, [r7, #32]
 800e70c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	68b9      	ldr	r1, [r7, #8]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 f81f 	bl	800e758 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	68f8      	ldr	r0, [r7, #12]
 800e71e:	4798      	blx	r3
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <netif_add+0x8a>
    return NULL;
 800e726:	2300      	movs	r3, #0
 800e728:	e007      	b.n	800e73a <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e72a:	4b0a      	ldr	r3, [pc, #40]	; (800e754 <netif_add+0xb4>)
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e732:	4a08      	ldr	r2, [pc, #32]	; (800e754 <netif_add+0xb4>)
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800e738:	68fb      	ldr	r3, [r7, #12]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	0801acec 	.word	0x0801acec
 800e748:	0801ad20 	.word	0x0801ad20
 800e74c:	0801ad38 	.word	0x0801ad38
 800e750:	20004204 	.word	0x20004204
 800e754:	2000ab20 	.word	0x2000ab20

0800e758 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
 800e764:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <netif_set_addr+0x1c>
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d10c      	bne.n	800e78e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800e774:	68b9      	ldr	r1, [r7, #8]
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f000 f81a 	bl	800e7b0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800e77c:	6879      	ldr	r1, [r7, #4]
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f000 f862 	bl	800e848 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f000 f84a 	bl	800e820 <netif_set_gw>
 800e78c:	e00b      	b.n	800e7a6 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800e78e:	6879      	ldr	r1, [r7, #4]
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f000 f859 	bl	800e848 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f000 f841 	bl	800e820 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800e79e:	68b9      	ldr	r1, [r7, #8]
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f000 f805 	bl	800e7b0 <netif_set_ipaddr>
  }
}
 800e7a6:	bf00      	nop
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
	...

0800e7b0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d003      	beq.n	800e7c8 <netif_set_ipaddr+0x18>
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	e002      	b.n	800e7ce <netif_set_ipaddr+0x1e>
 800e7c8:	4b14      	ldr	r3, [pc, #80]	; (800e81c <netif_set_ipaddr+0x6c>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d01c      	beq.n	800e814 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	3304      	adds	r3, #4
 800e7de:	f107 020c 	add.w	r2, r7, #12
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f002 f89f 	bl	8010928 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	f107 020c 	add.w	r2, r7, #12
 800e7f2:	4611      	mov	r1, r2
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f005 ff61 	bl	80146bc <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <netif_set_ipaddr+0x56>
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	e000      	b.n	800e808 <netif_set_ipaddr+0x58>
 800e806:	2300      	movs	r3, #0
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e80c:	2101      	movs	r1, #1
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f861 	bl	800e8d6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800e814:	bf00      	nop
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	0801cce8 	.word	0x0801cce8

0800e820 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d002      	beq.n	800e836 <netif_set_gw+0x16>
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	e000      	b.n	800e838 <netif_set_gw+0x18>
 800e836:	2300      	movs	r3, #0
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d002      	beq.n	800e85e <netif_set_netmask+0x16>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	e000      	b.n	800e860 <netif_set_netmask+0x18>
 800e85e:	2300      	movs	r3, #0
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800e864:	bf00      	nop
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e878:	4a04      	ldr	r2, [pc, #16]	; (800e88c <netif_set_default+0x1c>)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e87e:	bf00      	nop
 800e880:	370c      	adds	r7, #12
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	2000ab24 	.word	0x2000ab24

0800e890 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d113      	bne.n	800e8ce <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8ac:	f043 0301 	orr.w	r3, r3, #1
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8be:	f003 0304 	and.w	r3, r3, #4
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d003      	beq.n	800e8ce <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800e8c6:	2103      	movs	r1, #3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f804 	bl	800e8d6 <netif_issue_reports>
    }
  }
}
 800e8ce:	bf00      	nop
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b082      	sub	sp, #8
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
 800e8de:	460b      	mov	r3, r1
 800e8e0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e8e2:	78fb      	ldrb	r3, [r7, #3]
 800e8e4:	f003 0301 	and.w	r3, r3, #1
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d011      	beq.n	800e910 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00c      	beq.n	800e910 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8fc:	f003 0308 	and.w	r3, r3, #8
 800e900:	2b00      	cmp	r3, #0
 800e902:	d005      	beq.n	800e910 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	3304      	adds	r3, #4
 800e908:	4619      	mov	r1, r3
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f008 fcc4 	bl	8017298 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800e910:	bf00      	nop
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e926:	f003 0301 	and.w	r3, r3, #1
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d012      	beq.n	800e954 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e934:	f023 0301 	bic.w	r3, r3, #1
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e946:	f003 0308 	and.w	r3, r3, #8
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d002      	beq.n	800e954 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f008 f864 	bl	8016a1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e954:	bf00      	nop
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e962:	f00a f8c9 	bl	8018af8 <sys_arch_protect>
 800e966:	6038      	str	r0, [r7, #0]
 800e968:	4b0f      	ldr	r3, [pc, #60]	; (800e9a8 <pbuf_free_ooseq+0x4c>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	701a      	strb	r2, [r3, #0]
 800e96e:	6838      	ldr	r0, [r7, #0]
 800e970:	f00a f8d0 	bl	8018b14 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e974:	4b0d      	ldr	r3, [pc, #52]	; (800e9ac <pbuf_free_ooseq+0x50>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	607b      	str	r3, [r7, #4]
 800e97a:	e00f      	b.n	800e99c <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e980:	2b00      	cmp	r3, #0
 800e982:	d008      	beq.n	800e996 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e988:	4618      	mov	r0, r3
 800e98a:	f001 fd08 	bl	801039e <tcp_segs_free>
      pcb->ooseq = NULL;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2200      	movs	r2, #0
 800e992:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800e994:	e005      	b.n	800e9a2 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	607b      	str	r3, [r7, #4]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1ec      	bne.n	800e97c <pbuf_free_ooseq+0x20>
    }
  }
}
 800e9a2:	3708      	adds	r7, #8
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	2000ab28 	.word	0x2000ab28
 800e9ac:	2000ab30 	.word	0x2000ab30

0800e9b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e9b8:	f7ff ffd0 	bl	800e95c <pbuf_free_ooseq>
}
 800e9bc:	bf00      	nop
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e9ca:	f00a f895 	bl	8018af8 <sys_arch_protect>
 800e9ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e9d0:	4b10      	ldr	r3, [pc, #64]	; (800ea14 <pbuf_pool_is_empty+0x50>)
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ea14 <pbuf_pool_is_empty+0x50>)
 800e9d8:	2201      	movs	r2, #1
 800e9da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f00a f899 	bl	8018b14 <sys_arch_unprotect>

  if (!queued) {
 800e9e2:	78fb      	ldrb	r3, [r7, #3]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d110      	bne.n	800ea0a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	480a      	ldr	r0, [pc, #40]	; (800ea18 <pbuf_pool_is_empty+0x54>)
 800e9ee:	f7ff f951 	bl	800dc94 <tcpip_callback_with_block>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d008      	beq.n	800ea0a <pbuf_pool_is_empty+0x46>
 800e9f8:	f00a f87e 	bl	8018af8 <sys_arch_protect>
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <pbuf_pool_is_empty+0x50>)
 800ea00:	2200      	movs	r2, #0
 800ea02:	701a      	strb	r2, [r3, #0]
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f00a f885 	bl	8018b14 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ea0a:	bf00      	nop
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	2000ab28 	.word	0x2000ab28
 800ea18:	0800e9b1 	.word	0x0800e9b1

0800ea1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b088      	sub	sp, #32
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	4603      	mov	r3, r0
 800ea24:	71fb      	strb	r3, [r7, #7]
 800ea26:	460b      	mov	r3, r1
 800ea28:	80bb      	strh	r3, [r7, #4]
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	2b04      	cmp	r3, #4
 800ea32:	d81c      	bhi.n	800ea6e <pbuf_alloc+0x52>
 800ea34:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <pbuf_alloc+0x20>)
 800ea36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3a:	bf00      	nop
 800ea3c:	0800ea51 	.word	0x0800ea51
 800ea40:	0800ea57 	.word	0x0800ea57
 800ea44:	0800ea5d 	.word	0x0800ea5d
 800ea48:	0800ea63 	.word	0x0800ea63
 800ea4c:	0800ea69 	.word	0x0800ea69
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800ea50:	2336      	movs	r3, #54	; 0x36
 800ea52:	82fb      	strh	r3, [r7, #22]
    break;
 800ea54:	e014      	b.n	800ea80 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800ea56:	2322      	movs	r3, #34	; 0x22
 800ea58:	82fb      	strh	r3, [r7, #22]
    break;
 800ea5a:	e011      	b.n	800ea80 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800ea5c:	230e      	movs	r3, #14
 800ea5e:	82fb      	strh	r3, [r7, #22]
    break;
 800ea60:	e00e      	b.n	800ea80 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800ea62:	2300      	movs	r3, #0
 800ea64:	82fb      	strh	r3, [r7, #22]
    break;
 800ea66:	e00b      	b.n	800ea80 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	82fb      	strh	r3, [r7, #22]
    break;
 800ea6c:	e008      	b.n	800ea80 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800ea6e:	4ba5      	ldr	r3, [pc, #660]	; (800ed04 <pbuf_alloc+0x2e8>)
 800ea70:	f44f 728b 	mov.w	r2, #278	; 0x116
 800ea74:	49a4      	ldr	r1, [pc, #656]	; (800ed08 <pbuf_alloc+0x2ec>)
 800ea76:	48a5      	ldr	r0, [pc, #660]	; (800ed0c <pbuf_alloc+0x2f0>)
 800ea78:	f00a fe34 	bl	80196e4 <iprintf>
    return NULL;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	e15d      	b.n	800ed3c <pbuf_alloc+0x320>
  }

  switch (type) {
 800ea80:	79bb      	ldrb	r3, [r7, #6]
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	f200 8134 	bhi.w	800ecf0 <pbuf_alloc+0x2d4>
 800ea88:	a201      	add	r2, pc, #4	; (adr r2, 800ea90 <pbuf_alloc+0x74>)
 800ea8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8e:	bf00      	nop
 800ea90:	0800ec31 	.word	0x0800ec31
 800ea94:	0800ecbd 	.word	0x0800ecbd
 800ea98:	0800ecbd 	.word	0x0800ecbd
 800ea9c:	0800eaa1 	.word	0x0800eaa1
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800eaa0:	200c      	movs	r0, #12
 800eaa2:	f7ff fd79 	bl	800e598 <memp_malloc>
 800eaa6:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d103      	bne.n	800eab6 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800eaae:	f7ff ff89 	bl	800e9c4 <pbuf_pool_is_empty>
      return NULL;
 800eab2:	2300      	movs	r3, #0
 800eab4:	e142      	b.n	800ed3c <pbuf_alloc+0x320>
    }
    p->type = type;
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	79ba      	ldrb	r2, [r7, #6]
 800eaba:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	2200      	movs	r2, #0
 800eac0:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800eac2:	8afb      	ldrh	r3, [r7, #22]
 800eac4:	3310      	adds	r3, #16
 800eac6:	69fa      	ldr	r2, [r7, #28]
 800eac8:	4413      	add	r3, r2
 800eaca:	3303      	adds	r3, #3
 800eacc:	f023 0303 	bic.w	r3, r3, #3
 800ead0:	461a      	mov	r2, r3
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	f003 0303 	and.w	r3, r3, #3
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d006      	beq.n	800eaf0 <pbuf_alloc+0xd4>
 800eae2:	4b88      	ldr	r3, [pc, #544]	; (800ed04 <pbuf_alloc+0x2e8>)
 800eae4:	f240 1229 	movw	r2, #297	; 0x129
 800eae8:	4989      	ldr	r1, [pc, #548]	; (800ed10 <pbuf_alloc+0x2f4>)
 800eaea:	4888      	ldr	r0, [pc, #544]	; (800ed0c <pbuf_alloc+0x2f0>)
 800eaec:	f00a fdfa 	bl	80196e4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	88ba      	ldrh	r2, [r7, #4]
 800eaf4:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800eaf6:	8afb      	ldrh	r3, [r7, #22]
 800eaf8:	3303      	adds	r3, #3
 800eafa:	f023 0303 	bic.w	r3, r3, #3
 800eafe:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800eb02:	88bb      	ldrh	r3, [r7, #4]
 800eb04:	4293      	cmp	r3, r2
 800eb06:	bf28      	it	cs
 800eb08:	4613      	movcs	r3, r2
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	69fa      	ldr	r2, [r7, #28]
 800eb16:	8952      	ldrh	r2, [r2, #10]
 800eb18:	441a      	add	r2, r3
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d906      	bls.n	800eb32 <pbuf_alloc+0x116>
 800eb24:	4b77      	ldr	r3, [pc, #476]	; (800ed04 <pbuf_alloc+0x2e8>)
 800eb26:	f44f 7298 	mov.w	r2, #304	; 0x130
 800eb2a:	497a      	ldr	r1, [pc, #488]	; (800ed14 <pbuf_alloc+0x2f8>)
 800eb2c:	4877      	ldr	r0, [pc, #476]	; (800ed0c <pbuf_alloc+0x2f0>)
 800eb2e:	f00a fdd9 	bl	80196e4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800eb32:	8afb      	ldrh	r3, [r7, #22]
 800eb34:	3303      	adds	r3, #3
 800eb36:	f023 0303 	bic.w	r3, r3, #3
 800eb3a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800eb3e:	d106      	bne.n	800eb4e <pbuf_alloc+0x132>
 800eb40:	4b70      	ldr	r3, [pc, #448]	; (800ed04 <pbuf_alloc+0x2e8>)
 800eb42:	f44f 7299 	mov.w	r2, #306	; 0x132
 800eb46:	4974      	ldr	r1, [pc, #464]	; (800ed18 <pbuf_alloc+0x2fc>)
 800eb48:	4870      	ldr	r0, [pc, #448]	; (800ed0c <pbuf_alloc+0x2f0>)
 800eb4a:	f00a fdcb 	bl	80196e4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	2201      	movs	r2, #1
 800eb52:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800eb58:	88bb      	ldrh	r3, [r7, #4]
 800eb5a:	69fa      	ldr	r2, [r7, #28]
 800eb5c:	8952      	ldrh	r2, [r2, #10]
 800eb5e:	1a9b      	subs	r3, r3, r2
 800eb60:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800eb62:	e061      	b.n	800ec28 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800eb64:	200c      	movs	r0, #12
 800eb66:	f7ff fd17 	bl	800e598 <memp_malloc>
 800eb6a:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d106      	bne.n	800eb80 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800eb72:	f7ff ff27 	bl	800e9c4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800eb76:	69f8      	ldr	r0, [r7, #28]
 800eb78:	f000 fac2 	bl	800f100 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	e0dd      	b.n	800ed3c <pbuf_alloc+0x320>
      }
      q->type = type;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	79ba      	ldrb	r2, [r7, #6]
 800eb84:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	dd06      	ble.n	800ebb0 <pbuf_alloc+0x194>
 800eba2:	4b58      	ldr	r3, [pc, #352]	; (800ed04 <pbuf_alloc+0x2e8>)
 800eba4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800eba8:	495c      	ldr	r1, [pc, #368]	; (800ed1c <pbuf_alloc+0x300>)
 800ebaa:	4858      	ldr	r0, [pc, #352]	; (800ed0c <pbuf_alloc+0x2f0>)
 800ebac:	f00a fd9a 	bl	80196e4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ebc0:	bf28      	it	cs
 800ebc2:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f103 0210 	add.w	r2, r3, #16
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	f003 0303 	and.w	r3, r3, #3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d006      	beq.n	800ebf0 <pbuf_alloc+0x1d4>
 800ebe2:	4b48      	ldr	r3, [pc, #288]	; (800ed04 <pbuf_alloc+0x2e8>)
 800ebe4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800ebe8:	494d      	ldr	r1, [pc, #308]	; (800ed20 <pbuf_alloc+0x304>)
 800ebea:	4848      	ldr	r0, [pc, #288]	; (800ed0c <pbuf_alloc+0x2f0>)
 800ebec:	f00a fd7a 	bl	80196e4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	69fa      	ldr	r2, [r7, #28]
 800ebf6:	8952      	ldrh	r2, [r2, #10]
 800ebf8:	441a      	add	r2, r3
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d906      	bls.n	800ec12 <pbuf_alloc+0x1f6>
 800ec04:	4b3f      	ldr	r3, [pc, #252]	; (800ed04 <pbuf_alloc+0x2e8>)
 800ec06:	f240 1255 	movw	r2, #341	; 0x155
 800ec0a:	4942      	ldr	r1, [pc, #264]	; (800ed14 <pbuf_alloc+0x2f8>)
 800ec0c:	483f      	ldr	r0, [pc, #252]	; (800ed0c <pbuf_alloc+0x2f0>)
 800ec0e:	f00a fd69 	bl	80196e4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2201      	movs	r2, #1
 800ec16:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	895b      	ldrh	r3, [r3, #10]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	1a9b      	subs	r3, r3, r2
 800ec22:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	dc9a      	bgt.n	800eb64 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800ec2e:	e07e      	b.n	800ed2e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800ec30:	8afb      	ldrh	r3, [r7, #22]
 800ec32:	3313      	adds	r3, #19
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	f023 0303 	bic.w	r3, r3, #3
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	88bb      	ldrh	r3, [r7, #4]
 800ec3e:	3303      	adds	r3, #3
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	f023 0303 	bic.w	r3, r3, #3
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	4413      	add	r3, r2
 800ec4a:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800ec4c:	897a      	ldrh	r2, [r7, #10]
 800ec4e:	88bb      	ldrh	r3, [r7, #4]
 800ec50:	3303      	adds	r3, #3
 800ec52:	f023 0303 	bic.w	r3, r3, #3
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d201      	bcs.n	800ec5e <pbuf_alloc+0x242>
        return NULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e06e      	b.n	800ed3c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800ec5e:	897b      	ldrh	r3, [r7, #10]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fb29 	bl	800e2b8 <mem_malloc>
 800ec66:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d101      	bne.n	800ec72 <pbuf_alloc+0x256>
      return NULL;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e064      	b.n	800ed3c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800ec72:	8afb      	ldrh	r3, [r7, #22]
 800ec74:	3310      	adds	r3, #16
 800ec76:	69fa      	ldr	r2, [r7, #28]
 800ec78:	4413      	add	r3, r2
 800ec7a:	3303      	adds	r3, #3
 800ec7c:	f023 0303 	bic.w	r3, r3, #3
 800ec80:	461a      	mov	r2, r3
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	88ba      	ldrh	r2, [r7, #4]
 800ec8a:	811a      	strh	r2, [r3, #8]
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	891a      	ldrh	r2, [r3, #8]
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	2200      	movs	r2, #0
 800ec98:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	79ba      	ldrb	r2, [r7, #6]
 800ec9e:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	f003 0303 	and.w	r3, r3, #3
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d03f      	beq.n	800ed2c <pbuf_alloc+0x310>
 800ecac:	4b15      	ldr	r3, [pc, #84]	; (800ed04 <pbuf_alloc+0x2e8>)
 800ecae:	f240 1277 	movw	r2, #375	; 0x177
 800ecb2:	491c      	ldr	r1, [pc, #112]	; (800ed24 <pbuf_alloc+0x308>)
 800ecb4:	4815      	ldr	r0, [pc, #84]	; (800ed0c <pbuf_alloc+0x2f0>)
 800ecb6:	f00a fd15 	bl	80196e4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800ecba:	e037      	b.n	800ed2c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ecbc:	200b      	movs	r0, #11
 800ecbe:	f7ff fc6b 	bl	800e598 <memp_malloc>
 800ecc2:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d101      	bne.n	800ecce <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800ecca:	2300      	movs	r3, #0
 800eccc:	e036      	b.n	800ed3c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	88ba      	ldrh	r2, [r7, #4]
 800ecd8:	811a      	strh	r2, [r3, #8]
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	891a      	ldrh	r2, [r3, #8]
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ece2:	69fb      	ldr	r3, [r7, #28]
 800ece4:	2200      	movs	r2, #0
 800ece6:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	79ba      	ldrb	r2, [r7, #6]
 800ecec:	731a      	strb	r2, [r3, #12]
    break;
 800ecee:	e01e      	b.n	800ed2e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ecf0:	4b04      	ldr	r3, [pc, #16]	; (800ed04 <pbuf_alloc+0x2e8>)
 800ecf2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800ecf6:	490c      	ldr	r1, [pc, #48]	; (800ed28 <pbuf_alloc+0x30c>)
 800ecf8:	4804      	ldr	r0, [pc, #16]	; (800ed0c <pbuf_alloc+0x2f0>)
 800ecfa:	f00a fcf3 	bl	80196e4 <iprintf>
    return NULL;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	e01c      	b.n	800ed3c <pbuf_alloc+0x320>
 800ed02:	bf00      	nop
 800ed04:	0801ad60 	.word	0x0801ad60
 800ed08:	0801ad90 	.word	0x0801ad90
 800ed0c:	0801adac 	.word	0x0801adac
 800ed10:	0801add4 	.word	0x0801add4
 800ed14:	0801ae04 	.word	0x0801ae04
 800ed18:	0801ae38 	.word	0x0801ae38
 800ed1c:	0801ae6c 	.word	0x0801ae6c
 800ed20:	0801ae80 	.word	0x0801ae80
 800ed24:	0801aeb0 	.word	0x0801aeb0
 800ed28:	0801aedc 	.word	0x0801aedc
    break;
 800ed2c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	2201      	movs	r2, #1
 800ed32:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	2200      	movs	r2, #0
 800ed38:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ed3a:	69fb      	ldr	r3, [r7, #28]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3720      	adds	r7, #32
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	603b      	str	r3, [r7, #0]
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	71fb      	strb	r3, [r7, #7]
 800ed50:	460b      	mov	r3, r1
 800ed52:	80bb      	strh	r3, [r7, #4]
 800ed54:	4613      	mov	r3, r2
 800ed56:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800ed58:	79fb      	ldrb	r3, [r7, #7]
 800ed5a:	2b04      	cmp	r3, #4
 800ed5c:	d81b      	bhi.n	800ed96 <pbuf_alloced_custom+0x52>
 800ed5e:	a201      	add	r2, pc, #4	; (adr r2, 800ed64 <pbuf_alloced_custom+0x20>)
 800ed60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed64:	0800ed79 	.word	0x0800ed79
 800ed68:	0800ed7f 	.word	0x0800ed7f
 800ed6c:	0800ed85 	.word	0x0800ed85
 800ed70:	0800ed8b 	.word	0x0800ed8b
 800ed74:	0800ed91 	.word	0x0800ed91
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800ed78:	2336      	movs	r3, #54	; 0x36
 800ed7a:	81fb      	strh	r3, [r7, #14]
    break;
 800ed7c:	e014      	b.n	800eda8 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800ed7e:	2322      	movs	r3, #34	; 0x22
 800ed80:	81fb      	strh	r3, [r7, #14]
    break;
 800ed82:	e011      	b.n	800eda8 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800ed84:	230e      	movs	r3, #14
 800ed86:	81fb      	strh	r3, [r7, #14]
    break;
 800ed88:	e00e      	b.n	800eda8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	81fb      	strh	r3, [r7, #14]
    break;
 800ed8e:	e00b      	b.n	800eda8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	81fb      	strh	r3, [r7, #14]
    break;
 800ed94:	e008      	b.n	800eda8 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800ed96:	4b1d      	ldr	r3, [pc, #116]	; (800ee0c <pbuf_alloced_custom+0xc8>)
 800ed98:	f240 12c5 	movw	r2, #453	; 0x1c5
 800ed9c:	491c      	ldr	r1, [pc, #112]	; (800ee10 <pbuf_alloced_custom+0xcc>)
 800ed9e:	481d      	ldr	r0, [pc, #116]	; (800ee14 <pbuf_alloced_custom+0xd0>)
 800eda0:	f00a fca0 	bl	80196e4 <iprintf>
    return NULL;
 800eda4:	2300      	movs	r3, #0
 800eda6:	e02d      	b.n	800ee04 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800eda8:	89fb      	ldrh	r3, [r7, #14]
 800edaa:	3303      	adds	r3, #3
 800edac:	f023 0203 	bic.w	r2, r3, #3
 800edb0:	88bb      	ldrh	r3, [r7, #4]
 800edb2:	441a      	add	r2, r3
 800edb4:	8bbb      	ldrh	r3, [r7, #28]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d901      	bls.n	800edbe <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800edba:	2300      	movs	r3, #0
 800edbc:	e022      	b.n	800ee04 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	2200      	movs	r2, #0
 800edc2:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d008      	beq.n	800eddc <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800edca:	89fb      	ldrh	r3, [r7, #14]
 800edcc:	3303      	adds	r3, #3
 800edce:	f023 0303 	bic.w	r3, r3, #3
 800edd2:	69ba      	ldr	r2, [r7, #24]
 800edd4:	441a      	add	r2, r3
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	605a      	str	r2, [r3, #4]
 800edda:	e002      	b.n	800ede2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2200      	movs	r2, #0
 800ede0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2202      	movs	r2, #2
 800ede6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	88ba      	ldrh	r2, [r7, #4]
 800edec:	811a      	strh	r2, [r3, #8]
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	891a      	ldrh	r2, [r3, #8]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	79ba      	ldrb	r2, [r7, #6]
 800edfa:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2201      	movs	r2, #1
 800ee00:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800ee02:	683b      	ldr	r3, [r7, #0]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	0801ad60 	.word	0x0801ad60
 800ee10:	0801aef8 	.word	0x0801aef8
 800ee14:	0801adac 	.word	0x0801adac

0800ee18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	460b      	mov	r3, r1
 800ee22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d106      	bne.n	800ee38 <pbuf_realloc+0x20>
 800ee2a:	4b4b      	ldr	r3, [pc, #300]	; (800ef58 <pbuf_realloc+0x140>)
 800ee2c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ee30:	494a      	ldr	r1, [pc, #296]	; (800ef5c <pbuf_realloc+0x144>)
 800ee32:	484b      	ldr	r0, [pc, #300]	; (800ef60 <pbuf_realloc+0x148>)
 800ee34:	f00a fc56 	bl	80196e4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7b1b      	ldrb	r3, [r3, #12]
 800ee3c:	2b03      	cmp	r3, #3
 800ee3e:	d012      	beq.n	800ee66 <pbuf_realloc+0x4e>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	7b1b      	ldrb	r3, [r3, #12]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d00e      	beq.n	800ee66 <pbuf_realloc+0x4e>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	7b1b      	ldrb	r3, [r3, #12]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00a      	beq.n	800ee66 <pbuf_realloc+0x4e>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	7b1b      	ldrb	r3, [r3, #12]
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d006      	beq.n	800ee66 <pbuf_realloc+0x4e>
 800ee58:	4b3f      	ldr	r3, [pc, #252]	; (800ef58 <pbuf_realloc+0x140>)
 800ee5a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ee5e:	4941      	ldr	r1, [pc, #260]	; (800ef64 <pbuf_realloc+0x14c>)
 800ee60:	483f      	ldr	r0, [pc, #252]	; (800ef60 <pbuf_realloc+0x148>)
 800ee62:	f00a fc3f 	bl	80196e4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	891b      	ldrh	r3, [r3, #8]
 800ee6a:	887a      	ldrh	r2, [r7, #2]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d26f      	bcs.n	800ef50 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800ee70:	887b      	ldrh	r3, [r7, #2]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	8912      	ldrh	r2, [r2, #8]
 800ee76:	1a9b      	subs	r3, r3, r2
 800ee78:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ee7a:	887b      	ldrh	r3, [r7, #2]
 800ee7c:	827b      	strh	r3, [r7, #18]
  q = p;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ee82:	e025      	b.n	800eed0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	895b      	ldrh	r3, [r3, #10]
 800ee88:	8a7a      	ldrh	r2, [r7, #18]
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ee94:	4293      	cmp	r3, r2
 800ee96:	dd06      	ble.n	800eea6 <pbuf_realloc+0x8e>
 800ee98:	4b2f      	ldr	r3, [pc, #188]	; (800ef58 <pbuf_realloc+0x140>)
 800ee9a:	f240 220b 	movw	r2, #523	; 0x20b
 800ee9e:	4932      	ldr	r1, [pc, #200]	; (800ef68 <pbuf_realloc+0x150>)
 800eea0:	482f      	ldr	r0, [pc, #188]	; (800ef60 <pbuf_realloc+0x148>)
 800eea2:	f00a fc1f 	bl	80196e4 <iprintf>
    q->tot_len += (u16_t)grow;
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	891a      	ldrh	r2, [r3, #8]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	4413      	add	r3, r2
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <pbuf_realloc+0xb8>
 800eec2:	4b25      	ldr	r3, [pc, #148]	; (800ef58 <pbuf_realloc+0x140>)
 800eec4:	f240 220f 	movw	r2, #527	; 0x20f
 800eec8:	4928      	ldr	r1, [pc, #160]	; (800ef6c <pbuf_realloc+0x154>)
 800eeca:	4825      	ldr	r0, [pc, #148]	; (800ef60 <pbuf_realloc+0x148>)
 800eecc:	f00a fc0a 	bl	80196e4 <iprintf>
  while (rem_len > q->len) {
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	895b      	ldrh	r3, [r3, #10]
 800eed4:	8a7a      	ldrh	r2, [r7, #18]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d8d4      	bhi.n	800ee84 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	7b1b      	ldrb	r3, [r3, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d122      	bne.n	800ef28 <pbuf_realloc+0x110>
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	895b      	ldrh	r3, [r3, #10]
 800eee6:	8a7a      	ldrh	r2, [r7, #18]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d01d      	beq.n	800ef28 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	7b5b      	ldrb	r3, [r3, #13]
 800eef0:	f003 0302 	and.w	r3, r3, #2
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d117      	bne.n	800ef28 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	461a      	mov	r2, r3
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	8a7b      	ldrh	r3, [r7, #18]
 800ef06:	4413      	add	r3, r2
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	6978      	ldr	r0, [r7, #20]
 800ef0e:	f7ff f8e9 	bl	800e0e4 <mem_trim>
 800ef12:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d106      	bne.n	800ef28 <pbuf_realloc+0x110>
 800ef1a:	4b0f      	ldr	r3, [pc, #60]	; (800ef58 <pbuf_realloc+0x140>)
 800ef1c:	f240 221d 	movw	r2, #541	; 0x21d
 800ef20:	4913      	ldr	r1, [pc, #76]	; (800ef70 <pbuf_realloc+0x158>)
 800ef22:	480f      	ldr	r0, [pc, #60]	; (800ef60 <pbuf_realloc+0x148>)
 800ef24:	f00a fbde 	bl	80196e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	8a7a      	ldrh	r2, [r7, #18]
 800ef2c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	895a      	ldrh	r2, [r3, #10]
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d004      	beq.n	800ef48 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 f8dc 	bl	800f100 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	601a      	str	r2, [r3, #0]
 800ef4e:	e000      	b.n	800ef52 <pbuf_realloc+0x13a>
    return;
 800ef50:	bf00      	nop

}
 800ef52:	3718      	adds	r7, #24
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	0801ad60 	.word	0x0801ad60
 800ef5c:	0801af1c 	.word	0x0801af1c
 800ef60:	0801adac 	.word	0x0801adac
 800ef64:	0801af34 	.word	0x0801af34
 800ef68:	0801af50 	.word	0x0801af50
 800ef6c:	0801af64 	.word	0x0801af64
 800ef70:	0801af7c 	.word	0x0801af7c

0800ef74 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	807b      	strh	r3, [r7, #2]
 800ef80:	4613      	mov	r3, r2
 800ef82:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d106      	bne.n	800ef98 <pbuf_header_impl+0x24>
 800ef8a:	4b46      	ldr	r3, [pc, #280]	; (800f0a4 <pbuf_header_impl+0x130>)
 800ef8c:	f240 223f 	movw	r2, #575	; 0x23f
 800ef90:	4945      	ldr	r1, [pc, #276]	; (800f0a8 <pbuf_header_impl+0x134>)
 800ef92:	4846      	ldr	r0, [pc, #280]	; (800f0ac <pbuf_header_impl+0x138>)
 800ef94:	f00a fba6 	bl	80196e4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800ef98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d002      	beq.n	800efa6 <pbuf_header_impl+0x32>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <pbuf_header_impl+0x36>
    return 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	e078      	b.n	800f09c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800efaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	da10      	bge.n	800efd4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800efb2:	887b      	ldrh	r3, [r7, #2]
 800efb4:	425b      	negs	r3, r3
 800efb6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	895b      	ldrh	r3, [r3, #10]
 800efbc:	89fa      	ldrh	r2, [r7, #14]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d90a      	bls.n	800efd8 <pbuf_header_impl+0x64>
 800efc2:	4b38      	ldr	r3, [pc, #224]	; (800f0a4 <pbuf_header_impl+0x130>)
 800efc4:	f240 2247 	movw	r2, #583	; 0x247
 800efc8:	4939      	ldr	r1, [pc, #228]	; (800f0b0 <pbuf_header_impl+0x13c>)
 800efca:	4838      	ldr	r0, [pc, #224]	; (800f0ac <pbuf_header_impl+0x138>)
 800efcc:	f00a fb8a 	bl	80196e4 <iprintf>
 800efd0:	2301      	movs	r3, #1
 800efd2:	e063      	b.n	800f09c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800efd4:	887b      	ldrh	r3, [r7, #2]
 800efd6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	7b1b      	ldrb	r3, [r3, #12]
 800efdc:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800efe4:	89bb      	ldrh	r3, [r7, #12]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d002      	beq.n	800eff0 <pbuf_header_impl+0x7c>
 800efea:	89bb      	ldrh	r3, [r7, #12]
 800efec:	2b03      	cmp	r3, #3
 800efee:	d112      	bne.n	800f016 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	685a      	ldr	r2, [r3, #4]
 800eff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eff8:	425b      	negs	r3, r3
 800effa:	441a      	add	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685a      	ldr	r2, [r3, #4]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	3310      	adds	r3, #16
 800f008:	429a      	cmp	r2, r3
 800f00a:	d238      	bcs.n	800f07e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800f012:	2301      	movs	r3, #1
 800f014:	e042      	b.n	800f09c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800f016:	89bb      	ldrh	r3, [r7, #12]
 800f018:	2b02      	cmp	r3, #2
 800f01a:	d002      	beq.n	800f022 <pbuf_header_impl+0xae>
 800f01c:	89bb      	ldrh	r3, [r7, #12]
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d124      	bne.n	800f06c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800f022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f026:	2b00      	cmp	r3, #0
 800f028:	da0d      	bge.n	800f046 <pbuf_header_impl+0xd2>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	895b      	ldrh	r3, [r3, #10]
 800f02e:	89fa      	ldrh	r2, [r7, #14]
 800f030:	429a      	cmp	r2, r3
 800f032:	d808      	bhi.n	800f046 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	685a      	ldr	r2, [r3, #4]
 800f038:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f03c:	425b      	negs	r3, r3
 800f03e:	441a      	add	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	605a      	str	r2, [r3, #4]
 800f044:	e011      	b.n	800f06a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800f046:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	dd0b      	ble.n	800f066 <pbuf_header_impl+0xf2>
 800f04e:	787b      	ldrb	r3, [r7, #1]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d008      	beq.n	800f066 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	685a      	ldr	r2, [r3, #4]
 800f058:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f05c:	425b      	negs	r3, r3
 800f05e:	441a      	add	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	605a      	str	r2, [r3, #4]
 800f064:	e001      	b.n	800f06a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f066:	2301      	movs	r3, #1
 800f068:	e018      	b.n	800f09c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800f06a:	e008      	b.n	800f07e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800f06c:	4b0d      	ldr	r3, [pc, #52]	; (800f0a4 <pbuf_header_impl+0x130>)
 800f06e:	f240 2277 	movw	r2, #631	; 0x277
 800f072:	4910      	ldr	r1, [pc, #64]	; (800f0b4 <pbuf_header_impl+0x140>)
 800f074:	480d      	ldr	r0, [pc, #52]	; (800f0ac <pbuf_header_impl+0x138>)
 800f076:	f00a fb35 	bl	80196e4 <iprintf>
    return 1;
 800f07a:	2301      	movs	r3, #1
 800f07c:	e00e      	b.n	800f09c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	895a      	ldrh	r2, [r3, #10]
 800f082:	887b      	ldrh	r3, [r7, #2]
 800f084:	4413      	add	r3, r2
 800f086:	b29a      	uxth	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	891a      	ldrh	r2, [r3, #8]
 800f090:	887b      	ldrh	r3, [r7, #2]
 800f092:	4413      	add	r3, r2
 800f094:	b29a      	uxth	r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800f09a:	2300      	movs	r3, #0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3710      	adds	r7, #16
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	0801ad60 	.word	0x0801ad60
 800f0a8:	0801af98 	.word	0x0801af98
 800f0ac:	0801adac 	.word	0x0801adac
 800f0b0:	0801afa4 	.word	0x0801afa4
 800f0b4:	0801afc4 	.word	0x0801afc4

0800f0b8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800f0c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7ff ff51 	bl	800ef74 <pbuf_header_impl>
 800f0d2:	4603      	mov	r3, r0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3708      	adds	r7, #8
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800f0e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7ff ff3f 	bl	800ef74 <pbuf_header_impl>
 800f0f6:	4603      	mov	r3, r0
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d10b      	bne.n	800f126 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <pbuf_free+0x22>
 800f114:	4b41      	ldr	r3, [pc, #260]	; (800f21c <pbuf_free+0x11c>)
 800f116:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f11a:	4941      	ldr	r1, [pc, #260]	; (800f220 <pbuf_free+0x120>)
 800f11c:	4841      	ldr	r0, [pc, #260]	; (800f224 <pbuf_free+0x124>)
 800f11e:	f00a fae1 	bl	80196e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f122:	2300      	movs	r3, #0
 800f124:	e076      	b.n	800f214 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	7b1b      	ldrb	r3, [r3, #12]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d012      	beq.n	800f154 <pbuf_free+0x54>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7b1b      	ldrb	r3, [r3, #12]
 800f132:	2b01      	cmp	r3, #1
 800f134:	d00e      	beq.n	800f154 <pbuf_free+0x54>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	7b1b      	ldrb	r3, [r3, #12]
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	d00a      	beq.n	800f154 <pbuf_free+0x54>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	7b1b      	ldrb	r3, [r3, #12]
 800f142:	2b03      	cmp	r3, #3
 800f144:	d006      	beq.n	800f154 <pbuf_free+0x54>
 800f146:	4b35      	ldr	r3, [pc, #212]	; (800f21c <pbuf_free+0x11c>)
 800f148:	f240 22de 	movw	r2, #734	; 0x2de
 800f14c:	4936      	ldr	r1, [pc, #216]	; (800f228 <pbuf_free+0x128>)
 800f14e:	4835      	ldr	r0, [pc, #212]	; (800f224 <pbuf_free+0x124>)
 800f150:	f00a fac8 	bl	80196e4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f158:	e058      	b.n	800f20c <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f15a:	f009 fccd 	bl	8018af8 <sys_arch_protect>
 800f15e:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	89db      	ldrh	r3, [r3, #14]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d106      	bne.n	800f176 <pbuf_free+0x76>
 800f168:	4b2c      	ldr	r3, [pc, #176]	; (800f21c <pbuf_free+0x11c>)
 800f16a:	f240 22eb 	movw	r2, #747	; 0x2eb
 800f16e:	492f      	ldr	r1, [pc, #188]	; (800f22c <pbuf_free+0x12c>)
 800f170:	482c      	ldr	r0, [pc, #176]	; (800f224 <pbuf_free+0x124>)
 800f172:	f00a fab7 	bl	80196e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	89db      	ldrh	r3, [r3, #14]
 800f17a:	3b01      	subs	r3, #1
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	81da      	strh	r2, [r3, #14]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	89db      	ldrh	r3, [r3, #14]
 800f186:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800f188:	69b8      	ldr	r0, [r7, #24]
 800f18a:	f009 fcc3 	bl	8018b14 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f18e:	8afb      	ldrh	r3, [r7, #22]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d139      	bne.n	800f208 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	7b1b      	ldrb	r3, [r3, #12]
 800f19e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	7b5b      	ldrb	r3, [r3, #13]
 800f1a4:	f003 0302 	and.w	r3, r3, #2
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d011      	beq.n	800f1d0 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	691b      	ldr	r3, [r3, #16]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d106      	bne.n	800f1c6 <pbuf_free+0xc6>
 800f1b8:	4b18      	ldr	r3, [pc, #96]	; (800f21c <pbuf_free+0x11c>)
 800f1ba:	f240 22f9 	movw	r2, #761	; 0x2f9
 800f1be:	491c      	ldr	r1, [pc, #112]	; (800f230 <pbuf_free+0x130>)
 800f1c0:	4818      	ldr	r0, [pc, #96]	; (800f224 <pbuf_free+0x124>)
 800f1c2:	f00a fa8f 	bl	80196e4 <iprintf>
        pc->custom_free_function(p);
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	4798      	blx	r3
 800f1ce:	e015      	b.n	800f1fc <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800f1d0:	89fb      	ldrh	r3, [r7, #14]
 800f1d2:	2b03      	cmp	r3, #3
 800f1d4:	d104      	bne.n	800f1e0 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800f1d6:	6879      	ldr	r1, [r7, #4]
 800f1d8:	200c      	movs	r0, #12
 800f1da:	f7ff fa2f 	bl	800e63c <memp_free>
 800f1de:	e00d      	b.n	800f1fc <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800f1e0:	89fb      	ldrh	r3, [r7, #14]
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d002      	beq.n	800f1ec <pbuf_free+0xec>
 800f1e6:	89fb      	ldrh	r3, [r7, #14]
 800f1e8:	2b02      	cmp	r3, #2
 800f1ea:	d104      	bne.n	800f1f6 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800f1ec:	6879      	ldr	r1, [r7, #4]
 800f1ee:	200b      	movs	r0, #11
 800f1f0:	f7ff fa24 	bl	800e63c <memp_free>
 800f1f4:	e002      	b.n	800f1fc <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7fe ff06 	bl	800e008 <mem_free>
        }
      }
      count++;
 800f1fc:	7ffb      	ldrb	r3, [r7, #31]
 800f1fe:	3301      	adds	r3, #1
 800f200:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	607b      	str	r3, [r7, #4]
 800f206:	e001      	b.n	800f20c <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800f208:	2300      	movs	r3, #0
 800f20a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d1a3      	bne.n	800f15a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f212:	7ffb      	ldrb	r3, [r7, #31]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3720      	adds	r7, #32
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	0801ad60 	.word	0x0801ad60
 800f220:	0801af98 	.word	0x0801af98
 800f224:	0801adac 	.word	0x0801adac
 800f228:	0801afd4 	.word	0x0801afd4
 800f22c:	0801afec 	.word	0x0801afec
 800f230:	0801b004 	.word	0x0801b004

0800f234 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f240:	e005      	b.n	800f24e <pbuf_clen+0x1a>
    ++len;
 800f242:	89fb      	ldrh	r3, [r7, #14]
 800f244:	3301      	adds	r3, #1
 800f246:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1f6      	bne.n	800f242 <pbuf_clen+0xe>
  }
  return len;
 800f254:	89fb      	ldrh	r3, [r7, #14]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
	...

0800f264 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d016      	beq.n	800f2a0 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800f272:	f009 fc41 	bl	8018af8 <sys_arch_protect>
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	89db      	ldrh	r3, [r3, #14]
 800f27c:	3301      	adds	r3, #1
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	81da      	strh	r2, [r3, #14]
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f009 fc45 	bl	8018b14 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	89db      	ldrh	r3, [r3, #14]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d106      	bne.n	800f2a0 <pbuf_ref+0x3c>
 800f292:	4b05      	ldr	r3, [pc, #20]	; (800f2a8 <pbuf_ref+0x44>)
 800f294:	f240 3239 	movw	r2, #825	; 0x339
 800f298:	4904      	ldr	r1, [pc, #16]	; (800f2ac <pbuf_ref+0x48>)
 800f29a:	4805      	ldr	r0, [pc, #20]	; (800f2b0 <pbuf_ref+0x4c>)
 800f29c:	f00a fa22 	bl	80196e4 <iprintf>
  }
}
 800f2a0:	bf00      	nop
 800f2a2:	3710      	adds	r7, #16
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	0801ad60 	.word	0x0801ad60
 800f2ac:	0801b028 	.word	0x0801b028
 800f2b0:	0801adac 	.word	0x0801adac

0800f2b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <pbuf_cat+0x16>
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d107      	bne.n	800f2da <pbuf_cat+0x26>
 800f2ca:	4b20      	ldr	r3, [pc, #128]	; (800f34c <pbuf_cat+0x98>)
 800f2cc:	f240 324d 	movw	r2, #845	; 0x34d
 800f2d0:	491f      	ldr	r1, [pc, #124]	; (800f350 <pbuf_cat+0x9c>)
 800f2d2:	4820      	ldr	r0, [pc, #128]	; (800f354 <pbuf_cat+0xa0>)
 800f2d4:	f00a fa06 	bl	80196e4 <iprintf>
 800f2d8:	e034      	b.n	800f344 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	60fb      	str	r3, [r7, #12]
 800f2de:	e00a      	b.n	800f2f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	891a      	ldrh	r2, [r3, #8]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	891b      	ldrh	r3, [r3, #8]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	60fb      	str	r3, [r7, #12]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1f0      	bne.n	800f2e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	891a      	ldrh	r2, [r3, #8]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	895b      	ldrh	r3, [r3, #10]
 800f306:	429a      	cmp	r2, r3
 800f308:	d006      	beq.n	800f318 <pbuf_cat+0x64>
 800f30a:	4b10      	ldr	r3, [pc, #64]	; (800f34c <pbuf_cat+0x98>)
 800f30c:	f240 3255 	movw	r2, #853	; 0x355
 800f310:	4911      	ldr	r1, [pc, #68]	; (800f358 <pbuf_cat+0xa4>)
 800f312:	4810      	ldr	r0, [pc, #64]	; (800f354 <pbuf_cat+0xa0>)
 800f314:	f00a f9e6 	bl	80196e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d006      	beq.n	800f32e <pbuf_cat+0x7a>
 800f320:	4b0a      	ldr	r3, [pc, #40]	; (800f34c <pbuf_cat+0x98>)
 800f322:	f240 3256 	movw	r2, #854	; 0x356
 800f326:	490d      	ldr	r1, [pc, #52]	; (800f35c <pbuf_cat+0xa8>)
 800f328:	480a      	ldr	r0, [pc, #40]	; (800f354 <pbuf_cat+0xa0>)
 800f32a:	f00a f9db 	bl	80196e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	891a      	ldrh	r2, [r3, #8]
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	891b      	ldrh	r3, [r3, #8]
 800f336:	4413      	add	r3, r2
 800f338:	b29a      	uxth	r2, r3
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	683a      	ldr	r2, [r7, #0]
 800f342:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	0801ad60 	.word	0x0801ad60
 800f350:	0801b03c 	.word	0x0801b03c
 800f354:	0801adac 	.word	0x0801adac
 800f358:	0801b074 	.word	0x0801b074
 800f35c:	0801b0a4 	.word	0x0801b0a4

0800f360 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff ffa1 	bl	800f2b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f372:	6838      	ldr	r0, [r7, #0]
 800f374:	f7ff ff76 	bl	800f264 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f378:	bf00      	nop
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800f38a:	2300      	movs	r3, #0
 800f38c:	81fb      	strh	r3, [r7, #14]
 800f38e:	2300      	movs	r3, #0
 800f390:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d008      	beq.n	800f3aa <pbuf_copy+0x2a>
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d005      	beq.n	800f3aa <pbuf_copy+0x2a>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	891a      	ldrh	r2, [r3, #8]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	891b      	ldrh	r3, [r3, #8]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d209      	bcs.n	800f3be <pbuf_copy+0x3e>
 800f3aa:	4b54      	ldr	r3, [pc, #336]	; (800f4fc <pbuf_copy+0x17c>)
 800f3ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f3b0:	4953      	ldr	r1, [pc, #332]	; (800f500 <pbuf_copy+0x180>)
 800f3b2:	4854      	ldr	r0, [pc, #336]	; (800f504 <pbuf_copy+0x184>)
 800f3b4:	f00a f996 	bl	80196e4 <iprintf>
 800f3b8:	f06f 030f 	mvn.w	r3, #15
 800f3bc:	e099      	b.n	800f4f2 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	895b      	ldrh	r3, [r3, #10]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	89fb      	ldrh	r3, [r7, #14]
 800f3c6:	1ad2      	subs	r2, r2, r3
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	895b      	ldrh	r3, [r3, #10]
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	89bb      	ldrh	r3, [r7, #12]
 800f3d0:	1acb      	subs	r3, r1, r3
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	db05      	blt.n	800f3e2 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	895a      	ldrh	r2, [r3, #10]
 800f3da:	89bb      	ldrh	r3, [r7, #12]
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	817b      	strh	r3, [r7, #10]
 800f3e0:	e004      	b.n	800f3ec <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	895a      	ldrh	r2, [r3, #10]
 800f3e6:	89fb      	ldrh	r3, [r7, #14]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685a      	ldr	r2, [r3, #4]
 800f3f0:	89fb      	ldrh	r3, [r7, #14]
 800f3f2:	18d0      	adds	r0, r2, r3
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	685a      	ldr	r2, [r3, #4]
 800f3f8:	89bb      	ldrh	r3, [r7, #12]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	897a      	ldrh	r2, [r7, #10]
 800f3fe:	4619      	mov	r1, r3
 800f400:	f00a f8b5 	bl	801956e <memcpy>
    offset_to += len;
 800f404:	89fa      	ldrh	r2, [r7, #14]
 800f406:	897b      	ldrh	r3, [r7, #10]
 800f408:	4413      	add	r3, r2
 800f40a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800f40c:	89ba      	ldrh	r2, [r7, #12]
 800f40e:	897b      	ldrh	r3, [r7, #10]
 800f410:	4413      	add	r3, r2
 800f412:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	895b      	ldrh	r3, [r3, #10]
 800f418:	89fa      	ldrh	r2, [r7, #14]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d906      	bls.n	800f42c <pbuf_copy+0xac>
 800f41e:	4b37      	ldr	r3, [pc, #220]	; (800f4fc <pbuf_copy+0x17c>)
 800f420:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f424:	4938      	ldr	r1, [pc, #224]	; (800f508 <pbuf_copy+0x188>)
 800f426:	4837      	ldr	r0, [pc, #220]	; (800f504 <pbuf_copy+0x184>)
 800f428:	f00a f95c 	bl	80196e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	895b      	ldrh	r3, [r3, #10]
 800f430:	89ba      	ldrh	r2, [r7, #12]
 800f432:	429a      	cmp	r2, r3
 800f434:	d906      	bls.n	800f444 <pbuf_copy+0xc4>
 800f436:	4b31      	ldr	r3, [pc, #196]	; (800f4fc <pbuf_copy+0x17c>)
 800f438:	f240 32ce 	movw	r2, #974	; 0x3ce
 800f43c:	4933      	ldr	r1, [pc, #204]	; (800f50c <pbuf_copy+0x18c>)
 800f43e:	4831      	ldr	r0, [pc, #196]	; (800f504 <pbuf_copy+0x184>)
 800f440:	f00a f950 	bl	80196e4 <iprintf>
    if (offset_from >= p_from->len) {
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	895b      	ldrh	r3, [r3, #10]
 800f448:	89ba      	ldrh	r2, [r7, #12]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d304      	bcc.n	800f458 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	895b      	ldrh	r3, [r3, #10]
 800f45c:	89fa      	ldrh	r2, [r7, #14]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d114      	bne.n	800f48c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f462:	2300      	movs	r3, #0
 800f464:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d10c      	bne.n	800f48c <pbuf_copy+0x10c>
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d009      	beq.n	800f48c <pbuf_copy+0x10c>
 800f478:	4b20      	ldr	r3, [pc, #128]	; (800f4fc <pbuf_copy+0x17c>)
 800f47a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f47e:	4924      	ldr	r1, [pc, #144]	; (800f510 <pbuf_copy+0x190>)
 800f480:	4820      	ldr	r0, [pc, #128]	; (800f504 <pbuf_copy+0x184>)
 800f482:	f00a f92f 	bl	80196e4 <iprintf>
 800f486:	f06f 030f 	mvn.w	r3, #15
 800f48a:	e032      	b.n	800f4f2 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d013      	beq.n	800f4ba <pbuf_copy+0x13a>
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	895a      	ldrh	r2, [r3, #10]
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	891b      	ldrh	r3, [r3, #8]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d10d      	bne.n	800f4ba <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d009      	beq.n	800f4ba <pbuf_copy+0x13a>
 800f4a6:	4b15      	ldr	r3, [pc, #84]	; (800f4fc <pbuf_copy+0x17c>)
 800f4a8:	f240 32de 	movw	r2, #990	; 0x3de
 800f4ac:	4919      	ldr	r1, [pc, #100]	; (800f514 <pbuf_copy+0x194>)
 800f4ae:	4815      	ldr	r0, [pc, #84]	; (800f504 <pbuf_copy+0x184>)
 800f4b0:	f00a f918 	bl	80196e4 <iprintf>
 800f4b4:	f06f 0305 	mvn.w	r3, #5
 800f4b8:	e01b      	b.n	800f4f2 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d013      	beq.n	800f4e8 <pbuf_copy+0x168>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	895a      	ldrh	r2, [r3, #10]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	891b      	ldrh	r3, [r3, #8]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d10d      	bne.n	800f4e8 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d009      	beq.n	800f4e8 <pbuf_copy+0x168>
 800f4d4:	4b09      	ldr	r3, [pc, #36]	; (800f4fc <pbuf_copy+0x17c>)
 800f4d6:	f240 32e3 	movw	r2, #995	; 0x3e3
 800f4da:	490e      	ldr	r1, [pc, #56]	; (800f514 <pbuf_copy+0x194>)
 800f4dc:	4809      	ldr	r0, [pc, #36]	; (800f504 <pbuf_copy+0x184>)
 800f4de:	f00a f901 	bl	80196e4 <iprintf>
 800f4e2:	f06f 0305 	mvn.w	r3, #5
 800f4e6:	e004      	b.n	800f4f2 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f47f af67 	bne.w	800f3be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	0801ad60 	.word	0x0801ad60
 800f500:	0801b0f0 	.word	0x0801b0f0
 800f504:	0801adac 	.word	0x0801adac
 800f508:	0801b120 	.word	0x0801b120
 800f50c:	0801b138 	.word	0x0801b138
 800f510:	0801b154 	.word	0x0801b154
 800f514:	0801b164 	.word	0x0801b164

0800f518 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b088      	sub	sp, #32
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	4611      	mov	r1, r2
 800f524:	461a      	mov	r2, r3
 800f526:	460b      	mov	r3, r1
 800f528:	80fb      	strh	r3, [r7, #6]
 800f52a:	4613      	mov	r3, r2
 800f52c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d108      	bne.n	800f54a <pbuf_copy_partial+0x32>
 800f538:	4b30      	ldr	r3, [pc, #192]	; (800f5fc <pbuf_copy_partial+0xe4>)
 800f53a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f53e:	4930      	ldr	r1, [pc, #192]	; (800f600 <pbuf_copy_partial+0xe8>)
 800f540:	4830      	ldr	r0, [pc, #192]	; (800f604 <pbuf_copy_partial+0xec>)
 800f542:	f00a f8cf 	bl	80196e4 <iprintf>
 800f546:	2300      	movs	r3, #0
 800f548:	e054      	b.n	800f5f4 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d108      	bne.n	800f562 <pbuf_copy_partial+0x4a>
 800f550:	4b2a      	ldr	r3, [pc, #168]	; (800f5fc <pbuf_copy_partial+0xe4>)
 800f552:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f556:	492c      	ldr	r1, [pc, #176]	; (800f608 <pbuf_copy_partial+0xf0>)
 800f558:	482a      	ldr	r0, [pc, #168]	; (800f604 <pbuf_copy_partial+0xec>)
 800f55a:	f00a f8c3 	bl	80196e4 <iprintf>
 800f55e:	2300      	movs	r3, #0
 800f560:	e048      	b.n	800f5f4 <pbuf_copy_partial+0xdc>

  left = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <pbuf_copy_partial+0x5a>
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d101      	bne.n	800f576 <pbuf_copy_partial+0x5e>
    return 0;
 800f572:	2300      	movs	r3, #0
 800f574:	e03e      	b.n	800f5f4 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	61fb      	str	r3, [r7, #28]
 800f57a:	e034      	b.n	800f5e6 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800f57c:	88bb      	ldrh	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d00a      	beq.n	800f598 <pbuf_copy_partial+0x80>
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	895b      	ldrh	r3, [r3, #10]
 800f586:	88ba      	ldrh	r2, [r7, #4]
 800f588:	429a      	cmp	r2, r3
 800f58a:	d305      	bcc.n	800f598 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	895b      	ldrh	r3, [r3, #10]
 800f590:	88ba      	ldrh	r2, [r7, #4]
 800f592:	1ad3      	subs	r3, r2, r3
 800f594:	80bb      	strh	r3, [r7, #4]
 800f596:	e023      	b.n	800f5e0 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	895a      	ldrh	r2, [r3, #10]
 800f59c:	88bb      	ldrh	r3, [r7, #4]
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f5a2:	8b3a      	ldrh	r2, [r7, #24]
 800f5a4:	88fb      	ldrh	r3, [r7, #6]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d901      	bls.n	800f5ae <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800f5aa:	88fb      	ldrh	r3, [r7, #6]
 800f5ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800f5ae:	8b7b      	ldrh	r3, [r7, #26]
 800f5b0:	68ba      	ldr	r2, [r7, #8]
 800f5b2:	18d0      	adds	r0, r2, r3
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	685a      	ldr	r2, [r3, #4]
 800f5b8:	88bb      	ldrh	r3, [r7, #4]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	8b3a      	ldrh	r2, [r7, #24]
 800f5be:	4619      	mov	r1, r3
 800f5c0:	f009 ffd5 	bl	801956e <memcpy>
      copied_total += buf_copy_len;
 800f5c4:	8afa      	ldrh	r2, [r7, #22]
 800f5c6:	8b3b      	ldrh	r3, [r7, #24]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800f5cc:	8b7a      	ldrh	r2, [r7, #26]
 800f5ce:	8b3b      	ldrh	r3, [r7, #24]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800f5d4:	88fa      	ldrh	r2, [r7, #6]
 800f5d6:	8b3b      	ldrh	r3, [r7, #24]
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	61fb      	str	r3, [r7, #28]
 800f5e6:	88fb      	ldrh	r3, [r7, #6]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d002      	beq.n	800f5f2 <pbuf_copy_partial+0xda>
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d1c4      	bne.n	800f57c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800f5f2:	8afb      	ldrh	r3, [r7, #22]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3720      	adds	r7, #32
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	0801ad60 	.word	0x0801ad60
 800f600:	0801b190 	.word	0x0801b190
 800f604:	0801adac 	.word	0x0801adac
 800f608:	0801b1b0 	.word	0x0801b1b0

0800f60c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f60c:	b480      	push	{r7}
 800f60e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800f610:	bf00      	nop
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
	...

0800f61c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f620:	f000 fdf0 	bl	8010204 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f624:	4b07      	ldr	r3, [pc, #28]	; (800f644 <tcp_tmr+0x28>)
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	3301      	adds	r3, #1
 800f62a:	b2da      	uxtb	r2, r3
 800f62c:	4b05      	ldr	r3, [pc, #20]	; (800f644 <tcp_tmr+0x28>)
 800f62e:	701a      	strb	r2, [r3, #0]
 800f630:	4b04      	ldr	r3, [pc, #16]	; (800f644 <tcp_tmr+0x28>)
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	f003 0301 	and.w	r3, r3, #1
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f63c:	f000 fb22 	bl	800fc84 <tcp_slowtmr>
  }
}
 800f640:	bf00      	nop
 800f642:	bd80      	pop	{r7, pc}
 800f644:	20004205 	.word	0x20004205

0800f648 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	60fb      	str	r3, [r7, #12]
 800f656:	e00a      	b.n	800f66e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f65c:	683a      	ldr	r2, [r7, #0]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d102      	bne.n	800f668 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2200      	movs	r2, #0
 800f666:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	60fb      	str	r3, [r7, #12]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1f1      	bne.n	800f658 <tcp_remove_listener+0x10>
      }
   }
}
 800f674:	bf00      	nop
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d105      	bne.n	800f69a <tcp_listen_closed+0x1a>
 800f68e:	4b13      	ldr	r3, [pc, #76]	; (800f6dc <tcp_listen_closed+0x5c>)
 800f690:	22c0      	movs	r2, #192	; 0xc0
 800f692:	4913      	ldr	r1, [pc, #76]	; (800f6e0 <tcp_listen_closed+0x60>)
 800f694:	4813      	ldr	r0, [pc, #76]	; (800f6e4 <tcp_listen_closed+0x64>)
 800f696:	f00a f825 	bl	80196e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	7d1b      	ldrb	r3, [r3, #20]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d005      	beq.n	800f6ae <tcp_listen_closed+0x2e>
 800f6a2:	4b0e      	ldr	r3, [pc, #56]	; (800f6dc <tcp_listen_closed+0x5c>)
 800f6a4:	22c1      	movs	r2, #193	; 0xc1
 800f6a6:	4910      	ldr	r1, [pc, #64]	; (800f6e8 <tcp_listen_closed+0x68>)
 800f6a8:	480e      	ldr	r0, [pc, #56]	; (800f6e4 <tcp_listen_closed+0x64>)
 800f6aa:	f00a f81b 	bl	80196e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	60fb      	str	r3, [r7, #12]
 800f6b2:	e00b      	b.n	800f6cc <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800f6b4:	4a0d      	ldr	r2, [pc, #52]	; (800f6ec <tcp_listen_closed+0x6c>)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	6879      	ldr	r1, [r7, #4]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff ffc1 	bl	800f648 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2b03      	cmp	r3, #3
 800f6d0:	d9f0      	bls.n	800f6b4 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f6d2:	bf00      	nop
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	0801b2e4 	.word	0x0801b2e4
 800f6e0:	0801b314 	.word	0x0801b314
 800f6e4:	0801b320 	.word	0x0801b320
 800f6e8:	0801b348 	.word	0x0801b348
 800f6ec:	0801ccb0 	.word	0x0801ccb0

0800f6f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f6f0:	b5b0      	push	{r4, r5, r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af02      	add	r7, sp, #8
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f6fc:	78fb      	ldrb	r3, [r7, #3]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d075      	beq.n	800f7ee <tcp_close_shutdown+0xfe>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	7d1b      	ldrb	r3, [r3, #20]
 800f706:	2b04      	cmp	r3, #4
 800f708:	d003      	beq.n	800f712 <tcp_close_shutdown+0x22>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	7d1b      	ldrb	r3, [r3, #20]
 800f70e:	2b07      	cmp	r3, #7
 800f710:	d16d      	bne.n	800f7ee <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f716:	2b00      	cmp	r3, #0
 800f718:	d104      	bne.n	800f724 <tcp_close_shutdown+0x34>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f71e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f722:	d064      	beq.n	800f7ee <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	7e9b      	ldrb	r3, [r3, #26]
 800f728:	f003 0310 	and.w	r3, r3, #16
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <tcp_close_shutdown+0x4e>
 800f730:	4b59      	ldr	r3, [pc, #356]	; (800f898 <tcp_close_shutdown+0x1a8>)
 800f732:	f240 120f 	movw	r2, #271	; 0x10f
 800f736:	4959      	ldr	r1, [pc, #356]	; (800f89c <tcp_close_shutdown+0x1ac>)
 800f738:	4859      	ldr	r0, [pc, #356]	; (800f8a0 <tcp_close_shutdown+0x1b0>)
 800f73a:	f009 ffd3 	bl	80196e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f746:	687c      	ldr	r4, [r7, #4]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	1d1d      	adds	r5, r3, #4
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	8adb      	ldrh	r3, [r3, #22]
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	8b12      	ldrh	r2, [r2, #24]
 800f754:	9201      	str	r2, [sp, #4]
 800f756:	9300      	str	r3, [sp, #0]
 800f758:	462b      	mov	r3, r5
 800f75a:	4622      	mov	r2, r4
 800f75c:	f004 f862 	bl	8013824 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 ffc5 	bl	80106f0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f766:	4b4f      	ldr	r3, [pc, #316]	; (800f8a4 <tcp_close_shutdown+0x1b4>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d105      	bne.n	800f77c <tcp_close_shutdown+0x8c>
 800f770:	4b4c      	ldr	r3, [pc, #304]	; (800f8a4 <tcp_close_shutdown+0x1b4>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	68db      	ldr	r3, [r3, #12]
 800f776:	4a4b      	ldr	r2, [pc, #300]	; (800f8a4 <tcp_close_shutdown+0x1b4>)
 800f778:	6013      	str	r3, [r2, #0]
 800f77a:	e013      	b.n	800f7a4 <tcp_close_shutdown+0xb4>
 800f77c:	4b49      	ldr	r3, [pc, #292]	; (800f8a4 <tcp_close_shutdown+0x1b4>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	60fb      	str	r3, [r7, #12]
 800f782:	e00c      	b.n	800f79e <tcp_close_shutdown+0xae>
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d104      	bne.n	800f798 <tcp_close_shutdown+0xa8>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	68da      	ldr	r2, [r3, #12]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	60da      	str	r2, [r3, #12]
 800f796:	e005      	b.n	800f7a4 <tcp_close_shutdown+0xb4>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	60fb      	str	r3, [r7, #12]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1ef      	bne.n	800f784 <tcp_close_shutdown+0x94>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	60da      	str	r2, [r3, #12]
 800f7aa:	4b3f      	ldr	r3, [pc, #252]	; (800f8a8 <tcp_close_shutdown+0x1b8>)
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	7d1b      	ldrb	r3, [r3, #20]
 800f7b4:	2b04      	cmp	r3, #4
 800f7b6:	d10c      	bne.n	800f7d2 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	220a      	movs	r2, #10
 800f7bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f7be:	4b3b      	ldr	r3, [pc, #236]	; (800f8ac <tcp_close_shutdown+0x1bc>)
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	60da      	str	r2, [r3, #12]
 800f7c6:	4a39      	ldr	r2, [pc, #228]	; (800f8ac <tcp_close_shutdown+0x1bc>)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6013      	str	r3, [r2, #0]
 800f7cc:	f004 fa7a 	bl	8013cc4 <tcp_timer_needed>
 800f7d0:	e00b      	b.n	800f7ea <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800f7d2:	4b37      	ldr	r3, [pc, #220]	; (800f8b0 <tcp_close_shutdown+0x1c0>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d102      	bne.n	800f7e2 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800f7dc:	f003 faec 	bl	8012db8 <tcp_trigger_input_pcb_close>
 800f7e0:	e003      	b.n	800f7ea <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800f7e2:	6879      	ldr	r1, [r7, #4]
 800f7e4:	2001      	movs	r0, #1
 800f7e6:	f7fe ff29 	bl	800e63c <memp_free>
        }
      }
      return ERR_OK;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	e050      	b.n	800f890 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	7d1b      	ldrb	r3, [r3, #20]
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d02e      	beq.n	800f854 <tcp_close_shutdown+0x164>
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	d038      	beq.n	800f86c <tcp_close_shutdown+0x17c>
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d142      	bne.n	800f884 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	8adb      	ldrh	r3, [r3, #22]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d021      	beq.n	800f84a <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f806:	4b2b      	ldr	r3, [pc, #172]	; (800f8b4 <tcp_close_shutdown+0x1c4>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d105      	bne.n	800f81c <tcp_close_shutdown+0x12c>
 800f810:	4b28      	ldr	r3, [pc, #160]	; (800f8b4 <tcp_close_shutdown+0x1c4>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	4a27      	ldr	r2, [pc, #156]	; (800f8b4 <tcp_close_shutdown+0x1c4>)
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	e013      	b.n	800f844 <tcp_close_shutdown+0x154>
 800f81c:	4b25      	ldr	r3, [pc, #148]	; (800f8b4 <tcp_close_shutdown+0x1c4>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	60bb      	str	r3, [r7, #8]
 800f822:	e00c      	b.n	800f83e <tcp_close_shutdown+0x14e>
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	687a      	ldr	r2, [r7, #4]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d104      	bne.n	800f838 <tcp_close_shutdown+0x148>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	68da      	ldr	r2, [r3, #12]
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	60da      	str	r2, [r3, #12]
 800f836:	e005      	b.n	800f844 <tcp_close_shutdown+0x154>
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	60bb      	str	r3, [r7, #8]
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d1ef      	bne.n	800f824 <tcp_close_shutdown+0x134>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2200      	movs	r2, #0
 800f848:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800f84a:	6879      	ldr	r1, [r7, #4]
 800f84c:	2001      	movs	r0, #1
 800f84e:	f7fe fef5 	bl	800e63c <memp_free>
    break;
 800f852:	e01c      	b.n	800f88e <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7ff ff13 	bl	800f680 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f85a:	6879      	ldr	r1, [r7, #4]
 800f85c:	4816      	ldr	r0, [pc, #88]	; (800f8b8 <tcp_close_shutdown+0x1c8>)
 800f85e:	f000 ff89 	bl	8010774 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f862:	6879      	ldr	r1, [r7, #4]
 800f864:	2002      	movs	r0, #2
 800f866:	f7fe fee9 	bl	800e63c <memp_free>
    break;
 800f86a:	e010      	b.n	800f88e <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	480d      	ldr	r0, [pc, #52]	; (800f8a4 <tcp_close_shutdown+0x1b4>)
 800f870:	f000 ff80 	bl	8010774 <tcp_pcb_remove>
 800f874:	4b0c      	ldr	r3, [pc, #48]	; (800f8a8 <tcp_close_shutdown+0x1b8>)
 800f876:	2201      	movs	r2, #1
 800f878:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800f87a:	6879      	ldr	r1, [r7, #4]
 800f87c:	2001      	movs	r0, #1
 800f87e:	f7fe fedd 	bl	800e63c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800f882:	e004      	b.n	800f88e <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 f819 	bl	800f8bc <tcp_close_shutdown_fin>
 800f88a:	4603      	mov	r3, r0
 800f88c:	e000      	b.n	800f890 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800f88e:	2300      	movs	r3, #0
}
 800f890:	4618      	mov	r0, r3
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bdb0      	pop	{r4, r5, r7, pc}
 800f898:	0801b2e4 	.word	0x0801b2e4
 800f89c:	0801b360 	.word	0x0801b360
 800f8a0:	0801b320 	.word	0x0801b320
 800f8a4:	2000ab30 	.word	0x2000ab30
 800f8a8:	2000ab2c 	.word	0x2000ab2c
 800f8ac:	2000ab40 	.word	0x2000ab40
 800f8b0:	2000ab44 	.word	0x2000ab44
 800f8b4:	2000ab3c 	.word	0x2000ab3c
 800f8b8:	2000ab38 	.word	0x2000ab38

0800f8bc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d106      	bne.n	800f8d8 <tcp_close_shutdown_fin+0x1c>
 800f8ca:	4b2c      	ldr	r3, [pc, #176]	; (800f97c <tcp_close_shutdown_fin+0xc0>)
 800f8cc:	f240 124d 	movw	r2, #333	; 0x14d
 800f8d0:	492b      	ldr	r1, [pc, #172]	; (800f980 <tcp_close_shutdown_fin+0xc4>)
 800f8d2:	482c      	ldr	r0, [pc, #176]	; (800f984 <tcp_close_shutdown_fin+0xc8>)
 800f8d4:	f009 ff06 	bl	80196e4 <iprintf>

  switch (pcb->state) {
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	7d1b      	ldrb	r3, [r3, #20]
 800f8dc:	2b04      	cmp	r3, #4
 800f8de:	d010      	beq.n	800f902 <tcp_close_shutdown_fin+0x46>
 800f8e0:	2b07      	cmp	r3, #7
 800f8e2:	d01b      	beq.n	800f91c <tcp_close_shutdown_fin+0x60>
 800f8e4:	2b03      	cmp	r3, #3
 800f8e6:	d126      	bne.n	800f936 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f003 faf1 	bl	8012ed0 <tcp_send_fin>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f8f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d11f      	bne.n	800f93a <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2205      	movs	r2, #5
 800f8fe:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f900:	e01b      	b.n	800f93a <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f003 fae4 	bl	8012ed0 <tcp_send_fin>
 800f908:	4603      	mov	r3, r0
 800f90a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f90c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d114      	bne.n	800f93e <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2205      	movs	r2, #5
 800f918:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f91a:	e010      	b.n	800f93e <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f003 fad7 	bl	8012ed0 <tcp_send_fin>
 800f922:	4603      	mov	r3, r0
 800f924:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d109      	bne.n	800f942 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2209      	movs	r2, #9
 800f932:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f934:	e005      	b.n	800f942 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800f936:	2300      	movs	r3, #0
 800f938:	e01c      	b.n	800f974 <tcp_close_shutdown_fin+0xb8>
    break;
 800f93a:	bf00      	nop
 800f93c:	e002      	b.n	800f944 <tcp_close_shutdown_fin+0x88>
    break;
 800f93e:	bf00      	nop
 800f940:	e000      	b.n	800f944 <tcp_close_shutdown_fin+0x88>
    break;
 800f942:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d103      	bne.n	800f954 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f003 fcdf 	bl	8013310 <tcp_output>
 800f952:	e00d      	b.n	800f970 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800f954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f95c:	d108      	bne.n	800f970 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	7e9b      	ldrb	r3, [r3, #26]
 800f962:	f043 0308 	orr.w	r3, r3, #8
 800f966:	b2da      	uxtb	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f96c:	2300      	movs	r3, #0
 800f96e:	e001      	b.n	800f974 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800f970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	0801b2e4 	.word	0x0801b2e4
 800f980:	0801b314 	.word	0x0801b314
 800f984:	0801b320 	.word	0x0801b320

0800f988 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	7d1b      	ldrb	r3, [r3, #20]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d006      	beq.n	800f9a6 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	7e9b      	ldrb	r3, [r3, #26]
 800f99c:	f043 0310 	orr.w	r3, r3, #16
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f9a6:	2101      	movs	r1, #1
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7ff fea1 	bl	800f6f0 <tcp_close_shutdown>
 800f9ae:	4603      	mov	r3, r0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b08c      	sub	sp, #48	; 0x30
 800f9bc:	af02      	add	r7, sp, #8
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	7d1b      	ldrb	r3, [r3, #20]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d106      	bne.n	800f9d8 <tcp_abandon+0x20>
 800f9ca:	4b4d      	ldr	r3, [pc, #308]	; (800fb00 <tcp_abandon+0x148>)
 800f9cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f9d0:	494c      	ldr	r1, [pc, #304]	; (800fb04 <tcp_abandon+0x14c>)
 800f9d2:	484d      	ldr	r0, [pc, #308]	; (800fb08 <tcp_abandon+0x150>)
 800f9d4:	f009 fe86 	bl	80196e4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	7d1b      	ldrb	r3, [r3, #20]
 800f9dc:	2b0a      	cmp	r3, #10
 800f9de:	d108      	bne.n	800f9f2 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	484a      	ldr	r0, [pc, #296]	; (800fb0c <tcp_abandon+0x154>)
 800f9e4:	f000 fec6 	bl	8010774 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800f9e8:	6879      	ldr	r1, [r7, #4]
 800f9ea:	2001      	movs	r0, #1
 800f9ec:	f7fe fe26 	bl	800e63c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800f9f0:	e081      	b.n	800faf6 <tcp_abandon+0x13e>
    int send_rst = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9fe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa04:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa0c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	691b      	ldr	r3, [r3, #16]
 800fa12:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	7d1b      	ldrb	r3, [r3, #20]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d126      	bne.n	800fa6a <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	8adb      	ldrh	r3, [r3, #22]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d02e      	beq.n	800fa82 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fa24:	4b3a      	ldr	r3, [pc, #232]	; (800fb10 <tcp_abandon+0x158>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d105      	bne.n	800fa3a <tcp_abandon+0x82>
 800fa2e:	4b38      	ldr	r3, [pc, #224]	; (800fb10 <tcp_abandon+0x158>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	4a36      	ldr	r2, [pc, #216]	; (800fb10 <tcp_abandon+0x158>)
 800fa36:	6013      	str	r3, [r2, #0]
 800fa38:	e013      	b.n	800fa62 <tcp_abandon+0xaa>
 800fa3a:	4b35      	ldr	r3, [pc, #212]	; (800fb10 <tcp_abandon+0x158>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	61fb      	str	r3, [r7, #28]
 800fa40:	e00c      	b.n	800fa5c <tcp_abandon+0xa4>
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	687a      	ldr	r2, [r7, #4]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d104      	bne.n	800fa56 <tcp_abandon+0x9e>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68da      	ldr	r2, [r3, #12]
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	60da      	str	r2, [r3, #12]
 800fa54:	e005      	b.n	800fa62 <tcp_abandon+0xaa>
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	61fb      	str	r3, [r7, #28]
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d1ef      	bne.n	800fa42 <tcp_abandon+0x8a>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	60da      	str	r2, [r3, #12]
 800fa68:	e00b      	b.n	800fa82 <tcp_abandon+0xca>
      send_rst = reset;
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	8adb      	ldrh	r3, [r3, #22]
 800fa72:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fa74:	6879      	ldr	r1, [r7, #4]
 800fa76:	4827      	ldr	r0, [pc, #156]	; (800fb14 <tcp_abandon+0x15c>)
 800fa78:	f000 fe7c 	bl	8010774 <tcp_pcb_remove>
 800fa7c:	4b26      	ldr	r3, [pc, #152]	; (800fb18 <tcp_abandon+0x160>)
 800fa7e:	2201      	movs	r2, #1
 800fa80:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d004      	beq.n	800fa94 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f000 fc85 	bl	801039e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d004      	beq.n	800faa6 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800faa0:	4618      	mov	r0, r3
 800faa2:	f000 fc7c 	bl	801039e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d004      	beq.n	800fab8 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fab2:	4618      	mov	r0, r3
 800fab4:	f000 fc73 	bl	801039e <tcp_segs_free>
    if (send_rst) {
 800fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d00c      	beq.n	800fad8 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fabe:	687a      	ldr	r2, [r7, #4]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	1d19      	adds	r1, r3, #4
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	8b1b      	ldrh	r3, [r3, #24]
 800fac8:	9301      	str	r3, [sp, #4]
 800faca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800facc:	9300      	str	r3, [sp, #0]
 800face:	460b      	mov	r3, r1
 800fad0:	6979      	ldr	r1, [r7, #20]
 800fad2:	69b8      	ldr	r0, [r7, #24]
 800fad4:	f003 fea6 	bl	8013824 <tcp_rst>
    last_state = pcb->state;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	7d1b      	ldrb	r3, [r3, #20]
 800fadc:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800fade:	6879      	ldr	r1, [r7, #4]
 800fae0:	2001      	movs	r0, #1
 800fae2:	f7fe fdab 	bl	800e63c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d004      	beq.n	800faf6 <tcp_abandon+0x13e>
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	f06f 010c 	mvn.w	r1, #12
 800faf2:	68f8      	ldr	r0, [r7, #12]
 800faf4:	4798      	blx	r3
}
 800faf6:	bf00      	nop
 800faf8:	3728      	adds	r7, #40	; 0x28
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	0801b2e4 	.word	0x0801b2e4
 800fb04:	0801b37c 	.word	0x0801b37c
 800fb08:	0801b320 	.word	0x0801b320
 800fb0c:	2000ab40 	.word	0x2000ab40
 800fb10:	2000ab3c 	.word	0x2000ab3c
 800fb14:	2000ab30 	.word	0x2000ab30
 800fb18:	2000ab2c 	.word	0x2000ab2c

0800fb1c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fb24:	2101      	movs	r1, #1
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7ff ff46 	bl	800f9b8 <tcp_abandon>
}
 800fb2c:	bf00      	nop
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fb44:	4413      	add	r3, r2
 800fb46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fb50:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800fb54:	bf28      	it	cs
 800fb56:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800fb5a:	b292      	uxth	r2, r2
 800fb5c:	4413      	add	r3, r2
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	db08      	blt.n	800fb78 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	e020      	b.n	800fbba <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	dd03      	ble.n	800fb8e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fb8c:	e014      	b.n	800fbb8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fba0:	d306      	bcc.n	800fbb0 <tcp_update_rcv_ann_wnd+0x7c>
 800fba2:	4b08      	ldr	r3, [pc, #32]	; (800fbc4 <tcp_update_rcv_ann_wnd+0x90>)
 800fba4:	f44f 7242 	mov.w	r2, #776	; 0x308
 800fba8:	4907      	ldr	r1, [pc, #28]	; (800fbc8 <tcp_update_rcv_ann_wnd+0x94>)
 800fbaa:	4808      	ldr	r0, [pc, #32]	; (800fbcc <tcp_update_rcv_ann_wnd+0x98>)
 800fbac:	f009 fd9a 	bl	80196e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fbb8:	2300      	movs	r3, #0
  }
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	0801b2e4 	.word	0x0801b2e4
 800fbc8:	0801b3fc 	.word	0x0801b3fc
 800fbcc:	0801b320 	.word	0x0801b320

0800fbd0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	460b      	mov	r3, r1
 800fbda:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	7d1b      	ldrb	r3, [r3, #20]
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d106      	bne.n	800fbf2 <tcp_recved+0x22>
 800fbe4:	4b23      	ldr	r3, [pc, #140]	; (800fc74 <tcp_recved+0xa4>)
 800fbe6:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fbea:	4923      	ldr	r1, [pc, #140]	; (800fc78 <tcp_recved+0xa8>)
 800fbec:	4823      	ldr	r0, [pc, #140]	; (800fc7c <tcp_recved+0xac>)
 800fbee:	f009 fd79 	bl	80196e4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbf6:	887b      	ldrh	r3, [r7, #2]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc04:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fc08:	d904      	bls.n	800fc14 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fc10:	851a      	strh	r2, [r3, #40]	; 0x28
 800fc12:	e017      	b.n	800fc44 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d113      	bne.n	800fc44 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	7d1b      	ldrb	r3, [r3, #20]
 800fc20:	2b07      	cmp	r3, #7
 800fc22:	d003      	beq.n	800fc2c <tcp_recved+0x5c>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	7d1b      	ldrb	r3, [r3, #20]
 800fc28:	2b09      	cmp	r3, #9
 800fc2a:	d104      	bne.n	800fc36 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fc32:	851a      	strh	r2, [r3, #40]	; 0x28
 800fc34:	e006      	b.n	800fc44 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800fc36:	4b0f      	ldr	r3, [pc, #60]	; (800fc74 <tcp_recved+0xa4>)
 800fc38:	f240 322d 	movw	r2, #813	; 0x32d
 800fc3c:	4910      	ldr	r1, [pc, #64]	; (800fc80 <tcp_recved+0xb0>)
 800fc3e:	480f      	ldr	r0, [pc, #60]	; (800fc7c <tcp_recved+0xac>)
 800fc40:	f009 fd50 	bl	80196e4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff ff75 	bl	800fb34 <tcp_update_rcv_ann_wnd>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fc54:	db09      	blt.n	800fc6a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	7e9b      	ldrb	r3, [r3, #26]
 800fc5a:	f043 0302 	orr.w	r3, r3, #2
 800fc5e:	b2da      	uxtb	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f003 fb53 	bl	8013310 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fc6a:	bf00      	nop
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	0801b2e4 	.word	0x0801b2e4
 800fc78:	0801b418 	.word	0x0801b418
 800fc7c:	0801b320 	.word	0x0801b320
 800fc80:	0801b440 	.word	0x0801b440

0800fc84 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fc84:	b5b0      	push	{r4, r5, r7, lr}
 800fc86:	b08c      	sub	sp, #48	; 0x30
 800fc88:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800fc8e:	4b97      	ldr	r3, [pc, #604]	; (800feec <tcp_slowtmr+0x268>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3301      	adds	r3, #1
 800fc94:	4a95      	ldr	r2, [pc, #596]	; (800feec <tcp_slowtmr+0x268>)
 800fc96:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fc98:	4b95      	ldr	r3, [pc, #596]	; (800fef0 <tcp_slowtmr+0x26c>)
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	4b93      	ldr	r3, [pc, #588]	; (800fef0 <tcp_slowtmr+0x26c>)
 800fca2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fca4:	2300      	movs	r3, #0
 800fca6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800fca8:	4b92      	ldr	r3, [pc, #584]	; (800fef4 <tcp_slowtmr+0x270>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fcae:	e227      	b.n	8010100 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	7d1b      	ldrb	r3, [r3, #20]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d106      	bne.n	800fcc6 <tcp_slowtmr+0x42>
 800fcb8:	4b8f      	ldr	r3, [pc, #572]	; (800fef8 <tcp_slowtmr+0x274>)
 800fcba:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800fcbe:	498f      	ldr	r1, [pc, #572]	; (800fefc <tcp_slowtmr+0x278>)
 800fcc0:	488f      	ldr	r0, [pc, #572]	; (800ff00 <tcp_slowtmr+0x27c>)
 800fcc2:	f009 fd0f 	bl	80196e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc8:	7d1b      	ldrb	r3, [r3, #20]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d106      	bne.n	800fcdc <tcp_slowtmr+0x58>
 800fcce:	4b8a      	ldr	r3, [pc, #552]	; (800fef8 <tcp_slowtmr+0x274>)
 800fcd0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fcd4:	498b      	ldr	r1, [pc, #556]	; (800ff04 <tcp_slowtmr+0x280>)
 800fcd6:	488a      	ldr	r0, [pc, #552]	; (800ff00 <tcp_slowtmr+0x27c>)
 800fcd8:	f009 fd04 	bl	80196e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcde:	7d1b      	ldrb	r3, [r3, #20]
 800fce0:	2b0a      	cmp	r3, #10
 800fce2:	d106      	bne.n	800fcf2 <tcp_slowtmr+0x6e>
 800fce4:	4b84      	ldr	r3, [pc, #528]	; (800fef8 <tcp_slowtmr+0x274>)
 800fce6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800fcea:	4987      	ldr	r1, [pc, #540]	; (800ff08 <tcp_slowtmr+0x284>)
 800fcec:	4884      	ldr	r0, [pc, #528]	; (800ff00 <tcp_slowtmr+0x27c>)
 800fcee:	f009 fcf9 	bl	80196e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf4:	7f5a      	ldrb	r2, [r3, #29]
 800fcf6:	4b7e      	ldr	r3, [pc, #504]	; (800fef0 <tcp_slowtmr+0x26c>)
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d103      	bne.n	800fd06 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800fd04:	e1fc      	b.n	8010100 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fd06:	4b7a      	ldr	r3, [pc, #488]	; (800fef0 <tcp_slowtmr+0x26c>)
 800fd08:	781a      	ldrb	r2, [r3, #0]
 800fd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd18:	7d1b      	ldrb	r3, [r3, #20]
 800fd1a:	2b02      	cmp	r3, #2
 800fd1c:	d108      	bne.n	800fd30 <tcp_slowtmr+0xac>
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd24:	2b05      	cmp	r3, #5
 800fd26:	d903      	bls.n	800fd30 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800fd28:	7ffb      	ldrb	r3, [r7, #31]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	77fb      	strb	r3, [r7, #31]
 800fd2e:	e0a2      	b.n	800fe76 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd36:	2b0b      	cmp	r3, #11
 800fd38:	d903      	bls.n	800fd42 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800fd3a:	7ffb      	ldrb	r3, [r7, #31]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	77fb      	strb	r3, [r7, #31]
 800fd40:	e099      	b.n	800fe76 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd44:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d032      	beq.n	800fdb2 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd52:	3b01      	subs	r3, #1
 800fd54:	4a6d      	ldr	r2, [pc, #436]	; (800ff0c <tcp_slowtmr+0x288>)
 800fd56:	5cd3      	ldrb	r3, [r2, r3]
 800fd58:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800fd60:	7cfa      	ldrb	r2, [r7, #19]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d907      	bls.n	800fd76 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	b2da      	uxtb	r2, r3
 800fd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd72:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800fd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd78:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800fd7c:	7cfa      	ldrb	r2, [r7, #19]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d879      	bhi.n	800fe76 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800fd82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd84:	f003 fede 	bl	8013b44 <tcp_zero_window_probe>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d173      	bne.n	800fe76 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800fd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd98:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd9c:	2b06      	cmp	r3, #6
 800fd9e:	d86a      	bhi.n	800fe76 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fda6:	3301      	adds	r3, #1
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800fdb0:	e061      	b.n	800fe76 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800fdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	db08      	blt.n	800fdce <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	b21a      	sxth	r2, r3
 800fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdcc:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800fdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d04f      	beq.n	800fe76 <tcp_slowtmr+0x1f2>
 800fdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdde:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fde2:	429a      	cmp	r2, r3
 800fde4:	db47      	blt.n	800fe76 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800fde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde8:	7d1b      	ldrb	r3, [r3, #20]
 800fdea:	2b02      	cmp	r3, #2
 800fdec:	d018      	beq.n	800fe20 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800fdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fdf4:	2b0c      	cmp	r3, #12
 800fdf6:	bf28      	it	cs
 800fdf8:	230c      	movcs	r3, #12
 800fdfa:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe02:	10db      	asrs	r3, r3, #3
 800fe04:	b21b      	sxth	r3, r3
 800fe06:	461a      	mov	r2, r3
 800fe08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe0e:	4413      	add	r3, r2
 800fe10:	7dfa      	ldrb	r2, [r7, #23]
 800fe12:	493f      	ldr	r1, [pc, #252]	; (800ff10 <tcp_slowtmr+0x28c>)
 800fe14:	5c8a      	ldrb	r2, [r1, r2]
 800fe16:	4093      	lsls	r3, r2
 800fe18:	b21a      	sxth	r2, r3
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800fe20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe22:	2200      	movs	r2, #0
 800fe24:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe28:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe32:	4293      	cmp	r3, r2
 800fe34:	bf28      	it	cs
 800fe36:	4613      	movcs	r3, r2
 800fe38:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800fe3a:	8abb      	ldrh	r3, [r7, #20]
 800fe3c:	085b      	lsrs	r3, r3, #1
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fe46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe48:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe50:	005b      	lsls	r3, r3, #1
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d206      	bcs.n	800fe66 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe5c:	005b      	lsls	r3, r3, #1
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe62:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800fe70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe72:	f003 fd4d 	bl	8013910 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fe76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe78:	7d1b      	ldrb	r3, [r3, #20]
 800fe7a:	2b06      	cmp	r3, #6
 800fe7c:	d10f      	bne.n	800fe9e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fe7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe80:	7e9b      	ldrb	r3, [r3, #26]
 800fe82:	f003 0310 	and.w	r3, r3, #16
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d009      	beq.n	800fe9e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe8a:	4b18      	ldr	r3, [pc, #96]	; (800feec <tcp_slowtmr+0x268>)
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe90:	6a1b      	ldr	r3, [r3, #32]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	2b28      	cmp	r3, #40	; 0x28
 800fe96:	d902      	bls.n	800fe9e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fe98:	7ffb      	ldrb	r3, [r7, #31]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fe9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea0:	7a1b      	ldrb	r3, [r3, #8]
 800fea2:	f003 0308 	and.w	r3, r3, #8
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d05d      	beq.n	800ff66 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800feae:	2b04      	cmp	r3, #4
 800feb0:	d003      	beq.n	800feba <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800feb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800feb6:	2b07      	cmp	r3, #7
 800feb8:	d155      	bne.n	800ff66 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800feba:	4b0c      	ldr	r3, [pc, #48]	; (800feec <tcp_slowtmr+0x268>)
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec0:	6a1b      	ldr	r3, [r3, #32]
 800fec2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800fec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feca:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800fece:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800fed2:	4910      	ldr	r1, [pc, #64]	; (800ff14 <tcp_slowtmr+0x290>)
 800fed4:	fba1 1303 	umull	r1, r3, r1, r3
 800fed8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800feda:	429a      	cmp	r2, r3
 800fedc:	d91c      	bls.n	800ff18 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fede:	7ffb      	ldrb	r3, [r7, #31]
 800fee0:	3301      	adds	r3, #1
 800fee2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800fee4:	7fbb      	ldrb	r3, [r7, #30]
 800fee6:	3301      	adds	r3, #1
 800fee8:	77bb      	strb	r3, [r7, #30]
 800feea:	e03c      	b.n	800ff66 <tcp_slowtmr+0x2e2>
 800feec:	2000ab34 	.word	0x2000ab34
 800fef0:	20004206 	.word	0x20004206
 800fef4:	2000ab30 	.word	0x2000ab30
 800fef8:	0801b2e4 	.word	0x0801b2e4
 800fefc:	0801b494 	.word	0x0801b494
 800ff00:	0801b320 	.word	0x0801b320
 800ff04:	0801b4c0 	.word	0x0801b4c0
 800ff08:	0801b4ec 	.word	0x0801b4ec
 800ff0c:	0801cca8 	.word	0x0801cca8
 800ff10:	0801cc98 	.word	0x0801cc98
 800ff14:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff18:	4b97      	ldr	r3, [pc, #604]	; (8010178 <tcp_slowtmr+0x4f4>)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	6a1b      	ldr	r3, [r3, #32]
 800ff20:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ff22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff24:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800ff28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ff2e:	4618      	mov	r0, r3
 800ff30:	4b92      	ldr	r3, [pc, #584]	; (801017c <tcp_slowtmr+0x4f8>)
 800ff32:	fb03 f300 	mul.w	r3, r3, r0
 800ff36:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800ff38:	4991      	ldr	r1, [pc, #580]	; (8010180 <tcp_slowtmr+0x4fc>)
 800ff3a:	fba1 1303 	umull	r1, r3, r1, r3
 800ff3e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d910      	bls.n	800ff66 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800ff44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff46:	f003 fdc0 	bl	8013aca <tcp_keepalive>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800ff4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d107      	bne.n	800ff66 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	b2da      	uxtb	r2, r3
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff62:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ff66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d016      	beq.n	800ff9c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800ff6e:	4b82      	ldr	r3, [pc, #520]	; (8010178 <tcp_slowtmr+0x4f4>)
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff74:	6a1b      	ldr	r3, [r3, #32]
 800ff76:	1ad2      	subs	r2, r2, r3
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ff7e:	4619      	mov	r1, r3
 800ff80:	460b      	mov	r3, r1
 800ff82:	005b      	lsls	r3, r3, #1
 800ff84:	440b      	add	r3, r1
 800ff86:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d307      	bcc.n	800ff9c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff90:	4618      	mov	r0, r3
 800ff92:	f000 fa04 	bl	801039e <tcp_segs_free>
      pcb->ooseq = NULL;
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	2200      	movs	r2, #0
 800ff9a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9e:	7d1b      	ldrb	r3, [r3, #20]
 800ffa0:	2b03      	cmp	r3, #3
 800ffa2:	d109      	bne.n	800ffb8 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ffa4:	4b74      	ldr	r3, [pc, #464]	; (8010178 <tcp_slowtmr+0x4f4>)
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffaa:	6a1b      	ldr	r3, [r3, #32]
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	2b28      	cmp	r3, #40	; 0x28
 800ffb0:	d902      	bls.n	800ffb8 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ffb2:	7ffb      	ldrb	r3, [r7, #31]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ffb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffba:	7d1b      	ldrb	r3, [r3, #20]
 800ffbc:	2b09      	cmp	r3, #9
 800ffbe:	d109      	bne.n	800ffd4 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ffc0:	4b6d      	ldr	r3, [pc, #436]	; (8010178 <tcp_slowtmr+0x4f4>)
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	6a1b      	ldr	r3, [r3, #32]
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	2bf0      	cmp	r3, #240	; 0xf0
 800ffcc:	d902      	bls.n	800ffd4 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800ffce:	7ffb      	ldrb	r3, [r7, #31]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ffd4:	7ffb      	ldrb	r3, [r7, #31]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d05d      	beq.n	8010096 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ffda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffe0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ffe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffe4:	f000 fb84 	bl	80106f0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ffe8:	6a3b      	ldr	r3, [r7, #32]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d010      	beq.n	8010010 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ffee:	4b65      	ldr	r3, [pc, #404]	; (8010184 <tcp_slowtmr+0x500>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d106      	bne.n	8010006 <tcp_slowtmr+0x382>
 800fff8:	4b63      	ldr	r3, [pc, #396]	; (8010188 <tcp_slowtmr+0x504>)
 800fffa:	f240 4289 	movw	r2, #1161	; 0x489
 800fffe:	4963      	ldr	r1, [pc, #396]	; (801018c <tcp_slowtmr+0x508>)
 8010000:	4863      	ldr	r0, [pc, #396]	; (8010190 <tcp_slowtmr+0x50c>)
 8010002:	f009 fb6f 	bl	80196e4 <iprintf>
        prev->next = pcb->next;
 8010006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010008:	68da      	ldr	r2, [r3, #12]
 801000a:	6a3b      	ldr	r3, [r7, #32]
 801000c:	60da      	str	r2, [r3, #12]
 801000e:	e00f      	b.n	8010030 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010010:	4b5c      	ldr	r3, [pc, #368]	; (8010184 <tcp_slowtmr+0x500>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010016:	429a      	cmp	r2, r3
 8010018:	d006      	beq.n	8010028 <tcp_slowtmr+0x3a4>
 801001a:	4b5b      	ldr	r3, [pc, #364]	; (8010188 <tcp_slowtmr+0x504>)
 801001c:	f240 428d 	movw	r2, #1165	; 0x48d
 8010020:	495c      	ldr	r1, [pc, #368]	; (8010194 <tcp_slowtmr+0x510>)
 8010022:	485b      	ldr	r0, [pc, #364]	; (8010190 <tcp_slowtmr+0x50c>)
 8010024:	f009 fb5e 	bl	80196e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	4a55      	ldr	r2, [pc, #340]	; (8010184 <tcp_slowtmr+0x500>)
 801002e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010030:	7fbb      	ldrb	r3, [r7, #30]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d010      	beq.n	8010058 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010038:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801003a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801003e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	1d1d      	adds	r5, r3, #4
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	8adb      	ldrh	r3, [r3, #22]
 8010048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801004a:	8b12      	ldrh	r2, [r2, #24]
 801004c:	9201      	str	r2, [sp, #4]
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	462b      	mov	r3, r5
 8010052:	4622      	mov	r2, r4
 8010054:	f003 fbe6 	bl	8013824 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010060:	7d1b      	ldrb	r3, [r3, #20]
 8010062:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010066:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801006e:	6839      	ldr	r1, [r7, #0]
 8010070:	2001      	movs	r0, #1
 8010072:	f7fe fae3 	bl	800e63c <memp_free>

      tcp_active_pcbs_changed = 0;
 8010076:	4b48      	ldr	r3, [pc, #288]	; (8010198 <tcp_slowtmr+0x514>)
 8010078:	2200      	movs	r2, #0
 801007a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d004      	beq.n	801008c <tcp_slowtmr+0x408>
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f06f 010c 	mvn.w	r1, #12
 8010088:	68b8      	ldr	r0, [r7, #8]
 801008a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801008c:	4b42      	ldr	r3, [pc, #264]	; (8010198 <tcp_slowtmr+0x514>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d035      	beq.n	8010100 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8010094:	e606      	b.n	800fca4 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010098:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801009a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009c:	68db      	ldr	r3, [r3, #12]
 801009e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80100a0:	6a3b      	ldr	r3, [r7, #32]
 80100a2:	7edb      	ldrb	r3, [r3, #27]
 80100a4:	3301      	adds	r3, #1
 80100a6:	b2da      	uxtb	r2, r3
 80100a8:	6a3b      	ldr	r3, [r7, #32]
 80100aa:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	7eda      	ldrb	r2, [r3, #27]
 80100b0:	6a3b      	ldr	r3, [r7, #32]
 80100b2:	7f1b      	ldrb	r3, [r3, #28]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d323      	bcc.n	8010100 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80100b8:	6a3b      	ldr	r3, [r7, #32]
 80100ba:	2200      	movs	r2, #0
 80100bc:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80100be:	4b36      	ldr	r3, [pc, #216]	; (8010198 <tcp_slowtmr+0x514>)
 80100c0:	2200      	movs	r2, #0
 80100c2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80100c4:	6a3b      	ldr	r3, [r7, #32]
 80100c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00a      	beq.n	80100e4 <tcp_slowtmr+0x460>
 80100ce:	6a3b      	ldr	r3, [r7, #32]
 80100d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100d4:	6a3a      	ldr	r2, [r7, #32]
 80100d6:	6912      	ldr	r2, [r2, #16]
 80100d8:	6a39      	ldr	r1, [r7, #32]
 80100da:	4610      	mov	r0, r2
 80100dc:	4798      	blx	r3
 80100de:	4603      	mov	r3, r0
 80100e0:	777b      	strb	r3, [r7, #29]
 80100e2:	e001      	b.n	80100e8 <tcp_slowtmr+0x464>
 80100e4:	2300      	movs	r3, #0
 80100e6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 80100e8:	4b2b      	ldr	r3, [pc, #172]	; (8010198 <tcp_slowtmr+0x514>)
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d000      	beq.n	80100f2 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 80100f0:	e5d8      	b.n	800fca4 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80100f2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d102      	bne.n	8010100 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 80100fa:	6a38      	ldr	r0, [r7, #32]
 80100fc:	f003 f908 	bl	8013310 <tcp_output>
  while (pcb != NULL) {
 8010100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010102:	2b00      	cmp	r3, #0
 8010104:	f47f add4 	bne.w	800fcb0 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010108:	2300      	movs	r3, #0
 801010a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 801010c:	4b23      	ldr	r3, [pc, #140]	; (801019c <tcp_slowtmr+0x518>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010112:	e068      	b.n	80101e6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010116:	7d1b      	ldrb	r3, [r3, #20]
 8010118:	2b0a      	cmp	r3, #10
 801011a:	d006      	beq.n	801012a <tcp_slowtmr+0x4a6>
 801011c:	4b1a      	ldr	r3, [pc, #104]	; (8010188 <tcp_slowtmr+0x504>)
 801011e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010122:	491f      	ldr	r1, [pc, #124]	; (80101a0 <tcp_slowtmr+0x51c>)
 8010124:	481a      	ldr	r0, [pc, #104]	; (8010190 <tcp_slowtmr+0x50c>)
 8010126:	f009 fadd 	bl	80196e4 <iprintf>
    pcb_remove = 0;
 801012a:	2300      	movs	r3, #0
 801012c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801012e:	4b12      	ldr	r3, [pc, #72]	; (8010178 <tcp_slowtmr+0x4f4>)
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010134:	6a1b      	ldr	r3, [r3, #32]
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	2bf0      	cmp	r3, #240	; 0xf0
 801013a:	d902      	bls.n	8010142 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 801013c:	7ffb      	ldrb	r3, [r7, #31]
 801013e:	3301      	adds	r3, #1
 8010140:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010142:	7ffb      	ldrb	r3, [r7, #31]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d049      	beq.n	80101dc <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801014a:	f000 fad1 	bl	80106f0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801014e:	6a3b      	ldr	r3, [r7, #32]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d029      	beq.n	80101a8 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010154:	4b11      	ldr	r3, [pc, #68]	; (801019c <tcp_slowtmr+0x518>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801015a:	429a      	cmp	r2, r3
 801015c:	d106      	bne.n	801016c <tcp_slowtmr+0x4e8>
 801015e:	4b0a      	ldr	r3, [pc, #40]	; (8010188 <tcp_slowtmr+0x504>)
 8010160:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8010164:	490f      	ldr	r1, [pc, #60]	; (80101a4 <tcp_slowtmr+0x520>)
 8010166:	480a      	ldr	r0, [pc, #40]	; (8010190 <tcp_slowtmr+0x50c>)
 8010168:	f009 fabc 	bl	80196e4 <iprintf>
        prev->next = pcb->next;
 801016c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016e:	68da      	ldr	r2, [r3, #12]
 8010170:	6a3b      	ldr	r3, [r7, #32]
 8010172:	60da      	str	r2, [r3, #12]
 8010174:	e028      	b.n	80101c8 <tcp_slowtmr+0x544>
 8010176:	bf00      	nop
 8010178:	2000ab34 	.word	0x2000ab34
 801017c:	000124f8 	.word	0x000124f8
 8010180:	10624dd3 	.word	0x10624dd3
 8010184:	2000ab30 	.word	0x2000ab30
 8010188:	0801b2e4 	.word	0x0801b2e4
 801018c:	0801b51c 	.word	0x0801b51c
 8010190:	0801b320 	.word	0x0801b320
 8010194:	0801b548 	.word	0x0801b548
 8010198:	2000ab2c 	.word	0x2000ab2c
 801019c:	2000ab40 	.word	0x2000ab40
 80101a0:	0801b574 	.word	0x0801b574
 80101a4:	0801b5a4 	.word	0x0801b5a4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80101a8:	4b12      	ldr	r3, [pc, #72]	; (80101f4 <tcp_slowtmr+0x570>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d006      	beq.n	80101c0 <tcp_slowtmr+0x53c>
 80101b2:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <tcp_slowtmr+0x574>)
 80101b4:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80101b8:	4910      	ldr	r1, [pc, #64]	; (80101fc <tcp_slowtmr+0x578>)
 80101ba:	4811      	ldr	r0, [pc, #68]	; (8010200 <tcp_slowtmr+0x57c>)
 80101bc:	f009 fa92 	bl	80196e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	4a0b      	ldr	r2, [pc, #44]	; (80101f4 <tcp_slowtmr+0x570>)
 80101c6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80101c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ca:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 80101cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80101d2:	69b9      	ldr	r1, [r7, #24]
 80101d4:	2001      	movs	r0, #1
 80101d6:	f7fe fa31 	bl	800e63c <memp_free>
 80101da:	e004      	b.n	80101e6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80101e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80101e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d193      	bne.n	8010114 <tcp_slowtmr+0x490>
    }
  }
}
 80101ec:	bf00      	nop
 80101ee:	3728      	adds	r7, #40	; 0x28
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bdb0      	pop	{r4, r5, r7, pc}
 80101f4:	2000ab40 	.word	0x2000ab40
 80101f8:	0801b2e4 	.word	0x0801b2e4
 80101fc:	0801b5cc 	.word	0x0801b5cc
 8010200:	0801b320 	.word	0x0801b320

08010204 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801020a:	4b2d      	ldr	r3, [pc, #180]	; (80102c0 <tcp_fasttmr+0xbc>)
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	3301      	adds	r3, #1
 8010210:	b2da      	uxtb	r2, r3
 8010212:	4b2b      	ldr	r3, [pc, #172]	; (80102c0 <tcp_fasttmr+0xbc>)
 8010214:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010216:	4b2b      	ldr	r3, [pc, #172]	; (80102c4 <tcp_fasttmr+0xc0>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801021c:	e048      	b.n	80102b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	7f5a      	ldrb	r2, [r3, #29]
 8010222:	4b27      	ldr	r3, [pc, #156]	; (80102c0 <tcp_fasttmr+0xbc>)
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	429a      	cmp	r2, r3
 8010228:	d03f      	beq.n	80102aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801022a:	4b25      	ldr	r3, [pc, #148]	; (80102c0 <tcp_fasttmr+0xbc>)
 801022c:	781a      	ldrb	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	7e9b      	ldrb	r3, [r3, #26]
 8010236:	f003 0301 	and.w	r3, r3, #1
 801023a:	2b00      	cmp	r3, #0
 801023c:	d010      	beq.n	8010260 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	7e9b      	ldrb	r3, [r3, #26]
 8010242:	f043 0302 	orr.w	r3, r3, #2
 8010246:	b2da      	uxtb	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f003 f85f 	bl	8013310 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	7e9b      	ldrb	r3, [r3, #26]
 8010256:	f023 0303 	bic.w	r3, r3, #3
 801025a:	b2da      	uxtb	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	7e9b      	ldrb	r3, [r3, #26]
 8010264:	f003 0308 	and.w	r3, r3, #8
 8010268:	2b00      	cmp	r3, #0
 801026a:	d009      	beq.n	8010280 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	7e9b      	ldrb	r3, [r3, #26]
 8010270:	f023 0308 	bic.w	r3, r3, #8
 8010274:	b2da      	uxtb	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff fb1e 	bl	800f8bc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00a      	beq.n	80102a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801028e:	4b0e      	ldr	r3, [pc, #56]	; (80102c8 <tcp_fasttmr+0xc4>)
 8010290:	2200      	movs	r2, #0
 8010292:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 f819 	bl	80102cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801029a:	4b0b      	ldr	r3, [pc, #44]	; (80102c8 <tcp_fasttmr+0xc4>)
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d000      	beq.n	80102a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80102a2:	e7b8      	b.n	8010216 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	607b      	str	r3, [r7, #4]
 80102a8:	e002      	b.n	80102b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1b3      	bne.n	801021e <tcp_fasttmr+0x1a>
    }
  }
}
 80102b6:	bf00      	nop
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	20004206 	.word	0x20004206
 80102c4:	2000ab30 	.word	0x2000ab30
 80102c8:	2000ab2c 	.word	0x2000ab2c

080102cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80102cc:	b590      	push	{r4, r7, lr}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102d8:	7b5b      	ldrb	r3, [r3, #13]
 80102da:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102e0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00b      	beq.n	801030a <tcp_process_refused_data+0x3e>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6918      	ldr	r0, [r3, #16]
 80102fc:	2300      	movs	r3, #0
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	6879      	ldr	r1, [r7, #4]
 8010302:	47a0      	blx	r4
 8010304:	4603      	mov	r3, r0
 8010306:	73fb      	strb	r3, [r7, #15]
 8010308:	e007      	b.n	801031a <tcp_process_refused_data+0x4e>
 801030a:	2300      	movs	r3, #0
 801030c:	68ba      	ldr	r2, [r7, #8]
 801030e:	6879      	ldr	r1, [r7, #4]
 8010310:	2000      	movs	r0, #0
 8010312:	f000 f88c 	bl	801042e <tcp_recv_null>
 8010316:	4603      	mov	r3, r0
 8010318:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801031a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d12a      	bne.n	8010378 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8010322:	7bbb      	ldrb	r3, [r7, #14]
 8010324:	f003 0320 	and.w	r3, r3, #32
 8010328:	2b00      	cmp	r3, #0
 801032a:	d033      	beq.n	8010394 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010330:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010334:	d005      	beq.n	8010342 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801033a:	3301      	adds	r3, #1
 801033c:	b29a      	uxth	r2, r3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00b      	beq.n	8010364 <tcp_process_refused_data+0x98>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6918      	ldr	r0, [r3, #16]
 8010356:	2300      	movs	r3, #0
 8010358:	2200      	movs	r2, #0
 801035a:	6879      	ldr	r1, [r7, #4]
 801035c:	47a0      	blx	r4
 801035e:	4603      	mov	r3, r0
 8010360:	73fb      	strb	r3, [r7, #15]
 8010362:	e001      	b.n	8010368 <tcp_process_refused_data+0x9c>
 8010364:	2300      	movs	r3, #0
 8010366:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801036c:	f113 0f0d 	cmn.w	r3, #13
 8010370:	d110      	bne.n	8010394 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8010372:	f06f 030c 	mvn.w	r3, #12
 8010376:	e00e      	b.n	8010396 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8010378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801037c:	f113 0f0d 	cmn.w	r3, #13
 8010380:	d102      	bne.n	8010388 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010382:	f06f 030c 	mvn.w	r3, #12
 8010386:	e006      	b.n	8010396 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	68ba      	ldr	r2, [r7, #8]
 801038c:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 801038e:	f06f 0304 	mvn.w	r3, #4
 8010392:	e000      	b.n	8010396 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3714      	adds	r7, #20
 801039a:	46bd      	mov	sp, r7
 801039c:	bd90      	pop	{r4, r7, pc}

0801039e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b084      	sub	sp, #16
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80103a6:	e007      	b.n	80103b8 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f809 	bl	80103c6 <tcp_seg_free>
    seg = next;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1f4      	bne.n	80103a8 <tcp_segs_free+0xa>
  }
}
 80103be:	bf00      	nop
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b082      	sub	sp, #8
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00c      	beq.n	80103ee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d004      	beq.n	80103e6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7fe fe8d 	bl	800f100 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80103e6:	6879      	ldr	r1, [r7, #4]
 80103e8:	2003      	movs	r0, #3
 80103ea:	f7fe f927 	bl	800e63c <memp_free>
  }
}
 80103ee:	bf00      	nop
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b084      	sub	sp, #16
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80103fe:	2003      	movs	r0, #3
 8010400:	f7fe f8ca 	bl	800e598 <memp_malloc>
 8010404:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d101      	bne.n	8010410 <tcp_seg_copy+0x1a>
    return NULL;
 801040c:	2300      	movs	r3, #0
 801040e:	e00a      	b.n	8010426 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010410:	2210      	movs	r2, #16
 8010412:	6879      	ldr	r1, [r7, #4]
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f009 f8aa 	bl	801956e <memcpy>
  pbuf_ref(cseg->p);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	4618      	mov	r0, r3
 8010420:	f7fe ff20 	bl	800f264 <pbuf_ref>
  return cseg;
 8010424:	68fb      	ldr	r3, [r7, #12]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}

0801042e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801042e:	b580      	push	{r7, lr}
 8010430:	b084      	sub	sp, #16
 8010432:	af00      	add	r7, sp, #0
 8010434:	60f8      	str	r0, [r7, #12]
 8010436:	60b9      	str	r1, [r7, #8]
 8010438:	607a      	str	r2, [r7, #4]
 801043a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d009      	beq.n	8010456 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	891b      	ldrh	r3, [r3, #8]
 8010446:	4619      	mov	r1, r3
 8010448:	68b8      	ldr	r0, [r7, #8]
 801044a:	f7ff fbc1 	bl	800fbd0 <tcp_recved>
    pbuf_free(p);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7fe fe56 	bl	800f100 <pbuf_free>
 8010454:	e008      	b.n	8010468 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8010456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d104      	bne.n	8010468 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 801045e:	68b8      	ldr	r0, [r7, #8]
 8010460:	f7ff fa92 	bl	800f988 <tcp_close>
 8010464:	4603      	mov	r3, r0
 8010466:	e000      	b.n	801046a <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
	...

08010474 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b086      	sub	sp, #24
 8010478:	af00      	add	r7, sp, #0
 801047a:	4603      	mov	r3, r0
 801047c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801047e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010482:	2b00      	cmp	r3, #0
 8010484:	db01      	blt.n	801048a <tcp_kill_prio+0x16>
 8010486:	79fb      	ldrb	r3, [r7, #7]
 8010488:	e000      	b.n	801048c <tcp_kill_prio+0x18>
 801048a:	237f      	movs	r3, #127	; 0x7f
 801048c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801048e:	2300      	movs	r3, #0
 8010490:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010492:	2300      	movs	r3, #0
 8010494:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010496:	4b16      	ldr	r3, [pc, #88]	; (80104f0 <tcp_kill_prio+0x7c>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	617b      	str	r3, [r7, #20]
 801049c:	e01a      	b.n	80104d4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	7d5b      	ldrb	r3, [r3, #21]
 80104a2:	7afa      	ldrb	r2, [r7, #11]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d312      	bcc.n	80104ce <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80104a8:	4b12      	ldr	r3, [pc, #72]	; (80104f4 <tcp_kill_prio+0x80>)
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	6a1b      	ldr	r3, [r3, #32]
 80104b0:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d80a      	bhi.n	80104ce <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80104b8:	4b0e      	ldr	r3, [pc, #56]	; (80104f4 <tcp_kill_prio+0x80>)
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	6a1b      	ldr	r3, [r3, #32]
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	7d5b      	ldrb	r3, [r3, #21]
 80104cc:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	617b      	str	r3, [r7, #20]
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d1e1      	bne.n	801049e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d002      	beq.n	80104e6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80104e0:	6938      	ldr	r0, [r7, #16]
 80104e2:	f7ff fb1b 	bl	800fb1c <tcp_abort>
  }
}
 80104e6:	bf00      	nop
 80104e8:	3718      	adds	r7, #24
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	2000ab30 	.word	0x2000ab30
 80104f4:	2000ab34 	.word	0x2000ab34

080104f8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b086      	sub	sp, #24
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	4603      	mov	r3, r0
 8010500:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010502:	79fb      	ldrb	r3, [r7, #7]
 8010504:	2b08      	cmp	r3, #8
 8010506:	d009      	beq.n	801051c <tcp_kill_state+0x24>
 8010508:	79fb      	ldrb	r3, [r7, #7]
 801050a:	2b09      	cmp	r3, #9
 801050c:	d006      	beq.n	801051c <tcp_kill_state+0x24>
 801050e:	4b1a      	ldr	r3, [pc, #104]	; (8010578 <tcp_kill_state+0x80>)
 8010510:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010514:	4919      	ldr	r1, [pc, #100]	; (801057c <tcp_kill_state+0x84>)
 8010516:	481a      	ldr	r0, [pc, #104]	; (8010580 <tcp_kill_state+0x88>)
 8010518:	f009 f8e4 	bl	80196e4 <iprintf>

  inactivity = 0;
 801051c:	2300      	movs	r3, #0
 801051e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010520:	2300      	movs	r3, #0
 8010522:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010524:	4b17      	ldr	r3, [pc, #92]	; (8010584 <tcp_kill_state+0x8c>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	617b      	str	r3, [r7, #20]
 801052a:	e017      	b.n	801055c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	7d1b      	ldrb	r3, [r3, #20]
 8010530:	79fa      	ldrb	r2, [r7, #7]
 8010532:	429a      	cmp	r2, r3
 8010534:	d10f      	bne.n	8010556 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010536:	4b14      	ldr	r3, [pc, #80]	; (8010588 <tcp_kill_state+0x90>)
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	6a1b      	ldr	r3, [r3, #32]
 801053e:	1ad3      	subs	r3, r2, r3
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	429a      	cmp	r2, r3
 8010544:	d807      	bhi.n	8010556 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010546:	4b10      	ldr	r3, [pc, #64]	; (8010588 <tcp_kill_state+0x90>)
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	1ad3      	subs	r3, r2, r3
 8010550:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	68db      	ldr	r3, [r3, #12]
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d1e4      	bne.n	801052c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d003      	beq.n	8010570 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010568:	2100      	movs	r1, #0
 801056a:	6938      	ldr	r0, [r7, #16]
 801056c:	f7ff fa24 	bl	800f9b8 <tcp_abandon>
  }
}
 8010570:	bf00      	nop
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	0801b2e4 	.word	0x0801b2e4
 801057c:	0801b5f4 	.word	0x0801b5f4
 8010580:	0801b320 	.word	0x0801b320
 8010584:	2000ab30 	.word	0x2000ab30
 8010588:	2000ab34 	.word	0x2000ab34

0801058c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010592:	2300      	movs	r3, #0
 8010594:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010596:	2300      	movs	r3, #0
 8010598:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801059a:	4b12      	ldr	r3, [pc, #72]	; (80105e4 <tcp_kill_timewait+0x58>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	60fb      	str	r3, [r7, #12]
 80105a0:	e012      	b.n	80105c8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80105a2:	4b11      	ldr	r3, [pc, #68]	; (80105e8 <tcp_kill_timewait+0x5c>)
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	1ad3      	subs	r3, r2, r3
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d807      	bhi.n	80105c2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80105b2:	4b0d      	ldr	r3, [pc, #52]	; (80105e8 <tcp_kill_timewait+0x5c>)
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	6a1b      	ldr	r3, [r3, #32]
 80105ba:	1ad3      	subs	r3, r2, r3
 80105bc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	60fb      	str	r3, [r7, #12]
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d1e9      	bne.n	80105a2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80105d4:	68b8      	ldr	r0, [r7, #8]
 80105d6:	f7ff faa1 	bl	800fb1c <tcp_abort>
  }
}
 80105da:	bf00      	nop
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	2000ab40 	.word	0x2000ab40
 80105e8:	2000ab34 	.word	0x2000ab34

080105ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	4603      	mov	r3, r0
 80105f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105f6:	2001      	movs	r0, #1
 80105f8:	f7fd ffce 	bl	800e598 <memp_malloc>
 80105fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d124      	bne.n	801064e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010604:	f7ff ffc2 	bl	801058c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010608:	2001      	movs	r0, #1
 801060a:	f7fd ffc5 	bl	800e598 <memp_malloc>
 801060e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d11b      	bne.n	801064e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010616:	2009      	movs	r0, #9
 8010618:	f7ff ff6e 	bl	80104f8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801061c:	2001      	movs	r0, #1
 801061e:	f7fd ffbb 	bl	800e598 <memp_malloc>
 8010622:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d111      	bne.n	801064e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801062a:	2008      	movs	r0, #8
 801062c:	f7ff ff64 	bl	80104f8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010630:	2001      	movs	r0, #1
 8010632:	f7fd ffb1 	bl	800e598 <memp_malloc>
 8010636:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d107      	bne.n	801064e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801063e:	79fb      	ldrb	r3, [r7, #7]
 8010640:	4618      	mov	r0, r3
 8010642:	f7ff ff17 	bl	8010474 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010646:	2001      	movs	r0, #1
 8010648:	f7fd ffa6 	bl	800e598 <memp_malloc>
 801064c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d03f      	beq.n	80106d4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010654:	2298      	movs	r2, #152	; 0x98
 8010656:	2100      	movs	r1, #0
 8010658:	68f8      	ldr	r0, [r7, #12]
 801065a:	f008 ff93 	bl	8019584 <memset>
    pcb->prio = prio;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	79fa      	ldrb	r2, [r7, #7]
 8010662:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801066a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	22ff      	movs	r2, #255	; 0xff
 8010682:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f44f 7206 	mov.w	r2, #536	; 0x218
 801068a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2206      	movs	r2, #6
 8010690:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2206      	movs	r2, #6
 8010698:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2201      	movs	r2, #1
 80106a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80106aa:	4b0d      	ldr	r3, [pc, #52]	; (80106e0 <tcp_alloc+0xf4>)
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80106b2:	4b0c      	ldr	r3, [pc, #48]	; (80106e4 <tcp_alloc+0xf8>)
 80106b4:	781a      	ldrb	r2, [r3, #0]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80106c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	4a08      	ldr	r2, [pc, #32]	; (80106e8 <tcp_alloc+0xfc>)
 80106c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	4a07      	ldr	r2, [pc, #28]	; (80106ec <tcp_alloc+0x100>)
 80106d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80106d4:	68fb      	ldr	r3, [r7, #12]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	2000ab34 	.word	0x2000ab34
 80106e4:	20004206 	.word	0x20004206
 80106e8:	0801042f 	.word	0x0801042f
 80106ec:	006ddd00 	.word	0x006ddd00

080106f0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	7d1b      	ldrb	r3, [r3, #20]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d034      	beq.n	801076a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010704:	2b0a      	cmp	r3, #10
 8010706:	d030      	beq.n	801076a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 801070c:	2b01      	cmp	r3, #1
 801070e:	d02c      	beq.n	801076a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010714:	2b00      	cmp	r3, #0
 8010716:	d007      	beq.n	8010728 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801071c:	4618      	mov	r0, r3
 801071e:	f7fe fcef 	bl	800f100 <pbuf_free>
      pcb->refused_data = NULL;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801072c:	4618      	mov	r0, r3
 801072e:	f7ff fe36 	bl	801039e <tcp_segs_free>
    pcb->ooseq = NULL;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801073e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010744:	4618      	mov	r0, r3
 8010746:	f7ff fe2a 	bl	801039e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801074e:	4618      	mov	r0, r3
 8010750:	f7ff fe25 	bl	801039e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	669a      	str	r2, [r3, #104]	; 0x68
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801076a:	bf00      	nop
 801076c:	3708      	adds	r7, #8
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
	...

08010774 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	683a      	ldr	r2, [r7, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d105      	bne.n	8010794 <tcp_pcb_remove+0x20>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	68da      	ldr	r2, [r3, #12]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	601a      	str	r2, [r3, #0]
 8010792:	e013      	b.n	80107bc <tcp_pcb_remove+0x48>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	60fb      	str	r3, [r7, #12]
 801079a:	e00c      	b.n	80107b6 <tcp_pcb_remove+0x42>
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	683a      	ldr	r2, [r7, #0]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d104      	bne.n	80107b0 <tcp_pcb_remove+0x3c>
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	68da      	ldr	r2, [r3, #12]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	60da      	str	r2, [r3, #12]
 80107ae:	e005      	b.n	80107bc <tcp_pcb_remove+0x48>
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	60fb      	str	r3, [r7, #12]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1ef      	bne.n	801079c <tcp_pcb_remove+0x28>
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	2200      	movs	r2, #0
 80107c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80107c2:	6838      	ldr	r0, [r7, #0]
 80107c4:	f7ff ff94 	bl	80106f0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	7d1b      	ldrb	r3, [r3, #20]
 80107cc:	2b0a      	cmp	r3, #10
 80107ce:	d013      	beq.n	80107f8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d00f      	beq.n	80107f8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	7e9b      	ldrb	r3, [r3, #26]
 80107dc:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d009      	beq.n	80107f8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	7e9b      	ldrb	r3, [r3, #26]
 80107e8:	f043 0302 	orr.w	r3, r3, #2
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80107f2:	6838      	ldr	r0, [r7, #0]
 80107f4:	f002 fd8c 	bl	8013310 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	7d1b      	ldrb	r3, [r3, #20]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d020      	beq.n	8010842 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010804:	2b00      	cmp	r3, #0
 8010806:	d006      	beq.n	8010816 <tcp_pcb_remove+0xa2>
 8010808:	4b13      	ldr	r3, [pc, #76]	; (8010858 <tcp_pcb_remove+0xe4>)
 801080a:	f240 7253 	movw	r2, #1875	; 0x753
 801080e:	4913      	ldr	r1, [pc, #76]	; (801085c <tcp_pcb_remove+0xe8>)
 8010810:	4813      	ldr	r0, [pc, #76]	; (8010860 <tcp_pcb_remove+0xec>)
 8010812:	f008 ff67 	bl	80196e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801081a:	2b00      	cmp	r3, #0
 801081c:	d006      	beq.n	801082c <tcp_pcb_remove+0xb8>
 801081e:	4b0e      	ldr	r3, [pc, #56]	; (8010858 <tcp_pcb_remove+0xe4>)
 8010820:	f240 7254 	movw	r2, #1876	; 0x754
 8010824:	490f      	ldr	r1, [pc, #60]	; (8010864 <tcp_pcb_remove+0xf0>)
 8010826:	480e      	ldr	r0, [pc, #56]	; (8010860 <tcp_pcb_remove+0xec>)
 8010828:	f008 ff5c 	bl	80196e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010830:	2b00      	cmp	r3, #0
 8010832:	d006      	beq.n	8010842 <tcp_pcb_remove+0xce>
 8010834:	4b08      	ldr	r3, [pc, #32]	; (8010858 <tcp_pcb_remove+0xe4>)
 8010836:	f240 7256 	movw	r2, #1878	; 0x756
 801083a:	490b      	ldr	r1, [pc, #44]	; (8010868 <tcp_pcb_remove+0xf4>)
 801083c:	4808      	ldr	r0, [pc, #32]	; (8010860 <tcp_pcb_remove+0xec>)
 801083e:	f008 ff51 	bl	80196e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	2200      	movs	r2, #0
 8010846:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	2200      	movs	r2, #0
 801084c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801084e:	bf00      	nop
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	0801b2e4 	.word	0x0801b2e4
 801085c:	0801b69c 	.word	0x0801b69c
 8010860:	0801b320 	.word	0x0801b320
 8010864:	0801b6b4 	.word	0x0801b6b4
 8010868:	0801b6d0 	.word	0x0801b6d0

0801086c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010874:	4b07      	ldr	r3, [pc, #28]	; (8010894 <tcp_next_iss+0x28>)
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	4b07      	ldr	r3, [pc, #28]	; (8010898 <tcp_next_iss+0x2c>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4413      	add	r3, r2
 801087e:	4a05      	ldr	r2, [pc, #20]	; (8010894 <tcp_next_iss+0x28>)
 8010880:	6013      	str	r3, [r2, #0]
  return iss;
 8010882:	4b04      	ldr	r3, [pc, #16]	; (8010894 <tcp_next_iss+0x28>)
 8010884:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010886:	4618      	mov	r0, r3
 8010888:	370c      	adds	r7, #12
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop
 8010894:	2000011c 	.word	0x2000011c
 8010898:	2000ab34 	.word	0x2000ab34

0801089c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	4603      	mov	r3, r0
 80108a4:	6039      	str	r1, [r7, #0]
 80108a6:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80108a8:	6838      	ldr	r0, [r7, #0]
 80108aa:	f006 fe95 	bl	80175d8 <ip4_route>
 80108ae:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d101      	bne.n	80108ba <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80108b6:	88fb      	ldrh	r3, [r7, #6]
 80108b8:	e010      	b.n	80108dc <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108be:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80108c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d008      	beq.n	80108da <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80108c8:	897b      	ldrh	r3, [r7, #10]
 80108ca:	3b28      	subs	r3, #40	; 0x28
 80108cc:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80108ce:	893a      	ldrh	r2, [r7, #8]
 80108d0:	88fb      	ldrh	r3, [r7, #6]
 80108d2:	4293      	cmp	r3, r2
 80108d4:	bf28      	it	cs
 80108d6:	4613      	movcs	r3, r2
 80108d8:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80108da:	88fb      	ldrh	r3, [r7, #6]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3710      	adds	r7, #16
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80108f2:	e011      	b.n	8010918 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d108      	bne.n	8010912 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010906:	68f8      	ldr	r0, [r7, #12]
 8010908:	f7ff f908 	bl	800fb1c <tcp_abort>
      pcb = next;
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	60fb      	str	r3, [r7, #12]
 8010910:	e002      	b.n	8010918 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1ea      	bne.n	80108f4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 801091e:	bf00      	nop
 8010920:	3710      	adds	r7, #16
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
	...

08010928 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b084      	sub	sp, #16
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d02c      	beq.n	8010992 <tcp_netif_ip_addr_changed+0x6a>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d028      	beq.n	8010992 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010940:	4b16      	ldr	r3, [pc, #88]	; (801099c <tcp_netif_ip_addr_changed+0x74>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f7ff ffcc 	bl	80108e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801094c:	4b14      	ldr	r3, [pc, #80]	; (80109a0 <tcp_netif_ip_addr_changed+0x78>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7ff ffc6 	bl	80108e4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d019      	beq.n	8010992 <tcp_netif_ip_addr_changed+0x6a>
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d015      	beq.n	8010992 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8010966:	4b0f      	ldr	r3, [pc, #60]	; (80109a4 <tcp_netif_ip_addr_changed+0x7c>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	60fb      	str	r3, [r7, #12]
 801096c:	e00e      	b.n	801098c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	429a      	cmp	r2, r3
 801097e:	d103      	bne.n	8010988 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	60fb      	str	r3, [r7, #12]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1ed      	bne.n	801096e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010992:	bf00      	nop
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	2000ab30 	.word	0x2000ab30
 80109a0:	2000ab3c 	.word	0x2000ab3c
 80109a4:	2000ab38 	.word	0x2000ab38

080109a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80109a8:	b590      	push	{r4, r7, lr}
 80109aa:	b08b      	sub	sp, #44	; 0x2c
 80109ac:	af02      	add	r7, sp, #8
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	4a82      	ldr	r2, [pc, #520]	; (8010bc0 <tcp_input+0x218>)
 80109b8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	895b      	ldrh	r3, [r3, #10]
 80109be:	2b13      	cmp	r3, #19
 80109c0:	f240 838a 	bls.w	80110d8 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80109c4:	4b7f      	ldr	r3, [pc, #508]	; (8010bc4 <tcp_input+0x21c>)
 80109c6:	695a      	ldr	r2, [r3, #20]
 80109c8:	4b7e      	ldr	r3, [pc, #504]	; (8010bc4 <tcp_input+0x21c>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4619      	mov	r1, r3
 80109ce:	4610      	mov	r0, r2
 80109d0:	f007 f89a 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	f040 8380 	bne.w	80110dc <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80109dc:	4b79      	ldr	r3, [pc, #484]	; (8010bc4 <tcp_input+0x21c>)
 80109de:	695b      	ldr	r3, [r3, #20]
 80109e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80109e4:	2be0      	cmp	r3, #224	; 0xe0
 80109e6:	f000 8379 	beq.w	80110dc <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80109ea:	4b75      	ldr	r3, [pc, #468]	; (8010bc0 <tcp_input+0x218>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	899b      	ldrh	r3, [r3, #12]
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fd f9e2 	bl	800ddbc <lwip_htons>
 80109f8:	4603      	mov	r3, r0
 80109fa:	0b1b      	lsrs	r3, r3, #12
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	009b      	lsls	r3, r3, #2
 8010a02:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010a04:	7cbb      	ldrb	r3, [r7, #18]
 8010a06:	2b13      	cmp	r3, #19
 8010a08:	f240 8368 	bls.w	80110dc <tcp_input+0x734>
 8010a0c:	7cbb      	ldrb	r3, [r7, #18]
 8010a0e:	b29a      	uxth	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	891b      	ldrh	r3, [r3, #8]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	f200 8361 	bhi.w	80110dc <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8010a1a:	7cbb      	ldrb	r3, [r7, #18]
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	3b14      	subs	r3, #20
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	4b69      	ldr	r3, [pc, #420]	; (8010bc8 <tcp_input+0x220>)
 8010a24:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010a26:	4b69      	ldr	r3, [pc, #420]	; (8010bcc <tcp_input+0x224>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	895a      	ldrh	r2, [r3, #10]
 8010a30:	7cbb      	ldrb	r3, [r7, #18]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d30d      	bcc.n	8010a54 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010a38:	4b63      	ldr	r3, [pc, #396]	; (8010bc8 <tcp_input+0x220>)
 8010a3a:	881a      	ldrh	r2, [r3, #0]
 8010a3c:	4b64      	ldr	r3, [pc, #400]	; (8010bd0 <tcp_input+0x228>)
 8010a3e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8010a40:	7cbb      	ldrb	r3, [r7, #18]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	425b      	negs	r3, r3
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	b21b      	sxth	r3, r3
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7fe fb33 	bl	800f0b8 <pbuf_header>
 8010a52:	e055      	b.n	8010b00 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d105      	bne.n	8010a68 <tcp_input+0xc0>
 8010a5c:	4b5d      	ldr	r3, [pc, #372]	; (8010bd4 <tcp_input+0x22c>)
 8010a5e:	22b2      	movs	r2, #178	; 0xb2
 8010a60:	495d      	ldr	r1, [pc, #372]	; (8010bd8 <tcp_input+0x230>)
 8010a62:	485e      	ldr	r0, [pc, #376]	; (8010bdc <tcp_input+0x234>)
 8010a64:	f008 fe3e 	bl	80196e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8010a68:	f06f 0113 	mvn.w	r1, #19
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7fe fb23 	bl	800f0b8 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	895a      	ldrh	r2, [r3, #10]
 8010a76:	4b56      	ldr	r3, [pc, #344]	; (8010bd0 <tcp_input+0x228>)
 8010a78:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8010a7a:	4b53      	ldr	r3, [pc, #332]	; (8010bc8 <tcp_input+0x220>)
 8010a7c:	881a      	ldrh	r2, [r3, #0]
 8010a7e:	4b54      	ldr	r3, [pc, #336]	; (8010bd0 <tcp_input+0x228>)
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8010a86:	4b52      	ldr	r3, [pc, #328]	; (8010bd0 <tcp_input+0x228>)
 8010a88:	881b      	ldrh	r3, [r3, #0]
 8010a8a:	425b      	negs	r3, r3
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	b21b      	sxth	r3, r3
 8010a90:	4619      	mov	r1, r3
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7fe fb10 	bl	800f0b8 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	895b      	ldrh	r3, [r3, #10]
 8010a9e:	8a3a      	ldrh	r2, [r7, #16]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	f200 831d 	bhi.w	80110e0 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	685b      	ldr	r3, [r3, #4]
 8010aac:	4a47      	ldr	r2, [pc, #284]	; (8010bcc <tcp_input+0x224>)
 8010aae:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	8a3b      	ldrh	r3, [r7, #16]
 8010ab6:	425b      	negs	r3, r3
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	b21b      	sxth	r3, r3
 8010abc:	4619      	mov	r1, r3
 8010abe:	4610      	mov	r0, r2
 8010ac0:	f7fe fafa 	bl	800f0b8 <pbuf_header>
    p->tot_len -= opt2len;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	891a      	ldrh	r2, [r3, #8]
 8010ac8:	8a3b      	ldrh	r3, [r7, #16]
 8010aca:	1ad3      	subs	r3, r2, r3
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	895b      	ldrh	r3, [r3, #10]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d005      	beq.n	8010ae6 <tcp_input+0x13e>
 8010ada:	4b3e      	ldr	r3, [pc, #248]	; (8010bd4 <tcp_input+0x22c>)
 8010adc:	22cf      	movs	r2, #207	; 0xcf
 8010ade:	4940      	ldr	r1, [pc, #256]	; (8010be0 <tcp_input+0x238>)
 8010ae0:	483e      	ldr	r0, [pc, #248]	; (8010bdc <tcp_input+0x234>)
 8010ae2:	f008 fdff 	bl	80196e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	891a      	ldrh	r2, [r3, #8]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	891b      	ldrh	r3, [r3, #8]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d005      	beq.n	8010b00 <tcp_input+0x158>
 8010af4:	4b37      	ldr	r3, [pc, #220]	; (8010bd4 <tcp_input+0x22c>)
 8010af6:	22d0      	movs	r2, #208	; 0xd0
 8010af8:	493a      	ldr	r1, [pc, #232]	; (8010be4 <tcp_input+0x23c>)
 8010afa:	4838      	ldr	r0, [pc, #224]	; (8010bdc <tcp_input+0x234>)
 8010afc:	f008 fdf2 	bl	80196e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010b00:	4b2f      	ldr	r3, [pc, #188]	; (8010bc0 <tcp_input+0x218>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	881b      	ldrh	r3, [r3, #0]
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	4b2d      	ldr	r3, [pc, #180]	; (8010bc0 <tcp_input+0x218>)
 8010b0a:	681c      	ldr	r4, [r3, #0]
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	f7fd f955 	bl	800ddbc <lwip_htons>
 8010b12:	4603      	mov	r3, r0
 8010b14:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010b16:	4b2a      	ldr	r3, [pc, #168]	; (8010bc0 <tcp_input+0x218>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	885b      	ldrh	r3, [r3, #2]
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	4b28      	ldr	r3, [pc, #160]	; (8010bc0 <tcp_input+0x218>)
 8010b20:	681c      	ldr	r4, [r3, #0]
 8010b22:	4610      	mov	r0, r2
 8010b24:	f7fd f94a 	bl	800ddbc <lwip_htons>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010b2c:	4b24      	ldr	r3, [pc, #144]	; (8010bc0 <tcp_input+0x218>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	685a      	ldr	r2, [r3, #4]
 8010b32:	4b23      	ldr	r3, [pc, #140]	; (8010bc0 <tcp_input+0x218>)
 8010b34:	681c      	ldr	r4, [r3, #0]
 8010b36:	4610      	mov	r0, r2
 8010b38:	f7fd f94e 	bl	800ddd8 <lwip_htonl>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	6063      	str	r3, [r4, #4]
 8010b40:	6863      	ldr	r3, [r4, #4]
 8010b42:	4a29      	ldr	r2, [pc, #164]	; (8010be8 <tcp_input+0x240>)
 8010b44:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010b46:	4b1e      	ldr	r3, [pc, #120]	; (8010bc0 <tcp_input+0x218>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	689a      	ldr	r2, [r3, #8]
 8010b4c:	4b1c      	ldr	r3, [pc, #112]	; (8010bc0 <tcp_input+0x218>)
 8010b4e:	681c      	ldr	r4, [r3, #0]
 8010b50:	4610      	mov	r0, r2
 8010b52:	f7fd f941 	bl	800ddd8 <lwip_htonl>
 8010b56:	4603      	mov	r3, r0
 8010b58:	60a3      	str	r3, [r4, #8]
 8010b5a:	68a3      	ldr	r3, [r4, #8]
 8010b5c:	4a23      	ldr	r2, [pc, #140]	; (8010bec <tcp_input+0x244>)
 8010b5e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010b60:	4b17      	ldr	r3, [pc, #92]	; (8010bc0 <tcp_input+0x218>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	89db      	ldrh	r3, [r3, #14]
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	4b15      	ldr	r3, [pc, #84]	; (8010bc0 <tcp_input+0x218>)
 8010b6a:	681c      	ldr	r4, [r3, #0]
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	f7fd f925 	bl	800ddbc <lwip_htons>
 8010b72:	4603      	mov	r3, r0
 8010b74:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010b76:	4b12      	ldr	r3, [pc, #72]	; (8010bc0 <tcp_input+0x218>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	899b      	ldrh	r3, [r3, #12]
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fd f91c 	bl	800ddbc <lwip_htons>
 8010b84:	4603      	mov	r3, r0
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b8c:	b2da      	uxtb	r2, r3
 8010b8e:	4b18      	ldr	r3, [pc, #96]	; (8010bf0 <tcp_input+0x248>)
 8010b90:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	891a      	ldrh	r2, [r3, #8]
 8010b96:	4b16      	ldr	r3, [pc, #88]	; (8010bf0 <tcp_input+0x248>)
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	f003 0303 	and.w	r3, r3, #3
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	bf14      	ite	ne
 8010ba2:	2301      	movne	r3, #1
 8010ba4:	2300      	moveq	r3, #0
 8010ba6:	b2db      	uxtb	r3, r3
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	4413      	add	r3, r2
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	4b11      	ldr	r3, [pc, #68]	; (8010bf4 <tcp_input+0x24c>)
 8010bb0:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bb6:	4b10      	ldr	r3, [pc, #64]	; (8010bf8 <tcp_input+0x250>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	61fb      	str	r3, [r7, #28]
 8010bbc:	e082      	b.n	8010cc4 <tcp_input+0x31c>
 8010bbe:	bf00      	nop
 8010bc0:	20004218 	.word	0x20004218
 8010bc4:	20007608 	.word	0x20007608
 8010bc8:	2000421c 	.word	0x2000421c
 8010bcc:	20004220 	.word	0x20004220
 8010bd0:	2000421e 	.word	0x2000421e
 8010bd4:	0801b6e8 	.word	0x0801b6e8
 8010bd8:	0801b71c 	.word	0x0801b71c
 8010bdc:	0801b72c 	.word	0x0801b72c
 8010be0:	0801b754 	.word	0x0801b754
 8010be4:	0801b760 	.word	0x0801b760
 8010be8:	20004228 	.word	0x20004228
 8010bec:	2000422c 	.word	0x2000422c
 8010bf0:	20004234 	.word	0x20004234
 8010bf4:	20004232 	.word	0x20004232
 8010bf8:	2000ab30 	.word	0x2000ab30
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	7d1b      	ldrb	r3, [r3, #20]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d105      	bne.n	8010c10 <tcp_input+0x268>
 8010c04:	4b8f      	ldr	r3, [pc, #572]	; (8010e44 <tcp_input+0x49c>)
 8010c06:	22e2      	movs	r2, #226	; 0xe2
 8010c08:	498f      	ldr	r1, [pc, #572]	; (8010e48 <tcp_input+0x4a0>)
 8010c0a:	4890      	ldr	r0, [pc, #576]	; (8010e4c <tcp_input+0x4a4>)
 8010c0c:	f008 fd6a 	bl	80196e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	7d1b      	ldrb	r3, [r3, #20]
 8010c14:	2b0a      	cmp	r3, #10
 8010c16:	d105      	bne.n	8010c24 <tcp_input+0x27c>
 8010c18:	4b8a      	ldr	r3, [pc, #552]	; (8010e44 <tcp_input+0x49c>)
 8010c1a:	22e3      	movs	r2, #227	; 0xe3
 8010c1c:	498c      	ldr	r1, [pc, #560]	; (8010e50 <tcp_input+0x4a8>)
 8010c1e:	488b      	ldr	r0, [pc, #556]	; (8010e4c <tcp_input+0x4a4>)
 8010c20:	f008 fd60 	bl	80196e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	7d1b      	ldrb	r3, [r3, #20]
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d105      	bne.n	8010c38 <tcp_input+0x290>
 8010c2c:	4b85      	ldr	r3, [pc, #532]	; (8010e44 <tcp_input+0x49c>)
 8010c2e:	22e4      	movs	r2, #228	; 0xe4
 8010c30:	4988      	ldr	r1, [pc, #544]	; (8010e54 <tcp_input+0x4ac>)
 8010c32:	4886      	ldr	r0, [pc, #536]	; (8010e4c <tcp_input+0x4a4>)
 8010c34:	f008 fd56 	bl	80196e4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	8b1a      	ldrh	r2, [r3, #24]
 8010c3c:	4b86      	ldr	r3, [pc, #536]	; (8010e58 <tcp_input+0x4b0>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d138      	bne.n	8010cba <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	8ada      	ldrh	r2, [r3, #22]
 8010c4c:	4b82      	ldr	r3, [pc, #520]	; (8010e58 <tcp_input+0x4b0>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	885b      	ldrh	r3, [r3, #2]
 8010c52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d130      	bne.n	8010cba <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	685a      	ldr	r2, [r3, #4]
 8010c5c:	4b7f      	ldr	r3, [pc, #508]	; (8010e5c <tcp_input+0x4b4>)
 8010c5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d12a      	bne.n	8010cba <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c64:	69fb      	ldr	r3, [r7, #28]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	4b7c      	ldr	r3, [pc, #496]	; (8010e5c <tcp_input+0x4b4>)
 8010c6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d124      	bne.n	8010cba <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010c70:	69fb      	ldr	r3, [r7, #28]
 8010c72:	68db      	ldr	r3, [r3, #12]
 8010c74:	69fa      	ldr	r2, [r7, #28]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d105      	bne.n	8010c86 <tcp_input+0x2de>
 8010c7a:	4b72      	ldr	r3, [pc, #456]	; (8010e44 <tcp_input+0x49c>)
 8010c7c:	22ec      	movs	r2, #236	; 0xec
 8010c7e:	4978      	ldr	r1, [pc, #480]	; (8010e60 <tcp_input+0x4b8>)
 8010c80:	4872      	ldr	r0, [pc, #456]	; (8010e4c <tcp_input+0x4a4>)
 8010c82:	f008 fd2f 	bl	80196e4 <iprintf>
      if (prev != NULL) {
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00a      	beq.n	8010ca2 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	68da      	ldr	r2, [r3, #12]
 8010c90:	69bb      	ldr	r3, [r7, #24]
 8010c92:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010c94:	4b73      	ldr	r3, [pc, #460]	; (8010e64 <tcp_input+0x4bc>)
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010c9c:	4a71      	ldr	r2, [pc, #452]	; (8010e64 <tcp_input+0x4bc>)
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	69fa      	ldr	r2, [r7, #28]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d10f      	bne.n	8010ccc <tcp_input+0x324>
 8010cac:	4b65      	ldr	r3, [pc, #404]	; (8010e44 <tcp_input+0x49c>)
 8010cae:	22f4      	movs	r2, #244	; 0xf4
 8010cb0:	496d      	ldr	r1, [pc, #436]	; (8010e68 <tcp_input+0x4c0>)
 8010cb2:	4866      	ldr	r0, [pc, #408]	; (8010e4c <tcp_input+0x4a4>)
 8010cb4:	f008 fd16 	bl	80196e4 <iprintf>
      break;
 8010cb8:	e008      	b.n	8010ccc <tcp_input+0x324>
    }
    prev = pcb;
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	61fb      	str	r3, [r7, #28]
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d198      	bne.n	8010bfc <tcp_input+0x254>
 8010cca:	e000      	b.n	8010cce <tcp_input+0x326>
      break;
 8010ccc:	bf00      	nop
  }

  if (pcb == NULL) {
 8010cce:	69fb      	ldr	r3, [r7, #28]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d173      	bne.n	8010dbc <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cd4:	4b65      	ldr	r3, [pc, #404]	; (8010e6c <tcp_input+0x4c4>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	61fb      	str	r3, [r7, #28]
 8010cda:	e02f      	b.n	8010d3c <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	7d1b      	ldrb	r3, [r3, #20]
 8010ce0:	2b0a      	cmp	r3, #10
 8010ce2:	d005      	beq.n	8010cf0 <tcp_input+0x348>
 8010ce4:	4b57      	ldr	r3, [pc, #348]	; (8010e44 <tcp_input+0x49c>)
 8010ce6:	22fe      	movs	r2, #254	; 0xfe
 8010ce8:	4961      	ldr	r1, [pc, #388]	; (8010e70 <tcp_input+0x4c8>)
 8010cea:	4858      	ldr	r0, [pc, #352]	; (8010e4c <tcp_input+0x4a4>)
 8010cec:	f008 fcfa 	bl	80196e4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	8b1a      	ldrh	r2, [r3, #24]
 8010cf4:	4b58      	ldr	r3, [pc, #352]	; (8010e58 <tcp_input+0x4b0>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	881b      	ldrh	r3, [r3, #0]
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d11a      	bne.n	8010d36 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	8ada      	ldrh	r2, [r3, #22]
 8010d04:	4b54      	ldr	r3, [pc, #336]	; (8010e58 <tcp_input+0x4b0>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	885b      	ldrh	r3, [r3, #2]
 8010d0a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d112      	bne.n	8010d36 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	685a      	ldr	r2, [r3, #4]
 8010d14:	4b51      	ldr	r3, [pc, #324]	; (8010e5c <tcp_input+0x4b4>)
 8010d16:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d10c      	bne.n	8010d36 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	681a      	ldr	r2, [r3, #0]
 8010d20:	4b4e      	ldr	r3, [pc, #312]	; (8010e5c <tcp_input+0x4b4>)
 8010d22:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d106      	bne.n	8010d36 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8010d28:	69f8      	ldr	r0, [r7, #28]
 8010d2a:	f000 fb15 	bl	8011358 <tcp_timewait_input>
        pbuf_free(p);
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7fe f9e6 	bl	800f100 <pbuf_free>
        return;
 8010d34:	e1da      	b.n	80110ec <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d36:	69fb      	ldr	r3, [r7, #28]
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	61fb      	str	r3, [r7, #28]
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1cc      	bne.n	8010cdc <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010d42:	2300      	movs	r3, #0
 8010d44:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010d46:	4b4b      	ldr	r3, [pc, #300]	; (8010e74 <tcp_input+0x4cc>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	617b      	str	r3, [r7, #20]
 8010d4c:	e019      	b.n	8010d82 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	8ada      	ldrh	r2, [r3, #22]
 8010d52:	4b41      	ldr	r3, [pc, #260]	; (8010e58 <tcp_input+0x4b0>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	885b      	ldrh	r3, [r3, #2]
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d10c      	bne.n	8010d78 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	4b3e      	ldr	r3, [pc, #248]	; (8010e5c <tcp_input+0x4b4>)
 8010d64:	695b      	ldr	r3, [r3, #20]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d00f      	beq.n	8010d8a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d00d      	beq.n	8010d8c <tcp_input+0x3e4>
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d009      	beq.n	8010d8c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	617b      	str	r3, [r7, #20]
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d1e2      	bne.n	8010d4e <tcp_input+0x3a6>
 8010d88:	e000      	b.n	8010d8c <tcp_input+0x3e4>
            break;
 8010d8a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d014      	beq.n	8010dbc <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00a      	beq.n	8010dae <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	68da      	ldr	r2, [r3, #12]
 8010d9c:	69bb      	ldr	r3, [r7, #24]
 8010d9e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010da0:	4b34      	ldr	r3, [pc, #208]	; (8010e74 <tcp_input+0x4cc>)
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010da8:	4a32      	ldr	r2, [pc, #200]	; (8010e74 <tcp_input+0x4cc>)
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8010dae:	6978      	ldr	r0, [r7, #20]
 8010db0:	f000 f9f0 	bl	8011194 <tcp_listen_input>
      pbuf_free(p);
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7fe f9a3 	bl	800f100 <pbuf_free>
      return;
 8010dba:	e197      	b.n	80110ec <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8010dbc:	69fb      	ldr	r3, [r7, #28]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	f000 8164 	beq.w	801108c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010dc4:	4b2c      	ldr	r3, [pc, #176]	; (8010e78 <tcp_input+0x4d0>)
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	891a      	ldrh	r2, [r3, #8]
 8010dce:	4b2a      	ldr	r3, [pc, #168]	; (8010e78 <tcp_input+0x4d0>)
 8010dd0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010dd2:	4a29      	ldr	r2, [pc, #164]	; (8010e78 <tcp_input+0x4d0>)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010dd8:	4b1f      	ldr	r3, [pc, #124]	; (8010e58 <tcp_input+0x4b0>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a26      	ldr	r2, [pc, #152]	; (8010e78 <tcp_input+0x4d0>)
 8010dde:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010de0:	4b26      	ldr	r3, [pc, #152]	; (8010e7c <tcp_input+0x4d4>)
 8010de2:	2200      	movs	r2, #0
 8010de4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010de6:	4b26      	ldr	r3, [pc, #152]	; (8010e80 <tcp_input+0x4d8>)
 8010de8:	2200      	movs	r2, #0
 8010dea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010dec:	4b25      	ldr	r3, [pc, #148]	; (8010e84 <tcp_input+0x4dc>)
 8010dee:	2200      	movs	r2, #0
 8010df0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010df2:	4b25      	ldr	r3, [pc, #148]	; (8010e88 <tcp_input+0x4e0>)
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	f003 0308 	and.w	r3, r3, #8
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d006      	beq.n	8010e0c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	7b5b      	ldrb	r3, [r3, #13]
 8010e02:	f043 0301 	orr.w	r3, r3, #1
 8010e06:	b2da      	uxtb	r2, r3
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d03d      	beq.n	8010e90 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010e14:	69f8      	ldr	r0, [r7, #28]
 8010e16:	f7ff fa59 	bl	80102cc <tcp_process_refused_data>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	f113 0f0d 	cmn.w	r3, #13
 8010e20:	d007      	beq.n	8010e32 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010e22:	69fb      	ldr	r3, [r7, #28]
 8010e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d032      	beq.n	8010e90 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010e2a:	4b18      	ldr	r3, [pc, #96]	; (8010e8c <tcp_input+0x4e4>)
 8010e2c:	881b      	ldrh	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d02e      	beq.n	8010e90 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f040 8108 	bne.w	801104c <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010e3c:	69f8      	ldr	r0, [r7, #28]
 8010e3e:	f002 fa0b 	bl	8013258 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010e42:	e103      	b.n	801104c <tcp_input+0x6a4>
 8010e44:	0801b6e8 	.word	0x0801b6e8
 8010e48:	0801b780 	.word	0x0801b780
 8010e4c:	0801b72c 	.word	0x0801b72c
 8010e50:	0801b7a8 	.word	0x0801b7a8
 8010e54:	0801b7d4 	.word	0x0801b7d4
 8010e58:	20004218 	.word	0x20004218
 8010e5c:	20007608 	.word	0x20007608
 8010e60:	0801b7fc 	.word	0x0801b7fc
 8010e64:	2000ab30 	.word	0x2000ab30
 8010e68:	0801b828 	.word	0x0801b828
 8010e6c:	2000ab40 	.word	0x2000ab40
 8010e70:	0801b854 	.word	0x0801b854
 8010e74:	2000ab38 	.word	0x2000ab38
 8010e78:	20004208 	.word	0x20004208
 8010e7c:	20004238 	.word	0x20004238
 8010e80:	20004235 	.word	0x20004235
 8010e84:	20004230 	.word	0x20004230
 8010e88:	20004234 	.word	0x20004234
 8010e8c:	20004232 	.word	0x20004232
      }
    }
    tcp_input_pcb = pcb;
 8010e90:	4a98      	ldr	r2, [pc, #608]	; (80110f4 <tcp_input+0x74c>)
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010e96:	69f8      	ldr	r0, [r7, #28]
 8010e98:	f000 fac6 	bl	8011428 <tcp_process>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010ea0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ea4:	f113 0f0d 	cmn.w	r3, #13
 8010ea8:	f000 80d2 	beq.w	8011050 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8010eac:	4b92      	ldr	r3, [pc, #584]	; (80110f8 <tcp_input+0x750>)
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	f003 0308 	and.w	r3, r3, #8
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d016      	beq.n	8010ee6 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d008      	beq.n	8010ed4 <tcp_input+0x52c>
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ec8:	69fa      	ldr	r2, [r7, #28]
 8010eca:	6912      	ldr	r2, [r2, #16]
 8010ecc:	f06f 010d 	mvn.w	r1, #13
 8010ed0:	4610      	mov	r0, r2
 8010ed2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010ed4:	69f9      	ldr	r1, [r7, #28]
 8010ed6:	4889      	ldr	r0, [pc, #548]	; (80110fc <tcp_input+0x754>)
 8010ed8:	f7ff fc4c 	bl	8010774 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8010edc:	69f9      	ldr	r1, [r7, #28]
 8010ede:	2001      	movs	r0, #1
 8010ee0:	f7fd fbac 	bl	800e63c <memp_free>
 8010ee4:	e0bf      	b.n	8011066 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010eea:	4b85      	ldr	r3, [pc, #532]	; (8011100 <tcp_input+0x758>)
 8010eec:	881b      	ldrh	r3, [r3, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d01b      	beq.n	8010f2a <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010ef2:	4b83      	ldr	r3, [pc, #524]	; (8011100 <tcp_input+0x758>)
 8010ef4:	881b      	ldrh	r3, [r3, #0]
 8010ef6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d009      	beq.n	8010f14 <tcp_input+0x56c>
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f04:	69fa      	ldr	r2, [r7, #28]
 8010f06:	6910      	ldr	r0, [r2, #16]
 8010f08:	89fa      	ldrh	r2, [r7, #14]
 8010f0a:	69f9      	ldr	r1, [r7, #28]
 8010f0c:	4798      	blx	r3
 8010f0e:	4603      	mov	r3, r0
 8010f10:	74fb      	strb	r3, [r7, #19]
 8010f12:	e001      	b.n	8010f18 <tcp_input+0x570>
 8010f14:	2300      	movs	r3, #0
 8010f16:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010f18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f1c:	f113 0f0d 	cmn.w	r3, #13
 8010f20:	f000 8098 	beq.w	8011054 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010f24:	4b76      	ldr	r3, [pc, #472]	; (8011100 <tcp_input+0x758>)
 8010f26:	2200      	movs	r2, #0
 8010f28:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010f2a:	69f8      	ldr	r0, [r7, #28]
 8010f2c:	f000 f900 	bl	8011130 <tcp_input_delayed_close>
 8010f30:	4603      	mov	r3, r0
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f040 8090 	bne.w	8011058 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010f38:	4b72      	ldr	r3, [pc, #456]	; (8011104 <tcp_input+0x75c>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d041      	beq.n	8010fc4 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d006      	beq.n	8010f56 <tcp_input+0x5ae>
 8010f48:	4b6f      	ldr	r3, [pc, #444]	; (8011108 <tcp_input+0x760>)
 8010f4a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8010f4e:	496f      	ldr	r1, [pc, #444]	; (801110c <tcp_input+0x764>)
 8010f50:	486f      	ldr	r0, [pc, #444]	; (8011110 <tcp_input+0x768>)
 8010f52:	f008 fbc7 	bl	80196e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	7e9b      	ldrb	r3, [r3, #26]
 8010f5a:	f003 0310 	and.w	r3, r3, #16
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d008      	beq.n	8010f74 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010f62:	4b68      	ldr	r3, [pc, #416]	; (8011104 <tcp_input+0x75c>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fe f8ca 	bl	800f100 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010f6c:	69f8      	ldr	r0, [r7, #28]
 8010f6e:	f7fe fdd5 	bl	800fb1c <tcp_abort>
            goto aborted;
 8010f72:	e078      	b.n	8011066 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010f74:	69fb      	ldr	r3, [r7, #28]
 8010f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d00c      	beq.n	8010f98 <tcp_input+0x5f0>
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	6918      	ldr	r0, [r3, #16]
 8010f88:	4b5e      	ldr	r3, [pc, #376]	; (8011104 <tcp_input+0x75c>)
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	69f9      	ldr	r1, [r7, #28]
 8010f90:	47a0      	blx	r4
 8010f92:	4603      	mov	r3, r0
 8010f94:	74fb      	strb	r3, [r7, #19]
 8010f96:	e008      	b.n	8010faa <tcp_input+0x602>
 8010f98:	4b5a      	ldr	r3, [pc, #360]	; (8011104 <tcp_input+0x75c>)
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	69f9      	ldr	r1, [r7, #28]
 8010fa0:	2000      	movs	r0, #0
 8010fa2:	f7ff fa44 	bl	801042e <tcp_recv_null>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010faa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fae:	f113 0f0d 	cmn.w	r3, #13
 8010fb2:	d053      	beq.n	801105c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010fb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d003      	beq.n	8010fc4 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010fbc:	4b51      	ldr	r3, [pc, #324]	; (8011104 <tcp_input+0x75c>)
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010fc4:	4b4c      	ldr	r3, [pc, #304]	; (80110f8 <tcp_input+0x750>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f003 0320 	and.w	r3, r3, #32
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d030      	beq.n	8011032 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d009      	beq.n	8010fec <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fdc:	7b5a      	ldrb	r2, [r3, #13]
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fe2:	f042 0220 	orr.w	r2, r2, #32
 8010fe6:	b2d2      	uxtb	r2, r2
 8010fe8:	735a      	strb	r2, [r3, #13]
 8010fea:	e022      	b.n	8011032 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ff0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010ff4:	d005      	beq.n	8011002 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8010ff6:	69fb      	ldr	r3, [r7, #28]
 8010ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00b      	beq.n	8011024 <tcp_input+0x67c>
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	6918      	ldr	r0, [r3, #16]
 8011016:	2300      	movs	r3, #0
 8011018:	2200      	movs	r2, #0
 801101a:	69f9      	ldr	r1, [r7, #28]
 801101c:	47a0      	blx	r4
 801101e:	4603      	mov	r3, r0
 8011020:	74fb      	strb	r3, [r7, #19]
 8011022:	e001      	b.n	8011028 <tcp_input+0x680>
 8011024:	2300      	movs	r3, #0
 8011026:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011028:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801102c:	f113 0f0d 	cmn.w	r3, #13
 8011030:	d016      	beq.n	8011060 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011032:	4b30      	ldr	r3, [pc, #192]	; (80110f4 <tcp_input+0x74c>)
 8011034:	2200      	movs	r2, #0
 8011036:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011038:	69f8      	ldr	r0, [r7, #28]
 801103a:	f000 f879 	bl	8011130 <tcp_input_delayed_close>
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d10f      	bne.n	8011064 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011044:	69f8      	ldr	r0, [r7, #28]
 8011046:	f002 f963 	bl	8013310 <tcp_output>
 801104a:	e00c      	b.n	8011066 <tcp_input+0x6be>
        goto aborted;
 801104c:	bf00      	nop
 801104e:	e00a      	b.n	8011066 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011050:	bf00      	nop
 8011052:	e008      	b.n	8011066 <tcp_input+0x6be>
              goto aborted;
 8011054:	bf00      	nop
 8011056:	e006      	b.n	8011066 <tcp_input+0x6be>
          goto aborted;
 8011058:	bf00      	nop
 801105a:	e004      	b.n	8011066 <tcp_input+0x6be>
            goto aborted;
 801105c:	bf00      	nop
 801105e:	e002      	b.n	8011066 <tcp_input+0x6be>
              goto aborted;
 8011060:	bf00      	nop
 8011062:	e000      	b.n	8011066 <tcp_input+0x6be>
          goto aborted;
 8011064:	bf00      	nop
    tcp_input_pcb = NULL;
 8011066:	4b23      	ldr	r3, [pc, #140]	; (80110f4 <tcp_input+0x74c>)
 8011068:	2200      	movs	r2, #0
 801106a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801106c:	4b25      	ldr	r3, [pc, #148]	; (8011104 <tcp_input+0x75c>)
 801106e:	2200      	movs	r2, #0
 8011070:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8011072:	4b28      	ldr	r3, [pc, #160]	; (8011114 <tcp_input+0x76c>)
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d037      	beq.n	80110ea <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 801107a:	4b26      	ldr	r3, [pc, #152]	; (8011114 <tcp_input+0x76c>)
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	4618      	mov	r0, r3
 8011080:	f7fe f83e 	bl	800f100 <pbuf_free>
      inseg.p = NULL;
 8011084:	4b23      	ldr	r3, [pc, #140]	; (8011114 <tcp_input+0x76c>)
 8011086:	2200      	movs	r2, #0
 8011088:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801108a:	e02e      	b.n	80110ea <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801108c:	4b22      	ldr	r3, [pc, #136]	; (8011118 <tcp_input+0x770>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	899b      	ldrh	r3, [r3, #12]
 8011092:	b29b      	uxth	r3, r3
 8011094:	4618      	mov	r0, r3
 8011096:	f7fc fe91 	bl	800ddbc <lwip_htons>
 801109a:	4603      	mov	r3, r0
 801109c:	f003 0304 	and.w	r3, r3, #4
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d115      	bne.n	80110d0 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80110a4:	4b1d      	ldr	r3, [pc, #116]	; (801111c <tcp_input+0x774>)
 80110a6:	6818      	ldr	r0, [r3, #0]
 80110a8:	4b1d      	ldr	r3, [pc, #116]	; (8011120 <tcp_input+0x778>)
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	461a      	mov	r2, r3
 80110ae:	4b1d      	ldr	r3, [pc, #116]	; (8011124 <tcp_input+0x77c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110b4:	4b18      	ldr	r3, [pc, #96]	; (8011118 <tcp_input+0x770>)
 80110b6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80110b8:	885b      	ldrh	r3, [r3, #2]
 80110ba:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110bc:	4a16      	ldr	r2, [pc, #88]	; (8011118 <tcp_input+0x770>)
 80110be:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80110c0:	8812      	ldrh	r2, [r2, #0]
 80110c2:	b292      	uxth	r2, r2
 80110c4:	9201      	str	r2, [sp, #4]
 80110c6:	9300      	str	r3, [sp, #0]
 80110c8:	4b17      	ldr	r3, [pc, #92]	; (8011128 <tcp_input+0x780>)
 80110ca:	4a18      	ldr	r2, [pc, #96]	; (801112c <tcp_input+0x784>)
 80110cc:	f002 fbaa 	bl	8013824 <tcp_rst>
    pbuf_free(p);
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f7fe f815 	bl	800f100 <pbuf_free>
  return;
 80110d6:	e008      	b.n	80110ea <tcp_input+0x742>
    goto dropped;
 80110d8:	bf00      	nop
 80110da:	e002      	b.n	80110e2 <tcp_input+0x73a>
dropped:
 80110dc:	bf00      	nop
 80110de:	e000      	b.n	80110e2 <tcp_input+0x73a>
      goto dropped;
 80110e0:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f7fe f80c 	bl	800f100 <pbuf_free>
 80110e8:	e000      	b.n	80110ec <tcp_input+0x744>
  return;
 80110ea:	bf00      	nop
}
 80110ec:	3724      	adds	r7, #36	; 0x24
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd90      	pop	{r4, r7, pc}
 80110f2:	bf00      	nop
 80110f4:	2000ab44 	.word	0x2000ab44
 80110f8:	20004235 	.word	0x20004235
 80110fc:	2000ab30 	.word	0x2000ab30
 8011100:	20004230 	.word	0x20004230
 8011104:	20004238 	.word	0x20004238
 8011108:	0801b6e8 	.word	0x0801b6e8
 801110c:	0801b884 	.word	0x0801b884
 8011110:	0801b72c 	.word	0x0801b72c
 8011114:	20004208 	.word	0x20004208
 8011118:	20004218 	.word	0x20004218
 801111c:	2000422c 	.word	0x2000422c
 8011120:	20004232 	.word	0x20004232
 8011124:	20004228 	.word	0x20004228
 8011128:	20007618 	.word	0x20007618
 801112c:	2000761c 	.word	0x2000761c

08011130 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8011138:	4b14      	ldr	r3, [pc, #80]	; (801118c <tcp_input_delayed_close+0x5c>)
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	f003 0310 	and.w	r3, r3, #16
 8011140:	2b00      	cmp	r3, #0
 8011142:	d01d      	beq.n	8011180 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	7e9b      	ldrb	r3, [r3, #26]
 8011148:	f003 0310 	and.w	r3, r3, #16
 801114c:	2b00      	cmp	r3, #0
 801114e:	d10d      	bne.n	801116c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011156:	2b00      	cmp	r3, #0
 8011158:	d008      	beq.n	801116c <tcp_input_delayed_close+0x3c>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	6912      	ldr	r2, [r2, #16]
 8011164:	f06f 010e 	mvn.w	r1, #14
 8011168:	4610      	mov	r0, r2
 801116a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801116c:	6879      	ldr	r1, [r7, #4]
 801116e:	4808      	ldr	r0, [pc, #32]	; (8011190 <tcp_input_delayed_close+0x60>)
 8011170:	f7ff fb00 	bl	8010774 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011174:	6879      	ldr	r1, [r7, #4]
 8011176:	2001      	movs	r0, #1
 8011178:	f7fd fa60 	bl	800e63c <memp_free>
    return 1;
 801117c:	2301      	movs	r3, #1
 801117e:	e000      	b.n	8011182 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8011180:	2300      	movs	r3, #0
}
 8011182:	4618      	mov	r0, r3
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	20004235 	.word	0x20004235
 8011190:	2000ab30 	.word	0x2000ab30

08011194 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af02      	add	r7, sp, #8
 801119a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801119c:	4b64      	ldr	r3, [pc, #400]	; (8011330 <tcp_listen_input+0x19c>)
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	f003 0304 	and.w	r3, r3, #4
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f040 80bc 	bne.w	8011322 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80111aa:	4b61      	ldr	r3, [pc, #388]	; (8011330 <tcp_listen_input+0x19c>)
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	f003 0310 	and.w	r3, r3, #16
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d016      	beq.n	80111e4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80111b6:	4b5f      	ldr	r3, [pc, #380]	; (8011334 <tcp_listen_input+0x1a0>)
 80111b8:	6818      	ldr	r0, [r3, #0]
 80111ba:	4b5f      	ldr	r3, [pc, #380]	; (8011338 <tcp_listen_input+0x1a4>)
 80111bc:	881b      	ldrh	r3, [r3, #0]
 80111be:	461a      	mov	r2, r3
 80111c0:	4b5e      	ldr	r3, [pc, #376]	; (801133c <tcp_listen_input+0x1a8>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111c6:	4b5e      	ldr	r3, [pc, #376]	; (8011340 <tcp_listen_input+0x1ac>)
 80111c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80111ca:	885b      	ldrh	r3, [r3, #2]
 80111cc:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111ce:	4a5c      	ldr	r2, [pc, #368]	; (8011340 <tcp_listen_input+0x1ac>)
 80111d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80111d2:	8812      	ldrh	r2, [r2, #0]
 80111d4:	b292      	uxth	r2, r2
 80111d6:	9201      	str	r2, [sp, #4]
 80111d8:	9300      	str	r3, [sp, #0]
 80111da:	4b5a      	ldr	r3, [pc, #360]	; (8011344 <tcp_listen_input+0x1b0>)
 80111dc:	4a5a      	ldr	r2, [pc, #360]	; (8011348 <tcp_listen_input+0x1b4>)
 80111de:	f002 fb21 	bl	8013824 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80111e2:	e0a0      	b.n	8011326 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 80111e4:	4b52      	ldr	r3, [pc, #328]	; (8011330 <tcp_listen_input+0x19c>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	f003 0302 	and.w	r3, r3, #2
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 809a 	beq.w	8011326 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	7d5b      	ldrb	r3, [r3, #21]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7ff f9f8 	bl	80105ec <tcp_alloc>
 80111fc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d111      	bne.n	8011228 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	699b      	ldr	r3, [r3, #24]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d00a      	beq.n	8011222 <tcp_listen_input+0x8e>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	699b      	ldr	r3, [r3, #24]
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	6910      	ldr	r0, [r2, #16]
 8011214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011218:	2100      	movs	r1, #0
 801121a:	4798      	blx	r3
 801121c:	4603      	mov	r3, r0
 801121e:	73bb      	strb	r3, [r7, #14]
      return;
 8011220:	e082      	b.n	8011328 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011222:	23f0      	movs	r3, #240	; 0xf0
 8011224:	73bb      	strb	r3, [r7, #14]
      return;
 8011226:	e07f      	b.n	8011328 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011228:	4b48      	ldr	r3, [pc, #288]	; (801134c <tcp_listen_input+0x1b8>)
 801122a:	695a      	ldr	r2, [r3, #20]
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011230:	4b46      	ldr	r3, [pc, #280]	; (801134c <tcp_listen_input+0x1b8>)
 8011232:	691a      	ldr	r2, [r3, #16]
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	8ada      	ldrh	r2, [r3, #22]
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011240:	4b3f      	ldr	r3, [pc, #252]	; (8011340 <tcp_listen_input+0x1ac>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	881b      	ldrh	r3, [r3, #0]
 8011246:	b29a      	uxth	r2, r3
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	2203      	movs	r2, #3
 8011250:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011252:	4b3a      	ldr	r3, [pc, #232]	; (801133c <tcp_listen_input+0x1a8>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	1c5a      	adds	r2, r3, #1
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011264:	6978      	ldr	r0, [r7, #20]
 8011266:	f7ff fb01 	bl	801086c <tcp_next_iss>
 801126a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	693a      	ldr	r2, [r7, #16]
 8011270:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	693a      	ldr	r2, [r7, #16]
 8011276:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	693a      	ldr	r2, [r7, #16]
 801127c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	693a      	ldr	r2, [r7, #16]
 8011282:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011284:	4b2d      	ldr	r3, [pc, #180]	; (801133c <tcp_listen_input+0x1a8>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	1e5a      	subs	r2, r3, #1
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	691a      	ldr	r2, [r3, #16]
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	7a1b      	ldrb	r3, [r3, #8]
 80112a0:	f003 030c 	and.w	r3, r3, #12
 80112a4:	b2da      	uxtb	r2, r3
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80112aa:	4b29      	ldr	r3, [pc, #164]	; (8011350 <tcp_listen_input+0x1bc>)
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	60da      	str	r2, [r3, #12]
 80112b2:	4a27      	ldr	r2, [pc, #156]	; (8011350 <tcp_listen_input+0x1bc>)
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	6013      	str	r3, [r2, #0]
 80112b8:	f002 fd04 	bl	8013cc4 <tcp_timer_needed>
 80112bc:	4b25      	ldr	r3, [pc, #148]	; (8011354 <tcp_listen_input+0x1c0>)
 80112be:	2201      	movs	r2, #1
 80112c0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80112c2:	6978      	ldr	r0, [r7, #20]
 80112c4:	f001 fd14 	bl	8012cf0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80112c8:	4b1d      	ldr	r3, [pc, #116]	; (8011340 <tcp_listen_input+0x1ac>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	89db      	ldrh	r3, [r3, #14]
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	3304      	adds	r3, #4
 80112ea:	4619      	mov	r1, r3
 80112ec:	4610      	mov	r0, r2
 80112ee:	f7ff fad5 	bl	801089c <tcp_eff_send_mss_impl>
 80112f2:	4603      	mov	r3, r0
 80112f4:	461a      	mov	r2, r3
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80112fa:	2112      	movs	r1, #18
 80112fc:	6978      	ldr	r0, [r7, #20]
 80112fe:	f001 feaf 	bl	8013060 <tcp_enqueue_flags>
 8011302:	4603      	mov	r3, r0
 8011304:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d004      	beq.n	8011318 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801130e:	2100      	movs	r1, #0
 8011310:	6978      	ldr	r0, [r7, #20]
 8011312:	f7fe fb51 	bl	800f9b8 <tcp_abandon>
      return;
 8011316:	e007      	b.n	8011328 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8011318:	6978      	ldr	r0, [r7, #20]
 801131a:	f001 fff9 	bl	8013310 <tcp_output>
  return;
 801131e:	bf00      	nop
 8011320:	e001      	b.n	8011326 <tcp_listen_input+0x192>
    return;
 8011322:	bf00      	nop
 8011324:	e000      	b.n	8011328 <tcp_listen_input+0x194>
  return;
 8011326:	bf00      	nop
}
 8011328:	3718      	adds	r7, #24
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	20004234 	.word	0x20004234
 8011334:	2000422c 	.word	0x2000422c
 8011338:	20004232 	.word	0x20004232
 801133c:	20004228 	.word	0x20004228
 8011340:	20004218 	.word	0x20004218
 8011344:	20007618 	.word	0x20007618
 8011348:	2000761c 	.word	0x2000761c
 801134c:	20007608 	.word	0x20007608
 8011350:	2000ab30 	.word	0x2000ab30
 8011354:	2000ab2c 	.word	0x2000ab2c

08011358 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b084      	sub	sp, #16
 801135c:	af02      	add	r7, sp, #8
 801135e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011360:	4b29      	ldr	r3, [pc, #164]	; (8011408 <tcp_timewait_input+0xb0>)
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	f003 0304 	and.w	r3, r3, #4
 8011368:	2b00      	cmp	r3, #0
 801136a:	d147      	bne.n	80113fc <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801136c:	4b26      	ldr	r3, [pc, #152]	; (8011408 <tcp_timewait_input+0xb0>)
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	f003 0302 	and.w	r3, r3, #2
 8011374:	2b00      	cmp	r3, #0
 8011376:	d027      	beq.n	80113c8 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011378:	4b24      	ldr	r3, [pc, #144]	; (801140c <tcp_timewait_input+0xb4>)
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011380:	1ad3      	subs	r3, r2, r3
 8011382:	2b00      	cmp	r3, #0
 8011384:	db2a      	blt.n	80113dc <tcp_timewait_input+0x84>
 8011386:	4b21      	ldr	r3, [pc, #132]	; (801140c <tcp_timewait_input+0xb4>)
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801138e:	6879      	ldr	r1, [r7, #4]
 8011390:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011392:	440b      	add	r3, r1
 8011394:	1ad3      	subs	r3, r2, r3
 8011396:	2b00      	cmp	r3, #0
 8011398:	dc20      	bgt.n	80113dc <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801139a:	4b1d      	ldr	r3, [pc, #116]	; (8011410 <tcp_timewait_input+0xb8>)
 801139c:	6818      	ldr	r0, [r3, #0]
 801139e:	4b1d      	ldr	r3, [pc, #116]	; (8011414 <tcp_timewait_input+0xbc>)
 80113a0:	881b      	ldrh	r3, [r3, #0]
 80113a2:	461a      	mov	r2, r3
 80113a4:	4b19      	ldr	r3, [pc, #100]	; (801140c <tcp_timewait_input+0xb4>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113aa:	4b1b      	ldr	r3, [pc, #108]	; (8011418 <tcp_timewait_input+0xc0>)
 80113ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80113ae:	885b      	ldrh	r3, [r3, #2]
 80113b0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113b2:	4a19      	ldr	r2, [pc, #100]	; (8011418 <tcp_timewait_input+0xc0>)
 80113b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80113b6:	8812      	ldrh	r2, [r2, #0]
 80113b8:	b292      	uxth	r2, r2
 80113ba:	9201      	str	r2, [sp, #4]
 80113bc:	9300      	str	r3, [sp, #0]
 80113be:	4b17      	ldr	r3, [pc, #92]	; (801141c <tcp_timewait_input+0xc4>)
 80113c0:	4a17      	ldr	r2, [pc, #92]	; (8011420 <tcp_timewait_input+0xc8>)
 80113c2:	f002 fa2f 	bl	8013824 <tcp_rst>
      return;
 80113c6:	e01c      	b.n	8011402 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 80113c8:	4b0f      	ldr	r3, [pc, #60]	; (8011408 <tcp_timewait_input+0xb0>)
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	f003 0301 	and.w	r3, r3, #1
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d003      	beq.n	80113dc <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80113d4:	4b13      	ldr	r3, [pc, #76]	; (8011424 <tcp_timewait_input+0xcc>)
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80113dc:	4b0d      	ldr	r3, [pc, #52]	; (8011414 <tcp_timewait_input+0xbc>)
 80113de:	881b      	ldrh	r3, [r3, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d00d      	beq.n	8011400 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	7e9b      	ldrb	r3, [r3, #26]
 80113e8:	f043 0302 	orr.w	r3, r3, #2
 80113ec:	b2da      	uxtb	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f001 ff8c 	bl	8013310 <tcp_output>
  }
  return;
 80113f8:	bf00      	nop
 80113fa:	e001      	b.n	8011400 <tcp_timewait_input+0xa8>
    return;
 80113fc:	bf00      	nop
 80113fe:	e000      	b.n	8011402 <tcp_timewait_input+0xaa>
  return;
 8011400:	bf00      	nop
}
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	20004234 	.word	0x20004234
 801140c:	20004228 	.word	0x20004228
 8011410:	2000422c 	.word	0x2000422c
 8011414:	20004232 	.word	0x20004232
 8011418:	20004218 	.word	0x20004218
 801141c:	20007618 	.word	0x20007618
 8011420:	2000761c 	.word	0x2000761c
 8011424:	2000ab34 	.word	0x2000ab34

08011428 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b08a      	sub	sp, #40	; 0x28
 801142c:	af02      	add	r7, sp, #8
 801142e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011430:	2300      	movs	r3, #0
 8011432:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011434:	2300      	movs	r3, #0
 8011436:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011438:	4ba4      	ldr	r3, [pc, #656]	; (80116cc <tcp_process+0x2a4>)
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	f003 0304 	and.w	r3, r3, #4
 8011440:	2b00      	cmp	r3, #0
 8011442:	d04e      	beq.n	80114e2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	7d1b      	ldrb	r3, [r3, #20]
 8011448:	2b02      	cmp	r3, #2
 801144a:	d108      	bne.n	801145e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011450:	4b9f      	ldr	r3, [pc, #636]	; (80116d0 <tcp_process+0x2a8>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	429a      	cmp	r2, r3
 8011456:	d123      	bne.n	80114a0 <tcp_process+0x78>
        acceptable = 1;
 8011458:	2301      	movs	r3, #1
 801145a:	76fb      	strb	r3, [r7, #27]
 801145c:	e020      	b.n	80114a0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011462:	4b9c      	ldr	r3, [pc, #624]	; (80116d4 <tcp_process+0x2ac>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	429a      	cmp	r2, r3
 8011468:	d102      	bne.n	8011470 <tcp_process+0x48>
        acceptable = 1;
 801146a:	2301      	movs	r3, #1
 801146c:	76fb      	strb	r3, [r7, #27]
 801146e:	e017      	b.n	80114a0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011470:	4b98      	ldr	r3, [pc, #608]	; (80116d4 <tcp_process+0x2ac>)
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	2b00      	cmp	r3, #0
 801147c:	db10      	blt.n	80114a0 <tcp_process+0x78>
 801147e:	4b95      	ldr	r3, [pc, #596]	; (80116d4 <tcp_process+0x2ac>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011486:	6879      	ldr	r1, [r7, #4]
 8011488:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801148a:	440b      	add	r3, r1
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	2b00      	cmp	r3, #0
 8011490:	dc06      	bgt.n	80114a0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	7e9b      	ldrb	r3, [r3, #26]
 8011496:	f043 0302 	orr.w	r3, r3, #2
 801149a:	b2da      	uxtb	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80114a0:	7efb      	ldrb	r3, [r7, #27]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d01b      	beq.n	80114de <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	7d1b      	ldrb	r3, [r3, #20]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d106      	bne.n	80114bc <tcp_process+0x94>
 80114ae:	4b8a      	ldr	r3, [pc, #552]	; (80116d8 <tcp_process+0x2b0>)
 80114b0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80114b4:	4989      	ldr	r1, [pc, #548]	; (80116dc <tcp_process+0x2b4>)
 80114b6:	488a      	ldr	r0, [pc, #552]	; (80116e0 <tcp_process+0x2b8>)
 80114b8:	f008 f914 	bl	80196e4 <iprintf>
      recv_flags |= TF_RESET;
 80114bc:	4b89      	ldr	r3, [pc, #548]	; (80116e4 <tcp_process+0x2bc>)
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	f043 0308 	orr.w	r3, r3, #8
 80114c4:	b2da      	uxtb	r2, r3
 80114c6:	4b87      	ldr	r3, [pc, #540]	; (80116e4 <tcp_process+0x2bc>)
 80114c8:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	7e9b      	ldrb	r3, [r3, #26]
 80114ce:	f023 0301 	bic.w	r3, r3, #1
 80114d2:	b2da      	uxtb	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80114d8:	f06f 030d 	mvn.w	r3, #13
 80114dc:	e34d      	b.n	8011b7a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80114de:	2300      	movs	r3, #0
 80114e0:	e34b      	b.n	8011b7a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80114e2:	4b7a      	ldr	r3, [pc, #488]	; (80116cc <tcp_process+0x2a4>)
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	f003 0302 	and.w	r3, r3, #2
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d010      	beq.n	8011510 <tcp_process+0xe8>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	7d1b      	ldrb	r3, [r3, #20]
 80114f2:	2b02      	cmp	r3, #2
 80114f4:	d00c      	beq.n	8011510 <tcp_process+0xe8>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	7d1b      	ldrb	r3, [r3, #20]
 80114fa:	2b03      	cmp	r3, #3
 80114fc:	d008      	beq.n	8011510 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	7e9b      	ldrb	r3, [r3, #26]
 8011502:	f043 0302 	orr.w	r3, r3, #2
 8011506:	b2da      	uxtb	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 801150c:	2300      	movs	r3, #0
 801150e:	e334      	b.n	8011b7a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	7e9b      	ldrb	r3, [r3, #26]
 8011514:	f003 0310 	and.w	r3, r3, #16
 8011518:	2b00      	cmp	r3, #0
 801151a:	d103      	bne.n	8011524 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801151c:	4b72      	ldr	r3, [pc, #456]	; (80116e8 <tcp_process+0x2c0>)
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2200      	movs	r2, #0
 8011528:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f001 fbdf 	bl	8012cf0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	7d1b      	ldrb	r3, [r3, #20]
 8011536:	3b02      	subs	r3, #2
 8011538:	2b07      	cmp	r3, #7
 801153a:	f200 830e 	bhi.w	8011b5a <tcp_process+0x732>
 801153e:	a201      	add	r2, pc, #4	; (adr r2, 8011544 <tcp_process+0x11c>)
 8011540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011544:	08011565 	.word	0x08011565
 8011548:	0801175d 	.word	0x0801175d
 801154c:	080118b5 	.word	0x080118b5
 8011550:	080118df 	.word	0x080118df
 8011554:	08011a09 	.word	0x08011a09
 8011558:	080118b5 	.word	0x080118b5
 801155c:	08011a95 	.word	0x08011a95
 8011560:	08011b25 	.word	0x08011b25
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011564:	4b59      	ldr	r3, [pc, #356]	; (80116cc <tcp_process+0x2a4>)
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	f003 0310 	and.w	r3, r3, #16
 801156c:	2b00      	cmp	r3, #0
 801156e:	f000 80cb 	beq.w	8011708 <tcp_process+0x2e0>
 8011572:	4b56      	ldr	r3, [pc, #344]	; (80116cc <tcp_process+0x2a4>)
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	f003 0302 	and.w	r3, r3, #2
 801157a:	2b00      	cmp	r3, #0
 801157c:	f000 80c4 	beq.w	8011708 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011584:	1c5a      	adds	r2, r3, #1
 8011586:	4b52      	ldr	r3, [pc, #328]	; (80116d0 <tcp_process+0x2a8>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	f040 80bc 	bne.w	8011708 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8011590:	4b50      	ldr	r3, [pc, #320]	; (80116d4 <tcp_process+0x2ac>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	1c5a      	adds	r2, r3, #1
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80115a2:	4b4b      	ldr	r3, [pc, #300]	; (80116d0 <tcp_process+0x2a8>)
 80115a4:	681a      	ldr	r2, [r3, #0]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80115aa:	4b50      	ldr	r3, [pc, #320]	; (80116ec <tcp_process+0x2c4>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	89db      	ldrh	r3, [r3, #14]
 80115b0:	b29a      	uxth	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80115c4:	4b43      	ldr	r3, [pc, #268]	; (80116d4 <tcp_process+0x2ac>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	1e5a      	subs	r2, r3, #1
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2204      	movs	r2, #4
 80115d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	3304      	adds	r3, #4
 80115dc:	4619      	mov	r1, r3
 80115de:	4610      	mov	r0, r2
 80115e0:	f7ff f95c 	bl	801089c <tcp_eff_send_mss_impl>
 80115e4:	4603      	mov	r3, r0
 80115e6:	461a      	mov	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80115f6:	429a      	cmp	r2, r3
 80115f8:	bf38      	it	cc
 80115fa:	461a      	movcc	r2, r3
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011600:	009b      	lsls	r3, r3, #2
 8011602:	4293      	cmp	r3, r2
 8011604:	bf28      	it	cs
 8011606:	4613      	movcs	r3, r2
 8011608:	b29a      	uxth	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011616:	2b00      	cmp	r3, #0
 8011618:	d106      	bne.n	8011628 <tcp_process+0x200>
 801161a:	4b2f      	ldr	r3, [pc, #188]	; (80116d8 <tcp_process+0x2b0>)
 801161c:	f240 321a 	movw	r2, #794	; 0x31a
 8011620:	4933      	ldr	r1, [pc, #204]	; (80116f0 <tcp_process+0x2c8>)
 8011622:	482f      	ldr	r0, [pc, #188]	; (80116e0 <tcp_process+0x2b8>)
 8011624:	f008 f85e 	bl	80196e4 <iprintf>
      --pcb->snd_queuelen;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801162e:	3b01      	subs	r3, #1
 8011630:	b29a      	uxth	r2, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801163c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d111      	bne.n	8011668 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011648:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d106      	bne.n	801165e <tcp_process+0x236>
 8011650:	4b21      	ldr	r3, [pc, #132]	; (80116d8 <tcp_process+0x2b0>)
 8011652:	f240 3222 	movw	r2, #802	; 0x322
 8011656:	4927      	ldr	r1, [pc, #156]	; (80116f4 <tcp_process+0x2cc>)
 8011658:	4821      	ldr	r0, [pc, #132]	; (80116e0 <tcp_process+0x2b8>)
 801165a:	f008 f843 	bl	80196e4 <iprintf>
        pcb->unsent = rseg->next;
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	681a      	ldr	r2, [r3, #0]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	669a      	str	r2, [r3, #104]	; 0x68
 8011666:	e003      	b.n	8011670 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8011670:	69f8      	ldr	r0, [r7, #28]
 8011672:	f7fe fea8 	bl	80103c6 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801167a:	2b00      	cmp	r3, #0
 801167c:	d104      	bne.n	8011688 <tcp_process+0x260>
        pcb->rtime = -1;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011684:	861a      	strh	r2, [r3, #48]	; 0x30
 8011686:	e006      	b.n	8011696 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801169c:	2b00      	cmp	r3, #0
 801169e:	d00a      	beq.n	80116b6 <tcp_process+0x28e>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	6910      	ldr	r0, [r2, #16]
 80116aa:	2200      	movs	r2, #0
 80116ac:	6879      	ldr	r1, [r7, #4]
 80116ae:	4798      	blx	r3
 80116b0:	4603      	mov	r3, r0
 80116b2:	76bb      	strb	r3, [r7, #26]
 80116b4:	e001      	b.n	80116ba <tcp_process+0x292>
 80116b6:	2300      	movs	r3, #0
 80116b8:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80116ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116be:	f113 0f0d 	cmn.w	r3, #13
 80116c2:	d119      	bne.n	80116f8 <tcp_process+0x2d0>
        return ERR_ABRT;
 80116c4:	f06f 030c 	mvn.w	r3, #12
 80116c8:	e257      	b.n	8011b7a <tcp_process+0x752>
 80116ca:	bf00      	nop
 80116cc:	20004234 	.word	0x20004234
 80116d0:	2000422c 	.word	0x2000422c
 80116d4:	20004228 	.word	0x20004228
 80116d8:	0801b6e8 	.word	0x0801b6e8
 80116dc:	0801b8a0 	.word	0x0801b8a0
 80116e0:	0801b72c 	.word	0x0801b72c
 80116e4:	20004235 	.word	0x20004235
 80116e8:	2000ab34 	.word	0x2000ab34
 80116ec:	20004218 	.word	0x20004218
 80116f0:	0801b8c0 	.word	0x0801b8c0
 80116f4:	0801b8d8 	.word	0x0801b8d8
      }
      tcp_ack_now(pcb);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	7e9b      	ldrb	r3, [r3, #26]
 80116fc:	f043 0302 	orr.w	r3, r3, #2
 8011700:	b2da      	uxtb	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8011706:	e22a      	b.n	8011b5e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8011708:	4b9f      	ldr	r3, [pc, #636]	; (8011988 <tcp_process+0x560>)
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	f003 0310 	and.w	r3, r3, #16
 8011710:	2b00      	cmp	r3, #0
 8011712:	f000 8224 	beq.w	8011b5e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011716:	4b9d      	ldr	r3, [pc, #628]	; (801198c <tcp_process+0x564>)
 8011718:	6818      	ldr	r0, [r3, #0]
 801171a:	4b9d      	ldr	r3, [pc, #628]	; (8011990 <tcp_process+0x568>)
 801171c:	881b      	ldrh	r3, [r3, #0]
 801171e:	461a      	mov	r2, r3
 8011720:	4b9c      	ldr	r3, [pc, #624]	; (8011994 <tcp_process+0x56c>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011726:	4b9c      	ldr	r3, [pc, #624]	; (8011998 <tcp_process+0x570>)
 8011728:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801172a:	885b      	ldrh	r3, [r3, #2]
 801172c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801172e:	4a9a      	ldr	r2, [pc, #616]	; (8011998 <tcp_process+0x570>)
 8011730:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011732:	8812      	ldrh	r2, [r2, #0]
 8011734:	b292      	uxth	r2, r2
 8011736:	9201      	str	r2, [sp, #4]
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	4b98      	ldr	r3, [pc, #608]	; (801199c <tcp_process+0x574>)
 801173c:	4a98      	ldr	r2, [pc, #608]	; (80119a0 <tcp_process+0x578>)
 801173e:	f002 f871 	bl	8013824 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011748:	2b05      	cmp	r3, #5
 801174a:	f200 8208 	bhi.w	8011b5e <tcp_process+0x736>
        pcb->rtime = 0;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2200      	movs	r2, #0
 8011752:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f002 f8db 	bl	8013910 <tcp_rexmit_rto>
    break;
 801175a:	e200      	b.n	8011b5e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 801175c:	4b8a      	ldr	r3, [pc, #552]	; (8011988 <tcp_process+0x560>)
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	f003 0310 	and.w	r3, r3, #16
 8011764:	2b00      	cmp	r3, #0
 8011766:	f000 8091 	beq.w	801188c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801176a:	4b88      	ldr	r3, [pc, #544]	; (801198c <tcp_process+0x564>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	3b01      	subs	r3, #1
 8011776:	2b00      	cmp	r3, #0
 8011778:	db71      	blt.n	801185e <tcp_process+0x436>
 801177a:	4b84      	ldr	r3, [pc, #528]	; (801198c <tcp_process+0x564>)
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011782:	1ad3      	subs	r3, r2, r3
 8011784:	2b00      	cmp	r3, #0
 8011786:	dc6a      	bgt.n	801185e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2204      	movs	r2, #4
 801178c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00b      	beq.n	80117ae <tcp_process+0x386>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801179a:	699b      	ldr	r3, [r3, #24]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d106      	bne.n	80117ae <tcp_process+0x386>
 80117a0:	4b80      	ldr	r3, [pc, #512]	; (80119a4 <tcp_process+0x57c>)
 80117a2:	f240 3251 	movw	r2, #849	; 0x351
 80117a6:	4980      	ldr	r1, [pc, #512]	; (80119a8 <tcp_process+0x580>)
 80117a8:	4880      	ldr	r0, [pc, #512]	; (80119ac <tcp_process+0x584>)
 80117aa:	f007 ff9b 	bl	80196e4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d102      	bne.n	80117bc <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80117b6:	23fa      	movs	r3, #250	; 0xfa
 80117b8:	76bb      	strb	r3, [r7, #26]
 80117ba:	e011      	b.n	80117e0 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117c0:	699b      	ldr	r3, [r3, #24]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d00a      	beq.n	80117dc <tcp_process+0x3b4>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117ca:	699b      	ldr	r3, [r3, #24]
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	6910      	ldr	r0, [r2, #16]
 80117d0:	2200      	movs	r2, #0
 80117d2:	6879      	ldr	r1, [r7, #4]
 80117d4:	4798      	blx	r3
 80117d6:	4603      	mov	r3, r0
 80117d8:	76bb      	strb	r3, [r7, #26]
 80117da:	e001      	b.n	80117e0 <tcp_process+0x3b8>
 80117dc:	23f0      	movs	r3, #240	; 0xf0
 80117de:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80117e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00a      	beq.n	80117fe <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80117e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117ec:	f113 0f0d 	cmn.w	r3, #13
 80117f0:	d002      	beq.n	80117f8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7fe f992 	bl	800fb1c <tcp_abort>
          }
          return ERR_ABRT;
 80117f8:	f06f 030c 	mvn.w	r3, #12
 80117fc:	e1bd      	b.n	8011b7a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f000 fa42 	bl	8011c88 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8011804:	4b6a      	ldr	r3, [pc, #424]	; (80119b0 <tcp_process+0x588>)
 8011806:	881b      	ldrh	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d005      	beq.n	8011818 <tcp_process+0x3f0>
          recv_acked--;
 801180c:	4b68      	ldr	r3, [pc, #416]	; (80119b0 <tcp_process+0x588>)
 801180e:	881b      	ldrh	r3, [r3, #0]
 8011810:	3b01      	subs	r3, #1
 8011812:	b29a      	uxth	r2, r3
 8011814:	4b66      	ldr	r3, [pc, #408]	; (80119b0 <tcp_process+0x588>)
 8011816:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801181c:	005b      	lsls	r3, r3, #1
 801181e:	f241 121c 	movw	r2, #4380	; 0x111c
 8011822:	429a      	cmp	r2, r3
 8011824:	bf38      	it	cc
 8011826:	461a      	movcc	r2, r3
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801182c:	009b      	lsls	r3, r3, #2
 801182e:	4293      	cmp	r3, r2
 8011830:	bf28      	it	cs
 8011832:	4613      	movcs	r3, r2
 8011834:	b29a      	uxth	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801183c:	4b5d      	ldr	r3, [pc, #372]	; (80119b4 <tcp_process+0x58c>)
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	f003 0320 	and.w	r3, r3, #32
 8011844:	2b00      	cmp	r3, #0
 8011846:	d034      	beq.n	80118b2 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	7e9b      	ldrb	r3, [r3, #26]
 801184c:	f043 0302 	orr.w	r3, r3, #2
 8011850:	b2da      	uxtb	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2207      	movs	r2, #7
 801185a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801185c:	e029      	b.n	80118b2 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801185e:	4b4b      	ldr	r3, [pc, #300]	; (801198c <tcp_process+0x564>)
 8011860:	6818      	ldr	r0, [r3, #0]
 8011862:	4b4b      	ldr	r3, [pc, #300]	; (8011990 <tcp_process+0x568>)
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	461a      	mov	r2, r3
 8011868:	4b4a      	ldr	r3, [pc, #296]	; (8011994 <tcp_process+0x56c>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801186e:	4b4a      	ldr	r3, [pc, #296]	; (8011998 <tcp_process+0x570>)
 8011870:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011872:	885b      	ldrh	r3, [r3, #2]
 8011874:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011876:	4a48      	ldr	r2, [pc, #288]	; (8011998 <tcp_process+0x570>)
 8011878:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801187a:	8812      	ldrh	r2, [r2, #0]
 801187c:	b292      	uxth	r2, r2
 801187e:	9201      	str	r2, [sp, #4]
 8011880:	9300      	str	r3, [sp, #0]
 8011882:	4b46      	ldr	r3, [pc, #280]	; (801199c <tcp_process+0x574>)
 8011884:	4a46      	ldr	r2, [pc, #280]	; (80119a0 <tcp_process+0x578>)
 8011886:	f001 ffcd 	bl	8013824 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801188a:	e16a      	b.n	8011b62 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801188c:	4b3e      	ldr	r3, [pc, #248]	; (8011988 <tcp_process+0x560>)
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	f003 0302 	and.w	r3, r3, #2
 8011894:	2b00      	cmp	r3, #0
 8011896:	f000 8164 	beq.w	8011b62 <tcp_process+0x73a>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189e:	1e5a      	subs	r2, r3, #1
 80118a0:	4b3c      	ldr	r3, [pc, #240]	; (8011994 <tcp_process+0x56c>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	f040 815c 	bne.w	8011b62 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f002 f866 	bl	801397c <tcp_rexmit>
    break;
 80118b0:	e157      	b.n	8011b62 <tcp_process+0x73a>
 80118b2:	e156      	b.n	8011b62 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 f9e7 	bl	8011c88 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80118ba:	4b3e      	ldr	r3, [pc, #248]	; (80119b4 <tcp_process+0x58c>)
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	f003 0320 	and.w	r3, r3, #32
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	f000 814f 	beq.w	8011b66 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	7e9b      	ldrb	r3, [r3, #26]
 80118cc:	f043 0302 	orr.w	r3, r3, #2
 80118d0:	b2da      	uxtb	r2, r3
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2207      	movs	r2, #7
 80118da:	751a      	strb	r2, [r3, #20]
    }
    break;
 80118dc:	e143      	b.n	8011b66 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 f9d2 	bl	8011c88 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80118e4:	4b33      	ldr	r3, [pc, #204]	; (80119b4 <tcp_process+0x58c>)
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	f003 0320 	and.w	r3, r3, #32
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d074      	beq.n	80119da <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80118f0:	4b25      	ldr	r3, [pc, #148]	; (8011988 <tcp_process+0x560>)
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	f003 0310 	and.w	r3, r3, #16
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d063      	beq.n	80119c4 <tcp_process+0x59c>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011900:	4b22      	ldr	r3, [pc, #136]	; (801198c <tcp_process+0x564>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	429a      	cmp	r2, r3
 8011906:	d15d      	bne.n	80119c4 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801190c:	2b00      	cmp	r3, #0
 801190e:	d159      	bne.n	80119c4 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	7e9b      	ldrb	r3, [r3, #26]
 8011914:	f043 0302 	orr.w	r3, r3, #2
 8011918:	b2da      	uxtb	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f7fe fee6 	bl	80106f0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011924:	4b24      	ldr	r3, [pc, #144]	; (80119b8 <tcp_process+0x590>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	687a      	ldr	r2, [r7, #4]
 801192a:	429a      	cmp	r2, r3
 801192c:	d105      	bne.n	801193a <tcp_process+0x512>
 801192e:	4b22      	ldr	r3, [pc, #136]	; (80119b8 <tcp_process+0x590>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	4a20      	ldr	r2, [pc, #128]	; (80119b8 <tcp_process+0x590>)
 8011936:	6013      	str	r3, [r2, #0]
 8011938:	e013      	b.n	8011962 <tcp_process+0x53a>
 801193a:	4b1f      	ldr	r3, [pc, #124]	; (80119b8 <tcp_process+0x590>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	617b      	str	r3, [r7, #20]
 8011940:	e00c      	b.n	801195c <tcp_process+0x534>
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	68db      	ldr	r3, [r3, #12]
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	429a      	cmp	r2, r3
 801194a:	d104      	bne.n	8011956 <tcp_process+0x52e>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	68da      	ldr	r2, [r3, #12]
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	60da      	str	r2, [r3, #12]
 8011954:	e005      	b.n	8011962 <tcp_process+0x53a>
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	68db      	ldr	r3, [r3, #12]
 801195a:	617b      	str	r3, [r7, #20]
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1ef      	bne.n	8011942 <tcp_process+0x51a>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	60da      	str	r2, [r3, #12]
 8011968:	4b14      	ldr	r3, [pc, #80]	; (80119bc <tcp_process+0x594>)
 801196a:	2201      	movs	r2, #1
 801196c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	220a      	movs	r2, #10
 8011972:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011974:	4b12      	ldr	r3, [pc, #72]	; (80119c0 <tcp_process+0x598>)
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	60da      	str	r2, [r3, #12]
 801197c:	4a10      	ldr	r2, [pc, #64]	; (80119c0 <tcp_process+0x598>)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6013      	str	r3, [r2, #0]
 8011982:	f002 f99f 	bl	8013cc4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8011986:	e0f0      	b.n	8011b6a <tcp_process+0x742>
 8011988:	20004234 	.word	0x20004234
 801198c:	2000422c 	.word	0x2000422c
 8011990:	20004232 	.word	0x20004232
 8011994:	20004228 	.word	0x20004228
 8011998:	20004218 	.word	0x20004218
 801199c:	20007618 	.word	0x20007618
 80119a0:	2000761c 	.word	0x2000761c
 80119a4:	0801b6e8 	.word	0x0801b6e8
 80119a8:	0801b8ec 	.word	0x0801b8ec
 80119ac:	0801b72c 	.word	0x0801b72c
 80119b0:	20004230 	.word	0x20004230
 80119b4:	20004235 	.word	0x20004235
 80119b8:	2000ab30 	.word	0x2000ab30
 80119bc:	2000ab2c 	.word	0x2000ab2c
 80119c0:	2000ab40 	.word	0x2000ab40
        tcp_ack_now(pcb);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	7e9b      	ldrb	r3, [r3, #26]
 80119c8:	f043 0302 	orr.w	r3, r3, #2
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2208      	movs	r2, #8
 80119d6:	751a      	strb	r2, [r3, #20]
    break;
 80119d8:	e0c7      	b.n	8011b6a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119da:	4b6a      	ldr	r3, [pc, #424]	; (8011b84 <tcp_process+0x75c>)
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	f003 0310 	and.w	r3, r3, #16
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 80c1 	beq.w	8011b6a <tcp_process+0x742>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119ec:	4b66      	ldr	r3, [pc, #408]	; (8011b88 <tcp_process+0x760>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	f040 80ba 	bne.w	8011b6a <tcp_process+0x742>
               pcb->unsent == NULL) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f040 80b5 	bne.w	8011b6a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2206      	movs	r2, #6
 8011a04:	751a      	strb	r2, [r3, #20]
    break;
 8011a06:	e0b0      	b.n	8011b6a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 f93d 	bl	8011c88 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8011a0e:	4b5f      	ldr	r3, [pc, #380]	; (8011b8c <tcp_process+0x764>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	f003 0320 	and.w	r3, r3, #32
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f000 80a9 	beq.w	8011b6e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	7e9b      	ldrb	r3, [r3, #26]
 8011a20:	f043 0302 	orr.w	r3, r3, #2
 8011a24:	b2da      	uxtb	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f7fe fe60 	bl	80106f0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011a30:	4b57      	ldr	r3, [pc, #348]	; (8011b90 <tcp_process+0x768>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d105      	bne.n	8011a46 <tcp_process+0x61e>
 8011a3a:	4b55      	ldr	r3, [pc, #340]	; (8011b90 <tcp_process+0x768>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	4a53      	ldr	r2, [pc, #332]	; (8011b90 <tcp_process+0x768>)
 8011a42:	6013      	str	r3, [r2, #0]
 8011a44:	e013      	b.n	8011a6e <tcp_process+0x646>
 8011a46:	4b52      	ldr	r3, [pc, #328]	; (8011b90 <tcp_process+0x768>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	613b      	str	r3, [r7, #16]
 8011a4c:	e00c      	b.n	8011a68 <tcp_process+0x640>
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	68db      	ldr	r3, [r3, #12]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d104      	bne.n	8011a62 <tcp_process+0x63a>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	68da      	ldr	r2, [r3, #12]
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	60da      	str	r2, [r3, #12]
 8011a60:	e005      	b.n	8011a6e <tcp_process+0x646>
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	613b      	str	r3, [r7, #16]
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d1ef      	bne.n	8011a4e <tcp_process+0x626>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	60da      	str	r2, [r3, #12]
 8011a74:	4b47      	ldr	r3, [pc, #284]	; (8011b94 <tcp_process+0x76c>)
 8011a76:	2201      	movs	r2, #1
 8011a78:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	220a      	movs	r2, #10
 8011a7e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8011a80:	4b45      	ldr	r3, [pc, #276]	; (8011b98 <tcp_process+0x770>)
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	60da      	str	r2, [r3, #12]
 8011a88:	4a43      	ldr	r2, [pc, #268]	; (8011b98 <tcp_process+0x770>)
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6013      	str	r3, [r2, #0]
 8011a8e:	f002 f919 	bl	8013cc4 <tcp_timer_needed>
    }
    break;
 8011a92:	e06c      	b.n	8011b6e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 f8f7 	bl	8011c88 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a9a:	4b3a      	ldr	r3, [pc, #232]	; (8011b84 <tcp_process+0x75c>)
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	f003 0310 	and.w	r3, r3, #16
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d065      	beq.n	8011b72 <tcp_process+0x74a>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011aaa:	4b37      	ldr	r3, [pc, #220]	; (8011b88 <tcp_process+0x760>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d15f      	bne.n	8011b72 <tcp_process+0x74a>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d15b      	bne.n	8011b72 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f7fe fe18 	bl	80106f0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011ac0:	4b33      	ldr	r3, [pc, #204]	; (8011b90 <tcp_process+0x768>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d105      	bne.n	8011ad6 <tcp_process+0x6ae>
 8011aca:	4b31      	ldr	r3, [pc, #196]	; (8011b90 <tcp_process+0x768>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	68db      	ldr	r3, [r3, #12]
 8011ad0:	4a2f      	ldr	r2, [pc, #188]	; (8011b90 <tcp_process+0x768>)
 8011ad2:	6013      	str	r3, [r2, #0]
 8011ad4:	e013      	b.n	8011afe <tcp_process+0x6d6>
 8011ad6:	4b2e      	ldr	r3, [pc, #184]	; (8011b90 <tcp_process+0x768>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	60fb      	str	r3, [r7, #12]
 8011adc:	e00c      	b.n	8011af8 <tcp_process+0x6d0>
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d104      	bne.n	8011af2 <tcp_process+0x6ca>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	68da      	ldr	r2, [r3, #12]
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	60da      	str	r2, [r3, #12]
 8011af0:	e005      	b.n	8011afe <tcp_process+0x6d6>
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	60fb      	str	r3, [r7, #12]
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d1ef      	bne.n	8011ade <tcp_process+0x6b6>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2200      	movs	r2, #0
 8011b02:	60da      	str	r2, [r3, #12]
 8011b04:	4b23      	ldr	r3, [pc, #140]	; (8011b94 <tcp_process+0x76c>)
 8011b06:	2201      	movs	r2, #1
 8011b08:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	220a      	movs	r2, #10
 8011b0e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8011b10:	4b21      	ldr	r3, [pc, #132]	; (8011b98 <tcp_process+0x770>)
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	60da      	str	r2, [r3, #12]
 8011b18:	4a1f      	ldr	r2, [pc, #124]	; (8011b98 <tcp_process+0x770>)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6013      	str	r3, [r2, #0]
 8011b1e:	f002 f8d1 	bl	8013cc4 <tcp_timer_needed>
    }
    break;
 8011b22:	e026      	b.n	8011b72 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f000 f8af 	bl	8011c88 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b2a:	4b16      	ldr	r3, [pc, #88]	; (8011b84 <tcp_process+0x75c>)
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	f003 0310 	and.w	r3, r3, #16
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d01f      	beq.n	8011b76 <tcp_process+0x74e>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b3a:	4b13      	ldr	r3, [pc, #76]	; (8011b88 <tcp_process+0x760>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d119      	bne.n	8011b76 <tcp_process+0x74e>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d115      	bne.n	8011b76 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8011b4a:	4b10      	ldr	r3, [pc, #64]	; (8011b8c <tcp_process+0x764>)
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	f043 0310 	orr.w	r3, r3, #16
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	4b0d      	ldr	r3, [pc, #52]	; (8011b8c <tcp_process+0x764>)
 8011b56:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011b58:	e00d      	b.n	8011b76 <tcp_process+0x74e>
  default:
    break;
 8011b5a:	bf00      	nop
 8011b5c:	e00c      	b.n	8011b78 <tcp_process+0x750>
    break;
 8011b5e:	bf00      	nop
 8011b60:	e00a      	b.n	8011b78 <tcp_process+0x750>
    break;
 8011b62:	bf00      	nop
 8011b64:	e008      	b.n	8011b78 <tcp_process+0x750>
    break;
 8011b66:	bf00      	nop
 8011b68:	e006      	b.n	8011b78 <tcp_process+0x750>
    break;
 8011b6a:	bf00      	nop
 8011b6c:	e004      	b.n	8011b78 <tcp_process+0x750>
    break;
 8011b6e:	bf00      	nop
 8011b70:	e002      	b.n	8011b78 <tcp_process+0x750>
    break;
 8011b72:	bf00      	nop
 8011b74:	e000      	b.n	8011b78 <tcp_process+0x750>
    break;
 8011b76:	bf00      	nop
  }
  return ERR_OK;
 8011b78:	2300      	movs	r3, #0
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3720      	adds	r7, #32
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	20004234 	.word	0x20004234
 8011b88:	2000422c 	.word	0x2000422c
 8011b8c:	20004235 	.word	0x20004235
 8011b90:	2000ab30 	.word	0x2000ab30
 8011b94:	2000ab2c 	.word	0x2000ab2c
 8011b98:	2000ab40 	.word	0x2000ab40

08011b9c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011b9c:	b590      	push	{r4, r7, lr}
 8011b9e:	b085      	sub	sp, #20
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	899b      	ldrh	r3, [r3, #12]
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fc f904 	bl	800ddbc <lwip_htons>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	f003 0301 	and.w	r3, r3, #1
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d027      	beq.n	8011c0e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011bbe:	6838      	ldr	r0, [r7, #0]
 8011bc0:	f7fe fbed 	bl	801039e <tcp_segs_free>
    next = NULL;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	603b      	str	r3, [r7, #0]
 8011bc8:	e055      	b.n	8011c76 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	899b      	ldrh	r3, [r3, #12]
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fc f8f2 	bl	800ddbc <lwip_htons>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	f003 0301 	and.w	r3, r3, #1
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00d      	beq.n	8011bfe <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	899b      	ldrh	r3, [r3, #12]
 8011be8:	b29c      	uxth	r4, r3
 8011bea:	2001      	movs	r0, #1
 8011bec:	f7fc f8e6 	bl	800ddbc <lwip_htons>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	68db      	ldr	r3, [r3, #12]
 8011bf8:	4322      	orrs	r2, r4
 8011bfa:	b292      	uxth	r2, r2
 8011bfc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011c08:	68f8      	ldr	r0, [r7, #12]
 8011c0a:	f7fe fbdc 	bl	80103c6 <tcp_seg_free>
    while (next &&
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00e      	beq.n	8011c32 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	891b      	ldrh	r3, [r3, #8]
 8011c18:	461a      	mov	r2, r3
 8011c1a:	4b1a      	ldr	r3, [pc, #104]	; (8011c84 <tcp_oos_insert_segment+0xe8>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	441a      	add	r2, r3
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	6839      	ldr	r1, [r7, #0]
 8011c28:	8909      	ldrh	r1, [r1, #8]
 8011c2a:	440b      	add	r3, r1
 8011c2c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	dacb      	bge.n	8011bca <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d01e      	beq.n	8011c76 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	891b      	ldrh	r3, [r3, #8]
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	4b11      	ldr	r3, [pc, #68]	; (8011c84 <tcp_oos_insert_segment+0xe8>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	441a      	add	r2, r3
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	dd12      	ble.n	8011c76 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	4b0a      	ldr	r3, [pc, #40]	; (8011c84 <tcp_oos_insert_segment+0xe8>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	1ad3      	subs	r3, r2, r3
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	685a      	ldr	r2, [r3, #4]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	891b      	ldrh	r3, [r3, #8]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	4610      	mov	r0, r2
 8011c72:	f7fd f8d1 	bl	800ee18 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	683a      	ldr	r2, [r7, #0]
 8011c7a:	601a      	str	r2, [r3, #0]
}
 8011c7c:	bf00      	nop
 8011c7e:	3714      	adds	r7, #20
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd90      	pop	{r4, r7, pc}
 8011c84:	20004228 	.word	0x20004228

08011c88 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c8a:	b08d      	sub	sp, #52	; 0x34
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	7d1b      	ldrb	r3, [r3, #20]
 8011c98:	2b03      	cmp	r3, #3
 8011c9a:	d806      	bhi.n	8011caa <tcp_receive+0x22>
 8011c9c:	4ba6      	ldr	r3, [pc, #664]	; (8011f38 <tcp_receive+0x2b0>)
 8011c9e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8011ca2:	49a6      	ldr	r1, [pc, #664]	; (8011f3c <tcp_receive+0x2b4>)
 8011ca4:	48a6      	ldr	r0, [pc, #664]	; (8011f40 <tcp_receive+0x2b8>)
 8011ca6:	f007 fd1d 	bl	80196e4 <iprintf>

  if (flags & TCP_ACK) {
 8011caa:	4ba6      	ldr	r3, [pc, #664]	; (8011f44 <tcp_receive+0x2bc>)
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	f003 0310 	and.w	r3, r3, #16
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	f000 82bf 	beq.w	8012236 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cc4:	4413      	add	r3, r2
 8011cc6:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ccc:	4b9e      	ldr	r3, [pc, #632]	; (8011f48 <tcp_receive+0x2c0>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	db1b      	blt.n	8011d0e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011cda:	4b9b      	ldr	r3, [pc, #620]	; (8011f48 <tcp_receive+0x2c0>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d106      	bne.n	8011cf0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ce6:	4b99      	ldr	r3, [pc, #612]	; (8011f4c <tcp_receive+0x2c4>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	db0e      	blt.n	8011d0e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011cf4:	4b95      	ldr	r3, [pc, #596]	; (8011f4c <tcp_receive+0x2c4>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	d141      	bne.n	8011d80 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011cfc:	4b94      	ldr	r3, [pc, #592]	; (8011f50 <tcp_receive+0x2c8>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	89db      	ldrh	r3, [r3, #14]
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d938      	bls.n	8011d80 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011d0e:	4b90      	ldr	r3, [pc, #576]	; (8011f50 <tcp_receive+0x2c8>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	89db      	ldrh	r3, [r3, #14]
 8011d14:	b29a      	uxth	r2, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d205      	bcs.n	8011d38 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8011d38:	4b83      	ldr	r3, [pc, #524]	; (8011f48 <tcp_receive+0x2c0>)
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8011d40:	4b82      	ldr	r3, [pc, #520]	; (8011f4c <tcp_receive+0x2c4>)
 8011d42:	681a      	ldr	r2, [r3, #0]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d10d      	bne.n	8011d6e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d111      	bne.n	8011d80 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2201      	movs	r2, #1
 8011d68:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8011d6c:	e008      	b.n	8011d80 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d003      	beq.n	8011d80 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011d80:	4b72      	ldr	r3, [pc, #456]	; (8011f4c <tcp_receive+0x2c4>)
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d88:	1ad3      	subs	r3, r2, r3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	dc53      	bgt.n	8011e36 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8011d8e:	4b71      	ldr	r3, [pc, #452]	; (8011f54 <tcp_receive+0x2cc>)
 8011d90:	881b      	ldrh	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d146      	bne.n	8011e24 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8011da0:	4413      	add	r3, r2
 8011da2:	697a      	ldr	r2, [r7, #20]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d13d      	bne.n	8011e24 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	db38      	blt.n	8011e24 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011db6:	4b65      	ldr	r3, [pc, #404]	; (8011f4c <tcp_receive+0x2c4>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d132      	bne.n	8011e24 <tcp_receive+0x19c>
              found_dupack = 1;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dc8:	2bff      	cmp	r3, #255	; 0xff
 8011dca:	d007      	beq.n	8011ddc <tcp_receive+0x154>
                ++pcb->dupacks;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	b2da      	uxtb	r2, r3
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011de2:	2b03      	cmp	r3, #3
 8011de4:	d916      	bls.n	8011e14 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011df0:	4413      	add	r3, r2
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d912      	bls.n	8011e24 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e08:	4413      	add	r3, r2
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011e12:	e007      	b.n	8011e24 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e1a:	2b03      	cmp	r3, #3
 8011e1c:	d102      	bne.n	8011e24 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f001 fdfc 	bl	8013a1c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011e24:	69fb      	ldr	r3, [r7, #28]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f040 8169 	bne.w	80120fe <tcp_receive+0x476>
        pcb->dupacks = 0;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e34:	e163      	b.n	80120fe <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8011e36:	4b45      	ldr	r3, [pc, #276]	; (8011f4c <tcp_receive+0x2c4>)
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	3b01      	subs	r3, #1
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f2c0 8107 	blt.w	8012056 <tcp_receive+0x3ce>
 8011e48:	4b40      	ldr	r3, [pc, #256]	; (8011f4c <tcp_receive+0x2c4>)
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e50:	1ad3      	subs	r3, r2, r3
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	f300 80ff 	bgt.w	8012056 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	7e9b      	ldrb	r3, [r3, #26]
 8011e5c:	f003 0304 	and.w	r3, r3, #4
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d00c      	beq.n	8011e7e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	7e9b      	ldrb	r3, [r3, #26]
 8011e68:	f023 0304 	bic.w	r3, r3, #4
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2200      	movs	r2, #0
 8011e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011e8c:	10db      	asrs	r3, r3, #3
 8011e8e:	b21b      	sxth	r3, r3
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	4413      	add	r3, r2
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	b21a      	sxth	r2, r3
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011eae:	4b27      	ldr	r3, [pc, #156]	; (8011f4c <tcp_receive+0x2c4>)
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	7d1b      	ldrb	r3, [r3, #20]
 8011eba:	2b03      	cmp	r3, #3
 8011ebc:	f240 8094 	bls.w	8011fe8 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d216      	bcs.n	8011efe <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eda:	4413      	add	r3, r2
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d97f      	bls.n	8011fe8 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ef2:	4413      	add	r3, r2
 8011ef4:	b29a      	uxth	r2, r3
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011efc:	e074      	b.n	8011fe8 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f08:	4619      	mov	r1, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f0e:	fb03 f301 	mul.w	r3, r3, r1
 8011f12:	6879      	ldr	r1, [r7, #4]
 8011f14:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8011f18:	fb93 f3f1 	sdiv	r3, r3, r1
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	4413      	add	r3, r2
 8011f20:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f28:	8a7a      	ldrh	r2, [r7, #18]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d95c      	bls.n	8011fe8 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	8a7a      	ldrh	r2, [r7, #18]
 8011f32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8011f36:	e057      	b.n	8011fe8 <tcp_receive+0x360>
 8011f38:	0801b6e8 	.word	0x0801b6e8
 8011f3c:	0801b90c 	.word	0x0801b90c
 8011f40:	0801b72c 	.word	0x0801b72c
 8011f44:	20004234 	.word	0x20004234
 8011f48:	20004228 	.word	0x20004228
 8011f4c:	2000422c 	.word	0x2000422c
 8011f50:	20004218 	.word	0x20004218
 8011f54:	20004232 	.word	0x20004232
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8011f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fd f95e 	bl	800f234 <pbuf_clen>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	429c      	cmp	r4, r3
 8011f7c:	d206      	bcs.n	8011f8c <tcp_receive+0x304>
 8011f7e:	4b70      	ldr	r3, [pc, #448]	; (8012140 <tcp_receive+0x4b8>)
 8011f80:	f240 429e 	movw	r2, #1182	; 0x49e
 8011f84:	496f      	ldr	r1, [pc, #444]	; (8012144 <tcp_receive+0x4bc>)
 8011f86:	4870      	ldr	r0, [pc, #448]	; (8012148 <tcp_receive+0x4c0>)
 8011f88:	f007 fbac 	bl	80196e4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8011f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fd f94f 	bl	800f234 <pbuf_clen>
 8011f96:	4603      	mov	r3, r0
 8011f98:	461a      	mov	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011fa0:	1a9b      	subs	r3, r3, r2
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8011faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fac:	891a      	ldrh	r2, [r3, #8]
 8011fae:	4b67      	ldr	r3, [pc, #412]	; (801214c <tcp_receive+0x4c4>)
 8011fb0:	881b      	ldrh	r3, [r3, #0]
 8011fb2:	4413      	add	r3, r2
 8011fb4:	b29a      	uxth	r2, r3
 8011fb6:	4b65      	ldr	r3, [pc, #404]	; (801214c <tcp_receive+0x4c4>)
 8011fb8:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8011fba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fbc:	f7fe fa03 	bl	80103c6 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d00e      	beq.n	8011fe8 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d10a      	bne.n	8011fe8 <tcp_receive+0x360>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d106      	bne.n	8011fe8 <tcp_receive+0x360>
 8011fda:	4b59      	ldr	r3, [pc, #356]	; (8012140 <tcp_receive+0x4b8>)
 8011fdc:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8011fe0:	495b      	ldr	r1, [pc, #364]	; (8012150 <tcp_receive+0x4c8>)
 8011fe2:	4859      	ldr	r0, [pc, #356]	; (8012148 <tcp_receive+0x4c0>)
 8011fe4:	f007 fb7e 	bl	80196e4 <iprintf>
      while (pcb->unacked != NULL &&
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d022      	beq.n	8012036 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fb feed 	bl	800ddd8 <lwip_htonl>
 8011ffe:	4604      	mov	r4, r0
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012004:	891b      	ldrh	r3, [r3, #8]
 8012006:	461d      	mov	r5, r3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	899b      	ldrh	r3, [r3, #12]
 8012010:	b29b      	uxth	r3, r3
 8012012:	4618      	mov	r0, r3
 8012014:	f7fb fed2 	bl	800ddbc <lwip_htons>
 8012018:	4603      	mov	r3, r0
 801201a:	f003 0303 	and.w	r3, r3, #3
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <tcp_receive+0x39e>
 8012022:	2301      	movs	r3, #1
 8012024:	e000      	b.n	8012028 <tcp_receive+0x3a0>
 8012026:	2300      	movs	r3, #0
 8012028:	442b      	add	r3, r5
 801202a:	18e2      	adds	r2, r4, r3
 801202c:	4b49      	ldr	r3, [pc, #292]	; (8012154 <tcp_receive+0x4cc>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8012032:	2b00      	cmp	r3, #0
 8012034:	dd90      	ble.n	8011f58 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801203a:	2b00      	cmp	r3, #0
 801203c:	d104      	bne.n	8012048 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012044:	861a      	strh	r2, [r3, #48]	; 0x30
 8012046:	e002      	b.n	801204e <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	76da      	strb	r2, [r3, #27]
 8012054:	e002      	b.n	801205c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f001 f8fe 	bl	8013258 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 801205c:	e04f      	b.n	80120fe <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012062:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012072:	2b00      	cmp	r3, #0
 8012074:	d103      	bne.n	801207e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2200      	movs	r2, #0
 801207a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8012084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	4618      	mov	r0, r3
 801208a:	f7fd f8d3 	bl	800f234 <pbuf_clen>
 801208e:	4603      	mov	r3, r0
 8012090:	429c      	cmp	r4, r3
 8012092:	d206      	bcs.n	80120a2 <tcp_receive+0x41a>
 8012094:	4b2a      	ldr	r3, [pc, #168]	; (8012140 <tcp_receive+0x4b8>)
 8012096:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801209a:	492a      	ldr	r1, [pc, #168]	; (8012144 <tcp_receive+0x4bc>)
 801209c:	482a      	ldr	r0, [pc, #168]	; (8012148 <tcp_receive+0x4c0>)
 801209e:	f007 fb21 	bl	80196e4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80120a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fd f8c4 	bl	800f234 <pbuf_clen>
 80120ac:	4603      	mov	r3, r0
 80120ae:	461a      	mov	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80120b6:	1a9b      	subs	r3, r3, r2
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80120c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c2:	891a      	ldrh	r2, [r3, #8]
 80120c4:	4b21      	ldr	r3, [pc, #132]	; (801214c <tcp_receive+0x4c4>)
 80120c6:	881b      	ldrh	r3, [r3, #0]
 80120c8:	4413      	add	r3, r2
 80120ca:	b29a      	uxth	r2, r3
 80120cc:	4b1f      	ldr	r3, [pc, #124]	; (801214c <tcp_receive+0x4c4>)
 80120ce:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80120d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120d2:	f7fe f978 	bl	80103c6 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d00e      	beq.n	80120fe <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d10a      	bne.n	80120fe <tcp_receive+0x476>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d106      	bne.n	80120fe <tcp_receive+0x476>
 80120f0:	4b13      	ldr	r3, [pc, #76]	; (8012140 <tcp_receive+0x4b8>)
 80120f2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80120f6:	4916      	ldr	r1, [pc, #88]	; (8012150 <tcp_receive+0x4c8>)
 80120f8:	4813      	ldr	r0, [pc, #76]	; (8012148 <tcp_receive+0x4c0>)
 80120fa:	f007 faf3 	bl	80196e4 <iprintf>
    while (pcb->unsent != NULL &&
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012102:	2b00      	cmp	r3, #0
 8012104:	d036      	beq.n	8012174 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012106:	4b13      	ldr	r3, [pc, #76]	; (8012154 <tcp_receive+0x4cc>)
 8012108:	681c      	ldr	r4, [r3, #0]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	4618      	mov	r0, r3
 8012114:	f7fb fe60 	bl	800ddd8 <lwip_htonl>
 8012118:	4605      	mov	r5, r0
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801211e:	891b      	ldrh	r3, [r3, #8]
 8012120:	461e      	mov	r6, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	899b      	ldrh	r3, [r3, #12]
 801212a:	b29b      	uxth	r3, r3
 801212c:	4618      	mov	r0, r3
 801212e:	f7fb fe45 	bl	800ddbc <lwip_htons>
 8012132:	4603      	mov	r3, r0
 8012134:	f003 0303 	and.w	r3, r3, #3
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00d      	beq.n	8012158 <tcp_receive+0x4d0>
 801213c:	2301      	movs	r3, #1
 801213e:	e00c      	b.n	801215a <tcp_receive+0x4d2>
 8012140:	0801b6e8 	.word	0x0801b6e8
 8012144:	0801b928 	.word	0x0801b928
 8012148:	0801b72c 	.word	0x0801b72c
 801214c:	20004230 	.word	0x20004230
 8012150:	0801b950 	.word	0x0801b950
 8012154:	2000422c 	.word	0x2000422c
 8012158:	2300      	movs	r3, #0
 801215a:	4433      	add	r3, r6
 801215c:	442b      	add	r3, r5
 801215e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8012160:	2b00      	cmp	r3, #0
 8012162:	db07      	blt.n	8012174 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012164:	4b8d      	ldr	r3, [pc, #564]	; (801239c <tcp_receive+0x714>)
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801216c:	1ad3      	subs	r3, r2, r3
 801216e:	2b00      	cmp	r3, #0
 8012170:	f77f af75 	ble.w	801205e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801217a:	4b89      	ldr	r3, [pc, #548]	; (80123a0 <tcp_receive+0x718>)
 801217c:	881b      	ldrh	r3, [r3, #0]
 801217e:	4413      	add	r3, r2
 8012180:	b29a      	uxth	r2, r3
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801218c:	2b00      	cmp	r3, #0
 801218e:	d052      	beq.n	8012236 <tcp_receive+0x5ae>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012194:	4b81      	ldr	r3, [pc, #516]	; (801239c <tcp_receive+0x714>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	2b00      	cmp	r3, #0
 801219c:	da4b      	bge.n	8012236 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801219e:	4b81      	ldr	r3, [pc, #516]	; (80123a4 <tcp_receive+0x71c>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	1ad3      	subs	r3, r2, r3
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80121b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121b8:	10db      	asrs	r3, r3, #3
 80121ba:	b21b      	sxth	r3, r3
 80121bc:	b29b      	uxth	r3, r3
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121ca:	b29a      	uxth	r2, r3
 80121cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121ce:	4413      	add	r3, r2
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	b21a      	sxth	r2, r3
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80121d8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80121dc:	2b00      	cmp	r3, #0
 80121de:	da03      	bge.n	80121e8 <tcp_receive+0x560>
        m = -m;
 80121e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121e2:	425b      	negs	r3, r3
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80121e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80121f0:	109b      	asrs	r3, r3, #2
 80121f2:	b21b      	sxth	r3, r3
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	1ad3      	subs	r3, r2, r3
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012202:	b29a      	uxth	r2, r3
 8012204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012206:	4413      	add	r3, r2
 8012208:	b29b      	uxth	r3, r3
 801220a:	b21a      	sxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012216:	10db      	asrs	r3, r3, #3
 8012218:	b21b      	sxth	r3, r3
 801221a:	b29a      	uxth	r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012222:	b29b      	uxth	r3, r3
 8012224:	4413      	add	r3, r2
 8012226:	b29b      	uxth	r3, r3
 8012228:	b21a      	sxth	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012236:	4b5c      	ldr	r3, [pc, #368]	; (80123a8 <tcp_receive+0x720>)
 8012238:	881b      	ldrh	r3, [r3, #0]
 801223a:	2b00      	cmp	r3, #0
 801223c:	f000 84f1 	beq.w	8012c22 <tcp_receive+0xf9a>
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	7d1b      	ldrb	r3, [r3, #20]
 8012244:	2b06      	cmp	r3, #6
 8012246:	f200 84ec 	bhi.w	8012c22 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801224e:	4b57      	ldr	r3, [pc, #348]	; (80123ac <tcp_receive+0x724>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	1ad3      	subs	r3, r2, r3
 8012254:	3b01      	subs	r3, #1
 8012256:	2b00      	cmp	r3, #0
 8012258:	f2c0 80b8 	blt.w	80123cc <tcp_receive+0x744>
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012260:	4b51      	ldr	r3, [pc, #324]	; (80123a8 <tcp_receive+0x720>)
 8012262:	881b      	ldrh	r3, [r3, #0]
 8012264:	4619      	mov	r1, r3
 8012266:	4b51      	ldr	r3, [pc, #324]	; (80123ac <tcp_receive+0x724>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	440b      	add	r3, r1
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	3301      	adds	r3, #1
 8012270:	2b00      	cmp	r3, #0
 8012272:	f300 80ab 	bgt.w	80123cc <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012276:	4b4e      	ldr	r3, [pc, #312]	; (80123b0 <tcp_receive+0x728>)
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012280:	4b4a      	ldr	r3, [pc, #296]	; (80123ac <tcp_receive+0x724>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012288:	4b49      	ldr	r3, [pc, #292]	; (80123b0 <tcp_receive+0x728>)
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d106      	bne.n	801229e <tcp_receive+0x616>
 8012290:	4b48      	ldr	r3, [pc, #288]	; (80123b4 <tcp_receive+0x72c>)
 8012292:	f240 523c 	movw	r2, #1340	; 0x53c
 8012296:	4948      	ldr	r1, [pc, #288]	; (80123b8 <tcp_receive+0x730>)
 8012298:	4848      	ldr	r0, [pc, #288]	; (80123bc <tcp_receive+0x734>)
 801229a:	f007 fa23 	bl	80196e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80122a4:	4293      	cmp	r3, r2
 80122a6:	dd06      	ble.n	80122b6 <tcp_receive+0x62e>
 80122a8:	4b42      	ldr	r3, [pc, #264]	; (80123b4 <tcp_receive+0x72c>)
 80122aa:	f240 523d 	movw	r2, #1341	; 0x53d
 80122ae:	4944      	ldr	r1, [pc, #272]	; (80123c0 <tcp_receive+0x738>)
 80122b0:	4842      	ldr	r0, [pc, #264]	; (80123bc <tcp_receive+0x734>)
 80122b2:	f007 fa17 	bl	80196e4 <iprintf>
      if (inseg.p->len < off) {
 80122b6:	4b3e      	ldr	r3, [pc, #248]	; (80123b0 <tcp_receive+0x728>)
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	895b      	ldrh	r3, [r3, #10]
 80122bc:	461a      	mov	r2, r3
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	4293      	cmp	r3, r2
 80122c2:	dd3e      	ble.n	8012342 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80122c4:	4b3a      	ldr	r3, [pc, #232]	; (80123b0 <tcp_receive+0x728>)
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	891b      	ldrh	r3, [r3, #8]
 80122ca:	461a      	mov	r2, r3
 80122cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ce:	4293      	cmp	r3, r2
 80122d0:	dd06      	ble.n	80122e0 <tcp_receive+0x658>
 80122d2:	4b38      	ldr	r3, [pc, #224]	; (80123b4 <tcp_receive+0x72c>)
 80122d4:	f240 523f 	movw	r2, #1343	; 0x53f
 80122d8:	493a      	ldr	r1, [pc, #232]	; (80123c4 <tcp_receive+0x73c>)
 80122da:	4838      	ldr	r0, [pc, #224]	; (80123bc <tcp_receive+0x734>)
 80122dc:	f007 fa02 	bl	80196e4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80122e0:	4b33      	ldr	r3, [pc, #204]	; (80123b0 <tcp_receive+0x728>)
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	891a      	ldrh	r2, [r3, #8]
 80122e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80122ee:	e00e      	b.n	801230e <tcp_receive+0x686>
          off -= p->len;
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	895b      	ldrh	r3, [r3, #10]
 80122f4:	461a      	mov	r2, r3
 80122f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f8:	1a9b      	subs	r3, r3, r2
 80122fa:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	8a3a      	ldrh	r2, [r7, #16]
 8012300:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	2200      	movs	r2, #0
 8012306:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	895b      	ldrh	r3, [r3, #10]
 8012312:	461a      	mov	r2, r3
 8012314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012316:	4293      	cmp	r3, r2
 8012318:	dcea      	bgt.n	80122f0 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 801231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231c:	b29b      	uxth	r3, r3
 801231e:	425b      	negs	r3, r3
 8012320:	b29b      	uxth	r3, r3
 8012322:	b21b      	sxth	r3, r3
 8012324:	4619      	mov	r1, r3
 8012326:	69b8      	ldr	r0, [r7, #24]
 8012328:	f7fc fec6 	bl	800f0b8 <pbuf_header>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d01c      	beq.n	801236c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8012332:	4b20      	ldr	r3, [pc, #128]	; (80123b4 <tcp_receive+0x72c>)
 8012334:	f240 524c 	movw	r2, #1356	; 0x54c
 8012338:	4923      	ldr	r1, [pc, #140]	; (80123c8 <tcp_receive+0x740>)
 801233a:	4820      	ldr	r0, [pc, #128]	; (80123bc <tcp_receive+0x734>)
 801233c:	f007 f9d2 	bl	80196e4 <iprintf>
 8012340:	e014      	b.n	801236c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8012342:	4b1b      	ldr	r3, [pc, #108]	; (80123b0 <tcp_receive+0x728>)
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012348:	b292      	uxth	r2, r2
 801234a:	4252      	negs	r2, r2
 801234c:	b292      	uxth	r2, r2
 801234e:	b212      	sxth	r2, r2
 8012350:	4611      	mov	r1, r2
 8012352:	4618      	mov	r0, r3
 8012354:	f7fc feb0 	bl	800f0b8 <pbuf_header>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d006      	beq.n	801236c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801235e:	4b15      	ldr	r3, [pc, #84]	; (80123b4 <tcp_receive+0x72c>)
 8012360:	f240 5251 	movw	r2, #1361	; 0x551
 8012364:	4918      	ldr	r1, [pc, #96]	; (80123c8 <tcp_receive+0x740>)
 8012366:	4815      	ldr	r0, [pc, #84]	; (80123bc <tcp_receive+0x734>)
 8012368:	f007 f9bc 	bl	80196e4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801236c:	4b10      	ldr	r3, [pc, #64]	; (80123b0 <tcp_receive+0x728>)
 801236e:	891a      	ldrh	r2, [r3, #8]
 8012370:	4b0e      	ldr	r3, [pc, #56]	; (80123ac <tcp_receive+0x724>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	b299      	uxth	r1, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237a:	b29b      	uxth	r3, r3
 801237c:	1acb      	subs	r3, r1, r3
 801237e:	b29b      	uxth	r3, r3
 8012380:	4413      	add	r3, r2
 8012382:	b29a      	uxth	r2, r3
 8012384:	4b0a      	ldr	r3, [pc, #40]	; (80123b0 <tcp_receive+0x728>)
 8012386:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801238c:	4a07      	ldr	r2, [pc, #28]	; (80123ac <tcp_receive+0x724>)
 801238e:	6013      	str	r3, [r2, #0]
 8012390:	4b07      	ldr	r3, [pc, #28]	; (80123b0 <tcp_receive+0x728>)
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	4a05      	ldr	r2, [pc, #20]	; (80123ac <tcp_receive+0x724>)
 8012396:	6812      	ldr	r2, [r2, #0]
 8012398:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801239a:	e025      	b.n	80123e8 <tcp_receive+0x760>
 801239c:	2000422c 	.word	0x2000422c
 80123a0:	20004230 	.word	0x20004230
 80123a4:	2000ab34 	.word	0x2000ab34
 80123a8:	20004232 	.word	0x20004232
 80123ac:	20004228 	.word	0x20004228
 80123b0:	20004208 	.word	0x20004208
 80123b4:	0801b6e8 	.word	0x0801b6e8
 80123b8:	0801b970 	.word	0x0801b970
 80123bc:	0801b72c 	.word	0x0801b72c
 80123c0:	0801b980 	.word	0x0801b980
 80123c4:	0801b990 	.word	0x0801b990
 80123c8:	0801b9a0 	.word	0x0801b9a0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80123cc:	4b87      	ldr	r3, [pc, #540]	; (80125ec <tcp_receive+0x964>)
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d4:	1ad3      	subs	r3, r2, r3
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	da06      	bge.n	80123e8 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	7e9b      	ldrb	r3, [r3, #26]
 80123de:	f043 0302 	orr.w	r3, r3, #2
 80123e2:	b2da      	uxtb	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80123e8:	4b80      	ldr	r3, [pc, #512]	; (80125ec <tcp_receive+0x964>)
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	f2c0 8410 	blt.w	8012c18 <tcp_receive+0xf90>
 80123f8:	4b7c      	ldr	r3, [pc, #496]	; (80125ec <tcp_receive+0x964>)
 80123fa:	681a      	ldr	r2, [r3, #0]
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012400:	6879      	ldr	r1, [r7, #4]
 8012402:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012404:	440b      	add	r3, r1
 8012406:	1ad3      	subs	r3, r2, r3
 8012408:	3301      	adds	r3, #1
 801240a:	2b00      	cmp	r3, #0
 801240c:	f300 8404 	bgt.w	8012c18 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012414:	4b75      	ldr	r3, [pc, #468]	; (80125ec <tcp_receive+0x964>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	429a      	cmp	r2, r3
 801241a:	f040 8287 	bne.w	801292c <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801241e:	4b74      	ldr	r3, [pc, #464]	; (80125f0 <tcp_receive+0x968>)
 8012420:	891c      	ldrh	r4, [r3, #8]
 8012422:	4b73      	ldr	r3, [pc, #460]	; (80125f0 <tcp_receive+0x968>)
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	899b      	ldrh	r3, [r3, #12]
 8012428:	b29b      	uxth	r3, r3
 801242a:	4618      	mov	r0, r3
 801242c:	f7fb fcc6 	bl	800ddbc <lwip_htons>
 8012430:	4603      	mov	r3, r0
 8012432:	f003 0303 	and.w	r3, r3, #3
 8012436:	2b00      	cmp	r3, #0
 8012438:	d001      	beq.n	801243e <tcp_receive+0x7b6>
 801243a:	2301      	movs	r3, #1
 801243c:	e000      	b.n	8012440 <tcp_receive+0x7b8>
 801243e:	2300      	movs	r3, #0
 8012440:	4423      	add	r3, r4
 8012442:	b29a      	uxth	r2, r3
 8012444:	4b6b      	ldr	r3, [pc, #428]	; (80125f4 <tcp_receive+0x96c>)
 8012446:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801244c:	4b69      	ldr	r3, [pc, #420]	; (80125f4 <tcp_receive+0x96c>)
 801244e:	881b      	ldrh	r3, [r3, #0]
 8012450:	429a      	cmp	r2, r3
 8012452:	d26e      	bcs.n	8012532 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012454:	4b66      	ldr	r3, [pc, #408]	; (80125f0 <tcp_receive+0x968>)
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	899b      	ldrh	r3, [r3, #12]
 801245a:	b29b      	uxth	r3, r3
 801245c:	4618      	mov	r0, r3
 801245e:	f7fb fcad 	bl	800ddbc <lwip_htons>
 8012462:	4603      	mov	r3, r0
 8012464:	f003 0301 	and.w	r3, r3, #1
 8012468:	2b00      	cmp	r3, #0
 801246a:	d01b      	beq.n	80124a4 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801246c:	4b60      	ldr	r3, [pc, #384]	; (80125f0 <tcp_receive+0x968>)
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	899b      	ldrh	r3, [r3, #12]
 8012472:	b29b      	uxth	r3, r3
 8012474:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012478:	b29c      	uxth	r4, r3
 801247a:	4b5d      	ldr	r3, [pc, #372]	; (80125f0 <tcp_receive+0x968>)
 801247c:	68db      	ldr	r3, [r3, #12]
 801247e:	899b      	ldrh	r3, [r3, #12]
 8012480:	b29b      	uxth	r3, r3
 8012482:	4618      	mov	r0, r3
 8012484:	f7fb fc9a 	bl	800ddbc <lwip_htons>
 8012488:	4603      	mov	r3, r0
 801248a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801248e:	b29b      	uxth	r3, r3
 8012490:	4618      	mov	r0, r3
 8012492:	f7fb fc93 	bl	800ddbc <lwip_htons>
 8012496:	4603      	mov	r3, r0
 8012498:	461a      	mov	r2, r3
 801249a:	4b55      	ldr	r3, [pc, #340]	; (80125f0 <tcp_receive+0x968>)
 801249c:	68db      	ldr	r3, [r3, #12]
 801249e:	4322      	orrs	r2, r4
 80124a0:	b292      	uxth	r2, r2
 80124a2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80124a8:	4b51      	ldr	r3, [pc, #324]	; (80125f0 <tcp_receive+0x968>)
 80124aa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80124ac:	4b50      	ldr	r3, [pc, #320]	; (80125f0 <tcp_receive+0x968>)
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	899b      	ldrh	r3, [r3, #12]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7fb fc81 	bl	800ddbc <lwip_htons>
 80124ba:	4603      	mov	r3, r0
 80124bc:	f003 0302 	and.w	r3, r3, #2
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d005      	beq.n	80124d0 <tcp_receive+0x848>
            inseg.len -= 1;
 80124c4:	4b4a      	ldr	r3, [pc, #296]	; (80125f0 <tcp_receive+0x968>)
 80124c6:	891b      	ldrh	r3, [r3, #8]
 80124c8:	3b01      	subs	r3, #1
 80124ca:	b29a      	uxth	r2, r3
 80124cc:	4b48      	ldr	r3, [pc, #288]	; (80125f0 <tcp_receive+0x968>)
 80124ce:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80124d0:	4b47      	ldr	r3, [pc, #284]	; (80125f0 <tcp_receive+0x968>)
 80124d2:	685a      	ldr	r2, [r3, #4]
 80124d4:	4b46      	ldr	r3, [pc, #280]	; (80125f0 <tcp_receive+0x968>)
 80124d6:	891b      	ldrh	r3, [r3, #8]
 80124d8:	4619      	mov	r1, r3
 80124da:	4610      	mov	r0, r2
 80124dc:	f7fc fc9c 	bl	800ee18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80124e0:	4b43      	ldr	r3, [pc, #268]	; (80125f0 <tcp_receive+0x968>)
 80124e2:	891c      	ldrh	r4, [r3, #8]
 80124e4:	4b42      	ldr	r3, [pc, #264]	; (80125f0 <tcp_receive+0x968>)
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	899b      	ldrh	r3, [r3, #12]
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7fb fc65 	bl	800ddbc <lwip_htons>
 80124f2:	4603      	mov	r3, r0
 80124f4:	f003 0303 	and.w	r3, r3, #3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d001      	beq.n	8012500 <tcp_receive+0x878>
 80124fc:	2301      	movs	r3, #1
 80124fe:	e000      	b.n	8012502 <tcp_receive+0x87a>
 8012500:	2300      	movs	r3, #0
 8012502:	4423      	add	r3, r4
 8012504:	b29a      	uxth	r2, r3
 8012506:	4b3b      	ldr	r3, [pc, #236]	; (80125f4 <tcp_receive+0x96c>)
 8012508:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801250a:	4b3a      	ldr	r3, [pc, #232]	; (80125f4 <tcp_receive+0x96c>)
 801250c:	881b      	ldrh	r3, [r3, #0]
 801250e:	461a      	mov	r2, r3
 8012510:	4b36      	ldr	r3, [pc, #216]	; (80125ec <tcp_receive+0x964>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	441a      	add	r2, r3
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251a:	6879      	ldr	r1, [r7, #4]
 801251c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801251e:	440b      	add	r3, r1
 8012520:	429a      	cmp	r2, r3
 8012522:	d006      	beq.n	8012532 <tcp_receive+0x8aa>
 8012524:	4b34      	ldr	r3, [pc, #208]	; (80125f8 <tcp_receive+0x970>)
 8012526:	f240 527f 	movw	r2, #1407	; 0x57f
 801252a:	4934      	ldr	r1, [pc, #208]	; (80125fc <tcp_receive+0x974>)
 801252c:	4834      	ldr	r0, [pc, #208]	; (8012600 <tcp_receive+0x978>)
 801252e:	f007 f8d9 	bl	80196e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012536:	2b00      	cmp	r3, #0
 8012538:	f000 80e1 	beq.w	80126fe <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801253c:	4b2c      	ldr	r3, [pc, #176]	; (80125f0 <tcp_receive+0x968>)
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	899b      	ldrh	r3, [r3, #12]
 8012542:	b29b      	uxth	r3, r3
 8012544:	4618      	mov	r0, r3
 8012546:	f7fb fc39 	bl	800ddbc <lwip_htons>
 801254a:	4603      	mov	r3, r0
 801254c:	f003 0301 	and.w	r3, r3, #1
 8012550:	2b00      	cmp	r3, #0
 8012552:	d010      	beq.n	8012576 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012554:	e00a      	b.n	801256c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801255a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8012566:	68b8      	ldr	r0, [r7, #8]
 8012568:	f7fd ff2d 	bl	80103c6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012570:	2b00      	cmp	r3, #0
 8012572:	d1f0      	bne.n	8012556 <tcp_receive+0x8ce>
 8012574:	e0c3      	b.n	80126fe <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801257a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801257c:	e04f      	b.n	801261e <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012580:	68db      	ldr	r3, [r3, #12]
 8012582:	899b      	ldrh	r3, [r3, #12]
 8012584:	b29b      	uxth	r3, r3
 8012586:	4618      	mov	r0, r3
 8012588:	f7fb fc18 	bl	800ddbc <lwip_htons>
 801258c:	4603      	mov	r3, r0
 801258e:	f003 0301 	and.w	r3, r3, #1
 8012592:	2b00      	cmp	r3, #0
 8012594:	d03b      	beq.n	801260e <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012596:	4b16      	ldr	r3, [pc, #88]	; (80125f0 <tcp_receive+0x968>)
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	899b      	ldrh	r3, [r3, #12]
 801259c:	b29b      	uxth	r3, r3
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fb fc0c 	bl	800ddbc <lwip_htons>
 80125a4:	4603      	mov	r3, r0
 80125a6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d12f      	bne.n	801260e <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80125ae:	4b10      	ldr	r3, [pc, #64]	; (80125f0 <tcp_receive+0x968>)
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	899b      	ldrh	r3, [r3, #12]
 80125b4:	b29c      	uxth	r4, r3
 80125b6:	2001      	movs	r0, #1
 80125b8:	f7fb fc00 	bl	800ddbc <lwip_htons>
 80125bc:	4603      	mov	r3, r0
 80125be:	461a      	mov	r2, r3
 80125c0:	4b0b      	ldr	r3, [pc, #44]	; (80125f0 <tcp_receive+0x968>)
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	4322      	orrs	r2, r4
 80125c6:	b292      	uxth	r2, r2
 80125c8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80125ca:	4b09      	ldr	r3, [pc, #36]	; (80125f0 <tcp_receive+0x968>)
 80125cc:	891c      	ldrh	r4, [r3, #8]
 80125ce:	4b08      	ldr	r3, [pc, #32]	; (80125f0 <tcp_receive+0x968>)
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	899b      	ldrh	r3, [r3, #12]
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fb fbf0 	bl	800ddbc <lwip_htons>
 80125dc:	4603      	mov	r3, r0
 80125de:	f003 0303 	and.w	r3, r3, #3
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00e      	beq.n	8012604 <tcp_receive+0x97c>
 80125e6:	2301      	movs	r3, #1
 80125e8:	e00d      	b.n	8012606 <tcp_receive+0x97e>
 80125ea:	bf00      	nop
 80125ec:	20004228 	.word	0x20004228
 80125f0:	20004208 	.word	0x20004208
 80125f4:	20004232 	.word	0x20004232
 80125f8:	0801b6e8 	.word	0x0801b6e8
 80125fc:	0801b9b4 	.word	0x0801b9b4
 8012600:	0801b72c 	.word	0x0801b72c
 8012604:	2300      	movs	r3, #0
 8012606:	4423      	add	r3, r4
 8012608:	b29a      	uxth	r2, r3
 801260a:	4b95      	ldr	r3, [pc, #596]	; (8012860 <tcp_receive+0xbd8>)
 801260c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012610:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8012612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8012618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801261a:	f7fd fed4 	bl	80103c6 <tcp_seg_free>
            while (next &&
 801261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00e      	beq.n	8012642 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012624:	4b8e      	ldr	r3, [pc, #568]	; (8012860 <tcp_receive+0xbd8>)
 8012626:	881b      	ldrh	r3, [r3, #0]
 8012628:	461a      	mov	r2, r3
 801262a:	4b8e      	ldr	r3, [pc, #568]	; (8012864 <tcp_receive+0xbdc>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	441a      	add	r2, r3
 8012630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012638:	8909      	ldrh	r1, [r1, #8]
 801263a:	440b      	add	r3, r1
 801263c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801263e:	2b00      	cmp	r3, #0
 8012640:	da9d      	bge.n	801257e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012644:	2b00      	cmp	r3, #0
 8012646:	d057      	beq.n	80126f8 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8012648:	4b85      	ldr	r3, [pc, #532]	; (8012860 <tcp_receive+0xbd8>)
 801264a:	881b      	ldrh	r3, [r3, #0]
 801264c:	461a      	mov	r2, r3
 801264e:	4b85      	ldr	r3, [pc, #532]	; (8012864 <tcp_receive+0xbdc>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	441a      	add	r2, r3
 8012654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801265c:	2b00      	cmp	r3, #0
 801265e:	dd4b      	ble.n	80126f8 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012662:	68db      	ldr	r3, [r3, #12]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	b29a      	uxth	r2, r3
 8012668:	4b7e      	ldr	r3, [pc, #504]	; (8012864 <tcp_receive+0xbdc>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	b29b      	uxth	r3, r3
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	b29a      	uxth	r2, r3
 8012672:	4b7d      	ldr	r3, [pc, #500]	; (8012868 <tcp_receive+0xbe0>)
 8012674:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012676:	4b7c      	ldr	r3, [pc, #496]	; (8012868 <tcp_receive+0xbe0>)
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	899b      	ldrh	r3, [r3, #12]
 801267c:	b29b      	uxth	r3, r3
 801267e:	4618      	mov	r0, r3
 8012680:	f7fb fb9c 	bl	800ddbc <lwip_htons>
 8012684:	4603      	mov	r3, r0
 8012686:	f003 0302 	and.w	r3, r3, #2
 801268a:	2b00      	cmp	r3, #0
 801268c:	d005      	beq.n	801269a <tcp_receive+0xa12>
                inseg.len -= 1;
 801268e:	4b76      	ldr	r3, [pc, #472]	; (8012868 <tcp_receive+0xbe0>)
 8012690:	891b      	ldrh	r3, [r3, #8]
 8012692:	3b01      	subs	r3, #1
 8012694:	b29a      	uxth	r2, r3
 8012696:	4b74      	ldr	r3, [pc, #464]	; (8012868 <tcp_receive+0xbe0>)
 8012698:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801269a:	4b73      	ldr	r3, [pc, #460]	; (8012868 <tcp_receive+0xbe0>)
 801269c:	685a      	ldr	r2, [r3, #4]
 801269e:	4b72      	ldr	r3, [pc, #456]	; (8012868 <tcp_receive+0xbe0>)
 80126a0:	891b      	ldrh	r3, [r3, #8]
 80126a2:	4619      	mov	r1, r3
 80126a4:	4610      	mov	r0, r2
 80126a6:	f7fc fbb7 	bl	800ee18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80126aa:	4b6f      	ldr	r3, [pc, #444]	; (8012868 <tcp_receive+0xbe0>)
 80126ac:	891c      	ldrh	r4, [r3, #8]
 80126ae:	4b6e      	ldr	r3, [pc, #440]	; (8012868 <tcp_receive+0xbe0>)
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	899b      	ldrh	r3, [r3, #12]
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7fb fb80 	bl	800ddbc <lwip_htons>
 80126bc:	4603      	mov	r3, r0
 80126be:	f003 0303 	and.w	r3, r3, #3
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d001      	beq.n	80126ca <tcp_receive+0xa42>
 80126c6:	2301      	movs	r3, #1
 80126c8:	e000      	b.n	80126cc <tcp_receive+0xa44>
 80126ca:	2300      	movs	r3, #0
 80126cc:	4423      	add	r3, r4
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	4b63      	ldr	r3, [pc, #396]	; (8012860 <tcp_receive+0xbd8>)
 80126d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80126d4:	4b62      	ldr	r3, [pc, #392]	; (8012860 <tcp_receive+0xbd8>)
 80126d6:	881b      	ldrh	r3, [r3, #0]
 80126d8:	461a      	mov	r2, r3
 80126da:	4b62      	ldr	r3, [pc, #392]	; (8012864 <tcp_receive+0xbdc>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	441a      	add	r2, r3
 80126e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	685b      	ldr	r3, [r3, #4]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d006      	beq.n	80126f8 <tcp_receive+0xa70>
 80126ea:	4b60      	ldr	r3, [pc, #384]	; (801286c <tcp_receive+0xbe4>)
 80126ec:	f240 52af 	movw	r2, #1455	; 0x5af
 80126f0:	495f      	ldr	r1, [pc, #380]	; (8012870 <tcp_receive+0xbe8>)
 80126f2:	4860      	ldr	r0, [pc, #384]	; (8012874 <tcp_receive+0xbec>)
 80126f4:	f006 fff6 	bl	80196e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126fc:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80126fe:	4b58      	ldr	r3, [pc, #352]	; (8012860 <tcp_receive+0xbd8>)
 8012700:	881b      	ldrh	r3, [r3, #0]
 8012702:	461a      	mov	r2, r3
 8012704:	4b57      	ldr	r3, [pc, #348]	; (8012864 <tcp_receive+0xbdc>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	441a      	add	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012712:	4b53      	ldr	r3, [pc, #332]	; (8012860 <tcp_receive+0xbd8>)
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	429a      	cmp	r2, r3
 8012718:	d206      	bcs.n	8012728 <tcp_receive+0xaa0>
 801271a:	4b54      	ldr	r3, [pc, #336]	; (801286c <tcp_receive+0xbe4>)
 801271c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012720:	4955      	ldr	r1, [pc, #340]	; (8012878 <tcp_receive+0xbf0>)
 8012722:	4854      	ldr	r0, [pc, #336]	; (8012874 <tcp_receive+0xbec>)
 8012724:	f006 ffde 	bl	80196e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801272c:	4b4c      	ldr	r3, [pc, #304]	; (8012860 <tcp_receive+0xbd8>)
 801272e:	881b      	ldrh	r3, [r3, #0]
 8012730:	1ad3      	subs	r3, r2, r3
 8012732:	b29a      	uxth	r2, r3
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7fd f9fb 	bl	800fb34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801273e:	4b4a      	ldr	r3, [pc, #296]	; (8012868 <tcp_receive+0xbe0>)
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	891b      	ldrh	r3, [r3, #8]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d006      	beq.n	8012756 <tcp_receive+0xace>
          recv_data = inseg.p;
 8012748:	4b47      	ldr	r3, [pc, #284]	; (8012868 <tcp_receive+0xbe0>)
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	4a4b      	ldr	r2, [pc, #300]	; (801287c <tcp_receive+0xbf4>)
 801274e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012750:	4b45      	ldr	r3, [pc, #276]	; (8012868 <tcp_receive+0xbe0>)
 8012752:	2200      	movs	r2, #0
 8012754:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012756:	4b44      	ldr	r3, [pc, #272]	; (8012868 <tcp_receive+0xbe0>)
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	899b      	ldrh	r3, [r3, #12]
 801275c:	b29b      	uxth	r3, r3
 801275e:	4618      	mov	r0, r3
 8012760:	f7fb fb2c 	bl	800ddbc <lwip_htons>
 8012764:	4603      	mov	r3, r0
 8012766:	f003 0301 	and.w	r3, r3, #1
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 80b4 	beq.w	80128d8 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012770:	4b43      	ldr	r3, [pc, #268]	; (8012880 <tcp_receive+0xbf8>)
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	f043 0320 	orr.w	r3, r3, #32
 8012778:	b2da      	uxtb	r2, r3
 801277a:	4b41      	ldr	r3, [pc, #260]	; (8012880 <tcp_receive+0xbf8>)
 801277c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801277e:	e0ab      	b.n	80128d8 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012784:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	4a35      	ldr	r2, [pc, #212]	; (8012864 <tcp_receive+0xbdc>)
 8012790:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	891b      	ldrh	r3, [r3, #8]
 8012796:	461c      	mov	r4, r3
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	899b      	ldrh	r3, [r3, #12]
 801279e:	b29b      	uxth	r3, r3
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7fb fb0b 	bl	800ddbc <lwip_htons>
 80127a6:	4603      	mov	r3, r0
 80127a8:	f003 0303 	and.w	r3, r3, #3
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d001      	beq.n	80127b4 <tcp_receive+0xb2c>
 80127b0:	2301      	movs	r3, #1
 80127b2:	e000      	b.n	80127b6 <tcp_receive+0xb2e>
 80127b4:	2300      	movs	r3, #0
 80127b6:	191a      	adds	r2, r3, r4
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127bc:	441a      	add	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127c6:	461c      	mov	r4, r3
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	891b      	ldrh	r3, [r3, #8]
 80127cc:	461d      	mov	r5, r3
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	899b      	ldrh	r3, [r3, #12]
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fb faf0 	bl	800ddbc <lwip_htons>
 80127dc:	4603      	mov	r3, r0
 80127de:	f003 0303 	and.w	r3, r3, #3
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d001      	beq.n	80127ea <tcp_receive+0xb62>
 80127e6:	2301      	movs	r3, #1
 80127e8:	e000      	b.n	80127ec <tcp_receive+0xb64>
 80127ea:	2300      	movs	r3, #0
 80127ec:	442b      	add	r3, r5
 80127ee:	429c      	cmp	r4, r3
 80127f0:	d206      	bcs.n	8012800 <tcp_receive+0xb78>
 80127f2:	4b1e      	ldr	r3, [pc, #120]	; (801286c <tcp_receive+0xbe4>)
 80127f4:	f240 52de 	movw	r2, #1502	; 0x5de
 80127f8:	4922      	ldr	r1, [pc, #136]	; (8012884 <tcp_receive+0xbfc>)
 80127fa:	481e      	ldr	r0, [pc, #120]	; (8012874 <tcp_receive+0xbec>)
 80127fc:	f006 ff72 	bl	80196e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	891b      	ldrh	r3, [r3, #8]
 8012804:	461c      	mov	r4, r3
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	899b      	ldrh	r3, [r3, #12]
 801280c:	b29b      	uxth	r3, r3
 801280e:	4618      	mov	r0, r3
 8012810:	f7fb fad4 	bl	800ddbc <lwip_htons>
 8012814:	4603      	mov	r3, r0
 8012816:	f003 0303 	and.w	r3, r3, #3
 801281a:	2b00      	cmp	r3, #0
 801281c:	d001      	beq.n	8012822 <tcp_receive+0xb9a>
 801281e:	2301      	movs	r3, #1
 8012820:	e000      	b.n	8012824 <tcp_receive+0xb9c>
 8012822:	2300      	movs	r3, #0
 8012824:	1919      	adds	r1, r3, r4
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801282a:	b28b      	uxth	r3, r1
 801282c:	1ad3      	subs	r3, r2, r3
 801282e:	b29a      	uxth	r2, r3
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7fd f97d 	bl	800fb34 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	891b      	ldrh	r3, [r3, #8]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d028      	beq.n	8012896 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012844:	4b0d      	ldr	r3, [pc, #52]	; (801287c <tcp_receive+0xbf4>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d01d      	beq.n	8012888 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 801284c:	4b0b      	ldr	r3, [pc, #44]	; (801287c <tcp_receive+0xbf4>)
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	685b      	ldr	r3, [r3, #4]
 8012854:	4619      	mov	r1, r3
 8012856:	4610      	mov	r0, r2
 8012858:	f7fc fd2c 	bl	800f2b4 <pbuf_cat>
 801285c:	e018      	b.n	8012890 <tcp_receive+0xc08>
 801285e:	bf00      	nop
 8012860:	20004232 	.word	0x20004232
 8012864:	20004228 	.word	0x20004228
 8012868:	20004208 	.word	0x20004208
 801286c:	0801b6e8 	.word	0x0801b6e8
 8012870:	0801b9ec 	.word	0x0801b9ec
 8012874:	0801b72c 	.word	0x0801b72c
 8012878:	0801ba28 	.word	0x0801ba28
 801287c:	20004238 	.word	0x20004238
 8012880:	20004235 	.word	0x20004235
 8012884:	0801ba48 	.word	0x0801ba48
            } else {
              recv_data = cseg->p;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	4a71      	ldr	r2, [pc, #452]	; (8012a54 <tcp_receive+0xdcc>)
 801288e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	2200      	movs	r2, #0
 8012894:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	899b      	ldrh	r3, [r3, #12]
 801289c:	b29b      	uxth	r3, r3
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fb fa8c 	bl	800ddbc <lwip_htons>
 80128a4:	4603      	mov	r3, r0
 80128a6:	f003 0301 	and.w	r3, r3, #1
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d00d      	beq.n	80128ca <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80128ae:	4b6a      	ldr	r3, [pc, #424]	; (8012a58 <tcp_receive+0xdd0>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	f043 0320 	orr.w	r3, r3, #32
 80128b6:	b2da      	uxtb	r2, r3
 80128b8:	4b67      	ldr	r3, [pc, #412]	; (8012a58 <tcp_receive+0xdd0>)
 80128ba:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	7d1b      	ldrb	r3, [r3, #20]
 80128c0:	2b04      	cmp	r3, #4
 80128c2:	d102      	bne.n	80128ca <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2207      	movs	r2, #7
 80128c8:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80128d2:	68f8      	ldr	r0, [r7, #12]
 80128d4:	f7fd fd77 	bl	80103c6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d008      	beq.n	80128f2 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	685a      	ldr	r2, [r3, #4]
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80128ec:	429a      	cmp	r2, r3
 80128ee:	f43f af47 	beq.w	8012780 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	7e9b      	ldrb	r3, [r3, #26]
 80128f6:	f003 0301 	and.w	r3, r3, #1
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d00e      	beq.n	801291c <tcp_receive+0xc94>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	7e9b      	ldrb	r3, [r3, #26]
 8012902:	f023 0301 	bic.w	r3, r3, #1
 8012906:	b2da      	uxtb	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	769a      	strb	r2, [r3, #26]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	7e9b      	ldrb	r3, [r3, #26]
 8012910:	f043 0302 	orr.w	r3, r3, #2
 8012914:	b2da      	uxtb	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801291a:	e181      	b.n	8012c20 <tcp_receive+0xf98>
        tcp_ack(pcb);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	7e9b      	ldrb	r3, [r3, #26]
 8012920:	f043 0301 	orr.w	r3, r3, #1
 8012924:	b2da      	uxtb	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801292a:	e179      	b.n	8012c20 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f000 fc93 	bl	8013258 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012936:	2b00      	cmp	r3, #0
 8012938:	d106      	bne.n	8012948 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801293a:	4848      	ldr	r0, [pc, #288]	; (8012a5c <tcp_receive+0xdd4>)
 801293c:	f7fd fd5b 	bl	80103f6 <tcp_seg_copy>
 8012940:	4602      	mov	r2, r0
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8012946:	e16b      	b.n	8012c20 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8012948:	2300      	movs	r3, #0
 801294a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012952:	e150      	b.n	8012bf6 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8012954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	685a      	ldr	r2, [r3, #4]
 801295a:	4b41      	ldr	r3, [pc, #260]	; (8012a60 <tcp_receive+0xdd8>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	429a      	cmp	r2, r3
 8012960:	d11d      	bne.n	801299e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012962:	4b3e      	ldr	r3, [pc, #248]	; (8012a5c <tcp_receive+0xdd4>)
 8012964:	891a      	ldrh	r2, [r3, #8]
 8012966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012968:	891b      	ldrh	r3, [r3, #8]
 801296a:	429a      	cmp	r2, r3
 801296c:	f240 8148 	bls.w	8012c00 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8012970:	483a      	ldr	r0, [pc, #232]	; (8012a5c <tcp_receive+0xdd4>)
 8012972:	f7fd fd40 	bl	80103f6 <tcp_seg_copy>
 8012976:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	f000 8142 	beq.w	8012c04 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8012980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012982:	2b00      	cmp	r3, #0
 8012984:	d003      	beq.n	801298e <tcp_receive+0xd06>
                    prev->next = cseg;
 8012986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	601a      	str	r2, [r3, #0]
 801298c:	e002      	b.n	8012994 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	68fa      	ldr	r2, [r7, #12]
 8012992:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	f7ff f900 	bl	8011b9c <tcp_oos_insert_segment>
                }
                break;
 801299c:	e132      	b.n	8012c04 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d117      	bne.n	80129d4 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80129a4:	4b2e      	ldr	r3, [pc, #184]	; (8012a60 <tcp_receive+0xdd8>)
 80129a6:	681a      	ldr	r2, [r3, #0]
 80129a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	685b      	ldr	r3, [r3, #4]
 80129ae:	1ad3      	subs	r3, r2, r3
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	da57      	bge.n	8012a64 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80129b4:	4829      	ldr	r0, [pc, #164]	; (8012a5c <tcp_receive+0xdd4>)
 80129b6:	f7fd fd1e 	bl	80103f6 <tcp_seg_copy>
 80129ba:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	f000 8122 	beq.w	8012c08 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	68fa      	ldr	r2, [r7, #12]
 80129c8:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80129ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129cc:	68f8      	ldr	r0, [r7, #12]
 80129ce:	f7ff f8e5 	bl	8011b9c <tcp_oos_insert_segment>
                  }
                  break;
 80129d2:	e119      	b.n	8012c08 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80129d4:	4b22      	ldr	r3, [pc, #136]	; (8012a60 <tcp_receive+0xdd8>)
 80129d6:	681a      	ldr	r2, [r3, #0]
 80129d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129da:	68db      	ldr	r3, [r3, #12]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	1ad3      	subs	r3, r2, r3
 80129e0:	3b01      	subs	r3, #1
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	db3e      	blt.n	8012a64 <tcp_receive+0xddc>
 80129e6:	4b1e      	ldr	r3, [pc, #120]	; (8012a60 <tcp_receive+0xdd8>)
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	685b      	ldr	r3, [r3, #4]
 80129f0:	1ad3      	subs	r3, r2, r3
 80129f2:	3301      	adds	r3, #1
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	dc35      	bgt.n	8012a64 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80129f8:	4818      	ldr	r0, [pc, #96]	; (8012a5c <tcp_receive+0xdd4>)
 80129fa:	f7fd fcfc 	bl	80103f6 <tcp_seg_copy>
 80129fe:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	f000 8102 	beq.w	8012c0c <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a10:	8912      	ldrh	r2, [r2, #8]
 8012a12:	441a      	add	r2, r3
 8012a14:	4b12      	ldr	r3, [pc, #72]	; (8012a60 <tcp_receive+0xdd8>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	1ad3      	subs	r3, r2, r3
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	dd12      	ble.n	8012a44 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012a1e:	4b10      	ldr	r3, [pc, #64]	; (8012a60 <tcp_receive+0xdd8>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	b29a      	uxth	r2, r3
 8012a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	1ad3      	subs	r3, r2, r3
 8012a2e:	b29a      	uxth	r2, r3
 8012a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a32:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a36:	685a      	ldr	r2, [r3, #4]
 8012a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3a:	891b      	ldrh	r3, [r3, #8]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4610      	mov	r0, r2
 8012a40:	f7fc f9ea 	bl	800ee18 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a46:	68fa      	ldr	r2, [r7, #12]
 8012a48:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a4c:	68f8      	ldr	r0, [r7, #12]
 8012a4e:	f7ff f8a5 	bl	8011b9c <tcp_oos_insert_segment>
                  }
                  break;
 8012a52:	e0db      	b.n	8012c0c <tcp_receive+0xf84>
 8012a54:	20004238 	.word	0x20004238
 8012a58:	20004235 	.word	0x20004235
 8012a5c:	20004208 	.word	0x20004208
 8012a60:	20004228 	.word	0x20004228
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f040 80bf 	bne.w	8012bec <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012a6e:	4b7c      	ldr	r3, [pc, #496]	; (8012c60 <tcp_receive+0xfd8>)
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	685b      	ldr	r3, [r3, #4]
 8012a78:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	f340 80b6 	ble.w	8012bec <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	899b      	ldrh	r3, [r3, #12]
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fb f997 	bl	800ddbc <lwip_htons>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	f003 0301 	and.w	r3, r3, #1
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f040 80bb 	bne.w	8012c10 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012a9a:	4872      	ldr	r0, [pc, #456]	; (8012c64 <tcp_receive+0xfdc>)
 8012a9c:	f7fd fcab 	bl	80103f6 <tcp_seg_copy>
 8012aa0:	4602      	mov	r2, r0
 8012aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa4:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f000 80b2 	beq.w	8012c14 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ab8:	8912      	ldrh	r2, [r2, #8]
 8012aba:	441a      	add	r2, r3
 8012abc:	4b68      	ldr	r3, [pc, #416]	; (8012c60 <tcp_receive+0xfd8>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	dd12      	ble.n	8012aec <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012ac6:	4b66      	ldr	r3, [pc, #408]	; (8012c60 <tcp_receive+0xfd8>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	b29a      	uxth	r2, r3
 8012acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ace:	68db      	ldr	r3, [r3, #12]
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	1ad3      	subs	r3, r2, r3
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ada:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ade:	685a      	ldr	r2, [r3, #4]
 8012ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae2:	891b      	ldrh	r3, [r3, #8]
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	4610      	mov	r0, r2
 8012ae8:	f7fc f996 	bl	800ee18 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012aec:	4b5e      	ldr	r3, [pc, #376]	; (8012c68 <tcp_receive+0xfe0>)
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	461a      	mov	r2, r3
 8012af2:	4b5b      	ldr	r3, [pc, #364]	; (8012c60 <tcp_receive+0xfd8>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	441a      	add	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012afc:	6879      	ldr	r1, [r7, #4]
 8012afe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b00:	440b      	add	r3, r1
 8012b02:	1ad3      	subs	r3, r2, r3
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f340 8085 	ble.w	8012c14 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	68db      	ldr	r3, [r3, #12]
 8012b10:	899b      	ldrh	r3, [r3, #12]
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fb f951 	bl	800ddbc <lwip_htons>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	f003 0301 	and.w	r3, r3, #1
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d01e      	beq.n	8012b62 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	68db      	ldr	r3, [r3, #12]
 8012b2a:	899b      	ldrh	r3, [r3, #12]
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b32:	b29c      	uxth	r4, r3
 8012b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	899b      	ldrh	r3, [r3, #12]
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fb f93c 	bl	800ddbc <lwip_htons>
 8012b44:	4603      	mov	r3, r0
 8012b46:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fb f935 	bl	800ddbc <lwip_htons>
 8012b52:	4603      	mov	r3, r0
 8012b54:	461a      	mov	r2, r3
 8012b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	68db      	ldr	r3, [r3, #12]
 8012b5c:	4322      	orrs	r2, r4
 8012b5e:	b292      	uxth	r2, r2
 8012b60:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b6c:	4413      	add	r3, r2
 8012b6e:	b299      	uxth	r1, r3
 8012b70:	4b3b      	ldr	r3, [pc, #236]	; (8012c60 <tcp_receive+0xfd8>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	b29a      	uxth	r2, r3
 8012b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	1a8a      	subs	r2, r1, r2
 8012b7c:	b292      	uxth	r2, r2
 8012b7e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	685a      	ldr	r2, [r3, #4]
 8012b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	891b      	ldrh	r3, [r3, #8]
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	4610      	mov	r0, r2
 8012b90:	f7fc f942 	bl	800ee18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	891c      	ldrh	r4, [r3, #8]
 8012b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	899b      	ldrh	r3, [r3, #12]
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fb f909 	bl	800ddbc <lwip_htons>
 8012baa:	4603      	mov	r3, r0
 8012bac:	f003 0303 	and.w	r3, r3, #3
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d001      	beq.n	8012bb8 <tcp_receive+0xf30>
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	e000      	b.n	8012bba <tcp_receive+0xf32>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	4423      	add	r3, r4
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	4b2a      	ldr	r3, [pc, #168]	; (8012c68 <tcp_receive+0xfe0>)
 8012bc0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012bc2:	4b29      	ldr	r3, [pc, #164]	; (8012c68 <tcp_receive+0xfe0>)
 8012bc4:	881b      	ldrh	r3, [r3, #0]
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	4b25      	ldr	r3, [pc, #148]	; (8012c60 <tcp_receive+0xfd8>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	441a      	add	r2, r3
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd2:	6879      	ldr	r1, [r7, #4]
 8012bd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012bd6:	440b      	add	r3, r1
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d01b      	beq.n	8012c14 <tcp_receive+0xf8c>
 8012bdc:	4b23      	ldr	r3, [pc, #140]	; (8012c6c <tcp_receive+0xfe4>)
 8012bde:	f240 627b 	movw	r2, #1659	; 0x67b
 8012be2:	4923      	ldr	r1, [pc, #140]	; (8012c70 <tcp_receive+0xfe8>)
 8012be4:	4823      	ldr	r0, [pc, #140]	; (8012c74 <tcp_receive+0xfec>)
 8012be6:	f006 fd7d 	bl	80196e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012bea:	e013      	b.n	8012c14 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	f47f aeab 	bne.w	8012954 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8012bfe:	e00f      	b.n	8012c20 <tcp_receive+0xf98>
                break;
 8012c00:	bf00      	nop
 8012c02:	e00d      	b.n	8012c20 <tcp_receive+0xf98>
                break;
 8012c04:	bf00      	nop
 8012c06:	e00b      	b.n	8012c20 <tcp_receive+0xf98>
                  break;
 8012c08:	bf00      	nop
 8012c0a:	e009      	b.n	8012c20 <tcp_receive+0xf98>
                  break;
 8012c0c:	bf00      	nop
 8012c0e:	e007      	b.n	8012c20 <tcp_receive+0xf98>
                  break;
 8012c10:	bf00      	nop
 8012c12:	e005      	b.n	8012c20 <tcp_receive+0xf98>
                break;
 8012c14:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8012c16:	e003      	b.n	8012c20 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f000 fb1d 	bl	8013258 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c1e:	e01a      	b.n	8012c56 <tcp_receive+0xfce>
 8012c20:	e019      	b.n	8012c56 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012c22:	4b0f      	ldr	r3, [pc, #60]	; (8012c60 <tcp_receive+0xfd8>)
 8012c24:	681a      	ldr	r2, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c2a:	1ad3      	subs	r3, r2, r3
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	db0a      	blt.n	8012c46 <tcp_receive+0xfbe>
 8012c30:	4b0b      	ldr	r3, [pc, #44]	; (8012c60 <tcp_receive+0xfd8>)
 8012c32:	681a      	ldr	r2, [r3, #0]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c38:	6879      	ldr	r1, [r7, #4]
 8012c3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c3c:	440b      	add	r3, r1
 8012c3e:	1ad3      	subs	r3, r2, r3
 8012c40:	3301      	adds	r3, #1
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	dd07      	ble.n	8012c56 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	7e9b      	ldrb	r3, [r3, #26]
 8012c4a:	f043 0302 	orr.w	r3, r3, #2
 8012c4e:	b2da      	uxtb	r2, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8012c54:	e7ff      	b.n	8012c56 <tcp_receive+0xfce>
 8012c56:	bf00      	nop
 8012c58:	3734      	adds	r7, #52	; 0x34
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	20004228 	.word	0x20004228
 8012c64:	20004208 	.word	0x20004208
 8012c68:	20004232 	.word	0x20004232
 8012c6c:	0801b6e8 	.word	0x0801b6e8
 8012c70:	0801b9b4 	.word	0x0801b9b4
 8012c74:	0801b72c 	.word	0x0801b72c

08012c78 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8012c78:	b480      	push	{r7}
 8012c7a:	b083      	sub	sp, #12
 8012c7c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8012c7e:	4b18      	ldr	r3, [pc, #96]	; (8012ce0 <tcp_getoptbyte+0x68>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d005      	beq.n	8012c92 <tcp_getoptbyte+0x1a>
 8012c86:	4b17      	ldr	r3, [pc, #92]	; (8012ce4 <tcp_getoptbyte+0x6c>)
 8012c88:	881a      	ldrh	r2, [r3, #0]
 8012c8a:	4b17      	ldr	r3, [pc, #92]	; (8012ce8 <tcp_getoptbyte+0x70>)
 8012c8c:	881b      	ldrh	r3, [r3, #0]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d20e      	bcs.n	8012cb0 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8012c92:	4b16      	ldr	r3, [pc, #88]	; (8012cec <tcp_getoptbyte+0x74>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	3314      	adds	r3, #20
 8012c98:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8012c9a:	4b12      	ldr	r3, [pc, #72]	; (8012ce4 <tcp_getoptbyte+0x6c>)
 8012c9c:	881b      	ldrh	r3, [r3, #0]
 8012c9e:	1c5a      	adds	r2, r3, #1
 8012ca0:	b291      	uxth	r1, r2
 8012ca2:	4a10      	ldr	r2, [pc, #64]	; (8012ce4 <tcp_getoptbyte+0x6c>)
 8012ca4:	8011      	strh	r1, [r2, #0]
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	4413      	add	r3, r2
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	e010      	b.n	8012cd2 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8012cb0:	4b0c      	ldr	r3, [pc, #48]	; (8012ce4 <tcp_getoptbyte+0x6c>)
 8012cb2:	881b      	ldrh	r3, [r3, #0]
 8012cb4:	1c5a      	adds	r2, r3, #1
 8012cb6:	b291      	uxth	r1, r2
 8012cb8:	4a0a      	ldr	r2, [pc, #40]	; (8012ce4 <tcp_getoptbyte+0x6c>)
 8012cba:	8011      	strh	r1, [r2, #0]
 8012cbc:	b2da      	uxtb	r2, r3
 8012cbe:	4b0a      	ldr	r3, [pc, #40]	; (8012ce8 <tcp_getoptbyte+0x70>)
 8012cc0:	881b      	ldrh	r3, [r3, #0]
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8012cc8:	4b05      	ldr	r3, [pc, #20]	; (8012ce0 <tcp_getoptbyte+0x68>)
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	79fb      	ldrb	r3, [r7, #7]
 8012cce:	4413      	add	r3, r2
 8012cd0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	370c      	adds	r7, #12
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop
 8012ce0:	20004220 	.word	0x20004220
 8012ce4:	20004224 	.word	0x20004224
 8012ce8:	2000421e 	.word	0x2000421e
 8012cec:	20004218 	.word	0x20004218

08012cf0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012cf8:	4b2d      	ldr	r3, [pc, #180]	; (8012db0 <tcp_parseopt+0xc0>)
 8012cfa:	881b      	ldrh	r3, [r3, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d053      	beq.n	8012da8 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d00:	4b2c      	ldr	r3, [pc, #176]	; (8012db4 <tcp_parseopt+0xc4>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	801a      	strh	r2, [r3, #0]
 8012d06:	e043      	b.n	8012d90 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8012d08:	f7ff ffb6 	bl	8012c78 <tcp_getoptbyte>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012d10:	7bfb      	ldrb	r3, [r7, #15]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d03c      	beq.n	8012d90 <tcp_parseopt+0xa0>
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	d002      	beq.n	8012d20 <tcp_parseopt+0x30>
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d03f      	beq.n	8012d9e <tcp_parseopt+0xae>
 8012d1e:	e026      	b.n	8012d6e <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012d20:	f7ff ffaa 	bl	8012c78 <tcp_getoptbyte>
 8012d24:	4603      	mov	r3, r0
 8012d26:	2b04      	cmp	r3, #4
 8012d28:	d13b      	bne.n	8012da2 <tcp_parseopt+0xb2>
 8012d2a:	4b22      	ldr	r3, [pc, #136]	; (8012db4 <tcp_parseopt+0xc4>)
 8012d2c:	881b      	ldrh	r3, [r3, #0]
 8012d2e:	3302      	adds	r3, #2
 8012d30:	4a1f      	ldr	r2, [pc, #124]	; (8012db0 <tcp_parseopt+0xc0>)
 8012d32:	8812      	ldrh	r2, [r2, #0]
 8012d34:	4293      	cmp	r3, r2
 8012d36:	dc34      	bgt.n	8012da2 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8012d38:	f7ff ff9e 	bl	8012c78 <tcp_getoptbyte>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	021b      	lsls	r3, r3, #8
 8012d42:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8012d44:	f7ff ff98 	bl	8012c78 <tcp_getoptbyte>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	89bb      	ldrh	r3, [r7, #12]
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012d52:	89bb      	ldrh	r3, [r7, #12]
 8012d54:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012d58:	d804      	bhi.n	8012d64 <tcp_parseopt+0x74>
 8012d5a:	89bb      	ldrh	r3, [r7, #12]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d001      	beq.n	8012d64 <tcp_parseopt+0x74>
 8012d60:	89ba      	ldrh	r2, [r7, #12]
 8012d62:	e001      	b.n	8012d68 <tcp_parseopt+0x78>
 8012d64:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8012d6c:	e010      	b.n	8012d90 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8012d6e:	f7ff ff83 	bl	8012c78 <tcp_getoptbyte>
 8012d72:	4603      	mov	r3, r0
 8012d74:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8012d76:	7afb      	ldrb	r3, [r7, #11]
 8012d78:	2b01      	cmp	r3, #1
 8012d7a:	d914      	bls.n	8012da6 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8012d7c:	7afb      	ldrb	r3, [r7, #11]
 8012d7e:	b29a      	uxth	r2, r3
 8012d80:	4b0c      	ldr	r3, [pc, #48]	; (8012db4 <tcp_parseopt+0xc4>)
 8012d82:	881b      	ldrh	r3, [r3, #0]
 8012d84:	4413      	add	r3, r2
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	3b02      	subs	r3, #2
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <tcp_parseopt+0xc4>)
 8012d8e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d90:	4b08      	ldr	r3, [pc, #32]	; (8012db4 <tcp_parseopt+0xc4>)
 8012d92:	881a      	ldrh	r2, [r3, #0]
 8012d94:	4b06      	ldr	r3, [pc, #24]	; (8012db0 <tcp_parseopt+0xc0>)
 8012d96:	881b      	ldrh	r3, [r3, #0]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d3b5      	bcc.n	8012d08 <tcp_parseopt+0x18>
 8012d9c:	e004      	b.n	8012da8 <tcp_parseopt+0xb8>
        return;
 8012d9e:	bf00      	nop
 8012da0:	e002      	b.n	8012da8 <tcp_parseopt+0xb8>
          return;
 8012da2:	bf00      	nop
 8012da4:	e000      	b.n	8012da8 <tcp_parseopt+0xb8>
          return;
 8012da6:	bf00      	nop
      }
    }
  }
}
 8012da8:	3710      	adds	r7, #16
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	2000421c 	.word	0x2000421c
 8012db4:	20004224 	.word	0x20004224

08012db8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012db8:	b480      	push	{r7}
 8012dba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012dbc:	4b05      	ldr	r3, [pc, #20]	; (8012dd4 <tcp_trigger_input_pcb_close+0x1c>)
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	f043 0310 	orr.w	r3, r3, #16
 8012dc4:	b2da      	uxtb	r2, r3
 8012dc6:	4b03      	ldr	r3, [pc, #12]	; (8012dd4 <tcp_trigger_input_pcb_close+0x1c>)
 8012dc8:	701a      	strb	r2, [r3, #0]
}
 8012dca:	bf00      	nop
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr
 8012dd4:	20004235 	.word	0x20004235

08012dd8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b086      	sub	sp, #24
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	607b      	str	r3, [r7, #4]
 8012de2:	460b      	mov	r3, r1
 8012de4:	817b      	strh	r3, [r7, #10]
 8012de6:	4613      	mov	r3, r2
 8012de8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012dea:	897a      	ldrh	r2, [r7, #10]
 8012dec:	893b      	ldrh	r3, [r7, #8]
 8012dee:	4413      	add	r3, r2
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	3314      	adds	r3, #20
 8012df4:	b29b      	uxth	r3, r3
 8012df6:	2200      	movs	r2, #0
 8012df8:	4619      	mov	r1, r3
 8012dfa:	2001      	movs	r0, #1
 8012dfc:	f7fb fe0e 	bl	800ea1c <pbuf_alloc>
 8012e00:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d057      	beq.n	8012eb8 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	895b      	ldrh	r3, [r3, #10]
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	897b      	ldrh	r3, [r7, #10]
 8012e10:	3314      	adds	r3, #20
 8012e12:	429a      	cmp	r2, r3
 8012e14:	da05      	bge.n	8012e22 <tcp_output_alloc_header+0x4a>
 8012e16:	4b2b      	ldr	r3, [pc, #172]	; (8012ec4 <tcp_output_alloc_header+0xec>)
 8012e18:	2273      	movs	r2, #115	; 0x73
 8012e1a:	492b      	ldr	r1, [pc, #172]	; (8012ec8 <tcp_output_alloc_header+0xf0>)
 8012e1c:	482b      	ldr	r0, [pc, #172]	; (8012ecc <tcp_output_alloc_header+0xf4>)
 8012e1e:	f006 fc61 	bl	80196e4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	8adb      	ldrh	r3, [r3, #22]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fa ffc5 	bl	800ddbc <lwip_htons>
 8012e32:	4603      	mov	r3, r0
 8012e34:	461a      	mov	r2, r3
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	8b1b      	ldrh	r3, [r3, #24]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7fa ffbc 	bl	800ddbc <lwip_htons>
 8012e44:	4603      	mov	r3, r0
 8012e46:	461a      	mov	r2, r3
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7fa ffbe 	bl	800ddd8 <lwip_htonl>
 8012e5c:	4602      	mov	r2, r0
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8012e62:	897b      	ldrh	r3, [r7, #10]
 8012e64:	089b      	lsrs	r3, r3, #2
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	3305      	adds	r3, #5
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	031b      	lsls	r3, r3, #12
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	f043 0310 	orr.w	r3, r3, #16
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fa ffa0 	bl	800ddbc <lwip_htons>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	461a      	mov	r2, r3
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7fa ff97 	bl	800ddbc <lwip_htons>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	461a      	mov	r2, r3
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	741a      	strb	r2, [r3, #16]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	749a      	strb	r2, [r3, #18]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eae:	68fa      	ldr	r2, [r7, #12]
 8012eb0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012eb2:	441a      	add	r2, r3
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012eb8:	697b      	ldr	r3, [r7, #20]
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3718      	adds	r7, #24
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	0801ba70 	.word	0x0801ba70
 8012ec8:	0801baa4 	.word	0x0801baa4
 8012ecc:	0801bad4 	.word	0x0801bad4

08012ed0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012ed0:	b590      	push	{r4, r7, lr}
 8012ed2:	b085      	sub	sp, #20
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d02d      	beq.n	8012f3c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ee4:	60fb      	str	r3, [r7, #12]
 8012ee6:	e002      	b.n	8012eee <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d1f8      	bne.n	8012ee8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	899b      	ldrh	r3, [r3, #12]
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7fa ff5c 	bl	800ddbc <lwip_htons>
 8012f04:	4603      	mov	r3, r0
 8012f06:	f003 0307 	and.w	r3, r3, #7
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d116      	bne.n	8012f3c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	899b      	ldrh	r3, [r3, #12]
 8012f14:	b29c      	uxth	r4, r3
 8012f16:	2001      	movs	r0, #1
 8012f18:	f7fa ff50 	bl	800ddbc <lwip_htons>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	461a      	mov	r2, r3
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	4322      	orrs	r2, r4
 8012f26:	b292      	uxth	r2, r2
 8012f28:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	7e9b      	ldrb	r3, [r3, #26]
 8012f2e:	f043 0320 	orr.w	r3, r3, #32
 8012f32:	b2da      	uxtb	r2, r3
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	e004      	b.n	8012f46 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012f3c:	2101      	movs	r1, #1
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f000 f88e 	bl	8013060 <tcp_enqueue_flags>
 8012f44:	4603      	mov	r3, r0
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	3714      	adds	r7, #20
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd90      	pop	{r4, r7, pc}
	...

08012f50 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8012f50:	b590      	push	{r4, r7, lr}
 8012f52:	b087      	sub	sp, #28
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	60f8      	str	r0, [r7, #12]
 8012f58:	60b9      	str	r1, [r7, #8]
 8012f5a:	603b      	str	r3, [r7, #0]
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012f60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	b2db      	uxtb	r3, r3
 8012f68:	f003 0304 	and.w	r3, r3, #4
 8012f6c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012f6e:	2003      	movs	r0, #3
 8012f70:	f7fb fb12 	bl	800e598 <memp_malloc>
 8012f74:	6138      	str	r0, [r7, #16]
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d104      	bne.n	8012f86 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012f7c:	68b8      	ldr	r0, [r7, #8]
 8012f7e:	f7fc f8bf 	bl	800f100 <pbuf_free>
    return NULL;
 8012f82:	2300      	movs	r3, #0
 8012f84:	e061      	b.n	801304a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012f8c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	2200      	movs	r2, #0
 8012f92:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	68ba      	ldr	r2, [r7, #8]
 8012f98:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	891a      	ldrh	r2, [r3, #8]
 8012f9e:	7dfb      	ldrb	r3, [r7, #23]
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d205      	bcs.n	8012fb2 <tcp_create_segment+0x62>
 8012fa6:	4b2b      	ldr	r3, [pc, #172]	; (8013054 <tcp_create_segment+0x104>)
 8012fa8:	22ba      	movs	r2, #186	; 0xba
 8012faa:	492b      	ldr	r1, [pc, #172]	; (8013058 <tcp_create_segment+0x108>)
 8012fac:	482b      	ldr	r0, [pc, #172]	; (801305c <tcp_create_segment+0x10c>)
 8012fae:	f006 fb99 	bl	80196e4 <iprintf>
  seg->len = p->tot_len - optlen;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	891a      	ldrh	r2, [r3, #8]
 8012fb6:	7dfb      	ldrb	r3, [r7, #23]
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	1ad3      	subs	r3, r2, r3
 8012fbc:	b29a      	uxth	r2, r3
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8012fc2:	2114      	movs	r1, #20
 8012fc4:	68b8      	ldr	r0, [r7, #8]
 8012fc6:	f7fc f877 	bl	800f0b8 <pbuf_header>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d004      	beq.n	8012fda <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012fd0:	6938      	ldr	r0, [r7, #16]
 8012fd2:	f7fd f9f8 	bl	80103c6 <tcp_seg_free>
    return NULL;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	e037      	b.n	801304a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	685a      	ldr	r2, [r3, #4]
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	8ada      	ldrh	r2, [r3, #22]
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	68dc      	ldr	r4, [r3, #12]
 8012fec:	4610      	mov	r0, r2
 8012fee:	f7fa fee5 	bl	800ddbc <lwip_htons>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	8b1a      	ldrh	r2, [r3, #24]
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	68dc      	ldr	r4, [r3, #12]
 8012ffe:	4610      	mov	r0, r2
 8013000:	f7fa fedc 	bl	800ddbc <lwip_htons>
 8013004:	4603      	mov	r3, r0
 8013006:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	68dc      	ldr	r4, [r3, #12]
 801300c:	6838      	ldr	r0, [r7, #0]
 801300e:	f7fa fee3 	bl	800ddd8 <lwip_htonl>
 8013012:	4603      	mov	r3, r0
 8013014:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8013016:	7dfb      	ldrb	r3, [r7, #23]
 8013018:	089b      	lsrs	r3, r3, #2
 801301a:	b2db      	uxtb	r3, r3
 801301c:	b29b      	uxth	r3, r3
 801301e:	3305      	adds	r3, #5
 8013020:	b29b      	uxth	r3, r3
 8013022:	031b      	lsls	r3, r3, #12
 8013024:	b29a      	uxth	r2, r3
 8013026:	79fb      	ldrb	r3, [r7, #7]
 8013028:	b29b      	uxth	r3, r3
 801302a:	4313      	orrs	r3, r2
 801302c:	b29a      	uxth	r2, r3
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	68dc      	ldr	r4, [r3, #12]
 8013032:	4610      	mov	r0, r2
 8013034:	f7fa fec2 	bl	800ddbc <lwip_htons>
 8013038:	4603      	mov	r3, r0
 801303a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	2200      	movs	r2, #0
 8013042:	749a      	strb	r2, [r3, #18]
 8013044:	2200      	movs	r2, #0
 8013046:	74da      	strb	r2, [r3, #19]
  return seg;
 8013048:	693b      	ldr	r3, [r7, #16]
}
 801304a:	4618      	mov	r0, r3
 801304c:	371c      	adds	r7, #28
 801304e:	46bd      	mov	sp, r7
 8013050:	bd90      	pop	{r4, r7, pc}
 8013052:	bf00      	nop
 8013054:	0801ba70 	.word	0x0801ba70
 8013058:	0801bafc 	.word	0x0801bafc
 801305c:	0801bad4 	.word	0x0801bad4

08013060 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b08a      	sub	sp, #40	; 0x28
 8013064:	af02      	add	r7, sp, #8
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	460b      	mov	r3, r1
 801306a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013070:	2300      	movs	r3, #0
 8013072:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013074:	78fb      	ldrb	r3, [r7, #3]
 8013076:	f003 0303 	and.w	r3, r3, #3
 801307a:	2b00      	cmp	r3, #0
 801307c:	d106      	bne.n	801308c <tcp_enqueue_flags+0x2c>
 801307e:	4b6f      	ldr	r3, [pc, #444]	; (801323c <tcp_enqueue_flags+0x1dc>)
 8013080:	f240 321b 	movw	r2, #795	; 0x31b
 8013084:	496e      	ldr	r1, [pc, #440]	; (8013240 <tcp_enqueue_flags+0x1e0>)
 8013086:	486f      	ldr	r0, [pc, #444]	; (8013244 <tcp_enqueue_flags+0x1e4>)
 8013088:	f006 fb2c 	bl	80196e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013092:	2b08      	cmp	r3, #8
 8013094:	d806      	bhi.n	80130a4 <tcp_enqueue_flags+0x44>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801309c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80130a0:	4293      	cmp	r3, r2
 80130a2:	d90e      	bls.n	80130c2 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80130a4:	78fb      	ldrb	r3, [r7, #3]
 80130a6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d109      	bne.n	80130c2 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	7e9b      	ldrb	r3, [r3, #26]
 80130b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80130b6:	b2da      	uxtb	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80130bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130c0:	e0b7      	b.n	8013232 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 80130c2:	78fb      	ldrb	r3, [r7, #3]
 80130c4:	f003 0302 	and.w	r3, r3, #2
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d001      	beq.n	80130d0 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80130cc:	2301      	movs	r3, #1
 80130ce:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80130d0:	7ffb      	ldrb	r3, [r7, #31]
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	f003 0304 	and.w	r3, r3, #4
 80130da:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80130dc:	7dfb      	ldrb	r3, [r7, #23]
 80130de:	b29b      	uxth	r3, r3
 80130e0:	2200      	movs	r2, #0
 80130e2:	4619      	mov	r1, r3
 80130e4:	2000      	movs	r0, #0
 80130e6:	f7fb fc99 	bl	800ea1c <pbuf_alloc>
 80130ea:	6138      	str	r0, [r7, #16]
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d109      	bne.n	8013106 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	7e9b      	ldrb	r3, [r3, #26]
 80130f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80130fa:	b2da      	uxtb	r2, r3
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013104:	e095      	b.n	8013232 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	895a      	ldrh	r2, [r3, #10]
 801310a:	7dfb      	ldrb	r3, [r7, #23]
 801310c:	b29b      	uxth	r3, r3
 801310e:	429a      	cmp	r2, r3
 8013110:	d206      	bcs.n	8013120 <tcp_enqueue_flags+0xc0>
 8013112:	4b4a      	ldr	r3, [pc, #296]	; (801323c <tcp_enqueue_flags+0x1dc>)
 8013114:	f240 3241 	movw	r2, #833	; 0x341
 8013118:	494b      	ldr	r1, [pc, #300]	; (8013248 <tcp_enqueue_flags+0x1e8>)
 801311a:	484a      	ldr	r0, [pc, #296]	; (8013244 <tcp_enqueue_flags+0x1e4>)
 801311c:	f006 fae2 	bl	80196e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013124:	78fa      	ldrb	r2, [r7, #3]
 8013126:	7ffb      	ldrb	r3, [r7, #31]
 8013128:	9300      	str	r3, [sp, #0]
 801312a:	460b      	mov	r3, r1
 801312c:	6939      	ldr	r1, [r7, #16]
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f7ff ff0e 	bl	8012f50 <tcp_create_segment>
 8013134:	60f8      	str	r0, [r7, #12]
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d109      	bne.n	8013150 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	7e9b      	ldrb	r3, [r3, #26]
 8013140:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013144:	b2da      	uxtb	r2, r3
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801314a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801314e:	e070      	b.n	8013232 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	f003 0303 	and.w	r3, r3, #3
 8013158:	2b00      	cmp	r3, #0
 801315a:	d006      	beq.n	801316a <tcp_enqueue_flags+0x10a>
 801315c:	4b37      	ldr	r3, [pc, #220]	; (801323c <tcp_enqueue_flags+0x1dc>)
 801315e:	f240 3249 	movw	r2, #841	; 0x349
 8013162:	493a      	ldr	r1, [pc, #232]	; (801324c <tcp_enqueue_flags+0x1ec>)
 8013164:	4837      	ldr	r0, [pc, #220]	; (8013244 <tcp_enqueue_flags+0x1e4>)
 8013166:	f006 fabd 	bl	80196e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	891b      	ldrh	r3, [r3, #8]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d006      	beq.n	8013180 <tcp_enqueue_flags+0x120>
 8013172:	4b32      	ldr	r3, [pc, #200]	; (801323c <tcp_enqueue_flags+0x1dc>)
 8013174:	f240 324a 	movw	r2, #842	; 0x34a
 8013178:	4935      	ldr	r1, [pc, #212]	; (8013250 <tcp_enqueue_flags+0x1f0>)
 801317a:	4832      	ldr	r0, [pc, #200]	; (8013244 <tcp_enqueue_flags+0x1e4>)
 801317c:	f006 fab2 	bl	80196e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013184:	2b00      	cmp	r3, #0
 8013186:	d103      	bne.n	8013190 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	68fa      	ldr	r2, [r7, #12]
 801318c:	669a      	str	r2, [r3, #104]	; 0x68
 801318e:	e00d      	b.n	80131ac <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013194:	61bb      	str	r3, [r7, #24]
 8013196:	e002      	b.n	801319e <tcp_enqueue_flags+0x13e>
 8013198:	69bb      	ldr	r3, [r7, #24]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	61bb      	str	r3, [r7, #24]
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d1f8      	bne.n	8013198 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	68fa      	ldr	r2, [r7, #12]
 80131aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2200      	movs	r2, #0
 80131b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80131b4:	78fb      	ldrb	r3, [r7, #3]
 80131b6:	f003 0302 	and.w	r3, r3, #2
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d104      	bne.n	80131c8 <tcp_enqueue_flags+0x168>
 80131be:	78fb      	ldrb	r3, [r7, #3]
 80131c0:	f003 0301 	and.w	r3, r3, #1
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d004      	beq.n	80131d2 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131cc:	1c5a      	adds	r2, r3, #1
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80131d2:	78fb      	ldrb	r3, [r7, #3]
 80131d4:	f003 0301 	and.w	r3, r3, #1
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d006      	beq.n	80131ea <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	7e9b      	ldrb	r3, [r3, #26]
 80131e0:	f043 0320 	orr.w	r3, r3, #32
 80131e4:	b2da      	uxtb	r2, r3
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7fc f820 	bl	800f234 <pbuf_clen>
 80131f4:	4603      	mov	r3, r0
 80131f6:	461a      	mov	r2, r3
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80131fe:	4413      	add	r3, r2
 8013200:	b29a      	uxth	r2, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801320e:	2b00      	cmp	r3, #0
 8013210:	d00e      	beq.n	8013230 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013216:	2b00      	cmp	r3, #0
 8013218:	d10a      	bne.n	8013230 <tcp_enqueue_flags+0x1d0>
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801321e:	2b00      	cmp	r3, #0
 8013220:	d106      	bne.n	8013230 <tcp_enqueue_flags+0x1d0>
 8013222:	4b06      	ldr	r3, [pc, #24]	; (801323c <tcp_enqueue_flags+0x1dc>)
 8013224:	f240 326d 	movw	r2, #877	; 0x36d
 8013228:	490a      	ldr	r1, [pc, #40]	; (8013254 <tcp_enqueue_flags+0x1f4>)
 801322a:	4806      	ldr	r0, [pc, #24]	; (8013244 <tcp_enqueue_flags+0x1e4>)
 801322c:	f006 fa5a 	bl	80196e4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	3720      	adds	r7, #32
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	0801ba70 	.word	0x0801ba70
 8013240:	0801bd74 	.word	0x0801bd74
 8013244:	0801bad4 	.word	0x0801bad4
 8013248:	0801bdcc 	.word	0x0801bdcc
 801324c:	0801be08 	.word	0x0801be08
 8013250:	0801be20 	.word	0x0801be20
 8013254:	0801be4c 	.word	0x0801be4c

08013258 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013258:	b590      	push	{r4, r7, lr}
 801325a:	b08b      	sub	sp, #44	; 0x2c
 801325c:	af04      	add	r7, sp, #16
 801325e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8013260:	2300      	movs	r3, #0
 8013262:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013264:	7dbb      	ldrb	r3, [r7, #22]
 8013266:	b29c      	uxth	r4, r3
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801326c:	4618      	mov	r0, r3
 801326e:	f7fa fdb3 	bl	800ddd8 <lwip_htonl>
 8013272:	4603      	mov	r3, r0
 8013274:	2200      	movs	r2, #0
 8013276:	4621      	mov	r1, r4
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7ff fdad 	bl	8012dd8 <tcp_output_alloc_header>
 801327e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d109      	bne.n	801329a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	7e9b      	ldrb	r3, [r3, #26]
 801328a:	f043 0303 	orr.w	r3, r3, #3
 801328e:	b2da      	uxtb	r2, r3
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013294:	f06f 0301 	mvn.w	r3, #1
 8013298:	e036      	b.n	8013308 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	3304      	adds	r3, #4
 801329e:	4618      	mov	r0, r3
 80132a0:	f004 f99a 	bl	80175d8 <ip4_route>
 80132a4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d102      	bne.n	80132b2 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80132ac:	23fc      	movs	r3, #252	; 0xfc
 80132ae:	75fb      	strb	r3, [r7, #23]
 80132b0:	e012      	b.n	80132d8 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80132b2:	6879      	ldr	r1, [r7, #4]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	1d18      	adds	r0, r3, #4
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	7a9c      	ldrb	r4, [r3, #10]
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7a5b      	ldrb	r3, [r3, #9]
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	9202      	str	r2, [sp, #8]
 80132c4:	2206      	movs	r2, #6
 80132c6:	9201      	str	r2, [sp, #4]
 80132c8:	9300      	str	r3, [sp, #0]
 80132ca:	4623      	mov	r3, r4
 80132cc:	4602      	mov	r2, r0
 80132ce:	6938      	ldr	r0, [r7, #16]
 80132d0:	f004 fb48 	bl	8017964 <ip4_output_if>
 80132d4:	4603      	mov	r3, r0
 80132d6:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80132d8:	6938      	ldr	r0, [r7, #16]
 80132da:	f7fb ff11 	bl	800f100 <pbuf_free>

  if (err != ERR_OK) {
 80132de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d007      	beq.n	80132f6 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	7e9b      	ldrb	r3, [r3, #26]
 80132ea:	f043 0303 	orr.w	r3, r3, #3
 80132ee:	b2da      	uxtb	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	769a      	strb	r2, [r3, #26]
 80132f4:	e006      	b.n	8013304 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	7e9b      	ldrb	r3, [r3, #26]
 80132fa:	f023 0303 	bic.w	r3, r3, #3
 80132fe:	b2da      	uxtb	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8013304:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013308:	4618      	mov	r0, r3
 801330a:	371c      	adds	r7, #28
 801330c:	46bd      	mov	sp, r7
 801330e:	bd90      	pop	{r4, r7, pc}

08013310 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013310:	b5b0      	push	{r4, r5, r7, lr}
 8013312:	b08a      	sub	sp, #40	; 0x28
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	7d1b      	ldrb	r3, [r3, #20]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d106      	bne.n	801332e <tcp_output+0x1e>
 8013320:	4b9b      	ldr	r3, [pc, #620]	; (8013590 <tcp_output+0x280>)
 8013322:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8013326:	499b      	ldr	r1, [pc, #620]	; (8013594 <tcp_output+0x284>)
 8013328:	489b      	ldr	r0, [pc, #620]	; (8013598 <tcp_output+0x288>)
 801332a:	f006 f9db 	bl	80196e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801332e:	4b9b      	ldr	r3, [pc, #620]	; (801359c <tcp_output+0x28c>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	429a      	cmp	r2, r3
 8013336:	d101      	bne.n	801333c <tcp_output+0x2c>
    return ERR_OK;
 8013338:	2300      	movs	r3, #0
 801333a:	e1cf      	b.n	80136dc <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013348:	429a      	cmp	r2, r3
 801334a:	d203      	bcs.n	8013354 <tcp_output+0x44>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013352:	e002      	b.n	801335a <tcp_output+0x4a>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801335a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013360:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	7e9b      	ldrb	r3, [r3, #26]
 8013366:	f003 0302 	and.w	r3, r3, #2
 801336a:	2b00      	cmp	r3, #0
 801336c:	d017      	beq.n	801339e <tcp_output+0x8e>
 801336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00f      	beq.n	8013394 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8013374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013376:	68db      	ldr	r3, [r3, #12]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	4618      	mov	r0, r3
 801337c:	f7fa fd2c 	bl	800ddd8 <lwip_htonl>
 8013380:	4602      	mov	r2, r0
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013386:	1ad3      	subs	r3, r2, r3
 8013388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801338a:	8912      	ldrh	r2, [r2, #8]
 801338c:	4413      	add	r3, r2
     (seg == NULL ||
 801338e:	69ba      	ldr	r2, [r7, #24]
 8013390:	429a      	cmp	r2, r3
 8013392:	d204      	bcs.n	801339e <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7ff ff5f 	bl	8013258 <tcp_send_empty_ack>
 801339a:	4603      	mov	r3, r0
 801339c:	e19e      	b.n	80136dc <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133a2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80133a4:	6a3b      	ldr	r3, [r7, #32]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d007      	beq.n	80133ba <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80133aa:	e002      	b.n	80133b2 <tcp_output+0xa2>
 80133ac:	6a3b      	ldr	r3, [r7, #32]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	623b      	str	r3, [r7, #32]
 80133b2:	6a3b      	ldr	r3, [r7, #32]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d1f8      	bne.n	80133ac <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	3304      	adds	r3, #4
 80133be:	4618      	mov	r0, r3
 80133c0:	f004 f90a 	bl	80175d8 <ip4_route>
 80133c4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d102      	bne.n	80133d2 <tcp_output+0xc2>
    return ERR_RTE;
 80133cc:	f06f 0303 	mvn.w	r3, #3
 80133d0:	e184      	b.n	80136dc <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d003      	beq.n	80133e0 <tcp_output+0xd0>
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d111      	bne.n	8013404 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d002      	beq.n	80133ec <tcp_output+0xdc>
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	3304      	adds	r3, #4
 80133ea:	e000      	b.n	80133ee <tcp_output+0xde>
 80133ec:	2300      	movs	r3, #0
 80133ee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d102      	bne.n	80133fc <tcp_output+0xec>
      return ERR_RTE;
 80133f6:	f06f 0303 	mvn.w	r3, #3
 80133fa:	e16f      	b.n	80136dc <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8013404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013406:	2b00      	cmp	r3, #0
 8013408:	f000 813e 	beq.w	8013688 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	685b      	ldr	r3, [r3, #4]
 8013412:	4618      	mov	r0, r3
 8013414:	f7fa fce0 	bl	800ddd8 <lwip_htonl>
 8013418:	4602      	mov	r2, r0
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013422:	8912      	ldrh	r2, [r2, #8]
 8013424:	4413      	add	r3, r2
  if (seg != NULL &&
 8013426:	69ba      	ldr	r2, [r7, #24]
 8013428:	429a      	cmp	r2, r3
 801342a:	f080 812d 	bcs.w	8013688 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	f000 8129 	beq.w	8013688 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801343c:	461a      	mov	r2, r3
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	4293      	cmp	r3, r2
 8013442:	f040 8121 	bne.w	8013688 <tcp_output+0x378>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801344a:	2b00      	cmp	r3, #0
 801344c:	f040 811c 	bne.w	8013688 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013456:	2b00      	cmp	r3, #0
 8013458:	f040 812b 	bne.w	80136b2 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2200      	movs	r2, #0
 8013460:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2201      	movs	r2, #1
 8013468:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 801346c:	e121      	b.n	80136b2 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013470:	68db      	ldr	r3, [r3, #12]
 8013472:	899b      	ldrh	r3, [r3, #12]
 8013474:	b29b      	uxth	r3, r3
 8013476:	4618      	mov	r0, r3
 8013478:	f7fa fca0 	bl	800ddbc <lwip_htons>
 801347c:	4603      	mov	r3, r0
 801347e:	f003 0304 	and.w	r3, r3, #4
 8013482:	2b00      	cmp	r3, #0
 8013484:	d006      	beq.n	8013494 <tcp_output+0x184>
 8013486:	4b42      	ldr	r3, [pc, #264]	; (8013590 <tcp_output+0x280>)
 8013488:	f240 4246 	movw	r2, #1094	; 0x446
 801348c:	4944      	ldr	r1, [pc, #272]	; (80135a0 <tcp_output+0x290>)
 801348e:	4842      	ldr	r0, [pc, #264]	; (8013598 <tcp_output+0x288>)
 8013490:	f006 f928 	bl	80196e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013498:	2b00      	cmp	r3, #0
 801349a:	d01f      	beq.n	80134dc <tcp_output+0x1cc>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	7e9b      	ldrb	r3, [r3, #26]
 80134a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d119      	bne.n	80134dc <tcp_output+0x1cc>
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00b      	beq.n	80134c8 <tcp_output+0x1b8>
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d110      	bne.n	80134dc <tcp_output+0x1cc>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134be:	891a      	ldrh	r2, [r3, #8]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d209      	bcs.n	80134dc <tcp_output+0x1cc>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d004      	beq.n	80134dc <tcp_output+0x1cc>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80134d8:	2b08      	cmp	r3, #8
 80134da:	d901      	bls.n	80134e0 <tcp_output+0x1d0>
 80134dc:	2301      	movs	r3, #1
 80134de:	e000      	b.n	80134e2 <tcp_output+0x1d2>
 80134e0:	2300      	movs	r3, #0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d106      	bne.n	80134f4 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	7e9b      	ldrb	r3, [r3, #26]
 80134ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f000 80e1 	beq.w	80136b6 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	7d1b      	ldrb	r3, [r3, #20]
 80134f8:	2b02      	cmp	r3, #2
 80134fa:	d00d      	beq.n	8013518 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80134fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	899b      	ldrh	r3, [r3, #12]
 8013502:	b29c      	uxth	r4, r3
 8013504:	2010      	movs	r0, #16
 8013506:	f7fa fc59 	bl	800ddbc <lwip_htons>
 801350a:	4603      	mov	r3, r0
 801350c:	461a      	mov	r2, r3
 801350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013510:	68db      	ldr	r3, [r3, #12]
 8013512:	4322      	orrs	r2, r4
 8013514:	b292      	uxth	r2, r2
 8013516:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8013518:	697a      	ldr	r2, [r7, #20]
 801351a:	6879      	ldr	r1, [r7, #4]
 801351c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801351e:	f000 f8e1 	bl	80136e4 <tcp_output_segment>
 8013522:	4603      	mov	r3, r0
 8013524:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d009      	beq.n	8013542 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	7e9b      	ldrb	r3, [r3, #26]
 8013532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013536:	b2da      	uxtb	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	769a      	strb	r2, [r3, #26]
      return err;
 801353c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013540:	e0cc      	b.n	80136dc <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8013542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	7d1b      	ldrb	r3, [r3, #20]
 801354e:	2b02      	cmp	r3, #2
 8013550:	d006      	beq.n	8013560 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	7e9b      	ldrb	r3, [r3, #26]
 8013556:	f023 0303 	bic.w	r3, r3, #3
 801355a:	b2da      	uxtb	r2, r3
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013562:	68db      	ldr	r3, [r3, #12]
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	4618      	mov	r0, r3
 8013568:	f7fa fc36 	bl	800ddd8 <lwip_htonl>
 801356c:	4604      	mov	r4, r0
 801356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013570:	891b      	ldrh	r3, [r3, #8]
 8013572:	461d      	mov	r5, r3
 8013574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	899b      	ldrh	r3, [r3, #12]
 801357a:	b29b      	uxth	r3, r3
 801357c:	4618      	mov	r0, r3
 801357e:	f7fa fc1d 	bl	800ddbc <lwip_htons>
 8013582:	4603      	mov	r3, r0
 8013584:	f003 0303 	and.w	r3, r3, #3
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00b      	beq.n	80135a4 <tcp_output+0x294>
 801358c:	2301      	movs	r3, #1
 801358e:	e00a      	b.n	80135a6 <tcp_output+0x296>
 8013590:	0801ba70 	.word	0x0801ba70
 8013594:	0801be74 	.word	0x0801be74
 8013598:	0801bad4 	.word	0x0801bad4
 801359c:	2000ab44 	.word	0x2000ab44
 80135a0:	0801be9c 	.word	0x0801be9c
 80135a4:	2300      	movs	r3, #0
 80135a6:	442b      	add	r3, r5
 80135a8:	4423      	add	r3, r4
 80135aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	1ad3      	subs	r3, r2, r3
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	da02      	bge.n	80135be <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	68ba      	ldr	r2, [r7, #8]
 80135bc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80135be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c0:	891b      	ldrh	r3, [r3, #8]
 80135c2:	461c      	mov	r4, r3
 80135c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	899b      	ldrh	r3, [r3, #12]
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7fa fbf5 	bl	800ddbc <lwip_htons>
 80135d2:	4603      	mov	r3, r0
 80135d4:	f003 0303 	and.w	r3, r3, #3
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d001      	beq.n	80135e0 <tcp_output+0x2d0>
 80135dc:	2301      	movs	r3, #1
 80135de:	e000      	b.n	80135e2 <tcp_output+0x2d2>
 80135e0:	2300      	movs	r3, #0
 80135e2:	4423      	add	r3, r4
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d049      	beq.n	801367c <tcp_output+0x36c>
      seg->next = NULL;
 80135e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d105      	bne.n	8013602 <tcp_output+0x2f2>
        pcb->unacked = seg;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135fa:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80135fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fe:	623b      	str	r3, [r7, #32]
 8013600:	e03f      	b.n	8013682 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	4618      	mov	r0, r3
 801360a:	f7fa fbe5 	bl	800ddd8 <lwip_htonl>
 801360e:	4604      	mov	r4, r0
 8013610:	6a3b      	ldr	r3, [r7, #32]
 8013612:	68db      	ldr	r3, [r3, #12]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	4618      	mov	r0, r3
 8013618:	f7fa fbde 	bl	800ddd8 <lwip_htonl>
 801361c:	4603      	mov	r3, r0
 801361e:	1ae3      	subs	r3, r4, r3
 8013620:	2b00      	cmp	r3, #0
 8013622:	da24      	bge.n	801366e <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	336c      	adds	r3, #108	; 0x6c
 8013628:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801362a:	e002      	b.n	8013632 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 801362c:	69fb      	ldr	r3, [r7, #28]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013632:	69fb      	ldr	r3, [r7, #28]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d011      	beq.n	801365e <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801363a:	69fb      	ldr	r3, [r7, #28]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	68db      	ldr	r3, [r3, #12]
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	4618      	mov	r0, r3
 8013644:	f7fa fbc8 	bl	800ddd8 <lwip_htonl>
 8013648:	4604      	mov	r4, r0
 801364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	4618      	mov	r0, r3
 8013652:	f7fa fbc1 	bl	800ddd8 <lwip_htonl>
 8013656:	4603      	mov	r3, r0
 8013658:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801365a:	2b00      	cmp	r3, #0
 801365c:	dbe6      	blt.n	801362c <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013664:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801366a:	601a      	str	r2, [r3, #0]
 801366c:	e009      	b.n	8013682 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801366e:	6a3b      	ldr	r3, [r7, #32]
 8013670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013672:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013674:	6a3b      	ldr	r3, [r7, #32]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	623b      	str	r3, [r7, #32]
 801367a:	e002      	b.n	8013682 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801367c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801367e:	f7fc fea2 	bl	80103c6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013686:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368a:	2b00      	cmp	r3, #0
 801368c:	d015      	beq.n	80136ba <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013690:	68db      	ldr	r3, [r3, #12]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	4618      	mov	r0, r3
 8013696:	f7fa fb9f 	bl	800ddd8 <lwip_htonl>
 801369a:	4602      	mov	r2, r0
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136a0:	1ad3      	subs	r3, r2, r3
 80136a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136a4:	8912      	ldrh	r2, [r2, #8]
 80136a6:	4413      	add	r3, r2
  while (seg != NULL &&
 80136a8:	69ba      	ldr	r2, [r7, #24]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	f4bf aedf 	bcs.w	801346e <tcp_output+0x15e>
  }
output_done:
 80136b0:	e003      	b.n	80136ba <tcp_output+0x3aa>
    goto output_done;
 80136b2:	bf00      	nop
 80136b4:	e002      	b.n	80136bc <tcp_output+0x3ac>
      break;
 80136b6:	bf00      	nop
 80136b8:	e000      	b.n	80136bc <tcp_output+0x3ac>
output_done:
 80136ba:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d103      	bne.n	80136cc <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2200      	movs	r2, #0
 80136c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	7e9b      	ldrb	r3, [r3, #26]
 80136d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136d4:	b2da      	uxtb	r2, r3
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80136da:	2300      	movs	r3, #0
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3728      	adds	r7, #40	; 0x28
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bdb0      	pop	{r4, r5, r7, pc}

080136e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80136e4:	b5b0      	push	{r4, r5, r7, lr}
 80136e6:	b08c      	sub	sp, #48	; 0x30
 80136e8:	af04      	add	r7, sp, #16
 80136ea:	60f8      	str	r0, [r7, #12]
 80136ec:	60b9      	str	r1, [r7, #8]
 80136ee:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	685b      	ldr	r3, [r3, #4]
 80136f4:	89db      	ldrh	r3, [r3, #14]
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	d001      	beq.n	80136fe <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80136fa:	2300      	movs	r3, #0
 80136fc:	e08b      	b.n	8013816 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	68dc      	ldr	r4, [r3, #12]
 8013706:	4610      	mov	r0, r2
 8013708:	f7fa fb66 	bl	800ddd8 <lwip_htonl>
 801370c:	4603      	mov	r3, r0
 801370e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	68dc      	ldr	r4, [r3, #12]
 8013718:	4610      	mov	r0, r2
 801371a:	f7fa fb4f 	bl	800ddbc <lwip_htons>
 801371e:	4603      	mov	r3, r0
 8013720:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801372a:	441a      	add	r2, r3
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	3314      	adds	r3, #20
 8013736:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	7a9b      	ldrb	r3, [r3, #10]
 801373c:	f003 0301 	and.w	r3, r3, #1
 8013740:	2b00      	cmp	r3, #0
 8013742:	d014      	beq.n	801376e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	3304      	adds	r3, #4
 8013748:	4619      	mov	r1, r3
 801374a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801374e:	f7fd f8a5 	bl	801089c <tcp_eff_send_mss_impl>
 8013752:	4603      	mov	r3, r0
 8013754:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013756:	8b7b      	ldrh	r3, [r7, #26]
 8013758:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801375c:	4618      	mov	r0, r3
 801375e:	f7fa fb3b 	bl	800ddd8 <lwip_htonl>
 8013762:	4602      	mov	r2, r0
 8013764:	69fb      	ldr	r3, [r7, #28]
 8013766:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	3304      	adds	r3, #4
 801376c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013774:	2b00      	cmp	r3, #0
 8013776:	da02      	bge.n	801377e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	2200      	movs	r2, #0
 801377c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013782:	2b00      	cmp	r3, #0
 8013784:	d10c      	bne.n	80137a0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8013786:	4b26      	ldr	r3, [pc, #152]	; (8013820 <tcp_output_segment+0x13c>)
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	4618      	mov	r0, r3
 8013796:	f7fa fb1f 	bl	800ddd8 <lwip_htonl>
 801379a:	4602      	mov	r2, r0
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	68db      	ldr	r3, [r3, #12]
 80137a4:	461a      	mov	r2, r3
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	8959      	ldrh	r1, [r3, #10]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	8b3a      	ldrh	r2, [r7, #24]
 80137bc:	1a8a      	subs	r2, r1, r2
 80137be:	b292      	uxth	r2, r2
 80137c0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	8919      	ldrh	r1, [r3, #8]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	8b3a      	ldrh	r2, [r7, #24]
 80137ce:	1a8a      	subs	r2, r1, r2
 80137d0:	b292      	uxth	r2, r2
 80137d2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	68fa      	ldr	r2, [r7, #12]
 80137da:	68d2      	ldr	r2, [r2, #12]
 80137dc:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	68db      	ldr	r3, [r3, #12]
 80137e2:	2200      	movs	r2, #0
 80137e4:	741a      	strb	r2, [r3, #16]
 80137e6:	2200      	movs	r2, #0
 80137e8:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	6858      	ldr	r0, [r3, #4]
 80137ee:	68b9      	ldr	r1, [r7, #8]
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	1d1c      	adds	r4, r3, #4
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	7a9d      	ldrb	r5, [r3, #10]
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	7a5b      	ldrb	r3, [r3, #9]
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	9202      	str	r2, [sp, #8]
 8013800:	2206      	movs	r2, #6
 8013802:	9201      	str	r2, [sp, #4]
 8013804:	9300      	str	r3, [sp, #0]
 8013806:	462b      	mov	r3, r5
 8013808:	4622      	mov	r2, r4
 801380a:	f004 f8ab 	bl	8017964 <ip4_output_if>
 801380e:	4603      	mov	r3, r0
 8013810:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8013812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013816:	4618      	mov	r0, r3
 8013818:	3720      	adds	r7, #32
 801381a:	46bd      	mov	sp, r7
 801381c:	bdb0      	pop	{r4, r5, r7, pc}
 801381e:	bf00      	nop
 8013820:	2000ab34 	.word	0x2000ab34

08013824 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b08c      	sub	sp, #48	; 0x30
 8013828:	af04      	add	r7, sp, #16
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	60b9      	str	r1, [r7, #8]
 801382e:	607a      	str	r2, [r7, #4]
 8013830:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8013832:	2200      	movs	r2, #0
 8013834:	2114      	movs	r1, #20
 8013836:	2001      	movs	r0, #1
 8013838:	f7fb f8f0 	bl	800ea1c <pbuf_alloc>
 801383c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d05b      	beq.n	80138fc <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	895b      	ldrh	r3, [r3, #10]
 8013848:	2b13      	cmp	r3, #19
 801384a:	d806      	bhi.n	801385a <tcp_rst+0x36>
 801384c:	4b2d      	ldr	r3, [pc, #180]	; (8013904 <tcp_rst+0xe0>)
 801384e:	f240 524d 	movw	r2, #1357	; 0x54d
 8013852:	492d      	ldr	r1, [pc, #180]	; (8013908 <tcp_rst+0xe4>)
 8013854:	482d      	ldr	r0, [pc, #180]	; (801390c <tcp_rst+0xe8>)
 8013856:	f005 ff45 	bl	80196e4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8013860:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013862:	4618      	mov	r0, r3
 8013864:	f7fa faaa 	bl	800ddbc <lwip_htons>
 8013868:	4603      	mov	r3, r0
 801386a:	461a      	mov	r2, r3
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8013870:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013872:	4618      	mov	r0, r3
 8013874:	f7fa faa2 	bl	800ddbc <lwip_htons>
 8013878:	4603      	mov	r3, r0
 801387a:	461a      	mov	r2, r3
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8013880:	68f8      	ldr	r0, [r7, #12]
 8013882:	f7fa faa9 	bl	800ddd8 <lwip_htonl>
 8013886:	4602      	mov	r2, r0
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801388c:	68b8      	ldr	r0, [r7, #8]
 801388e:	f7fa faa3 	bl	800ddd8 <lwip_htonl>
 8013892:	4602      	mov	r2, r0
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8013898:	f245 0014 	movw	r0, #20500	; 0x5014
 801389c:	f7fa fa8e 	bl	800ddbc <lwip_htons>
 80138a0:	4603      	mov	r3, r0
 80138a2:	461a      	mov	r2, r3
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	2200      	movs	r2, #0
 80138ac:	f042 0208 	orr.w	r2, r2, #8
 80138b0:	739a      	strb	r2, [r3, #14]
 80138b2:	2200      	movs	r2, #0
 80138b4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80138b8:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80138ba:	69bb      	ldr	r3, [r7, #24]
 80138bc:	2200      	movs	r2, #0
 80138be:	741a      	strb	r2, [r3, #16]
 80138c0:	2200      	movs	r2, #0
 80138c2:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80138c4:	69bb      	ldr	r3, [r7, #24]
 80138c6:	2200      	movs	r2, #0
 80138c8:	749a      	strb	r2, [r3, #18]
 80138ca:	2200      	movs	r2, #0
 80138cc:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80138ce:	6838      	ldr	r0, [r7, #0]
 80138d0:	f003 fe82 	bl	80175d8 <ip4_route>
 80138d4:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d00b      	beq.n	80138f4 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	9302      	str	r3, [sp, #8]
 80138e0:	2306      	movs	r3, #6
 80138e2:	9301      	str	r3, [sp, #4]
 80138e4:	2300      	movs	r3, #0
 80138e6:	9300      	str	r3, [sp, #0]
 80138e8:	23ff      	movs	r3, #255	; 0xff
 80138ea:	683a      	ldr	r2, [r7, #0]
 80138ec:	6879      	ldr	r1, [r7, #4]
 80138ee:	69f8      	ldr	r0, [r7, #28]
 80138f0:	f004 f838 	bl	8017964 <ip4_output_if>
  }
  pbuf_free(p);
 80138f4:	69f8      	ldr	r0, [r7, #28]
 80138f6:	f7fb fc03 	bl	800f100 <pbuf_free>
 80138fa:	e000      	b.n	80138fe <tcp_rst+0xda>
    return;
 80138fc:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80138fe:	3720      	adds	r7, #32
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	0801ba70 	.word	0x0801ba70
 8013908:	0801baa4 	.word	0x0801baa4
 801390c:	0801bad4 	.word	0x0801bad4

08013910 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801391c:	2b00      	cmp	r3, #0
 801391e:	d029      	beq.n	8013974 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013924:	60fb      	str	r3, [r7, #12]
 8013926:	e002      	b.n	801392e <tcp_rexmit_rto+0x1e>
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	60fb      	str	r3, [r7, #12]
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d1f8      	bne.n	8013928 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2200      	movs	r2, #0
 801394a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013952:	2bff      	cmp	r3, #255	; 0xff
 8013954:	d007      	beq.n	8013966 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801395c:	3301      	adds	r3, #1
 801395e:	b2da      	uxtb	r2, r3
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	f7ff fccf 	bl	8013310 <tcp_output>
 8013972:	e000      	b.n	8013976 <tcp_rexmit_rto+0x66>
    return;
 8013974:	bf00      	nop
}
 8013976:	3710      	adds	r7, #16
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801397c:	b590      	push	{r4, r7, lr}
 801397e:	b085      	sub	sp, #20
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013988:	2b00      	cmp	r3, #0
 801398a:	d043      	beq.n	8013a14 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013990:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	3368      	adds	r3, #104	; 0x68
 801399e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80139a0:	e002      	b.n	80139a8 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d011      	beq.n	80139d4 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	68db      	ldr	r3, [r3, #12]
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7fa fa0d 	bl	800ddd8 <lwip_htonl>
 80139be:	4604      	mov	r4, r0
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fa fa06 	bl	800ddd8 <lwip_htonl>
 80139cc:	4603      	mov	r3, r0
 80139ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	dbe6      	blt.n	80139a2 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681a      	ldr	r2, [r3, #0]
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d103      	bne.n	80139f2 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2200      	movs	r2, #0
 80139ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80139f8:	2bff      	cmp	r3, #255	; 0xff
 80139fa:	d007      	beq.n	8013a0c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a02:	3301      	adds	r3, #1
 8013a04:	b2da      	uxtb	r2, r3
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	635a      	str	r2, [r3, #52]	; 0x34
 8013a12:	e000      	b.n	8013a16 <tcp_rexmit+0x9a>
    return;
 8013a14:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8013a16:	3714      	adds	r7, #20
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd90      	pop	{r4, r7, pc}

08013a1c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d04a      	beq.n	8013ac2 <tcp_rexmit_fast+0xa6>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	7e9b      	ldrb	r3, [r3, #26]
 8013a30:	f003 0304 	and.w	r3, r3, #4
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d144      	bne.n	8013ac2 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f7ff ff9f 	bl	801397c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d207      	bcs.n	8013a5e <tcp_rexmit_fast+0x42>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a54:	0fda      	lsrs	r2, r3, #31
 8013a56:	4413      	add	r3, r2
 8013a58:	105b      	asrs	r3, r3, #1
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	e006      	b.n	8013a6c <tcp_rexmit_fast+0x50>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013a64:	0fda      	lsrs	r2, r3, #31
 8013a66:	4413      	add	r3, r2
 8013a68:	105b      	asrs	r3, r3, #1
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	687a      	ldr	r2, [r7, #4]
 8013a6e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013a78:	461a      	mov	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a7e:	005b      	lsls	r3, r3, #1
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d206      	bcs.n	8013a92 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a88:	005b      	lsls	r3, r3, #1
 8013a8a:	b29a      	uxth	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a9c:	4619      	mov	r1, r3
 8013a9e:	0049      	lsls	r1, r1, #1
 8013aa0:	440b      	add	r3, r1
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	4413      	add	r3, r2
 8013aa6:	b29a      	uxth	r2, r3
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	7e9b      	ldrb	r3, [r3, #26]
 8013ab2:	f043 0304 	orr.w	r3, r3, #4
 8013ab6:	b2da      	uxtb	r2, r3
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8013ac2:	bf00      	nop
 8013ac4:	3708      	adds	r7, #8
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b08a      	sub	sp, #40	; 0x28
 8013ace:	af04      	add	r7, sp, #16
 8013ad0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ad6:	3b01      	subs	r3, #1
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7fa f97d 	bl	800ddd8 <lwip_htonl>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	2100      	movs	r1, #0
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7ff f977 	bl	8012dd8 <tcp_output_alloc_header>
 8013aea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d102      	bne.n	8013af8 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013af6:	e021      	b.n	8013b3c <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	3304      	adds	r3, #4
 8013afc:	4618      	mov	r0, r3
 8013afe:	f003 fd6b 	bl	80175d8 <ip4_route>
 8013b02:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d102      	bne.n	8013b10 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8013b0a:	23fc      	movs	r3, #252	; 0xfc
 8013b0c:	75fb      	strb	r3, [r7, #23]
 8013b0e:	e010      	b.n	8013b32 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8013b10:	6879      	ldr	r1, [r7, #4]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	1d1a      	adds	r2, r3, #4
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	7a98      	ldrb	r0, [r3, #10]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	9302      	str	r3, [sp, #8]
 8013b1e:	2306      	movs	r3, #6
 8013b20:	9301      	str	r3, [sp, #4]
 8013b22:	2300      	movs	r3, #0
 8013b24:	9300      	str	r3, [sp, #0]
 8013b26:	4603      	mov	r3, r0
 8013b28:	6938      	ldr	r0, [r7, #16]
 8013b2a:	f003 ff1b 	bl	8017964 <ip4_output_if>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8013b32:	6938      	ldr	r0, [r7, #16]
 8013b34:	f7fb fae4 	bl	800f100 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3718      	adds	r7, #24
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013b44:	b590      	push	{r4, r7, lr}
 8013b46:	b08f      	sub	sp, #60	; 0x3c
 8013b48:	af04      	add	r7, sp, #16
 8013b4a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b50:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8013b52:	6a3b      	ldr	r3, [r7, #32]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d102      	bne.n	8013b5e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b5c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8013b5e:	6a3b      	ldr	r3, [r7, #32]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d101      	bne.n	8013b68 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8013b64:	2300      	movs	r3, #0
 8013b66:	e085      	b.n	8013c74 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013b68:	6a3b      	ldr	r3, [r7, #32]
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	899b      	ldrh	r3, [r3, #12]
 8013b6e:	b29b      	uxth	r3, r3
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7fa f923 	bl	800ddbc <lwip_htons>
 8013b76:	4603      	mov	r3, r0
 8013b78:	f003 0301 	and.w	r3, r3, #1
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d005      	beq.n	8013b8c <tcp_zero_window_probe+0x48>
 8013b80:	6a3b      	ldr	r3, [r7, #32]
 8013b82:	891b      	ldrh	r3, [r3, #8]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d101      	bne.n	8013b8c <tcp_zero_window_probe+0x48>
 8013b88:	2301      	movs	r3, #1
 8013b8a:	e000      	b.n	8013b8e <tcp_zero_window_probe+0x4a>
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013b90:	7ffb      	ldrb	r3, [r7, #31]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	bf0c      	ite	eq
 8013b96:	2301      	moveq	r3, #1
 8013b98:	2300      	movne	r3, #0
 8013b9a:	b2db      	uxtb	r3, r3
 8013b9c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8013b9e:	6a3b      	ldr	r3, [r7, #32]
 8013ba0:	68db      	ldr	r3, [r3, #12]
 8013ba2:	685b      	ldr	r3, [r3, #4]
 8013ba4:	8bba      	ldrh	r2, [r7, #28]
 8013ba6:	2100      	movs	r1, #0
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f7ff f915 	bl	8012dd8 <tcp_output_alloc_header>
 8013bae:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013bb0:	69bb      	ldr	r3, [r7, #24]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d102      	bne.n	8013bbc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bba:	e05b      	b.n	8013c74 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013bc2:	7ffb      	ldrb	r3, [r7, #31]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d00e      	beq.n	8013be6 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013bc8:	697b      	ldr	r3, [r7, #20]
 8013bca:	899b      	ldrh	r3, [r3, #12]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013bd2:	b29c      	uxth	r4, r3
 8013bd4:	2011      	movs	r0, #17
 8013bd6:	f7fa f8f1 	bl	800ddbc <lwip_htons>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	4323      	orrs	r3, r4
 8013bde:	b29a      	uxth	r2, r3
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	819a      	strh	r2, [r3, #12]
 8013be4:	e010      	b.n	8013c08 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	3314      	adds	r3, #20
 8013bec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013bee:	6a3b      	ldr	r3, [r7, #32]
 8013bf0:	6858      	ldr	r0, [r3, #4]
 8013bf2:	6a3b      	ldr	r3, [r7, #32]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	891a      	ldrh	r2, [r3, #8]
 8013bf8:	6a3b      	ldr	r3, [r7, #32]
 8013bfa:	891b      	ldrh	r3, [r3, #8]
 8013bfc:	1ad3      	subs	r3, r2, r3
 8013bfe:	b29b      	uxth	r3, r3
 8013c00:	2201      	movs	r2, #1
 8013c02:	6939      	ldr	r1, [r7, #16]
 8013c04:	f7fb fc88 	bl	800f518 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013c08:	6a3b      	ldr	r3, [r7, #32]
 8013c0a:	68db      	ldr	r3, [r3, #12]
 8013c0c:	685b      	ldr	r3, [r3, #4]
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fa f8e2 	bl	800ddd8 <lwip_htonl>
 8013c14:	4603      	mov	r3, r0
 8013c16:	3301      	adds	r3, #1
 8013c18:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	1ad3      	subs	r3, r2, r3
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	da02      	bge.n	8013c2c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	68fa      	ldr	r2, [r7, #12]
 8013c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	3304      	adds	r3, #4
 8013c30:	4618      	mov	r0, r3
 8013c32:	f003 fcd1 	bl	80175d8 <ip4_route>
 8013c36:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d103      	bne.n	8013c46 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8013c3e:	23fc      	movs	r3, #252	; 0xfc
 8013c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c44:	e011      	b.n	8013c6a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013c46:	6879      	ldr	r1, [r7, #4]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	1d1a      	adds	r2, r3, #4
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	7a98      	ldrb	r0, [r3, #10]
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	9302      	str	r3, [sp, #8]
 8013c54:	2306      	movs	r3, #6
 8013c56:	9301      	str	r3, [sp, #4]
 8013c58:	2300      	movs	r3, #0
 8013c5a:	9300      	str	r3, [sp, #0]
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	69b8      	ldr	r0, [r7, #24]
 8013c60:	f003 fe80 	bl	8017964 <ip4_output_if>
 8013c64:	4603      	mov	r3, r0
 8013c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8013c6a:	69b8      	ldr	r0, [r7, #24]
 8013c6c:	f7fb fa48 	bl	800f100 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	372c      	adds	r7, #44	; 0x2c
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd90      	pop	{r4, r7, pc}

08013c7c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b082      	sub	sp, #8
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013c84:	f7fb fcca 	bl	800f61c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013c88:	4b0a      	ldr	r3, [pc, #40]	; (8013cb4 <tcpip_tcp_timer+0x38>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d103      	bne.n	8013c98 <tcpip_tcp_timer+0x1c>
 8013c90:	4b09      	ldr	r3, [pc, #36]	; (8013cb8 <tcpip_tcp_timer+0x3c>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d005      	beq.n	8013ca4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013c98:	2200      	movs	r2, #0
 8013c9a:	4908      	ldr	r1, [pc, #32]	; (8013cbc <tcpip_tcp_timer+0x40>)
 8013c9c:	20fa      	movs	r0, #250	; 0xfa
 8013c9e:	f000 f86f 	bl	8013d80 <sys_timeout>
 8013ca2:	e002      	b.n	8013caa <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013ca4:	4b06      	ldr	r3, [pc, #24]	; (8013cc0 <tcpip_tcp_timer+0x44>)
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	601a      	str	r2, [r3, #0]
  }
}
 8013caa:	bf00      	nop
 8013cac:	3708      	adds	r7, #8
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	2000ab30 	.word	0x2000ab30
 8013cb8:	2000ab40 	.word	0x2000ab40
 8013cbc:	08013c7d 	.word	0x08013c7d
 8013cc0:	20004244 	.word	0x20004244

08013cc4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013cc8:	4b0a      	ldr	r3, [pc, #40]	; (8013cf4 <tcp_timer_needed+0x30>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d10f      	bne.n	8013cf0 <tcp_timer_needed+0x2c>
 8013cd0:	4b09      	ldr	r3, [pc, #36]	; (8013cf8 <tcp_timer_needed+0x34>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d103      	bne.n	8013ce0 <tcp_timer_needed+0x1c>
 8013cd8:	4b08      	ldr	r3, [pc, #32]	; (8013cfc <tcp_timer_needed+0x38>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d007      	beq.n	8013cf0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013ce0:	4b04      	ldr	r3, [pc, #16]	; (8013cf4 <tcp_timer_needed+0x30>)
 8013ce2:	2201      	movs	r2, #1
 8013ce4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	4905      	ldr	r1, [pc, #20]	; (8013d00 <tcp_timer_needed+0x3c>)
 8013cea:	20fa      	movs	r0, #250	; 0xfa
 8013cec:	f000 f848 	bl	8013d80 <sys_timeout>
  }
}
 8013cf0:	bf00      	nop
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	20004244 	.word	0x20004244
 8013cf8:	2000ab30 	.word	0x2000ab30
 8013cfc:	2000ab40 	.word	0x2000ab40
 8013d00:	08013c7d 	.word	0x08013c7d

08013d04 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	4903      	ldr	r1, [pc, #12]	; (8013d2c <cyclic_timer+0x28>)
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f000 f82e 	bl	8013d80 <sys_timeout>
}
 8013d24:	bf00      	nop
 8013d26:	3710      	adds	r7, #16
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	08013d05 	.word	0x08013d05

08013d30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013d36:	2301      	movs	r3, #1
 8013d38:	607b      	str	r3, [r7, #4]
 8013d3a:	e00e      	b.n	8013d5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8013d3c:	4a0d      	ldr	r2, [pc, #52]	; (8013d74 <sys_timeouts_init+0x44>)
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	00db      	lsls	r3, r3, #3
 8013d48:	4a0a      	ldr	r2, [pc, #40]	; (8013d74 <sys_timeouts_init+0x44>)
 8013d4a:	4413      	add	r3, r2
 8013d4c:	461a      	mov	r2, r3
 8013d4e:	490a      	ldr	r1, [pc, #40]	; (8013d78 <sys_timeouts_init+0x48>)
 8013d50:	f000 f816 	bl	8013d80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	3301      	adds	r3, #1
 8013d58:	607b      	str	r3, [r7, #4]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2b04      	cmp	r3, #4
 8013d5e:	d9ed      	bls.n	8013d3c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8013d60:	f7f5 fce4 	bl	800972c <sys_now>
 8013d64:	4602      	mov	r2, r0
 8013d66:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <sys_timeouts_init+0x4c>)
 8013d68:	601a      	str	r2, [r3, #0]
}
 8013d6a:	bf00      	nop
 8013d6c:	3708      	adds	r7, #8
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	0801ccc0 	.word	0x0801ccc0
 8013d78:	08013d05 	.word	0x08013d05
 8013d7c:	20004240 	.word	0x20004240

08013d80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b088      	sub	sp, #32
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013d8c:	200a      	movs	r0, #10
 8013d8e:	f7fa fc03 	bl	800e598 <memp_malloc>
 8013d92:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d10a      	bne.n	8013db0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	f040 8084 	bne.w	8013eaa <sys_timeout+0x12a>
 8013da2:	4b44      	ldr	r3, [pc, #272]	; (8013eb4 <sys_timeout+0x134>)
 8013da4:	22d4      	movs	r2, #212	; 0xd4
 8013da6:	4944      	ldr	r1, [pc, #272]	; (8013eb8 <sys_timeout+0x138>)
 8013da8:	4844      	ldr	r0, [pc, #272]	; (8013ebc <sys_timeout+0x13c>)
 8013daa:	f005 fc9b 	bl	80196e4 <iprintf>
    return;
 8013dae:	e07c      	b.n	8013eaa <sys_timeout+0x12a>
  }

  now = sys_now();
 8013db0:	f7f5 fcbc 	bl	800972c <sys_now>
 8013db4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8013db6:	4b42      	ldr	r3, [pc, #264]	; (8013ec0 <sys_timeout+0x140>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d105      	bne.n	8013dca <sys_timeout+0x4a>
    diff = 0;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8013dc2:	4a40      	ldr	r2, [pc, #256]	; (8013ec4 <sys_timeout+0x144>)
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	6013      	str	r3, [r2, #0]
 8013dc8:	e004      	b.n	8013dd4 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8013dca:	4b3e      	ldr	r3, [pc, #248]	; (8013ec4 <sys_timeout+0x144>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	693a      	ldr	r2, [r7, #16]
 8013dd0:	1ad3      	subs	r3, r2, r3
 8013dd2:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	68ba      	ldr	r2, [r7, #8]
 8013dde:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	687a      	ldr	r2, [r7, #4]
 8013de4:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8013de6:	68fa      	ldr	r2, [r7, #12]
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	441a      	add	r2, r3
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013df0:	4b33      	ldr	r3, [pc, #204]	; (8013ec0 <sys_timeout+0x140>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d103      	bne.n	8013e00 <sys_timeout+0x80>
    next_timeout = timeout;
 8013df8:	4a31      	ldr	r2, [pc, #196]	; (8013ec0 <sys_timeout+0x140>)
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	6013      	str	r3, [r2, #0]
    return;
 8013dfe:	e055      	b.n	8013eac <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8013e00:	4b2f      	ldr	r3, [pc, #188]	; (8013ec0 <sys_timeout+0x140>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	68fa      	ldr	r2, [r7, #12]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d20f      	bcs.n	8013e2c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8013e0c:	4b2c      	ldr	r3, [pc, #176]	; (8013ec0 <sys_timeout+0x140>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	6859      	ldr	r1, [r3, #4]
 8013e12:	4b2b      	ldr	r3, [pc, #172]	; (8013ec0 <sys_timeout+0x140>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	68fa      	ldr	r2, [r7, #12]
 8013e18:	1a8a      	subs	r2, r1, r2
 8013e1a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8013e1c:	4b28      	ldr	r3, [pc, #160]	; (8013ec0 <sys_timeout+0x140>)
 8013e1e:	681a      	ldr	r2, [r3, #0]
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013e24:	4a26      	ldr	r2, [pc, #152]	; (8013ec0 <sys_timeout+0x140>)
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	6013      	str	r3, [r2, #0]
 8013e2a:	e03f      	b.n	8013eac <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e2c:	4b24      	ldr	r3, [pc, #144]	; (8013ec0 <sys_timeout+0x140>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	61fb      	str	r3, [r7, #28]
 8013e32:	e036      	b.n	8013ea2 <sys_timeout+0x122>
      timeout->time -= t->time;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	685a      	ldr	r2, [r3, #4]
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	1ad2      	subs	r2, r2, r3
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8013e42:	69fb      	ldr	r3, [r7, #28]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d006      	beq.n	8013e58 <sys_timeout+0xd8>
 8013e4a:	69fb      	ldr	r3, [r7, #28]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	685a      	ldr	r2, [r3, #4]
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	685b      	ldr	r3, [r3, #4]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d921      	bls.n	8013e9c <sys_timeout+0x11c>
        if (t->next != NULL) {
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d009      	beq.n	8013e74 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8013e60:	69fb      	ldr	r3, [r7, #28]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	6859      	ldr	r1, [r3, #4]
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	685a      	ldr	r2, [r3, #4]
 8013e6a:	69fb      	ldr	r3, [r7, #28]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	1a8a      	subs	r2, r1, r2
 8013e70:	605a      	str	r2, [r3, #4]
 8013e72:	e00b      	b.n	8013e8c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	68fa      	ldr	r2, [r7, #12]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d206      	bcs.n	8013e8c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8013e7e:	4b10      	ldr	r3, [pc, #64]	; (8013ec0 <sys_timeout+0x140>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	685a      	ldr	r2, [r3, #4]
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	441a      	add	r2, r3
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	697a      	ldr	r2, [r7, #20]
 8013e98:	601a      	str	r2, [r3, #0]
        break;
 8013e9a:	e007      	b.n	8013eac <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	61fb      	str	r3, [r7, #28]
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d1c5      	bne.n	8013e34 <sys_timeout+0xb4>
 8013ea8:	e000      	b.n	8013eac <sys_timeout+0x12c>
    return;
 8013eaa:	bf00      	nop
      }
    }
  }
}
 8013eac:	3720      	adds	r7, #32
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	0801beb4 	.word	0x0801beb4
 8013eb8:	0801bee8 	.word	0x0801bee8
 8013ebc:	0801bf28 	.word	0x0801bf28
 8013ec0:	2000423c 	.word	0x2000423c
 8013ec4:	20004240 	.word	0x20004240

08013ec8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b086      	sub	sp, #24
 8013ecc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8013ece:	4b24      	ldr	r3, [pc, #144]	; (8013f60 <sys_check_timeouts+0x98>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d03f      	beq.n	8013f56 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8013ed6:	f7f5 fc29 	bl	800972c <sys_now>
 8013eda:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8013edc:	4b21      	ldr	r3, [pc, #132]	; (8013f64 <sys_check_timeouts+0x9c>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	68fa      	ldr	r2, [r7, #12]
 8013ee2:	1ad3      	subs	r3, r2, r3
 8013ee4:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8013eea:	4b1d      	ldr	r3, [pc, #116]	; (8013f60 <sys_check_timeouts+0x98>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d02c      	beq.n	8013f50 <sys_check_timeouts+0x88>
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	697a      	ldr	r2, [r7, #20]
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d327      	bcc.n	8013f50 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8013f00:	2301      	movs	r3, #1
 8013f02:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	685a      	ldr	r2, [r3, #4]
 8013f08:	4b16      	ldr	r3, [pc, #88]	; (8013f64 <sys_check_timeouts+0x9c>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	4a15      	ldr	r2, [pc, #84]	; (8013f64 <sys_check_timeouts+0x9c>)
 8013f10:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	685b      	ldr	r3, [r3, #4]
 8013f16:	697a      	ldr	r2, [r7, #20]
 8013f18:	1ad3      	subs	r3, r2, r3
 8013f1a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4a0f      	ldr	r2, [pc, #60]	; (8013f60 <sys_check_timeouts+0x98>)
 8013f22:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	689b      	ldr	r3, [r3, #8]
 8013f28:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013f30:	68b9      	ldr	r1, [r7, #8]
 8013f32:	200a      	movs	r0, #10
 8013f34:	f7fa fb82 	bl	800e63c <memp_free>
        if (handler != NULL) {
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d008      	beq.n	8013f50 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8013f3e:	480a      	ldr	r0, [pc, #40]	; (8013f68 <sys_check_timeouts+0xa0>)
 8013f40:	f004 fd98 	bl	8018a74 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6838      	ldr	r0, [r7, #0]
 8013f48:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8013f4a:	4807      	ldr	r0, [pc, #28]	; (8013f68 <sys_check_timeouts+0xa0>)
 8013f4c:	f004 fda1 	bl	8018a92 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8013f50:	7cfb      	ldrb	r3, [r7, #19]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1c7      	bne.n	8013ee6 <sys_check_timeouts+0x1e>
  }
}
 8013f56:	bf00      	nop
 8013f58:	3718      	adds	r7, #24
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd80      	pop	{r7, pc}
 8013f5e:	bf00      	nop
 8013f60:	2000423c 	.word	0x2000423c
 8013f64:	20004240 	.word	0x20004240
 8013f68:	20007604 	.word	0x20007604

08013f6c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8013f72:	4b0f      	ldr	r3, [pc, #60]	; (8013fb0 <sys_timeouts_sleeptime+0x44>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d102      	bne.n	8013f80 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8013f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f7e:	e013      	b.n	8013fa8 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8013f80:	f7f5 fbd4 	bl	800972c <sys_now>
 8013f84:	4602      	mov	r2, r0
 8013f86:	4b0b      	ldr	r3, [pc, #44]	; (8013fb4 <sys_timeouts_sleeptime+0x48>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	1ad3      	subs	r3, r2, r3
 8013f8c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8013f8e:	4b08      	ldr	r3, [pc, #32]	; (8013fb0 <sys_timeouts_sleeptime+0x44>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d901      	bls.n	8013f9e <sys_timeouts_sleeptime+0x32>
    return 0;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	e004      	b.n	8013fa8 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8013f9e:	4b04      	ldr	r3, [pc, #16]	; (8013fb0 <sys_timeouts_sleeptime+0x44>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	685a      	ldr	r2, [r3, #4]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	1ad3      	subs	r3, r2, r3
  }
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3708      	adds	r7, #8
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	2000423c 	.word	0x2000423c
 8013fb4:	20004240 	.word	0x20004240

08013fb8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8013fc2:	4b0f      	ldr	r3, [pc, #60]	; (8014000 <sys_timeouts_mbox_fetch+0x48>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d105      	bne.n	8013fd6 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8013fca:	2200      	movs	r2, #0
 8013fcc:	6839      	ldr	r1, [r7, #0]
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f004 fcd5 	bl	801897e <sys_arch_mbox_fetch>
    return;
 8013fd4:	e011      	b.n	8013ffa <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8013fd6:	f7ff ffc9 	bl	8013f6c <sys_timeouts_sleeptime>
 8013fda:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d008      	beq.n	8013ff4 <sys_timeouts_mbox_fetch+0x3c>
 8013fe2:	68fa      	ldr	r2, [r7, #12]
 8013fe4:	6839      	ldr	r1, [r7, #0]
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f004 fcc9 	bl	801897e <sys_arch_mbox_fetch>
 8013fec:	4603      	mov	r3, r0
 8013fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ff2:	d102      	bne.n	8013ffa <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013ff4:	f7ff ff68 	bl	8013ec8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013ff8:	e7e3      	b.n	8013fc2 <sys_timeouts_mbox_fetch+0xa>
  }
}
 8013ffa:	3710      	adds	r7, #16
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	2000423c 	.word	0x2000423c

08014004 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014004:	b480      	push	{r7}
 8014006:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8014008:	bf00      	nop
 801400a:	46bd      	mov	sp, r7
 801400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014010:	4770      	bx	lr
	...

08014014 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801401a:	2300      	movs	r3, #0
 801401c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801401e:	4b17      	ldr	r3, [pc, #92]	; (801407c <udp_new_port+0x68>)
 8014020:	881b      	ldrh	r3, [r3, #0]
 8014022:	1c5a      	adds	r2, r3, #1
 8014024:	b291      	uxth	r1, r2
 8014026:	4a15      	ldr	r2, [pc, #84]	; (801407c <udp_new_port+0x68>)
 8014028:	8011      	strh	r1, [r2, #0]
 801402a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801402e:	4293      	cmp	r3, r2
 8014030:	d103      	bne.n	801403a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014032:	4b12      	ldr	r3, [pc, #72]	; (801407c <udp_new_port+0x68>)
 8014034:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014038:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801403a:	4b11      	ldr	r3, [pc, #68]	; (8014080 <udp_new_port+0x6c>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	603b      	str	r3, [r7, #0]
 8014040:	e011      	b.n	8014066 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	8a5a      	ldrh	r2, [r3, #18]
 8014046:	4b0d      	ldr	r3, [pc, #52]	; (801407c <udp_new_port+0x68>)
 8014048:	881b      	ldrh	r3, [r3, #0]
 801404a:	429a      	cmp	r2, r3
 801404c:	d108      	bne.n	8014060 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801404e:	88fb      	ldrh	r3, [r7, #6]
 8014050:	3301      	adds	r3, #1
 8014052:	80fb      	strh	r3, [r7, #6]
 8014054:	88fb      	ldrh	r3, [r7, #6]
 8014056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801405a:	d3e0      	bcc.n	801401e <udp_new_port+0xa>
        return 0;
 801405c:	2300      	movs	r3, #0
 801405e:	e007      	b.n	8014070 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	68db      	ldr	r3, [r3, #12]
 8014064:	603b      	str	r3, [r7, #0]
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d1ea      	bne.n	8014042 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801406c:	4b03      	ldr	r3, [pc, #12]	; (801407c <udp_new_port+0x68>)
 801406e:	881b      	ldrh	r3, [r3, #0]
}
 8014070:	4618      	mov	r0, r3
 8014072:	370c      	adds	r7, #12
 8014074:	46bd      	mov	sp, r7
 8014076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407a:	4770      	bx	lr
 801407c:	20000120 	.word	0x20000120
 8014080:	2000ab48 	.word	0x2000ab48

08014084 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014084:	b480      	push	{r7}
 8014086:	b085      	sub	sp, #20
 8014088:	af00      	add	r7, sp, #0
 801408a:	60f8      	str	r0, [r7, #12]
 801408c:	60b9      	str	r1, [r7, #8]
 801408e:	4613      	mov	r3, r2
 8014090:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014092:	79fb      	ldrb	r3, [r7, #7]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d018      	beq.n	80140ca <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d013      	beq.n	80140c6 <udp_input_local_match+0x42>
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d00f      	beq.n	80140c6 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80140a6:	4b14      	ldr	r3, [pc, #80]	; (80140f8 <udp_input_local_match+0x74>)
 80140a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80140aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140ae:	d00a      	beq.n	80140c6 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	681a      	ldr	r2, [r3, #0]
 80140b4:	4b10      	ldr	r3, [pc, #64]	; (80140f8 <udp_input_local_match+0x74>)
 80140b6:	695b      	ldr	r3, [r3, #20]
 80140b8:	405a      	eors	r2, r3
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	3308      	adds	r3, #8
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d110      	bne.n	80140e8 <udp_input_local_match+0x64>
          return 1;
 80140c6:	2301      	movs	r3, #1
 80140c8:	e00f      	b.n	80140ea <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d009      	beq.n	80140e4 <udp_input_local_match+0x60>
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d005      	beq.n	80140e4 <udp_input_local_match+0x60>
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	681a      	ldr	r2, [r3, #0]
 80140dc:	4b06      	ldr	r3, [pc, #24]	; (80140f8 <udp_input_local_match+0x74>)
 80140de:	695b      	ldr	r3, [r3, #20]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d101      	bne.n	80140e8 <udp_input_local_match+0x64>
      return 1;
 80140e4:	2301      	movs	r3, #1
 80140e6:	e000      	b.n	80140ea <udp_input_local_match+0x66>
    }
  }

  return 0;
 80140e8:	2300      	movs	r3, #0
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	3714      	adds	r7, #20
 80140ee:	46bd      	mov	sp, r7
 80140f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f4:	4770      	bx	lr
 80140f6:	bf00      	nop
 80140f8:	20007608 	.word	0x20007608

080140fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80140fc:	b590      	push	{r4, r7, lr}
 80140fe:	b08d      	sub	sp, #52	; 0x34
 8014100:	af02      	add	r7, sp, #8
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014106:	2300      	movs	r3, #0
 8014108:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	895b      	ldrh	r3, [r3, #10]
 801410e:	2b07      	cmp	r3, #7
 8014110:	d803      	bhi.n	801411a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7fa fff4 	bl	800f100 <pbuf_free>
    goto end;
 8014118:	e0c6      	b.n	80142a8 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	685b      	ldr	r3, [r3, #4]
 801411e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014120:	4b63      	ldr	r3, [pc, #396]	; (80142b0 <udp_input+0x1b4>)
 8014122:	695a      	ldr	r2, [r3, #20]
 8014124:	4b62      	ldr	r3, [pc, #392]	; (80142b0 <udp_input+0x1b4>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	4619      	mov	r1, r3
 801412a:	4610      	mov	r0, r2
 801412c:	f003 fcec 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 8014130:	4603      	mov	r3, r0
 8014132:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	881b      	ldrh	r3, [r3, #0]
 8014138:	b29b      	uxth	r3, r3
 801413a:	4618      	mov	r0, r3
 801413c:	f7f9 fe3e 	bl	800ddbc <lwip_htons>
 8014140:	4603      	mov	r3, r0
 8014142:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	885b      	ldrh	r3, [r3, #2]
 8014148:	b29b      	uxth	r3, r3
 801414a:	4618      	mov	r0, r3
 801414c:	f7f9 fe36 	bl	800ddbc <lwip_htons>
 8014150:	4603      	mov	r3, r0
 8014152:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014154:	2300      	movs	r3, #0
 8014156:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014158:	2300      	movs	r3, #0
 801415a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801415c:	2300      	movs	r3, #0
 801415e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014160:	4b54      	ldr	r3, [pc, #336]	; (80142b4 <udp_input+0x1b8>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	627b      	str	r3, [r7, #36]	; 0x24
 8014166:	e03b      	b.n	80141e0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416a:	8a5b      	ldrh	r3, [r3, #18]
 801416c:	89fa      	ldrh	r2, [r7, #14]
 801416e:	429a      	cmp	r2, r3
 8014170:	d131      	bne.n	80141d6 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014172:	7cfb      	ldrb	r3, [r7, #19]
 8014174:	461a      	mov	r2, r3
 8014176:	6839      	ldr	r1, [r7, #0]
 8014178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801417a:	f7ff ff83 	bl	8014084 <udp_input_local_match>
 801417e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014180:	2b00      	cmp	r3, #0
 8014182:	d028      	beq.n	80141d6 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8014184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014186:	7c1b      	ldrb	r3, [r3, #16]
 8014188:	f003 0304 	and.w	r3, r3, #4
 801418c:	2b00      	cmp	r3, #0
 801418e:	d104      	bne.n	801419a <udp_input+0x9e>
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d101      	bne.n	801419a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8014196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014198:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419c:	8a9b      	ldrh	r3, [r3, #20]
 801419e:	8a3a      	ldrh	r2, [r7, #16]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d118      	bne.n	80141d6 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80141a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d005      	beq.n	80141b8 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	685a      	ldr	r2, [r3, #4]
 80141b0:	4b3f      	ldr	r3, [pc, #252]	; (80142b0 <udp_input+0x1b4>)
 80141b2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80141b4:	429a      	cmp	r2, r3
 80141b6:	d10e      	bne.n	80141d6 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80141b8:	6a3b      	ldr	r3, [r7, #32]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d014      	beq.n	80141e8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80141be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c0:	68da      	ldr	r2, [r3, #12]
 80141c2:	6a3b      	ldr	r3, [r7, #32]
 80141c4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80141c6:	4b3b      	ldr	r3, [pc, #236]	; (80142b4 <udp_input+0x1b8>)
 80141c8:	681a      	ldr	r2, [r3, #0]
 80141ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141cc:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80141ce:	4a39      	ldr	r2, [pc, #228]	; (80142b4 <udp_input+0x1b8>)
 80141d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80141d4:	e008      	b.n	80141e8 <udp_input+0xec>
      }
    }

    prev = pcb;
 80141d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d8:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	68db      	ldr	r3, [r3, #12]
 80141de:	627b      	str	r3, [r7, #36]	; 0x24
 80141e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d1c0      	bne.n	8014168 <udp_input+0x6c>
 80141e6:	e000      	b.n	80141ea <udp_input+0xee>
        break;
 80141e8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80141ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d101      	bne.n	80141f4 <udp_input+0xf8>
    pcb = uncon_pcb;
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80141f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d002      	beq.n	8014200 <udp_input+0x104>
    for_us = 1;
 80141fa:	2301      	movs	r3, #1
 80141fc:	76fb      	strb	r3, [r7, #27]
 80141fe:	e00a      	b.n	8014216 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	3304      	adds	r3, #4
 8014204:	681a      	ldr	r2, [r3, #0]
 8014206:	4b2a      	ldr	r3, [pc, #168]	; (80142b0 <udp_input+0x1b4>)
 8014208:	695b      	ldr	r3, [r3, #20]
 801420a:	429a      	cmp	r2, r3
 801420c:	bf0c      	ite	eq
 801420e:	2301      	moveq	r3, #1
 8014210:	2300      	movne	r3, #0
 8014212:	b2db      	uxtb	r3, r3
 8014214:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014216:	7efb      	ldrb	r3, [r7, #27]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d042      	beq.n	80142a2 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801421c:	f06f 0107 	mvn.w	r1, #7
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f7fa ff49 	bl	800f0b8 <pbuf_header>
 8014226:	4603      	mov	r3, r0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d00a      	beq.n	8014242 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801422c:	4b22      	ldr	r3, [pc, #136]	; (80142b8 <udp_input+0x1bc>)
 801422e:	f240 1255 	movw	r2, #341	; 0x155
 8014232:	4922      	ldr	r1, [pc, #136]	; (80142bc <udp_input+0x1c0>)
 8014234:	4822      	ldr	r0, [pc, #136]	; (80142c0 <udp_input+0x1c4>)
 8014236:	f005 fa55 	bl	80196e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f7fa ff60 	bl	800f100 <pbuf_free>
      goto end;
 8014240:	e032      	b.n	80142a8 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8014242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014244:	2b00      	cmp	r3, #0
 8014246:	d012      	beq.n	801426e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424a:	699b      	ldr	r3, [r3, #24]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00a      	beq.n	8014266 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014252:	699c      	ldr	r4, [r3, #24]
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	69d8      	ldr	r0, [r3, #28]
 8014258:	8a3b      	ldrh	r3, [r7, #16]
 801425a:	9300      	str	r3, [sp, #0]
 801425c:	4b19      	ldr	r3, [pc, #100]	; (80142c4 <udp_input+0x1c8>)
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014262:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014264:	e021      	b.n	80142aa <udp_input+0x1ae>
        pbuf_free(p);
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7fa ff4a 	bl	800f100 <pbuf_free>
        goto end;
 801426c:	e01c      	b.n	80142a8 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801426e:	7cfb      	ldrb	r3, [r7, #19]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d112      	bne.n	801429a <udp_input+0x19e>
 8014274:	4b0e      	ldr	r3, [pc, #56]	; (80142b0 <udp_input+0x1b4>)
 8014276:	695b      	ldr	r3, [r3, #20]
 8014278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801427c:	2be0      	cmp	r3, #224	; 0xe0
 801427e:	d00c      	beq.n	801429a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014280:	4b0b      	ldr	r3, [pc, #44]	; (80142b0 <udp_input+0x1b4>)
 8014282:	899b      	ldrh	r3, [r3, #12]
 8014284:	3308      	adds	r3, #8
 8014286:	b29b      	uxth	r3, r3
 8014288:	b21b      	sxth	r3, r3
 801428a:	4619      	mov	r1, r3
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7fa ff25 	bl	800f0dc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014292:	2103      	movs	r1, #3
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f003 f917 	bl	80174c8 <icmp_dest_unreach>
      pbuf_free(p);
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f7fa ff30 	bl	800f100 <pbuf_free>
  return;
 80142a0:	e003      	b.n	80142aa <udp_input+0x1ae>
    pbuf_free(p);
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f7fa ff2c 	bl	800f100 <pbuf_free>
  return;
 80142a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80142aa:	372c      	adds	r7, #44	; 0x2c
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd90      	pop	{r4, r7, pc}
 80142b0:	20007608 	.word	0x20007608
 80142b4:	2000ab48 	.word	0x2000ab48
 80142b8:	0801bf50 	.word	0x0801bf50
 80142bc:	0801bf80 	.word	0x0801bf80
 80142c0:	0801bf94 	.word	0x0801bf94
 80142c4:	20007618 	.word	0x20007618

080142c8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b088      	sub	sp, #32
 80142cc:	af02      	add	r7, sp, #8
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
 80142d4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d002      	beq.n	80142e2 <udp_sendto_if+0x1a>
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d102      	bne.n	80142e8 <udp_sendto_if+0x20>
    return ERR_VAL;
 80142e2:	f06f 0305 	mvn.w	r3, #5
 80142e6:	e028      	b.n	801433a <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d009      	beq.n	8014302 <udp_sendto_if+0x3a>
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d005      	beq.n	8014302 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80142fe:	2be0      	cmp	r3, #224	; 0xe0
 8014300:	d103      	bne.n	801430a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8014302:	6a3b      	ldr	r3, [r7, #32]
 8014304:	3304      	adds	r3, #4
 8014306:	617b      	str	r3, [r7, #20]
 8014308:	e00b      	b.n	8014322 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	681a      	ldr	r2, [r3, #0]
 801430e:	6a3b      	ldr	r3, [r7, #32]
 8014310:	3304      	adds	r3, #4
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	429a      	cmp	r2, r3
 8014316:	d002      	beq.n	801431e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8014318:	f06f 0303 	mvn.w	r3, #3
 801431c:	e00d      	b.n	801433a <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014322:	887a      	ldrh	r2, [r7, #2]
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	9301      	str	r3, [sp, #4]
 8014328:	6a3b      	ldr	r3, [r7, #32]
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	4613      	mov	r3, r2
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	68b9      	ldr	r1, [r7, #8]
 8014332:	68f8      	ldr	r0, [r7, #12]
 8014334:	f000 f806 	bl	8014344 <udp_sendto_if_src>
 8014338:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801433a:	4618      	mov	r0, r3
 801433c:	3718      	adds	r7, #24
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
	...

08014344 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b08c      	sub	sp, #48	; 0x30
 8014348:	af04      	add	r7, sp, #16
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
 8014350:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d002      	beq.n	801435e <udp_sendto_if_src+0x1a>
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d102      	bne.n	8014364 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 801435e:	f06f 0305 	mvn.w	r3, #5
 8014362:	e07e      	b.n	8014462 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	8a5b      	ldrh	r3, [r3, #18]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10f      	bne.n	801438c <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801436c:	68f9      	ldr	r1, [r7, #12]
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	8a5b      	ldrh	r3, [r3, #18]
 8014372:	461a      	mov	r2, r3
 8014374:	68f8      	ldr	r0, [r7, #12]
 8014376:	f000 f87f 	bl	8014478 <udp_bind>
 801437a:	4603      	mov	r3, r0
 801437c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801437e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d002      	beq.n	801438c <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014386:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801438a:	e06a      	b.n	8014462 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 801438c:	2108      	movs	r1, #8
 801438e:	68b8      	ldr	r0, [r7, #8]
 8014390:	f7fa fe92 	bl	800f0b8 <pbuf_header>
 8014394:	4603      	mov	r3, r0
 8014396:	2b00      	cmp	r3, #0
 8014398:	d014      	beq.n	80143c4 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801439a:	2200      	movs	r2, #0
 801439c:	2108      	movs	r1, #8
 801439e:	2001      	movs	r0, #1
 80143a0:	f7fa fb3c 	bl	800ea1c <pbuf_alloc>
 80143a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80143a6:	69fb      	ldr	r3, [r7, #28]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d102      	bne.n	80143b2 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80143ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143b0:	e057      	b.n	8014462 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	891b      	ldrh	r3, [r3, #8]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d006      	beq.n	80143c8 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80143ba:	68b9      	ldr	r1, [r7, #8]
 80143bc:	69f8      	ldr	r0, [r7, #28]
 80143be:	f7fa ffcf 	bl	800f360 <pbuf_chain>
 80143c2:	e001      	b.n	80143c8 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80143c8:	69fb      	ldr	r3, [r7, #28]
 80143ca:	895b      	ldrh	r3, [r3, #10]
 80143cc:	2b07      	cmp	r3, #7
 80143ce:	d806      	bhi.n	80143de <udp_sendto_if_src+0x9a>
 80143d0:	4b26      	ldr	r3, [pc, #152]	; (801446c <udp_sendto_if_src+0x128>)
 80143d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80143d6:	4926      	ldr	r1, [pc, #152]	; (8014470 <udp_sendto_if_src+0x12c>)
 80143d8:	4826      	ldr	r0, [pc, #152]	; (8014474 <udp_sendto_if_src+0x130>)
 80143da:	f005 f983 	bl	80196e4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	8a5b      	ldrh	r3, [r3, #18]
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7f9 fce7 	bl	800ddbc <lwip_htons>
 80143ee:	4603      	mov	r3, r0
 80143f0:	461a      	mov	r2, r3
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80143f6:	887b      	ldrh	r3, [r7, #2]
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7f9 fcdf 	bl	800ddbc <lwip_htons>
 80143fe:	4603      	mov	r3, r0
 8014400:	461a      	mov	r2, r3
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	2200      	movs	r2, #0
 801440a:	719a      	strb	r2, [r3, #6]
 801440c:	2200      	movs	r2, #0
 801440e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014410:	69fb      	ldr	r3, [r7, #28]
 8014412:	891b      	ldrh	r3, [r3, #8]
 8014414:	4618      	mov	r0, r3
 8014416:	f7f9 fcd1 	bl	800ddbc <lwip_htons>
 801441a:	4603      	mov	r3, r0
 801441c:	461a      	mov	r2, r3
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014422:	2311      	movs	r3, #17
 8014424:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	7a9b      	ldrb	r3, [r3, #10]
 801442a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	7a5b      	ldrb	r3, [r3, #9]
 8014430:	7cb9      	ldrb	r1, [r7, #18]
 8014432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014434:	9202      	str	r2, [sp, #8]
 8014436:	7cfa      	ldrb	r2, [r7, #19]
 8014438:	9201      	str	r2, [sp, #4]
 801443a:	9300      	str	r3, [sp, #0]
 801443c:	460b      	mov	r3, r1
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014442:	69f8      	ldr	r0, [r7, #28]
 8014444:	f003 fab8 	bl	80179b8 <ip4_output_if_src>
 8014448:	4603      	mov	r3, r0
 801444a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801444c:	69fa      	ldr	r2, [r7, #28]
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	429a      	cmp	r2, r3
 8014452:	d004      	beq.n	801445e <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8014454:	69f8      	ldr	r0, [r7, #28]
 8014456:	f7fa fe53 	bl	800f100 <pbuf_free>
    q = NULL;
 801445a:	2300      	movs	r3, #0
 801445c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801445e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014462:	4618      	mov	r0, r3
 8014464:	3720      	adds	r7, #32
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	0801bf50 	.word	0x0801bf50
 8014470:	0801bfbc 	.word	0x0801bfbc
 8014474:	0801bf94 	.word	0x0801bf94

08014478 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b086      	sub	sp, #24
 801447c:	af00      	add	r7, sp, #0
 801447e:	60f8      	str	r0, [r7, #12]
 8014480:	60b9      	str	r1, [r7, #8]
 8014482:	4613      	mov	r3, r2
 8014484:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d101      	bne.n	8014490 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801448c:	4b30      	ldr	r3, [pc, #192]	; (8014550 <udp_bind+0xd8>)
 801448e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d002      	beq.n	801449c <udp_bind+0x24>
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d102      	bne.n	80144a2 <udp_bind+0x2a>
    return ERR_VAL;
 801449c:	f06f 0305 	mvn.w	r3, #5
 80144a0:	e052      	b.n	8014548 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80144a2:	2300      	movs	r3, #0
 80144a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144a6:	4b2b      	ldr	r3, [pc, #172]	; (8014554 <udp_bind+0xdc>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	617b      	str	r3, [r7, #20]
 80144ac:	e009      	b.n	80144c2 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	429a      	cmp	r2, r3
 80144b4:	d102      	bne.n	80144bc <udp_bind+0x44>
      rebind = 1;
 80144b6:	2301      	movs	r3, #1
 80144b8:	74fb      	strb	r3, [r7, #19]
      break;
 80144ba:	e005      	b.n	80144c8 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	617b      	str	r3, [r7, #20]
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1f2      	bne.n	80144ae <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80144c8:	88fb      	ldrh	r3, [r7, #6]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d109      	bne.n	80144e2 <udp_bind+0x6a>
    port = udp_new_port();
 80144ce:	f7ff fda1 	bl	8014014 <udp_new_port>
 80144d2:	4603      	mov	r3, r0
 80144d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80144d6:	88fb      	ldrh	r3, [r7, #6]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d11e      	bne.n	801451a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80144dc:	f06f 0307 	mvn.w	r3, #7
 80144e0:	e032      	b.n	8014548 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144e2:	4b1c      	ldr	r3, [pc, #112]	; (8014554 <udp_bind+0xdc>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	617b      	str	r3, [r7, #20]
 80144e8:	e014      	b.n	8014514 <udp_bind+0x9c>
      if (pcb != ipcb) {
 80144ea:	68fa      	ldr	r2, [r7, #12]
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d00d      	beq.n	801450e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	8a5b      	ldrh	r3, [r3, #18]
 80144f6:	88fa      	ldrh	r2, [r7, #6]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d108      	bne.n	801450e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	681a      	ldr	r2, [r3, #0]
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014504:	429a      	cmp	r2, r3
 8014506:	d102      	bne.n	801450e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014508:	f06f 0307 	mvn.w	r3, #7
 801450c:	e01c      	b.n	8014548 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	68db      	ldr	r3, [r3, #12]
 8014512:	617b      	str	r3, [r7, #20]
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d1e7      	bne.n	80144ea <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d002      	beq.n	8014526 <udp_bind+0xae>
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	e000      	b.n	8014528 <udp_bind+0xb0>
 8014526:	2300      	movs	r3, #0
 8014528:	68fa      	ldr	r2, [r7, #12]
 801452a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	88fa      	ldrh	r2, [r7, #6]
 8014530:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014532:	7cfb      	ldrb	r3, [r7, #19]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d106      	bne.n	8014546 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014538:	4b06      	ldr	r3, [pc, #24]	; (8014554 <udp_bind+0xdc>)
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014540:	4a04      	ldr	r2, [pc, #16]	; (8014554 <udp_bind+0xdc>)
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014546:	2300      	movs	r3, #0
}
 8014548:	4618      	mov	r0, r3
 801454a:	3718      	adds	r7, #24
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	0801cce8 	.word	0x0801cce8
 8014554:	2000ab48 	.word	0x2000ab48

08014558 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b086      	sub	sp, #24
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	4613      	mov	r3, r2
 8014564:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d002      	beq.n	8014572 <udp_connect+0x1a>
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d102      	bne.n	8014578 <udp_connect+0x20>
    return ERR_VAL;
 8014572:	f06f 0305 	mvn.w	r3, #5
 8014576:	e03e      	b.n	80145f6 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	8a5b      	ldrh	r3, [r3, #18]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d10f      	bne.n	80145a0 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014580:	68f9      	ldr	r1, [r7, #12]
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	8a5b      	ldrh	r3, [r3, #18]
 8014586:	461a      	mov	r2, r3
 8014588:	68f8      	ldr	r0, [r7, #12]
 801458a:	f7ff ff75 	bl	8014478 <udp_bind>
 801458e:	4603      	mov	r3, r0
 8014590:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014592:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d002      	beq.n	80145a0 <udp_connect+0x48>
      return err;
 801459a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801459e:	e02a      	b.n	80145f6 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d002      	beq.n	80145ac <udp_connect+0x54>
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	e000      	b.n	80145ae <udp_connect+0x56>
 80145ac:	2300      	movs	r3, #0
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	88fa      	ldrh	r2, [r7, #6]
 80145b6:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	7c1b      	ldrb	r3, [r3, #16]
 80145bc:	f043 0304 	orr.w	r3, r3, #4
 80145c0:	b2da      	uxtb	r2, r3
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80145c6:	4b0e      	ldr	r3, [pc, #56]	; (8014600 <udp_connect+0xa8>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	617b      	str	r3, [r7, #20]
 80145cc:	e008      	b.n	80145e0 <udp_connect+0x88>
    if (pcb == ipcb) {
 80145ce:	68fa      	ldr	r2, [r7, #12]
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d101      	bne.n	80145da <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 80145d6:	2300      	movs	r3, #0
 80145d8:	e00d      	b.n	80145f6 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	617b      	str	r3, [r7, #20]
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d1f3      	bne.n	80145ce <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80145e6:	4b06      	ldr	r3, [pc, #24]	; (8014600 <udp_connect+0xa8>)
 80145e8:	681a      	ldr	r2, [r3, #0]
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80145ee:	4a04      	ldr	r2, [pc, #16]	; (8014600 <udp_connect+0xa8>)
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80145f4:	2300      	movs	r3, #0
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3718      	adds	r7, #24
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	2000ab48 	.word	0x2000ab48

08014604 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014604:	b480      	push	{r7}
 8014606:	b085      	sub	sp, #20
 8014608:	af00      	add	r7, sp, #0
 801460a:	60f8      	str	r0, [r7, #12]
 801460c:	60b9      	str	r1, [r7, #8]
 801460e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	68ba      	ldr	r2, [r7, #8]
 8014614:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	61da      	str	r2, [r3, #28]
}
 801461c:	bf00      	nop
 801461e:	3714      	adds	r7, #20
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr

08014628 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014630:	4b15      	ldr	r3, [pc, #84]	; (8014688 <udp_remove+0x60>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	687a      	ldr	r2, [r7, #4]
 8014636:	429a      	cmp	r2, r3
 8014638:	d105      	bne.n	8014646 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801463a:	4b13      	ldr	r3, [pc, #76]	; (8014688 <udp_remove+0x60>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68db      	ldr	r3, [r3, #12]
 8014640:	4a11      	ldr	r2, [pc, #68]	; (8014688 <udp_remove+0x60>)
 8014642:	6013      	str	r3, [r2, #0]
 8014644:	e017      	b.n	8014676 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014646:	4b10      	ldr	r3, [pc, #64]	; (8014688 <udp_remove+0x60>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	60fb      	str	r3, [r7, #12]
 801464c:	e010      	b.n	8014670 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	68db      	ldr	r3, [r3, #12]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d009      	beq.n	801466a <udp_remove+0x42>
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	429a      	cmp	r2, r3
 801465e:	d104      	bne.n	801466a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	68da      	ldr	r2, [r3, #12]
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	60da      	str	r2, [r3, #12]
        break;
 8014668:	e005      	b.n	8014676 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	68db      	ldr	r3, [r3, #12]
 801466e:	60fb      	str	r3, [r7, #12]
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d1eb      	bne.n	801464e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014676:	6879      	ldr	r1, [r7, #4]
 8014678:	2000      	movs	r0, #0
 801467a:	f7f9 ffdf 	bl	800e63c <memp_free>
}
 801467e:	bf00      	nop
 8014680:	3710      	adds	r7, #16
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
 8014686:	bf00      	nop
 8014688:	2000ab48 	.word	0x2000ab48

0801468c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014692:	2000      	movs	r0, #0
 8014694:	f7f9 ff80 	bl	800e598 <memp_malloc>
 8014698:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d007      	beq.n	80146b0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80146a0:	2220      	movs	r2, #32
 80146a2:	2100      	movs	r1, #0
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f004 ff6d 	bl	8019584 <memset>
    pcb->ttl = UDP_TTL;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	22ff      	movs	r2, #255	; 0xff
 80146ae:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80146b0:	687b      	ldr	r3, [r7, #4]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3708      	adds	r7, #8
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
	...

080146bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80146bc:	b480      	push	{r7}
 80146be:	b085      	sub	sp, #20
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d01e      	beq.n	801470a <udp_netif_ip_addr_changed+0x4e>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d01a      	beq.n	801470a <udp_netif_ip_addr_changed+0x4e>
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d017      	beq.n	801470a <udp_netif_ip_addr_changed+0x4e>
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d013      	beq.n	801470a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80146e2:	4b0d      	ldr	r3, [pc, #52]	; (8014718 <udp_netif_ip_addr_changed+0x5c>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	60fb      	str	r3, [r7, #12]
 80146e8:	e00c      	b.n	8014704 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d103      	bne.n	80146fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	681a      	ldr	r2, [r3, #0]
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	68db      	ldr	r3, [r3, #12]
 8014702:	60fb      	str	r3, [r7, #12]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d1ef      	bne.n	80146ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801470a:	bf00      	nop
 801470c:	3714      	adds	r7, #20
 801470e:	46bd      	mov	sp, r7
 8014710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014714:	4770      	bx	lr
 8014716:	bf00      	nop
 8014718:	2000ab48 	.word	0x2000ab48

0801471c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014720:	4b20      	ldr	r3, [pc, #128]	; (80147a4 <dhcp_inc_pcb_refcount+0x88>)
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d133      	bne.n	8014790 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014728:	4b1f      	ldr	r3, [pc, #124]	; (80147a8 <dhcp_inc_pcb_refcount+0x8c>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d005      	beq.n	801473c <dhcp_inc_pcb_refcount+0x20>
 8014730:	4b1e      	ldr	r3, [pc, #120]	; (80147ac <dhcp_inc_pcb_refcount+0x90>)
 8014732:	22d9      	movs	r2, #217	; 0xd9
 8014734:	491e      	ldr	r1, [pc, #120]	; (80147b0 <dhcp_inc_pcb_refcount+0x94>)
 8014736:	481f      	ldr	r0, [pc, #124]	; (80147b4 <dhcp_inc_pcb_refcount+0x98>)
 8014738:	f004 ffd4 	bl	80196e4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801473c:	f7ff ffa6 	bl	801468c <udp_new>
 8014740:	4602      	mov	r2, r0
 8014742:	4b19      	ldr	r3, [pc, #100]	; (80147a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014744:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8014746:	4b18      	ldr	r3, [pc, #96]	; (80147a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d102      	bne.n	8014754 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801474e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014752:	e024      	b.n	801479e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014754:	4b14      	ldr	r3, [pc, #80]	; (80147a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	7a1a      	ldrb	r2, [r3, #8]
 801475a:	4b13      	ldr	r3, [pc, #76]	; (80147a8 <dhcp_inc_pcb_refcount+0x8c>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	f042 0220 	orr.w	r2, r2, #32
 8014762:	b2d2      	uxtb	r2, r2
 8014764:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8014766:	4b10      	ldr	r3, [pc, #64]	; (80147a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2244      	movs	r2, #68	; 0x44
 801476c:	4912      	ldr	r1, [pc, #72]	; (80147b8 <dhcp_inc_pcb_refcount+0x9c>)
 801476e:	4618      	mov	r0, r3
 8014770:	f7ff fe82 	bl	8014478 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8014774:	4b0c      	ldr	r3, [pc, #48]	; (80147a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2243      	movs	r2, #67	; 0x43
 801477a:	490f      	ldr	r1, [pc, #60]	; (80147b8 <dhcp_inc_pcb_refcount+0x9c>)
 801477c:	4618      	mov	r0, r3
 801477e:	f7ff feeb 	bl	8014558 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014782:	4b09      	ldr	r3, [pc, #36]	; (80147a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2200      	movs	r2, #0
 8014788:	490c      	ldr	r1, [pc, #48]	; (80147bc <dhcp_inc_pcb_refcount+0xa0>)
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff ff3a 	bl	8014604 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014790:	4b04      	ldr	r3, [pc, #16]	; (80147a4 <dhcp_inc_pcb_refcount+0x88>)
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	3301      	adds	r3, #1
 8014796:	b2da      	uxtb	r2, r3
 8014798:	4b02      	ldr	r3, [pc, #8]	; (80147a4 <dhcp_inc_pcb_refcount+0x88>)
 801479a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801479c:	2300      	movs	r3, #0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	2000424c 	.word	0x2000424c
 80147a8:	20004248 	.word	0x20004248
 80147ac:	0801bfec 	.word	0x0801bfec
 80147b0:	0801c024 	.word	0x0801c024
 80147b4:	0801c04c 	.word	0x0801c04c
 80147b8:	0801cce8 	.word	0x0801cce8
 80147bc:	08015e79 	.word	0x08015e79

080147c0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80147c4:	4b0e      	ldr	r3, [pc, #56]	; (8014800 <dhcp_dec_pcb_refcount+0x40>)
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d105      	bne.n	80147d8 <dhcp_dec_pcb_refcount+0x18>
 80147cc:	4b0d      	ldr	r3, [pc, #52]	; (8014804 <dhcp_dec_pcb_refcount+0x44>)
 80147ce:	22f3      	movs	r2, #243	; 0xf3
 80147d0:	490d      	ldr	r1, [pc, #52]	; (8014808 <dhcp_dec_pcb_refcount+0x48>)
 80147d2:	480e      	ldr	r0, [pc, #56]	; (801480c <dhcp_dec_pcb_refcount+0x4c>)
 80147d4:	f004 ff86 	bl	80196e4 <iprintf>
  dhcp_pcb_refcount--;
 80147d8:	4b09      	ldr	r3, [pc, #36]	; (8014800 <dhcp_dec_pcb_refcount+0x40>)
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	3b01      	subs	r3, #1
 80147de:	b2da      	uxtb	r2, r3
 80147e0:	4b07      	ldr	r3, [pc, #28]	; (8014800 <dhcp_dec_pcb_refcount+0x40>)
 80147e2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80147e4:	4b06      	ldr	r3, [pc, #24]	; (8014800 <dhcp_dec_pcb_refcount+0x40>)
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d107      	bne.n	80147fc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80147ec:	4b08      	ldr	r3, [pc, #32]	; (8014810 <dhcp_dec_pcb_refcount+0x50>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7ff ff19 	bl	8014628 <udp_remove>
    dhcp_pcb = NULL;
 80147f6:	4b06      	ldr	r3, [pc, #24]	; (8014810 <dhcp_dec_pcb_refcount+0x50>)
 80147f8:	2200      	movs	r2, #0
 80147fa:	601a      	str	r2, [r3, #0]
  }
}
 80147fc:	bf00      	nop
 80147fe:	bd80      	pop	{r7, pc}
 8014800:	2000424c 	.word	0x2000424c
 8014804:	0801bfec 	.word	0x0801bfec
 8014808:	0801c074 	.word	0x0801c074
 801480c:	0801c04c 	.word	0x0801c04c
 8014810:	20004248 	.word	0x20004248

08014814 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6a1b      	ldr	r3, [r3, #32]
 8014820:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014822:	210c      	movs	r1, #12
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f000 ff85 	bl	8015734 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801482a:	4b06      	ldr	r3, [pc, #24]	; (8014844 <dhcp_handle_nak+0x30>)
 801482c:	4a05      	ldr	r2, [pc, #20]	; (8014844 <dhcp_handle_nak+0x30>)
 801482e:	4905      	ldr	r1, [pc, #20]	; (8014844 <dhcp_handle_nak+0x30>)
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f7f9 ff91 	bl	800e758 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 fbb6 	bl	8014fa8 <dhcp_discover>
}
 801483c:	bf00      	nop
 801483e:	3710      	adds	r7, #16
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	0801cce8 	.word	0x0801cce8

08014848 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6a1b      	ldr	r3, [r3, #32]
 8014854:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014856:	2108      	movs	r1, #8
 8014858:	68f8      	ldr	r0, [r7, #12]
 801485a:	f000 ff6b 	bl	8015734 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	3328      	adds	r3, #40	; 0x28
 8014862:	2200      	movs	r2, #0
 8014864:	4619      	mov	r1, r3
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f002 fb1e 	bl	8016ea8 <etharp_query>
 801486c:	4603      	mov	r3, r0
 801486e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	7a9b      	ldrb	r3, [r3, #10]
 8014874:	2bff      	cmp	r3, #255	; 0xff
 8014876:	d005      	beq.n	8014884 <dhcp_check+0x3c>
    dhcp->tries++;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	7a9b      	ldrb	r3, [r3, #10]
 801487c:	3301      	adds	r3, #1
 801487e:	b2da      	uxtb	r2, r3
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8014884:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014888:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801488a:	893b      	ldrh	r3, [r7, #8]
 801488c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014890:	4a06      	ldr	r2, [pc, #24]	; (80148ac <dhcp_check+0x64>)
 8014892:	fb82 1203 	smull	r1, r2, r2, r3
 8014896:	1152      	asrs	r2, r2, #5
 8014898:	17db      	asrs	r3, r3, #31
 801489a:	1ad3      	subs	r3, r2, r3
 801489c:	b29a      	uxth	r2, r3
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80148a2:	bf00      	nop
 80148a4:	3710      	adds	r7, #16
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	10624dd3 	.word	0x10624dd3

080148b0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6a1b      	ldr	r3, [r3, #32]
 80148bc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80148be:	4b0c      	ldr	r3, [pc, #48]	; (80148f0 <dhcp_handle_offer+0x40>)
 80148c0:	789b      	ldrb	r3, [r3, #2]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d00f      	beq.n	80148e6 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80148c6:	4b0b      	ldr	r3, [pc, #44]	; (80148f4 <dhcp_handle_offer+0x44>)
 80148c8:	689b      	ldr	r3, [r3, #8]
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7f9 fa84 	bl	800ddd8 <lwip_htonl>
 80148d0:	4602      	mov	r2, r0
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	691a      	ldr	r2, [r3, #16]
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f000 f809 	bl	80148f8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 80148e6:	bf00      	nop
 80148e8:	3710      	adds	r7, #16
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	2000ab4c 	.word	0x2000ab4c
 80148f4:	2000ab54 	.word	0x2000ab54

080148f8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b088      	sub	sp, #32
 80148fc:	af02      	add	r7, sp, #8
 80148fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6a1b      	ldr	r3, [r3, #32]
 8014904:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014906:	2101      	movs	r1, #1
 8014908:	6938      	ldr	r0, [r7, #16]
 801490a:	f000 ff13 	bl	8015734 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801490e:	2203      	movs	r2, #3
 8014910:	6939      	ldr	r1, [r7, #16]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f001 fb94 	bl	8016040 <dhcp_create_msg>
 8014918:	4603      	mov	r3, r0
 801491a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801491c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d159      	bne.n	80149d8 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014924:	2202      	movs	r2, #2
 8014926:	2139      	movs	r1, #57	; 0x39
 8014928:	6938      	ldr	r0, [r7, #16]
 801492a:	f000 ff1d 	bl	8015768 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014932:	4619      	mov	r1, r3
 8014934:	6938      	ldr	r0, [r7, #16]
 8014936:	f000 ff79 	bl	801582c <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801493a:	2204      	movs	r2, #4
 801493c:	2132      	movs	r1, #50	; 0x32
 801493e:	6938      	ldr	r0, [r7, #16]
 8014940:	f000 ff12 	bl	8015768 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014948:	4618      	mov	r0, r3
 801494a:	f7f9 fa45 	bl	800ddd8 <lwip_htonl>
 801494e:	4603      	mov	r3, r0
 8014950:	4619      	mov	r1, r3
 8014952:	6938      	ldr	r0, [r7, #16]
 8014954:	f000 ffa4 	bl	80158a0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8014958:	2204      	movs	r2, #4
 801495a:	2136      	movs	r1, #54	; 0x36
 801495c:	6938      	ldr	r0, [r7, #16]
 801495e:	f000 ff03 	bl	8015768 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014966:	4618      	mov	r0, r3
 8014968:	f7f9 fa36 	bl	800ddd8 <lwip_htonl>
 801496c:	4603      	mov	r3, r0
 801496e:	4619      	mov	r1, r3
 8014970:	6938      	ldr	r0, [r7, #16]
 8014972:	f000 ff95 	bl	80158a0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014976:	2203      	movs	r2, #3
 8014978:	2137      	movs	r1, #55	; 0x37
 801497a:	6938      	ldr	r0, [r7, #16]
 801497c:	f000 fef4 	bl	8015768 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014980:	2300      	movs	r3, #0
 8014982:	75fb      	strb	r3, [r7, #23]
 8014984:	e009      	b.n	801499a <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8014986:	7dfb      	ldrb	r3, [r7, #23]
 8014988:	4a29      	ldr	r2, [pc, #164]	; (8014a30 <dhcp_select+0x138>)
 801498a:	5cd3      	ldrb	r3, [r2, r3]
 801498c:	4619      	mov	r1, r3
 801498e:	6938      	ldr	r0, [r7, #16]
 8014990:	f000 ff24 	bl	80157dc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014994:	7dfb      	ldrb	r3, [r7, #23]
 8014996:	3301      	adds	r3, #1
 8014998:	75fb      	strb	r3, [r7, #23]
 801499a:	7dfb      	ldrb	r3, [r7, #23]
 801499c:	2b02      	cmp	r3, #2
 801499e:	d9f2      	bls.n	8014986 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 80149a0:	6938      	ldr	r0, [r7, #16]
 80149a2:	f001 fcf1 	bl	8016388 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	68da      	ldr	r2, [r3, #12]
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	8a9b      	ldrh	r3, [r3, #20]
 80149ae:	33f0      	adds	r3, #240	; 0xf0
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	4619      	mov	r1, r3
 80149b4:	4610      	mov	r0, r2
 80149b6:	f7fa fa2f 	bl	800ee18 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80149ba:	4b1e      	ldr	r3, [pc, #120]	; (8014a34 <dhcp_select+0x13c>)
 80149bc:	6818      	ldr	r0, [r3, #0]
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	68d9      	ldr	r1, [r3, #12]
 80149c2:	4b1d      	ldr	r3, [pc, #116]	; (8014a38 <dhcp_select+0x140>)
 80149c4:	9301      	str	r3, [sp, #4]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	9300      	str	r3, [sp, #0]
 80149ca:	2343      	movs	r3, #67	; 0x43
 80149cc:	4a1b      	ldr	r2, [pc, #108]	; (8014a3c <dhcp_select+0x144>)
 80149ce:	f7ff fcb9 	bl	8014344 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80149d2:	6938      	ldr	r0, [r7, #16]
 80149d4:	f001 fc96 	bl	8016304 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	7a9b      	ldrb	r3, [r3, #10]
 80149dc:	2bff      	cmp	r3, #255	; 0xff
 80149de:	d005      	beq.n	80149ec <dhcp_select+0xf4>
    dhcp->tries++;
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	7a9b      	ldrb	r3, [r3, #10]
 80149e4:	3301      	adds	r3, #1
 80149e6:	b2da      	uxtb	r2, r3
 80149e8:	693b      	ldr	r3, [r7, #16]
 80149ea:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80149ec:	693b      	ldr	r3, [r7, #16]
 80149ee:	7a9b      	ldrb	r3, [r3, #10]
 80149f0:	2b05      	cmp	r3, #5
 80149f2:	d807      	bhi.n	8014a04 <dhcp_select+0x10c>
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	7a9b      	ldrb	r3, [r3, #10]
 80149f8:	461a      	mov	r2, r3
 80149fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80149fe:	4093      	lsls	r3, r2
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	e001      	b.n	8014a08 <dhcp_select+0x110>
 8014a04:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014a08:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8014a0a:	89bb      	ldrh	r3, [r7, #12]
 8014a0c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014a10:	4a0b      	ldr	r2, [pc, #44]	; (8014a40 <dhcp_select+0x148>)
 8014a12:	fb82 1203 	smull	r1, r2, r2, r3
 8014a16:	1152      	asrs	r2, r2, #5
 8014a18:	17db      	asrs	r3, r3, #31
 8014a1a:	1ad3      	subs	r3, r2, r3
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3718      	adds	r7, #24
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	20000124 	.word	0x20000124
 8014a34:	20004248 	.word	0x20004248
 8014a38:	0801cce8 	.word	0x0801cce8
 8014a3c:	0801ccec 	.word	0x0801ccec
 8014a40:	10624dd3 	.word	0x10624dd3

08014a44 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8014a4a:	4b27      	ldr	r3, [pc, #156]	; (8014ae8 <dhcp_coarse_tmr+0xa4>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8014a50:	e042      	b.n	8014ad8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6a1b      	ldr	r3, [r3, #32]
 8014a56:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d039      	beq.n	8014ad2 <dhcp_coarse_tmr+0x8e>
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	7a5b      	ldrb	r3, [r3, #9]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d035      	beq.n	8014ad2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d012      	beq.n	8014a94 <dhcp_coarse_tmr+0x50>
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	8c1b      	ldrh	r3, [r3, #32]
 8014a72:	3301      	adds	r3, #1
 8014a74:	b29a      	uxth	r2, r3
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	841a      	strh	r2, [r3, #32]
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	8c1a      	ldrh	r2, [r3, #32]
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d106      	bne.n	8014a94 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 fd94 	bl	80155b4 <dhcp_release>
        dhcp_discover(netif);
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f000 fa8b 	bl	8014fa8 <dhcp_discover>
 8014a92:	e01e      	b.n	8014ad2 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	8bdb      	ldrh	r3, [r3, #30]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00b      	beq.n	8014ab4 <dhcp_coarse_tmr+0x70>
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	8bdb      	ldrh	r3, [r3, #30]
 8014aa0:	1e5a      	subs	r2, r3, #1
 8014aa2:	b291      	uxth	r1, r2
 8014aa4:	683a      	ldr	r2, [r7, #0]
 8014aa6:	83d1      	strh	r1, [r2, #30]
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d103      	bne.n	8014ab4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f000 f8c6 	bl	8014c3e <dhcp_t2_timeout>
 8014ab2:	e00e      	b.n	8014ad2 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	8b9b      	ldrh	r3, [r3, #28]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d00a      	beq.n	8014ad2 <dhcp_coarse_tmr+0x8e>
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	8b9b      	ldrh	r3, [r3, #28]
 8014ac0:	1e5a      	subs	r2, r3, #1
 8014ac2:	b291      	uxth	r1, r2
 8014ac4:	683a      	ldr	r2, [r7, #0]
 8014ac6:	8391      	strh	r1, [r2, #28]
 8014ac8:	2b01      	cmp	r3, #1
 8014aca:	d102      	bne.n	8014ad2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f000 f888 	bl	8014be2 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d1b9      	bne.n	8014a52 <dhcp_coarse_tmr+0xe>
  }
}
 8014ade:	bf00      	nop
 8014ae0:	3708      	adds	r7, #8
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	2000ab20 	.word	0x2000ab20

08014aec <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b082      	sub	sp, #8
 8014af0:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8014af2:	4b16      	ldr	r3, [pc, #88]	; (8014b4c <dhcp_fine_tmr+0x60>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8014af8:	e020      	b.n	8014b3c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6a1b      	ldr	r3, [r3, #32]
 8014afe:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d017      	beq.n	8014b36 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	8adb      	ldrh	r3, [r3, #22]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d906      	bls.n	8014b1c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	8adb      	ldrh	r3, [r3, #22]
 8014b12:	3b01      	subs	r3, #1
 8014b14:	b29a      	uxth	r2, r3
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	82da      	strh	r2, [r3, #22]
 8014b1a:	e00c      	b.n	8014b36 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	8adb      	ldrh	r3, [r3, #22]
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d108      	bne.n	8014b36 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	8adb      	ldrh	r3, [r3, #22]
 8014b28:	3b01      	subs	r3, #1
 8014b2a:	b29a      	uxth	r2, r3
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f000 f80d 	bl	8014b50 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d1db      	bne.n	8014afa <dhcp_fine_tmr+0xe>
  }
}
 8014b42:	bf00      	nop
 8014b44:	3708      	adds	r7, #8
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	2000ab20 	.word	0x2000ab20

08014b50 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6a1b      	ldr	r3, [r3, #32]
 8014b5c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	7a5b      	ldrb	r3, [r3, #9]
 8014b62:	2b0c      	cmp	r3, #12
 8014b64:	d003      	beq.n	8014b6e <dhcp_timeout+0x1e>
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	7a5b      	ldrb	r3, [r3, #9]
 8014b6a:	2b06      	cmp	r3, #6
 8014b6c:	d103      	bne.n	8014b76 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f000 fa1a 	bl	8014fa8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014b74:	e031      	b.n	8014bda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	7a5b      	ldrb	r3, [r3, #9]
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	d10e      	bne.n	8014b9c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	7a9b      	ldrb	r3, [r3, #10]
 8014b82:	2b05      	cmp	r3, #5
 8014b84:	d803      	bhi.n	8014b8e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f7ff feb6 	bl	80148f8 <dhcp_select>
}
 8014b8c:	e025      	b.n	8014bda <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f000 fd10 	bl	80155b4 <dhcp_release>
      dhcp_discover(netif);
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f000 fa07 	bl	8014fa8 <dhcp_discover>
}
 8014b9a:	e01e      	b.n	8014bda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	7a5b      	ldrb	r3, [r3, #9]
 8014ba0:	2b08      	cmp	r3, #8
 8014ba2:	d10b      	bne.n	8014bbc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	7a9b      	ldrb	r3, [r3, #10]
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	d803      	bhi.n	8014bb4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f7ff fe4b 	bl	8014848 <dhcp_check>
}
 8014bb2:	e012      	b.n	8014bda <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f000 fa83 	bl	80150c0 <dhcp_bind>
}
 8014bba:	e00e      	b.n	8014bda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	7a5b      	ldrb	r3, [r3, #9]
 8014bc0:	2b03      	cmp	r3, #3
 8014bc2:	d10a      	bne.n	8014bda <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	7a9b      	ldrb	r3, [r3, #10]
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d803      	bhi.n	8014bd4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f000 fc5d 	bl	801548c <dhcp_reboot>
}
 8014bd2:	e002      	b.n	8014bda <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f000 f9e7 	bl	8014fa8 <dhcp_discover>
}
 8014bda:	bf00      	nop
 8014bdc:	3710      	adds	r7, #16
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}

08014be2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014be2:	b580      	push	{r7, lr}
 8014be4:	b084      	sub	sp, #16
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6a1b      	ldr	r3, [r3, #32]
 8014bee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	7a5b      	ldrb	r3, [r3, #9]
 8014bf4:	2b01      	cmp	r3, #1
 8014bf6:	d007      	beq.n	8014c08 <dhcp_t1_timeout+0x26>
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	7a5b      	ldrb	r3, [r3, #9]
 8014bfc:	2b0a      	cmp	r3, #10
 8014bfe:	d003      	beq.n	8014c08 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c04:	2b05      	cmp	r3, #5
 8014c06:	d116      	bne.n	8014c36 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f000 fb33 	bl	8015274 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	8b5b      	ldrh	r3, [r3, #26]
 8014c12:	461a      	mov	r2, r3
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	8c1b      	ldrh	r3, [r3, #32]
 8014c18:	1ad3      	subs	r3, r2, r3
 8014c1a:	2b01      	cmp	r3, #1
 8014c1c:	dd0b      	ble.n	8014c36 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	8b5b      	ldrh	r3, [r3, #26]
 8014c22:	461a      	mov	r2, r3
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	8c1b      	ldrh	r3, [r3, #32]
 8014c28:	1ad3      	subs	r3, r2, r3
 8014c2a:	0fda      	lsrs	r2, r3, #31
 8014c2c:	4413      	add	r3, r2
 8014c2e:	105b      	asrs	r3, r3, #1
 8014c30:	b29a      	uxth	r2, r3
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8014c36:	bf00      	nop
 8014c38:	3710      	adds	r7, #16
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}

08014c3e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014c3e:	b580      	push	{r7, lr}
 8014c40:	b084      	sub	sp, #16
 8014c42:	af00      	add	r7, sp, #0
 8014c44:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6a1b      	ldr	r3, [r3, #32]
 8014c4a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	7a5b      	ldrb	r3, [r3, #9]
 8014c50:	2b01      	cmp	r3, #1
 8014c52:	d00b      	beq.n	8014c6c <dhcp_t2_timeout+0x2e>
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	7a5b      	ldrb	r3, [r3, #9]
 8014c58:	2b0a      	cmp	r3, #10
 8014c5a:	d007      	beq.n	8014c6c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c60:	2b05      	cmp	r3, #5
 8014c62:	d003      	beq.n	8014c6c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	7a5b      	ldrb	r3, [r3, #9]
 8014c68:	2b04      	cmp	r3, #4
 8014c6a:	d116      	bne.n	8014c9a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f000 fb87 	bl	8015380 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8014c76:	461a      	mov	r2, r3
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	8c1b      	ldrh	r3, [r3, #32]
 8014c7c:	1ad3      	subs	r3, r2, r3
 8014c7e:	2b01      	cmp	r3, #1
 8014c80:	dd0b      	ble.n	8014c9a <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8014c86:	461a      	mov	r2, r3
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	8c1b      	ldrh	r3, [r3, #32]
 8014c8c:	1ad3      	subs	r3, r2, r3
 8014c8e:	0fda      	lsrs	r2, r3, #31
 8014c90:	4413      	add	r3, r2
 8014c92:	105b      	asrs	r3, r3, #1
 8014c94:	b29a      	uxth	r2, r3
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8014c9a:	bf00      	nop
 8014c9c:	3710      	adds	r7, #16
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}
	...

08014ca4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6a1b      	ldr	r3, [r3, #32]
 8014cb0:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014cbe:	4b27      	ldr	r3, [pc, #156]	; (8014d5c <dhcp_handle_ack+0xb8>)
 8014cc0:	78db      	ldrb	r3, [r3, #3]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d003      	beq.n	8014cce <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014cc6:	4b26      	ldr	r3, [pc, #152]	; (8014d60 <dhcp_handle_ack+0xbc>)
 8014cc8:	68da      	ldr	r2, [r3, #12]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014cce:	4b23      	ldr	r3, [pc, #140]	; (8014d5c <dhcp_handle_ack+0xb8>)
 8014cd0:	791b      	ldrb	r3, [r3, #4]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d004      	beq.n	8014ce0 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014cd6:	4b22      	ldr	r3, [pc, #136]	; (8014d60 <dhcp_handle_ack+0xbc>)
 8014cd8:	691a      	ldr	r2, [r3, #16]
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8014cde:	e004      	b.n	8014cea <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ce4:	085a      	lsrs	r2, r3, #1
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014cea:	4b1c      	ldr	r3, [pc, #112]	; (8014d5c <dhcp_handle_ack+0xb8>)
 8014cec:	795b      	ldrb	r3, [r3, #5]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d004      	beq.n	8014cfc <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014cf2:	4b1b      	ldr	r3, [pc, #108]	; (8014d60 <dhcp_handle_ack+0xbc>)
 8014cf4:	695a      	ldr	r2, [r3, #20]
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	63da      	str	r2, [r3, #60]	; 0x3c
 8014cfa:	e007      	b.n	8014d0c <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014d00:	4613      	mov	r3, r2
 8014d02:	00db      	lsls	r3, r3, #3
 8014d04:	1a9b      	subs	r3, r3, r2
 8014d06:	08da      	lsrs	r2, r3, #3
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	685b      	ldr	r3, [r3, #4]
 8014d10:	691a      	ldr	r2, [r3, #16]
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014d16:	4b11      	ldr	r3, [pc, #68]	; (8014d5c <dhcp_handle_ack+0xb8>)
 8014d18:	799b      	ldrb	r3, [r3, #6]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d00b      	beq.n	8014d36 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014d1e:	4b10      	ldr	r3, [pc, #64]	; (8014d60 <dhcp_handle_ack+0xbc>)
 8014d20:	699b      	ldr	r3, [r3, #24]
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7f9 f858 	bl	800ddd8 <lwip_htonl>
 8014d28:	4602      	mov	r2, r0
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	2201      	movs	r2, #1
 8014d32:	72da      	strb	r2, [r3, #11]
 8014d34:	e002      	b.n	8014d3c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014d3c:	4b07      	ldr	r3, [pc, #28]	; (8014d5c <dhcp_handle_ack+0xb8>)
 8014d3e:	79db      	ldrb	r3, [r3, #7]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d007      	beq.n	8014d54 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014d44:	4b06      	ldr	r3, [pc, #24]	; (8014d60 <dhcp_handle_ack+0xbc>)
 8014d46:	69db      	ldr	r3, [r3, #28]
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7f9 f845 	bl	800ddd8 <lwip_htonl>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014d54:	bf00      	nop
 8014d56:	3710      	adds	r7, #16
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}
 8014d5c:	2000ab4c 	.word	0x2000ab4c
 8014d60:	2000ab54 	.word	0x2000ab54

08014d64 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d109      	bne.n	8014d86 <dhcp_start+0x22>
 8014d72:	4b3c      	ldr	r3, [pc, #240]	; (8014e64 <dhcp_start+0x100>)
 8014d74:	f240 22d6 	movw	r2, #726	; 0x2d6
 8014d78:	493b      	ldr	r1, [pc, #236]	; (8014e68 <dhcp_start+0x104>)
 8014d7a:	483c      	ldr	r0, [pc, #240]	; (8014e6c <dhcp_start+0x108>)
 8014d7c:	f004 fcb2 	bl	80196e4 <iprintf>
 8014d80:	f06f 030f 	mvn.w	r3, #15
 8014d84:	e069      	b.n	8014e5a <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014d8c:	f003 0301 	and.w	r3, r3, #1
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d109      	bne.n	8014da8 <dhcp_start+0x44>
 8014d94:	4b33      	ldr	r3, [pc, #204]	; (8014e64 <dhcp_start+0x100>)
 8014d96:	f240 22d7 	movw	r2, #727	; 0x2d7
 8014d9a:	4935      	ldr	r1, [pc, #212]	; (8014e70 <dhcp_start+0x10c>)
 8014d9c:	4833      	ldr	r0, [pc, #204]	; (8014e6c <dhcp_start+0x108>)
 8014d9e:	f004 fca1 	bl	80196e4 <iprintf>
 8014da2:	f06f 030f 	mvn.w	r3, #15
 8014da6:	e058      	b.n	8014e5a <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6a1b      	ldr	r3, [r3, #32]
 8014dac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014db2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014db6:	d202      	bcs.n	8014dbe <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dbc:	e04d      	b.n	8014e5a <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10d      	bne.n	8014de0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014dc4:	2040      	movs	r0, #64	; 0x40
 8014dc6:	f7f9 fa77 	bl	800e2b8 <mem_malloc>
 8014dca:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d102      	bne.n	8014dd8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dd6:	e040      	b.n	8014e5a <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	68fa      	ldr	r2, [r7, #12]
 8014ddc:	621a      	str	r2, [r3, #32]
 8014dde:	e01b      	b.n	8014e18 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d006      	beq.n	8014df6 <dhcp_start+0x92>
 8014de8:	4b1e      	ldr	r3, [pc, #120]	; (8014e64 <dhcp_start+0x100>)
 8014dea:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8014dee:	4921      	ldr	r1, [pc, #132]	; (8014e74 <dhcp_start+0x110>)
 8014df0:	481e      	ldr	r0, [pc, #120]	; (8014e6c <dhcp_start+0x108>)
 8014df2:	f004 fc77 	bl	80196e4 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	685b      	ldr	r3, [r3, #4]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d006      	beq.n	8014e0c <dhcp_start+0xa8>
 8014dfe:	4b19      	ldr	r3, [pc, #100]	; (8014e64 <dhcp_start+0x100>)
 8014e00:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014e04:	491c      	ldr	r1, [pc, #112]	; (8014e78 <dhcp_start+0x114>)
 8014e06:	4819      	ldr	r0, [pc, #100]	; (8014e6c <dhcp_start+0x108>)
 8014e08:	f004 fc6c 	bl	80196e4 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	7a1b      	ldrb	r3, [r3, #8]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d001      	beq.n	8014e18 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014e14:	f7ff fcd4 	bl	80147c0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014e18:	2240      	movs	r2, #64	; 0x40
 8014e1a:	2100      	movs	r1, #0
 8014e1c:	68f8      	ldr	r0, [r7, #12]
 8014e1e:	f004 fbb1 	bl	8019584 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014e22:	f7ff fc7b 	bl	801471c <dhcp_inc_pcb_refcount>
 8014e26:	4603      	mov	r3, r0
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d002      	beq.n	8014e32 <dhcp_start+0xce>
    return ERR_MEM;
 8014e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e30:	e013      	b.n	8014e5a <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	2201      	movs	r2, #1
 8014e36:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f000 f8b5 	bl	8014fa8 <dhcp_discover>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014e42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d005      	beq.n	8014e56 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 fc3a 	bl	80156c4 <dhcp_stop>
    return ERR_MEM;
 8014e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e54:	e001      	b.n	8014e5a <dhcp_start+0xf6>
  }
  return result;
 8014e56:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3710      	adds	r7, #16
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop
 8014e64:	0801bfec 	.word	0x0801bfec
 8014e68:	0801c098 	.word	0x0801c098
 8014e6c:	0801c04c 	.word	0x0801c04c
 8014e70:	0801c0dc 	.word	0x0801c0dc
 8014e74:	0801c100 	.word	0x0801c100
 8014e78:	0801c118 	.word	0x0801c118

08014e7c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d107      	bne.n	8014e9c <dhcp_arp_reply+0x20>
 8014e8c:	4b0e      	ldr	r3, [pc, #56]	; (8014ec8 <dhcp_arp_reply+0x4c>)
 8014e8e:	f240 327b 	movw	r2, #891	; 0x37b
 8014e92:	490e      	ldr	r1, [pc, #56]	; (8014ecc <dhcp_arp_reply+0x50>)
 8014e94:	480e      	ldr	r0, [pc, #56]	; (8014ed0 <dhcp_arp_reply+0x54>)
 8014e96:	f004 fc25 	bl	80196e4 <iprintf>
 8014e9a:	e012      	b.n	8014ec2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6a1b      	ldr	r3, [r3, #32]
 8014ea0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d00c      	beq.n	8014ec2 <dhcp_arp_reply+0x46>
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	7a5b      	ldrb	r3, [r3, #9]
 8014eac:	2b08      	cmp	r3, #8
 8014eae:	d108      	bne.n	8014ec2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	681a      	ldr	r2, [r3, #0]
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d102      	bne.n	8014ec2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f000 f809 	bl	8014ed4 <dhcp_decline>
    }
  }
}
 8014ec2:	3710      	adds	r7, #16
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	0801bfec 	.word	0x0801bfec
 8014ecc:	0801c098 	.word	0x0801c098
 8014ed0:	0801c04c 	.word	0x0801c04c

08014ed4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b086      	sub	sp, #24
 8014ed8:	af02      	add	r7, sp, #8
 8014eda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6a1b      	ldr	r3, [r3, #32]
 8014ee0:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014ee6:	210c      	movs	r1, #12
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	f000 fc23 	bl	8015734 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8014eee:	2204      	movs	r2, #4
 8014ef0:	68f9      	ldr	r1, [r7, #12]
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f001 f8a4 	bl	8016040 <dhcp_create_msg>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8014efc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d12a      	bne.n	8014f5a <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8014f04:	2204      	movs	r2, #4
 8014f06:	2132      	movs	r1, #50	; 0x32
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f000 fc2d 	bl	8015768 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7f8 ff60 	bl	800ddd8 <lwip_htonl>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	68f8      	ldr	r0, [r7, #12]
 8014f1e:	f000 fcbf 	bl	80158a0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8014f22:	68f8      	ldr	r0, [r7, #12]
 8014f24:	f001 fa30 	bl	8016388 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	68da      	ldr	r2, [r3, #12]
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	8a9b      	ldrh	r3, [r3, #20]
 8014f30:	33f0      	adds	r3, #240	; 0xf0
 8014f32:	b29b      	uxth	r3, r3
 8014f34:	4619      	mov	r1, r3
 8014f36:	4610      	mov	r0, r2
 8014f38:	f7f9 ff6e 	bl	800ee18 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8014f3c:	4b16      	ldr	r3, [pc, #88]	; (8014f98 <dhcp_decline+0xc4>)
 8014f3e:	6818      	ldr	r0, [r3, #0]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	68d9      	ldr	r1, [r3, #12]
 8014f44:	4b15      	ldr	r3, [pc, #84]	; (8014f9c <dhcp_decline+0xc8>)
 8014f46:	9301      	str	r3, [sp, #4]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	9300      	str	r3, [sp, #0]
 8014f4c:	2343      	movs	r3, #67	; 0x43
 8014f4e:	4a14      	ldr	r2, [pc, #80]	; (8014fa0 <dhcp_decline+0xcc>)
 8014f50:	f7ff f9f8 	bl	8014344 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8014f54:	68f8      	ldr	r0, [r7, #12]
 8014f56:	f001 f9d5 	bl	8016304 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	7a9b      	ldrb	r3, [r3, #10]
 8014f5e:	2bff      	cmp	r3, #255	; 0xff
 8014f60:	d005      	beq.n	8014f6e <dhcp_decline+0x9a>
    dhcp->tries++;
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	7a9b      	ldrb	r3, [r3, #10]
 8014f66:	3301      	adds	r3, #1
 8014f68:	b2da      	uxtb	r2, r3
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8014f6e:	f242 7310 	movw	r3, #10000	; 0x2710
 8014f72:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8014f74:	893b      	ldrh	r3, [r7, #8]
 8014f76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014f7a:	4a0a      	ldr	r2, [pc, #40]	; (8014fa4 <dhcp_decline+0xd0>)
 8014f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8014f80:	1152      	asrs	r2, r2, #5
 8014f82:	17db      	asrs	r3, r3, #31
 8014f84:	1ad3      	subs	r3, r2, r3
 8014f86:	b29a      	uxth	r2, r3
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014f8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3710      	adds	r7, #16
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	20004248 	.word	0x20004248
 8014f9c:	0801cce8 	.word	0x0801cce8
 8014fa0:	0801ccec 	.word	0x0801ccec
 8014fa4:	10624dd3 	.word	0x10624dd3

08014fa8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b088      	sub	sp, #32
 8014fac:	af02      	add	r7, sp, #8
 8014fae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	6a1b      	ldr	r3, [r3, #32]
 8014fb4:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014fc0:	2106      	movs	r1, #6
 8014fc2:	6938      	ldr	r0, [r7, #16]
 8014fc4:	f000 fbb6 	bl	8015734 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8014fc8:	2201      	movs	r2, #1
 8014fca:	6939      	ldr	r1, [r7, #16]
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f001 f837 	bl	8016040 <dhcp_create_msg>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8014fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d13b      	bne.n	8015056 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014fde:	2202      	movs	r2, #2
 8014fe0:	2139      	movs	r1, #57	; 0x39
 8014fe2:	6938      	ldr	r0, [r7, #16]
 8014fe4:	f000 fbc0 	bl	8015768 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014fec:	4619      	mov	r1, r3
 8014fee:	6938      	ldr	r0, [r7, #16]
 8014ff0:	f000 fc1c 	bl	801582c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014ff4:	2203      	movs	r2, #3
 8014ff6:	2137      	movs	r1, #55	; 0x37
 8014ff8:	6938      	ldr	r0, [r7, #16]
 8014ffa:	f000 fbb5 	bl	8015768 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ffe:	2300      	movs	r3, #0
 8015000:	75fb      	strb	r3, [r7, #23]
 8015002:	e009      	b.n	8015018 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8015004:	7dfb      	ldrb	r3, [r7, #23]
 8015006:	4a29      	ldr	r2, [pc, #164]	; (80150ac <dhcp_discover+0x104>)
 8015008:	5cd3      	ldrb	r3, [r2, r3]
 801500a:	4619      	mov	r1, r3
 801500c:	6938      	ldr	r0, [r7, #16]
 801500e:	f000 fbe5 	bl	80157dc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015012:	7dfb      	ldrb	r3, [r7, #23]
 8015014:	3301      	adds	r3, #1
 8015016:	75fb      	strb	r3, [r7, #23]
 8015018:	7dfb      	ldrb	r3, [r7, #23]
 801501a:	2b02      	cmp	r3, #2
 801501c:	d9f2      	bls.n	8015004 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 801501e:	6938      	ldr	r0, [r7, #16]
 8015020:	f001 f9b2 	bl	8016388 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	68da      	ldr	r2, [r3, #12]
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	8a9b      	ldrh	r3, [r3, #20]
 801502c:	33f0      	adds	r3, #240	; 0xf0
 801502e:	b29b      	uxth	r3, r3
 8015030:	4619      	mov	r1, r3
 8015032:	4610      	mov	r0, r2
 8015034:	f7f9 fef0 	bl	800ee18 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8015038:	4b1d      	ldr	r3, [pc, #116]	; (80150b0 <dhcp_discover+0x108>)
 801503a:	6818      	ldr	r0, [r3, #0]
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	68d9      	ldr	r1, [r3, #12]
 8015040:	4b1c      	ldr	r3, [pc, #112]	; (80150b4 <dhcp_discover+0x10c>)
 8015042:	9301      	str	r3, [sp, #4]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	9300      	str	r3, [sp, #0]
 8015048:	2343      	movs	r3, #67	; 0x43
 801504a:	4a1b      	ldr	r2, [pc, #108]	; (80150b8 <dhcp_discover+0x110>)
 801504c:	f7ff f97a 	bl	8014344 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8015050:	6938      	ldr	r0, [r7, #16]
 8015052:	f001 f957 	bl	8016304 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	7a9b      	ldrb	r3, [r3, #10]
 801505a:	2bff      	cmp	r3, #255	; 0xff
 801505c:	d005      	beq.n	801506a <dhcp_discover+0xc2>
    dhcp->tries++;
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	7a9b      	ldrb	r3, [r3, #10]
 8015062:	3301      	adds	r3, #1
 8015064:	b2da      	uxtb	r2, r3
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	7a9b      	ldrb	r3, [r3, #10]
 801506e:	2b05      	cmp	r3, #5
 8015070:	d807      	bhi.n	8015082 <dhcp_discover+0xda>
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	7a9b      	ldrb	r3, [r3, #10]
 8015076:	461a      	mov	r2, r3
 8015078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801507c:	4093      	lsls	r3, r2
 801507e:	b29b      	uxth	r3, r3
 8015080:	e001      	b.n	8015086 <dhcp_discover+0xde>
 8015082:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015086:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8015088:	89bb      	ldrh	r3, [r7, #12]
 801508a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801508e:	4a0b      	ldr	r2, [pc, #44]	; (80150bc <dhcp_discover+0x114>)
 8015090:	fb82 1203 	smull	r1, r2, r2, r3
 8015094:	1152      	asrs	r2, r2, #5
 8015096:	17db      	asrs	r3, r3, #31
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	b29a      	uxth	r2, r3
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80150a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3718      	adds	r7, #24
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	20000124 	.word	0x20000124
 80150b0:	20004248 	.word	0x20004248
 80150b4:	0801cce8 	.word	0x0801cce8
 80150b8:	0801ccec 	.word	0x0801ccec
 80150bc:	10624dd3 	.word	0x10624dd3

080150c0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b088      	sub	sp, #32
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d107      	bne.n	80150de <dhcp_bind+0x1e>
 80150ce:	4b64      	ldr	r3, [pc, #400]	; (8015260 <dhcp_bind+0x1a0>)
 80150d0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80150d4:	4963      	ldr	r1, [pc, #396]	; (8015264 <dhcp_bind+0x1a4>)
 80150d6:	4864      	ldr	r0, [pc, #400]	; (8015268 <dhcp_bind+0x1a8>)
 80150d8:	f004 fb04 	bl	80196e4 <iprintf>
 80150dc:	e0bc      	b.n	8015258 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6a1b      	ldr	r3, [r3, #32]
 80150e2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80150e4:	69bb      	ldr	r3, [r7, #24]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d107      	bne.n	80150fa <dhcp_bind+0x3a>
 80150ea:	4b5d      	ldr	r3, [pc, #372]	; (8015260 <dhcp_bind+0x1a0>)
 80150ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80150f0:	495e      	ldr	r1, [pc, #376]	; (801526c <dhcp_bind+0x1ac>)
 80150f2:	485d      	ldr	r0, [pc, #372]	; (8015268 <dhcp_bind+0x1a8>)
 80150f4:	f004 faf6 	bl	80196e4 <iprintf>
 80150f8:	e0ae      	b.n	8015258 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	2200      	movs	r2, #0
 80150fe:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015108:	d019      	beq.n	801513e <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801510e:	331e      	adds	r3, #30
 8015110:	4a57      	ldr	r2, [pc, #348]	; (8015270 <dhcp_bind+0x1b0>)
 8015112:	fba2 2303 	umull	r2, r3, r2, r3
 8015116:	095b      	lsrs	r3, r3, #5
 8015118:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801511a:	69fb      	ldr	r3, [r7, #28]
 801511c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015120:	d302      	bcc.n	8015128 <dhcp_bind+0x68>
       timeout = 0xffff;
 8015122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015126:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	b29a      	uxth	r2, r3
 801512c:	69bb      	ldr	r3, [r7, #24]
 801512e:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8015134:	2b00      	cmp	r3, #0
 8015136:	d102      	bne.n	801513e <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8015138:	69bb      	ldr	r3, [r7, #24]
 801513a:	2201      	movs	r2, #1
 801513c:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015146:	d01d      	beq.n	8015184 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015148:	69bb      	ldr	r3, [r7, #24]
 801514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801514c:	331e      	adds	r3, #30
 801514e:	4a48      	ldr	r2, [pc, #288]	; (8015270 <dhcp_bind+0x1b0>)
 8015150:	fba2 2303 	umull	r2, r3, r2, r3
 8015154:	095b      	lsrs	r3, r3, #5
 8015156:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801515e:	d302      	bcc.n	8015166 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015164:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	b29a      	uxth	r2, r3
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	8b1b      	ldrh	r3, [r3, #24]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d102      	bne.n	801517c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015176:	69bb      	ldr	r3, [r7, #24]
 8015178:	2201      	movs	r2, #1
 801517a:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	8b1a      	ldrh	r2, [r3, #24]
 8015180:	69bb      	ldr	r3, [r7, #24]
 8015182:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015184:	69bb      	ldr	r3, [r7, #24]
 8015186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801518c:	d01d      	beq.n	80151ca <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801518e:	69bb      	ldr	r3, [r7, #24]
 8015190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015192:	331e      	adds	r3, #30
 8015194:	4a36      	ldr	r2, [pc, #216]	; (8015270 <dhcp_bind+0x1b0>)
 8015196:	fba2 2303 	umull	r2, r3, r2, r3
 801519a:	095b      	lsrs	r3, r3, #5
 801519c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801519e:	69fb      	ldr	r3, [r7, #28]
 80151a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80151a4:	d302      	bcc.n	80151ac <dhcp_bind+0xec>
      timeout = 0xffff;
 80151a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151aa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80151ac:	69fb      	ldr	r3, [r7, #28]
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	69bb      	ldr	r3, [r7, #24]
 80151b2:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 80151b4:	69bb      	ldr	r3, [r7, #24]
 80151b6:	8b5b      	ldrh	r3, [r3, #26]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d102      	bne.n	80151c2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80151bc:	69bb      	ldr	r3, [r7, #24]
 80151be:	2201      	movs	r2, #1
 80151c0:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	8b5a      	ldrh	r2, [r3, #26]
 80151c6:	69bb      	ldr	r3, [r7, #24]
 80151c8:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80151ca:	69bb      	ldr	r3, [r7, #24]
 80151cc:	8b1a      	ldrh	r2, [r3, #24]
 80151ce:	69bb      	ldr	r3, [r7, #24]
 80151d0:	8b5b      	ldrh	r3, [r3, #26]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d306      	bcc.n	80151e4 <dhcp_bind+0x124>
 80151d6:	69bb      	ldr	r3, [r7, #24]
 80151d8:	8b5b      	ldrh	r3, [r3, #26]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d002      	beq.n	80151e4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	2200      	movs	r2, #0
 80151e2:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 80151e4:	69bb      	ldr	r3, [r7, #24]
 80151e6:	7adb      	ldrb	r3, [r3, #11]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d003      	beq.n	80151f4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80151ec:	69bb      	ldr	r3, [r7, #24]
 80151ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151f0:	613b      	str	r3, [r7, #16]
 80151f2:	e014      	b.n	801521e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80151f4:	69bb      	ldr	r3, [r7, #24]
 80151f6:	3328      	adds	r3, #40	; 0x28
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80151fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015200:	2b00      	cmp	r3, #0
 8015202:	db02      	blt.n	801520a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015204:	23ff      	movs	r3, #255	; 0xff
 8015206:	613b      	str	r3, [r7, #16]
 8015208:	e009      	b.n	801521e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801520a:	7dfb      	ldrb	r3, [r7, #23]
 801520c:	2bbf      	cmp	r3, #191	; 0xbf
 801520e:	d903      	bls.n	8015218 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015210:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015214:	613b      	str	r3, [r7, #16]
 8015216:	e002      	b.n	801521e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801521c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801521e:	69bb      	ldr	r3, [r7, #24]
 8015220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015222:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d108      	bne.n	801523c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	4013      	ands	r3, r2
 8015232:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801523a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801523c:	210a      	movs	r1, #10
 801523e:	69b8      	ldr	r0, [r7, #24]
 8015240:	f000 fa78 	bl	8015734 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015244:	69bb      	ldr	r3, [r7, #24]
 8015246:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801524a:	f107 030c 	add.w	r3, r7, #12
 801524e:	f107 0210 	add.w	r2, r7, #16
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7f9 fa80 	bl	800e758 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015258:	3720      	adds	r7, #32
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	0801bfec 	.word	0x0801bfec
 8015264:	0801c12c 	.word	0x0801c12c
 8015268:	0801c04c 	.word	0x0801c04c
 801526c:	0801c148 	.word	0x0801c148
 8015270:	88888889 	.word	0x88888889

08015274 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b088      	sub	sp, #32
 8015278:	af02      	add	r7, sp, #8
 801527a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6a1b      	ldr	r3, [r3, #32]
 8015280:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015282:	2105      	movs	r1, #5
 8015284:	6938      	ldr	r0, [r7, #16]
 8015286:	f000 fa55 	bl	8015734 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801528a:	2203      	movs	r2, #3
 801528c:	6939      	ldr	r1, [r7, #16]
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f000 fed6 	bl	8016040 <dhcp_create_msg>
 8015294:	4603      	mov	r3, r0
 8015296:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8015298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d13b      	bne.n	8015318 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80152a0:	2202      	movs	r2, #2
 80152a2:	2139      	movs	r1, #57	; 0x39
 80152a4:	6938      	ldr	r0, [r7, #16]
 80152a6:	f000 fa5f 	bl	8015768 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80152ae:	4619      	mov	r1, r3
 80152b0:	6938      	ldr	r0, [r7, #16]
 80152b2:	f000 fabb 	bl	801582c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80152b6:	2203      	movs	r2, #3
 80152b8:	2137      	movs	r1, #55	; 0x37
 80152ba:	6938      	ldr	r0, [r7, #16]
 80152bc:	f000 fa54 	bl	8015768 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80152c0:	2300      	movs	r3, #0
 80152c2:	75fb      	strb	r3, [r7, #23]
 80152c4:	e009      	b.n	80152da <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80152c6:	7dfb      	ldrb	r3, [r7, #23]
 80152c8:	4a2a      	ldr	r2, [pc, #168]	; (8015374 <dhcp_renew+0x100>)
 80152ca:	5cd3      	ldrb	r3, [r2, r3]
 80152cc:	4619      	mov	r1, r3
 80152ce:	6938      	ldr	r0, [r7, #16]
 80152d0:	f000 fa84 	bl	80157dc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80152d4:	7dfb      	ldrb	r3, [r7, #23]
 80152d6:	3301      	adds	r3, #1
 80152d8:	75fb      	strb	r3, [r7, #23]
 80152da:	7dfb      	ldrb	r3, [r7, #23]
 80152dc:	2b02      	cmp	r3, #2
 80152de:	d9f2      	bls.n	80152c6 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 80152e0:	6938      	ldr	r0, [r7, #16]
 80152e2:	f001 f851 	bl	8016388 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	68da      	ldr	r2, [r3, #12]
 80152ea:	693b      	ldr	r3, [r7, #16]
 80152ec:	8a9b      	ldrh	r3, [r3, #20]
 80152ee:	33f0      	adds	r3, #240	; 0xf0
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	4619      	mov	r1, r3
 80152f4:	4610      	mov	r0, r2
 80152f6:	f7f9 fd8f 	bl	800ee18 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 80152fa:	4b1f      	ldr	r3, [pc, #124]	; (8015378 <dhcp_renew+0x104>)
 80152fc:	6818      	ldr	r0, [r3, #0]
 80152fe:	693b      	ldr	r3, [r7, #16]
 8015300:	68d9      	ldr	r1, [r3, #12]
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	9300      	str	r3, [sp, #0]
 801530c:	2343      	movs	r3, #67	; 0x43
 801530e:	f7fe ffdb 	bl	80142c8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8015312:	6938      	ldr	r0, [r7, #16]
 8015314:	f000 fff6 	bl	8016304 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	7a9b      	ldrb	r3, [r3, #10]
 801531c:	2bff      	cmp	r3, #255	; 0xff
 801531e:	d005      	beq.n	801532c <dhcp_renew+0xb8>
    dhcp->tries++;
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	7a9b      	ldrb	r3, [r3, #10]
 8015324:	3301      	adds	r3, #1
 8015326:	b2da      	uxtb	r2, r3
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	7a9b      	ldrb	r3, [r3, #10]
 8015330:	2b09      	cmp	r3, #9
 8015332:	d80a      	bhi.n	801534a <dhcp_renew+0xd6>
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	7a9b      	ldrb	r3, [r3, #10]
 8015338:	b29b      	uxth	r3, r3
 801533a:	461a      	mov	r2, r3
 801533c:	0152      	lsls	r2, r2, #5
 801533e:	1ad2      	subs	r2, r2, r3
 8015340:	0092      	lsls	r2, r2, #2
 8015342:	4413      	add	r3, r2
 8015344:	011b      	lsls	r3, r3, #4
 8015346:	b29b      	uxth	r3, r3
 8015348:	e001      	b.n	801534e <dhcp_renew+0xda>
 801534a:	f644 6320 	movw	r3, #20000	; 0x4e20
 801534e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8015350:	89bb      	ldrh	r3, [r7, #12]
 8015352:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015356:	4a09      	ldr	r2, [pc, #36]	; (801537c <dhcp_renew+0x108>)
 8015358:	fb82 1203 	smull	r1, r2, r2, r3
 801535c:	1152      	asrs	r2, r2, #5
 801535e:	17db      	asrs	r3, r3, #31
 8015360:	1ad3      	subs	r3, r2, r3
 8015362:	b29a      	uxth	r2, r3
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801536c:	4618      	mov	r0, r3
 801536e:	3718      	adds	r7, #24
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	20000124 	.word	0x20000124
 8015378:	20004248 	.word	0x20004248
 801537c:	10624dd3 	.word	0x10624dd3

08015380 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b088      	sub	sp, #32
 8015384:	af02      	add	r7, sp, #8
 8015386:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6a1b      	ldr	r3, [r3, #32]
 801538c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801538e:	2104      	movs	r1, #4
 8015390:	6938      	ldr	r0, [r7, #16]
 8015392:	f000 f9cf 	bl	8015734 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8015396:	2203      	movs	r2, #3
 8015398:	6939      	ldr	r1, [r7, #16]
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f000 fe50 	bl	8016040 <dhcp_create_msg>
 80153a0:	4603      	mov	r3, r0
 80153a2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80153a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d139      	bne.n	8015420 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80153ac:	2202      	movs	r2, #2
 80153ae:	2139      	movs	r1, #57	; 0x39
 80153b0:	6938      	ldr	r0, [r7, #16]
 80153b2:	f000 f9d9 	bl	8015768 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80153ba:	4619      	mov	r1, r3
 80153bc:	6938      	ldr	r0, [r7, #16]
 80153be:	f000 fa35 	bl	801582c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80153c2:	2203      	movs	r2, #3
 80153c4:	2137      	movs	r1, #55	; 0x37
 80153c6:	6938      	ldr	r0, [r7, #16]
 80153c8:	f000 f9ce 	bl	8015768 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80153cc:	2300      	movs	r3, #0
 80153ce:	75fb      	strb	r3, [r7, #23]
 80153d0:	e009      	b.n	80153e6 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80153d2:	7dfb      	ldrb	r3, [r7, #23]
 80153d4:	4a29      	ldr	r2, [pc, #164]	; (801547c <dhcp_rebind+0xfc>)
 80153d6:	5cd3      	ldrb	r3, [r2, r3]
 80153d8:	4619      	mov	r1, r3
 80153da:	6938      	ldr	r0, [r7, #16]
 80153dc:	f000 f9fe 	bl	80157dc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80153e0:	7dfb      	ldrb	r3, [r7, #23]
 80153e2:	3301      	adds	r3, #1
 80153e4:	75fb      	strb	r3, [r7, #23]
 80153e6:	7dfb      	ldrb	r3, [r7, #23]
 80153e8:	2b02      	cmp	r3, #2
 80153ea:	d9f2      	bls.n	80153d2 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 80153ec:	6938      	ldr	r0, [r7, #16]
 80153ee:	f000 ffcb 	bl	8016388 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	68da      	ldr	r2, [r3, #12]
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	8a9b      	ldrh	r3, [r3, #20]
 80153fa:	33f0      	adds	r3, #240	; 0xf0
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	4619      	mov	r1, r3
 8015400:	4610      	mov	r0, r2
 8015402:	f7f9 fd09 	bl	800ee18 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8015406:	4b1e      	ldr	r3, [pc, #120]	; (8015480 <dhcp_rebind+0x100>)
 8015408:	6818      	ldr	r0, [r3, #0]
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	68d9      	ldr	r1, [r3, #12]
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	9300      	str	r3, [sp, #0]
 8015412:	2343      	movs	r3, #67	; 0x43
 8015414:	4a1b      	ldr	r2, [pc, #108]	; (8015484 <dhcp_rebind+0x104>)
 8015416:	f7fe ff57 	bl	80142c8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801541a:	6938      	ldr	r0, [r7, #16]
 801541c:	f000 ff72 	bl	8016304 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	7a9b      	ldrb	r3, [r3, #10]
 8015424:	2bff      	cmp	r3, #255	; 0xff
 8015426:	d005      	beq.n	8015434 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	7a9b      	ldrb	r3, [r3, #10]
 801542c:	3301      	adds	r3, #1
 801542e:	b2da      	uxtb	r2, r3
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	7a9b      	ldrb	r3, [r3, #10]
 8015438:	2b09      	cmp	r3, #9
 801543a:	d80a      	bhi.n	8015452 <dhcp_rebind+0xd2>
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	7a9b      	ldrb	r3, [r3, #10]
 8015440:	b29b      	uxth	r3, r3
 8015442:	461a      	mov	r2, r3
 8015444:	0152      	lsls	r2, r2, #5
 8015446:	1ad2      	subs	r2, r2, r3
 8015448:	0092      	lsls	r2, r2, #2
 801544a:	4413      	add	r3, r2
 801544c:	00db      	lsls	r3, r3, #3
 801544e:	b29b      	uxth	r3, r3
 8015450:	e001      	b.n	8015456 <dhcp_rebind+0xd6>
 8015452:	f242 7310 	movw	r3, #10000	; 0x2710
 8015456:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8015458:	89bb      	ldrh	r3, [r7, #12]
 801545a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801545e:	4a0a      	ldr	r2, [pc, #40]	; (8015488 <dhcp_rebind+0x108>)
 8015460:	fb82 1203 	smull	r1, r2, r2, r3
 8015464:	1152      	asrs	r2, r2, #5
 8015466:	17db      	asrs	r3, r3, #31
 8015468:	1ad3      	subs	r3, r2, r3
 801546a:	b29a      	uxth	r2, r3
 801546c:	693b      	ldr	r3, [r7, #16]
 801546e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015474:	4618      	mov	r0, r3
 8015476:	3718      	adds	r7, #24
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}
 801547c:	20000124 	.word	0x20000124
 8015480:	20004248 	.word	0x20004248
 8015484:	0801ccec 	.word	0x0801ccec
 8015488:	10624dd3 	.word	0x10624dd3

0801548c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b088      	sub	sp, #32
 8015490:	af02      	add	r7, sp, #8
 8015492:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6a1b      	ldr	r3, [r3, #32]
 8015498:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801549a:	2103      	movs	r1, #3
 801549c:	6938      	ldr	r0, [r7, #16]
 801549e:	f000 f949 	bl	8015734 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80154a2:	2203      	movs	r2, #3
 80154a4:	6939      	ldr	r1, [r7, #16]
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f000 fdca 	bl	8016040 <dhcp_create_msg>
 80154ac:	4603      	mov	r3, r0
 80154ae:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80154b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d147      	bne.n	8015548 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80154b8:	2202      	movs	r2, #2
 80154ba:	2139      	movs	r1, #57	; 0x39
 80154bc:	6938      	ldr	r0, [r7, #16]
 80154be:	f000 f953 	bl	8015768 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80154c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80154c6:	6938      	ldr	r0, [r7, #16]
 80154c8:	f000 f9b0 	bl	801582c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80154cc:	2204      	movs	r2, #4
 80154ce:	2132      	movs	r1, #50	; 0x32
 80154d0:	6938      	ldr	r0, [r7, #16]
 80154d2:	f000 f949 	bl	8015768 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154da:	4618      	mov	r0, r3
 80154dc:	f7f8 fc7c 	bl	800ddd8 <lwip_htonl>
 80154e0:	4603      	mov	r3, r0
 80154e2:	4619      	mov	r1, r3
 80154e4:	6938      	ldr	r0, [r7, #16]
 80154e6:	f000 f9db 	bl	80158a0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80154ea:	2203      	movs	r2, #3
 80154ec:	2137      	movs	r1, #55	; 0x37
 80154ee:	6938      	ldr	r0, [r7, #16]
 80154f0:	f000 f93a 	bl	8015768 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154f4:	2300      	movs	r3, #0
 80154f6:	75fb      	strb	r3, [r7, #23]
 80154f8:	e009      	b.n	801550e <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80154fa:	7dfb      	ldrb	r3, [r7, #23]
 80154fc:	4a29      	ldr	r2, [pc, #164]	; (80155a4 <dhcp_reboot+0x118>)
 80154fe:	5cd3      	ldrb	r3, [r2, r3]
 8015500:	4619      	mov	r1, r3
 8015502:	6938      	ldr	r0, [r7, #16]
 8015504:	f000 f96a 	bl	80157dc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015508:	7dfb      	ldrb	r3, [r7, #23]
 801550a:	3301      	adds	r3, #1
 801550c:	75fb      	strb	r3, [r7, #23]
 801550e:	7dfb      	ldrb	r3, [r7, #23]
 8015510:	2b02      	cmp	r3, #2
 8015512:	d9f2      	bls.n	80154fa <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8015514:	6938      	ldr	r0, [r7, #16]
 8015516:	f000 ff37 	bl	8016388 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	68da      	ldr	r2, [r3, #12]
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	8a9b      	ldrh	r3, [r3, #20]
 8015522:	33f0      	adds	r3, #240	; 0xf0
 8015524:	b29b      	uxth	r3, r3
 8015526:	4619      	mov	r1, r3
 8015528:	4610      	mov	r0, r2
 801552a:	f7f9 fc75 	bl	800ee18 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801552e:	4b1e      	ldr	r3, [pc, #120]	; (80155a8 <dhcp_reboot+0x11c>)
 8015530:	6818      	ldr	r0, [r3, #0]
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	68d9      	ldr	r1, [r3, #12]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	9300      	str	r3, [sp, #0]
 801553a:	2343      	movs	r3, #67	; 0x43
 801553c:	4a1b      	ldr	r2, [pc, #108]	; (80155ac <dhcp_reboot+0x120>)
 801553e:	f7fe fec3 	bl	80142c8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8015542:	6938      	ldr	r0, [r7, #16]
 8015544:	f000 fede 	bl	8016304 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	7a9b      	ldrb	r3, [r3, #10]
 801554c:	2bff      	cmp	r3, #255	; 0xff
 801554e:	d005      	beq.n	801555c <dhcp_reboot+0xd0>
    dhcp->tries++;
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	7a9b      	ldrb	r3, [r3, #10]
 8015554:	3301      	adds	r3, #1
 8015556:	b2da      	uxtb	r2, r3
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	7a9b      	ldrb	r3, [r3, #10]
 8015560:	2b09      	cmp	r3, #9
 8015562:	d80a      	bhi.n	801557a <dhcp_reboot+0xee>
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	7a9b      	ldrb	r3, [r3, #10]
 8015568:	b29b      	uxth	r3, r3
 801556a:	461a      	mov	r2, r3
 801556c:	0152      	lsls	r2, r2, #5
 801556e:	1ad2      	subs	r2, r2, r3
 8015570:	0092      	lsls	r2, r2, #2
 8015572:	4413      	add	r3, r2
 8015574:	00db      	lsls	r3, r3, #3
 8015576:	b29b      	uxth	r3, r3
 8015578:	e001      	b.n	801557e <dhcp_reboot+0xf2>
 801557a:	f242 7310 	movw	r3, #10000	; 0x2710
 801557e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8015580:	89bb      	ldrh	r3, [r7, #12]
 8015582:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015586:	4a0a      	ldr	r2, [pc, #40]	; (80155b0 <dhcp_reboot+0x124>)
 8015588:	fb82 1203 	smull	r1, r2, r2, r3
 801558c:	1152      	asrs	r2, r2, #5
 801558e:	17db      	asrs	r3, r3, #31
 8015590:	1ad3      	subs	r3, r2, r3
 8015592:	b29a      	uxth	r2, r3
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801559c:	4618      	mov	r0, r3
 801559e:	3718      	adds	r7, #24
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	20000124 	.word	0x20000124
 80155a8:	20004248 	.word	0x20004248
 80155ac:	0801ccec 	.word	0x0801ccec
 80155b0:	10624dd3 	.word	0x10624dd3

080155b4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b088      	sub	sp, #32
 80155b8:	af02      	add	r7, sp, #8
 80155ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	6a1b      	ldr	r3, [r3, #32]
 80155c0:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d102      	bne.n	80155ce <dhcp_release+0x1a>
    return ERR_ARG;
 80155c8:	f06f 030f 	mvn.w	r3, #15
 80155cc:	e072      	b.n	80156b4 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155d2:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80155d4:	6878      	ldr	r0, [r7, #4]
 80155d6:	f000 ff31 	bl	801643c <dhcp_supplied_address>
 80155da:	4603      	mov	r3, r0
 80155dc:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80155de:	2100      	movs	r1, #0
 80155e0:	6978      	ldr	r0, [r7, #20]
 80155e2:	f000 f8a7 	bl	8015734 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	2200      	movs	r2, #0
 80155ea:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	2200      	movs	r2, #0
 80155f0:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	2200      	movs	r2, #0
 80155f6:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80155f8:	697b      	ldr	r3, [r7, #20]
 80155fa:	2200      	movs	r2, #0
 80155fc:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	2200      	movs	r2, #0
 8015602:	63da      	str	r2, [r3, #60]	; 0x3c
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	639a      	str	r2, [r3, #56]	; 0x38
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	2200      	movs	r2, #0
 8015618:	845a      	strh	r2, [r3, #34]	; 0x22
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801561e:	697b      	ldr	r3, [r7, #20]
 8015620:	841a      	strh	r2, [r3, #32]
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	8c1a      	ldrh	r2, [r3, #32]
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	83da      	strh	r2, [r3, #30]
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	8bda      	ldrh	r2, [r3, #30]
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8015632:	7cfb      	ldrb	r3, [r7, #19]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d101      	bne.n	801563c <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8015638:	2300      	movs	r3, #0
 801563a:	e03b      	b.n	80156b4 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801563c:	2207      	movs	r2, #7
 801563e:	6979      	ldr	r1, [r7, #20]
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f000 fcfd 	bl	8016040 <dhcp_create_msg>
 8015646:	4603      	mov	r3, r0
 8015648:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801564a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d128      	bne.n	80156a4 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8015652:	2204      	movs	r2, #4
 8015654:	2136      	movs	r1, #54	; 0x36
 8015656:	6978      	ldr	r0, [r7, #20]
 8015658:	f000 f886 	bl	8015768 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	4618      	mov	r0, r3
 8015660:	f7f8 fbba 	bl	800ddd8 <lwip_htonl>
 8015664:	4603      	mov	r3, r0
 8015666:	4619      	mov	r1, r3
 8015668:	6978      	ldr	r0, [r7, #20]
 801566a:	f000 f919 	bl	80158a0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801566e:	6978      	ldr	r0, [r7, #20]
 8015670:	f000 fe8a 	bl	8016388 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	68da      	ldr	r2, [r3, #12]
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	8a9b      	ldrh	r3, [r3, #20]
 801567c:	33f0      	adds	r3, #240	; 0xf0
 801567e:	b29b      	uxth	r3, r3
 8015680:	4619      	mov	r1, r3
 8015682:	4610      	mov	r0, r2
 8015684:	f7f9 fbc8 	bl	800ee18 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8015688:	4b0c      	ldr	r3, [pc, #48]	; (80156bc <dhcp_release+0x108>)
 801568a:	6818      	ldr	r0, [r3, #0]
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	68d9      	ldr	r1, [r3, #12]
 8015690:	f107 020c 	add.w	r2, r7, #12
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	9300      	str	r3, [sp, #0]
 8015698:	2343      	movs	r3, #67	; 0x43
 801569a:	f7fe fe15 	bl	80142c8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801569e:	6978      	ldr	r0, [r7, #20]
 80156a0:	f000 fe30 	bl	8016304 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80156a4:	4b06      	ldr	r3, [pc, #24]	; (80156c0 <dhcp_release+0x10c>)
 80156a6:	4a06      	ldr	r2, [pc, #24]	; (80156c0 <dhcp_release+0x10c>)
 80156a8:	4905      	ldr	r1, [pc, #20]	; (80156c0 <dhcp_release+0x10c>)
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f7f9 f854 	bl	800e758 <netif_set_addr>

  return result;
 80156b0:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3718      	adds	r7, #24
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}
 80156bc:	20004248 	.word	0x20004248
 80156c0:	0801cce8 	.word	0x0801cce8

080156c4 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b084      	sub	sp, #16
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d107      	bne.n	80156e2 <dhcp_stop+0x1e>
 80156d2:	4b14      	ldr	r3, [pc, #80]	; (8015724 <dhcp_stop+0x60>)
 80156d4:	f240 5242 	movw	r2, #1346	; 0x542
 80156d8:	4913      	ldr	r1, [pc, #76]	; (8015728 <dhcp_stop+0x64>)
 80156da:	4814      	ldr	r0, [pc, #80]	; (801572c <dhcp_stop+0x68>)
 80156dc:	f004 f802 	bl	80196e4 <iprintf>
 80156e0:	e01d      	b.n	801571e <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	6a1b      	ldr	r3, [r3, #32]
 80156e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d017      	beq.n	801571e <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	685b      	ldr	r3, [r3, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d006      	beq.n	8015704 <dhcp_stop+0x40>
 80156f6:	4b0b      	ldr	r3, [pc, #44]	; (8015724 <dhcp_stop+0x60>)
 80156f8:	f240 524f 	movw	r2, #1359	; 0x54f
 80156fc:	490c      	ldr	r1, [pc, #48]	; (8015730 <dhcp_stop+0x6c>)
 80156fe:	480b      	ldr	r0, [pc, #44]	; (801572c <dhcp_stop+0x68>)
 8015700:	f003 fff0 	bl	80196e4 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015704:	2100      	movs	r1, #0
 8015706:	68f8      	ldr	r0, [r7, #12]
 8015708:	f000 f814 	bl	8015734 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	7a1b      	ldrb	r3, [r3, #8]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d004      	beq.n	801571e <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015714:	f7ff f854 	bl	80147c0 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	2200      	movs	r2, #0
 801571c:	721a      	strb	r2, [r3, #8]
    }
  }
}
 801571e:	3710      	adds	r7, #16
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	0801bfec 	.word	0x0801bfec
 8015728:	0801c160 	.word	0x0801c160
 801572c:	0801c04c 	.word	0x0801c04c
 8015730:	0801c118 	.word	0x0801c118

08015734 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015734:	b480      	push	{r7}
 8015736:	b083      	sub	sp, #12
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	460b      	mov	r3, r1
 801573e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	7a5b      	ldrb	r3, [r3, #9]
 8015744:	78fa      	ldrb	r2, [r7, #3]
 8015746:	429a      	cmp	r2, r3
 8015748:	d008      	beq.n	801575c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	78fa      	ldrb	r2, [r7, #3]
 801574e:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2200      	movs	r2, #0
 8015754:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2200      	movs	r2, #0
 801575a:	82da      	strh	r2, [r3, #22]
  }
}
 801575c:	bf00      	nop
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	460b      	mov	r3, r1
 8015772:	70fb      	strb	r3, [r7, #3]
 8015774:	4613      	mov	r3, r2
 8015776:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	8a9b      	ldrh	r3, [r3, #20]
 801577c:	461a      	mov	r2, r3
 801577e:	78bb      	ldrb	r3, [r7, #2]
 8015780:	4413      	add	r3, r2
 8015782:	3302      	adds	r3, #2
 8015784:	2b44      	cmp	r3, #68	; 0x44
 8015786:	d906      	bls.n	8015796 <dhcp_option+0x2e>
 8015788:	4b11      	ldr	r3, [pc, #68]	; (80157d0 <dhcp_option+0x68>)
 801578a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 801578e:	4911      	ldr	r1, [pc, #68]	; (80157d4 <dhcp_option+0x6c>)
 8015790:	4811      	ldr	r0, [pc, #68]	; (80157d8 <dhcp_option+0x70>)
 8015792:	f003 ffa7 	bl	80196e4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	691a      	ldr	r2, [r3, #16]
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	8a9b      	ldrh	r3, [r3, #20]
 801579e:	1c59      	adds	r1, r3, #1
 80157a0:	b288      	uxth	r0, r1
 80157a2:	6879      	ldr	r1, [r7, #4]
 80157a4:	8288      	strh	r0, [r1, #20]
 80157a6:	4413      	add	r3, r2
 80157a8:	78fa      	ldrb	r2, [r7, #3]
 80157aa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	691a      	ldr	r2, [r3, #16]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	8a9b      	ldrh	r3, [r3, #20]
 80157b6:	1c59      	adds	r1, r3, #1
 80157b8:	b288      	uxth	r0, r1
 80157ba:	6879      	ldr	r1, [r7, #4]
 80157bc:	8288      	strh	r0, [r1, #20]
 80157be:	4413      	add	r3, r2
 80157c0:	78ba      	ldrb	r2, [r7, #2]
 80157c2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80157c6:	bf00      	nop
 80157c8:	3708      	adds	r7, #8
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	bf00      	nop
 80157d0:	0801bfec 	.word	0x0801bfec
 80157d4:	0801c17c 	.word	0x0801c17c
 80157d8:	0801c04c 	.word	0x0801c04c

080157dc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	460b      	mov	r3, r1
 80157e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	8a9b      	ldrh	r3, [r3, #20]
 80157ec:	2b43      	cmp	r3, #67	; 0x43
 80157ee:	d906      	bls.n	80157fe <dhcp_option_byte+0x22>
 80157f0:	4b0b      	ldr	r3, [pc, #44]	; (8015820 <dhcp_option_byte+0x44>)
 80157f2:	f240 527b 	movw	r2, #1403	; 0x57b
 80157f6:	490b      	ldr	r1, [pc, #44]	; (8015824 <dhcp_option_byte+0x48>)
 80157f8:	480b      	ldr	r0, [pc, #44]	; (8015828 <dhcp_option_byte+0x4c>)
 80157fa:	f003 ff73 	bl	80196e4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	691a      	ldr	r2, [r3, #16]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	8a9b      	ldrh	r3, [r3, #20]
 8015806:	1c59      	adds	r1, r3, #1
 8015808:	b288      	uxth	r0, r1
 801580a:	6879      	ldr	r1, [r7, #4]
 801580c:	8288      	strh	r0, [r1, #20]
 801580e:	4413      	add	r3, r2
 8015810:	78fa      	ldrb	r2, [r7, #3]
 8015812:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8015816:	bf00      	nop
 8015818:	3708      	adds	r7, #8
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	0801bfec 	.word	0x0801bfec
 8015824:	0801c1c4 	.word	0x0801c1c4
 8015828:	0801c04c 	.word	0x0801c04c

0801582c <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 801582c:	b590      	push	{r4, r7, lr}
 801582e:	b083      	sub	sp, #12
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
 8015834:	460b      	mov	r3, r1
 8015836:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	8a9b      	ldrh	r3, [r3, #20]
 801583c:	3302      	adds	r3, #2
 801583e:	2b44      	cmp	r3, #68	; 0x44
 8015840:	d906      	bls.n	8015850 <dhcp_option_short+0x24>
 8015842:	4b14      	ldr	r3, [pc, #80]	; (8015894 <dhcp_option_short+0x68>)
 8015844:	f240 5282 	movw	r2, #1410	; 0x582
 8015848:	4913      	ldr	r1, [pc, #76]	; (8015898 <dhcp_option_short+0x6c>)
 801584a:	4814      	ldr	r0, [pc, #80]	; (801589c <dhcp_option_short+0x70>)
 801584c:	f003 ff4a 	bl	80196e4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015850:	887b      	ldrh	r3, [r7, #2]
 8015852:	0a1b      	lsrs	r3, r3, #8
 8015854:	b298      	uxth	r0, r3
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	691a      	ldr	r2, [r3, #16]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	8a9b      	ldrh	r3, [r3, #20]
 801585e:	1c59      	adds	r1, r3, #1
 8015860:	b28c      	uxth	r4, r1
 8015862:	6879      	ldr	r1, [r7, #4]
 8015864:	828c      	strh	r4, [r1, #20]
 8015866:	b2c1      	uxtb	r1, r0
 8015868:	4413      	add	r3, r2
 801586a:	460a      	mov	r2, r1
 801586c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	691a      	ldr	r2, [r3, #16]
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	8a9b      	ldrh	r3, [r3, #20]
 8015878:	1c59      	adds	r1, r3, #1
 801587a:	b288      	uxth	r0, r1
 801587c:	6879      	ldr	r1, [r7, #4]
 801587e:	8288      	strh	r0, [r1, #20]
 8015880:	8879      	ldrh	r1, [r7, #2]
 8015882:	b2c9      	uxtb	r1, r1
 8015884:	4413      	add	r3, r2
 8015886:	460a      	mov	r2, r1
 8015888:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801588c:	bf00      	nop
 801588e:	370c      	adds	r7, #12
 8015890:	46bd      	mov	sp, r7
 8015892:	bd90      	pop	{r4, r7, pc}
 8015894:	0801bfec 	.word	0x0801bfec
 8015898:	0801c200 	.word	0x0801c200
 801589c:	0801c04c 	.word	0x0801c04c

080158a0 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 80158a0:	b590      	push	{r4, r7, lr}
 80158a2:	b083      	sub	sp, #12
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
 80158a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	8a9b      	ldrh	r3, [r3, #20]
 80158ae:	3304      	adds	r3, #4
 80158b0:	2b44      	cmp	r3, #68	; 0x44
 80158b2:	d906      	bls.n	80158c2 <dhcp_option_long+0x22>
 80158b4:	4b22      	ldr	r3, [pc, #136]	; (8015940 <dhcp_option_long+0xa0>)
 80158b6:	f240 528a 	movw	r2, #1418	; 0x58a
 80158ba:	4922      	ldr	r1, [pc, #136]	; (8015944 <dhcp_option_long+0xa4>)
 80158bc:	4822      	ldr	r0, [pc, #136]	; (8015948 <dhcp_option_long+0xa8>)
 80158be:	f003 ff11 	bl	80196e4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	0e18      	lsrs	r0, r3, #24
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	691a      	ldr	r2, [r3, #16]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	8a9b      	ldrh	r3, [r3, #20]
 80158ce:	1c59      	adds	r1, r3, #1
 80158d0:	b28c      	uxth	r4, r1
 80158d2:	6879      	ldr	r1, [r7, #4]
 80158d4:	828c      	strh	r4, [r1, #20]
 80158d6:	b2c1      	uxtb	r1, r0
 80158d8:	4413      	add	r3, r2
 80158da:	460a      	mov	r2, r1
 80158dc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	0c18      	lsrs	r0, r3, #16
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	691a      	ldr	r2, [r3, #16]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	8a9b      	ldrh	r3, [r3, #20]
 80158ec:	1c59      	adds	r1, r3, #1
 80158ee:	b28c      	uxth	r4, r1
 80158f0:	6879      	ldr	r1, [r7, #4]
 80158f2:	828c      	strh	r4, [r1, #20]
 80158f4:	b2c1      	uxtb	r1, r0
 80158f6:	4413      	add	r3, r2
 80158f8:	460a      	mov	r2, r1
 80158fa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	0a18      	lsrs	r0, r3, #8
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	691a      	ldr	r2, [r3, #16]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	8a9b      	ldrh	r3, [r3, #20]
 801590a:	1c59      	adds	r1, r3, #1
 801590c:	b28c      	uxth	r4, r1
 801590e:	6879      	ldr	r1, [r7, #4]
 8015910:	828c      	strh	r4, [r1, #20]
 8015912:	b2c1      	uxtb	r1, r0
 8015914:	4413      	add	r3, r2
 8015916:	460a      	mov	r2, r1
 8015918:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	691a      	ldr	r2, [r3, #16]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	8a9b      	ldrh	r3, [r3, #20]
 8015924:	1c59      	adds	r1, r3, #1
 8015926:	b288      	uxth	r0, r1
 8015928:	6879      	ldr	r1, [r7, #4]
 801592a:	8288      	strh	r0, [r1, #20]
 801592c:	6839      	ldr	r1, [r7, #0]
 801592e:	b2c9      	uxtb	r1, r1
 8015930:	4413      	add	r3, r2
 8015932:	460a      	mov	r2, r1
 8015934:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8015938:	bf00      	nop
 801593a:	370c      	adds	r7, #12
 801593c:	46bd      	mov	sp, r7
 801593e:	bd90      	pop	{r4, r7, pc}
 8015940:	0801bfec 	.word	0x0801bfec
 8015944:	0801c244 	.word	0x0801c244
 8015948:	0801c04c 	.word	0x0801c04c

0801594c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b08e      	sub	sp, #56	; 0x38
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015956:	2300      	movs	r3, #0
 8015958:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 801595a:	2300      	movs	r3, #0
 801595c:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801595e:	2208      	movs	r2, #8
 8015960:	2100      	movs	r1, #0
 8015962:	48b3      	ldr	r0, [pc, #716]	; (8015c30 <dhcp_parse_reply+0x2e4>)
 8015964:	f003 fe0e 	bl	8019584 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	895b      	ldrh	r3, [r3, #10]
 801596c:	2b2b      	cmp	r3, #43	; 0x2b
 801596e:	d802      	bhi.n	8015976 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015970:	f06f 0301 	mvn.w	r3, #1
 8015974:	e26a      	b.n	8015e4c <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	685a      	ldr	r2, [r3, #4]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801597e:	23f0      	movs	r3, #240	; 0xf0
 8015980:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	891b      	ldrh	r3, [r3, #8]
 8015986:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801598c:	e00c      	b.n	80159a8 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 801598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015990:	895b      	ldrh	r3, [r3, #10]
 8015992:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015994:	1ad3      	subs	r3, r2, r3
 8015996:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 8015998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599a:	895b      	ldrh	r3, [r3, #10]
 801599c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801599e:	1ad3      	subs	r3, r2, r3
 80159a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 80159a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80159a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d004      	beq.n	80159b8 <dhcp_parse_reply+0x6c>
 80159ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b0:	895b      	ldrh	r3, [r3, #10]
 80159b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80159b4:	429a      	cmp	r2, r3
 80159b6:	d2ea      	bcs.n	801598e <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 80159b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d102      	bne.n	80159c4 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 80159be:	f06f 0301 	mvn.w	r3, #1
 80159c2:	e243      	b.n	8015e4c <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 80159c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80159c6:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 80159c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80159ca:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 80159cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80159d2:	e1fb      	b.n	8015dcc <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 80159d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80159d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159d8:	4413      	add	r3, r2
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 80159de:	2300      	movs	r3, #0
 80159e0:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 80159e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159e6:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 80159e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80159ea:	3302      	adds	r3, #2
 80159ec:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80159ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80159f0:	3301      	adds	r3, #1
 80159f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159f4:	8952      	ldrh	r2, [r2, #10]
 80159f6:	4293      	cmp	r3, r2
 80159f8:	da06      	bge.n	8015a08 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 80159fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80159fc:	3301      	adds	r3, #1
 80159fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a00:	4413      	add	r3, r2
 8015a02:	781b      	ldrb	r3, [r3, #0]
 8015a04:	77fb      	strb	r3, [r7, #31]
 8015a06:	e00a      	b.n	8015a1e <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8015a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d004      	beq.n	8015a1a <dhcp_parse_reply+0xce>
 8015a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	e000      	b.n	8015a1c <dhcp_parse_reply+0xd0>
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015a1e:	7ffb      	ldrb	r3, [r7, #31]
 8015a20:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8015a22:	7d7b      	ldrb	r3, [r7, #21]
 8015a24:	2b3b      	cmp	r3, #59	; 0x3b
 8015a26:	f200 8121 	bhi.w	8015c6c <dhcp_parse_reply+0x320>
 8015a2a:	a201      	add	r2, pc, #4	; (adr r2, 8015a30 <dhcp_parse_reply+0xe4>)
 8015a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a30:	08015b21 	.word	0x08015b21
 8015a34:	08015b31 	.word	0x08015b31
 8015a38:	08015c6d 	.word	0x08015c6d
 8015a3c:	08015b51 	.word	0x08015b51
 8015a40:	08015c6d 	.word	0x08015c6d
 8015a44:	08015c6d 	.word	0x08015c6d
 8015a48:	08015c6d 	.word	0x08015c6d
 8015a4c:	08015c6d 	.word	0x08015c6d
 8015a50:	08015c6d 	.word	0x08015c6d
 8015a54:	08015c6d 	.word	0x08015c6d
 8015a58:	08015c6d 	.word	0x08015c6d
 8015a5c:	08015c6d 	.word	0x08015c6d
 8015a60:	08015c6d 	.word	0x08015c6d
 8015a64:	08015c6d 	.word	0x08015c6d
 8015a68:	08015c6d 	.word	0x08015c6d
 8015a6c:	08015c6d 	.word	0x08015c6d
 8015a70:	08015c6d 	.word	0x08015c6d
 8015a74:	08015c6d 	.word	0x08015c6d
 8015a78:	08015c6d 	.word	0x08015c6d
 8015a7c:	08015c6d 	.word	0x08015c6d
 8015a80:	08015c6d 	.word	0x08015c6d
 8015a84:	08015c6d 	.word	0x08015c6d
 8015a88:	08015c6d 	.word	0x08015c6d
 8015a8c:	08015c6d 	.word	0x08015c6d
 8015a90:	08015c6d 	.word	0x08015c6d
 8015a94:	08015c6d 	.word	0x08015c6d
 8015a98:	08015c6d 	.word	0x08015c6d
 8015a9c:	08015c6d 	.word	0x08015c6d
 8015aa0:	08015c6d 	.word	0x08015c6d
 8015aa4:	08015c6d 	.word	0x08015c6d
 8015aa8:	08015c6d 	.word	0x08015c6d
 8015aac:	08015c6d 	.word	0x08015c6d
 8015ab0:	08015c6d 	.word	0x08015c6d
 8015ab4:	08015c6d 	.word	0x08015c6d
 8015ab8:	08015c6d 	.word	0x08015c6d
 8015abc:	08015c6d 	.word	0x08015c6d
 8015ac0:	08015c6d 	.word	0x08015c6d
 8015ac4:	08015c6d 	.word	0x08015c6d
 8015ac8:	08015c6d 	.word	0x08015c6d
 8015acc:	08015c6d 	.word	0x08015c6d
 8015ad0:	08015c6d 	.word	0x08015c6d
 8015ad4:	08015c6d 	.word	0x08015c6d
 8015ad8:	08015c6d 	.word	0x08015c6d
 8015adc:	08015c6d 	.word	0x08015c6d
 8015ae0:	08015c6d 	.word	0x08015c6d
 8015ae4:	08015c6d 	.word	0x08015c6d
 8015ae8:	08015c6d 	.word	0x08015c6d
 8015aec:	08015c6d 	.word	0x08015c6d
 8015af0:	08015c6d 	.word	0x08015c6d
 8015af4:	08015c6d 	.word	0x08015c6d
 8015af8:	08015c6d 	.word	0x08015c6d
 8015afc:	08015b77 	.word	0x08015b77
 8015b00:	08015b97 	.word	0x08015b97
 8015b04:	08015bd1 	.word	0x08015bd1
 8015b08:	08015bf1 	.word	0x08015bf1
 8015b0c:	08015c6d 	.word	0x08015c6d
 8015b10:	08015c6d 	.word	0x08015c6d
 8015b14:	08015c6d 	.word	0x08015c6d
 8015b18:	08015c11 	.word	0x08015c11
 8015b1c:	08015c4d 	.word	0x08015c4d
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015b20:	2300      	movs	r3, #0
 8015b22:	77fb      	strb	r3, [r7, #31]
 8015b24:	7ffb      	ldrb	r3, [r7, #31]
 8015b26:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8015b28:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8015b2a:	3b01      	subs	r3, #1
 8015b2c:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 8015b2e:	e0a0      	b.n	8015c72 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b30:	7ffb      	ldrb	r3, [r7, #31]
 8015b32:	2b04      	cmp	r3, #4
 8015b34:	d009      	beq.n	8015b4a <dhcp_parse_reply+0x1fe>
 8015b36:	4b3f      	ldr	r3, [pc, #252]	; (8015c34 <dhcp_parse_reply+0x2e8>)
 8015b38:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8015b3c:	493e      	ldr	r1, [pc, #248]	; (8015c38 <dhcp_parse_reply+0x2ec>)
 8015b3e:	483f      	ldr	r0, [pc, #252]	; (8015c3c <dhcp_parse_reply+0x2f0>)
 8015b40:	f003 fdd0 	bl	80196e4 <iprintf>
 8015b44:	f06f 0305 	mvn.w	r3, #5
 8015b48:	e180      	b.n	8015e4c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015b4a:	2306      	movs	r3, #6
 8015b4c:	61bb      	str	r3, [r7, #24]
        break;
 8015b4e:	e090      	b.n	8015c72 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015b50:	2304      	movs	r3, #4
 8015b52:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015b54:	7ffa      	ldrb	r2, [r7, #31]
 8015b56:	7fbb      	ldrb	r3, [r7, #30]
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d209      	bcs.n	8015b70 <dhcp_parse_reply+0x224>
 8015b5c:	4b35      	ldr	r3, [pc, #212]	; (8015c34 <dhcp_parse_reply+0x2e8>)
 8015b5e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8015b62:	4937      	ldr	r1, [pc, #220]	; (8015c40 <dhcp_parse_reply+0x2f4>)
 8015b64:	4835      	ldr	r0, [pc, #212]	; (8015c3c <dhcp_parse_reply+0x2f0>)
 8015b66:	f003 fdbd 	bl	80196e4 <iprintf>
 8015b6a:	f06f 0305 	mvn.w	r3, #5
 8015b6e:	e16d      	b.n	8015e4c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015b70:	2307      	movs	r3, #7
 8015b72:	61bb      	str	r3, [r7, #24]
        break;
 8015b74:	e07d      	b.n	8015c72 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b76:	7ffb      	ldrb	r3, [r7, #31]
 8015b78:	2b04      	cmp	r3, #4
 8015b7a:	d009      	beq.n	8015b90 <dhcp_parse_reply+0x244>
 8015b7c:	4b2d      	ldr	r3, [pc, #180]	; (8015c34 <dhcp_parse_reply+0x2e8>)
 8015b7e:	f240 6209 	movw	r2, #1545	; 0x609
 8015b82:	492d      	ldr	r1, [pc, #180]	; (8015c38 <dhcp_parse_reply+0x2ec>)
 8015b84:	482d      	ldr	r0, [pc, #180]	; (8015c3c <dhcp_parse_reply+0x2f0>)
 8015b86:	f003 fdad 	bl	80196e4 <iprintf>
 8015b8a:	f06f 0305 	mvn.w	r3, #5
 8015b8e:	e15d      	b.n	8015e4c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015b90:	2303      	movs	r3, #3
 8015b92:	61bb      	str	r3, [r7, #24]
        break;
 8015b94:	e06d      	b.n	8015c72 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015b96:	7ffb      	ldrb	r3, [r7, #31]
 8015b98:	2b01      	cmp	r3, #1
 8015b9a:	d009      	beq.n	8015bb0 <dhcp_parse_reply+0x264>
 8015b9c:	4b25      	ldr	r3, [pc, #148]	; (8015c34 <dhcp_parse_reply+0x2e8>)
 8015b9e:	f240 6217 	movw	r2, #1559	; 0x617
 8015ba2:	4928      	ldr	r1, [pc, #160]	; (8015c44 <dhcp_parse_reply+0x2f8>)
 8015ba4:	4825      	ldr	r0, [pc, #148]	; (8015c3c <dhcp_parse_reply+0x2f0>)
 8015ba6:	f003 fd9d 	bl	80196e4 <iprintf>
 8015baa:	f06f 0305 	mvn.w	r3, #5
 8015bae:	e14d      	b.n	8015e4c <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015bb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015bb2:	2bf0      	cmp	r3, #240	; 0xf0
 8015bb4:	d009      	beq.n	8015bca <dhcp_parse_reply+0x27e>
 8015bb6:	4b1f      	ldr	r3, [pc, #124]	; (8015c34 <dhcp_parse_reply+0x2e8>)
 8015bb8:	f240 6219 	movw	r2, #1561	; 0x619
 8015bbc:	4922      	ldr	r1, [pc, #136]	; (8015c48 <dhcp_parse_reply+0x2fc>)
 8015bbe:	481f      	ldr	r0, [pc, #124]	; (8015c3c <dhcp_parse_reply+0x2f0>)
 8015bc0:	f003 fd90 	bl	80196e4 <iprintf>
 8015bc4:	f06f 0305 	mvn.w	r3, #5
 8015bc8:	e140      	b.n	8015e4c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	61bb      	str	r3, [r7, #24]
        break;
 8015bce:	e050      	b.n	8015c72 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015bd0:	7ffb      	ldrb	r3, [r7, #31]
 8015bd2:	2b01      	cmp	r3, #1
 8015bd4:	d009      	beq.n	8015bea <dhcp_parse_reply+0x29e>
 8015bd6:	4b17      	ldr	r3, [pc, #92]	; (8015c34 <dhcp_parse_reply+0x2e8>)
 8015bd8:	f240 621d 	movw	r2, #1565	; 0x61d
 8015bdc:	4919      	ldr	r1, [pc, #100]	; (8015c44 <dhcp_parse_reply+0x2f8>)
 8015bde:	4817      	ldr	r0, [pc, #92]	; (8015c3c <dhcp_parse_reply+0x2f0>)
 8015be0:	f003 fd80 	bl	80196e4 <iprintf>
 8015be4:	f06f 0305 	mvn.w	r3, #5
 8015be8:	e130      	b.n	8015e4c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015bea:	2301      	movs	r3, #1
 8015bec:	61bb      	str	r3, [r7, #24]
        break;
 8015bee:	e040      	b.n	8015c72 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015bf0:	7ffb      	ldrb	r3, [r7, #31]
 8015bf2:	2b04      	cmp	r3, #4
 8015bf4:	d009      	beq.n	8015c0a <dhcp_parse_reply+0x2be>
 8015bf6:	4b0f      	ldr	r3, [pc, #60]	; (8015c34 <dhcp_parse_reply+0x2e8>)
 8015bf8:	f240 6221 	movw	r2, #1569	; 0x621
 8015bfc:	490e      	ldr	r1, [pc, #56]	; (8015c38 <dhcp_parse_reply+0x2ec>)
 8015bfe:	480f      	ldr	r0, [pc, #60]	; (8015c3c <dhcp_parse_reply+0x2f0>)
 8015c00:	f003 fd70 	bl	80196e4 <iprintf>
 8015c04:	f06f 0305 	mvn.w	r3, #5
 8015c08:	e120      	b.n	8015e4c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015c0a:	2302      	movs	r3, #2
 8015c0c:	61bb      	str	r3, [r7, #24]
        break;
 8015c0e:	e030      	b.n	8015c72 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c10:	7ffb      	ldrb	r3, [r7, #31]
 8015c12:	2b04      	cmp	r3, #4
 8015c14:	d009      	beq.n	8015c2a <dhcp_parse_reply+0x2de>
 8015c16:	4b07      	ldr	r3, [pc, #28]	; (8015c34 <dhcp_parse_reply+0x2e8>)
 8015c18:	f240 6225 	movw	r2, #1573	; 0x625
 8015c1c:	4906      	ldr	r1, [pc, #24]	; (8015c38 <dhcp_parse_reply+0x2ec>)
 8015c1e:	4807      	ldr	r0, [pc, #28]	; (8015c3c <dhcp_parse_reply+0x2f0>)
 8015c20:	f003 fd60 	bl	80196e4 <iprintf>
 8015c24:	f06f 0305 	mvn.w	r3, #5
 8015c28:	e110      	b.n	8015e4c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015c2a:	2304      	movs	r3, #4
 8015c2c:	61bb      	str	r3, [r7, #24]
        break;
 8015c2e:	e020      	b.n	8015c72 <dhcp_parse_reply+0x326>
 8015c30:	2000ab4c 	.word	0x2000ab4c
 8015c34:	0801bfec 	.word	0x0801bfec
 8015c38:	0801c284 	.word	0x0801c284
 8015c3c:	0801c04c 	.word	0x0801c04c
 8015c40:	0801c290 	.word	0x0801c290
 8015c44:	0801c2a4 	.word	0x0801c2a4
 8015c48:	0801c2b0 	.word	0x0801c2b0
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c4c:	7ffb      	ldrb	r3, [r7, #31]
 8015c4e:	2b04      	cmp	r3, #4
 8015c50:	d009      	beq.n	8015c66 <dhcp_parse_reply+0x31a>
 8015c52:	4b80      	ldr	r3, [pc, #512]	; (8015e54 <dhcp_parse_reply+0x508>)
 8015c54:	f240 6229 	movw	r2, #1577	; 0x629
 8015c58:	497f      	ldr	r1, [pc, #508]	; (8015e58 <dhcp_parse_reply+0x50c>)
 8015c5a:	4880      	ldr	r0, [pc, #512]	; (8015e5c <dhcp_parse_reply+0x510>)
 8015c5c:	f003 fd42 	bl	80196e4 <iprintf>
 8015c60:	f06f 0305 	mvn.w	r3, #5
 8015c64:	e0f2      	b.n	8015e4c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015c66:	2305      	movs	r3, #5
 8015c68:	61bb      	str	r3, [r7, #24]
        break;
 8015c6a:	e002      	b.n	8015c72 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 8015c70:	bf00      	nop
    }
    offset += len + 2;
 8015c72:	7ffb      	ldrb	r3, [r7, #31]
 8015c74:	b29a      	uxth	r2, r3
 8015c76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8015c78:	4413      	add	r3, r2
 8015c7a:	b29b      	uxth	r3, r3
 8015c7c:	3302      	adds	r3, #2
 8015c7e:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 8015c80:	7fbb      	ldrb	r3, [r7, #30]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d079      	beq.n	8015d7a <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 8015c86:	2300      	movs	r3, #0
 8015c88:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015c8a:	69bb      	ldr	r3, [r7, #24]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	db02      	blt.n	8015c96 <dhcp_parse_reply+0x34a>
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	2b07      	cmp	r3, #7
 8015c94:	dd06      	ble.n	8015ca4 <dhcp_parse_reply+0x358>
 8015c96:	4b6f      	ldr	r3, [pc, #444]	; (8015e54 <dhcp_parse_reply+0x508>)
 8015c98:	f240 6236 	movw	r2, #1590	; 0x636
 8015c9c:	4970      	ldr	r1, [pc, #448]	; (8015e60 <dhcp_parse_reply+0x514>)
 8015c9e:	486f      	ldr	r0, [pc, #444]	; (8015e5c <dhcp_parse_reply+0x510>)
 8015ca0:	f003 fd20 	bl	80196e4 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8015ca4:	4a6f      	ldr	r2, [pc, #444]	; (8015e64 <dhcp_parse_reply+0x518>)
 8015ca6:	69bb      	ldr	r3, [r7, #24]
 8015ca8:	4413      	add	r3, r2
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d164      	bne.n	8015d7a <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8015cb0:	7fbb      	ldrb	r3, [r7, #30]
 8015cb2:	2b04      	cmp	r3, #4
 8015cb4:	bf28      	it	cs
 8015cb6:	2304      	movcs	r3, #4
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015cbc:	8afb      	ldrh	r3, [r7, #22]
 8015cbe:	8a7a      	ldrh	r2, [r7, #18]
 8015cc0:	f107 0108 	add.w	r1, r7, #8
 8015cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cc6:	f7f9 fc27 	bl	800f518 <pbuf_copy_partial>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	461a      	mov	r2, r3
 8015cce:	8a7b      	ldrh	r3, [r7, #18]
 8015cd0:	4293      	cmp	r3, r2
 8015cd2:	d002      	beq.n	8015cda <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 8015cd4:	f06f 0301 	mvn.w	r3, #1
 8015cd8:	e0b8      	b.n	8015e4c <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 8015cda:	7fbb      	ldrb	r3, [r7, #30]
 8015cdc:	2b04      	cmp	r3, #4
 8015cde:	d927      	bls.n	8015d30 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015ce0:	7fbb      	ldrb	r3, [r7, #30]
 8015ce2:	f003 0303 	and.w	r3, r3, #3
 8015ce6:	b2db      	uxtb	r3, r3
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d009      	beq.n	8015d00 <dhcp_parse_reply+0x3b4>
 8015cec:	4b59      	ldr	r3, [pc, #356]	; (8015e54 <dhcp_parse_reply+0x508>)
 8015cee:	f240 623e 	movw	r2, #1598	; 0x63e
 8015cf2:	495d      	ldr	r1, [pc, #372]	; (8015e68 <dhcp_parse_reply+0x51c>)
 8015cf4:	4859      	ldr	r0, [pc, #356]	; (8015e5c <dhcp_parse_reply+0x510>)
 8015cf6:	f003 fcf5 	bl	80196e4 <iprintf>
 8015cfa:	f06f 0305 	mvn.w	r3, #5
 8015cfe:	e0a5      	b.n	8015e4c <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8015d00:	4a58      	ldr	r2, [pc, #352]	; (8015e64 <dhcp_parse_reply+0x518>)
 8015d02:	69bb      	ldr	r3, [r7, #24]
 8015d04:	4413      	add	r3, r2
 8015d06:	2201      	movs	r2, #1
 8015d08:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7f8 f863 	bl	800ddd8 <lwip_htonl>
 8015d12:	4601      	mov	r1, r0
 8015d14:	4a55      	ldr	r2, [pc, #340]	; (8015e6c <dhcp_parse_reply+0x520>)
 8015d16:	69bb      	ldr	r3, [r7, #24]
 8015d18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8015d1c:	7fbb      	ldrb	r3, [r7, #30]
 8015d1e:	3b04      	subs	r3, #4
 8015d20:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8015d22:	8afb      	ldrh	r3, [r7, #22]
 8015d24:	3304      	adds	r3, #4
 8015d26:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 8015d28:	69bb      	ldr	r3, [r7, #24]
 8015d2a:	3301      	adds	r3, #1
 8015d2c:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8015d2e:	e7ac      	b.n	8015c8a <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8015d30:	7fbb      	ldrb	r3, [r7, #30]
 8015d32:	2b04      	cmp	r3, #4
 8015d34:	d106      	bne.n	8015d44 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7f8 f84d 	bl	800ddd8 <lwip_htonl>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	60bb      	str	r3, [r7, #8]
 8015d42:	e010      	b.n	8015d66 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015d44:	7fbb      	ldrb	r3, [r7, #30]
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d009      	beq.n	8015d5e <dhcp_parse_reply+0x412>
 8015d4a:	4b42      	ldr	r3, [pc, #264]	; (8015e54 <dhcp_parse_reply+0x508>)
 8015d4c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8015d50:	4947      	ldr	r1, [pc, #284]	; (8015e70 <dhcp_parse_reply+0x524>)
 8015d52:	4842      	ldr	r0, [pc, #264]	; (8015e5c <dhcp_parse_reply+0x510>)
 8015d54:	f003 fcc6 	bl	80196e4 <iprintf>
 8015d58:	f06f 0305 	mvn.w	r3, #5
 8015d5c:	e076      	b.n	8015e4c <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 8015d5e:	f107 0308 	add.w	r3, r7, #8
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 8015d66:	4a3f      	ldr	r2, [pc, #252]	; (8015e64 <dhcp_parse_reply+0x518>)
 8015d68:	69bb      	ldr	r3, [r7, #24]
 8015d6a:	4413      	add	r3, r2
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8015d70:	68ba      	ldr	r2, [r7, #8]
 8015d72:	493e      	ldr	r1, [pc, #248]	; (8015e6c <dhcp_parse_reply+0x520>)
 8015d74:	69bb      	ldr	r3, [r7, #24]
 8015d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 8015d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7c:	895b      	ldrh	r3, [r3, #10]
 8015d7e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d323      	bcc.n	8015dcc <dhcp_parse_reply+0x480>
      offset -= q->len;
 8015d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d86:	895b      	ldrh	r3, [r3, #10]
 8015d88:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015d8a:	1ad3      	subs	r3, r2, r3
 8015d8c:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 8015d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d90:	895b      	ldrh	r3, [r3, #10]
 8015d92:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8015d94:	1ad3      	subs	r3, r2, r3
 8015d96:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 8015d98:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015d9a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d223      	bcs.n	8015de8 <dhcp_parse_reply+0x49c>
 8015da0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d020      	beq.n	8015de8 <dhcp_parse_reply+0x49c>
        q = q->next;
 8015da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d109      	bne.n	8015dc6 <dhcp_parse_reply+0x47a>
 8015db2:	4b28      	ldr	r3, [pc, #160]	; (8015e54 <dhcp_parse_reply+0x508>)
 8015db4:	f240 6254 	movw	r2, #1620	; 0x654
 8015db8:	492e      	ldr	r1, [pc, #184]	; (8015e74 <dhcp_parse_reply+0x528>)
 8015dba:	4828      	ldr	r0, [pc, #160]	; (8015e5c <dhcp_parse_reply+0x510>)
 8015dbc:	f003 fc92 	bl	80196e4 <iprintf>
 8015dc0:	f06f 0305 	mvn.w	r3, #5
 8015dc4:	e042      	b.n	8015e4c <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 8015dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d00a      	beq.n	8015de8 <dhcp_parse_reply+0x49c>
 8015dd2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015dd4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d206      	bcs.n	8015de8 <dhcp_parse_reply+0x49c>
 8015dda:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8015ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015dde:	4413      	add	r3, r2
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	2bff      	cmp	r3, #255	; 0xff
 8015de4:	f47f adf6 	bne.w	80159d4 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015de8:	4b1e      	ldr	r3, [pc, #120]	; (8015e64 <dhcp_parse_reply+0x518>)
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d018      	beq.n	8015e22 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015df0:	4b1e      	ldr	r3, [pc, #120]	; (8015e6c <dhcp_parse_reply+0x520>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015df6:	4b1b      	ldr	r3, [pc, #108]	; (8015e64 <dhcp_parse_reply+0x518>)
 8015df8:	2200      	movs	r2, #0
 8015dfa:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2b01      	cmp	r3, #1
 8015e00:	d102      	bne.n	8015e08 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8015e02:	2301      	movs	r3, #1
 8015e04:	627b      	str	r3, [r7, #36]	; 0x24
 8015e06:	e00c      	b.n	8015e22 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	2b02      	cmp	r3, #2
 8015e0c:	d102      	bne.n	8015e14 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8015e0e:	2301      	movs	r3, #1
 8015e10:	623b      	str	r3, [r7, #32]
 8015e12:	e006      	b.n	8015e22 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2b03      	cmp	r3, #3
 8015e18:	d103      	bne.n	8015e22 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8015e1e:	2301      	movs	r3, #1
 8015e20:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8015e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d006      	beq.n	8015e36 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8015e2c:	236c      	movs	r3, #108	; 0x6c
 8015e2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015e30:	23ec      	movs	r3, #236	; 0xec
 8015e32:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8015e34:	e5a8      	b.n	8015988 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 8015e36:	6a3b      	ldr	r3, [r7, #32]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d006      	beq.n	8015e4a <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 8015e40:	232c      	movs	r3, #44	; 0x2c
 8015e42:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015e44:	236c      	movs	r3, #108	; 0x6c
 8015e46:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8015e48:	e59e      	b.n	8015988 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 8015e4a:	2300      	movs	r3, #0
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	3738      	adds	r7, #56	; 0x38
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}
 8015e54:	0801bfec 	.word	0x0801bfec
 8015e58:	0801c284 	.word	0x0801c284
 8015e5c:	0801c04c 	.word	0x0801c04c
 8015e60:	0801c2c8 	.word	0x0801c2c8
 8015e64:	2000ab4c 	.word	0x2000ab4c
 8015e68:	0801c2dc 	.word	0x0801c2dc
 8015e6c:	2000ab54 	.word	0x2000ab54
 8015e70:	0801c2f4 	.word	0x0801c2f4
 8015e74:	0801c308 	.word	0x0801c308

08015e78 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b08a      	sub	sp, #40	; 0x28
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015e86:	4b68      	ldr	r3, [pc, #416]	; (8016028 <dhcp_recv+0x1b0>)
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e8c:	6a3b      	ldr	r3, [r7, #32]
 8015e8e:	6a1b      	ldr	r3, [r3, #32]
 8015e90:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	685b      	ldr	r3, [r3, #4]
 8015e96:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015e98:	69fb      	ldr	r3, [r7, #28]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	f000 80a9 	beq.w	8015ff2 <dhcp_recv+0x17a>
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	7a1b      	ldrb	r3, [r3, #8]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	f000 80a4 	beq.w	8015ff2 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d006      	beq.n	8015ec0 <dhcp_recv+0x48>
 8015eb2:	4b5e      	ldr	r3, [pc, #376]	; (801602c <dhcp_recv+0x1b4>)
 8015eb4:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8015eb8:	495d      	ldr	r1, [pc, #372]	; (8016030 <dhcp_recv+0x1b8>)
 8015eba:	485e      	ldr	r0, [pc, #376]	; (8016034 <dhcp_recv+0x1bc>)
 8015ebc:	f003 fc12 	bl	80196e4 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	895b      	ldrh	r3, [r3, #10]
 8015ec4:	2b2b      	cmp	r3, #43	; 0x2b
 8015ec6:	f240 8096 	bls.w	8015ff6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015eca:	69bb      	ldr	r3, [r7, #24]
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	2b02      	cmp	r3, #2
 8015ed0:	f040 8093 	bne.w	8015ffa <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015eda:	e012      	b.n	8015f02 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ee0:	6a3a      	ldr	r2, [r7, #32]
 8015ee2:	4413      	add	r3, r2
 8015ee4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8015ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eec:	69b9      	ldr	r1, [r7, #24]
 8015eee:	440b      	add	r3, r1
 8015ef0:	7f1b      	ldrb	r3, [r3, #28]
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	f040 8083 	bne.w	8015ffe <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8015ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015efc:	3301      	adds	r3, #1
 8015efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f02:	6a3b      	ldr	r3, [r7, #32]
 8015f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	d207      	bcs.n	8015f20 <dhcp_recv+0xa8>
 8015f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f14:	2b05      	cmp	r3, #5
 8015f16:	d803      	bhi.n	8015f20 <dhcp_recv+0xa8>
 8015f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f1c:	2b0f      	cmp	r3, #15
 8015f1e:	d9dd      	bls.n	8015edc <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015f20:	69bb      	ldr	r3, [r7, #24]
 8015f22:	685b      	ldr	r3, [r3, #4]
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7f7 ff57 	bl	800ddd8 <lwip_htonl>
 8015f2a:	4602      	mov	r2, r0
 8015f2c:	69fb      	ldr	r3, [r7, #28]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d166      	bne.n	8016002 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8015f34:	6879      	ldr	r1, [r7, #4]
 8015f36:	69f8      	ldr	r0, [r7, #28]
 8015f38:	f7ff fd08 	bl	801594c <dhcp_parse_reply>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d161      	bne.n	8016006 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015f42:	4b3d      	ldr	r3, [pc, #244]	; (8016038 <dhcp_recv+0x1c0>)
 8015f44:	785b      	ldrb	r3, [r3, #1]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d05f      	beq.n	801600a <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015f4a:	4b3c      	ldr	r3, [pc, #240]	; (801603c <dhcp_recv+0x1c4>)
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015f50:	7dfb      	ldrb	r3, [r7, #23]
 8015f52:	2b05      	cmp	r3, #5
 8015f54:	d128      	bne.n	8015fa8 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015f56:	69fb      	ldr	r3, [r7, #28]
 8015f58:	7a5b      	ldrb	r3, [r3, #9]
 8015f5a:	2b01      	cmp	r3, #1
 8015f5c:	d111      	bne.n	8015f82 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8015f5e:	6a38      	ldr	r0, [r7, #32]
 8015f60:	f7fe fea0 	bl	8014ca4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015f64:	6a3b      	ldr	r3, [r7, #32]
 8015f66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015f6a:	f003 0308 	and.w	r3, r3, #8
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d003      	beq.n	8015f7a <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015f72:	6a38      	ldr	r0, [r7, #32]
 8015f74:	f7fe fc68 	bl	8014848 <dhcp_check>
 8015f78:	e048      	b.n	801600c <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015f7a:	6a38      	ldr	r0, [r7, #32]
 8015f7c:	f7ff f8a0 	bl	80150c0 <dhcp_bind>
 8015f80:	e044      	b.n	801600c <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015f82:	69fb      	ldr	r3, [r7, #28]
 8015f84:	7a5b      	ldrb	r3, [r3, #9]
 8015f86:	2b03      	cmp	r3, #3
 8015f88:	d007      	beq.n	8015f9a <dhcp_recv+0x122>
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	7a5b      	ldrb	r3, [r3, #9]
 8015f8e:	2b04      	cmp	r3, #4
 8015f90:	d003      	beq.n	8015f9a <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015f92:	69fb      	ldr	r3, [r7, #28]
 8015f94:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015f96:	2b05      	cmp	r3, #5
 8015f98:	d138      	bne.n	801600c <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 8015f9a:	6a38      	ldr	r0, [r7, #32]
 8015f9c:	f7fe fe82 	bl	8014ca4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015fa0:	6a38      	ldr	r0, [r7, #32]
 8015fa2:	f7ff f88d 	bl	80150c0 <dhcp_bind>
 8015fa6:	e031      	b.n	801600c <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015fa8:	7dfb      	ldrb	r3, [r7, #23]
 8015faa:	2b06      	cmp	r3, #6
 8015fac:	d113      	bne.n	8015fd6 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015fae:	69fb      	ldr	r3, [r7, #28]
 8015fb0:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8015fb2:	2b03      	cmp	r3, #3
 8015fb4:	d00b      	beq.n	8015fce <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015fb6:	69fb      	ldr	r3, [r7, #28]
 8015fb8:	7a5b      	ldrb	r3, [r3, #9]
 8015fba:	2b01      	cmp	r3, #1
 8015fbc:	d007      	beq.n	8015fce <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015fbe:	69fb      	ldr	r3, [r7, #28]
 8015fc0:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015fc2:	2b04      	cmp	r3, #4
 8015fc4:	d003      	beq.n	8015fce <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015fc6:	69fb      	ldr	r3, [r7, #28]
 8015fc8:	7a5b      	ldrb	r3, [r3, #9]
 8015fca:	2b05      	cmp	r3, #5
 8015fcc:	d103      	bne.n	8015fd6 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015fce:	6a38      	ldr	r0, [r7, #32]
 8015fd0:	f7fe fc20 	bl	8014814 <dhcp_handle_nak>
 8015fd4:	e01a      	b.n	801600c <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015fd6:	7dfb      	ldrb	r3, [r7, #23]
 8015fd8:	2b02      	cmp	r3, #2
 8015fda:	d10a      	bne.n	8015ff2 <dhcp_recv+0x17a>
 8015fdc:	69fb      	ldr	r3, [r7, #28]
 8015fde:	7a5b      	ldrb	r3, [r3, #9]
 8015fe0:	2b06      	cmp	r3, #6
 8015fe2:	d106      	bne.n	8015ff2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 8015fea:	6a38      	ldr	r0, [r7, #32]
 8015fec:	f7fe fc60 	bl	80148b0 <dhcp_handle_offer>
 8015ff0:	e00c      	b.n	801600c <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8015ff2:	bf00      	nop
 8015ff4:	e00a      	b.n	801600c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8015ff6:	bf00      	nop
 8015ff8:	e008      	b.n	801600c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8015ffa:	bf00      	nop
 8015ffc:	e006      	b.n	801600c <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8015ffe:	bf00      	nop
 8016000:	e004      	b.n	801600c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8016002:	bf00      	nop
 8016004:	e002      	b.n	801600c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8016006:	bf00      	nop
 8016008:	e000      	b.n	801600c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801600a:	bf00      	nop
  if (dhcp != NULL) {
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d002      	beq.n	8016018 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8016012:	69fb      	ldr	r3, [r7, #28]
 8016014:	2200      	movs	r2, #0
 8016016:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f7f9 f871 	bl	800f100 <pbuf_free>
}
 801601e:	bf00      	nop
 8016020:	3728      	adds	r7, #40	; 0x28
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	20007608 	.word	0x20007608
 801602c:	0801bfec 	.word	0x0801bfec
 8016030:	0801c118 	.word	0x0801c118
 8016034:	0801c04c 	.word	0x0801c04c
 8016038:	2000ab4c 	.word	0x2000ab4c
 801603c:	2000ab54 	.word	0x2000ab54

08016040 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8016040:	b590      	push	{r4, r7, lr}
 8016042:	b087      	sub	sp, #28
 8016044:	af00      	add	r7, sp, #0
 8016046:	60f8      	str	r0, [r7, #12]
 8016048:	60b9      	str	r1, [r7, #8]
 801604a:	4613      	mov	r3, r2
 801604c:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d109      	bne.n	8016068 <dhcp_create_msg+0x28>
 8016054:	4ba3      	ldr	r3, [pc, #652]	; (80162e4 <dhcp_create_msg+0x2a4>)
 8016056:	f240 721d 	movw	r2, #1821	; 0x71d
 801605a:	49a3      	ldr	r1, [pc, #652]	; (80162e8 <dhcp_create_msg+0x2a8>)
 801605c:	48a3      	ldr	r0, [pc, #652]	; (80162ec <dhcp_create_msg+0x2ac>)
 801605e:	f003 fb41 	bl	80196e4 <iprintf>
 8016062:	f06f 030f 	mvn.w	r3, #15
 8016066:	e138      	b.n	80162da <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d109      	bne.n	8016082 <dhcp_create_msg+0x42>
 801606e:	4b9d      	ldr	r3, [pc, #628]	; (80162e4 <dhcp_create_msg+0x2a4>)
 8016070:	f240 721e 	movw	r2, #1822	; 0x71e
 8016074:	499e      	ldr	r1, [pc, #632]	; (80162f0 <dhcp_create_msg+0x2b0>)
 8016076:	489d      	ldr	r0, [pc, #628]	; (80162ec <dhcp_create_msg+0x2ac>)
 8016078:	f003 fb34 	bl	80196e4 <iprintf>
 801607c:	f06f 0305 	mvn.w	r3, #5
 8016080:	e12b      	b.n	80162da <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	68db      	ldr	r3, [r3, #12]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d006      	beq.n	8016098 <dhcp_create_msg+0x58>
 801608a:	4b96      	ldr	r3, [pc, #600]	; (80162e4 <dhcp_create_msg+0x2a4>)
 801608c:	f240 721f 	movw	r2, #1823	; 0x71f
 8016090:	4998      	ldr	r1, [pc, #608]	; (80162f4 <dhcp_create_msg+0x2b4>)
 8016092:	4896      	ldr	r0, [pc, #600]	; (80162ec <dhcp_create_msg+0x2ac>)
 8016094:	f003 fb26 	bl	80196e4 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	691b      	ldr	r3, [r3, #16]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d006      	beq.n	80160ae <dhcp_create_msg+0x6e>
 80160a0:	4b90      	ldr	r3, [pc, #576]	; (80162e4 <dhcp_create_msg+0x2a4>)
 80160a2:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 80160a6:	4994      	ldr	r1, [pc, #592]	; (80162f8 <dhcp_create_msg+0x2b8>)
 80160a8:	4890      	ldr	r0, [pc, #576]	; (80162ec <dhcp_create_msg+0x2ac>)
 80160aa:	f003 fb1b 	bl	80196e4 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80160ae:	2200      	movs	r2, #0
 80160b0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80160b4:	2000      	movs	r0, #0
 80160b6:	f7f8 fcb1 	bl	800ea1c <pbuf_alloc>
 80160ba:	4602      	mov	r2, r0
 80160bc:	68bb      	ldr	r3, [r7, #8]
 80160be:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d102      	bne.n	80160ce <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 80160c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80160cc:	e105      	b.n	80162da <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80160ce:	68bb      	ldr	r3, [r7, #8]
 80160d0:	68db      	ldr	r3, [r3, #12]
 80160d2:	895b      	ldrh	r3, [r3, #10]
 80160d4:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80160d8:	d206      	bcs.n	80160e8 <dhcp_create_msg+0xa8>
 80160da:	4b82      	ldr	r3, [pc, #520]	; (80162e4 <dhcp_create_msg+0x2a4>)
 80160dc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80160e0:	4986      	ldr	r1, [pc, #536]	; (80162fc <dhcp_create_msg+0x2bc>)
 80160e2:	4882      	ldr	r0, [pc, #520]	; (80162ec <dhcp_create_msg+0x2ac>)
 80160e4:	f003 fafe 	bl	80196e4 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80160e8:	79fb      	ldrb	r3, [r7, #7]
 80160ea:	2b03      	cmp	r3, #3
 80160ec:	d103      	bne.n	80160f6 <dhcp_create_msg+0xb6>
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	7a5b      	ldrb	r3, [r3, #9]
 80160f2:	2b03      	cmp	r3, #3
 80160f4:	d10d      	bne.n	8016112 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	7a9b      	ldrb	r3, [r3, #10]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d105      	bne.n	801610a <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80160fe:	f003 fb09 	bl	8019714 <rand>
 8016102:	4603      	mov	r3, r0
 8016104:	461a      	mov	r2, r3
 8016106:	4b7e      	ldr	r3, [pc, #504]	; (8016300 <dhcp_create_msg+0x2c0>)
 8016108:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801610a:	4b7d      	ldr	r3, [pc, #500]	; (8016300 <dhcp_create_msg+0x2c0>)
 801610c:	681a      	ldr	r2, [r3, #0]
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	68db      	ldr	r3, [r3, #12]
 8016116:	685a      	ldr	r2, [r3, #4]
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	691b      	ldr	r3, [r3, #16]
 8016120:	2201      	movs	r2, #1
 8016122:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	691b      	ldr	r3, [r3, #16]
 8016128:	2201      	movs	r2, #1
 801612a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	691b      	ldr	r3, [r3, #16]
 8016130:	68fa      	ldr	r2, [r7, #12]
 8016132:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8016136:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	691b      	ldr	r3, [r3, #16]
 801613c:	2200      	movs	r2, #0
 801613e:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	681a      	ldr	r2, [r3, #0]
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	691c      	ldr	r4, [r3, #16]
 8016148:	4610      	mov	r0, r2
 801614a:	f7f7 fe45 	bl	800ddd8 <lwip_htonl>
 801614e:	4603      	mov	r3, r0
 8016150:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	691b      	ldr	r3, [r3, #16]
 8016156:	2200      	movs	r2, #0
 8016158:	721a      	strb	r2, [r3, #8]
 801615a:	2200      	movs	r2, #0
 801615c:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	691b      	ldr	r3, [r3, #16]
 8016162:	2200      	movs	r2, #0
 8016164:	729a      	strb	r2, [r3, #10]
 8016166:	2200      	movs	r2, #0
 8016168:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	691b      	ldr	r3, [r3, #16]
 801616e:	2200      	movs	r2, #0
 8016170:	731a      	strb	r2, [r3, #12]
 8016172:	2200      	movs	r2, #0
 8016174:	735a      	strb	r2, [r3, #13]
 8016176:	2200      	movs	r2, #0
 8016178:	739a      	strb	r2, [r3, #14]
 801617a:	2200      	movs	r2, #0
 801617c:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801617e:	79fb      	ldrb	r3, [r7, #7]
 8016180:	2b08      	cmp	r3, #8
 8016182:	d010      	beq.n	80161a6 <dhcp_create_msg+0x166>
 8016184:	79fb      	ldrb	r3, [r7, #7]
 8016186:	2b04      	cmp	r3, #4
 8016188:	d00d      	beq.n	80161a6 <dhcp_create_msg+0x166>
 801618a:	79fb      	ldrb	r3, [r7, #7]
 801618c:	2b07      	cmp	r3, #7
 801618e:	d00a      	beq.n	80161a6 <dhcp_create_msg+0x166>
 8016190:	79fb      	ldrb	r3, [r7, #7]
 8016192:	2b03      	cmp	r3, #3
 8016194:	d10d      	bne.n	80161b2 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801619a:	2b05      	cmp	r3, #5
 801619c:	d003      	beq.n	80161a6 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801619e:	68bb      	ldr	r3, [r7, #8]
 80161a0:	7a5b      	ldrb	r3, [r3, #9]
 80161a2:	2b04      	cmp	r3, #4
 80161a4:	d105      	bne.n	80161b2 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	1d1a      	adds	r2, r3, #4
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	691b      	ldr	r3, [r3, #16]
 80161ae:	6812      	ldr	r2, [r2, #0]
 80161b0:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	691b      	ldr	r3, [r3, #16]
 80161b6:	2200      	movs	r2, #0
 80161b8:	741a      	strb	r2, [r3, #16]
 80161ba:	2200      	movs	r2, #0
 80161bc:	745a      	strb	r2, [r3, #17]
 80161be:	2200      	movs	r2, #0
 80161c0:	749a      	strb	r2, [r3, #18]
 80161c2:	2200      	movs	r2, #0
 80161c4:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	691b      	ldr	r3, [r3, #16]
 80161ca:	2200      	movs	r2, #0
 80161cc:	751a      	strb	r2, [r3, #20]
 80161ce:	2200      	movs	r2, #0
 80161d0:	755a      	strb	r2, [r3, #21]
 80161d2:	2200      	movs	r2, #0
 80161d4:	759a      	strb	r2, [r3, #22]
 80161d6:	2200      	movs	r2, #0
 80161d8:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	691b      	ldr	r3, [r3, #16]
 80161de:	2200      	movs	r2, #0
 80161e0:	761a      	strb	r2, [r3, #24]
 80161e2:	2200      	movs	r2, #0
 80161e4:	765a      	strb	r2, [r3, #25]
 80161e6:	2200      	movs	r2, #0
 80161e8:	769a      	strb	r2, [r3, #26]
 80161ea:	2200      	movs	r2, #0
 80161ec:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80161ee:	2300      	movs	r3, #0
 80161f0:	82fb      	strh	r3, [r7, #22]
 80161f2:	e019      	b.n	8016228 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161fa:	b29b      	uxth	r3, r3
 80161fc:	8afa      	ldrh	r2, [r7, #22]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d208      	bcs.n	8016214 <dhcp_create_msg+0x1d4>
 8016202:	8afb      	ldrh	r3, [r7, #22]
 8016204:	2b05      	cmp	r3, #5
 8016206:	d805      	bhi.n	8016214 <dhcp_create_msg+0x1d4>
 8016208:	8afb      	ldrh	r3, [r7, #22]
 801620a:	68fa      	ldr	r2, [r7, #12]
 801620c:	4413      	add	r3, r2
 801620e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8016212:	e000      	b.n	8016216 <dhcp_create_msg+0x1d6>
 8016214:	2100      	movs	r1, #0
 8016216:	68bb      	ldr	r3, [r7, #8]
 8016218:	691a      	ldr	r2, [r3, #16]
 801621a:	8afb      	ldrh	r3, [r7, #22]
 801621c:	4413      	add	r3, r2
 801621e:	460a      	mov	r2, r1
 8016220:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8016222:	8afb      	ldrh	r3, [r7, #22]
 8016224:	3301      	adds	r3, #1
 8016226:	82fb      	strh	r3, [r7, #22]
 8016228:	8afb      	ldrh	r3, [r7, #22]
 801622a:	2b0f      	cmp	r3, #15
 801622c:	d9e2      	bls.n	80161f4 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801622e:	2300      	movs	r3, #0
 8016230:	82fb      	strh	r3, [r7, #22]
 8016232:	e009      	b.n	8016248 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8016234:	68bb      	ldr	r3, [r7, #8]
 8016236:	691a      	ldr	r2, [r3, #16]
 8016238:	8afb      	ldrh	r3, [r7, #22]
 801623a:	4413      	add	r3, r2
 801623c:	2200      	movs	r2, #0
 801623e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8016242:	8afb      	ldrh	r3, [r7, #22]
 8016244:	3301      	adds	r3, #1
 8016246:	82fb      	strh	r3, [r7, #22]
 8016248:	8afb      	ldrh	r3, [r7, #22]
 801624a:	2b3f      	cmp	r3, #63	; 0x3f
 801624c:	d9f2      	bls.n	8016234 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801624e:	2300      	movs	r3, #0
 8016250:	82fb      	strh	r3, [r7, #22]
 8016252:	e009      	b.n	8016268 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	691a      	ldr	r2, [r3, #16]
 8016258:	8afb      	ldrh	r3, [r7, #22]
 801625a:	4413      	add	r3, r2
 801625c:	2200      	movs	r2, #0
 801625e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8016262:	8afb      	ldrh	r3, [r7, #22]
 8016264:	3301      	adds	r3, #1
 8016266:	82fb      	strh	r3, [r7, #22]
 8016268:	8afb      	ldrh	r3, [r7, #22]
 801626a:	2b7f      	cmp	r3, #127	; 0x7f
 801626c:	d9f2      	bls.n	8016254 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801626e:	68bb      	ldr	r3, [r7, #8]
 8016270:	691b      	ldr	r3, [r3, #16]
 8016272:	2200      	movs	r2, #0
 8016274:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016278:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801627c:	2200      	movs	r2, #0
 801627e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016282:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016286:	2200      	movs	r2, #0
 8016288:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801628c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016290:	2200      	movs	r2, #0
 8016292:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016296:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	2200      	movs	r2, #0
 801629e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80162a0:	2300      	movs	r3, #0
 80162a2:	82fb      	strh	r3, [r7, #22]
 80162a4:	e00b      	b.n	80162be <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	691a      	ldr	r2, [r3, #16]
 80162aa:	8afb      	ldrh	r3, [r7, #22]
 80162ac:	8af9      	ldrh	r1, [r7, #22]
 80162ae:	b2c9      	uxtb	r1, r1
 80162b0:	4413      	add	r3, r2
 80162b2:	460a      	mov	r2, r1
 80162b4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80162b8:	8afb      	ldrh	r3, [r7, #22]
 80162ba:	3301      	adds	r3, #1
 80162bc:	82fb      	strh	r3, [r7, #22]
 80162be:	8afb      	ldrh	r3, [r7, #22]
 80162c0:	2b43      	cmp	r3, #67	; 0x43
 80162c2:	d9f0      	bls.n	80162a6 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80162c4:	2201      	movs	r2, #1
 80162c6:	2135      	movs	r1, #53	; 0x35
 80162c8:	68b8      	ldr	r0, [r7, #8]
 80162ca:	f7ff fa4d 	bl	8015768 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80162ce:	79fb      	ldrb	r3, [r7, #7]
 80162d0:	4619      	mov	r1, r3
 80162d2:	68b8      	ldr	r0, [r7, #8]
 80162d4:	f7ff fa82 	bl	80157dc <dhcp_option_byte>
  return ERR_OK;
 80162d8:	2300      	movs	r3, #0
}
 80162da:	4618      	mov	r0, r3
 80162dc:	371c      	adds	r7, #28
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd90      	pop	{r4, r7, pc}
 80162e2:	bf00      	nop
 80162e4:	0801bfec 	.word	0x0801bfec
 80162e8:	0801c31c 	.word	0x0801c31c
 80162ec:	0801c04c 	.word	0x0801c04c
 80162f0:	0801c33c 	.word	0x0801c33c
 80162f4:	0801c35c 	.word	0x0801c35c
 80162f8:	0801c384 	.word	0x0801c384
 80162fc:	0801c3ac 	.word	0x0801c3ac
 8016300:	20004250 	.word	0x20004250

08016304 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d107      	bne.n	8016322 <dhcp_delete_msg+0x1e>
 8016312:	4b18      	ldr	r3, [pc, #96]	; (8016374 <dhcp_delete_msg+0x70>)
 8016314:	f240 726d 	movw	r2, #1901	; 0x76d
 8016318:	4917      	ldr	r1, [pc, #92]	; (8016378 <dhcp_delete_msg+0x74>)
 801631a:	4818      	ldr	r0, [pc, #96]	; (801637c <dhcp_delete_msg+0x78>)
 801631c:	f003 f9e2 	bl	80196e4 <iprintf>
 8016320:	e024      	b.n	801636c <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	68db      	ldr	r3, [r3, #12]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d106      	bne.n	8016338 <dhcp_delete_msg+0x34>
 801632a:	4b12      	ldr	r3, [pc, #72]	; (8016374 <dhcp_delete_msg+0x70>)
 801632c:	f240 726e 	movw	r2, #1902	; 0x76e
 8016330:	4913      	ldr	r1, [pc, #76]	; (8016380 <dhcp_delete_msg+0x7c>)
 8016332:	4812      	ldr	r0, [pc, #72]	; (801637c <dhcp_delete_msg+0x78>)
 8016334:	f003 f9d6 	bl	80196e4 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	691b      	ldr	r3, [r3, #16]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d106      	bne.n	801634e <dhcp_delete_msg+0x4a>
 8016340:	4b0c      	ldr	r3, [pc, #48]	; (8016374 <dhcp_delete_msg+0x70>)
 8016342:	f240 726f 	movw	r2, #1903	; 0x76f
 8016346:	490f      	ldr	r1, [pc, #60]	; (8016384 <dhcp_delete_msg+0x80>)
 8016348:	480c      	ldr	r0, [pc, #48]	; (801637c <dhcp_delete_msg+0x78>)
 801634a:	f003 f9cb 	bl	80196e4 <iprintf>
  if (dhcp->p_out != NULL) {
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	68db      	ldr	r3, [r3, #12]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d004      	beq.n	8016360 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	68db      	ldr	r3, [r3, #12]
 801635a:	4618      	mov	r0, r3
 801635c:	f7f8 fed0 	bl	800f100 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2200      	movs	r2, #0
 8016364:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	611a      	str	r2, [r3, #16]
}
 801636c:	3708      	adds	r7, #8
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	0801bfec 	.word	0x0801bfec
 8016378:	0801c3ec 	.word	0x0801c3ec
 801637c:	0801c04c 	.word	0x0801c04c
 8016380:	0801c40c 	.word	0x0801c40c
 8016384:	0801c434 	.word	0x0801c434

08016388 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b082      	sub	sp, #8
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d107      	bne.n	80163a6 <dhcp_option_trailer+0x1e>
 8016396:	4b24      	ldr	r3, [pc, #144]	; (8016428 <dhcp_option_trailer+0xa0>)
 8016398:	f240 7282 	movw	r2, #1922	; 0x782
 801639c:	4923      	ldr	r1, [pc, #140]	; (801642c <dhcp_option_trailer+0xa4>)
 801639e:	4824      	ldr	r0, [pc, #144]	; (8016430 <dhcp_option_trailer+0xa8>)
 80163a0:	f003 f9a0 	bl	80196e4 <iprintf>
 80163a4:	e03c      	b.n	8016420 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	691b      	ldr	r3, [r3, #16]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d106      	bne.n	80163bc <dhcp_option_trailer+0x34>
 80163ae:	4b1e      	ldr	r3, [pc, #120]	; (8016428 <dhcp_option_trailer+0xa0>)
 80163b0:	f240 7283 	movw	r2, #1923	; 0x783
 80163b4:	491f      	ldr	r1, [pc, #124]	; (8016434 <dhcp_option_trailer+0xac>)
 80163b6:	481e      	ldr	r0, [pc, #120]	; (8016430 <dhcp_option_trailer+0xa8>)
 80163b8:	f003 f994 	bl	80196e4 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	8a9b      	ldrh	r3, [r3, #20]
 80163c0:	2b43      	cmp	r3, #67	; 0x43
 80163c2:	d906      	bls.n	80163d2 <dhcp_option_trailer+0x4a>
 80163c4:	4b18      	ldr	r3, [pc, #96]	; (8016428 <dhcp_option_trailer+0xa0>)
 80163c6:	f240 7284 	movw	r2, #1924	; 0x784
 80163ca:	491b      	ldr	r1, [pc, #108]	; (8016438 <dhcp_option_trailer+0xb0>)
 80163cc:	4818      	ldr	r0, [pc, #96]	; (8016430 <dhcp_option_trailer+0xa8>)
 80163ce:	f003 f989 	bl	80196e4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	691a      	ldr	r2, [r3, #16]
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	8a9b      	ldrh	r3, [r3, #20]
 80163da:	1c59      	adds	r1, r3, #1
 80163dc:	b288      	uxth	r0, r1
 80163de:	6879      	ldr	r1, [r7, #4]
 80163e0:	8288      	strh	r0, [r1, #20]
 80163e2:	4413      	add	r3, r2
 80163e4:	22ff      	movs	r2, #255	; 0xff
 80163e6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80163ea:	e00b      	b.n	8016404 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	691a      	ldr	r2, [r3, #16]
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	8a9b      	ldrh	r3, [r3, #20]
 80163f4:	1c59      	adds	r1, r3, #1
 80163f6:	b288      	uxth	r0, r1
 80163f8:	6879      	ldr	r1, [r7, #4]
 80163fa:	8288      	strh	r0, [r1, #20]
 80163fc:	4413      	add	r3, r2
 80163fe:	2200      	movs	r2, #0
 8016400:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	8a9b      	ldrh	r3, [r3, #20]
 8016408:	2b43      	cmp	r3, #67	; 0x43
 801640a:	d905      	bls.n	8016418 <dhcp_option_trailer+0x90>
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	8a9b      	ldrh	r3, [r3, #20]
 8016410:	f003 0303 	and.w	r3, r3, #3
 8016414:	2b00      	cmp	r3, #0
 8016416:	d003      	beq.n	8016420 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801641c:	2b43      	cmp	r3, #67	; 0x43
 801641e:	d9e5      	bls.n	80163ec <dhcp_option_trailer+0x64>
  }
}
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
 8016426:	bf00      	nop
 8016428:	0801bfec 	.word	0x0801bfec
 801642c:	0801c45c 	.word	0x0801c45c
 8016430:	0801c04c 	.word	0x0801c04c
 8016434:	0801c480 	.word	0x0801c480
 8016438:	0801c4ac 	.word	0x0801c4ac

0801643c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801643c:	b480      	push	{r7}
 801643e:	b085      	sub	sp, #20
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d017      	beq.n	801647a <dhcp_supplied_address+0x3e>
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	6a1b      	ldr	r3, [r3, #32]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d013      	beq.n	801647a <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6a1b      	ldr	r3, [r3, #32]
 8016456:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	7a5b      	ldrb	r3, [r3, #9]
 801645c:	2b0a      	cmp	r3, #10
 801645e:	d007      	beq.n	8016470 <dhcp_supplied_address+0x34>
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	7a5b      	ldrb	r3, [r3, #9]
 8016464:	2b05      	cmp	r3, #5
 8016466:	d003      	beq.n	8016470 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801646c:	2b04      	cmp	r3, #4
 801646e:	d101      	bne.n	8016474 <dhcp_supplied_address+0x38>
 8016470:	2301      	movs	r3, #1
 8016472:	e000      	b.n	8016476 <dhcp_supplied_address+0x3a>
 8016474:	2300      	movs	r3, #0
 8016476:	b2db      	uxtb	r3, r3
 8016478:	e000      	b.n	801647c <dhcp_supplied_address+0x40>
  }
  return 0;
 801647a:	2300      	movs	r3, #0
}
 801647c:	4618      	mov	r0, r3
 801647e:	3714      	adds	r7, #20
 8016480:	46bd      	mov	sp, r7
 8016482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016486:	4770      	bx	lr

08016488 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016490:	4915      	ldr	r1, [pc, #84]	; (80164e8 <etharp_free_entry+0x60>)
 8016492:	687a      	ldr	r2, [r7, #4]
 8016494:	4613      	mov	r3, r2
 8016496:	005b      	lsls	r3, r3, #1
 8016498:	4413      	add	r3, r2
 801649a:	00db      	lsls	r3, r3, #3
 801649c:	440b      	add	r3, r1
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d013      	beq.n	80164cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80164a4:	4910      	ldr	r1, [pc, #64]	; (80164e8 <etharp_free_entry+0x60>)
 80164a6:	687a      	ldr	r2, [r7, #4]
 80164a8:	4613      	mov	r3, r2
 80164aa:	005b      	lsls	r3, r3, #1
 80164ac:	4413      	add	r3, r2
 80164ae:	00db      	lsls	r3, r3, #3
 80164b0:	440b      	add	r3, r1
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	4618      	mov	r0, r3
 80164b6:	f7f8 fe23 	bl	800f100 <pbuf_free>
    arp_table[i].q = NULL;
 80164ba:	490b      	ldr	r1, [pc, #44]	; (80164e8 <etharp_free_entry+0x60>)
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	4613      	mov	r3, r2
 80164c0:	005b      	lsls	r3, r3, #1
 80164c2:	4413      	add	r3, r2
 80164c4:	00db      	lsls	r3, r3, #3
 80164c6:	440b      	add	r3, r1
 80164c8:	2200      	movs	r2, #0
 80164ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80164cc:	4906      	ldr	r1, [pc, #24]	; (80164e8 <etharp_free_entry+0x60>)
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	4613      	mov	r3, r2
 80164d2:	005b      	lsls	r3, r3, #1
 80164d4:	4413      	add	r3, r2
 80164d6:	00db      	lsls	r3, r3, #3
 80164d8:	440b      	add	r3, r1
 80164da:	3314      	adds	r3, #20
 80164dc:	2200      	movs	r2, #0
 80164de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80164e0:	bf00      	nop
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	20004254 	.word	0x20004254

080164ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b082      	sub	sp, #8
 80164f0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164f2:	2300      	movs	r3, #0
 80164f4:	71fb      	strb	r3, [r7, #7]
 80164f6:	e096      	b.n	8016626 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80164f8:	79fa      	ldrb	r2, [r7, #7]
 80164fa:	494f      	ldr	r1, [pc, #316]	; (8016638 <etharp_tmr+0x14c>)
 80164fc:	4613      	mov	r3, r2
 80164fe:	005b      	lsls	r3, r3, #1
 8016500:	4413      	add	r3, r2
 8016502:	00db      	lsls	r3, r3, #3
 8016504:	440b      	add	r3, r1
 8016506:	3314      	adds	r3, #20
 8016508:	781b      	ldrb	r3, [r3, #0]
 801650a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801650c:	79bb      	ldrb	r3, [r7, #6]
 801650e:	2b00      	cmp	r3, #0
 8016510:	f000 8086 	beq.w	8016620 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8016514:	79fa      	ldrb	r2, [r7, #7]
 8016516:	4948      	ldr	r1, [pc, #288]	; (8016638 <etharp_tmr+0x14c>)
 8016518:	4613      	mov	r3, r2
 801651a:	005b      	lsls	r3, r3, #1
 801651c:	4413      	add	r3, r2
 801651e:	00db      	lsls	r3, r3, #3
 8016520:	440b      	add	r3, r1
 8016522:	3312      	adds	r3, #18
 8016524:	881b      	ldrh	r3, [r3, #0]
 8016526:	3301      	adds	r3, #1
 8016528:	b298      	uxth	r0, r3
 801652a:	4943      	ldr	r1, [pc, #268]	; (8016638 <etharp_tmr+0x14c>)
 801652c:	4613      	mov	r3, r2
 801652e:	005b      	lsls	r3, r3, #1
 8016530:	4413      	add	r3, r2
 8016532:	00db      	lsls	r3, r3, #3
 8016534:	440b      	add	r3, r1
 8016536:	3312      	adds	r3, #18
 8016538:	4602      	mov	r2, r0
 801653a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801653c:	79fa      	ldrb	r2, [r7, #7]
 801653e:	493e      	ldr	r1, [pc, #248]	; (8016638 <etharp_tmr+0x14c>)
 8016540:	4613      	mov	r3, r2
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	4413      	add	r3, r2
 8016546:	00db      	lsls	r3, r3, #3
 8016548:	440b      	add	r3, r1
 801654a:	3312      	adds	r3, #18
 801654c:	881b      	ldrh	r3, [r3, #0]
 801654e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016552:	d215      	bcs.n	8016580 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016554:	79fa      	ldrb	r2, [r7, #7]
 8016556:	4938      	ldr	r1, [pc, #224]	; (8016638 <etharp_tmr+0x14c>)
 8016558:	4613      	mov	r3, r2
 801655a:	005b      	lsls	r3, r3, #1
 801655c:	4413      	add	r3, r2
 801655e:	00db      	lsls	r3, r3, #3
 8016560:	440b      	add	r3, r1
 8016562:	3314      	adds	r3, #20
 8016564:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016566:	2b01      	cmp	r3, #1
 8016568:	d10f      	bne.n	801658a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801656a:	79fa      	ldrb	r2, [r7, #7]
 801656c:	4932      	ldr	r1, [pc, #200]	; (8016638 <etharp_tmr+0x14c>)
 801656e:	4613      	mov	r3, r2
 8016570:	005b      	lsls	r3, r3, #1
 8016572:	4413      	add	r3, r2
 8016574:	00db      	lsls	r3, r3, #3
 8016576:	440b      	add	r3, r1
 8016578:	3312      	adds	r3, #18
 801657a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801657c:	2b04      	cmp	r3, #4
 801657e:	d904      	bls.n	801658a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016580:	79fb      	ldrb	r3, [r7, #7]
 8016582:	4618      	mov	r0, r3
 8016584:	f7ff ff80 	bl	8016488 <etharp_free_entry>
 8016588:	e04a      	b.n	8016620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801658a:	79fa      	ldrb	r2, [r7, #7]
 801658c:	492a      	ldr	r1, [pc, #168]	; (8016638 <etharp_tmr+0x14c>)
 801658e:	4613      	mov	r3, r2
 8016590:	005b      	lsls	r3, r3, #1
 8016592:	4413      	add	r3, r2
 8016594:	00db      	lsls	r3, r3, #3
 8016596:	440b      	add	r3, r1
 8016598:	3314      	adds	r3, #20
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	2b03      	cmp	r3, #3
 801659e:	d10a      	bne.n	80165b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80165a0:	79fa      	ldrb	r2, [r7, #7]
 80165a2:	4925      	ldr	r1, [pc, #148]	; (8016638 <etharp_tmr+0x14c>)
 80165a4:	4613      	mov	r3, r2
 80165a6:	005b      	lsls	r3, r3, #1
 80165a8:	4413      	add	r3, r2
 80165aa:	00db      	lsls	r3, r3, #3
 80165ac:	440b      	add	r3, r1
 80165ae:	3314      	adds	r3, #20
 80165b0:	2204      	movs	r2, #4
 80165b2:	701a      	strb	r2, [r3, #0]
 80165b4:	e034      	b.n	8016620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80165b6:	79fa      	ldrb	r2, [r7, #7]
 80165b8:	491f      	ldr	r1, [pc, #124]	; (8016638 <etharp_tmr+0x14c>)
 80165ba:	4613      	mov	r3, r2
 80165bc:	005b      	lsls	r3, r3, #1
 80165be:	4413      	add	r3, r2
 80165c0:	00db      	lsls	r3, r3, #3
 80165c2:	440b      	add	r3, r1
 80165c4:	3314      	adds	r3, #20
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	2b04      	cmp	r3, #4
 80165ca:	d10a      	bne.n	80165e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80165cc:	79fa      	ldrb	r2, [r7, #7]
 80165ce:	491a      	ldr	r1, [pc, #104]	; (8016638 <etharp_tmr+0x14c>)
 80165d0:	4613      	mov	r3, r2
 80165d2:	005b      	lsls	r3, r3, #1
 80165d4:	4413      	add	r3, r2
 80165d6:	00db      	lsls	r3, r3, #3
 80165d8:	440b      	add	r3, r1
 80165da:	3314      	adds	r3, #20
 80165dc:	2202      	movs	r2, #2
 80165de:	701a      	strb	r2, [r3, #0]
 80165e0:	e01e      	b.n	8016620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80165e2:	79fa      	ldrb	r2, [r7, #7]
 80165e4:	4914      	ldr	r1, [pc, #80]	; (8016638 <etharp_tmr+0x14c>)
 80165e6:	4613      	mov	r3, r2
 80165e8:	005b      	lsls	r3, r3, #1
 80165ea:	4413      	add	r3, r2
 80165ec:	00db      	lsls	r3, r3, #3
 80165ee:	440b      	add	r3, r1
 80165f0:	3314      	adds	r3, #20
 80165f2:	781b      	ldrb	r3, [r3, #0]
 80165f4:	2b01      	cmp	r3, #1
 80165f6:	d113      	bne.n	8016620 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80165f8:	79fa      	ldrb	r2, [r7, #7]
 80165fa:	490f      	ldr	r1, [pc, #60]	; (8016638 <etharp_tmr+0x14c>)
 80165fc:	4613      	mov	r3, r2
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	4413      	add	r3, r2
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	440b      	add	r3, r1
 8016606:	3308      	adds	r3, #8
 8016608:	6818      	ldr	r0, [r3, #0]
 801660a:	79fa      	ldrb	r2, [r7, #7]
 801660c:	4613      	mov	r3, r2
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	4413      	add	r3, r2
 8016612:	00db      	lsls	r3, r3, #3
 8016614:	4a08      	ldr	r2, [pc, #32]	; (8016638 <etharp_tmr+0x14c>)
 8016616:	4413      	add	r3, r2
 8016618:	3304      	adds	r3, #4
 801661a:	4619      	mov	r1, r3
 801661c:	f000 fe3c 	bl	8017298 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016620:	79fb      	ldrb	r3, [r7, #7]
 8016622:	3301      	adds	r3, #1
 8016624:	71fb      	strb	r3, [r7, #7]
 8016626:	79fb      	ldrb	r3, [r7, #7]
 8016628:	2b09      	cmp	r3, #9
 801662a:	f67f af65 	bls.w	80164f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801662e:	bf00      	nop
 8016630:	3708      	adds	r7, #8
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	20004254 	.word	0x20004254

0801663c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b088      	sub	sp, #32
 8016640:	af00      	add	r7, sp, #0
 8016642:	60f8      	str	r0, [r7, #12]
 8016644:	460b      	mov	r3, r1
 8016646:	607a      	str	r2, [r7, #4]
 8016648:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801664a:	230a      	movs	r3, #10
 801664c:	77fb      	strb	r3, [r7, #31]
 801664e:	230a      	movs	r3, #10
 8016650:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8016652:	230a      	movs	r3, #10
 8016654:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8016656:	2300      	movs	r3, #0
 8016658:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801665a:	230a      	movs	r3, #10
 801665c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801665e:	2300      	movs	r3, #0
 8016660:	833b      	strh	r3, [r7, #24]
 8016662:	2300      	movs	r3, #0
 8016664:	82fb      	strh	r3, [r7, #22]
 8016666:	2300      	movs	r3, #0
 8016668:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801666a:	2300      	movs	r3, #0
 801666c:	773b      	strb	r3, [r7, #28]
 801666e:	e093      	b.n	8016798 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8016670:	7f3a      	ldrb	r2, [r7, #28]
 8016672:	4990      	ldr	r1, [pc, #576]	; (80168b4 <etharp_find_entry+0x278>)
 8016674:	4613      	mov	r3, r2
 8016676:	005b      	lsls	r3, r3, #1
 8016678:	4413      	add	r3, r2
 801667a:	00db      	lsls	r3, r3, #3
 801667c:	440b      	add	r3, r1
 801667e:	3314      	adds	r3, #20
 8016680:	781b      	ldrb	r3, [r3, #0]
 8016682:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016684:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016688:	2b0a      	cmp	r3, #10
 801668a:	d105      	bne.n	8016698 <etharp_find_entry+0x5c>
 801668c:	7cfb      	ldrb	r3, [r7, #19]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d102      	bne.n	8016698 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8016692:	7f3b      	ldrb	r3, [r7, #28]
 8016694:	777b      	strb	r3, [r7, #29]
 8016696:	e07c      	b.n	8016792 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016698:	7cfb      	ldrb	r3, [r7, #19]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d079      	beq.n	8016792 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801669e:	7cfb      	ldrb	r3, [r7, #19]
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	d009      	beq.n	80166b8 <etharp_find_entry+0x7c>
 80166a4:	7cfb      	ldrb	r3, [r7, #19]
 80166a6:	2b01      	cmp	r3, #1
 80166a8:	d806      	bhi.n	80166b8 <etharp_find_entry+0x7c>
 80166aa:	4b83      	ldr	r3, [pc, #524]	; (80168b8 <etharp_find_entry+0x27c>)
 80166ac:	f44f 7293 	mov.w	r2, #294	; 0x126
 80166b0:	4982      	ldr	r1, [pc, #520]	; (80168bc <etharp_find_entry+0x280>)
 80166b2:	4883      	ldr	r0, [pc, #524]	; (80168c0 <etharp_find_entry+0x284>)
 80166b4:	f003 f816 	bl	80196e4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d00f      	beq.n	80166de <etharp_find_entry+0xa2>
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	6819      	ldr	r1, [r3, #0]
 80166c2:	7f3a      	ldrb	r2, [r7, #28]
 80166c4:	487b      	ldr	r0, [pc, #492]	; (80168b4 <etharp_find_entry+0x278>)
 80166c6:	4613      	mov	r3, r2
 80166c8:	005b      	lsls	r3, r3, #1
 80166ca:	4413      	add	r3, r2
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	4403      	add	r3, r0
 80166d0:	3304      	adds	r3, #4
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	4299      	cmp	r1, r3
 80166d6:	d102      	bne.n	80166de <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80166d8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80166dc:	e0e5      	b.n	80168aa <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80166de:	7cfb      	ldrb	r3, [r7, #19]
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	d13b      	bne.n	801675c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80166e4:	7f3a      	ldrb	r2, [r7, #28]
 80166e6:	4973      	ldr	r1, [pc, #460]	; (80168b4 <etharp_find_entry+0x278>)
 80166e8:	4613      	mov	r3, r2
 80166ea:	005b      	lsls	r3, r3, #1
 80166ec:	4413      	add	r3, r2
 80166ee:	00db      	lsls	r3, r3, #3
 80166f0:	440b      	add	r3, r1
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d018      	beq.n	801672a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80166f8:	7f3a      	ldrb	r2, [r7, #28]
 80166fa:	496e      	ldr	r1, [pc, #440]	; (80168b4 <etharp_find_entry+0x278>)
 80166fc:	4613      	mov	r3, r2
 80166fe:	005b      	lsls	r3, r3, #1
 8016700:	4413      	add	r3, r2
 8016702:	00db      	lsls	r3, r3, #3
 8016704:	440b      	add	r3, r1
 8016706:	3312      	adds	r3, #18
 8016708:	881b      	ldrh	r3, [r3, #0]
 801670a:	8b3a      	ldrh	r2, [r7, #24]
 801670c:	429a      	cmp	r2, r3
 801670e:	d840      	bhi.n	8016792 <etharp_find_entry+0x156>
            old_queue = i;
 8016710:	7f3b      	ldrb	r3, [r7, #28]
 8016712:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8016714:	7f3a      	ldrb	r2, [r7, #28]
 8016716:	4967      	ldr	r1, [pc, #412]	; (80168b4 <etharp_find_entry+0x278>)
 8016718:	4613      	mov	r3, r2
 801671a:	005b      	lsls	r3, r3, #1
 801671c:	4413      	add	r3, r2
 801671e:	00db      	lsls	r3, r3, #3
 8016720:	440b      	add	r3, r1
 8016722:	3312      	adds	r3, #18
 8016724:	881b      	ldrh	r3, [r3, #0]
 8016726:	833b      	strh	r3, [r7, #24]
 8016728:	e033      	b.n	8016792 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801672a:	7f3a      	ldrb	r2, [r7, #28]
 801672c:	4961      	ldr	r1, [pc, #388]	; (80168b4 <etharp_find_entry+0x278>)
 801672e:	4613      	mov	r3, r2
 8016730:	005b      	lsls	r3, r3, #1
 8016732:	4413      	add	r3, r2
 8016734:	00db      	lsls	r3, r3, #3
 8016736:	440b      	add	r3, r1
 8016738:	3312      	adds	r3, #18
 801673a:	881b      	ldrh	r3, [r3, #0]
 801673c:	8afa      	ldrh	r2, [r7, #22]
 801673e:	429a      	cmp	r2, r3
 8016740:	d827      	bhi.n	8016792 <etharp_find_entry+0x156>
            old_pending = i;
 8016742:	7f3b      	ldrb	r3, [r7, #28]
 8016744:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8016746:	7f3a      	ldrb	r2, [r7, #28]
 8016748:	495a      	ldr	r1, [pc, #360]	; (80168b4 <etharp_find_entry+0x278>)
 801674a:	4613      	mov	r3, r2
 801674c:	005b      	lsls	r3, r3, #1
 801674e:	4413      	add	r3, r2
 8016750:	00db      	lsls	r3, r3, #3
 8016752:	440b      	add	r3, r1
 8016754:	3312      	adds	r3, #18
 8016756:	881b      	ldrh	r3, [r3, #0]
 8016758:	82fb      	strh	r3, [r7, #22]
 801675a:	e01a      	b.n	8016792 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801675c:	7cfb      	ldrb	r3, [r7, #19]
 801675e:	2b01      	cmp	r3, #1
 8016760:	d917      	bls.n	8016792 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016762:	7f3a      	ldrb	r2, [r7, #28]
 8016764:	4953      	ldr	r1, [pc, #332]	; (80168b4 <etharp_find_entry+0x278>)
 8016766:	4613      	mov	r3, r2
 8016768:	005b      	lsls	r3, r3, #1
 801676a:	4413      	add	r3, r2
 801676c:	00db      	lsls	r3, r3, #3
 801676e:	440b      	add	r3, r1
 8016770:	3312      	adds	r3, #18
 8016772:	881b      	ldrh	r3, [r3, #0]
 8016774:	8aba      	ldrh	r2, [r7, #20]
 8016776:	429a      	cmp	r2, r3
 8016778:	d80b      	bhi.n	8016792 <etharp_find_entry+0x156>
            old_stable = i;
 801677a:	7f3b      	ldrb	r3, [r7, #28]
 801677c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801677e:	7f3a      	ldrb	r2, [r7, #28]
 8016780:	494c      	ldr	r1, [pc, #304]	; (80168b4 <etharp_find_entry+0x278>)
 8016782:	4613      	mov	r3, r2
 8016784:	005b      	lsls	r3, r3, #1
 8016786:	4413      	add	r3, r2
 8016788:	00db      	lsls	r3, r3, #3
 801678a:	440b      	add	r3, r1
 801678c:	3312      	adds	r3, #18
 801678e:	881b      	ldrh	r3, [r3, #0]
 8016790:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016792:	7f3b      	ldrb	r3, [r7, #28]
 8016794:	3301      	adds	r3, #1
 8016796:	773b      	strb	r3, [r7, #28]
 8016798:	7f3b      	ldrb	r3, [r7, #28]
 801679a:	2b09      	cmp	r3, #9
 801679c:	f67f af68 	bls.w	8016670 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80167a0:	7afb      	ldrb	r3, [r7, #11]
 80167a2:	f003 0302 	and.w	r3, r3, #2
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d108      	bne.n	80167bc <etharp_find_entry+0x180>
 80167aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80167ae:	2b0a      	cmp	r3, #10
 80167b0:	d107      	bne.n	80167c2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80167b2:	7afb      	ldrb	r3, [r7, #11]
 80167b4:	f003 0301 	and.w	r3, r3, #1
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d102      	bne.n	80167c2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80167bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167c0:	e073      	b.n	80168aa <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80167c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80167c6:	2b09      	cmp	r3, #9
 80167c8:	dc02      	bgt.n	80167d0 <etharp_find_entry+0x194>
    i = empty;
 80167ca:	7f7b      	ldrb	r3, [r7, #29]
 80167cc:	773b      	strb	r3, [r7, #28]
 80167ce:	e036      	b.n	801683e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80167d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80167d4:	2b09      	cmp	r3, #9
 80167d6:	dc13      	bgt.n	8016800 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80167d8:	7fbb      	ldrb	r3, [r7, #30]
 80167da:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80167dc:	7f3a      	ldrb	r2, [r7, #28]
 80167de:	4935      	ldr	r1, [pc, #212]	; (80168b4 <etharp_find_entry+0x278>)
 80167e0:	4613      	mov	r3, r2
 80167e2:	005b      	lsls	r3, r3, #1
 80167e4:	4413      	add	r3, r2
 80167e6:	00db      	lsls	r3, r3, #3
 80167e8:	440b      	add	r3, r1
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d018      	beq.n	8016822 <etharp_find_entry+0x1e6>
 80167f0:	4b31      	ldr	r3, [pc, #196]	; (80168b8 <etharp_find_entry+0x27c>)
 80167f2:	f240 126f 	movw	r2, #367	; 0x16f
 80167f6:	4933      	ldr	r1, [pc, #204]	; (80168c4 <etharp_find_entry+0x288>)
 80167f8:	4831      	ldr	r0, [pc, #196]	; (80168c0 <etharp_find_entry+0x284>)
 80167fa:	f002 ff73 	bl	80196e4 <iprintf>
 80167fe:	e010      	b.n	8016822 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016800:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016804:	2b09      	cmp	r3, #9
 8016806:	dc02      	bgt.n	801680e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8016808:	7ffb      	ldrb	r3, [r7, #31]
 801680a:	773b      	strb	r3, [r7, #28]
 801680c:	e009      	b.n	8016822 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801680e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016812:	2b09      	cmp	r3, #9
 8016814:	dc02      	bgt.n	801681c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016816:	7efb      	ldrb	r3, [r7, #27]
 8016818:	773b      	strb	r3, [r7, #28]
 801681a:	e002      	b.n	8016822 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801681c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016820:	e043      	b.n	80168aa <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016822:	7f3b      	ldrb	r3, [r7, #28]
 8016824:	2b09      	cmp	r3, #9
 8016826:	d906      	bls.n	8016836 <etharp_find_entry+0x1fa>
 8016828:	4b23      	ldr	r3, [pc, #140]	; (80168b8 <etharp_find_entry+0x27c>)
 801682a:	f240 1281 	movw	r2, #385	; 0x181
 801682e:	4926      	ldr	r1, [pc, #152]	; (80168c8 <etharp_find_entry+0x28c>)
 8016830:	4823      	ldr	r0, [pc, #140]	; (80168c0 <etharp_find_entry+0x284>)
 8016832:	f002 ff57 	bl	80196e4 <iprintf>
    etharp_free_entry(i);
 8016836:	7f3b      	ldrb	r3, [r7, #28]
 8016838:	4618      	mov	r0, r3
 801683a:	f7ff fe25 	bl	8016488 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801683e:	7f3b      	ldrb	r3, [r7, #28]
 8016840:	2b09      	cmp	r3, #9
 8016842:	d906      	bls.n	8016852 <etharp_find_entry+0x216>
 8016844:	4b1c      	ldr	r3, [pc, #112]	; (80168b8 <etharp_find_entry+0x27c>)
 8016846:	f240 1285 	movw	r2, #389	; 0x185
 801684a:	491f      	ldr	r1, [pc, #124]	; (80168c8 <etharp_find_entry+0x28c>)
 801684c:	481c      	ldr	r0, [pc, #112]	; (80168c0 <etharp_find_entry+0x284>)
 801684e:	f002 ff49 	bl	80196e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016852:	7f3a      	ldrb	r2, [r7, #28]
 8016854:	4917      	ldr	r1, [pc, #92]	; (80168b4 <etharp_find_entry+0x278>)
 8016856:	4613      	mov	r3, r2
 8016858:	005b      	lsls	r3, r3, #1
 801685a:	4413      	add	r3, r2
 801685c:	00db      	lsls	r3, r3, #3
 801685e:	440b      	add	r3, r1
 8016860:	3314      	adds	r3, #20
 8016862:	781b      	ldrb	r3, [r3, #0]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d006      	beq.n	8016876 <etharp_find_entry+0x23a>
 8016868:	4b13      	ldr	r3, [pc, #76]	; (80168b8 <etharp_find_entry+0x27c>)
 801686a:	f240 1287 	movw	r2, #391	; 0x187
 801686e:	4917      	ldr	r1, [pc, #92]	; (80168cc <etharp_find_entry+0x290>)
 8016870:	4813      	ldr	r0, [pc, #76]	; (80168c0 <etharp_find_entry+0x284>)
 8016872:	f002 ff37 	bl	80196e4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d00a      	beq.n	8016892 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801687c:	7f3a      	ldrb	r2, [r7, #28]
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	6819      	ldr	r1, [r3, #0]
 8016882:	480c      	ldr	r0, [pc, #48]	; (80168b4 <etharp_find_entry+0x278>)
 8016884:	4613      	mov	r3, r2
 8016886:	005b      	lsls	r3, r3, #1
 8016888:	4413      	add	r3, r2
 801688a:	00db      	lsls	r3, r3, #3
 801688c:	4403      	add	r3, r0
 801688e:	3304      	adds	r3, #4
 8016890:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016892:	7f3a      	ldrb	r2, [r7, #28]
 8016894:	4907      	ldr	r1, [pc, #28]	; (80168b4 <etharp_find_entry+0x278>)
 8016896:	4613      	mov	r3, r2
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	4413      	add	r3, r2
 801689c:	00db      	lsls	r3, r3, #3
 801689e:	440b      	add	r3, r1
 80168a0:	3312      	adds	r3, #18
 80168a2:	2200      	movs	r2, #0
 80168a4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80168a6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3720      	adds	r7, #32
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}
 80168b2:	bf00      	nop
 80168b4:	20004254 	.word	0x20004254
 80168b8:	0801c4ec 	.word	0x0801c4ec
 80168bc:	0801c524 	.word	0x0801c524
 80168c0:	0801c564 	.word	0x0801c564
 80168c4:	0801c58c 	.word	0x0801c58c
 80168c8:	0801c5a4 	.word	0x0801c5a4
 80168cc:	0801c5b8 	.word	0x0801c5b8

080168d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b088      	sub	sp, #32
 80168d4:	af02      	add	r7, sp, #8
 80168d6:	60f8      	str	r0, [r7, #12]
 80168d8:	60b9      	str	r1, [r7, #8]
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80168e4:	2b06      	cmp	r3, #6
 80168e6:	d006      	beq.n	80168f6 <etharp_update_arp_entry+0x26>
 80168e8:	4b48      	ldr	r3, [pc, #288]	; (8016a0c <etharp_update_arp_entry+0x13c>)
 80168ea:	f240 12ab 	movw	r2, #427	; 0x1ab
 80168ee:	4948      	ldr	r1, [pc, #288]	; (8016a10 <etharp_update_arp_entry+0x140>)
 80168f0:	4848      	ldr	r0, [pc, #288]	; (8016a14 <etharp_update_arp_entry+0x144>)
 80168f2:	f002 fef7 	bl	80196e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80168f6:	68bb      	ldr	r3, [r7, #8]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d012      	beq.n	8016922 <etharp_update_arp_entry+0x52>
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d00e      	beq.n	8016922 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	68f9      	ldr	r1, [r7, #12]
 801690a:	4618      	mov	r0, r3
 801690c:	f001 f8fc 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 8016910:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016912:	2b00      	cmp	r3, #0
 8016914:	d105      	bne.n	8016922 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801691e:	2be0      	cmp	r3, #224	; 0xe0
 8016920:	d102      	bne.n	8016928 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016922:	f06f 030f 	mvn.w	r3, #15
 8016926:	e06c      	b.n	8016a02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016928:	78fb      	ldrb	r3, [r7, #3]
 801692a:	68fa      	ldr	r2, [r7, #12]
 801692c:	4619      	mov	r1, r3
 801692e:	68b8      	ldr	r0, [r7, #8]
 8016930:	f7ff fe84 	bl	801663c <etharp_find_entry>
 8016934:	4603      	mov	r3, r0
 8016936:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801693c:	2b00      	cmp	r3, #0
 801693e:	da02      	bge.n	8016946 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016944:	e05d      	b.n	8016a02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016946:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801694a:	4933      	ldr	r1, [pc, #204]	; (8016a18 <etharp_update_arp_entry+0x148>)
 801694c:	4613      	mov	r3, r2
 801694e:	005b      	lsls	r3, r3, #1
 8016950:	4413      	add	r3, r2
 8016952:	00db      	lsls	r3, r3, #3
 8016954:	440b      	add	r3, r1
 8016956:	3314      	adds	r3, #20
 8016958:	2202      	movs	r2, #2
 801695a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801695c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016960:	492d      	ldr	r1, [pc, #180]	; (8016a18 <etharp_update_arp_entry+0x148>)
 8016962:	4613      	mov	r3, r2
 8016964:	005b      	lsls	r3, r3, #1
 8016966:	4413      	add	r3, r2
 8016968:	00db      	lsls	r3, r3, #3
 801696a:	440b      	add	r3, r1
 801696c:	3308      	adds	r3, #8
 801696e:	68fa      	ldr	r2, [r7, #12]
 8016970:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8016972:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016976:	4613      	mov	r3, r2
 8016978:	005b      	lsls	r3, r3, #1
 801697a:	4413      	add	r3, r2
 801697c:	00db      	lsls	r3, r3, #3
 801697e:	3308      	adds	r3, #8
 8016980:	4a25      	ldr	r2, [pc, #148]	; (8016a18 <etharp_update_arp_entry+0x148>)
 8016982:	4413      	add	r3, r2
 8016984:	3304      	adds	r3, #4
 8016986:	2206      	movs	r2, #6
 8016988:	6879      	ldr	r1, [r7, #4]
 801698a:	4618      	mov	r0, r3
 801698c:	f002 fdef 	bl	801956e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016990:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016994:	4920      	ldr	r1, [pc, #128]	; (8016a18 <etharp_update_arp_entry+0x148>)
 8016996:	4613      	mov	r3, r2
 8016998:	005b      	lsls	r3, r3, #1
 801699a:	4413      	add	r3, r2
 801699c:	00db      	lsls	r3, r3, #3
 801699e:	440b      	add	r3, r1
 80169a0:	3312      	adds	r3, #18
 80169a2:	2200      	movs	r2, #0
 80169a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80169a6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80169aa:	491b      	ldr	r1, [pc, #108]	; (8016a18 <etharp_update_arp_entry+0x148>)
 80169ac:	4613      	mov	r3, r2
 80169ae:	005b      	lsls	r3, r3, #1
 80169b0:	4413      	add	r3, r2
 80169b2:	00db      	lsls	r3, r3, #3
 80169b4:	440b      	add	r3, r1
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d021      	beq.n	8016a00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80169bc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80169c0:	4915      	ldr	r1, [pc, #84]	; (8016a18 <etharp_update_arp_entry+0x148>)
 80169c2:	4613      	mov	r3, r2
 80169c4:	005b      	lsls	r3, r3, #1
 80169c6:	4413      	add	r3, r2
 80169c8:	00db      	lsls	r3, r3, #3
 80169ca:	440b      	add	r3, r1
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80169d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80169d4:	4910      	ldr	r1, [pc, #64]	; (8016a18 <etharp_update_arp_entry+0x148>)
 80169d6:	4613      	mov	r3, r2
 80169d8:	005b      	lsls	r3, r3, #1
 80169da:	4413      	add	r3, r2
 80169dc:	00db      	lsls	r3, r3, #3
 80169de:	440b      	add	r3, r1
 80169e0:	2200      	movs	r2, #0
 80169e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80169ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80169ee:	9300      	str	r3, [sp, #0]
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	6939      	ldr	r1, [r7, #16]
 80169f4:	68f8      	ldr	r0, [r7, #12]
 80169f6:	f001 ff29 	bl	801884c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80169fa:	6938      	ldr	r0, [r7, #16]
 80169fc:	f7f8 fb80 	bl	800f100 <pbuf_free>
  }
  return ERR_OK;
 8016a00:	2300      	movs	r3, #0
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3718      	adds	r7, #24
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	0801c4ec 	.word	0x0801c4ec
 8016a10:	0801c5e4 	.word	0x0801c5e4
 8016a14:	0801c564 	.word	0x0801c564
 8016a18:	20004254 	.word	0x20004254

08016a1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b084      	sub	sp, #16
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a24:	2300      	movs	r3, #0
 8016a26:	73fb      	strb	r3, [r7, #15]
 8016a28:	e01f      	b.n	8016a6a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8016a2a:	7bfa      	ldrb	r2, [r7, #15]
 8016a2c:	4912      	ldr	r1, [pc, #72]	; (8016a78 <etharp_cleanup_netif+0x5c>)
 8016a2e:	4613      	mov	r3, r2
 8016a30:	005b      	lsls	r3, r3, #1
 8016a32:	4413      	add	r3, r2
 8016a34:	00db      	lsls	r3, r3, #3
 8016a36:	440b      	add	r3, r1
 8016a38:	3314      	adds	r3, #20
 8016a3a:	781b      	ldrb	r3, [r3, #0]
 8016a3c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016a3e:	7bbb      	ldrb	r3, [r7, #14]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d00f      	beq.n	8016a64 <etharp_cleanup_netif+0x48>
 8016a44:	7bfa      	ldrb	r2, [r7, #15]
 8016a46:	490c      	ldr	r1, [pc, #48]	; (8016a78 <etharp_cleanup_netif+0x5c>)
 8016a48:	4613      	mov	r3, r2
 8016a4a:	005b      	lsls	r3, r3, #1
 8016a4c:	4413      	add	r3, r2
 8016a4e:	00db      	lsls	r3, r3, #3
 8016a50:	440b      	add	r3, r1
 8016a52:	3308      	adds	r3, #8
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d103      	bne.n	8016a64 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8016a5c:	7bfb      	ldrb	r3, [r7, #15]
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7ff fd12 	bl	8016488 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a64:	7bfb      	ldrb	r3, [r7, #15]
 8016a66:	3301      	adds	r3, #1
 8016a68:	73fb      	strb	r3, [r7, #15]
 8016a6a:	7bfb      	ldrb	r3, [r7, #15]
 8016a6c:	2b09      	cmp	r3, #9
 8016a6e:	d9dc      	bls.n	8016a2a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016a70:	bf00      	nop
 8016a72:	3710      	adds	r7, #16
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}
 8016a78:	20004254 	.word	0x20004254

08016a7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016a7c:	b5b0      	push	{r4, r5, r7, lr}
 8016a7e:	b08a      	sub	sp, #40	; 0x28
 8016a80:	af04      	add	r7, sp, #16
 8016a82:	6078      	str	r0, [r7, #4]
 8016a84:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d107      	bne.n	8016a9c <etharp_input+0x20>
 8016a8c:	4b3f      	ldr	r3, [pc, #252]	; (8016b8c <etharp_input+0x110>)
 8016a8e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8016a92:	493f      	ldr	r1, [pc, #252]	; (8016b90 <etharp_input+0x114>)
 8016a94:	483f      	ldr	r0, [pc, #252]	; (8016b94 <etharp_input+0x118>)
 8016a96:	f002 fe25 	bl	80196e4 <iprintf>
 8016a9a:	e074      	b.n	8016b86 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016aa2:	693b      	ldr	r3, [r7, #16]
 8016aa4:	881b      	ldrh	r3, [r3, #0]
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016aac:	d10c      	bne.n	8016ac8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016ab2:	2b06      	cmp	r3, #6
 8016ab4:	d108      	bne.n	8016ac8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016aba:	2b04      	cmp	r3, #4
 8016abc:	d104      	bne.n	8016ac8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	885b      	ldrh	r3, [r3, #2]
 8016ac2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ac4:	2b08      	cmp	r3, #8
 8016ac6:	d003      	beq.n	8016ad0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f7f8 fb19 	bl	800f100 <pbuf_free>
    return;
 8016ace:	e05a      	b.n	8016b86 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	330e      	adds	r3, #14
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	3318      	adds	r3, #24
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	3304      	adds	r3, #4
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d102      	bne.n	8016af0 <etharp_input+0x74>
    for_us = 0;
 8016aea:	2300      	movs	r3, #0
 8016aec:	75fb      	strb	r3, [r7, #23]
 8016aee:	e009      	b.n	8016b04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016af0:	68ba      	ldr	r2, [r7, #8]
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	3304      	adds	r3, #4
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	429a      	cmp	r2, r3
 8016afa:	bf0c      	ite	eq
 8016afc:	2301      	moveq	r3, #1
 8016afe:	2300      	movne	r3, #0
 8016b00:	b2db      	uxtb	r3, r3
 8016b02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	f103 0208 	add.w	r2, r3, #8
 8016b0a:	7dfb      	ldrb	r3, [r7, #23]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d001      	beq.n	8016b14 <etharp_input+0x98>
 8016b10:	2301      	movs	r3, #1
 8016b12:	e000      	b.n	8016b16 <etharp_input+0x9a>
 8016b14:	2302      	movs	r3, #2
 8016b16:	f107 010c 	add.w	r1, r7, #12
 8016b1a:	6838      	ldr	r0, [r7, #0]
 8016b1c:	f7ff fed8 	bl	80168d0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016b20:	693b      	ldr	r3, [r7, #16]
 8016b22:	88db      	ldrh	r3, [r3, #6]
 8016b24:	b29b      	uxth	r3, r3
 8016b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b2a:	d003      	beq.n	8016b34 <etharp_input+0xb8>
 8016b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b30:	d01e      	beq.n	8016b70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8016b32:	e025      	b.n	8016b80 <etharp_input+0x104>
    if (for_us) {
 8016b34:	7dfb      	ldrb	r3, [r7, #23]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d021      	beq.n	8016b7e <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016b46:	683b      	ldr	r3, [r7, #0]
 8016b48:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8016b50:	693a      	ldr	r2, [r7, #16]
 8016b52:	3208      	adds	r2, #8
      etharp_raw(netif,
 8016b54:	2102      	movs	r1, #2
 8016b56:	9103      	str	r1, [sp, #12]
 8016b58:	f107 010c 	add.w	r1, r7, #12
 8016b5c:	9102      	str	r1, [sp, #8]
 8016b5e:	9201      	str	r2, [sp, #4]
 8016b60:	9300      	str	r3, [sp, #0]
 8016b62:	462b      	mov	r3, r5
 8016b64:	4622      	mov	r2, r4
 8016b66:	4601      	mov	r1, r0
 8016b68:	6838      	ldr	r0, [r7, #0]
 8016b6a:	f000 fae7 	bl	801713c <etharp_raw>
    break;
 8016b6e:	e006      	b.n	8016b7e <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8016b70:	f107 030c 	add.w	r3, r7, #12
 8016b74:	4619      	mov	r1, r3
 8016b76:	6838      	ldr	r0, [r7, #0]
 8016b78:	f7fe f980 	bl	8014e7c <dhcp_arp_reply>
    break;
 8016b7c:	e000      	b.n	8016b80 <etharp_input+0x104>
    break;
 8016b7e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016b80:	6878      	ldr	r0, [r7, #4]
 8016b82:	f7f8 fabd 	bl	800f100 <pbuf_free>
}
 8016b86:	3718      	adds	r7, #24
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8016b8c:	0801c4ec 	.word	0x0801c4ec
 8016b90:	0801c63c 	.word	0x0801c63c
 8016b94:	0801c564 	.word	0x0801c564

08016b98 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b086      	sub	sp, #24
 8016b9c:	af02      	add	r7, sp, #8
 8016b9e:	60f8      	str	r0, [r7, #12]
 8016ba0:	60b9      	str	r1, [r7, #8]
 8016ba2:	4613      	mov	r3, r2
 8016ba4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016ba6:	79fa      	ldrb	r2, [r7, #7]
 8016ba8:	4944      	ldr	r1, [pc, #272]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016baa:	4613      	mov	r3, r2
 8016bac:	005b      	lsls	r3, r3, #1
 8016bae:	4413      	add	r3, r2
 8016bb0:	00db      	lsls	r3, r3, #3
 8016bb2:	440b      	add	r3, r1
 8016bb4:	3314      	adds	r3, #20
 8016bb6:	781b      	ldrb	r3, [r3, #0]
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	d806      	bhi.n	8016bca <etharp_output_to_arp_index+0x32>
 8016bbc:	4b40      	ldr	r3, [pc, #256]	; (8016cc0 <etharp_output_to_arp_index+0x128>)
 8016bbe:	f240 22ed 	movw	r2, #749	; 0x2ed
 8016bc2:	4940      	ldr	r1, [pc, #256]	; (8016cc4 <etharp_output_to_arp_index+0x12c>)
 8016bc4:	4840      	ldr	r0, [pc, #256]	; (8016cc8 <etharp_output_to_arp_index+0x130>)
 8016bc6:	f002 fd8d 	bl	80196e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016bca:	79fa      	ldrb	r2, [r7, #7]
 8016bcc:	493b      	ldr	r1, [pc, #236]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016bce:	4613      	mov	r3, r2
 8016bd0:	005b      	lsls	r3, r3, #1
 8016bd2:	4413      	add	r3, r2
 8016bd4:	00db      	lsls	r3, r3, #3
 8016bd6:	440b      	add	r3, r1
 8016bd8:	3314      	adds	r3, #20
 8016bda:	781b      	ldrb	r3, [r3, #0]
 8016bdc:	2b02      	cmp	r3, #2
 8016bde:	d153      	bne.n	8016c88 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016be0:	79fa      	ldrb	r2, [r7, #7]
 8016be2:	4936      	ldr	r1, [pc, #216]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016be4:	4613      	mov	r3, r2
 8016be6:	005b      	lsls	r3, r3, #1
 8016be8:	4413      	add	r3, r2
 8016bea:	00db      	lsls	r3, r3, #3
 8016bec:	440b      	add	r3, r1
 8016bee:	3312      	adds	r3, #18
 8016bf0:	881b      	ldrh	r3, [r3, #0]
 8016bf2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016bf6:	d919      	bls.n	8016c2c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016bf8:	79fa      	ldrb	r2, [r7, #7]
 8016bfa:	4613      	mov	r3, r2
 8016bfc:	005b      	lsls	r3, r3, #1
 8016bfe:	4413      	add	r3, r2
 8016c00:	00db      	lsls	r3, r3, #3
 8016c02:	4a2e      	ldr	r2, [pc, #184]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016c04:	4413      	add	r3, r2
 8016c06:	3304      	adds	r3, #4
 8016c08:	4619      	mov	r1, r3
 8016c0a:	68f8      	ldr	r0, [r7, #12]
 8016c0c:	f000 fb44 	bl	8017298 <etharp_request>
 8016c10:	4603      	mov	r3, r0
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d138      	bne.n	8016c88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016c16:	79fa      	ldrb	r2, [r7, #7]
 8016c18:	4928      	ldr	r1, [pc, #160]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016c1a:	4613      	mov	r3, r2
 8016c1c:	005b      	lsls	r3, r3, #1
 8016c1e:	4413      	add	r3, r2
 8016c20:	00db      	lsls	r3, r3, #3
 8016c22:	440b      	add	r3, r1
 8016c24:	3314      	adds	r3, #20
 8016c26:	2203      	movs	r2, #3
 8016c28:	701a      	strb	r2, [r3, #0]
 8016c2a:	e02d      	b.n	8016c88 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016c2c:	79fa      	ldrb	r2, [r7, #7]
 8016c2e:	4923      	ldr	r1, [pc, #140]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016c30:	4613      	mov	r3, r2
 8016c32:	005b      	lsls	r3, r3, #1
 8016c34:	4413      	add	r3, r2
 8016c36:	00db      	lsls	r3, r3, #3
 8016c38:	440b      	add	r3, r1
 8016c3a:	3312      	adds	r3, #18
 8016c3c:	881b      	ldrh	r3, [r3, #0]
 8016c3e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016c42:	d321      	bcc.n	8016c88 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016c44:	79fa      	ldrb	r2, [r7, #7]
 8016c46:	4613      	mov	r3, r2
 8016c48:	005b      	lsls	r3, r3, #1
 8016c4a:	4413      	add	r3, r2
 8016c4c:	00db      	lsls	r3, r3, #3
 8016c4e:	4a1b      	ldr	r2, [pc, #108]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016c50:	4413      	add	r3, r2
 8016c52:	1d19      	adds	r1, r3, #4
 8016c54:	79fa      	ldrb	r2, [r7, #7]
 8016c56:	4613      	mov	r3, r2
 8016c58:	005b      	lsls	r3, r3, #1
 8016c5a:	4413      	add	r3, r2
 8016c5c:	00db      	lsls	r3, r3, #3
 8016c5e:	3308      	adds	r3, #8
 8016c60:	4a16      	ldr	r2, [pc, #88]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016c62:	4413      	add	r3, r2
 8016c64:	3304      	adds	r3, #4
 8016c66:	461a      	mov	r2, r3
 8016c68:	68f8      	ldr	r0, [r7, #12]
 8016c6a:	f000 faf3 	bl	8017254 <etharp_request_dst>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d109      	bne.n	8016c88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016c74:	79fa      	ldrb	r2, [r7, #7]
 8016c76:	4911      	ldr	r1, [pc, #68]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016c78:	4613      	mov	r3, r2
 8016c7a:	005b      	lsls	r3, r3, #1
 8016c7c:	4413      	add	r3, r2
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	440b      	add	r3, r1
 8016c82:	3314      	adds	r3, #20
 8016c84:	2203      	movs	r2, #3
 8016c86:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8016c8e:	79fa      	ldrb	r2, [r7, #7]
 8016c90:	4613      	mov	r3, r2
 8016c92:	005b      	lsls	r3, r3, #1
 8016c94:	4413      	add	r3, r2
 8016c96:	00db      	lsls	r3, r3, #3
 8016c98:	3308      	adds	r3, #8
 8016c9a:	4a08      	ldr	r2, [pc, #32]	; (8016cbc <etharp_output_to_arp_index+0x124>)
 8016c9c:	4413      	add	r3, r2
 8016c9e:	1d1a      	adds	r2, r3, #4
 8016ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016ca4:	9300      	str	r3, [sp, #0]
 8016ca6:	4613      	mov	r3, r2
 8016ca8:	460a      	mov	r2, r1
 8016caa:	68b9      	ldr	r1, [r7, #8]
 8016cac:	68f8      	ldr	r0, [r7, #12]
 8016cae:	f001 fdcd 	bl	801884c <ethernet_output>
 8016cb2:	4603      	mov	r3, r0
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3710      	adds	r7, #16
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}
 8016cbc:	20004254 	.word	0x20004254
 8016cc0:	0801c4ec 	.word	0x0801c4ec
 8016cc4:	0801c65c 	.word	0x0801c65c
 8016cc8:	0801c564 	.word	0x0801c564

08016ccc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b08a      	sub	sp, #40	; 0x28
 8016cd0:	af02      	add	r7, sp, #8
 8016cd2:	60f8      	str	r0, [r7, #12]
 8016cd4:	60b9      	str	r1, [r7, #8]
 8016cd6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d106      	bne.n	8016cf0 <etharp_output+0x24>
 8016ce2:	4b69      	ldr	r3, [pc, #420]	; (8016e88 <etharp_output+0x1bc>)
 8016ce4:	f240 321b 	movw	r2, #795	; 0x31b
 8016ce8:	4968      	ldr	r1, [pc, #416]	; (8016e8c <etharp_output+0x1c0>)
 8016cea:	4869      	ldr	r0, [pc, #420]	; (8016e90 <etharp_output+0x1c4>)
 8016cec:	f002 fcfa 	bl	80196e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d106      	bne.n	8016d04 <etharp_output+0x38>
 8016cf6:	4b64      	ldr	r3, [pc, #400]	; (8016e88 <etharp_output+0x1bc>)
 8016cf8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016cfc:	4965      	ldr	r1, [pc, #404]	; (8016e94 <etharp_output+0x1c8>)
 8016cfe:	4864      	ldr	r0, [pc, #400]	; (8016e90 <etharp_output+0x1c4>)
 8016d00:	f002 fcf0 	bl	80196e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d106      	bne.n	8016d18 <etharp_output+0x4c>
 8016d0a:	4b5f      	ldr	r3, [pc, #380]	; (8016e88 <etharp_output+0x1bc>)
 8016d0c:	f240 321d 	movw	r2, #797	; 0x31d
 8016d10:	4961      	ldr	r1, [pc, #388]	; (8016e98 <etharp_output+0x1cc>)
 8016d12:	485f      	ldr	r0, [pc, #380]	; (8016e90 <etharp_output+0x1c4>)
 8016d14:	f002 fce6 	bl	80196e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	68f9      	ldr	r1, [r7, #12]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f000 fef2 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 8016d24:	4603      	mov	r3, r0
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d002      	beq.n	8016d30 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016d2a:	4b5c      	ldr	r3, [pc, #368]	; (8016e9c <etharp_output+0x1d0>)
 8016d2c:	61fb      	str	r3, [r7, #28]
 8016d2e:	e09b      	b.n	8016e68 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d38:	2be0      	cmp	r3, #224	; 0xe0
 8016d3a:	d118      	bne.n	8016d6e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016d3c:	2301      	movs	r3, #1
 8016d3e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016d40:	2300      	movs	r3, #0
 8016d42:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016d44:	235e      	movs	r3, #94	; 0x5e
 8016d46:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	3302      	adds	r3, #2
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	3303      	adds	r3, #3
 8016d62:	781b      	ldrb	r3, [r3, #0]
 8016d64:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016d66:	f107 0310 	add.w	r3, r7, #16
 8016d6a:	61fb      	str	r3, [r7, #28]
 8016d6c:	e07c      	b.n	8016e68 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	3304      	adds	r3, #4
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	405a      	eors	r2, r3
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	3308      	adds	r3, #8
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	4013      	ands	r3, r2
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d012      	beq.n	8016dac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016d8c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016d90:	4293      	cmp	r3, r2
 8016d92:	d00b      	beq.n	8016dac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	330c      	adds	r3, #12
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d003      	beq.n	8016da6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	330c      	adds	r3, #12
 8016da2:	61bb      	str	r3, [r7, #24]
 8016da4:	e002      	b.n	8016dac <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016da6:	f06f 0303 	mvn.w	r3, #3
 8016daa:	e069      	b.n	8016e80 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016dac:	4b3c      	ldr	r3, [pc, #240]	; (8016ea0 <etharp_output+0x1d4>)
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	4619      	mov	r1, r3
 8016db2:	4a3c      	ldr	r2, [pc, #240]	; (8016ea4 <etharp_output+0x1d8>)
 8016db4:	460b      	mov	r3, r1
 8016db6:	005b      	lsls	r3, r3, #1
 8016db8:	440b      	add	r3, r1
 8016dba:	00db      	lsls	r3, r3, #3
 8016dbc:	4413      	add	r3, r2
 8016dbe:	3314      	adds	r3, #20
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	2b01      	cmp	r3, #1
 8016dc4:	d917      	bls.n	8016df6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	681a      	ldr	r2, [r3, #0]
 8016dca:	4b35      	ldr	r3, [pc, #212]	; (8016ea0 <etharp_output+0x1d4>)
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	4934      	ldr	r1, [pc, #208]	; (8016ea4 <etharp_output+0x1d8>)
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	005b      	lsls	r3, r3, #1
 8016dd6:	4403      	add	r3, r0
 8016dd8:	00db      	lsls	r3, r3, #3
 8016dda:	440b      	add	r3, r1
 8016ddc:	3304      	adds	r3, #4
 8016dde:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d108      	bne.n	8016df6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016de4:	4b2e      	ldr	r3, [pc, #184]	; (8016ea0 <etharp_output+0x1d4>)
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	461a      	mov	r2, r3
 8016dea:	68b9      	ldr	r1, [r7, #8]
 8016dec:	68f8      	ldr	r0, [r7, #12]
 8016dee:	f7ff fed3 	bl	8016b98 <etharp_output_to_arp_index>
 8016df2:	4603      	mov	r3, r0
 8016df4:	e044      	b.n	8016e80 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016df6:	2300      	movs	r3, #0
 8016df8:	75fb      	strb	r3, [r7, #23]
 8016dfa:	e02a      	b.n	8016e52 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016dfc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016e00:	4928      	ldr	r1, [pc, #160]	; (8016ea4 <etharp_output+0x1d8>)
 8016e02:	4613      	mov	r3, r2
 8016e04:	005b      	lsls	r3, r3, #1
 8016e06:	4413      	add	r3, r2
 8016e08:	00db      	lsls	r3, r3, #3
 8016e0a:	440b      	add	r3, r1
 8016e0c:	3314      	adds	r3, #20
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	2b01      	cmp	r3, #1
 8016e12:	d918      	bls.n	8016e46 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016e14:	69bb      	ldr	r3, [r7, #24]
 8016e16:	6819      	ldr	r1, [r3, #0]
 8016e18:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016e1c:	4821      	ldr	r0, [pc, #132]	; (8016ea4 <etharp_output+0x1d8>)
 8016e1e:	4613      	mov	r3, r2
 8016e20:	005b      	lsls	r3, r3, #1
 8016e22:	4413      	add	r3, r2
 8016e24:	00db      	lsls	r3, r3, #3
 8016e26:	4403      	add	r3, r0
 8016e28:	3304      	adds	r3, #4
 8016e2a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016e2c:	4299      	cmp	r1, r3
 8016e2e:	d10a      	bne.n	8016e46 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8016e30:	7dfa      	ldrb	r2, [r7, #23]
 8016e32:	4b1b      	ldr	r3, [pc, #108]	; (8016ea0 <etharp_output+0x1d4>)
 8016e34:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016e36:	7dfb      	ldrb	r3, [r7, #23]
 8016e38:	461a      	mov	r2, r3
 8016e3a:	68b9      	ldr	r1, [r7, #8]
 8016e3c:	68f8      	ldr	r0, [r7, #12]
 8016e3e:	f7ff feab 	bl	8016b98 <etharp_output_to_arp_index>
 8016e42:	4603      	mov	r3, r0
 8016e44:	e01c      	b.n	8016e80 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016e4a:	b2db      	uxtb	r3, r3
 8016e4c:	3301      	adds	r3, #1
 8016e4e:	b2db      	uxtb	r3, r3
 8016e50:	75fb      	strb	r3, [r7, #23]
 8016e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016e56:	2b09      	cmp	r3, #9
 8016e58:	ddd0      	ble.n	8016dfc <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016e5a:	68ba      	ldr	r2, [r7, #8]
 8016e5c:	69b9      	ldr	r1, [r7, #24]
 8016e5e:	68f8      	ldr	r0, [r7, #12]
 8016e60:	f000 f822 	bl	8016ea8 <etharp_query>
 8016e64:	4603      	mov	r3, r0
 8016e66:	e00b      	b.n	8016e80 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8016e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016e72:	9300      	str	r3, [sp, #0]
 8016e74:	69fb      	ldr	r3, [r7, #28]
 8016e76:	68b9      	ldr	r1, [r7, #8]
 8016e78:	68f8      	ldr	r0, [r7, #12]
 8016e7a:	f001 fce7 	bl	801884c <ethernet_output>
 8016e7e:	4603      	mov	r3, r0
}
 8016e80:	4618      	mov	r0, r3
 8016e82:	3720      	adds	r7, #32
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}
 8016e88:	0801c4ec 	.word	0x0801c4ec
 8016e8c:	0801c63c 	.word	0x0801c63c
 8016e90:	0801c564 	.word	0x0801c564
 8016e94:	0801c68c 	.word	0x0801c68c
 8016e98:	0801c62c 	.word	0x0801c62c
 8016e9c:	0801ccf0 	.word	0x0801ccf0
 8016ea0:	20004344 	.word	0x20004344
 8016ea4:	20004254 	.word	0x20004254

08016ea8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b08c      	sub	sp, #48	; 0x30
 8016eac:	af02      	add	r7, sp, #8
 8016eae:	60f8      	str	r0, [r7, #12]
 8016eb0:	60b9      	str	r1, [r7, #8]
 8016eb2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	3329      	adds	r3, #41	; 0x29
 8016eb8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016eba:	23ff      	movs	r3, #255	; 0xff
 8016ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	68f9      	ldr	r1, [r7, #12]
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f000 fe1c 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d10c      	bne.n	8016ef0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016ede:	2be0      	cmp	r3, #224	; 0xe0
 8016ee0:	d006      	beq.n	8016ef0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d003      	beq.n	8016ef0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d102      	bne.n	8016ef6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016ef0:	f06f 030f 	mvn.w	r3, #15
 8016ef4:	e10f      	b.n	8017116 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016ef6:	68fa      	ldr	r2, [r7, #12]
 8016ef8:	2101      	movs	r1, #1
 8016efa:	68b8      	ldr	r0, [r7, #8]
 8016efc:	f7ff fb9e 	bl	801663c <etharp_find_entry>
 8016f00:	4603      	mov	r3, r0
 8016f02:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8016f04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	da02      	bge.n	8016f12 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8016f0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f10:	e101      	b.n	8017116 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016f12:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016f16:	4982      	ldr	r1, [pc, #520]	; (8017120 <etharp_query+0x278>)
 8016f18:	4613      	mov	r3, r2
 8016f1a:	005b      	lsls	r3, r3, #1
 8016f1c:	4413      	add	r3, r2
 8016f1e:	00db      	lsls	r3, r3, #3
 8016f20:	440b      	add	r3, r1
 8016f22:	3314      	adds	r3, #20
 8016f24:	781b      	ldrb	r3, [r3, #0]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d117      	bne.n	8016f5a <etharp_query+0xb2>
    is_new_entry = 1;
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016f2e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016f32:	497b      	ldr	r1, [pc, #492]	; (8017120 <etharp_query+0x278>)
 8016f34:	4613      	mov	r3, r2
 8016f36:	005b      	lsls	r3, r3, #1
 8016f38:	4413      	add	r3, r2
 8016f3a:	00db      	lsls	r3, r3, #3
 8016f3c:	440b      	add	r3, r1
 8016f3e:	3314      	adds	r3, #20
 8016f40:	2201      	movs	r2, #1
 8016f42:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016f44:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016f48:	4975      	ldr	r1, [pc, #468]	; (8017120 <etharp_query+0x278>)
 8016f4a:	4613      	mov	r3, r2
 8016f4c:	005b      	lsls	r3, r3, #1
 8016f4e:	4413      	add	r3, r2
 8016f50:	00db      	lsls	r3, r3, #3
 8016f52:	440b      	add	r3, r1
 8016f54:	3308      	adds	r3, #8
 8016f56:	68fa      	ldr	r2, [r7, #12]
 8016f58:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016f5a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016f5e:	4970      	ldr	r1, [pc, #448]	; (8017120 <etharp_query+0x278>)
 8016f60:	4613      	mov	r3, r2
 8016f62:	005b      	lsls	r3, r3, #1
 8016f64:	4413      	add	r3, r2
 8016f66:	00db      	lsls	r3, r3, #3
 8016f68:	440b      	add	r3, r1
 8016f6a:	3314      	adds	r3, #20
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	d012      	beq.n	8016f98 <etharp_query+0xf0>
 8016f72:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016f76:	496a      	ldr	r1, [pc, #424]	; (8017120 <etharp_query+0x278>)
 8016f78:	4613      	mov	r3, r2
 8016f7a:	005b      	lsls	r3, r3, #1
 8016f7c:	4413      	add	r3, r2
 8016f7e:	00db      	lsls	r3, r3, #3
 8016f80:	440b      	add	r3, r1
 8016f82:	3314      	adds	r3, #20
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	2b01      	cmp	r3, #1
 8016f88:	d806      	bhi.n	8016f98 <etharp_query+0xf0>
 8016f8a:	4b66      	ldr	r3, [pc, #408]	; (8017124 <etharp_query+0x27c>)
 8016f8c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016f90:	4965      	ldr	r1, [pc, #404]	; (8017128 <etharp_query+0x280>)
 8016f92:	4866      	ldr	r0, [pc, #408]	; (801712c <etharp_query+0x284>)
 8016f94:	f002 fba6 	bl	80196e4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016f98:	6a3b      	ldr	r3, [r7, #32]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d102      	bne.n	8016fa4 <etharp_query+0xfc>
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d10c      	bne.n	8016fbe <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016fa4:	68b9      	ldr	r1, [r7, #8]
 8016fa6:	68f8      	ldr	r0, [r7, #12]
 8016fa8:	f000 f976 	bl	8017298 <etharp_request>
 8016fac:	4603      	mov	r3, r0
 8016fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d102      	bne.n	8016fbe <etharp_query+0x116>
      return result;
 8016fb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016fbc:	e0ab      	b.n	8017116 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d106      	bne.n	8016fd2 <etharp_query+0x12a>
 8016fc4:	4b57      	ldr	r3, [pc, #348]	; (8017124 <etharp_query+0x27c>)
 8016fc6:	f240 32db 	movw	r2, #987	; 0x3db
 8016fca:	4959      	ldr	r1, [pc, #356]	; (8017130 <etharp_query+0x288>)
 8016fcc:	4857      	ldr	r0, [pc, #348]	; (801712c <etharp_query+0x284>)
 8016fce:	f002 fb89 	bl	80196e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016fd2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016fd6:	4952      	ldr	r1, [pc, #328]	; (8017120 <etharp_query+0x278>)
 8016fd8:	4613      	mov	r3, r2
 8016fda:	005b      	lsls	r3, r3, #1
 8016fdc:	4413      	add	r3, r2
 8016fde:	00db      	lsls	r3, r3, #3
 8016fe0:	440b      	add	r3, r1
 8016fe2:	3314      	adds	r3, #20
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	2b01      	cmp	r3, #1
 8016fe8:	d919      	bls.n	801701e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8016fea:	7cfa      	ldrb	r2, [r7, #19]
 8016fec:	4b51      	ldr	r3, [pc, #324]	; (8017134 <etharp_query+0x28c>)
 8016fee:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016ff0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	005b      	lsls	r3, r3, #1
 8016ff8:	4413      	add	r3, r2
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	3308      	adds	r3, #8
 8016ffe:	4a48      	ldr	r2, [pc, #288]	; (8017120 <etharp_query+0x278>)
 8017000:	4413      	add	r3, r2
 8017002:	1d1a      	adds	r2, r3, #4
 8017004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017008:	9300      	str	r3, [sp, #0]
 801700a:	4613      	mov	r3, r2
 801700c:	697a      	ldr	r2, [r7, #20]
 801700e:	6879      	ldr	r1, [r7, #4]
 8017010:	68f8      	ldr	r0, [r7, #12]
 8017012:	f001 fc1b 	bl	801884c <ethernet_output>
 8017016:	4603      	mov	r3, r0
 8017018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801701c:	e079      	b.n	8017112 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801701e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017022:	493f      	ldr	r1, [pc, #252]	; (8017120 <etharp_query+0x278>)
 8017024:	4613      	mov	r3, r2
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	4413      	add	r3, r2
 801702a:	00db      	lsls	r3, r3, #3
 801702c:	440b      	add	r3, r1
 801702e:	3314      	adds	r3, #20
 8017030:	781b      	ldrb	r3, [r3, #0]
 8017032:	2b01      	cmp	r3, #1
 8017034:	d16d      	bne.n	8017112 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017036:	2300      	movs	r3, #0
 8017038:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801703e:	e01a      	b.n	8017076 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017040:	69fb      	ldr	r3, [r7, #28]
 8017042:	895a      	ldrh	r2, [r3, #10]
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	891b      	ldrh	r3, [r3, #8]
 8017048:	429a      	cmp	r2, r3
 801704a:	d10a      	bne.n	8017062 <etharp_query+0x1ba>
 801704c:	69fb      	ldr	r3, [r7, #28]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d006      	beq.n	8017062 <etharp_query+0x1ba>
 8017054:	4b33      	ldr	r3, [pc, #204]	; (8017124 <etharp_query+0x27c>)
 8017056:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801705a:	4937      	ldr	r1, [pc, #220]	; (8017138 <etharp_query+0x290>)
 801705c:	4833      	ldr	r0, [pc, #204]	; (801712c <etharp_query+0x284>)
 801705e:	f002 fb41 	bl	80196e4 <iprintf>
      if (p->type != PBUF_ROM) {
 8017062:	69fb      	ldr	r3, [r7, #28]
 8017064:	7b1b      	ldrb	r3, [r3, #12]
 8017066:	2b01      	cmp	r3, #1
 8017068:	d002      	beq.n	8017070 <etharp_query+0x1c8>
        copy_needed = 1;
 801706a:	2301      	movs	r3, #1
 801706c:	61bb      	str	r3, [r7, #24]
        break;
 801706e:	e005      	b.n	801707c <etharp_query+0x1d4>
      }
      p = p->next;
 8017070:	69fb      	ldr	r3, [r7, #28]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017076:	69fb      	ldr	r3, [r7, #28]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d1e1      	bne.n	8017040 <etharp_query+0x198>
    }
    if (copy_needed) {
 801707c:	69bb      	ldr	r3, [r7, #24]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d017      	beq.n	80170b2 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8017082:	69fb      	ldr	r3, [r7, #28]
 8017084:	891b      	ldrh	r3, [r3, #8]
 8017086:	2200      	movs	r2, #0
 8017088:	4619      	mov	r1, r3
 801708a:	2002      	movs	r0, #2
 801708c:	f7f7 fcc6 	bl	800ea1c <pbuf_alloc>
 8017090:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8017092:	69fb      	ldr	r3, [r7, #28]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d011      	beq.n	80170bc <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8017098:	6879      	ldr	r1, [r7, #4]
 801709a:	69f8      	ldr	r0, [r7, #28]
 801709c:	f7f8 f970 	bl	800f380 <pbuf_copy>
 80170a0:	4603      	mov	r3, r0
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d00a      	beq.n	80170bc <etharp_query+0x214>
          pbuf_free(p);
 80170a6:	69f8      	ldr	r0, [r7, #28]
 80170a8:	f7f8 f82a 	bl	800f100 <pbuf_free>
          p = NULL;
 80170ac:	2300      	movs	r3, #0
 80170ae:	61fb      	str	r3, [r7, #28]
 80170b0:	e004      	b.n	80170bc <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80170b6:	69f8      	ldr	r0, [r7, #28]
 80170b8:	f7f8 f8d4 	bl	800f264 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80170bc:	69fb      	ldr	r3, [r7, #28]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d024      	beq.n	801710c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80170c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80170c6:	4916      	ldr	r1, [pc, #88]	; (8017120 <etharp_query+0x278>)
 80170c8:	4613      	mov	r3, r2
 80170ca:	005b      	lsls	r3, r3, #1
 80170cc:	4413      	add	r3, r2
 80170ce:	00db      	lsls	r3, r3, #3
 80170d0:	440b      	add	r3, r1
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d00b      	beq.n	80170f0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80170d8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80170dc:	4910      	ldr	r1, [pc, #64]	; (8017120 <etharp_query+0x278>)
 80170de:	4613      	mov	r3, r2
 80170e0:	005b      	lsls	r3, r3, #1
 80170e2:	4413      	add	r3, r2
 80170e4:	00db      	lsls	r3, r3, #3
 80170e6:	440b      	add	r3, r1
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7f8 f808 	bl	800f100 <pbuf_free>
      }
      arp_table[i].q = p;
 80170f0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80170f4:	490a      	ldr	r1, [pc, #40]	; (8017120 <etharp_query+0x278>)
 80170f6:	4613      	mov	r3, r2
 80170f8:	005b      	lsls	r3, r3, #1
 80170fa:	4413      	add	r3, r2
 80170fc:	00db      	lsls	r3, r3, #3
 80170fe:	440b      	add	r3, r1
 8017100:	69fa      	ldr	r2, [r7, #28]
 8017102:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017104:	2300      	movs	r3, #0
 8017106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801710a:	e002      	b.n	8017112 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801710c:	23ff      	movs	r3, #255	; 0xff
 801710e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017116:	4618      	mov	r0, r3
 8017118:	3728      	adds	r7, #40	; 0x28
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	20004254 	.word	0x20004254
 8017124:	0801c4ec 	.word	0x0801c4ec
 8017128:	0801c698 	.word	0x0801c698
 801712c:	0801c564 	.word	0x0801c564
 8017130:	0801c68c 	.word	0x0801c68c
 8017134:	20004344 	.word	0x20004344
 8017138:	0801c6c0 	.word	0x0801c6c0

0801713c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b08a      	sub	sp, #40	; 0x28
 8017140:	af02      	add	r7, sp, #8
 8017142:	60f8      	str	r0, [r7, #12]
 8017144:	60b9      	str	r1, [r7, #8]
 8017146:	607a      	str	r2, [r7, #4]
 8017148:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801714a:	2300      	movs	r3, #0
 801714c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d106      	bne.n	8017162 <etharp_raw+0x26>
 8017154:	4b3a      	ldr	r3, [pc, #232]	; (8017240 <etharp_raw+0x104>)
 8017156:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801715a:	493a      	ldr	r1, [pc, #232]	; (8017244 <etharp_raw+0x108>)
 801715c:	483a      	ldr	r0, [pc, #232]	; (8017248 <etharp_raw+0x10c>)
 801715e:	f002 fac1 	bl	80196e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017162:	2200      	movs	r2, #0
 8017164:	211c      	movs	r1, #28
 8017166:	2002      	movs	r0, #2
 8017168:	f7f7 fc58 	bl	800ea1c <pbuf_alloc>
 801716c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801716e:	69bb      	ldr	r3, [r7, #24]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d102      	bne.n	801717a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017178:	e05d      	b.n	8017236 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801717a:	69bb      	ldr	r3, [r7, #24]
 801717c:	895b      	ldrh	r3, [r3, #10]
 801717e:	2b1b      	cmp	r3, #27
 8017180:	d806      	bhi.n	8017190 <etharp_raw+0x54>
 8017182:	4b2f      	ldr	r3, [pc, #188]	; (8017240 <etharp_raw+0x104>)
 8017184:	f240 4264 	movw	r2, #1124	; 0x464
 8017188:	4930      	ldr	r1, [pc, #192]	; (801724c <etharp_raw+0x110>)
 801718a:	482f      	ldr	r0, [pc, #188]	; (8017248 <etharp_raw+0x10c>)
 801718c:	f002 faaa 	bl	80196e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017190:	69bb      	ldr	r3, [r7, #24]
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017196:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017198:	4618      	mov	r0, r3
 801719a:	f7f6 fe0f 	bl	800ddbc <lwip_htons>
 801719e:	4603      	mov	r3, r0
 80171a0:	461a      	mov	r2, r3
 80171a2:	697b      	ldr	r3, [r7, #20]
 80171a4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80171ac:	2b06      	cmp	r3, #6
 80171ae:	d006      	beq.n	80171be <etharp_raw+0x82>
 80171b0:	4b23      	ldr	r3, [pc, #140]	; (8017240 <etharp_raw+0x104>)
 80171b2:	f240 426b 	movw	r2, #1131	; 0x46b
 80171b6:	4926      	ldr	r1, [pc, #152]	; (8017250 <etharp_raw+0x114>)
 80171b8:	4823      	ldr	r0, [pc, #140]	; (8017248 <etharp_raw+0x10c>)
 80171ba:	f002 fa93 	bl	80196e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80171be:	697b      	ldr	r3, [r7, #20]
 80171c0:	3308      	adds	r3, #8
 80171c2:	2206      	movs	r2, #6
 80171c4:	6839      	ldr	r1, [r7, #0]
 80171c6:	4618      	mov	r0, r3
 80171c8:	f002 f9d1 	bl	801956e <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80171cc:	697b      	ldr	r3, [r7, #20]
 80171ce:	3312      	adds	r3, #18
 80171d0:	2206      	movs	r2, #6
 80171d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80171d4:	4618      	mov	r0, r3
 80171d6:	f002 f9ca 	bl	801956e <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80171da:	697b      	ldr	r3, [r7, #20]
 80171dc:	330e      	adds	r3, #14
 80171de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80171e0:	6812      	ldr	r2, [r2, #0]
 80171e2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80171e4:	697b      	ldr	r3, [r7, #20]
 80171e6:	3318      	adds	r3, #24
 80171e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171ea:	6812      	ldr	r2, [r2, #0]
 80171ec:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80171ee:	697b      	ldr	r3, [r7, #20]
 80171f0:	2200      	movs	r2, #0
 80171f2:	701a      	strb	r2, [r3, #0]
 80171f4:	2200      	movs	r2, #0
 80171f6:	f042 0201 	orr.w	r2, r2, #1
 80171fa:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80171fc:	697b      	ldr	r3, [r7, #20]
 80171fe:	2200      	movs	r2, #0
 8017200:	f042 0208 	orr.w	r2, r2, #8
 8017204:	709a      	strb	r2, [r3, #2]
 8017206:	2200      	movs	r2, #0
 8017208:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801720a:	697b      	ldr	r3, [r7, #20]
 801720c:	2206      	movs	r2, #6
 801720e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017210:	697b      	ldr	r3, [r7, #20]
 8017212:	2204      	movs	r2, #4
 8017214:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017216:	f640 0306 	movw	r3, #2054	; 0x806
 801721a:	9300      	str	r3, [sp, #0]
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	68ba      	ldr	r2, [r7, #8]
 8017220:	69b9      	ldr	r1, [r7, #24]
 8017222:	68f8      	ldr	r0, [r7, #12]
 8017224:	f001 fb12 	bl	801884c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017228:	69b8      	ldr	r0, [r7, #24]
 801722a:	f7f7 ff69 	bl	800f100 <pbuf_free>
  p = NULL;
 801722e:	2300      	movs	r3, #0
 8017230:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017232:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017236:	4618      	mov	r0, r3
 8017238:	3720      	adds	r7, #32
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	0801c4ec 	.word	0x0801c4ec
 8017244:	0801c63c 	.word	0x0801c63c
 8017248:	0801c564 	.word	0x0801c564
 801724c:	0801c6dc 	.word	0x0801c6dc
 8017250:	0801c710 	.word	0x0801c710

08017254 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b088      	sub	sp, #32
 8017258:	af04      	add	r7, sp, #16
 801725a:	60f8      	str	r0, [r7, #12]
 801725c:	60b9      	str	r1, [r7, #8]
 801725e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	f103 0029 	add.w	r0, r3, #41	; 0x29
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017270:	2201      	movs	r2, #1
 8017272:	9203      	str	r2, [sp, #12]
 8017274:	68ba      	ldr	r2, [r7, #8]
 8017276:	9202      	str	r2, [sp, #8]
 8017278:	4a06      	ldr	r2, [pc, #24]	; (8017294 <etharp_request_dst+0x40>)
 801727a:	9201      	str	r2, [sp, #4]
 801727c:	9300      	str	r3, [sp, #0]
 801727e:	4603      	mov	r3, r0
 8017280:	687a      	ldr	r2, [r7, #4]
 8017282:	68f8      	ldr	r0, [r7, #12]
 8017284:	f7ff ff5a 	bl	801713c <etharp_raw>
 8017288:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801728a:	4618      	mov	r0, r3
 801728c:	3710      	adds	r7, #16
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}
 8017292:	bf00      	nop
 8017294:	0801ccf8 	.word	0x0801ccf8

08017298 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80172a2:	4a05      	ldr	r2, [pc, #20]	; (80172b8 <etharp_request+0x20>)
 80172a4:	6839      	ldr	r1, [r7, #0]
 80172a6:	6878      	ldr	r0, [r7, #4]
 80172a8:	f7ff ffd4 	bl	8017254 <etharp_request_dst>
 80172ac:	4603      	mov	r3, r0
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3708      	adds	r7, #8
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}
 80172b6:	bf00      	nop
 80172b8:	0801ccf0 	.word	0x0801ccf0

080172bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b08e      	sub	sp, #56	; 0x38
 80172c0:	af04      	add	r7, sp, #16
 80172c2:	6078      	str	r0, [r7, #4]
 80172c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80172c6:	4b7a      	ldr	r3, [pc, #488]	; (80174b0 <icmp_input+0x1f4>)
 80172c8:	689b      	ldr	r3, [r3, #8]
 80172ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80172cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	b29b      	uxth	r3, r3
 80172d2:	f003 030f 	and.w	r3, r3, #15
 80172d6:	b29b      	uxth	r3, r3
 80172d8:	009b      	lsls	r3, r3, #2
 80172da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80172dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172de:	2b13      	cmp	r3, #19
 80172e0:	f240 80d1 	bls.w	8017486 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	895b      	ldrh	r3, [r3, #10]
 80172e8:	2b03      	cmp	r3, #3
 80172ea:	f240 80ce 	bls.w	801748a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	685b      	ldr	r3, [r3, #4]
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80172f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	f000 80bb 	beq.w	8017478 <icmp_input+0x1bc>
 8017302:	2b08      	cmp	r3, #8
 8017304:	f040 80bb 	bne.w	801747e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8017308:	4b6a      	ldr	r3, [pc, #424]	; (80174b4 <icmp_input+0x1f8>)
 801730a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801730c:	4b68      	ldr	r3, [pc, #416]	; (80174b0 <icmp_input+0x1f4>)
 801730e:	695b      	ldr	r3, [r3, #20]
 8017310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017314:	2be0      	cmp	r3, #224	; 0xe0
 8017316:	f000 80bf 	beq.w	8017498 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801731a:	4b65      	ldr	r3, [pc, #404]	; (80174b0 <icmp_input+0x1f4>)
 801731c:	695a      	ldr	r2, [r3, #20]
 801731e:	4b64      	ldr	r3, [pc, #400]	; (80174b0 <icmp_input+0x1f4>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	4619      	mov	r1, r3
 8017324:	4610      	mov	r0, r2
 8017326:	f000 fbef 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 801732a:	4603      	mov	r3, r0
 801732c:	2b00      	cmp	r3, #0
 801732e:	f040 80b5 	bne.w	801749c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	891b      	ldrh	r3, [r3, #8]
 8017336:	2b07      	cmp	r3, #7
 8017338:	f240 80a9 	bls.w	801748e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801733c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801733e:	330e      	adds	r3, #14
 8017340:	b29b      	uxth	r3, r3
 8017342:	b21b      	sxth	r3, r3
 8017344:	4619      	mov	r1, r3
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f7f7 feb6 	bl	800f0b8 <pbuf_header>
 801734c:	4603      	mov	r3, r0
 801734e:	2b00      	cmp	r3, #0
 8017350:	d046      	beq.n	80173e0 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	891a      	ldrh	r2, [r3, #8]
 8017356:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017358:	4413      	add	r3, r2
 801735a:	b29b      	uxth	r3, r3
 801735c:	2200      	movs	r2, #0
 801735e:	4619      	mov	r1, r3
 8017360:	2002      	movs	r0, #2
 8017362:	f7f7 fb5b 	bl	800ea1c <pbuf_alloc>
 8017366:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8017368:	69bb      	ldr	r3, [r7, #24]
 801736a:	2b00      	cmp	r3, #0
 801736c:	f000 8098 	beq.w	80174a0 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017370:	69bb      	ldr	r3, [r7, #24]
 8017372:	895b      	ldrh	r3, [r3, #10]
 8017374:	461a      	mov	r2, r3
 8017376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017378:	3308      	adds	r3, #8
 801737a:	429a      	cmp	r2, r3
 801737c:	d203      	bcs.n	8017386 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801737e:	69b8      	ldr	r0, [r7, #24]
 8017380:	f7f7 febe 	bl	800f100 <pbuf_free>
        goto icmperr;
 8017384:	e08d      	b.n	80174a2 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8017386:	69bb      	ldr	r3, [r7, #24]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801738c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801738e:	4618      	mov	r0, r3
 8017390:	f002 f8ed 	bl	801956e <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8017394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017396:	425b      	negs	r3, r3
 8017398:	b29b      	uxth	r3, r3
 801739a:	b21b      	sxth	r3, r3
 801739c:	4619      	mov	r1, r3
 801739e:	69b8      	ldr	r0, [r7, #24]
 80173a0:	f7f7 fe8a 	bl	800f0b8 <pbuf_header>
 80173a4:	4603      	mov	r3, r0
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d009      	beq.n	80173be <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80173aa:	4b43      	ldr	r3, [pc, #268]	; (80174b8 <icmp_input+0x1fc>)
 80173ac:	22af      	movs	r2, #175	; 0xaf
 80173ae:	4943      	ldr	r1, [pc, #268]	; (80174bc <icmp_input+0x200>)
 80173b0:	4843      	ldr	r0, [pc, #268]	; (80174c0 <icmp_input+0x204>)
 80173b2:	f002 f997 	bl	80196e4 <iprintf>
        pbuf_free(r);
 80173b6:	69b8      	ldr	r0, [r7, #24]
 80173b8:	f7f7 fea2 	bl	800f100 <pbuf_free>
        goto icmperr;
 80173bc:	e071      	b.n	80174a2 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80173be:	6879      	ldr	r1, [r7, #4]
 80173c0:	69b8      	ldr	r0, [r7, #24]
 80173c2:	f7f7 ffdd 	bl	800f380 <pbuf_copy>
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d003      	beq.n	80173d4 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80173cc:	69b8      	ldr	r0, [r7, #24]
 80173ce:	f7f7 fe97 	bl	800f100 <pbuf_free>
        goto icmperr;
 80173d2:	e066      	b.n	80174a2 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80173d4:	6878      	ldr	r0, [r7, #4]
 80173d6:	f7f7 fe93 	bl	800f100 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80173da:	69bb      	ldr	r3, [r7, #24]
 80173dc:	607b      	str	r3, [r7, #4]
 80173de:	e015      	b.n	801740c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80173e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173e2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80173e6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80173ea:	33f2      	adds	r3, #242	; 0xf2
 80173ec:	b29b      	uxth	r3, r3
 80173ee:	b21b      	sxth	r3, r3
 80173f0:	4619      	mov	r1, r3
 80173f2:	6878      	ldr	r0, [r7, #4]
 80173f4:	f7f7 fe60 	bl	800f0b8 <pbuf_header>
 80173f8:	4603      	mov	r3, r0
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d006      	beq.n	801740c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80173fe:	4b2e      	ldr	r3, [pc, #184]	; (80174b8 <icmp_input+0x1fc>)
 8017400:	22c0      	movs	r2, #192	; 0xc0
 8017402:	4930      	ldr	r1, [pc, #192]	; (80174c4 <icmp_input+0x208>)
 8017404:	482e      	ldr	r0, [pc, #184]	; (80174c0 <icmp_input+0x204>)
 8017406:	f002 f96d 	bl	80196e4 <iprintf>
        goto icmperr;
 801740a:	e04a      	b.n	80174a2 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	685b      	ldr	r3, [r3, #4]
 8017410:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8017412:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017416:	4619      	mov	r1, r3
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f7f7 fe4d 	bl	800f0b8 <pbuf_header>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	d12b      	bne.n	801747c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801742a:	69fb      	ldr	r3, [r7, #28]
 801742c:	681a      	ldr	r2, [r3, #0]
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017432:	4b1f      	ldr	r3, [pc, #124]	; (80174b0 <icmp_input+0x1f4>)
 8017434:	691a      	ldr	r2, [r3, #16]
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801743a:	697b      	ldr	r3, [r7, #20]
 801743c:	2200      	movs	r2, #0
 801743e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8017440:	697b      	ldr	r3, [r7, #20]
 8017442:	2200      	movs	r2, #0
 8017444:	709a      	strb	r2, [r3, #2]
 8017446:	2200      	movs	r2, #0
 8017448:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	22ff      	movs	r2, #255	; 0xff
 801744e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8017450:	693b      	ldr	r3, [r7, #16]
 8017452:	2200      	movs	r2, #0
 8017454:	729a      	strb	r2, [r3, #10]
 8017456:	2200      	movs	r2, #0
 8017458:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	9302      	str	r3, [sp, #8]
 801745e:	2301      	movs	r3, #1
 8017460:	9301      	str	r3, [sp, #4]
 8017462:	2300      	movs	r3, #0
 8017464:	9300      	str	r3, [sp, #0]
 8017466:	23ff      	movs	r3, #255	; 0xff
 8017468:	2200      	movs	r2, #0
 801746a:	69f9      	ldr	r1, [r7, #28]
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f000 fa79 	bl	8017964 <ip4_output_if>
 8017472:	4603      	mov	r3, r0
 8017474:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8017476:	e001      	b.n	801747c <icmp_input+0x1c0>
    break;
 8017478:	bf00      	nop
 801747a:	e000      	b.n	801747e <icmp_input+0x1c2>
    break;
 801747c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f7f7 fe3e 	bl	800f100 <pbuf_free>
  return;
 8017484:	e011      	b.n	80174aa <icmp_input+0x1ee>
    goto lenerr;
 8017486:	bf00      	nop
 8017488:	e002      	b.n	8017490 <icmp_input+0x1d4>
    goto lenerr;
 801748a:	bf00      	nop
 801748c:	e000      	b.n	8017490 <icmp_input+0x1d4>
      goto lenerr;
 801748e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017490:	6878      	ldr	r0, [r7, #4]
 8017492:	f7f7 fe35 	bl	800f100 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017496:	e008      	b.n	80174aa <icmp_input+0x1ee>
      goto icmperr;
 8017498:	bf00      	nop
 801749a:	e002      	b.n	80174a2 <icmp_input+0x1e6>
      goto icmperr;
 801749c:	bf00      	nop
 801749e:	e000      	b.n	80174a2 <icmp_input+0x1e6>
        goto icmperr;
 80174a0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f7f7 fe2c 	bl	800f100 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80174a8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80174aa:	3728      	adds	r7, #40	; 0x28
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}
 80174b0:	20007608 	.word	0x20007608
 80174b4:	2000761c 	.word	0x2000761c
 80174b8:	0801c754 	.word	0x0801c754
 80174bc:	0801c78c 	.word	0x0801c78c
 80174c0:	0801c7c4 	.word	0x0801c7c4
 80174c4:	0801c7ec 	.word	0x0801c7ec

080174c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
 80174d0:	460b      	mov	r3, r1
 80174d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80174d4:	78fb      	ldrb	r3, [r7, #3]
 80174d6:	461a      	mov	r2, r3
 80174d8:	2103      	movs	r1, #3
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f000 f814 	bl	8017508 <icmp_send_response>
}
 80174e0:	bf00      	nop
 80174e2:	3708      	adds	r7, #8
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}

080174e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	460b      	mov	r3, r1
 80174f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80174f4:	78fb      	ldrb	r3, [r7, #3]
 80174f6:	461a      	mov	r2, r3
 80174f8:	210b      	movs	r1, #11
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f000 f804 	bl	8017508 <icmp_send_response>
}
 8017500:	bf00      	nop
 8017502:	3708      	adds	r7, #8
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b08c      	sub	sp, #48	; 0x30
 801750c:	af04      	add	r7, sp, #16
 801750e:	6078      	str	r0, [r7, #4]
 8017510:	460b      	mov	r3, r1
 8017512:	70fb      	strb	r3, [r7, #3]
 8017514:	4613      	mov	r3, r2
 8017516:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017518:	2200      	movs	r2, #0
 801751a:	2124      	movs	r1, #36	; 0x24
 801751c:	2001      	movs	r0, #1
 801751e:	f7f7 fa7d 	bl	800ea1c <pbuf_alloc>
 8017522:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017524:	69fb      	ldr	r3, [r7, #28]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d04c      	beq.n	80175c4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801752a:	69fb      	ldr	r3, [r7, #28]
 801752c:	895b      	ldrh	r3, [r3, #10]
 801752e:	2b23      	cmp	r3, #35	; 0x23
 8017530:	d806      	bhi.n	8017540 <icmp_send_response+0x38>
 8017532:	4b26      	ldr	r3, [pc, #152]	; (80175cc <icmp_send_response+0xc4>)
 8017534:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8017538:	4925      	ldr	r1, [pc, #148]	; (80175d0 <icmp_send_response+0xc8>)
 801753a:	4826      	ldr	r0, [pc, #152]	; (80175d4 <icmp_send_response+0xcc>)
 801753c:	f002 f8d2 	bl	80196e4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	685b      	ldr	r3, [r3, #4]
 8017544:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017546:	69fb      	ldr	r3, [r7, #28]
 8017548:	685b      	ldr	r3, [r3, #4]
 801754a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801754c:	697b      	ldr	r3, [r7, #20]
 801754e:	78fa      	ldrb	r2, [r7, #3]
 8017550:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017552:	697b      	ldr	r3, [r7, #20]
 8017554:	78ba      	ldrb	r2, [r7, #2]
 8017556:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017558:	697b      	ldr	r3, [r7, #20]
 801755a:	2200      	movs	r2, #0
 801755c:	711a      	strb	r2, [r3, #4]
 801755e:	2200      	movs	r2, #0
 8017560:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017562:	697b      	ldr	r3, [r7, #20]
 8017564:	2200      	movs	r2, #0
 8017566:	719a      	strb	r2, [r3, #6]
 8017568:	2200      	movs	r2, #0
 801756a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801756c:	69fb      	ldr	r3, [r7, #28]
 801756e:	685b      	ldr	r3, [r3, #4]
 8017570:	f103 0008 	add.w	r0, r3, #8
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	685b      	ldr	r3, [r3, #4]
 8017578:	221c      	movs	r2, #28
 801757a:	4619      	mov	r1, r3
 801757c:	f001 fff7 	bl	801956e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	68db      	ldr	r3, [r3, #12]
 8017584:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017586:	f107 030c 	add.w	r3, r7, #12
 801758a:	4618      	mov	r0, r3
 801758c:	f000 f824 	bl	80175d8 <ip4_route>
 8017590:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017592:	693b      	ldr	r3, [r7, #16]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d011      	beq.n	80175bc <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	2200      	movs	r2, #0
 801759c:	709a      	strb	r2, [r3, #2]
 801759e:	2200      	movs	r2, #0
 80175a0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80175a2:	f107 020c 	add.w	r2, r7, #12
 80175a6:	693b      	ldr	r3, [r7, #16]
 80175a8:	9302      	str	r3, [sp, #8]
 80175aa:	2301      	movs	r3, #1
 80175ac:	9301      	str	r3, [sp, #4]
 80175ae:	2300      	movs	r3, #0
 80175b0:	9300      	str	r3, [sp, #0]
 80175b2:	23ff      	movs	r3, #255	; 0xff
 80175b4:	2100      	movs	r1, #0
 80175b6:	69f8      	ldr	r0, [r7, #28]
 80175b8:	f000 f9d4 	bl	8017964 <ip4_output_if>
  }
  pbuf_free(q);
 80175bc:	69f8      	ldr	r0, [r7, #28]
 80175be:	f7f7 fd9f 	bl	800f100 <pbuf_free>
 80175c2:	e000      	b.n	80175c6 <icmp_send_response+0xbe>
    return;
 80175c4:	bf00      	nop
}
 80175c6:	3720      	adds	r7, #32
 80175c8:	46bd      	mov	sp, r7
 80175ca:	bd80      	pop	{r7, pc}
 80175cc:	0801c754 	.word	0x0801c754
 80175d0:	0801c820 	.word	0x0801c820
 80175d4:	0801c7c4 	.word	0x0801c7c4

080175d8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80175d8:	b480      	push	{r7}
 80175da:	b085      	sub	sp, #20
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80175e0:	4b30      	ldr	r3, [pc, #192]	; (80176a4 <ip4_route+0xcc>)
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	60fb      	str	r3, [r7, #12]
 80175e6:	e036      	b.n	8017656 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80175ee:	f003 0301 	and.w	r3, r3, #1
 80175f2:	b2db      	uxtb	r3, r3
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d02b      	beq.n	8017650 <ip4_route+0x78>
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80175fe:	089b      	lsrs	r3, r3, #2
 8017600:	f003 0301 	and.w	r3, r3, #1
 8017604:	b2db      	uxtb	r3, r3
 8017606:	2b00      	cmp	r3, #0
 8017608:	d022      	beq.n	8017650 <ip4_route+0x78>
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	3304      	adds	r3, #4
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d01d      	beq.n	8017650 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681a      	ldr	r2, [r3, #0]
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	3304      	adds	r3, #4
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	405a      	eors	r2, r3
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	3308      	adds	r3, #8
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	4013      	ands	r3, r2
 8017628:	2b00      	cmp	r3, #0
 801762a:	d101      	bne.n	8017630 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	e033      	b.n	8017698 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017636:	f003 0302 	and.w	r3, r3, #2
 801763a:	2b00      	cmp	r3, #0
 801763c:	d108      	bne.n	8017650 <ip4_route+0x78>
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681a      	ldr	r2, [r3, #0]
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	330c      	adds	r3, #12
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	429a      	cmp	r2, r3
 801764a:	d101      	bne.n	8017650 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	e023      	b.n	8017698 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	60fb      	str	r3, [r7, #12]
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d1c5      	bne.n	80175e8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801765c:	4b12      	ldr	r3, [pc, #72]	; (80176a8 <ip4_route+0xd0>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d015      	beq.n	8017690 <ip4_route+0xb8>
 8017664:	4b10      	ldr	r3, [pc, #64]	; (80176a8 <ip4_route+0xd0>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801766c:	f003 0301 	and.w	r3, r3, #1
 8017670:	2b00      	cmp	r3, #0
 8017672:	d00d      	beq.n	8017690 <ip4_route+0xb8>
 8017674:	4b0c      	ldr	r3, [pc, #48]	; (80176a8 <ip4_route+0xd0>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801767c:	f003 0304 	and.w	r3, r3, #4
 8017680:	2b00      	cmp	r3, #0
 8017682:	d005      	beq.n	8017690 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8017684:	4b08      	ldr	r3, [pc, #32]	; (80176a8 <ip4_route+0xd0>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	3304      	adds	r3, #4
 801768a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801768c:	2b00      	cmp	r3, #0
 801768e:	d101      	bne.n	8017694 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017690:	2300      	movs	r3, #0
 8017692:	e001      	b.n	8017698 <ip4_route+0xc0>
  }

  return netif_default;
 8017694:	4b04      	ldr	r3, [pc, #16]	; (80176a8 <ip4_route+0xd0>)
 8017696:	681b      	ldr	r3, [r3, #0]
}
 8017698:	4618      	mov	r0, r3
 801769a:	3714      	adds	r7, #20
 801769c:	46bd      	mov	sp, r7
 801769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a2:	4770      	bx	lr
 80176a4:	2000ab20 	.word	0x2000ab20
 80176a8:	2000ab24 	.word	0x2000ab24

080176ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b088      	sub	sp, #32
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
 80176b4:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80176b6:	2301      	movs	r3, #1
 80176b8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	685b      	ldr	r3, [r3, #4]
 80176be:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80176c0:	69fb      	ldr	r3, [r7, #28]
 80176c2:	781b      	ldrb	r3, [r3, #0]
 80176c4:	091b      	lsrs	r3, r3, #4
 80176c6:	b2db      	uxtb	r3, r3
 80176c8:	2b04      	cmp	r3, #4
 80176ca:	d004      	beq.n	80176d6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f7f7 fd17 	bl	800f100 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80176d2:	2300      	movs	r3, #0
 80176d4:	e13e      	b.n	8017954 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80176d6:	69fb      	ldr	r3, [r7, #28]
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	b29b      	uxth	r3, r3
 80176dc:	f003 030f 	and.w	r3, r3, #15
 80176e0:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80176e2:	89fb      	ldrh	r3, [r7, #14]
 80176e4:	009b      	lsls	r3, r3, #2
 80176e6:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80176e8:	69fb      	ldr	r3, [r7, #28]
 80176ea:	885b      	ldrh	r3, [r3, #2]
 80176ec:	b29b      	uxth	r3, r3
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7f6 fb64 	bl	800ddbc <lwip_htons>
 80176f4:	4603      	mov	r3, r0
 80176f6:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	891b      	ldrh	r3, [r3, #8]
 80176fc:	89ba      	ldrh	r2, [r7, #12]
 80176fe:	429a      	cmp	r2, r3
 8017700:	d204      	bcs.n	801770c <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8017702:	89bb      	ldrh	r3, [r7, #12]
 8017704:	4619      	mov	r1, r3
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	f7f7 fb86 	bl	800ee18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	895b      	ldrh	r3, [r3, #10]
 8017710:	89fa      	ldrh	r2, [r7, #14]
 8017712:	429a      	cmp	r2, r3
 8017714:	d807      	bhi.n	8017726 <ip4_input+0x7a>
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	891b      	ldrh	r3, [r3, #8]
 801771a:	89ba      	ldrh	r2, [r7, #12]
 801771c:	429a      	cmp	r2, r3
 801771e:	d802      	bhi.n	8017726 <ip4_input+0x7a>
 8017720:	89fb      	ldrh	r3, [r7, #14]
 8017722:	2b13      	cmp	r3, #19
 8017724:	d804      	bhi.n	8017730 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	f7f7 fcea 	bl	800f100 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801772c:	2300      	movs	r3, #0
 801772e:	e111      	b.n	8017954 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017730:	69fb      	ldr	r3, [r7, #28]
 8017732:	691b      	ldr	r3, [r3, #16]
 8017734:	4a89      	ldr	r2, [pc, #548]	; (801795c <ip4_input+0x2b0>)
 8017736:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017738:	69fb      	ldr	r3, [r7, #28]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	4a87      	ldr	r2, [pc, #540]	; (801795c <ip4_input+0x2b0>)
 801773e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017740:	4b86      	ldr	r3, [pc, #536]	; (801795c <ip4_input+0x2b0>)
 8017742:	695b      	ldr	r3, [r3, #20]
 8017744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017748:	2be0      	cmp	r3, #224	; 0xe0
 801774a:	d112      	bne.n	8017772 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017752:	f003 0301 	and.w	r3, r3, #1
 8017756:	b2db      	uxtb	r3, r3
 8017758:	2b00      	cmp	r3, #0
 801775a:	d007      	beq.n	801776c <ip4_input+0xc0>
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	3304      	adds	r3, #4
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d002      	beq.n	801776c <ip4_input+0xc0>
      netif = inp;
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	61bb      	str	r3, [r7, #24]
 801776a:	e041      	b.n	80177f0 <ip4_input+0x144>
    } else {
      netif = NULL;
 801776c:	2300      	movs	r3, #0
 801776e:	61bb      	str	r3, [r7, #24]
 8017770:	e03e      	b.n	80177f0 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8017772:	2301      	movs	r3, #1
 8017774:	613b      	str	r3, [r7, #16]
    netif = inp;
 8017776:	683b      	ldr	r3, [r7, #0]
 8017778:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801777a:	69bb      	ldr	r3, [r7, #24]
 801777c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017780:	f003 0301 	and.w	r3, r3, #1
 8017784:	b2db      	uxtb	r3, r3
 8017786:	2b00      	cmp	r3, #0
 8017788:	d014      	beq.n	80177b4 <ip4_input+0x108>
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	3304      	adds	r3, #4
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d00f      	beq.n	80177b4 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017794:	4b71      	ldr	r3, [pc, #452]	; (801795c <ip4_input+0x2b0>)
 8017796:	695a      	ldr	r2, [r3, #20]
 8017798:	69bb      	ldr	r3, [r7, #24]
 801779a:	3304      	adds	r3, #4
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	429a      	cmp	r2, r3
 80177a0:	d026      	beq.n	80177f0 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80177a2:	4b6e      	ldr	r3, [pc, #440]	; (801795c <ip4_input+0x2b0>)
 80177a4:	695b      	ldr	r3, [r3, #20]
 80177a6:	69b9      	ldr	r1, [r7, #24]
 80177a8:	4618      	mov	r0, r3
 80177aa:	f000 f9ad 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 80177ae:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d11d      	bne.n	80177f0 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80177b4:	693b      	ldr	r3, [r7, #16]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d00d      	beq.n	80177d6 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80177ba:	4b68      	ldr	r3, [pc, #416]	; (801795c <ip4_input+0x2b0>)
 80177bc:	695b      	ldr	r3, [r3, #20]
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	2b7f      	cmp	r3, #127	; 0x7f
 80177c2:	d102      	bne.n	80177ca <ip4_input+0x11e>
          netif = NULL;
 80177c4:	2300      	movs	r3, #0
 80177c6:	61bb      	str	r3, [r7, #24]
          break;
 80177c8:	e012      	b.n	80177f0 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80177ca:	2300      	movs	r3, #0
 80177cc:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 80177ce:	4b64      	ldr	r3, [pc, #400]	; (8017960 <ip4_input+0x2b4>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	61bb      	str	r3, [r7, #24]
 80177d4:	e002      	b.n	80177dc <ip4_input+0x130>
      } else {
        netif = netif->next;
 80177d6:	69bb      	ldr	r3, [r7, #24]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 80177dc:	69ba      	ldr	r2, [r7, #24]
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	429a      	cmp	r2, r3
 80177e2:	d102      	bne.n	80177ea <ip4_input+0x13e>
        netif = netif->next;
 80177e4:	69bb      	ldr	r3, [r7, #24]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 80177ea:	69bb      	ldr	r3, [r7, #24]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d1c4      	bne.n	801777a <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80177f0:	69bb      	ldr	r3, [r7, #24]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d111      	bne.n	801781a <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80177f6:	69fb      	ldr	r3, [r7, #28]
 80177f8:	7a5b      	ldrb	r3, [r3, #9]
 80177fa:	2b11      	cmp	r3, #17
 80177fc:	d10d      	bne.n	801781a <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 80177fe:	89fb      	ldrh	r3, [r7, #14]
 8017800:	69fa      	ldr	r2, [r7, #28]
 8017802:	4413      	add	r3, r2
 8017804:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	885b      	ldrh	r3, [r3, #2]
 801780a:	b29b      	uxth	r3, r3
 801780c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017810:	d103      	bne.n	801781a <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017812:	683b      	ldr	r3, [r7, #0]
 8017814:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017816:	2300      	movs	r3, #0
 8017818:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801781a:	697b      	ldr	r3, [r7, #20]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d017      	beq.n	8017850 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017820:	4b4e      	ldr	r3, [pc, #312]	; (801795c <ip4_input+0x2b0>)
 8017822:	691b      	ldr	r3, [r3, #16]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d013      	beq.n	8017850 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017828:	4b4c      	ldr	r3, [pc, #304]	; (801795c <ip4_input+0x2b0>)
 801782a:	691b      	ldr	r3, [r3, #16]
 801782c:	6839      	ldr	r1, [r7, #0]
 801782e:	4618      	mov	r0, r3
 8017830:	f000 f96a 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 8017834:	4603      	mov	r3, r0
 8017836:	2b00      	cmp	r3, #0
 8017838:	d105      	bne.n	8017846 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801783a:	4b48      	ldr	r3, [pc, #288]	; (801795c <ip4_input+0x2b0>)
 801783c:	691b      	ldr	r3, [r3, #16]
 801783e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017842:	2be0      	cmp	r3, #224	; 0xe0
 8017844:	d104      	bne.n	8017850 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f7f7 fc5a 	bl	800f100 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801784c:	2300      	movs	r3, #0
 801784e:	e081      	b.n	8017954 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d104      	bne.n	8017860 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	f7f7 fc52 	bl	800f100 <pbuf_free>
    return ERR_OK;
 801785c:	2300      	movs	r3, #0
 801785e:	e079      	b.n	8017954 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	88db      	ldrh	r3, [r3, #6]
 8017864:	b29b      	uxth	r3, r3
 8017866:	461a      	mov	r2, r3
 8017868:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801786c:	4013      	ands	r3, r2
 801786e:	2b00      	cmp	r3, #0
 8017870:	d00b      	beq.n	801788a <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f000 fc8e 	bl	8018194 <ip4_reass>
 8017878:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d101      	bne.n	8017884 <ip4_input+0x1d8>
      return ERR_OK;
 8017880:	2300      	movs	r3, #0
 8017882:	e067      	b.n	8017954 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	685b      	ldr	r3, [r3, #4]
 8017888:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801788a:	4a34      	ldr	r2, [pc, #208]	; (801795c <ip4_input+0x2b0>)
 801788c:	69bb      	ldr	r3, [r7, #24]
 801788e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017890:	4a32      	ldr	r2, [pc, #200]	; (801795c <ip4_input+0x2b0>)
 8017892:	683b      	ldr	r3, [r7, #0]
 8017894:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017896:	4a31      	ldr	r2, [pc, #196]	; (801795c <ip4_input+0x2b0>)
 8017898:	69fb      	ldr	r3, [r7, #28]
 801789a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801789c:	69fb      	ldr	r3, [r7, #28]
 801789e:	781b      	ldrb	r3, [r3, #0]
 80178a0:	b29b      	uxth	r3, r3
 80178a2:	f003 030f 	and.w	r3, r3, #15
 80178a6:	b29b      	uxth	r3, r3
 80178a8:	009b      	lsls	r3, r3, #2
 80178aa:	b29a      	uxth	r2, r3
 80178ac:	4b2b      	ldr	r3, [pc, #172]	; (801795c <ip4_input+0x2b0>)
 80178ae:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80178b0:	89fb      	ldrh	r3, [r7, #14]
 80178b2:	425b      	negs	r3, r3
 80178b4:	b29b      	uxth	r3, r3
 80178b6:	b21b      	sxth	r3, r3
 80178b8:	4619      	mov	r1, r3
 80178ba:	6878      	ldr	r0, [r7, #4]
 80178bc:	f7f7 fbfc 	bl	800f0b8 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80178c0:	69fb      	ldr	r3, [r7, #28]
 80178c2:	7a5b      	ldrb	r3, [r3, #9]
 80178c4:	2b06      	cmp	r3, #6
 80178c6:	d009      	beq.n	80178dc <ip4_input+0x230>
 80178c8:	2b11      	cmp	r3, #17
 80178ca:	d002      	beq.n	80178d2 <ip4_input+0x226>
 80178cc:	2b01      	cmp	r3, #1
 80178ce:	d00a      	beq.n	80178e6 <ip4_input+0x23a>
 80178d0:	e00e      	b.n	80178f0 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80178d2:	6839      	ldr	r1, [r7, #0]
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	f7fc fc11 	bl	80140fc <udp_input>
      break;
 80178da:	e028      	b.n	801792e <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 80178dc:	6839      	ldr	r1, [r7, #0]
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f7f9 f862 	bl	80109a8 <tcp_input>
      break;
 80178e4:	e023      	b.n	801792e <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 80178e6:	6839      	ldr	r1, [r7, #0]
 80178e8:	6878      	ldr	r0, [r7, #4]
 80178ea:	f7ff fce7 	bl	80172bc <icmp_input>
      break;
 80178ee:	e01e      	b.n	801792e <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80178f0:	4b1a      	ldr	r3, [pc, #104]	; (801795c <ip4_input+0x2b0>)
 80178f2:	695b      	ldr	r3, [r3, #20]
 80178f4:	69b9      	ldr	r1, [r7, #24]
 80178f6:	4618      	mov	r0, r3
 80178f8:	f000 f906 	bl	8017b08 <ip4_addr_isbroadcast_u32>
 80178fc:	4603      	mov	r3, r0
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d112      	bne.n	8017928 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017902:	4b16      	ldr	r3, [pc, #88]	; (801795c <ip4_input+0x2b0>)
 8017904:	695b      	ldr	r3, [r3, #20]
 8017906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801790a:	2be0      	cmp	r3, #224	; 0xe0
 801790c:	d00c      	beq.n	8017928 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801790e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017912:	4619      	mov	r1, r3
 8017914:	6878      	ldr	r0, [r7, #4]
 8017916:	f7f7 fbe1 	bl	800f0dc <pbuf_header_force>
        p->payload = iphdr;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	69fa      	ldr	r2, [r7, #28]
 801791e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017920:	2102      	movs	r1, #2
 8017922:	6878      	ldr	r0, [r7, #4]
 8017924:	f7ff fdd0 	bl	80174c8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8017928:	6878      	ldr	r0, [r7, #4]
 801792a:	f7f7 fbe9 	bl	800f100 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801792e:	4b0b      	ldr	r3, [pc, #44]	; (801795c <ip4_input+0x2b0>)
 8017930:	2200      	movs	r2, #0
 8017932:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017934:	4b09      	ldr	r3, [pc, #36]	; (801795c <ip4_input+0x2b0>)
 8017936:	2200      	movs	r2, #0
 8017938:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801793a:	4b08      	ldr	r3, [pc, #32]	; (801795c <ip4_input+0x2b0>)
 801793c:	2200      	movs	r2, #0
 801793e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017940:	4b06      	ldr	r3, [pc, #24]	; (801795c <ip4_input+0x2b0>)
 8017942:	2200      	movs	r2, #0
 8017944:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017946:	4b05      	ldr	r3, [pc, #20]	; (801795c <ip4_input+0x2b0>)
 8017948:	2200      	movs	r2, #0
 801794a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801794c:	4b03      	ldr	r3, [pc, #12]	; (801795c <ip4_input+0x2b0>)
 801794e:	2200      	movs	r2, #0
 8017950:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017952:	2300      	movs	r3, #0
}
 8017954:	4618      	mov	r0, r3
 8017956:	3720      	adds	r7, #32
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}
 801795c:	20007608 	.word	0x20007608
 8017960:	2000ab20 	.word	0x2000ab20

08017964 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b08a      	sub	sp, #40	; 0x28
 8017968:	af04      	add	r7, sp, #16
 801796a:	60f8      	str	r0, [r7, #12]
 801796c:	60b9      	str	r1, [r7, #8]
 801796e:	607a      	str	r2, [r7, #4]
 8017970:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017972:	68bb      	ldr	r3, [r7, #8]
 8017974:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d009      	beq.n	8017990 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801797c:	68bb      	ldr	r3, [r7, #8]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d003      	beq.n	801798a <ip4_output_if+0x26>
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d102      	bne.n	8017990 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801798c:	3304      	adds	r3, #4
 801798e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017990:	78fa      	ldrb	r2, [r7, #3]
 8017992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017994:	9302      	str	r3, [sp, #8]
 8017996:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801799a:	9301      	str	r3, [sp, #4]
 801799c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80179a0:	9300      	str	r3, [sp, #0]
 80179a2:	4613      	mov	r3, r2
 80179a4:	687a      	ldr	r2, [r7, #4]
 80179a6:	6979      	ldr	r1, [r7, #20]
 80179a8:	68f8      	ldr	r0, [r7, #12]
 80179aa:	f000 f805 	bl	80179b8 <ip4_output_if_src>
 80179ae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80179b0:	4618      	mov	r0, r3
 80179b2:	3718      	adds	r7, #24
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}

080179b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b088      	sub	sp, #32
 80179bc:	af00      	add	r7, sp, #0
 80179be:	60f8      	str	r0, [r7, #12]
 80179c0:	60b9      	str	r1, [r7, #8]
 80179c2:	607a      	str	r2, [r7, #4]
 80179c4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	89db      	ldrh	r3, [r3, #14]
 80179ca:	2b01      	cmp	r3, #1
 80179cc:	d006      	beq.n	80179dc <ip4_output_if_src+0x24>
 80179ce:	4b48      	ldr	r3, [pc, #288]	; (8017af0 <ip4_output_if_src+0x138>)
 80179d0:	f240 3233 	movw	r2, #819	; 0x333
 80179d4:	4947      	ldr	r1, [pc, #284]	; (8017af4 <ip4_output_if_src+0x13c>)
 80179d6:	4848      	ldr	r0, [pc, #288]	; (8017af8 <ip4_output_if_src+0x140>)
 80179d8:	f001 fe84 	bl	80196e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d060      	beq.n	8017aa4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80179e2:	2314      	movs	r3, #20
 80179e4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80179e6:	2114      	movs	r1, #20
 80179e8:	68f8      	ldr	r0, [r7, #12]
 80179ea:	f7f7 fb65 	bl	800f0b8 <pbuf_header>
 80179ee:	4603      	mov	r3, r0
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d002      	beq.n	80179fa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80179f4:	f06f 0301 	mvn.w	r3, #1
 80179f8:	e075      	b.n	8017ae6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	685b      	ldr	r3, [r3, #4]
 80179fe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	895b      	ldrh	r3, [r3, #10]
 8017a04:	2b13      	cmp	r3, #19
 8017a06:	d806      	bhi.n	8017a16 <ip4_output_if_src+0x5e>
 8017a08:	4b39      	ldr	r3, [pc, #228]	; (8017af0 <ip4_output_if_src+0x138>)
 8017a0a:	f240 3261 	movw	r2, #865	; 0x361
 8017a0e:	493b      	ldr	r1, [pc, #236]	; (8017afc <ip4_output_if_src+0x144>)
 8017a10:	4839      	ldr	r0, [pc, #228]	; (8017af8 <ip4_output_if_src+0x140>)
 8017a12:	f001 fe67 	bl	80196e4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017a16:	69fb      	ldr	r3, [r7, #28]
 8017a18:	78fa      	ldrb	r2, [r7, #3]
 8017a1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017a1c:	69fb      	ldr	r3, [r7, #28]
 8017a1e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017a22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	681a      	ldr	r2, [r3, #0]
 8017a28:	69fb      	ldr	r3, [r7, #28]
 8017a2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017a2c:	8b7b      	ldrh	r3, [r7, #26]
 8017a2e:	089b      	lsrs	r3, r3, #2
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a38:	b2da      	uxtb	r2, r3
 8017a3a:	69fb      	ldr	r3, [r7, #28]
 8017a3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017a3e:	69fb      	ldr	r3, [r7, #28]
 8017a40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017a44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	891b      	ldrh	r3, [r3, #8]
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7f6 f9b6 	bl	800ddbc <lwip_htons>
 8017a50:	4603      	mov	r3, r0
 8017a52:	461a      	mov	r2, r3
 8017a54:	69fb      	ldr	r3, [r7, #28]
 8017a56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017a58:	69fb      	ldr	r3, [r7, #28]
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	719a      	strb	r2, [r3, #6]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017a62:	4b27      	ldr	r3, [pc, #156]	; (8017b00 <ip4_output_if_src+0x148>)
 8017a64:	881b      	ldrh	r3, [r3, #0]
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7f6 f9a8 	bl	800ddbc <lwip_htons>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	461a      	mov	r2, r3
 8017a70:	69fb      	ldr	r3, [r7, #28]
 8017a72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017a74:	4b22      	ldr	r3, [pc, #136]	; (8017b00 <ip4_output_if_src+0x148>)
 8017a76:	881b      	ldrh	r3, [r3, #0]
 8017a78:	3301      	adds	r3, #1
 8017a7a:	b29a      	uxth	r2, r3
 8017a7c:	4b20      	ldr	r3, [pc, #128]	; (8017b00 <ip4_output_if_src+0x148>)
 8017a7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017a80:	68bb      	ldr	r3, [r7, #8]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d104      	bne.n	8017a90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017a86:	4b1f      	ldr	r3, [pc, #124]	; (8017b04 <ip4_output_if_src+0x14c>)
 8017a88:	681a      	ldr	r2, [r3, #0]
 8017a8a:	69fb      	ldr	r3, [r7, #28]
 8017a8c:	60da      	str	r2, [r3, #12]
 8017a8e:	e003      	b.n	8017a98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	681a      	ldr	r2, [r3, #0]
 8017a94:	69fb      	ldr	r3, [r7, #28]
 8017a96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017a98:	69fb      	ldr	r3, [r7, #28]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	729a      	strb	r2, [r3, #10]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	72da      	strb	r2, [r3, #11]
 8017aa2:	e008      	b.n	8017ab6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	685b      	ldr	r3, [r3, #4]
 8017aa8:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017aaa:	69fb      	ldr	r3, [r7, #28]
 8017aac:	691b      	ldr	r3, [r3, #16]
 8017aae:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017ab0:	f107 0314 	add.w	r3, r7, #20
 8017ab4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d00c      	beq.n	8017ad8 <ip4_output_if_src+0x120>
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	891a      	ldrh	r2, [r3, #8]
 8017ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017ac6:	429a      	cmp	r2, r3
 8017ac8:	d906      	bls.n	8017ad8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8017aca:	687a      	ldr	r2, [r7, #4]
 8017acc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017ace:	68f8      	ldr	r0, [r7, #12]
 8017ad0:	f000 fd0a 	bl	80184e8 <ip4_frag>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	e006      	b.n	8017ae6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ada:	695b      	ldr	r3, [r3, #20]
 8017adc:	687a      	ldr	r2, [r7, #4]
 8017ade:	68f9      	ldr	r1, [r7, #12]
 8017ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ae2:	4798      	blx	r3
 8017ae4:	4603      	mov	r3, r0
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	3720      	adds	r7, #32
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd80      	pop	{r7, pc}
 8017aee:	bf00      	nop
 8017af0:	0801c84c 	.word	0x0801c84c
 8017af4:	0801c880 	.word	0x0801c880
 8017af8:	0801c88c 	.word	0x0801c88c
 8017afc:	0801c8b4 	.word	0x0801c8b4
 8017b00:	20004346 	.word	0x20004346
 8017b04:	0801cce8 	.word	0x0801cce8

08017b08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017b08:	b480      	push	{r7}
 8017b0a:	b085      	sub	sp, #20
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
 8017b10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b1c:	d002      	beq.n	8017b24 <ip4_addr_isbroadcast_u32+0x1c>
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d101      	bne.n	8017b28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017b24:	2301      	movs	r3, #1
 8017b26:	e02a      	b.n	8017b7e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017b2e:	f003 0302 	and.w	r3, r3, #2
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d101      	bne.n	8017b3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017b36:	2300      	movs	r3, #0
 8017b38:	e021      	b.n	8017b7e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	3304      	adds	r3, #4
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	687a      	ldr	r2, [r7, #4]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d101      	bne.n	8017b4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017b46:	2300      	movs	r3, #0
 8017b48:	e019      	b.n	8017b7e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017b4a:	68fa      	ldr	r2, [r7, #12]
 8017b4c:	683b      	ldr	r3, [r7, #0]
 8017b4e:	3304      	adds	r3, #4
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	405a      	eors	r2, r3
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	3308      	adds	r3, #8
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	4013      	ands	r3, r2
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d10d      	bne.n	8017b7c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	3308      	adds	r3, #8
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	43da      	mvns	r2, r3
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	3308      	adds	r3, #8
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d101      	bne.n	8017b7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017b78:	2301      	movs	r3, #1
 8017b7a:	e000      	b.n	8017b7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017b7c:	2300      	movs	r3, #0
  }
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3714      	adds	r7, #20
 8017b82:	46bd      	mov	sp, r7
 8017b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b88:	4770      	bx	lr
	...

08017b8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b084      	sub	sp, #16
 8017b90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017b92:	2300      	movs	r3, #0
 8017b94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017b96:	4b12      	ldr	r3, [pc, #72]	; (8017be0 <ip_reass_tmr+0x54>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017b9c:	e018      	b.n	8017bd0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	7fdb      	ldrb	r3, [r3, #31]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d00b      	beq.n	8017bbe <ip_reass_tmr+0x32>
      r->timer--;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	7fdb      	ldrb	r3, [r3, #31]
 8017baa:	3b01      	subs	r3, #1
 8017bac:	b2da      	uxtb	r2, r3
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	60fb      	str	r3, [r7, #12]
 8017bbc:	e008      	b.n	8017bd0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017bc8:	68b9      	ldr	r1, [r7, #8]
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	f000 f80a 	bl	8017be4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d1e3      	bne.n	8017b9e <ip_reass_tmr+0x12>
     }
   }
}
 8017bd6:	bf00      	nop
 8017bd8:	3710      	adds	r7, #16
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}
 8017bde:	bf00      	nop
 8017be0:	20004348 	.word	0x20004348

08017be4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b088      	sub	sp, #32
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
 8017bec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017bee:	2300      	movs	r3, #0
 8017bf0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017bf2:	683a      	ldr	r2, [r7, #0]
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d105      	bne.n	8017c06 <ip_reass_free_complete_datagram+0x22>
 8017bfa:	4b45      	ldr	r3, [pc, #276]	; (8017d10 <ip_reass_free_complete_datagram+0x12c>)
 8017bfc:	22ab      	movs	r2, #171	; 0xab
 8017bfe:	4945      	ldr	r1, [pc, #276]	; (8017d14 <ip_reass_free_complete_datagram+0x130>)
 8017c00:	4845      	ldr	r0, [pc, #276]	; (8017d18 <ip_reass_free_complete_datagram+0x134>)
 8017c02:	f001 fd6f 	bl	80196e4 <iprintf>
  if (prev != NULL) {
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d00a      	beq.n	8017c22 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017c0c:	683b      	ldr	r3, [r7, #0]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	687a      	ldr	r2, [r7, #4]
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d005      	beq.n	8017c22 <ip_reass_free_complete_datagram+0x3e>
 8017c16:	4b3e      	ldr	r3, [pc, #248]	; (8017d10 <ip_reass_free_complete_datagram+0x12c>)
 8017c18:	22ad      	movs	r2, #173	; 0xad
 8017c1a:	4940      	ldr	r1, [pc, #256]	; (8017d1c <ip_reass_free_complete_datagram+0x138>)
 8017c1c:	483e      	ldr	r0, [pc, #248]	; (8017d18 <ip_reass_free_complete_datagram+0x134>)
 8017c1e:	f001 fd61 	bl	80196e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	685b      	ldr	r3, [r3, #4]
 8017c28:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017c2a:	697b      	ldr	r3, [r7, #20]
 8017c2c:	889b      	ldrh	r3, [r3, #4]
 8017c2e:	b29b      	uxth	r3, r3
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d12a      	bne.n	8017c8a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	685b      	ldr	r3, [r3, #4]
 8017c38:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017c3a:	697b      	ldr	r3, [r7, #20]
 8017c3c:	681a      	ldr	r2, [r3, #0]
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017c42:	69bb      	ldr	r3, [r7, #24]
 8017c44:	6858      	ldr	r0, [r3, #4]
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	3308      	adds	r3, #8
 8017c4a:	2214      	movs	r2, #20
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	f001 fc8e 	bl	801956e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017c52:	2101      	movs	r1, #1
 8017c54:	69b8      	ldr	r0, [r7, #24]
 8017c56:	f7ff fc47 	bl	80174e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017c5a:	69b8      	ldr	r0, [r7, #24]
 8017c5c:	f7f7 faea 	bl	800f234 <pbuf_clen>
 8017c60:	4603      	mov	r3, r0
 8017c62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017c64:	8bfa      	ldrh	r2, [r7, #30]
 8017c66:	8a7b      	ldrh	r3, [r7, #18]
 8017c68:	4413      	add	r3, r2
 8017c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017c6e:	db05      	blt.n	8017c7c <ip_reass_free_complete_datagram+0x98>
 8017c70:	4b27      	ldr	r3, [pc, #156]	; (8017d10 <ip_reass_free_complete_datagram+0x12c>)
 8017c72:	22bc      	movs	r2, #188	; 0xbc
 8017c74:	492a      	ldr	r1, [pc, #168]	; (8017d20 <ip_reass_free_complete_datagram+0x13c>)
 8017c76:	4828      	ldr	r0, [pc, #160]	; (8017d18 <ip_reass_free_complete_datagram+0x134>)
 8017c78:	f001 fd34 	bl	80196e4 <iprintf>
    pbufs_freed += clen;
 8017c7c:	8bfa      	ldrh	r2, [r7, #30]
 8017c7e:	8a7b      	ldrh	r3, [r7, #18]
 8017c80:	4413      	add	r3, r2
 8017c82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017c84:	69b8      	ldr	r0, [r7, #24]
 8017c86:	f7f7 fa3b 	bl	800f100 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017c90:	e01f      	b.n	8017cd2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017c92:	69bb      	ldr	r3, [r7, #24]
 8017c94:	685b      	ldr	r3, [r3, #4]
 8017c96:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017c98:	69bb      	ldr	r3, [r7, #24]
 8017c9a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017c9c:	697b      	ldr	r3, [r7, #20]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017ca2:	68f8      	ldr	r0, [r7, #12]
 8017ca4:	f7f7 fac6 	bl	800f234 <pbuf_clen>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017cac:	8bfa      	ldrh	r2, [r7, #30]
 8017cae:	8a7b      	ldrh	r3, [r7, #18]
 8017cb0:	4413      	add	r3, r2
 8017cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017cb6:	db05      	blt.n	8017cc4 <ip_reass_free_complete_datagram+0xe0>
 8017cb8:	4b15      	ldr	r3, [pc, #84]	; (8017d10 <ip_reass_free_complete_datagram+0x12c>)
 8017cba:	22cc      	movs	r2, #204	; 0xcc
 8017cbc:	4918      	ldr	r1, [pc, #96]	; (8017d20 <ip_reass_free_complete_datagram+0x13c>)
 8017cbe:	4816      	ldr	r0, [pc, #88]	; (8017d18 <ip_reass_free_complete_datagram+0x134>)
 8017cc0:	f001 fd10 	bl	80196e4 <iprintf>
    pbufs_freed += clen;
 8017cc4:	8bfa      	ldrh	r2, [r7, #30]
 8017cc6:	8a7b      	ldrh	r3, [r7, #18]
 8017cc8:	4413      	add	r3, r2
 8017cca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017ccc:	68f8      	ldr	r0, [r7, #12]
 8017cce:	f7f7 fa17 	bl	800f100 <pbuf_free>
  while (p != NULL) {
 8017cd2:	69bb      	ldr	r3, [r7, #24]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d1dc      	bne.n	8017c92 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017cd8:	6839      	ldr	r1, [r7, #0]
 8017cda:	6878      	ldr	r0, [r7, #4]
 8017cdc:	f000 f8c2 	bl	8017e64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017ce0:	4b10      	ldr	r3, [pc, #64]	; (8017d24 <ip_reass_free_complete_datagram+0x140>)
 8017ce2:	881b      	ldrh	r3, [r3, #0]
 8017ce4:	8bfa      	ldrh	r2, [r7, #30]
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	d905      	bls.n	8017cf6 <ip_reass_free_complete_datagram+0x112>
 8017cea:	4b09      	ldr	r3, [pc, #36]	; (8017d10 <ip_reass_free_complete_datagram+0x12c>)
 8017cec:	22d2      	movs	r2, #210	; 0xd2
 8017cee:	490e      	ldr	r1, [pc, #56]	; (8017d28 <ip_reass_free_complete_datagram+0x144>)
 8017cf0:	4809      	ldr	r0, [pc, #36]	; (8017d18 <ip_reass_free_complete_datagram+0x134>)
 8017cf2:	f001 fcf7 	bl	80196e4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8017cf6:	4b0b      	ldr	r3, [pc, #44]	; (8017d24 <ip_reass_free_complete_datagram+0x140>)
 8017cf8:	881a      	ldrh	r2, [r3, #0]
 8017cfa:	8bfb      	ldrh	r3, [r7, #30]
 8017cfc:	1ad3      	subs	r3, r2, r3
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	4b08      	ldr	r3, [pc, #32]	; (8017d24 <ip_reass_free_complete_datagram+0x140>)
 8017d02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017d04:	8bfb      	ldrh	r3, [r7, #30]
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	3720      	adds	r7, #32
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}
 8017d0e:	bf00      	nop
 8017d10:	0801c8e4 	.word	0x0801c8e4
 8017d14:	0801c920 	.word	0x0801c920
 8017d18:	0801c92c 	.word	0x0801c92c
 8017d1c:	0801c954 	.word	0x0801c954
 8017d20:	0801c968 	.word	0x0801c968
 8017d24:	2000434c 	.word	0x2000434c
 8017d28:	0801c988 	.word	0x0801c988

08017d2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b08a      	sub	sp, #40	; 0x28
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	6078      	str	r0, [r7, #4]
 8017d34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017d36:	2300      	movs	r3, #0
 8017d38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017d42:	2300      	movs	r3, #0
 8017d44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017d46:	2300      	movs	r3, #0
 8017d48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017d4a:	4b28      	ldr	r3, [pc, #160]	; (8017dec <ip_reass_remove_oldest_datagram+0xc0>)
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017d50:	e030      	b.n	8017db4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d54:	695a      	ldr	r2, [r3, #20]
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	68db      	ldr	r3, [r3, #12]
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	d10c      	bne.n	8017d78 <ip_reass_remove_oldest_datagram+0x4c>
 8017d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d60:	699a      	ldr	r2, [r3, #24]
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	691b      	ldr	r3, [r3, #16]
 8017d66:	429a      	cmp	r2, r3
 8017d68:	d106      	bne.n	8017d78 <ip_reass_remove_oldest_datagram+0x4c>
 8017d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d6c:	899a      	ldrh	r2, [r3, #12]
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	889b      	ldrh	r3, [r3, #4]
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d014      	beq.n	8017da2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	3301      	adds	r3, #1
 8017d7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017d7e:	6a3b      	ldr	r3, [r7, #32]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d104      	bne.n	8017d8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017d88:	69fb      	ldr	r3, [r7, #28]
 8017d8a:	61bb      	str	r3, [r7, #24]
 8017d8c:	e009      	b.n	8017da2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d90:	7fda      	ldrb	r2, [r3, #31]
 8017d92:	6a3b      	ldr	r3, [r7, #32]
 8017d94:	7fdb      	ldrb	r3, [r3, #31]
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d803      	bhi.n	8017da2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017d9e:	69fb      	ldr	r3, [r7, #28]
 8017da0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d001      	beq.n	8017dae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d1cb      	bne.n	8017d52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017dba:	6a3b      	ldr	r3, [r7, #32]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d008      	beq.n	8017dd2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017dc0:	69b9      	ldr	r1, [r7, #24]
 8017dc2:	6a38      	ldr	r0, [r7, #32]
 8017dc4:	f7ff ff0e 	bl	8017be4 <ip_reass_free_complete_datagram>
 8017dc8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017dca:	697a      	ldr	r2, [r7, #20]
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	4413      	add	r3, r2
 8017dd0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017dd2:	697a      	ldr	r2, [r7, #20]
 8017dd4:	683b      	ldr	r3, [r7, #0]
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	da02      	bge.n	8017de0 <ip_reass_remove_oldest_datagram+0xb4>
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	2b01      	cmp	r3, #1
 8017dde:	dcac      	bgt.n	8017d3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017de0:	697b      	ldr	r3, [r7, #20]
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	3728      	adds	r7, #40	; 0x28
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}
 8017dea:	bf00      	nop
 8017dec:	20004348 	.word	0x20004348

08017df0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b084      	sub	sp, #16
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
 8017df8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017dfa:	2004      	movs	r0, #4
 8017dfc:	f7f6 fbcc 	bl	800e598 <memp_malloc>
 8017e00:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d110      	bne.n	8017e2a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017e08:	6839      	ldr	r1, [r7, #0]
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f7ff ff8e 	bl	8017d2c <ip_reass_remove_oldest_datagram>
 8017e10:	4602      	mov	r2, r0
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	4293      	cmp	r3, r2
 8017e16:	dc03      	bgt.n	8017e20 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017e18:	2004      	movs	r0, #4
 8017e1a:	f7f6 fbbd 	bl	800e598 <memp_malloc>
 8017e1e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d101      	bne.n	8017e2a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8017e26:	2300      	movs	r3, #0
 8017e28:	e016      	b.n	8017e58 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017e2a:	2220      	movs	r2, #32
 8017e2c:	2100      	movs	r1, #0
 8017e2e:	68f8      	ldr	r0, [r7, #12]
 8017e30:	f001 fba8 	bl	8019584 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2203      	movs	r2, #3
 8017e38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017e3a:	4b09      	ldr	r3, [pc, #36]	; (8017e60 <ip_reass_enqueue_new_datagram+0x70>)
 8017e3c:	681a      	ldr	r2, [r3, #0]
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017e42:	4a07      	ldr	r2, [pc, #28]	; (8017e60 <ip_reass_enqueue_new_datagram+0x70>)
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	3308      	adds	r3, #8
 8017e4c:	2214      	movs	r2, #20
 8017e4e:	6879      	ldr	r1, [r7, #4]
 8017e50:	4618      	mov	r0, r3
 8017e52:	f001 fb8c 	bl	801956e <memcpy>
  return ipr;
 8017e56:	68fb      	ldr	r3, [r7, #12]
}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3710      	adds	r7, #16
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}
 8017e60:	20004348 	.word	0x20004348

08017e64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b082      	sub	sp, #8
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
 8017e6c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017e6e:	4b10      	ldr	r3, [pc, #64]	; (8017eb0 <ip_reass_dequeue_datagram+0x4c>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	687a      	ldr	r2, [r7, #4]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d104      	bne.n	8017e82 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	4a0c      	ldr	r2, [pc, #48]	; (8017eb0 <ip_reass_dequeue_datagram+0x4c>)
 8017e7e:	6013      	str	r3, [r2, #0]
 8017e80:	e00d      	b.n	8017e9e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d106      	bne.n	8017e96 <ip_reass_dequeue_datagram+0x32>
 8017e88:	4b0a      	ldr	r3, [pc, #40]	; (8017eb4 <ip_reass_dequeue_datagram+0x50>)
 8017e8a:	f240 1245 	movw	r2, #325	; 0x145
 8017e8e:	490a      	ldr	r1, [pc, #40]	; (8017eb8 <ip_reass_dequeue_datagram+0x54>)
 8017e90:	480a      	ldr	r0, [pc, #40]	; (8017ebc <ip_reass_dequeue_datagram+0x58>)
 8017e92:	f001 fc27 	bl	80196e4 <iprintf>
    prev->next = ipr->next;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681a      	ldr	r2, [r3, #0]
 8017e9a:	683b      	ldr	r3, [r7, #0]
 8017e9c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017e9e:	6879      	ldr	r1, [r7, #4]
 8017ea0:	2004      	movs	r0, #4
 8017ea2:	f7f6 fbcb 	bl	800e63c <memp_free>
}
 8017ea6:	bf00      	nop
 8017ea8:	3708      	adds	r7, #8
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	bd80      	pop	{r7, pc}
 8017eae:	bf00      	nop
 8017eb0:	20004348 	.word	0x20004348
 8017eb4:	0801c8e4 	.word	0x0801c8e4
 8017eb8:	0801c9a4 	.word	0x0801c9a4
 8017ebc:	0801c92c 	.word	0x0801c92c

08017ec0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b08c      	sub	sp, #48	; 0x30
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60f8      	str	r0, [r7, #12]
 8017ec8:	60b9      	str	r1, [r7, #8]
 8017eca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017ed0:	2301      	movs	r3, #1
 8017ed2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	685b      	ldr	r3, [r3, #4]
 8017ed8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017eda:	69fb      	ldr	r3, [r7, #28]
 8017edc:	885b      	ldrh	r3, [r3, #2]
 8017ede:	b29b      	uxth	r3, r3
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f7f5 ff6b 	bl	800ddbc <lwip_htons>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	461a      	mov	r2, r3
 8017eea:	69fb      	ldr	r3, [r7, #28]
 8017eec:	781b      	ldrb	r3, [r3, #0]
 8017eee:	b29b      	uxth	r3, r3
 8017ef0:	f003 030f 	and.w	r3, r3, #15
 8017ef4:	b29b      	uxth	r3, r3
 8017ef6:	009b      	lsls	r3, r3, #2
 8017ef8:	b29b      	uxth	r3, r3
 8017efa:	1ad3      	subs	r3, r2, r3
 8017efc:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	88db      	ldrh	r3, [r3, #6]
 8017f02:	b29b      	uxth	r3, r3
 8017f04:	4618      	mov	r0, r3
 8017f06:	f7f5 ff59 	bl	800ddbc <lwip_htons>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	00db      	lsls	r3, r3, #3
 8017f14:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8017f16:	68bb      	ldr	r3, [r7, #8]
 8017f18:	685b      	ldr	r3, [r3, #4]
 8017f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f1e:	2200      	movs	r2, #0
 8017f20:	701a      	strb	r2, [r3, #0]
 8017f22:	2200      	movs	r2, #0
 8017f24:	705a      	strb	r2, [r3, #1]
 8017f26:	2200      	movs	r2, #0
 8017f28:	709a      	strb	r2, [r3, #2]
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f30:	8b3a      	ldrh	r2, [r7, #24]
 8017f32:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8017f34:	8b3a      	ldrh	r2, [r7, #24]
 8017f36:	8b7b      	ldrh	r3, [r7, #26]
 8017f38:	4413      	add	r3, r2
 8017f3a:	b29a      	uxth	r2, r3
 8017f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f3e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	685b      	ldr	r3, [r3, #4]
 8017f44:	627b      	str	r3, [r7, #36]	; 0x24
 8017f46:	e061      	b.n	801800c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8017f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f4a:	685b      	ldr	r3, [r3, #4]
 8017f4c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8017f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f50:	889b      	ldrh	r3, [r3, #4]
 8017f52:	b29a      	uxth	r2, r3
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	889b      	ldrh	r3, [r3, #4]
 8017f58:	b29b      	uxth	r3, r3
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	d232      	bcs.n	8017fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f62:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d01f      	beq.n	8017faa <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f6c:	889b      	ldrh	r3, [r3, #4]
 8017f6e:	b29a      	uxth	r2, r3
 8017f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f72:	88db      	ldrh	r3, [r3, #6]
 8017f74:	b29b      	uxth	r3, r3
 8017f76:	429a      	cmp	r2, r3
 8017f78:	f0c0 80e3 	bcc.w	8018142 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8017f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f7e:	88db      	ldrh	r3, [r3, #6]
 8017f80:	b29a      	uxth	r2, r3
 8017f82:	697b      	ldr	r3, [r7, #20]
 8017f84:	889b      	ldrh	r3, [r3, #4]
 8017f86:	b29b      	uxth	r3, r3
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	f200 80da 	bhi.w	8018142 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f90:	68ba      	ldr	r2, [r7, #8]
 8017f92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f96:	88db      	ldrh	r3, [r3, #6]
 8017f98:	b29a      	uxth	r2, r3
 8017f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9c:	889b      	ldrh	r3, [r3, #4]
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d037      	beq.n	8018014 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017fa8:	e034      	b.n	8018014 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8017faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fac:	88db      	ldrh	r3, [r3, #6]
 8017fae:	b29a      	uxth	r2, r3
 8017fb0:	697b      	ldr	r3, [r7, #20]
 8017fb2:	889b      	ldrh	r3, [r3, #4]
 8017fb4:	b29b      	uxth	r3, r3
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	f200 80c5 	bhi.w	8018146 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	68ba      	ldr	r2, [r7, #8]
 8017fc0:	605a      	str	r2, [r3, #4]
      break;
 8017fc2:	e027      	b.n	8018014 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8017fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc6:	889b      	ldrh	r3, [r3, #4]
 8017fc8:	b29a      	uxth	r2, r3
 8017fca:	697b      	ldr	r3, [r7, #20]
 8017fcc:	889b      	ldrh	r3, [r3, #4]
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	f000 80ba 	beq.w	801814a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd8:	889b      	ldrh	r3, [r3, #4]
 8017fda:	b29a      	uxth	r2, r3
 8017fdc:	697b      	ldr	r3, [r7, #20]
 8017fde:	88db      	ldrh	r3, [r3, #6]
 8017fe0:	b29b      	uxth	r3, r3
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	f0c0 80b3 	bcc.w	801814e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d009      	beq.n	8018002 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8017fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff0:	88db      	ldrh	r3, [r3, #6]
 8017ff2:	b29a      	uxth	r2, r3
 8017ff4:	697b      	ldr	r3, [r7, #20]
 8017ff6:	889b      	ldrh	r3, [r3, #4]
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d001      	beq.n	8018002 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ffe:	2300      	movs	r3, #0
 8018000:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800e:	2b00      	cmp	r3, #0
 8018010:	d19a      	bne.n	8017f48 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8018012:	e000      	b.n	8018016 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8018014:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018018:	2b00      	cmp	r3, #0
 801801a:	d12d      	bne.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 801801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801801e:	2b00      	cmp	r3, #0
 8018020:	d01c      	beq.n	801805c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018024:	88db      	ldrh	r3, [r3, #6]
 8018026:	b29a      	uxth	r2, r3
 8018028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802a:	889b      	ldrh	r3, [r3, #4]
 801802c:	b29b      	uxth	r3, r3
 801802e:	429a      	cmp	r2, r3
 8018030:	d906      	bls.n	8018040 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8018032:	4b51      	ldr	r3, [pc, #324]	; (8018178 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018034:	f240 12ab 	movw	r2, #427	; 0x1ab
 8018038:	4950      	ldr	r1, [pc, #320]	; (801817c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801803a:	4851      	ldr	r0, [pc, #324]	; (8018180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801803c:	f001 fb52 	bl	80196e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018042:	68ba      	ldr	r2, [r7, #8]
 8018044:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018048:	88db      	ldrh	r3, [r3, #6]
 801804a:	b29a      	uxth	r2, r3
 801804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804e:	889b      	ldrh	r3, [r3, #4]
 8018050:	b29b      	uxth	r3, r3
 8018052:	429a      	cmp	r2, r3
 8018054:	d010      	beq.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8018056:	2300      	movs	r3, #0
 8018058:	623b      	str	r3, [r7, #32]
 801805a:	e00d      	b.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	685b      	ldr	r3, [r3, #4]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d006      	beq.n	8018072 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8018064:	4b44      	ldr	r3, [pc, #272]	; (8018178 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018066:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801806a:	4946      	ldr	r1, [pc, #280]	; (8018184 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801806c:	4844      	ldr	r0, [pc, #272]	; (8018180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801806e:	f001 fb39 	bl	80196e4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	68ba      	ldr	r2, [r7, #8]
 8018076:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d105      	bne.n	801808a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	7f9b      	ldrb	r3, [r3, #30]
 8018082:	f003 0301 	and.w	r3, r3, #1
 8018086:	2b00      	cmp	r3, #0
 8018088:	d059      	beq.n	801813e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801808a:	6a3b      	ldr	r3, [r7, #32]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d04f      	beq.n	8018130 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	685b      	ldr	r3, [r3, #4]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d006      	beq.n	80180a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	685b      	ldr	r3, [r3, #4]
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	889b      	ldrh	r3, [r3, #4]
 80180a0:	b29b      	uxth	r3, r3
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d002      	beq.n	80180ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80180a6:	2300      	movs	r3, #0
 80180a8:	623b      	str	r3, [r7, #32]
 80180aa:	e041      	b.n	8018130 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80180ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80180b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80180b6:	e012      	b.n	80180de <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80180b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ba:	685b      	ldr	r3, [r3, #4]
 80180bc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80180be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c0:	88db      	ldrh	r3, [r3, #6]
 80180c2:	b29a      	uxth	r2, r3
 80180c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c6:	889b      	ldrh	r3, [r3, #4]
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d002      	beq.n	80180d4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80180ce:	2300      	movs	r3, #0
 80180d0:	623b      	str	r3, [r7, #32]
            break;
 80180d2:	e007      	b.n	80180e4 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80180d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180d6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80180d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80180de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d1e9      	bne.n	80180b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80180e4:	6a3b      	ldr	r3, [r7, #32]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d022      	beq.n	8018130 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d106      	bne.n	8018100 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80180f2:	4b21      	ldr	r3, [pc, #132]	; (8018178 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80180f4:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80180f8:	4923      	ldr	r1, [pc, #140]	; (8018188 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80180fa:	4821      	ldr	r0, [pc, #132]	; (8018180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80180fc:	f001 faf2 	bl	80196e4 <iprintf>
          LWIP_ASSERT("sanity check",
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	685b      	ldr	r3, [r3, #4]
 8018104:	685b      	ldr	r3, [r3, #4]
 8018106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018108:	429a      	cmp	r2, r3
 801810a:	d106      	bne.n	801811a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 801810c:	4b1a      	ldr	r3, [pc, #104]	; (8018178 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801810e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8018112:	491d      	ldr	r1, [pc, #116]	; (8018188 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018114:	481a      	ldr	r0, [pc, #104]	; (8018180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018116:	f001 fae5 	bl	80196e4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d006      	beq.n	8018130 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8018122:	4b15      	ldr	r3, [pc, #84]	; (8018178 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018124:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8018128:	4918      	ldr	r1, [pc, #96]	; (801818c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801812a:	4815      	ldr	r0, [pc, #84]	; (8018180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801812c:	f001 fada 	bl	80196e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018130:	6a3b      	ldr	r3, [r7, #32]
 8018132:	2b00      	cmp	r3, #0
 8018134:	bf14      	ite	ne
 8018136:	2301      	movne	r3, #1
 8018138:	2300      	moveq	r3, #0
 801813a:	b2db      	uxtb	r3, r3
 801813c:	e018      	b.n	8018170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801813e:	2300      	movs	r3, #0
 8018140:	e016      	b.n	8018170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8018142:	bf00      	nop
 8018144:	e004      	b.n	8018150 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8018146:	bf00      	nop
 8018148:	e002      	b.n	8018150 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801814a:	bf00      	nop
 801814c:	e000      	b.n	8018150 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801814e:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8018150:	68b8      	ldr	r0, [r7, #8]
 8018152:	f7f7 f86f 	bl	800f234 <pbuf_clen>
 8018156:	4603      	mov	r3, r0
 8018158:	461a      	mov	r2, r3
 801815a:	4b0d      	ldr	r3, [pc, #52]	; (8018190 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801815c:	881b      	ldrh	r3, [r3, #0]
 801815e:	1a9b      	subs	r3, r3, r2
 8018160:	b29a      	uxth	r2, r3
 8018162:	4b0b      	ldr	r3, [pc, #44]	; (8018190 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018164:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8018166:	68b8      	ldr	r0, [r7, #8]
 8018168:	f7f6 ffca 	bl	800f100 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 801816c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8018170:	4618      	mov	r0, r3
 8018172:	3730      	adds	r7, #48	; 0x30
 8018174:	46bd      	mov	sp, r7
 8018176:	bd80      	pop	{r7, pc}
 8018178:	0801c8e4 	.word	0x0801c8e4
 801817c:	0801c9c0 	.word	0x0801c9c0
 8018180:	0801c92c 	.word	0x0801c92c
 8018184:	0801c9e0 	.word	0x0801c9e0
 8018188:	0801ca18 	.word	0x0801ca18
 801818c:	0801ca28 	.word	0x0801ca28
 8018190:	2000434c 	.word	0x2000434c

08018194 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b08e      	sub	sp, #56	; 0x38
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	685b      	ldr	r3, [r3, #4]
 80181a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80181a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	f003 030f 	and.w	r3, r3, #15
 80181aa:	009b      	lsls	r3, r3, #2
 80181ac:	2b14      	cmp	r3, #20
 80181ae:	f040 8131 	bne.w	8018414 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80181b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b4:	88db      	ldrh	r3, [r3, #6]
 80181b6:	b29b      	uxth	r3, r3
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7f5 fdff 	bl	800ddbc <lwip_htons>
 80181be:	4603      	mov	r3, r0
 80181c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	00db      	lsls	r3, r3, #3
 80181c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80181ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181cc:	885b      	ldrh	r3, [r3, #2]
 80181ce:	b29b      	uxth	r3, r3
 80181d0:	4618      	mov	r0, r3
 80181d2:	f7f5 fdf3 	bl	800ddbc <lwip_htons>
 80181d6:	4603      	mov	r3, r0
 80181d8:	461a      	mov	r2, r3
 80181da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	b29b      	uxth	r3, r3
 80181e0:	f003 030f 	and.w	r3, r3, #15
 80181e4:	b29b      	uxth	r3, r3
 80181e6:	009b      	lsls	r3, r3, #2
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	1ad3      	subs	r3, r2, r3
 80181ec:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f7f7 f820 	bl	800f234 <pbuf_clen>
 80181f4:	4603      	mov	r3, r0
 80181f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80181f8:	4b8d      	ldr	r3, [pc, #564]	; (8018430 <ip4_reass+0x29c>)
 80181fa:	881b      	ldrh	r3, [r3, #0]
 80181fc:	461a      	mov	r2, r3
 80181fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018200:	4413      	add	r3, r2
 8018202:	2b0a      	cmp	r3, #10
 8018204:	dd10      	ble.n	8018228 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018208:	4619      	mov	r1, r3
 801820a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801820c:	f7ff fd8e 	bl	8017d2c <ip_reass_remove_oldest_datagram>
 8018210:	4603      	mov	r3, r0
 8018212:	2b00      	cmp	r3, #0
 8018214:	f000 8100 	beq.w	8018418 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018218:	4b85      	ldr	r3, [pc, #532]	; (8018430 <ip4_reass+0x29c>)
 801821a:	881b      	ldrh	r3, [r3, #0]
 801821c:	461a      	mov	r2, r3
 801821e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018220:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018222:	2b0a      	cmp	r3, #10
 8018224:	f300 80f8 	bgt.w	8018418 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018228:	4b82      	ldr	r3, [pc, #520]	; (8018434 <ip4_reass+0x2a0>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	633b      	str	r3, [r7, #48]	; 0x30
 801822e:	e015      	b.n	801825c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018232:	695a      	ldr	r2, [r3, #20]
 8018234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018236:	68db      	ldr	r3, [r3, #12]
 8018238:	429a      	cmp	r2, r3
 801823a:	d10c      	bne.n	8018256 <ip4_reass+0xc2>
 801823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801823e:	699a      	ldr	r2, [r3, #24]
 8018240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018242:	691b      	ldr	r3, [r3, #16]
 8018244:	429a      	cmp	r2, r3
 8018246:	d106      	bne.n	8018256 <ip4_reass+0xc2>
 8018248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824a:	899a      	ldrh	r2, [r3, #12]
 801824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801824e:	889b      	ldrh	r3, [r3, #4]
 8018250:	b29b      	uxth	r3, r3
 8018252:	429a      	cmp	r2, r3
 8018254:	d006      	beq.n	8018264 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	633b      	str	r3, [r7, #48]	; 0x30
 801825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825e:	2b00      	cmp	r3, #0
 8018260:	d1e6      	bne.n	8018230 <ip4_reass+0x9c>
 8018262:	e000      	b.n	8018266 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018264:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018268:	2b00      	cmp	r3, #0
 801826a:	d109      	bne.n	8018280 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801826c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801826e:	4619      	mov	r1, r3
 8018270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018272:	f7ff fdbd 	bl	8017df0 <ip_reass_enqueue_new_datagram>
 8018276:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801827a:	2b00      	cmp	r3, #0
 801827c:	d11c      	bne.n	80182b8 <ip4_reass+0x124>
      goto nullreturn;
 801827e:	e0ce      	b.n	801841e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018282:	88db      	ldrh	r3, [r3, #6]
 8018284:	b29b      	uxth	r3, r3
 8018286:	4618      	mov	r0, r3
 8018288:	f7f5 fd98 	bl	800ddbc <lwip_htons>
 801828c:	4603      	mov	r3, r0
 801828e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018292:	2b00      	cmp	r3, #0
 8018294:	d110      	bne.n	80182b8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018298:	89db      	ldrh	r3, [r3, #14]
 801829a:	4618      	mov	r0, r3
 801829c:	f7f5 fd8e 	bl	800ddbc <lwip_htons>
 80182a0:	4603      	mov	r3, r0
 80182a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d006      	beq.n	80182b8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80182aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ac:	3308      	adds	r3, #8
 80182ae:	2214      	movs	r2, #20
 80182b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80182b2:	4618      	mov	r0, r3
 80182b4:	f001 f95b 	bl	801956e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80182b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ba:	88db      	ldrh	r3, [r3, #6]
 80182bc:	b29b      	uxth	r3, r3
 80182be:	f003 0320 	and.w	r3, r3, #32
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	bf0c      	ite	eq
 80182c6:	2301      	moveq	r3, #1
 80182c8:	2300      	movne	r3, #0
 80182ca:	b2db      	uxtb	r3, r3
 80182cc:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d00e      	beq.n	80182f2 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80182d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80182d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80182d8:	4413      	add	r3, r2
 80182da:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80182dc:	8b7a      	ldrh	r2, [r7, #26]
 80182de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80182e0:	429a      	cmp	r2, r3
 80182e2:	f0c0 8099 	bcc.w	8018418 <ip4_reass+0x284>
 80182e6:	8b7b      	ldrh	r3, [r7, #26]
 80182e8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80182ec:	4293      	cmp	r3, r2
 80182ee:	f200 8093 	bhi.w	8018418 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80182f2:	69fa      	ldr	r2, [r7, #28]
 80182f4:	6879      	ldr	r1, [r7, #4]
 80182f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80182f8:	f7ff fde2 	bl	8017ec0 <ip_reass_chain_frag_into_datagram_and_validate>
 80182fc:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80182fe:	697b      	ldr	r3, [r7, #20]
 8018300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018304:	f000 808a 	beq.w	801841c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018308:	4b49      	ldr	r3, [pc, #292]	; (8018430 <ip4_reass+0x29c>)
 801830a:	881a      	ldrh	r2, [r3, #0]
 801830c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801830e:	4413      	add	r3, r2
 8018310:	b29a      	uxth	r2, r3
 8018312:	4b47      	ldr	r3, [pc, #284]	; (8018430 <ip4_reass+0x29c>)
 8018314:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018316:	69fb      	ldr	r3, [r7, #28]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d00d      	beq.n	8018338 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801831c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801831e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018320:	4413      	add	r3, r2
 8018322:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018326:	8a7a      	ldrh	r2, [r7, #18]
 8018328:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801832c:	7f9b      	ldrb	r3, [r3, #30]
 801832e:	f043 0301 	orr.w	r3, r3, #1
 8018332:	b2da      	uxtb	r2, r3
 8018334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018336:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	2b01      	cmp	r3, #1
 801833c:	d168      	bne.n	8018410 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018340:	8b9b      	ldrh	r3, [r3, #28]
 8018342:	3314      	adds	r3, #20
 8018344:	b29a      	uxth	r2, r3
 8018346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018348:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801834c:	685b      	ldr	r3, [r3, #4]
 801834e:	685b      	ldr	r3, [r3, #4]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8018354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018356:	685b      	ldr	r3, [r3, #4]
 8018358:	685b      	ldr	r3, [r3, #4]
 801835a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801835e:	3308      	adds	r3, #8
 8018360:	2214      	movs	r2, #20
 8018362:	4619      	mov	r1, r3
 8018364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018366:	f001 f902 	bl	801956e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801836c:	8b9b      	ldrh	r3, [r3, #28]
 801836e:	4618      	mov	r0, r3
 8018370:	f7f5 fd24 	bl	800ddbc <lwip_htons>
 8018374:	4603      	mov	r3, r0
 8018376:	461a      	mov	r2, r3
 8018378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801837a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801837e:	2200      	movs	r2, #0
 8018380:	719a      	strb	r2, [r3, #6]
 8018382:	2200      	movs	r2, #0
 8018384:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018388:	2200      	movs	r2, #0
 801838a:	729a      	strb	r2, [r3, #10]
 801838c:	2200      	movs	r2, #0
 801838e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018396:	e00e      	b.n	80183b6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8018398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801839a:	685b      	ldr	r3, [r3, #4]
 801839c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801839e:	f06f 0113 	mvn.w	r1, #19
 80183a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80183a4:	f7f6 fe88 	bl	800f0b8 <pbuf_header>
      pbuf_cat(p, r);
 80183a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80183aa:	6878      	ldr	r0, [r7, #4]
 80183ac:	f7f6 ff82 	bl	800f2b4 <pbuf_cat>
      r = iprh->next_pbuf;
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80183b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d1ed      	bne.n	8018398 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80183bc:	4b1d      	ldr	r3, [pc, #116]	; (8018434 <ip4_reass+0x2a0>)
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d102      	bne.n	80183cc <ip4_reass+0x238>
      ipr_prev = NULL;
 80183c6:	2300      	movs	r3, #0
 80183c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80183ca:	e010      	b.n	80183ee <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80183cc:	4b19      	ldr	r3, [pc, #100]	; (8018434 <ip4_reass+0x2a0>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80183d2:	e007      	b.n	80183e4 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80183d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183da:	429a      	cmp	r2, r3
 80183dc:	d006      	beq.n	80183ec <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80183de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80183e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d1f4      	bne.n	80183d4 <ip4_reass+0x240>
 80183ea:	e000      	b.n	80183ee <ip4_reass+0x25a>
          break;
 80183ec:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80183ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80183f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183f2:	f7ff fd37 	bl	8017e64 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80183f6:	6878      	ldr	r0, [r7, #4]
 80183f8:	f7f6 ff1c 	bl	800f234 <pbuf_clen>
 80183fc:	4603      	mov	r3, r0
 80183fe:	461a      	mov	r2, r3
 8018400:	4b0b      	ldr	r3, [pc, #44]	; (8018430 <ip4_reass+0x29c>)
 8018402:	881b      	ldrh	r3, [r3, #0]
 8018404:	1a9b      	subs	r3, r3, r2
 8018406:	b29a      	uxth	r2, r3
 8018408:	4b09      	ldr	r3, [pc, #36]	; (8018430 <ip4_reass+0x29c>)
 801840a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	e00a      	b.n	8018426 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018410:	2300      	movs	r3, #0
 8018412:	e008      	b.n	8018426 <ip4_reass+0x292>
    goto nullreturn;
 8018414:	bf00      	nop
 8018416:	e002      	b.n	801841e <ip4_reass+0x28a>

nullreturn:
 8018418:	bf00      	nop
 801841a:	e000      	b.n	801841e <ip4_reass+0x28a>
    goto nullreturn;
 801841c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801841e:	6878      	ldr	r0, [r7, #4]
 8018420:	f7f6 fe6e 	bl	800f100 <pbuf_free>
  return NULL;
 8018424:	2300      	movs	r3, #0
}
 8018426:	4618      	mov	r0, r3
 8018428:	3738      	adds	r7, #56	; 0x38
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}
 801842e:	bf00      	nop
 8018430:	2000434c 	.word	0x2000434c
 8018434:	20004348 	.word	0x20004348

08018438 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801843c:	2005      	movs	r0, #5
 801843e:	f7f6 f8ab 	bl	800e598 <memp_malloc>
 8018442:	4603      	mov	r3, r0
}
 8018444:	4618      	mov	r0, r3
 8018446:	bd80      	pop	{r7, pc}

08018448 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b082      	sub	sp, #8
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d106      	bne.n	8018464 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018456:	4b07      	ldr	r3, [pc, #28]	; (8018474 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018458:	f240 22ae 	movw	r2, #686	; 0x2ae
 801845c:	4906      	ldr	r1, [pc, #24]	; (8018478 <ip_frag_free_pbuf_custom_ref+0x30>)
 801845e:	4807      	ldr	r0, [pc, #28]	; (801847c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018460:	f001 f940 	bl	80196e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018464:	6879      	ldr	r1, [r7, #4]
 8018466:	2005      	movs	r0, #5
 8018468:	f7f6 f8e8 	bl	800e63c <memp_free>
}
 801846c:	bf00      	nop
 801846e:	3708      	adds	r7, #8
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}
 8018474:	0801c8e4 	.word	0x0801c8e4
 8018478:	0801ca4c 	.word	0x0801ca4c
 801847c:	0801c92c 	.word	0x0801c92c

08018480 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b084      	sub	sp, #16
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d106      	bne.n	80184a0 <ipfrag_free_pbuf_custom+0x20>
 8018492:	4b11      	ldr	r3, [pc, #68]	; (80184d8 <ipfrag_free_pbuf_custom+0x58>)
 8018494:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8018498:	4910      	ldr	r1, [pc, #64]	; (80184dc <ipfrag_free_pbuf_custom+0x5c>)
 801849a:	4811      	ldr	r0, [pc, #68]	; (80184e0 <ipfrag_free_pbuf_custom+0x60>)
 801849c:	f001 f922 	bl	80196e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80184a0:	68fa      	ldr	r2, [r7, #12]
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d006      	beq.n	80184b6 <ipfrag_free_pbuf_custom+0x36>
 80184a8:	4b0b      	ldr	r3, [pc, #44]	; (80184d8 <ipfrag_free_pbuf_custom+0x58>)
 80184aa:	f240 22b9 	movw	r2, #697	; 0x2b9
 80184ae:	490d      	ldr	r1, [pc, #52]	; (80184e4 <ipfrag_free_pbuf_custom+0x64>)
 80184b0:	480b      	ldr	r0, [pc, #44]	; (80184e0 <ipfrag_free_pbuf_custom+0x60>)
 80184b2:	f001 f917 	bl	80196e4 <iprintf>
  if (pcr->original != NULL) {
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	695b      	ldr	r3, [r3, #20]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d004      	beq.n	80184c8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	695b      	ldr	r3, [r3, #20]
 80184c2:	4618      	mov	r0, r3
 80184c4:	f7f6 fe1c 	bl	800f100 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80184c8:	68f8      	ldr	r0, [r7, #12]
 80184ca:	f7ff ffbd 	bl	8018448 <ip_frag_free_pbuf_custom_ref>
}
 80184ce:	bf00      	nop
 80184d0:	3710      	adds	r7, #16
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
 80184d6:	bf00      	nop
 80184d8:	0801c8e4 	.word	0x0801c8e4
 80184dc:	0801ca58 	.word	0x0801ca58
 80184e0:	0801c92c 	.word	0x0801c92c
 80184e4:	0801ca64 	.word	0x0801ca64

080184e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b092      	sub	sp, #72	; 0x48
 80184ec:	af02      	add	r7, sp, #8
 80184ee:	60f8      	str	r0, [r7, #12]
 80184f0:	60b9      	str	r1, [r7, #8]
 80184f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80184f4:	2300      	movs	r3, #0
 80184f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80184f8:	68bb      	ldr	r3, [r7, #8]
 80184fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80184fc:	3b14      	subs	r3, #20
 80184fe:	2b00      	cmp	r3, #0
 8018500:	da00      	bge.n	8018504 <ip4_frag+0x1c>
 8018502:	3307      	adds	r3, #7
 8018504:	10db      	asrs	r3, r3, #3
 8018506:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018508:	2314      	movs	r3, #20
 801850a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8018512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018514:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8018516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	f003 030f 	and.w	r3, r3, #15
 801851e:	009b      	lsls	r3, r3, #2
 8018520:	2b14      	cmp	r3, #20
 8018522:	d009      	beq.n	8018538 <ip4_frag+0x50>
 8018524:	4b79      	ldr	r3, [pc, #484]	; (801870c <ip4_frag+0x224>)
 8018526:	f240 22e1 	movw	r2, #737	; 0x2e1
 801852a:	4979      	ldr	r1, [pc, #484]	; (8018710 <ip4_frag+0x228>)
 801852c:	4879      	ldr	r0, [pc, #484]	; (8018714 <ip4_frag+0x22c>)
 801852e:	f001 f8d9 	bl	80196e4 <iprintf>
 8018532:	f06f 0305 	mvn.w	r3, #5
 8018536:	e0e5      	b.n	8018704 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801853a:	88db      	ldrh	r3, [r3, #6]
 801853c:	b29b      	uxth	r3, r3
 801853e:	4618      	mov	r0, r3
 8018540:	f7f5 fc3c 	bl	800ddbc <lwip_htons>
 8018544:	4603      	mov	r3, r0
 8018546:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8018548:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801854a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801854e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8018550:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018556:	2b00      	cmp	r3, #0
 8018558:	d009      	beq.n	801856e <ip4_frag+0x86>
 801855a:	4b6c      	ldr	r3, [pc, #432]	; (801870c <ip4_frag+0x224>)
 801855c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8018560:	496d      	ldr	r1, [pc, #436]	; (8018718 <ip4_frag+0x230>)
 8018562:	486c      	ldr	r0, [pc, #432]	; (8018714 <ip4_frag+0x22c>)
 8018564:	f001 f8be 	bl	80196e4 <iprintf>
 8018568:	f06f 0305 	mvn.w	r3, #5
 801856c:	e0ca      	b.n	8018704 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	891b      	ldrh	r3, [r3, #8]
 8018572:	3b14      	subs	r3, #20
 8018574:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8018576:	e0bc      	b.n	80186f2 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8018578:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801857a:	00da      	lsls	r2, r3, #3
 801857c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801857e:	4293      	cmp	r3, r2
 8018580:	bfa8      	it	ge
 8018582:	4613      	movge	r3, r2
 8018584:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018586:	2200      	movs	r2, #0
 8018588:	2114      	movs	r1, #20
 801858a:	2002      	movs	r0, #2
 801858c:	f7f6 fa46 	bl	800ea1c <pbuf_alloc>
 8018590:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8018592:	6a3b      	ldr	r3, [r7, #32]
 8018594:	2b00      	cmp	r3, #0
 8018596:	f000 80b2 	beq.w	80186fe <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	895b      	ldrh	r3, [r3, #10]
 801859e:	2b13      	cmp	r3, #19
 80185a0:	d806      	bhi.n	80185b0 <ip4_frag+0xc8>
 80185a2:	4b5a      	ldr	r3, [pc, #360]	; (801870c <ip4_frag+0x224>)
 80185a4:	f240 3209 	movw	r2, #777	; 0x309
 80185a8:	495c      	ldr	r1, [pc, #368]	; (801871c <ip4_frag+0x234>)
 80185aa:	485a      	ldr	r0, [pc, #360]	; (8018714 <ip4_frag+0x22c>)
 80185ac:	f001 f89a 	bl	80196e4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80185b0:	6a3b      	ldr	r3, [r7, #32]
 80185b2:	685b      	ldr	r3, [r3, #4]
 80185b4:	2214      	movs	r2, #20
 80185b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80185b8:	4618      	mov	r0, r3
 80185ba:	f000 ffd8 	bl	801956e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80185be:	6a3b      	ldr	r3, [r7, #32]
 80185c0:	685b      	ldr	r3, [r3, #4]
 80185c2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80185c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80185c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80185c8:	e04f      	b.n	801866a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	895a      	ldrh	r2, [r3, #10]
 80185ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80185d0:	1ad3      	subs	r3, r2, r3
 80185d2:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80185d4:	8b7a      	ldrh	r2, [r7, #26]
 80185d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80185d8:	4293      	cmp	r3, r2
 80185da:	bf28      	it	cs
 80185dc:	4613      	movcs	r3, r2
 80185de:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80185e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d105      	bne.n	80185f2 <ip4_frag+0x10a>
        poff = 0;
 80185e6:	2300      	movs	r3, #0
 80185e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	60fb      	str	r3, [r7, #12]
        continue;
 80185f0:	e03b      	b.n	801866a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80185f2:	f7ff ff21 	bl	8018438 <ip_frag_alloc_pbuf_custom_ref>
 80185f6:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80185f8:	697b      	ldr	r3, [r7, #20]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d103      	bne.n	8018606 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80185fe:	6a38      	ldr	r0, [r7, #32]
 8018600:	f7f6 fd7e 	bl	800f100 <pbuf_free>
        goto memerr;
 8018604:	e07c      	b.n	8018700 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018606:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801860c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801860e:	4413      	add	r3, r2
 8018610:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8018612:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018614:	9201      	str	r2, [sp, #4]
 8018616:	9300      	str	r3, [sp, #0]
 8018618:	4603      	mov	r3, r0
 801861a:	2202      	movs	r2, #2
 801861c:	2004      	movs	r0, #4
 801861e:	f7f6 fb91 	bl	800ed44 <pbuf_alloced_custom>
 8018622:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8018624:	693b      	ldr	r3, [r7, #16]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d106      	bne.n	8018638 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801862a:	6978      	ldr	r0, [r7, #20]
 801862c:	f7ff ff0c 	bl	8018448 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018630:	6a38      	ldr	r0, [r7, #32]
 8018632:	f7f6 fd65 	bl	800f100 <pbuf_free>
        goto memerr;
 8018636:	e063      	b.n	8018700 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8018638:	68f8      	ldr	r0, [r7, #12]
 801863a:	f7f6 fe13 	bl	800f264 <pbuf_ref>
      pcr->original = p;
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	68fa      	ldr	r2, [r7, #12]
 8018642:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	4a36      	ldr	r2, [pc, #216]	; (8018720 <ip4_frag+0x238>)
 8018648:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801864a:	6939      	ldr	r1, [r7, #16]
 801864c:	6a38      	ldr	r0, [r7, #32]
 801864e:	f7f6 fe31 	bl	800f2b4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8018652:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8018654:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018656:	1ad3      	subs	r3, r2, r3
 8018658:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801865a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801865c:	2b00      	cmp	r3, #0
 801865e:	d004      	beq.n	801866a <ip4_frag+0x182>
        poff = 0;
 8018660:	2300      	movs	r3, #0
 8018662:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801866a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801866c:	2b00      	cmp	r3, #0
 801866e:	d1ac      	bne.n	80185ca <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8018670:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018672:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018674:	4413      	add	r3, r2
 8018676:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018678:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801867e:	3b14      	subs	r3, #20
 8018680:	429a      	cmp	r2, r3
 8018682:	bfd4      	ite	le
 8018684:	2301      	movle	r3, #1
 8018686:	2300      	movgt	r3, #0
 8018688:	b2db      	uxtb	r3, r3
 801868a:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801868c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801868e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018692:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8018694:	69fb      	ldr	r3, [r7, #28]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d103      	bne.n	80186a2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801869a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801869c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80186a0:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80186a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80186a4:	4618      	mov	r0, r3
 80186a6:	f7f5 fb89 	bl	800ddbc <lwip_htons>
 80186aa:	4603      	mov	r3, r0
 80186ac:	461a      	mov	r2, r3
 80186ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80186b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80186b4:	3314      	adds	r3, #20
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7f5 fb7f 	bl	800ddbc <lwip_htons>
 80186be:	4603      	mov	r3, r0
 80186c0:	461a      	mov	r2, r3
 80186c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80186c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c8:	2200      	movs	r2, #0
 80186ca:	729a      	strb	r2, [r3, #10]
 80186cc:	2200      	movs	r2, #0
 80186ce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	695b      	ldr	r3, [r3, #20]
 80186d4:	687a      	ldr	r2, [r7, #4]
 80186d6:	6a39      	ldr	r1, [r7, #32]
 80186d8:	68b8      	ldr	r0, [r7, #8]
 80186da:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80186dc:	6a38      	ldr	r0, [r7, #32]
 80186de:	f7f6 fd0f 	bl	800f100 <pbuf_free>
    left -= fragsize;
 80186e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80186e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80186e6:	1ad3      	subs	r3, r2, r3
 80186e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80186ea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80186ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80186ee:	4413      	add	r3, r2
 80186f0:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 80186f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	f47f af3f 	bne.w	8018578 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80186fa:	2300      	movs	r3, #0
 80186fc:	e002      	b.n	8018704 <ip4_frag+0x21c>
      goto memerr;
 80186fe:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018704:	4618      	mov	r0, r3
 8018706:	3740      	adds	r7, #64	; 0x40
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}
 801870c:	0801c8e4 	.word	0x0801c8e4
 8018710:	0801ca70 	.word	0x0801ca70
 8018714:	0801c92c 	.word	0x0801c92c
 8018718:	0801ca98 	.word	0x0801ca98
 801871c:	0801cab4 	.word	0x0801cab4
 8018720:	08018481 	.word	0x08018481

08018724 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b086      	sub	sp, #24
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
 801872c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801872e:	230e      	movs	r3, #14
 8018730:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	895b      	ldrh	r3, [r3, #10]
 8018736:	2b0e      	cmp	r3, #14
 8018738:	d977      	bls.n	801882a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	685b      	ldr	r3, [r3, #4]
 801873e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018740:	693b      	ldr	r3, [r7, #16]
 8018742:	7b1a      	ldrb	r2, [r3, #12]
 8018744:	7b5b      	ldrb	r3, [r3, #13]
 8018746:	021b      	lsls	r3, r3, #8
 8018748:	4313      	orrs	r3, r2
 801874a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801874c:	693b      	ldr	r3, [r7, #16]
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	f003 0301 	and.w	r3, r3, #1
 8018754:	2b00      	cmp	r3, #0
 8018756:	d023      	beq.n	80187a0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018758:	693b      	ldr	r3, [r7, #16]
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	2b01      	cmp	r3, #1
 801875e:	d10f      	bne.n	8018780 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018760:	693b      	ldr	r3, [r7, #16]
 8018762:	785b      	ldrb	r3, [r3, #1]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d11b      	bne.n	80187a0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018768:	693b      	ldr	r3, [r7, #16]
 801876a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801876c:	2b5e      	cmp	r3, #94	; 0x5e
 801876e:	d117      	bne.n	80187a0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	7b5b      	ldrb	r3, [r3, #13]
 8018774:	f043 0310 	orr.w	r3, r3, #16
 8018778:	b2da      	uxtb	r2, r3
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	735a      	strb	r2, [r3, #13]
 801877e:	e00f      	b.n	80187a0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018780:	693b      	ldr	r3, [r7, #16]
 8018782:	2206      	movs	r2, #6
 8018784:	4930      	ldr	r1, [pc, #192]	; (8018848 <ethernet_input+0x124>)
 8018786:	4618      	mov	r0, r3
 8018788:	f000 fee2 	bl	8019550 <memcmp>
 801878c:	4603      	mov	r3, r0
 801878e:	2b00      	cmp	r3, #0
 8018790:	d106      	bne.n	80187a0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	7b5b      	ldrb	r3, [r3, #13]
 8018796:	f043 0308 	orr.w	r3, r3, #8
 801879a:	b2da      	uxtb	r2, r3
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80187a0:	89fb      	ldrh	r3, [r7, #14]
 80187a2:	2b08      	cmp	r3, #8
 80187a4:	d003      	beq.n	80187ae <ethernet_input+0x8a>
 80187a6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80187aa:	d01e      	beq.n	80187ea <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80187ac:	e044      	b.n	8018838 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80187b4:	f003 0308 	and.w	r3, r3, #8
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d038      	beq.n	801882e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	895b      	ldrh	r3, [r3, #10]
 80187c0:	461a      	mov	r2, r3
 80187c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80187c6:	429a      	cmp	r2, r3
 80187c8:	db33      	blt.n	8018832 <ethernet_input+0x10e>
 80187ca:	8afb      	ldrh	r3, [r7, #22]
 80187cc:	425b      	negs	r3, r3
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	b21b      	sxth	r3, r3
 80187d2:	4619      	mov	r1, r3
 80187d4:	6878      	ldr	r0, [r7, #4]
 80187d6:	f7f6 fc6f 	bl	800f0b8 <pbuf_header>
 80187da:	4603      	mov	r3, r0
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d128      	bne.n	8018832 <ethernet_input+0x10e>
        ip4_input(p, netif);
 80187e0:	6839      	ldr	r1, [r7, #0]
 80187e2:	6878      	ldr	r0, [r7, #4]
 80187e4:	f7fe ff62 	bl	80176ac <ip4_input>
      break;
 80187e8:	e01d      	b.n	8018826 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80187ea:	683b      	ldr	r3, [r7, #0]
 80187ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80187f0:	f003 0308 	and.w	r3, r3, #8
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d01e      	beq.n	8018836 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	895b      	ldrh	r3, [r3, #10]
 80187fc:	461a      	mov	r2, r3
 80187fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018802:	429a      	cmp	r2, r3
 8018804:	db15      	blt.n	8018832 <ethernet_input+0x10e>
 8018806:	8afb      	ldrh	r3, [r7, #22]
 8018808:	425b      	negs	r3, r3
 801880a:	b29b      	uxth	r3, r3
 801880c:	b21b      	sxth	r3, r3
 801880e:	4619      	mov	r1, r3
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f7f6 fc51 	bl	800f0b8 <pbuf_header>
 8018816:	4603      	mov	r3, r0
 8018818:	2b00      	cmp	r3, #0
 801881a:	d10a      	bne.n	8018832 <ethernet_input+0x10e>
        etharp_input(p, netif);
 801881c:	6839      	ldr	r1, [r7, #0]
 801881e:	6878      	ldr	r0, [r7, #4]
 8018820:	f7fe f92c 	bl	8016a7c <etharp_input>
      break;
 8018824:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018826:	2300      	movs	r3, #0
 8018828:	e00a      	b.n	8018840 <ethernet_input+0x11c>
    goto free_and_return;
 801882a:	bf00      	nop
 801882c:	e004      	b.n	8018838 <ethernet_input+0x114>
        goto free_and_return;
 801882e:	bf00      	nop
 8018830:	e002      	b.n	8018838 <ethernet_input+0x114>

free_and_return:
 8018832:	bf00      	nop
 8018834:	e000      	b.n	8018838 <ethernet_input+0x114>
        goto free_and_return;
 8018836:	bf00      	nop
  pbuf_free(p);
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f7f6 fc61 	bl	800f100 <pbuf_free>
  return ERR_OK;
 801883e:	2300      	movs	r3, #0
}
 8018840:	4618      	mov	r0, r3
 8018842:	3718      	adds	r7, #24
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}
 8018848:	0801ccf0 	.word	0x0801ccf0

0801884c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b086      	sub	sp, #24
 8018850:	af00      	add	r7, sp, #0
 8018852:	60f8      	str	r0, [r7, #12]
 8018854:	60b9      	str	r1, [r7, #8]
 8018856:	607a      	str	r2, [r7, #4]
 8018858:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801885a:	8c3b      	ldrh	r3, [r7, #32]
 801885c:	4618      	mov	r0, r3
 801885e:	f7f5 faad 	bl	800ddbc <lwip_htons>
 8018862:	4603      	mov	r3, r0
 8018864:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8018866:	210e      	movs	r1, #14
 8018868:	68b8      	ldr	r0, [r7, #8]
 801886a:	f7f6 fc25 	bl	800f0b8 <pbuf_header>
 801886e:	4603      	mov	r3, r0
 8018870:	2b00      	cmp	r3, #0
 8018872:	d125      	bne.n	80188c0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8018874:	68bb      	ldr	r3, [r7, #8]
 8018876:	685b      	ldr	r3, [r3, #4]
 8018878:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801887a:	693b      	ldr	r3, [r7, #16]
 801887c:	8afa      	ldrh	r2, [r7, #22]
 801887e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8018880:	693b      	ldr	r3, [r7, #16]
 8018882:	2206      	movs	r2, #6
 8018884:	6839      	ldr	r1, [r7, #0]
 8018886:	4618      	mov	r0, r3
 8018888:	f000 fe71 	bl	801956e <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 801888c:	693b      	ldr	r3, [r7, #16]
 801888e:	3306      	adds	r3, #6
 8018890:	2206      	movs	r2, #6
 8018892:	6879      	ldr	r1, [r7, #4]
 8018894:	4618      	mov	r0, r3
 8018896:	f000 fe6a 	bl	801956e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188a0:	2b06      	cmp	r3, #6
 80188a2:	d006      	beq.n	80188b2 <ethernet_output+0x66>
 80188a4:	4b0a      	ldr	r3, [pc, #40]	; (80188d0 <ethernet_output+0x84>)
 80188a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80188aa:	490a      	ldr	r1, [pc, #40]	; (80188d4 <ethernet_output+0x88>)
 80188ac:	480a      	ldr	r0, [pc, #40]	; (80188d8 <ethernet_output+0x8c>)
 80188ae:	f000 ff19 	bl	80196e4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	699b      	ldr	r3, [r3, #24]
 80188b6:	68b9      	ldr	r1, [r7, #8]
 80188b8:	68f8      	ldr	r0, [r7, #12]
 80188ba:	4798      	blx	r3
 80188bc:	4603      	mov	r3, r0
 80188be:	e002      	b.n	80188c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80188c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80188c2:	f06f 0301 	mvn.w	r3, #1
}
 80188c6:	4618      	mov	r0, r3
 80188c8:	3718      	adds	r7, #24
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}
 80188ce:	bf00      	nop
 80188d0:	0801cad4 	.word	0x0801cad4
 80188d4:	0801cb0c 	.word	0x0801cb0c
 80188d8:	0801cb40 	.word	0x0801cb40

080188dc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b086      	sub	sp, #24
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
 80188e4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80188e6:	683b      	ldr	r3, [r7, #0]
 80188e8:	60bb      	str	r3, [r7, #8]
 80188ea:	2304      	movs	r3, #4
 80188ec:	60fb      	str	r3, [r7, #12]
 80188ee:	2300      	movs	r3, #0
 80188f0:	613b      	str	r3, [r7, #16]
 80188f2:	2300      	movs	r3, #0
 80188f4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80188f6:	f107 0308 	add.w	r3, r7, #8
 80188fa:	2100      	movs	r1, #0
 80188fc:	4618      	mov	r0, r3
 80188fe:	f7f2 fc15 	bl	800b12c <osMessageCreate>
 8018902:	4602      	mov	r2, r0
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d102      	bne.n	8018916 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018914:	e000      	b.n	8018918 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018916:	2300      	movs	r3, #0
}
 8018918:	4618      	mov	r0, r3
 801891a:	3718      	adds	r7, #24
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}

08018920 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b082      	sub	sp, #8
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801892a:	bf00      	nop
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	6839      	ldr	r1, [r7, #0]
 8018932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018936:	4618      	mov	r0, r3
 8018938:	f7f2 fc22 	bl	800b180 <osMessagePut>
 801893c:	4603      	mov	r3, r0
 801893e:	2b00      	cmp	r3, #0
 8018940:	d1f4      	bne.n	801892c <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8018942:	bf00      	nop
 8018944:	3708      	adds	r7, #8
 8018946:	46bd      	mov	sp, r7
 8018948:	bd80      	pop	{r7, pc}

0801894a <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801894a:	b580      	push	{r7, lr}
 801894c:	b084      	sub	sp, #16
 801894e:	af00      	add	r7, sp, #0
 8018950:	6078      	str	r0, [r7, #4]
 8018952:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	6839      	ldr	r1, [r7, #0]
 801895a:	2200      	movs	r2, #0
 801895c:	4618      	mov	r0, r3
 801895e:	f7f2 fc0f 	bl	800b180 <osMessagePut>
 8018962:	4603      	mov	r3, r0
 8018964:	2b00      	cmp	r3, #0
 8018966:	d102      	bne.n	801896e <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018968:	2300      	movs	r3, #0
 801896a:	73fb      	strb	r3, [r7, #15]
 801896c:	e001      	b.n	8018972 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801896e:	23ff      	movs	r3, #255	; 0xff
 8018970:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018976:	4618      	mov	r0, r3
 8018978:	3710      	adds	r7, #16
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}

0801897e <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801897e:	b580      	push	{r7, lr}
 8018980:	b08c      	sub	sp, #48	; 0x30
 8018982:	af00      	add	r7, sp, #0
 8018984:	61f8      	str	r0, [r7, #28]
 8018986:	61b9      	str	r1, [r7, #24]
 8018988:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801898a:	f7f2 fa0a 	bl	800ada2 <osKernelSysTick>
 801898e:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018990:	697b      	ldr	r3, [r7, #20]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d017      	beq.n	80189c6 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018996:	69fb      	ldr	r3, [r7, #28]
 8018998:	6819      	ldr	r1, [r3, #0]
 801899a:	f107 0320 	add.w	r3, r7, #32
 801899e:	697a      	ldr	r2, [r7, #20]
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7f2 fc2d 	bl	800b200 <osMessageGet>

    if(event.status == osEventMessage)
 80189a6:	6a3b      	ldr	r3, [r7, #32]
 80189a8:	2b10      	cmp	r3, #16
 80189aa:	d109      	bne.n	80189c0 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80189ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ae:	461a      	mov	r2, r3
 80189b0:	69bb      	ldr	r3, [r7, #24]
 80189b2:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80189b4:	f7f2 f9f5 	bl	800ada2 <osKernelSysTick>
 80189b8:	4602      	mov	r2, r0
 80189ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189bc:	1ad3      	subs	r3, r2, r3
 80189be:	e019      	b.n	80189f4 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80189c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80189c4:	e016      	b.n	80189f4 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80189c6:	69fb      	ldr	r3, [r7, #28]
 80189c8:	6819      	ldr	r1, [r3, #0]
 80189ca:	463b      	mov	r3, r7
 80189cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189d0:	4618      	mov	r0, r3
 80189d2:	f7f2 fc15 	bl	800b200 <osMessageGet>
 80189d6:	f107 0320 	add.w	r3, r7, #32
 80189da:	463a      	mov	r2, r7
 80189dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80189de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80189e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e4:	461a      	mov	r2, r3
 80189e6:	69bb      	ldr	r3, [r7, #24]
 80189e8:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80189ea:	f7f2 f9da 	bl	800ada2 <osKernelSysTick>
 80189ee:	4602      	mov	r2, r0
 80189f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189f2:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3730      	adds	r7, #48	; 0x30
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}

080189fc <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80189fc:	b480      	push	{r7}
 80189fe:	b083      	sub	sp, #12
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d101      	bne.n	8018a10 <sys_mbox_valid+0x14>
    return 0;
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	e000      	b.n	8018a12 <sys_mbox_valid+0x16>
  else
    return 1;
 8018a10:	2301      	movs	r3, #1
}
 8018a12:	4618      	mov	r0, r3
 8018a14:	370c      	adds	r7, #12
 8018a16:	46bd      	mov	sp, r7
 8018a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1c:	4770      	bx	lr
	...

08018a20 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018a24:	4803      	ldr	r0, [pc, #12]	; (8018a34 <sys_init+0x14>)
 8018a26:	f7f2 fa2c 	bl	800ae82 <osMutexCreate>
 8018a2a:	4602      	mov	r2, r0
 8018a2c:	4b02      	ldr	r3, [pc, #8]	; (8018a38 <sys_init+0x18>)
 8018a2e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018a30:	bf00      	nop
 8018a32:	bd80      	pop	{r7, pc}
 8018a34:	0801cd00 	.word	0x0801cd00
 8018a38:	2000ab78 	.word	0x2000ab78

08018a3c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b084      	sub	sp, #16
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018a44:	2300      	movs	r3, #0
 8018a46:	60bb      	str	r3, [r7, #8]
 8018a48:	2300      	movs	r3, #0
 8018a4a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018a4c:	f107 0308 	add.w	r3, r7, #8
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7f2 fa16 	bl	800ae82 <osMutexCreate>
 8018a56:	4602      	mov	r2, r0
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d102      	bne.n	8018a6a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a68:	e000      	b.n	8018a6c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018a6a:	2300      	movs	r3, #0
}
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	3710      	adds	r7, #16
 8018a70:	46bd      	mov	sp, r7
 8018a72:	bd80      	pop	{r7, pc}

08018a74 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b082      	sub	sp, #8
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7f2 fa15 	bl	800aeb4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018a8a:	bf00      	nop
 8018a8c:	3708      	adds	r7, #8
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}

08018a92 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018a92:	b580      	push	{r7, lr}
 8018a94:	b082      	sub	sp, #8
 8018a96:	af00      	add	r7, sp, #0
 8018a98:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f7f2 fa56 	bl	800af50 <osMutexRelease>
}
 8018aa4:	bf00      	nop
 8018aa6:	3708      	adds	r7, #8
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	bd80      	pop	{r7, pc}

08018aac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b08c      	sub	sp, #48	; 0x30
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	60f8      	str	r0, [r7, #12]
 8018ab4:	60b9      	str	r1, [r7, #8]
 8018ab6:	607a      	str	r2, [r7, #4]
 8018ab8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018aba:	f107 0314 	add.w	r3, r7, #20
 8018abe:	2200      	movs	r2, #0
 8018ac0:	601a      	str	r2, [r3, #0]
 8018ac2:	605a      	str	r2, [r3, #4]
 8018ac4:	609a      	str	r2, [r3, #8]
 8018ac6:	60da      	str	r2, [r3, #12]
 8018ac8:	611a      	str	r2, [r3, #16]
 8018aca:	615a      	str	r2, [r3, #20]
 8018acc:	619a      	str	r2, [r3, #24]
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	617b      	str	r3, [r7, #20]
 8018ad2:	68bb      	ldr	r3, [r7, #8]
 8018ad4:	61bb      	str	r3, [r7, #24]
 8018ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ad8:	b21b      	sxth	r3, r3
 8018ada:	83bb      	strh	r3, [r7, #28]
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018ae0:	f107 0314 	add.w	r3, r7, #20
 8018ae4:	6879      	ldr	r1, [r7, #4]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f7f2 f96b 	bl	800adc2 <osThreadCreate>
 8018aec:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018aee:	4618      	mov	r0, r3
 8018af0:	3730      	adds	r7, #48	; 0x30
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}
	...

08018af8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018afc:	4b04      	ldr	r3, [pc, #16]	; (8018b10 <sys_arch_protect+0x18>)
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018b04:	4618      	mov	r0, r3
 8018b06:	f7f2 f9d5 	bl	800aeb4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018b0a:	2301      	movs	r3, #1
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	bd80      	pop	{r7, pc}
 8018b10:	2000ab78 	.word	0x2000ab78

08018b14 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b082      	sub	sp, #8
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018b1c:	4b04      	ldr	r3, [pc, #16]	; (8018b30 <sys_arch_unprotect+0x1c>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7f2 fa15 	bl	800af50 <osMutexRelease>
}
 8018b26:	bf00      	nop
 8018b28:	3708      	adds	r7, #8
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}
 8018b2e:	bf00      	nop
 8018b30:	2000ab78 	.word	0x2000ab78

08018b34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018b38:	2200      	movs	r2, #0
 8018b3a:	4912      	ldr	r1, [pc, #72]	; (8018b84 <MX_USB_DEVICE_Init+0x50>)
 8018b3c:	4812      	ldr	r0, [pc, #72]	; (8018b88 <MX_USB_DEVICE_Init+0x54>)
 8018b3e:	f7f1 f8a4 	bl	8009c8a <USBD_Init>
 8018b42:	4603      	mov	r3, r0
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d001      	beq.n	8018b4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018b48:	f7e8 fdb8 	bl	80016bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018b4c:	490f      	ldr	r1, [pc, #60]	; (8018b8c <MX_USB_DEVICE_Init+0x58>)
 8018b4e:	480e      	ldr	r0, [pc, #56]	; (8018b88 <MX_USB_DEVICE_Init+0x54>)
 8018b50:	f7f1 f8c6 	bl	8009ce0 <USBD_RegisterClass>
 8018b54:	4603      	mov	r3, r0
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d001      	beq.n	8018b5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018b5a:	f7e8 fdaf 	bl	80016bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018b5e:	490c      	ldr	r1, [pc, #48]	; (8018b90 <MX_USB_DEVICE_Init+0x5c>)
 8018b60:	4809      	ldr	r0, [pc, #36]	; (8018b88 <MX_USB_DEVICE_Init+0x54>)
 8018b62:	f7f1 f823 	bl	8009bac <USBD_CDC_RegisterInterface>
 8018b66:	4603      	mov	r3, r0
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d001      	beq.n	8018b70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018b6c:	f7e8 fda6 	bl	80016bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018b70:	4805      	ldr	r0, [pc, #20]	; (8018b88 <MX_USB_DEVICE_Init+0x54>)
 8018b72:	f7f1 f8cf 	bl	8009d14 <USBD_Start>
 8018b76:	4603      	mov	r3, r0
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d001      	beq.n	8018b80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018b7c:	f7e8 fd9e 	bl	80016bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018b80:	bf00      	nop
 8018b82:	bd80      	pop	{r7, pc}
 8018b84:	20000138 	.word	0x20000138
 8018b88:	2000ab7c 	.word	0x2000ab7c
 8018b8c:	20000014 	.word	0x20000014
 8018b90:	20000128 	.word	0x20000128

08018b94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018b98:	2200      	movs	r2, #0
 8018b9a:	4905      	ldr	r1, [pc, #20]	; (8018bb0 <CDC_Init_FS+0x1c>)
 8018b9c:	4805      	ldr	r0, [pc, #20]	; (8018bb4 <CDC_Init_FS+0x20>)
 8018b9e:	f7f1 f81c 	bl	8009bda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018ba2:	4905      	ldr	r1, [pc, #20]	; (8018bb8 <CDC_Init_FS+0x24>)
 8018ba4:	4803      	ldr	r0, [pc, #12]	; (8018bb4 <CDC_Init_FS+0x20>)
 8018ba6:	f7f1 f832 	bl	8009c0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018baa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	bd80      	pop	{r7, pc}
 8018bb0:	2000b618 	.word	0x2000b618
 8018bb4:	2000ab7c 	.word	0x2000ab7c
 8018bb8:	2000ae18 	.word	0x2000ae18

08018bbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018bbc:	b480      	push	{r7}
 8018bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018bc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	46bd      	mov	sp, r7
 8018bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bca:	4770      	bx	lr

08018bcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018bcc:	b480      	push	{r7}
 8018bce:	b083      	sub	sp, #12
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	6039      	str	r1, [r7, #0]
 8018bd6:	71fb      	strb	r3, [r7, #7]
 8018bd8:	4613      	mov	r3, r2
 8018bda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018bdc:	79fb      	ldrb	r3, [r7, #7]
 8018bde:	2b23      	cmp	r3, #35	; 0x23
 8018be0:	d84a      	bhi.n	8018c78 <CDC_Control_FS+0xac>
 8018be2:	a201      	add	r2, pc, #4	; (adr r2, 8018be8 <CDC_Control_FS+0x1c>)
 8018be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018be8:	08018c79 	.word	0x08018c79
 8018bec:	08018c79 	.word	0x08018c79
 8018bf0:	08018c79 	.word	0x08018c79
 8018bf4:	08018c79 	.word	0x08018c79
 8018bf8:	08018c79 	.word	0x08018c79
 8018bfc:	08018c79 	.word	0x08018c79
 8018c00:	08018c79 	.word	0x08018c79
 8018c04:	08018c79 	.word	0x08018c79
 8018c08:	08018c79 	.word	0x08018c79
 8018c0c:	08018c79 	.word	0x08018c79
 8018c10:	08018c79 	.word	0x08018c79
 8018c14:	08018c79 	.word	0x08018c79
 8018c18:	08018c79 	.word	0x08018c79
 8018c1c:	08018c79 	.word	0x08018c79
 8018c20:	08018c79 	.word	0x08018c79
 8018c24:	08018c79 	.word	0x08018c79
 8018c28:	08018c79 	.word	0x08018c79
 8018c2c:	08018c79 	.word	0x08018c79
 8018c30:	08018c79 	.word	0x08018c79
 8018c34:	08018c79 	.word	0x08018c79
 8018c38:	08018c79 	.word	0x08018c79
 8018c3c:	08018c79 	.word	0x08018c79
 8018c40:	08018c79 	.word	0x08018c79
 8018c44:	08018c79 	.word	0x08018c79
 8018c48:	08018c79 	.word	0x08018c79
 8018c4c:	08018c79 	.word	0x08018c79
 8018c50:	08018c79 	.word	0x08018c79
 8018c54:	08018c79 	.word	0x08018c79
 8018c58:	08018c79 	.word	0x08018c79
 8018c5c:	08018c79 	.word	0x08018c79
 8018c60:	08018c79 	.word	0x08018c79
 8018c64:	08018c79 	.word	0x08018c79
 8018c68:	08018c79 	.word	0x08018c79
 8018c6c:	08018c79 	.word	0x08018c79
 8018c70:	08018c79 	.word	0x08018c79
 8018c74:	08018c79 	.word	0x08018c79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018c78:	bf00      	nop
  }

  return (USBD_OK);
 8018c7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	370c      	adds	r7, #12
 8018c80:	46bd      	mov	sp, r7
 8018c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c86:	4770      	bx	lr

08018c88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
 8018c90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018c92:	6879      	ldr	r1, [r7, #4]
 8018c94:	4805      	ldr	r0, [pc, #20]	; (8018cac <CDC_Receive_FS+0x24>)
 8018c96:	f7f0 ffba 	bl	8009c0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018c9a:	4804      	ldr	r0, [pc, #16]	; (8018cac <CDC_Receive_FS+0x24>)
 8018c9c:	f7f0 ffcb 	bl	8009c36 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018ca0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	3708      	adds	r7, #8
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}
 8018caa:	bf00      	nop
 8018cac:	2000ab7c 	.word	0x2000ab7c

08018cb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cb0:	b480      	push	{r7}
 8018cb2:	b083      	sub	sp, #12
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	4603      	mov	r3, r0
 8018cb8:	6039      	str	r1, [r7, #0]
 8018cba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	2212      	movs	r2, #18
 8018cc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018cc2:	4b03      	ldr	r3, [pc, #12]	; (8018cd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	370c      	adds	r7, #12
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cce:	4770      	bx	lr
 8018cd0:	20000154 	.word	0x20000154

08018cd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cd4:	b480      	push	{r7}
 8018cd6:	b083      	sub	sp, #12
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	4603      	mov	r3, r0
 8018cdc:	6039      	str	r1, [r7, #0]
 8018cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	2204      	movs	r2, #4
 8018ce4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018ce6:	4b03      	ldr	r3, [pc, #12]	; (8018cf4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018ce8:	4618      	mov	r0, r3
 8018cea:	370c      	adds	r7, #12
 8018cec:	46bd      	mov	sp, r7
 8018cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf2:	4770      	bx	lr
 8018cf4:	20000168 	.word	0x20000168

08018cf8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b082      	sub	sp, #8
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	4603      	mov	r3, r0
 8018d00:	6039      	str	r1, [r7, #0]
 8018d02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018d04:	79fb      	ldrb	r3, [r7, #7]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d105      	bne.n	8018d16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018d0a:	683a      	ldr	r2, [r7, #0]
 8018d0c:	4907      	ldr	r1, [pc, #28]	; (8018d2c <USBD_FS_ProductStrDescriptor+0x34>)
 8018d0e:	4808      	ldr	r0, [pc, #32]	; (8018d30 <USBD_FS_ProductStrDescriptor+0x38>)
 8018d10:	f7f1 ff38 	bl	800ab84 <USBD_GetString>
 8018d14:	e004      	b.n	8018d20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018d16:	683a      	ldr	r2, [r7, #0]
 8018d18:	4904      	ldr	r1, [pc, #16]	; (8018d2c <USBD_FS_ProductStrDescriptor+0x34>)
 8018d1a:	4805      	ldr	r0, [pc, #20]	; (8018d30 <USBD_FS_ProductStrDescriptor+0x38>)
 8018d1c:	f7f1 ff32 	bl	800ab84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d20:	4b02      	ldr	r3, [pc, #8]	; (8018d2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	3708      	adds	r7, #8
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}
 8018d2a:	bf00      	nop
 8018d2c:	2000be18 	.word	0x2000be18
 8018d30:	0801cb68 	.word	0x0801cb68

08018d34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b082      	sub	sp, #8
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	6039      	str	r1, [r7, #0]
 8018d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018d40:	683a      	ldr	r2, [r7, #0]
 8018d42:	4904      	ldr	r1, [pc, #16]	; (8018d54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018d44:	4804      	ldr	r0, [pc, #16]	; (8018d58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018d46:	f7f1 ff1d 	bl	800ab84 <USBD_GetString>
  return USBD_StrDesc;
 8018d4a:	4b02      	ldr	r3, [pc, #8]	; (8018d54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	3708      	adds	r7, #8
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd80      	pop	{r7, pc}
 8018d54:	2000be18 	.word	0x2000be18
 8018d58:	0801cb80 	.word	0x0801cb80

08018d5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	4603      	mov	r3, r0
 8018d64:	6039      	str	r1, [r7, #0]
 8018d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	221a      	movs	r2, #26
 8018d6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018d6e:	f000 f843 	bl	8018df8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018d72:	4b02      	ldr	r3, [pc, #8]	; (8018d7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018d74:	4618      	mov	r0, r3
 8018d76:	3708      	adds	r7, #8
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	bd80      	pop	{r7, pc}
 8018d7c:	2000016c 	.word	0x2000016c

08018d80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b082      	sub	sp, #8
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	4603      	mov	r3, r0
 8018d88:	6039      	str	r1, [r7, #0]
 8018d8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018d8c:	79fb      	ldrb	r3, [r7, #7]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d105      	bne.n	8018d9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d92:	683a      	ldr	r2, [r7, #0]
 8018d94:	4907      	ldr	r1, [pc, #28]	; (8018db4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d96:	4808      	ldr	r0, [pc, #32]	; (8018db8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018d98:	f7f1 fef4 	bl	800ab84 <USBD_GetString>
 8018d9c:	e004      	b.n	8018da8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d9e:	683a      	ldr	r2, [r7, #0]
 8018da0:	4904      	ldr	r1, [pc, #16]	; (8018db4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018da2:	4805      	ldr	r0, [pc, #20]	; (8018db8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018da4:	f7f1 feee 	bl	800ab84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018da8:	4b02      	ldr	r3, [pc, #8]	; (8018db4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018daa:	4618      	mov	r0, r3
 8018dac:	3708      	adds	r7, #8
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}
 8018db2:	bf00      	nop
 8018db4:	2000be18 	.word	0x2000be18
 8018db8:	0801cb94 	.word	0x0801cb94

08018dbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b082      	sub	sp, #8
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	6039      	str	r1, [r7, #0]
 8018dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018dc8:	79fb      	ldrb	r3, [r7, #7]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d105      	bne.n	8018dda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018dce:	683a      	ldr	r2, [r7, #0]
 8018dd0:	4907      	ldr	r1, [pc, #28]	; (8018df0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018dd2:	4808      	ldr	r0, [pc, #32]	; (8018df4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018dd4:	f7f1 fed6 	bl	800ab84 <USBD_GetString>
 8018dd8:	e004      	b.n	8018de4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018dda:	683a      	ldr	r2, [r7, #0]
 8018ddc:	4904      	ldr	r1, [pc, #16]	; (8018df0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018dde:	4805      	ldr	r0, [pc, #20]	; (8018df4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018de0:	f7f1 fed0 	bl	800ab84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018de4:	4b02      	ldr	r3, [pc, #8]	; (8018df0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018de6:	4618      	mov	r0, r3
 8018de8:	3708      	adds	r7, #8
 8018dea:	46bd      	mov	sp, r7
 8018dec:	bd80      	pop	{r7, pc}
 8018dee:	bf00      	nop
 8018df0:	2000be18 	.word	0x2000be18
 8018df4:	0801cba0 	.word	0x0801cba0

08018df8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b084      	sub	sp, #16
 8018dfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018dfe:	4b0f      	ldr	r3, [pc, #60]	; (8018e3c <Get_SerialNum+0x44>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018e04:	4b0e      	ldr	r3, [pc, #56]	; (8018e40 <Get_SerialNum+0x48>)
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018e0a:	4b0e      	ldr	r3, [pc, #56]	; (8018e44 <Get_SerialNum+0x4c>)
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018e10:	68fa      	ldr	r2, [r7, #12]
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	4413      	add	r3, r2
 8018e16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d009      	beq.n	8018e32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018e1e:	2208      	movs	r2, #8
 8018e20:	4909      	ldr	r1, [pc, #36]	; (8018e48 <Get_SerialNum+0x50>)
 8018e22:	68f8      	ldr	r0, [r7, #12]
 8018e24:	f000 f814 	bl	8018e50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018e28:	2204      	movs	r2, #4
 8018e2a:	4908      	ldr	r1, [pc, #32]	; (8018e4c <Get_SerialNum+0x54>)
 8018e2c:	68b8      	ldr	r0, [r7, #8]
 8018e2e:	f000 f80f 	bl	8018e50 <IntToUnicode>
  }
}
 8018e32:	bf00      	nop
 8018e34:	3710      	adds	r7, #16
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}
 8018e3a:	bf00      	nop
 8018e3c:	1fff7a10 	.word	0x1fff7a10
 8018e40:	1fff7a14 	.word	0x1fff7a14
 8018e44:	1fff7a18 	.word	0x1fff7a18
 8018e48:	2000016e 	.word	0x2000016e
 8018e4c:	2000017e 	.word	0x2000017e

08018e50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018e50:	b480      	push	{r7}
 8018e52:	b087      	sub	sp, #28
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	60f8      	str	r0, [r7, #12]
 8018e58:	60b9      	str	r1, [r7, #8]
 8018e5a:	4613      	mov	r3, r2
 8018e5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018e62:	2300      	movs	r3, #0
 8018e64:	75fb      	strb	r3, [r7, #23]
 8018e66:	e027      	b.n	8018eb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	0f1b      	lsrs	r3, r3, #28
 8018e6c:	2b09      	cmp	r3, #9
 8018e6e:	d80b      	bhi.n	8018e88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	0f1b      	lsrs	r3, r3, #28
 8018e74:	b2da      	uxtb	r2, r3
 8018e76:	7dfb      	ldrb	r3, [r7, #23]
 8018e78:	005b      	lsls	r3, r3, #1
 8018e7a:	4619      	mov	r1, r3
 8018e7c:	68bb      	ldr	r3, [r7, #8]
 8018e7e:	440b      	add	r3, r1
 8018e80:	3230      	adds	r2, #48	; 0x30
 8018e82:	b2d2      	uxtb	r2, r2
 8018e84:	701a      	strb	r2, [r3, #0]
 8018e86:	e00a      	b.n	8018e9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	0f1b      	lsrs	r3, r3, #28
 8018e8c:	b2da      	uxtb	r2, r3
 8018e8e:	7dfb      	ldrb	r3, [r7, #23]
 8018e90:	005b      	lsls	r3, r3, #1
 8018e92:	4619      	mov	r1, r3
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	440b      	add	r3, r1
 8018e98:	3237      	adds	r2, #55	; 0x37
 8018e9a:	b2d2      	uxtb	r2, r2
 8018e9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	011b      	lsls	r3, r3, #4
 8018ea2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018ea4:	7dfb      	ldrb	r3, [r7, #23]
 8018ea6:	005b      	lsls	r3, r3, #1
 8018ea8:	3301      	adds	r3, #1
 8018eaa:	68ba      	ldr	r2, [r7, #8]
 8018eac:	4413      	add	r3, r2
 8018eae:	2200      	movs	r2, #0
 8018eb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018eb2:	7dfb      	ldrb	r3, [r7, #23]
 8018eb4:	3301      	adds	r3, #1
 8018eb6:	75fb      	strb	r3, [r7, #23]
 8018eb8:	7dfa      	ldrb	r2, [r7, #23]
 8018eba:	79fb      	ldrb	r3, [r7, #7]
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d3d3      	bcc.n	8018e68 <IntToUnicode+0x18>
  }
}
 8018ec0:	bf00      	nop
 8018ec2:	371c      	adds	r7, #28
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eca:	4770      	bx	lr

08018ecc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b08a      	sub	sp, #40	; 0x28
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ed4:	f107 0314 	add.w	r3, r7, #20
 8018ed8:	2200      	movs	r2, #0
 8018eda:	601a      	str	r2, [r3, #0]
 8018edc:	605a      	str	r2, [r3, #4]
 8018ede:	609a      	str	r2, [r3, #8]
 8018ee0:	60da      	str	r2, [r3, #12]
 8018ee2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018eec:	d147      	bne.n	8018f7e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018eee:	2300      	movs	r3, #0
 8018ef0:	613b      	str	r3, [r7, #16]
 8018ef2:	4b25      	ldr	r3, [pc, #148]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ef6:	4a24      	ldr	r2, [pc, #144]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018ef8:	f043 0301 	orr.w	r3, r3, #1
 8018efc:	6313      	str	r3, [r2, #48]	; 0x30
 8018efe:	4b22      	ldr	r3, [pc, #136]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f02:	f003 0301 	and.w	r3, r3, #1
 8018f06:	613b      	str	r3, [r7, #16]
 8018f08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8018f0a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8018f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f10:	2302      	movs	r3, #2
 8018f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f14:	2300      	movs	r3, #0
 8018f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f18:	2303      	movs	r3, #3
 8018f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018f1c:	230a      	movs	r3, #10
 8018f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f20:	f107 0314 	add.w	r3, r7, #20
 8018f24:	4619      	mov	r1, r3
 8018f26:	4819      	ldr	r0, [pc, #100]	; (8018f8c <HAL_PCD_MspInit+0xc0>)
 8018f28:	f7ea fb60 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8018f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018f32:	2300      	movs	r3, #0
 8018f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f36:	2300      	movs	r3, #0
 8018f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8018f3a:	f107 0314 	add.w	r3, r7, #20
 8018f3e:	4619      	mov	r1, r3
 8018f40:	4812      	ldr	r0, [pc, #72]	; (8018f8c <HAL_PCD_MspInit+0xc0>)
 8018f42:	f7ea fb53 	bl	80035ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018f46:	4b10      	ldr	r3, [pc, #64]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f4a:	4a0f      	ldr	r2, [pc, #60]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f50:	6353      	str	r3, [r2, #52]	; 0x34
 8018f52:	2300      	movs	r3, #0
 8018f54:	60fb      	str	r3, [r7, #12]
 8018f56:	4b0c      	ldr	r3, [pc, #48]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f5a:	4a0b      	ldr	r2, [pc, #44]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018f60:	6453      	str	r3, [r2, #68]	; 0x44
 8018f62:	4b09      	ldr	r3, [pc, #36]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018f6a:	60fb      	str	r3, [r7, #12]
 8018f6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018f6e:	2200      	movs	r2, #0
 8018f70:	2105      	movs	r1, #5
 8018f72:	2043      	movs	r0, #67	; 0x43
 8018f74:	f7e9 fadc 	bl	8002530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018f78:	2043      	movs	r0, #67	; 0x43
 8018f7a:	f7e9 faf5 	bl	8002568 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018f7e:	bf00      	nop
 8018f80:	3728      	adds	r7, #40	; 0x28
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd80      	pop	{r7, pc}
 8018f86:	bf00      	nop
 8018f88:	40023800 	.word	0x40023800
 8018f8c:	40020000 	.word	0x40020000

08018f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b082      	sub	sp, #8
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018fa4:	4619      	mov	r1, r3
 8018fa6:	4610      	mov	r0, r2
 8018fa8:	f7f0 fefd 	bl	8009da6 <USBD_LL_SetupStage>
}
 8018fac:	bf00      	nop
 8018fae:	3708      	adds	r7, #8
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	460b      	mov	r3, r1
 8018fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018fc6:	78fa      	ldrb	r2, [r7, #3]
 8018fc8:	6879      	ldr	r1, [r7, #4]
 8018fca:	4613      	mov	r3, r2
 8018fcc:	00db      	lsls	r3, r3, #3
 8018fce:	1a9b      	subs	r3, r3, r2
 8018fd0:	009b      	lsls	r3, r3, #2
 8018fd2:	440b      	add	r3, r1
 8018fd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	78fb      	ldrb	r3, [r7, #3]
 8018fdc:	4619      	mov	r1, r3
 8018fde:	f7f0 ff2d 	bl	8009e3c <USBD_LL_DataOutStage>
}
 8018fe2:	bf00      	nop
 8018fe4:	3708      	adds	r7, #8
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd80      	pop	{r7, pc}

08018fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fea:	b580      	push	{r7, lr}
 8018fec:	b082      	sub	sp, #8
 8018fee:	af00      	add	r7, sp, #0
 8018ff0:	6078      	str	r0, [r7, #4]
 8018ff2:	460b      	mov	r3, r1
 8018ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018ffc:	78fa      	ldrb	r2, [r7, #3]
 8018ffe:	6879      	ldr	r1, [r7, #4]
 8019000:	4613      	mov	r3, r2
 8019002:	00db      	lsls	r3, r3, #3
 8019004:	1a9b      	subs	r3, r3, r2
 8019006:	009b      	lsls	r3, r3, #2
 8019008:	440b      	add	r3, r1
 801900a:	3348      	adds	r3, #72	; 0x48
 801900c:	681a      	ldr	r2, [r3, #0]
 801900e:	78fb      	ldrb	r3, [r7, #3]
 8019010:	4619      	mov	r1, r3
 8019012:	f7f0 ff84 	bl	8009f1e <USBD_LL_DataInStage>
}
 8019016:	bf00      	nop
 8019018:	3708      	adds	r7, #8
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}

0801901e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801901e:	b580      	push	{r7, lr}
 8019020:	b082      	sub	sp, #8
 8019022:	af00      	add	r7, sp, #0
 8019024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801902c:	4618      	mov	r0, r3
 801902e:	f7f1 f892 	bl	800a156 <USBD_LL_SOF>
}
 8019032:	bf00      	nop
 8019034:	3708      	adds	r7, #8
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}

0801903a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801903a:	b580      	push	{r7, lr}
 801903c:	b084      	sub	sp, #16
 801903e:	af00      	add	r7, sp, #0
 8019040:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019042:	2301      	movs	r3, #1
 8019044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	68db      	ldr	r3, [r3, #12]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d102      	bne.n	8019054 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801904e:	2300      	movs	r3, #0
 8019050:	73fb      	strb	r3, [r7, #15]
 8019052:	e008      	b.n	8019066 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	68db      	ldr	r3, [r3, #12]
 8019058:	2b02      	cmp	r3, #2
 801905a:	d102      	bne.n	8019062 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801905c:	2301      	movs	r3, #1
 801905e:	73fb      	strb	r3, [r7, #15]
 8019060:	e001      	b.n	8019066 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019062:	f7e8 fb2b 	bl	80016bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801906c:	7bfa      	ldrb	r2, [r7, #15]
 801906e:	4611      	mov	r1, r2
 8019070:	4618      	mov	r0, r3
 8019072:	f7f1 f83a 	bl	800a0ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801907c:	4618      	mov	r0, r3
 801907e:	f7f0 fff3 	bl	800a068 <USBD_LL_Reset>
}
 8019082:	bf00      	nop
 8019084:	3710      	adds	r7, #16
 8019086:	46bd      	mov	sp, r7
 8019088:	bd80      	pop	{r7, pc}
	...

0801908c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b082      	sub	sp, #8
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801909a:	4618      	mov	r0, r3
 801909c:	f7f1 f835 	bl	800a10a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	687a      	ldr	r2, [r7, #4]
 80190ac:	6812      	ldr	r2, [r2, #0]
 80190ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80190b2:	f043 0301 	orr.w	r3, r3, #1
 80190b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6a1b      	ldr	r3, [r3, #32]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d005      	beq.n	80190cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80190c0:	4b04      	ldr	r3, [pc, #16]	; (80190d4 <HAL_PCD_SuspendCallback+0x48>)
 80190c2:	691b      	ldr	r3, [r3, #16]
 80190c4:	4a03      	ldr	r2, [pc, #12]	; (80190d4 <HAL_PCD_SuspendCallback+0x48>)
 80190c6:	f043 0306 	orr.w	r3, r3, #6
 80190ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80190cc:	bf00      	nop
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	e000ed00 	.word	0xe000ed00

080190d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b082      	sub	sp, #8
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80190e6:	4618      	mov	r0, r3
 80190e8:	f7f1 f824 	bl	800a134 <USBD_LL_Resume>
}
 80190ec:	bf00      	nop
 80190ee:	3708      	adds	r7, #8
 80190f0:	46bd      	mov	sp, r7
 80190f2:	bd80      	pop	{r7, pc}

080190f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b082      	sub	sp, #8
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
 80190fc:	460b      	mov	r3, r1
 80190fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019106:	78fa      	ldrb	r2, [r7, #3]
 8019108:	4611      	mov	r1, r2
 801910a:	4618      	mov	r0, r3
 801910c:	f7f1 f84a 	bl	800a1a4 <USBD_LL_IsoOUTIncomplete>
}
 8019110:	bf00      	nop
 8019112:	3708      	adds	r7, #8
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}

08019118 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b082      	sub	sp, #8
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
 8019120:	460b      	mov	r3, r1
 8019122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801912a:	78fa      	ldrb	r2, [r7, #3]
 801912c:	4611      	mov	r1, r2
 801912e:	4618      	mov	r0, r3
 8019130:	f7f1 f82b 	bl	800a18a <USBD_LL_IsoINIncomplete>
}
 8019134:	bf00      	nop
 8019136:	3708      	adds	r7, #8
 8019138:	46bd      	mov	sp, r7
 801913a:	bd80      	pop	{r7, pc}

0801913c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b082      	sub	sp, #8
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801914a:	4618      	mov	r0, r3
 801914c:	f7f1 f837 	bl	800a1be <USBD_LL_DevConnected>
}
 8019150:	bf00      	nop
 8019152:	3708      	adds	r7, #8
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}

08019158 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b082      	sub	sp, #8
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019166:	4618      	mov	r0, r3
 8019168:	f7f1 f834 	bl	800a1d4 <USBD_LL_DevDisconnected>
}
 801916c:	bf00      	nop
 801916e:	3708      	adds	r7, #8
 8019170:	46bd      	mov	sp, r7
 8019172:	bd80      	pop	{r7, pc}

08019174 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	b082      	sub	sp, #8
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	781b      	ldrb	r3, [r3, #0]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d13c      	bne.n	80191fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019184:	4a20      	ldr	r2, [pc, #128]	; (8019208 <USBD_LL_Init+0x94>)
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	4a1e      	ldr	r2, [pc, #120]	; (8019208 <USBD_LL_Init+0x94>)
 8019190:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019194:	4b1c      	ldr	r3, [pc, #112]	; (8019208 <USBD_LL_Init+0x94>)
 8019196:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801919a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801919c:	4b1a      	ldr	r3, [pc, #104]	; (8019208 <USBD_LL_Init+0x94>)
 801919e:	2204      	movs	r2, #4
 80191a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80191a2:	4b19      	ldr	r3, [pc, #100]	; (8019208 <USBD_LL_Init+0x94>)
 80191a4:	2202      	movs	r2, #2
 80191a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80191a8:	4b17      	ldr	r3, [pc, #92]	; (8019208 <USBD_LL_Init+0x94>)
 80191aa:	2200      	movs	r2, #0
 80191ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80191ae:	4b16      	ldr	r3, [pc, #88]	; (8019208 <USBD_LL_Init+0x94>)
 80191b0:	2202      	movs	r2, #2
 80191b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80191b4:	4b14      	ldr	r3, [pc, #80]	; (8019208 <USBD_LL_Init+0x94>)
 80191b6:	2201      	movs	r2, #1
 80191b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80191ba:	4b13      	ldr	r3, [pc, #76]	; (8019208 <USBD_LL_Init+0x94>)
 80191bc:	2200      	movs	r2, #0
 80191be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80191c0:	4b11      	ldr	r3, [pc, #68]	; (8019208 <USBD_LL_Init+0x94>)
 80191c2:	2200      	movs	r2, #0
 80191c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80191c6:	4b10      	ldr	r3, [pc, #64]	; (8019208 <USBD_LL_Init+0x94>)
 80191c8:	2201      	movs	r2, #1
 80191ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80191cc:	4b0e      	ldr	r3, [pc, #56]	; (8019208 <USBD_LL_Init+0x94>)
 80191ce:	2200      	movs	r2, #0
 80191d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80191d2:	480d      	ldr	r0, [pc, #52]	; (8019208 <USBD_LL_Init+0x94>)
 80191d4:	f7ea fbcd 	bl	8003972 <HAL_PCD_Init>
 80191d8:	4603      	mov	r3, r0
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d001      	beq.n	80191e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80191de:	f7e8 fa6d 	bl	80016bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80191e2:	2180      	movs	r1, #128	; 0x80
 80191e4:	4808      	ldr	r0, [pc, #32]	; (8019208 <USBD_LL_Init+0x94>)
 80191e6:	f7eb fd32 	bl	8004c4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80191ea:	2240      	movs	r2, #64	; 0x40
 80191ec:	2100      	movs	r1, #0
 80191ee:	4806      	ldr	r0, [pc, #24]	; (8019208 <USBD_LL_Init+0x94>)
 80191f0:	f7eb fce6 	bl	8004bc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80191f4:	2280      	movs	r2, #128	; 0x80
 80191f6:	2101      	movs	r1, #1
 80191f8:	4803      	ldr	r0, [pc, #12]	; (8019208 <USBD_LL_Init+0x94>)
 80191fa:	f7eb fce1 	bl	8004bc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80191fe:	2300      	movs	r3, #0
}
 8019200:	4618      	mov	r0, r3
 8019202:	3708      	adds	r7, #8
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}
 8019208:	2000c018 	.word	0x2000c018

0801920c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b084      	sub	sp, #16
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019214:	2300      	movs	r3, #0
 8019216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019218:	2300      	movs	r3, #0
 801921a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8019222:	4618      	mov	r0, r3
 8019224:	f7ea fcc2 	bl	8003bac <HAL_PCD_Start>
 8019228:	4603      	mov	r3, r0
 801922a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801922c:	7bfb      	ldrb	r3, [r7, #15]
 801922e:	4618      	mov	r0, r3
 8019230:	f000 f92e 	bl	8019490 <USBD_Get_USB_Status>
 8019234:	4603      	mov	r3, r0
 8019236:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019238:	7bbb      	ldrb	r3, [r7, #14]
}
 801923a:	4618      	mov	r0, r3
 801923c:	3710      	adds	r7, #16
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}

08019242 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019242:	b580      	push	{r7, lr}
 8019244:	b084      	sub	sp, #16
 8019246:	af00      	add	r7, sp, #0
 8019248:	6078      	str	r0, [r7, #4]
 801924a:	4608      	mov	r0, r1
 801924c:	4611      	mov	r1, r2
 801924e:	461a      	mov	r2, r3
 8019250:	4603      	mov	r3, r0
 8019252:	70fb      	strb	r3, [r7, #3]
 8019254:	460b      	mov	r3, r1
 8019256:	70bb      	strb	r3, [r7, #2]
 8019258:	4613      	mov	r3, r2
 801925a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801925c:	2300      	movs	r3, #0
 801925e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019260:	2300      	movs	r3, #0
 8019262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801926a:	78bb      	ldrb	r3, [r7, #2]
 801926c:	883a      	ldrh	r2, [r7, #0]
 801926e:	78f9      	ldrb	r1, [r7, #3]
 8019270:	f7eb f897 	bl	80043a2 <HAL_PCD_EP_Open>
 8019274:	4603      	mov	r3, r0
 8019276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019278:	7bfb      	ldrb	r3, [r7, #15]
 801927a:	4618      	mov	r0, r3
 801927c:	f000 f908 	bl	8019490 <USBD_Get_USB_Status>
 8019280:	4603      	mov	r3, r0
 8019282:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019284:	7bbb      	ldrb	r3, [r7, #14]
}
 8019286:	4618      	mov	r0, r3
 8019288:	3710      	adds	r7, #16
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}

0801928e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801928e:	b580      	push	{r7, lr}
 8019290:	b084      	sub	sp, #16
 8019292:	af00      	add	r7, sp, #0
 8019294:	6078      	str	r0, [r7, #4]
 8019296:	460b      	mov	r3, r1
 8019298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801929a:	2300      	movs	r3, #0
 801929c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801929e:	2300      	movs	r3, #0
 80192a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80192a8:	78fa      	ldrb	r2, [r7, #3]
 80192aa:	4611      	mov	r1, r2
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7eb f8e0 	bl	8004472 <HAL_PCD_EP_Close>
 80192b2:	4603      	mov	r3, r0
 80192b4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80192b6:	7bfb      	ldrb	r3, [r7, #15]
 80192b8:	4618      	mov	r0, r3
 80192ba:	f000 f8e9 	bl	8019490 <USBD_Get_USB_Status>
 80192be:	4603      	mov	r3, r0
 80192c0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80192c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80192c4:	4618      	mov	r0, r3
 80192c6:	3710      	adds	r7, #16
 80192c8:	46bd      	mov	sp, r7
 80192ca:	bd80      	pop	{r7, pc}

080192cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b084      	sub	sp, #16
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	6078      	str	r0, [r7, #4]
 80192d4:	460b      	mov	r3, r1
 80192d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192d8:	2300      	movs	r3, #0
 80192da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192dc:	2300      	movs	r3, #0
 80192de:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80192e6:	78fa      	ldrb	r2, [r7, #3]
 80192e8:	4611      	mov	r1, r2
 80192ea:	4618      	mov	r0, r3
 80192ec:	f7eb f9b8 	bl	8004660 <HAL_PCD_EP_SetStall>
 80192f0:	4603      	mov	r3, r0
 80192f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192f4:	7bfb      	ldrb	r3, [r7, #15]
 80192f6:	4618      	mov	r0, r3
 80192f8:	f000 f8ca 	bl	8019490 <USBD_Get_USB_Status>
 80192fc:	4603      	mov	r3, r0
 80192fe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8019300:	7bbb      	ldrb	r3, [r7, #14]
}
 8019302:	4618      	mov	r0, r3
 8019304:	3710      	adds	r7, #16
 8019306:	46bd      	mov	sp, r7
 8019308:	bd80      	pop	{r7, pc}

0801930a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801930a:	b580      	push	{r7, lr}
 801930c:	b084      	sub	sp, #16
 801930e:	af00      	add	r7, sp, #0
 8019310:	6078      	str	r0, [r7, #4]
 8019312:	460b      	mov	r3, r1
 8019314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019316:	2300      	movs	r3, #0
 8019318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801931a:	2300      	movs	r3, #0
 801931c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8019324:	78fa      	ldrb	r2, [r7, #3]
 8019326:	4611      	mov	r1, r2
 8019328:	4618      	mov	r0, r3
 801932a:	f7eb f9fd 	bl	8004728 <HAL_PCD_EP_ClrStall>
 801932e:	4603      	mov	r3, r0
 8019330:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8019332:	7bfb      	ldrb	r3, [r7, #15]
 8019334:	4618      	mov	r0, r3
 8019336:	f000 f8ab 	bl	8019490 <USBD_Get_USB_Status>
 801933a:	4603      	mov	r3, r0
 801933c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801933e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019340:	4618      	mov	r0, r3
 8019342:	3710      	adds	r7, #16
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}

08019348 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019348:	b480      	push	{r7}
 801934a:	b085      	sub	sp, #20
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
 8019350:	460b      	mov	r3, r1
 8019352:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801935a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801935c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019360:	2b00      	cmp	r3, #0
 8019362:	da0b      	bge.n	801937c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8019364:	78fb      	ldrb	r3, [r7, #3]
 8019366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801936a:	68f9      	ldr	r1, [r7, #12]
 801936c:	4613      	mov	r3, r2
 801936e:	00db      	lsls	r3, r3, #3
 8019370:	1a9b      	subs	r3, r3, r2
 8019372:	009b      	lsls	r3, r3, #2
 8019374:	440b      	add	r3, r1
 8019376:	333e      	adds	r3, #62	; 0x3e
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	e00b      	b.n	8019394 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801937c:	78fb      	ldrb	r3, [r7, #3]
 801937e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019382:	68f9      	ldr	r1, [r7, #12]
 8019384:	4613      	mov	r3, r2
 8019386:	00db      	lsls	r3, r3, #3
 8019388:	1a9b      	subs	r3, r3, r2
 801938a:	009b      	lsls	r3, r3, #2
 801938c:	440b      	add	r3, r1
 801938e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019392:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019394:	4618      	mov	r0, r3
 8019396:	3714      	adds	r7, #20
 8019398:	46bd      	mov	sp, r7
 801939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939e:	4770      	bx	lr

080193a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b084      	sub	sp, #16
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
 80193a8:	460b      	mov	r3, r1
 80193aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193ac:	2300      	movs	r3, #0
 80193ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193b0:	2300      	movs	r3, #0
 80193b2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80193ba:	78fa      	ldrb	r2, [r7, #3]
 80193bc:	4611      	mov	r1, r2
 80193be:	4618      	mov	r0, r3
 80193c0:	f7ea ffca 	bl	8004358 <HAL_PCD_SetAddress>
 80193c4:	4603      	mov	r3, r0
 80193c6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80193c8:	7bfb      	ldrb	r3, [r7, #15]
 80193ca:	4618      	mov	r0, r3
 80193cc:	f000 f860 	bl	8019490 <USBD_Get_USB_Status>
 80193d0:	4603      	mov	r3, r0
 80193d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80193d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80193d6:	4618      	mov	r0, r3
 80193d8:	3710      	adds	r7, #16
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}

080193de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80193de:	b580      	push	{r7, lr}
 80193e0:	b086      	sub	sp, #24
 80193e2:	af00      	add	r7, sp, #0
 80193e4:	60f8      	str	r0, [r7, #12]
 80193e6:	607a      	str	r2, [r7, #4]
 80193e8:	461a      	mov	r2, r3
 80193ea:	460b      	mov	r3, r1
 80193ec:	72fb      	strb	r3, [r7, #11]
 80193ee:	4613      	mov	r3, r2
 80193f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193f2:	2300      	movs	r3, #0
 80193f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193f6:	2300      	movs	r3, #0
 80193f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8019400:	893b      	ldrh	r3, [r7, #8]
 8019402:	7af9      	ldrb	r1, [r7, #11]
 8019404:	687a      	ldr	r2, [r7, #4]
 8019406:	f7eb f8e1 	bl	80045cc <HAL_PCD_EP_Transmit>
 801940a:	4603      	mov	r3, r0
 801940c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801940e:	7dfb      	ldrb	r3, [r7, #23]
 8019410:	4618      	mov	r0, r3
 8019412:	f000 f83d 	bl	8019490 <USBD_Get_USB_Status>
 8019416:	4603      	mov	r3, r0
 8019418:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801941a:	7dbb      	ldrb	r3, [r7, #22]
}
 801941c:	4618      	mov	r0, r3
 801941e:	3718      	adds	r7, #24
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}

08019424 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b086      	sub	sp, #24
 8019428:	af00      	add	r7, sp, #0
 801942a:	60f8      	str	r0, [r7, #12]
 801942c:	607a      	str	r2, [r7, #4]
 801942e:	461a      	mov	r2, r3
 8019430:	460b      	mov	r3, r1
 8019432:	72fb      	strb	r3, [r7, #11]
 8019434:	4613      	mov	r3, r2
 8019436:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019438:	2300      	movs	r3, #0
 801943a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801943c:	2300      	movs	r3, #0
 801943e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8019446:	893b      	ldrh	r3, [r7, #8]
 8019448:	7af9      	ldrb	r1, [r7, #11]
 801944a:	687a      	ldr	r2, [r7, #4]
 801944c:	f7eb f85b 	bl	8004506 <HAL_PCD_EP_Receive>
 8019450:	4603      	mov	r3, r0
 8019452:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8019454:	7dfb      	ldrb	r3, [r7, #23]
 8019456:	4618      	mov	r0, r3
 8019458:	f000 f81a 	bl	8019490 <USBD_Get_USB_Status>
 801945c:	4603      	mov	r3, r0
 801945e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8019460:	7dbb      	ldrb	r3, [r7, #22]
}
 8019462:	4618      	mov	r0, r3
 8019464:	3718      	adds	r7, #24
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}

0801946a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801946a:	b580      	push	{r7, lr}
 801946c:	b082      	sub	sp, #8
 801946e:	af00      	add	r7, sp, #0
 8019470:	6078      	str	r0, [r7, #4]
 8019472:	460b      	mov	r3, r1
 8019474:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801947c:	78fa      	ldrb	r2, [r7, #3]
 801947e:	4611      	mov	r1, r2
 8019480:	4618      	mov	r0, r3
 8019482:	f7eb f88b 	bl	800459c <HAL_PCD_EP_GetRxCount>
 8019486:	4603      	mov	r3, r0
}
 8019488:	4618      	mov	r0, r3
 801948a:	3708      	adds	r7, #8
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}

08019490 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019490:	b480      	push	{r7}
 8019492:	b085      	sub	sp, #20
 8019494:	af00      	add	r7, sp, #0
 8019496:	4603      	mov	r3, r0
 8019498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801949a:	2300      	movs	r3, #0
 801949c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801949e:	79fb      	ldrb	r3, [r7, #7]
 80194a0:	2b03      	cmp	r3, #3
 80194a2:	d817      	bhi.n	80194d4 <USBD_Get_USB_Status+0x44>
 80194a4:	a201      	add	r2, pc, #4	; (adr r2, 80194ac <USBD_Get_USB_Status+0x1c>)
 80194a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194aa:	bf00      	nop
 80194ac:	080194bd 	.word	0x080194bd
 80194b0:	080194c3 	.word	0x080194c3
 80194b4:	080194c9 	.word	0x080194c9
 80194b8:	080194cf 	.word	0x080194cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80194bc:	2300      	movs	r3, #0
 80194be:	73fb      	strb	r3, [r7, #15]
    break;
 80194c0:	e00b      	b.n	80194da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80194c2:	2302      	movs	r3, #2
 80194c4:	73fb      	strb	r3, [r7, #15]
    break;
 80194c6:	e008      	b.n	80194da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80194c8:	2301      	movs	r3, #1
 80194ca:	73fb      	strb	r3, [r7, #15]
    break;
 80194cc:	e005      	b.n	80194da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80194ce:	2302      	movs	r3, #2
 80194d0:	73fb      	strb	r3, [r7, #15]
    break;
 80194d2:	e002      	b.n	80194da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80194d4:	2302      	movs	r3, #2
 80194d6:	73fb      	strb	r3, [r7, #15]
    break;
 80194d8:	bf00      	nop
  }
  return usb_status;
 80194da:	7bfb      	ldrb	r3, [r7, #15]
}
 80194dc:	4618      	mov	r0, r3
 80194de:	3714      	adds	r7, #20
 80194e0:	46bd      	mov	sp, r7
 80194e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e6:	4770      	bx	lr

080194e8 <__libc_init_array>:
 80194e8:	b570      	push	{r4, r5, r6, lr}
 80194ea:	4e0d      	ldr	r6, [pc, #52]	; (8019520 <__libc_init_array+0x38>)
 80194ec:	4c0d      	ldr	r4, [pc, #52]	; (8019524 <__libc_init_array+0x3c>)
 80194ee:	1ba4      	subs	r4, r4, r6
 80194f0:	10a4      	asrs	r4, r4, #2
 80194f2:	2500      	movs	r5, #0
 80194f4:	42a5      	cmp	r5, r4
 80194f6:	d109      	bne.n	801950c <__libc_init_array+0x24>
 80194f8:	4e0b      	ldr	r6, [pc, #44]	; (8019528 <__libc_init_array+0x40>)
 80194fa:	4c0c      	ldr	r4, [pc, #48]	; (801952c <__libc_init_array+0x44>)
 80194fc:	f001 f91c 	bl	801a738 <_init>
 8019500:	1ba4      	subs	r4, r4, r6
 8019502:	10a4      	asrs	r4, r4, #2
 8019504:	2500      	movs	r5, #0
 8019506:	42a5      	cmp	r5, r4
 8019508:	d105      	bne.n	8019516 <__libc_init_array+0x2e>
 801950a:	bd70      	pop	{r4, r5, r6, pc}
 801950c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019510:	4798      	blx	r3
 8019512:	3501      	adds	r5, #1
 8019514:	e7ee      	b.n	80194f4 <__libc_init_array+0xc>
 8019516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801951a:	4798      	blx	r3
 801951c:	3501      	adds	r5, #1
 801951e:	e7f2      	b.n	8019506 <__libc_init_array+0x1e>
 8019520:	0801cda8 	.word	0x0801cda8
 8019524:	0801cda8 	.word	0x0801cda8
 8019528:	0801cda8 	.word	0x0801cda8
 801952c:	0801cdac 	.word	0x0801cdac

08019530 <malloc>:
 8019530:	4b02      	ldr	r3, [pc, #8]	; (801953c <malloc+0xc>)
 8019532:	4601      	mov	r1, r0
 8019534:	6818      	ldr	r0, [r3, #0]
 8019536:	f000 b87b 	b.w	8019630 <_malloc_r>
 801953a:	bf00      	nop
 801953c:	20000188 	.word	0x20000188

08019540 <free>:
 8019540:	4b02      	ldr	r3, [pc, #8]	; (801954c <free+0xc>)
 8019542:	4601      	mov	r1, r0
 8019544:	6818      	ldr	r0, [r3, #0]
 8019546:	f000 b825 	b.w	8019594 <_free_r>
 801954a:	bf00      	nop
 801954c:	20000188 	.word	0x20000188

08019550 <memcmp>:
 8019550:	b530      	push	{r4, r5, lr}
 8019552:	2400      	movs	r4, #0
 8019554:	42a2      	cmp	r2, r4
 8019556:	d101      	bne.n	801955c <memcmp+0xc>
 8019558:	2000      	movs	r0, #0
 801955a:	e007      	b.n	801956c <memcmp+0x1c>
 801955c:	5d03      	ldrb	r3, [r0, r4]
 801955e:	3401      	adds	r4, #1
 8019560:	190d      	adds	r5, r1, r4
 8019562:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8019566:	42ab      	cmp	r3, r5
 8019568:	d0f4      	beq.n	8019554 <memcmp+0x4>
 801956a:	1b58      	subs	r0, r3, r5
 801956c:	bd30      	pop	{r4, r5, pc}

0801956e <memcpy>:
 801956e:	b510      	push	{r4, lr}
 8019570:	1e43      	subs	r3, r0, #1
 8019572:	440a      	add	r2, r1
 8019574:	4291      	cmp	r1, r2
 8019576:	d100      	bne.n	801957a <memcpy+0xc>
 8019578:	bd10      	pop	{r4, pc}
 801957a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801957e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019582:	e7f7      	b.n	8019574 <memcpy+0x6>

08019584 <memset>:
 8019584:	4402      	add	r2, r0
 8019586:	4603      	mov	r3, r0
 8019588:	4293      	cmp	r3, r2
 801958a:	d100      	bne.n	801958e <memset+0xa>
 801958c:	4770      	bx	lr
 801958e:	f803 1b01 	strb.w	r1, [r3], #1
 8019592:	e7f9      	b.n	8019588 <memset+0x4>

08019594 <_free_r>:
 8019594:	b538      	push	{r3, r4, r5, lr}
 8019596:	4605      	mov	r5, r0
 8019598:	2900      	cmp	r1, #0
 801959a:	d045      	beq.n	8019628 <_free_r+0x94>
 801959c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195a0:	1f0c      	subs	r4, r1, #4
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	bfb8      	it	lt
 80195a6:	18e4      	addlt	r4, r4, r3
 80195a8:	f000 f9e2 	bl	8019970 <__malloc_lock>
 80195ac:	4a1f      	ldr	r2, [pc, #124]	; (801962c <_free_r+0x98>)
 80195ae:	6813      	ldr	r3, [r2, #0]
 80195b0:	4610      	mov	r0, r2
 80195b2:	b933      	cbnz	r3, 80195c2 <_free_r+0x2e>
 80195b4:	6063      	str	r3, [r4, #4]
 80195b6:	6014      	str	r4, [r2, #0]
 80195b8:	4628      	mov	r0, r5
 80195ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80195be:	f000 b9d8 	b.w	8019972 <__malloc_unlock>
 80195c2:	42a3      	cmp	r3, r4
 80195c4:	d90c      	bls.n	80195e0 <_free_r+0x4c>
 80195c6:	6821      	ldr	r1, [r4, #0]
 80195c8:	1862      	adds	r2, r4, r1
 80195ca:	4293      	cmp	r3, r2
 80195cc:	bf04      	itt	eq
 80195ce:	681a      	ldreq	r2, [r3, #0]
 80195d0:	685b      	ldreq	r3, [r3, #4]
 80195d2:	6063      	str	r3, [r4, #4]
 80195d4:	bf04      	itt	eq
 80195d6:	1852      	addeq	r2, r2, r1
 80195d8:	6022      	streq	r2, [r4, #0]
 80195da:	6004      	str	r4, [r0, #0]
 80195dc:	e7ec      	b.n	80195b8 <_free_r+0x24>
 80195de:	4613      	mov	r3, r2
 80195e0:	685a      	ldr	r2, [r3, #4]
 80195e2:	b10a      	cbz	r2, 80195e8 <_free_r+0x54>
 80195e4:	42a2      	cmp	r2, r4
 80195e6:	d9fa      	bls.n	80195de <_free_r+0x4a>
 80195e8:	6819      	ldr	r1, [r3, #0]
 80195ea:	1858      	adds	r0, r3, r1
 80195ec:	42a0      	cmp	r0, r4
 80195ee:	d10b      	bne.n	8019608 <_free_r+0x74>
 80195f0:	6820      	ldr	r0, [r4, #0]
 80195f2:	4401      	add	r1, r0
 80195f4:	1858      	adds	r0, r3, r1
 80195f6:	4282      	cmp	r2, r0
 80195f8:	6019      	str	r1, [r3, #0]
 80195fa:	d1dd      	bne.n	80195b8 <_free_r+0x24>
 80195fc:	6810      	ldr	r0, [r2, #0]
 80195fe:	6852      	ldr	r2, [r2, #4]
 8019600:	605a      	str	r2, [r3, #4]
 8019602:	4401      	add	r1, r0
 8019604:	6019      	str	r1, [r3, #0]
 8019606:	e7d7      	b.n	80195b8 <_free_r+0x24>
 8019608:	d902      	bls.n	8019610 <_free_r+0x7c>
 801960a:	230c      	movs	r3, #12
 801960c:	602b      	str	r3, [r5, #0]
 801960e:	e7d3      	b.n	80195b8 <_free_r+0x24>
 8019610:	6820      	ldr	r0, [r4, #0]
 8019612:	1821      	adds	r1, r4, r0
 8019614:	428a      	cmp	r2, r1
 8019616:	bf04      	itt	eq
 8019618:	6811      	ldreq	r1, [r2, #0]
 801961a:	6852      	ldreq	r2, [r2, #4]
 801961c:	6062      	str	r2, [r4, #4]
 801961e:	bf04      	itt	eq
 8019620:	1809      	addeq	r1, r1, r0
 8019622:	6021      	streq	r1, [r4, #0]
 8019624:	605c      	str	r4, [r3, #4]
 8019626:	e7c7      	b.n	80195b8 <_free_r+0x24>
 8019628:	bd38      	pop	{r3, r4, r5, pc}
 801962a:	bf00      	nop
 801962c:	20004350 	.word	0x20004350

08019630 <_malloc_r>:
 8019630:	b570      	push	{r4, r5, r6, lr}
 8019632:	1ccd      	adds	r5, r1, #3
 8019634:	f025 0503 	bic.w	r5, r5, #3
 8019638:	3508      	adds	r5, #8
 801963a:	2d0c      	cmp	r5, #12
 801963c:	bf38      	it	cc
 801963e:	250c      	movcc	r5, #12
 8019640:	2d00      	cmp	r5, #0
 8019642:	4606      	mov	r6, r0
 8019644:	db01      	blt.n	801964a <_malloc_r+0x1a>
 8019646:	42a9      	cmp	r1, r5
 8019648:	d903      	bls.n	8019652 <_malloc_r+0x22>
 801964a:	230c      	movs	r3, #12
 801964c:	6033      	str	r3, [r6, #0]
 801964e:	2000      	movs	r0, #0
 8019650:	bd70      	pop	{r4, r5, r6, pc}
 8019652:	f000 f98d 	bl	8019970 <__malloc_lock>
 8019656:	4a21      	ldr	r2, [pc, #132]	; (80196dc <_malloc_r+0xac>)
 8019658:	6814      	ldr	r4, [r2, #0]
 801965a:	4621      	mov	r1, r4
 801965c:	b991      	cbnz	r1, 8019684 <_malloc_r+0x54>
 801965e:	4c20      	ldr	r4, [pc, #128]	; (80196e0 <_malloc_r+0xb0>)
 8019660:	6823      	ldr	r3, [r4, #0]
 8019662:	b91b      	cbnz	r3, 801966c <_malloc_r+0x3c>
 8019664:	4630      	mov	r0, r6
 8019666:	f000 f889 	bl	801977c <_sbrk_r>
 801966a:	6020      	str	r0, [r4, #0]
 801966c:	4629      	mov	r1, r5
 801966e:	4630      	mov	r0, r6
 8019670:	f000 f884 	bl	801977c <_sbrk_r>
 8019674:	1c43      	adds	r3, r0, #1
 8019676:	d124      	bne.n	80196c2 <_malloc_r+0x92>
 8019678:	230c      	movs	r3, #12
 801967a:	6033      	str	r3, [r6, #0]
 801967c:	4630      	mov	r0, r6
 801967e:	f000 f978 	bl	8019972 <__malloc_unlock>
 8019682:	e7e4      	b.n	801964e <_malloc_r+0x1e>
 8019684:	680b      	ldr	r3, [r1, #0]
 8019686:	1b5b      	subs	r3, r3, r5
 8019688:	d418      	bmi.n	80196bc <_malloc_r+0x8c>
 801968a:	2b0b      	cmp	r3, #11
 801968c:	d90f      	bls.n	80196ae <_malloc_r+0x7e>
 801968e:	600b      	str	r3, [r1, #0]
 8019690:	50cd      	str	r5, [r1, r3]
 8019692:	18cc      	adds	r4, r1, r3
 8019694:	4630      	mov	r0, r6
 8019696:	f000 f96c 	bl	8019972 <__malloc_unlock>
 801969a:	f104 000b 	add.w	r0, r4, #11
 801969e:	1d23      	adds	r3, r4, #4
 80196a0:	f020 0007 	bic.w	r0, r0, #7
 80196a4:	1ac3      	subs	r3, r0, r3
 80196a6:	d0d3      	beq.n	8019650 <_malloc_r+0x20>
 80196a8:	425a      	negs	r2, r3
 80196aa:	50e2      	str	r2, [r4, r3]
 80196ac:	e7d0      	b.n	8019650 <_malloc_r+0x20>
 80196ae:	428c      	cmp	r4, r1
 80196b0:	684b      	ldr	r3, [r1, #4]
 80196b2:	bf16      	itet	ne
 80196b4:	6063      	strne	r3, [r4, #4]
 80196b6:	6013      	streq	r3, [r2, #0]
 80196b8:	460c      	movne	r4, r1
 80196ba:	e7eb      	b.n	8019694 <_malloc_r+0x64>
 80196bc:	460c      	mov	r4, r1
 80196be:	6849      	ldr	r1, [r1, #4]
 80196c0:	e7cc      	b.n	801965c <_malloc_r+0x2c>
 80196c2:	1cc4      	adds	r4, r0, #3
 80196c4:	f024 0403 	bic.w	r4, r4, #3
 80196c8:	42a0      	cmp	r0, r4
 80196ca:	d005      	beq.n	80196d8 <_malloc_r+0xa8>
 80196cc:	1a21      	subs	r1, r4, r0
 80196ce:	4630      	mov	r0, r6
 80196d0:	f000 f854 	bl	801977c <_sbrk_r>
 80196d4:	3001      	adds	r0, #1
 80196d6:	d0cf      	beq.n	8019678 <_malloc_r+0x48>
 80196d8:	6025      	str	r5, [r4, #0]
 80196da:	e7db      	b.n	8019694 <_malloc_r+0x64>
 80196dc:	20004350 	.word	0x20004350
 80196e0:	20004354 	.word	0x20004354

080196e4 <iprintf>:
 80196e4:	b40f      	push	{r0, r1, r2, r3}
 80196e6:	4b0a      	ldr	r3, [pc, #40]	; (8019710 <iprintf+0x2c>)
 80196e8:	b513      	push	{r0, r1, r4, lr}
 80196ea:	681c      	ldr	r4, [r3, #0]
 80196ec:	b124      	cbz	r4, 80196f8 <iprintf+0x14>
 80196ee:	69a3      	ldr	r3, [r4, #24]
 80196f0:	b913      	cbnz	r3, 80196f8 <iprintf+0x14>
 80196f2:	4620      	mov	r0, r4
 80196f4:	f000 f8b2 	bl	801985c <__sinit>
 80196f8:	ab05      	add	r3, sp, #20
 80196fa:	9a04      	ldr	r2, [sp, #16]
 80196fc:	68a1      	ldr	r1, [r4, #8]
 80196fe:	9301      	str	r3, [sp, #4]
 8019700:	4620      	mov	r0, r4
 8019702:	f000 fab3 	bl	8019c6c <_vfiprintf_r>
 8019706:	b002      	add	sp, #8
 8019708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801970c:	b004      	add	sp, #16
 801970e:	4770      	bx	lr
 8019710:	20000188 	.word	0x20000188

08019714 <rand>:
 8019714:	b538      	push	{r3, r4, r5, lr}
 8019716:	4b13      	ldr	r3, [pc, #76]	; (8019764 <rand+0x50>)
 8019718:	681c      	ldr	r4, [r3, #0]
 801971a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801971c:	b97b      	cbnz	r3, 801973e <rand+0x2a>
 801971e:	2018      	movs	r0, #24
 8019720:	f7ff ff06 	bl	8019530 <malloc>
 8019724:	4a10      	ldr	r2, [pc, #64]	; (8019768 <rand+0x54>)
 8019726:	4b11      	ldr	r3, [pc, #68]	; (801976c <rand+0x58>)
 8019728:	63a0      	str	r0, [r4, #56]	; 0x38
 801972a:	e9c0 2300 	strd	r2, r3, [r0]
 801972e:	4b10      	ldr	r3, [pc, #64]	; (8019770 <rand+0x5c>)
 8019730:	6083      	str	r3, [r0, #8]
 8019732:	230b      	movs	r3, #11
 8019734:	8183      	strh	r3, [r0, #12]
 8019736:	2201      	movs	r2, #1
 8019738:	2300      	movs	r3, #0
 801973a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801973e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019740:	480c      	ldr	r0, [pc, #48]	; (8019774 <rand+0x60>)
 8019742:	690a      	ldr	r2, [r1, #16]
 8019744:	694b      	ldr	r3, [r1, #20]
 8019746:	4c0c      	ldr	r4, [pc, #48]	; (8019778 <rand+0x64>)
 8019748:	4350      	muls	r0, r2
 801974a:	fb04 0003 	mla	r0, r4, r3, r0
 801974e:	fba2 2304 	umull	r2, r3, r2, r4
 8019752:	4403      	add	r3, r0
 8019754:	1c54      	adds	r4, r2, #1
 8019756:	f143 0500 	adc.w	r5, r3, #0
 801975a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801975e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8019762:	bd38      	pop	{r3, r4, r5, pc}
 8019764:	20000188 	.word	0x20000188
 8019768:	abcd330e 	.word	0xabcd330e
 801976c:	e66d1234 	.word	0xe66d1234
 8019770:	0005deec 	.word	0x0005deec
 8019774:	5851f42d 	.word	0x5851f42d
 8019778:	4c957f2d 	.word	0x4c957f2d

0801977c <_sbrk_r>:
 801977c:	b538      	push	{r3, r4, r5, lr}
 801977e:	4c06      	ldr	r4, [pc, #24]	; (8019798 <_sbrk_r+0x1c>)
 8019780:	2300      	movs	r3, #0
 8019782:	4605      	mov	r5, r0
 8019784:	4608      	mov	r0, r1
 8019786:	6023      	str	r3, [r4, #0]
 8019788:	f7e8 f902 	bl	8001990 <_sbrk>
 801978c:	1c43      	adds	r3, r0, #1
 801978e:	d102      	bne.n	8019796 <_sbrk_r+0x1a>
 8019790:	6823      	ldr	r3, [r4, #0]
 8019792:	b103      	cbz	r3, 8019796 <_sbrk_r+0x1a>
 8019794:	602b      	str	r3, [r5, #0]
 8019796:	bd38      	pop	{r3, r4, r5, pc}
 8019798:	2000ab74 	.word	0x2000ab74

0801979c <siprintf>:
 801979c:	b40e      	push	{r1, r2, r3}
 801979e:	b500      	push	{lr}
 80197a0:	b09c      	sub	sp, #112	; 0x70
 80197a2:	ab1d      	add	r3, sp, #116	; 0x74
 80197a4:	9002      	str	r0, [sp, #8]
 80197a6:	9006      	str	r0, [sp, #24]
 80197a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80197ac:	4809      	ldr	r0, [pc, #36]	; (80197d4 <siprintf+0x38>)
 80197ae:	9107      	str	r1, [sp, #28]
 80197b0:	9104      	str	r1, [sp, #16]
 80197b2:	4909      	ldr	r1, [pc, #36]	; (80197d8 <siprintf+0x3c>)
 80197b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80197b8:	9105      	str	r1, [sp, #20]
 80197ba:	6800      	ldr	r0, [r0, #0]
 80197bc:	9301      	str	r3, [sp, #4]
 80197be:	a902      	add	r1, sp, #8
 80197c0:	f000 f932 	bl	8019a28 <_svfiprintf_r>
 80197c4:	9b02      	ldr	r3, [sp, #8]
 80197c6:	2200      	movs	r2, #0
 80197c8:	701a      	strb	r2, [r3, #0]
 80197ca:	b01c      	add	sp, #112	; 0x70
 80197cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80197d0:	b003      	add	sp, #12
 80197d2:	4770      	bx	lr
 80197d4:	20000188 	.word	0x20000188
 80197d8:	ffff0208 	.word	0xffff0208

080197dc <std>:
 80197dc:	2300      	movs	r3, #0
 80197de:	b510      	push	{r4, lr}
 80197e0:	4604      	mov	r4, r0
 80197e2:	e9c0 3300 	strd	r3, r3, [r0]
 80197e6:	6083      	str	r3, [r0, #8]
 80197e8:	8181      	strh	r1, [r0, #12]
 80197ea:	6643      	str	r3, [r0, #100]	; 0x64
 80197ec:	81c2      	strh	r2, [r0, #14]
 80197ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80197f2:	6183      	str	r3, [r0, #24]
 80197f4:	4619      	mov	r1, r3
 80197f6:	2208      	movs	r2, #8
 80197f8:	305c      	adds	r0, #92	; 0x5c
 80197fa:	f7ff fec3 	bl	8019584 <memset>
 80197fe:	4b05      	ldr	r3, [pc, #20]	; (8019814 <std+0x38>)
 8019800:	6263      	str	r3, [r4, #36]	; 0x24
 8019802:	4b05      	ldr	r3, [pc, #20]	; (8019818 <std+0x3c>)
 8019804:	62a3      	str	r3, [r4, #40]	; 0x28
 8019806:	4b05      	ldr	r3, [pc, #20]	; (801981c <std+0x40>)
 8019808:	62e3      	str	r3, [r4, #44]	; 0x2c
 801980a:	4b05      	ldr	r3, [pc, #20]	; (8019820 <std+0x44>)
 801980c:	6224      	str	r4, [r4, #32]
 801980e:	6323      	str	r3, [r4, #48]	; 0x30
 8019810:	bd10      	pop	{r4, pc}
 8019812:	bf00      	nop
 8019814:	0801a1a9 	.word	0x0801a1a9
 8019818:	0801a1cb 	.word	0x0801a1cb
 801981c:	0801a203 	.word	0x0801a203
 8019820:	0801a227 	.word	0x0801a227

08019824 <_cleanup_r>:
 8019824:	4901      	ldr	r1, [pc, #4]	; (801982c <_cleanup_r+0x8>)
 8019826:	f000 b885 	b.w	8019934 <_fwalk_reent>
 801982a:	bf00      	nop
 801982c:	0801a501 	.word	0x0801a501

08019830 <__sfmoreglue>:
 8019830:	b570      	push	{r4, r5, r6, lr}
 8019832:	1e4a      	subs	r2, r1, #1
 8019834:	2568      	movs	r5, #104	; 0x68
 8019836:	4355      	muls	r5, r2
 8019838:	460e      	mov	r6, r1
 801983a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801983e:	f7ff fef7 	bl	8019630 <_malloc_r>
 8019842:	4604      	mov	r4, r0
 8019844:	b140      	cbz	r0, 8019858 <__sfmoreglue+0x28>
 8019846:	2100      	movs	r1, #0
 8019848:	e9c0 1600 	strd	r1, r6, [r0]
 801984c:	300c      	adds	r0, #12
 801984e:	60a0      	str	r0, [r4, #8]
 8019850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019854:	f7ff fe96 	bl	8019584 <memset>
 8019858:	4620      	mov	r0, r4
 801985a:	bd70      	pop	{r4, r5, r6, pc}

0801985c <__sinit>:
 801985c:	6983      	ldr	r3, [r0, #24]
 801985e:	b510      	push	{r4, lr}
 8019860:	4604      	mov	r4, r0
 8019862:	bb33      	cbnz	r3, 80198b2 <__sinit+0x56>
 8019864:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019868:	6503      	str	r3, [r0, #80]	; 0x50
 801986a:	4b12      	ldr	r3, [pc, #72]	; (80198b4 <__sinit+0x58>)
 801986c:	4a12      	ldr	r2, [pc, #72]	; (80198b8 <__sinit+0x5c>)
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	6282      	str	r2, [r0, #40]	; 0x28
 8019872:	4298      	cmp	r0, r3
 8019874:	bf04      	itt	eq
 8019876:	2301      	moveq	r3, #1
 8019878:	6183      	streq	r3, [r0, #24]
 801987a:	f000 f81f 	bl	80198bc <__sfp>
 801987e:	6060      	str	r0, [r4, #4]
 8019880:	4620      	mov	r0, r4
 8019882:	f000 f81b 	bl	80198bc <__sfp>
 8019886:	60a0      	str	r0, [r4, #8]
 8019888:	4620      	mov	r0, r4
 801988a:	f000 f817 	bl	80198bc <__sfp>
 801988e:	2200      	movs	r2, #0
 8019890:	60e0      	str	r0, [r4, #12]
 8019892:	2104      	movs	r1, #4
 8019894:	6860      	ldr	r0, [r4, #4]
 8019896:	f7ff ffa1 	bl	80197dc <std>
 801989a:	2201      	movs	r2, #1
 801989c:	2109      	movs	r1, #9
 801989e:	68a0      	ldr	r0, [r4, #8]
 80198a0:	f7ff ff9c 	bl	80197dc <std>
 80198a4:	2202      	movs	r2, #2
 80198a6:	2112      	movs	r1, #18
 80198a8:	68e0      	ldr	r0, [r4, #12]
 80198aa:	f7ff ff97 	bl	80197dc <std>
 80198ae:	2301      	movs	r3, #1
 80198b0:	61a3      	str	r3, [r4, #24]
 80198b2:	bd10      	pop	{r4, pc}
 80198b4:	0801cd08 	.word	0x0801cd08
 80198b8:	08019825 	.word	0x08019825

080198bc <__sfp>:
 80198bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198be:	4b1b      	ldr	r3, [pc, #108]	; (801992c <__sfp+0x70>)
 80198c0:	681e      	ldr	r6, [r3, #0]
 80198c2:	69b3      	ldr	r3, [r6, #24]
 80198c4:	4607      	mov	r7, r0
 80198c6:	b913      	cbnz	r3, 80198ce <__sfp+0x12>
 80198c8:	4630      	mov	r0, r6
 80198ca:	f7ff ffc7 	bl	801985c <__sinit>
 80198ce:	3648      	adds	r6, #72	; 0x48
 80198d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80198d4:	3b01      	subs	r3, #1
 80198d6:	d503      	bpl.n	80198e0 <__sfp+0x24>
 80198d8:	6833      	ldr	r3, [r6, #0]
 80198da:	b133      	cbz	r3, 80198ea <__sfp+0x2e>
 80198dc:	6836      	ldr	r6, [r6, #0]
 80198de:	e7f7      	b.n	80198d0 <__sfp+0x14>
 80198e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80198e4:	b16d      	cbz	r5, 8019902 <__sfp+0x46>
 80198e6:	3468      	adds	r4, #104	; 0x68
 80198e8:	e7f4      	b.n	80198d4 <__sfp+0x18>
 80198ea:	2104      	movs	r1, #4
 80198ec:	4638      	mov	r0, r7
 80198ee:	f7ff ff9f 	bl	8019830 <__sfmoreglue>
 80198f2:	6030      	str	r0, [r6, #0]
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d1f1      	bne.n	80198dc <__sfp+0x20>
 80198f8:	230c      	movs	r3, #12
 80198fa:	603b      	str	r3, [r7, #0]
 80198fc:	4604      	mov	r4, r0
 80198fe:	4620      	mov	r0, r4
 8019900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019902:	4b0b      	ldr	r3, [pc, #44]	; (8019930 <__sfp+0x74>)
 8019904:	6665      	str	r5, [r4, #100]	; 0x64
 8019906:	e9c4 5500 	strd	r5, r5, [r4]
 801990a:	60a5      	str	r5, [r4, #8]
 801990c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019910:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019914:	2208      	movs	r2, #8
 8019916:	4629      	mov	r1, r5
 8019918:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801991c:	f7ff fe32 	bl	8019584 <memset>
 8019920:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019924:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019928:	e7e9      	b.n	80198fe <__sfp+0x42>
 801992a:	bf00      	nop
 801992c:	0801cd08 	.word	0x0801cd08
 8019930:	ffff0001 	.word	0xffff0001

08019934 <_fwalk_reent>:
 8019934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019938:	4680      	mov	r8, r0
 801993a:	4689      	mov	r9, r1
 801993c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019940:	2600      	movs	r6, #0
 8019942:	b914      	cbnz	r4, 801994a <_fwalk_reent+0x16>
 8019944:	4630      	mov	r0, r6
 8019946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801994a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801994e:	3f01      	subs	r7, #1
 8019950:	d501      	bpl.n	8019956 <_fwalk_reent+0x22>
 8019952:	6824      	ldr	r4, [r4, #0]
 8019954:	e7f5      	b.n	8019942 <_fwalk_reent+0xe>
 8019956:	89ab      	ldrh	r3, [r5, #12]
 8019958:	2b01      	cmp	r3, #1
 801995a:	d907      	bls.n	801996c <_fwalk_reent+0x38>
 801995c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019960:	3301      	adds	r3, #1
 8019962:	d003      	beq.n	801996c <_fwalk_reent+0x38>
 8019964:	4629      	mov	r1, r5
 8019966:	4640      	mov	r0, r8
 8019968:	47c8      	blx	r9
 801996a:	4306      	orrs	r6, r0
 801996c:	3568      	adds	r5, #104	; 0x68
 801996e:	e7ee      	b.n	801994e <_fwalk_reent+0x1a>

08019970 <__malloc_lock>:
 8019970:	4770      	bx	lr

08019972 <__malloc_unlock>:
 8019972:	4770      	bx	lr

08019974 <__ssputs_r>:
 8019974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019978:	688e      	ldr	r6, [r1, #8]
 801997a:	429e      	cmp	r6, r3
 801997c:	4682      	mov	sl, r0
 801997e:	460c      	mov	r4, r1
 8019980:	4690      	mov	r8, r2
 8019982:	4699      	mov	r9, r3
 8019984:	d837      	bhi.n	80199f6 <__ssputs_r+0x82>
 8019986:	898a      	ldrh	r2, [r1, #12]
 8019988:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801998c:	d031      	beq.n	80199f2 <__ssputs_r+0x7e>
 801998e:	6825      	ldr	r5, [r4, #0]
 8019990:	6909      	ldr	r1, [r1, #16]
 8019992:	1a6f      	subs	r7, r5, r1
 8019994:	6965      	ldr	r5, [r4, #20]
 8019996:	2302      	movs	r3, #2
 8019998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801999c:	fb95 f5f3 	sdiv	r5, r5, r3
 80199a0:	f109 0301 	add.w	r3, r9, #1
 80199a4:	443b      	add	r3, r7
 80199a6:	429d      	cmp	r5, r3
 80199a8:	bf38      	it	cc
 80199aa:	461d      	movcc	r5, r3
 80199ac:	0553      	lsls	r3, r2, #21
 80199ae:	d530      	bpl.n	8019a12 <__ssputs_r+0x9e>
 80199b0:	4629      	mov	r1, r5
 80199b2:	f7ff fe3d 	bl	8019630 <_malloc_r>
 80199b6:	4606      	mov	r6, r0
 80199b8:	b950      	cbnz	r0, 80199d0 <__ssputs_r+0x5c>
 80199ba:	230c      	movs	r3, #12
 80199bc:	f8ca 3000 	str.w	r3, [sl]
 80199c0:	89a3      	ldrh	r3, [r4, #12]
 80199c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199c6:	81a3      	strh	r3, [r4, #12]
 80199c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80199cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199d0:	463a      	mov	r2, r7
 80199d2:	6921      	ldr	r1, [r4, #16]
 80199d4:	f7ff fdcb 	bl	801956e <memcpy>
 80199d8:	89a3      	ldrh	r3, [r4, #12]
 80199da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80199de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80199e2:	81a3      	strh	r3, [r4, #12]
 80199e4:	6126      	str	r6, [r4, #16]
 80199e6:	6165      	str	r5, [r4, #20]
 80199e8:	443e      	add	r6, r7
 80199ea:	1bed      	subs	r5, r5, r7
 80199ec:	6026      	str	r6, [r4, #0]
 80199ee:	60a5      	str	r5, [r4, #8]
 80199f0:	464e      	mov	r6, r9
 80199f2:	454e      	cmp	r6, r9
 80199f4:	d900      	bls.n	80199f8 <__ssputs_r+0x84>
 80199f6:	464e      	mov	r6, r9
 80199f8:	4632      	mov	r2, r6
 80199fa:	4641      	mov	r1, r8
 80199fc:	6820      	ldr	r0, [r4, #0]
 80199fe:	f000 fe1f 	bl	801a640 <memmove>
 8019a02:	68a3      	ldr	r3, [r4, #8]
 8019a04:	1b9b      	subs	r3, r3, r6
 8019a06:	60a3      	str	r3, [r4, #8]
 8019a08:	6823      	ldr	r3, [r4, #0]
 8019a0a:	441e      	add	r6, r3
 8019a0c:	6026      	str	r6, [r4, #0]
 8019a0e:	2000      	movs	r0, #0
 8019a10:	e7dc      	b.n	80199cc <__ssputs_r+0x58>
 8019a12:	462a      	mov	r2, r5
 8019a14:	f000 fe2d 	bl	801a672 <_realloc_r>
 8019a18:	4606      	mov	r6, r0
 8019a1a:	2800      	cmp	r0, #0
 8019a1c:	d1e2      	bne.n	80199e4 <__ssputs_r+0x70>
 8019a1e:	6921      	ldr	r1, [r4, #16]
 8019a20:	4650      	mov	r0, sl
 8019a22:	f7ff fdb7 	bl	8019594 <_free_r>
 8019a26:	e7c8      	b.n	80199ba <__ssputs_r+0x46>

08019a28 <_svfiprintf_r>:
 8019a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a2c:	461d      	mov	r5, r3
 8019a2e:	898b      	ldrh	r3, [r1, #12]
 8019a30:	061f      	lsls	r7, r3, #24
 8019a32:	b09d      	sub	sp, #116	; 0x74
 8019a34:	4680      	mov	r8, r0
 8019a36:	460c      	mov	r4, r1
 8019a38:	4616      	mov	r6, r2
 8019a3a:	d50f      	bpl.n	8019a5c <_svfiprintf_r+0x34>
 8019a3c:	690b      	ldr	r3, [r1, #16]
 8019a3e:	b96b      	cbnz	r3, 8019a5c <_svfiprintf_r+0x34>
 8019a40:	2140      	movs	r1, #64	; 0x40
 8019a42:	f7ff fdf5 	bl	8019630 <_malloc_r>
 8019a46:	6020      	str	r0, [r4, #0]
 8019a48:	6120      	str	r0, [r4, #16]
 8019a4a:	b928      	cbnz	r0, 8019a58 <_svfiprintf_r+0x30>
 8019a4c:	230c      	movs	r3, #12
 8019a4e:	f8c8 3000 	str.w	r3, [r8]
 8019a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a56:	e0c8      	b.n	8019bea <_svfiprintf_r+0x1c2>
 8019a58:	2340      	movs	r3, #64	; 0x40
 8019a5a:	6163      	str	r3, [r4, #20]
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8019a60:	2320      	movs	r3, #32
 8019a62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a66:	2330      	movs	r3, #48	; 0x30
 8019a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019a6c:	9503      	str	r5, [sp, #12]
 8019a6e:	f04f 0b01 	mov.w	fp, #1
 8019a72:	4637      	mov	r7, r6
 8019a74:	463d      	mov	r5, r7
 8019a76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019a7a:	b10b      	cbz	r3, 8019a80 <_svfiprintf_r+0x58>
 8019a7c:	2b25      	cmp	r3, #37	; 0x25
 8019a7e:	d13e      	bne.n	8019afe <_svfiprintf_r+0xd6>
 8019a80:	ebb7 0a06 	subs.w	sl, r7, r6
 8019a84:	d00b      	beq.n	8019a9e <_svfiprintf_r+0x76>
 8019a86:	4653      	mov	r3, sl
 8019a88:	4632      	mov	r2, r6
 8019a8a:	4621      	mov	r1, r4
 8019a8c:	4640      	mov	r0, r8
 8019a8e:	f7ff ff71 	bl	8019974 <__ssputs_r>
 8019a92:	3001      	adds	r0, #1
 8019a94:	f000 80a4 	beq.w	8019be0 <_svfiprintf_r+0x1b8>
 8019a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a9a:	4453      	add	r3, sl
 8019a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8019a9e:	783b      	ldrb	r3, [r7, #0]
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	f000 809d 	beq.w	8019be0 <_svfiprintf_r+0x1b8>
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ab0:	9304      	str	r3, [sp, #16]
 8019ab2:	9307      	str	r3, [sp, #28]
 8019ab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019ab8:	931a      	str	r3, [sp, #104]	; 0x68
 8019aba:	462f      	mov	r7, r5
 8019abc:	2205      	movs	r2, #5
 8019abe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019ac2:	4850      	ldr	r0, [pc, #320]	; (8019c04 <_svfiprintf_r+0x1dc>)
 8019ac4:	f7e6 fb94 	bl	80001f0 <memchr>
 8019ac8:	9b04      	ldr	r3, [sp, #16]
 8019aca:	b9d0      	cbnz	r0, 8019b02 <_svfiprintf_r+0xda>
 8019acc:	06d9      	lsls	r1, r3, #27
 8019ace:	bf44      	itt	mi
 8019ad0:	2220      	movmi	r2, #32
 8019ad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019ad6:	071a      	lsls	r2, r3, #28
 8019ad8:	bf44      	itt	mi
 8019ada:	222b      	movmi	r2, #43	; 0x2b
 8019adc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019ae0:	782a      	ldrb	r2, [r5, #0]
 8019ae2:	2a2a      	cmp	r2, #42	; 0x2a
 8019ae4:	d015      	beq.n	8019b12 <_svfiprintf_r+0xea>
 8019ae6:	9a07      	ldr	r2, [sp, #28]
 8019ae8:	462f      	mov	r7, r5
 8019aea:	2000      	movs	r0, #0
 8019aec:	250a      	movs	r5, #10
 8019aee:	4639      	mov	r1, r7
 8019af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019af4:	3b30      	subs	r3, #48	; 0x30
 8019af6:	2b09      	cmp	r3, #9
 8019af8:	d94d      	bls.n	8019b96 <_svfiprintf_r+0x16e>
 8019afa:	b1b8      	cbz	r0, 8019b2c <_svfiprintf_r+0x104>
 8019afc:	e00f      	b.n	8019b1e <_svfiprintf_r+0xf6>
 8019afe:	462f      	mov	r7, r5
 8019b00:	e7b8      	b.n	8019a74 <_svfiprintf_r+0x4c>
 8019b02:	4a40      	ldr	r2, [pc, #256]	; (8019c04 <_svfiprintf_r+0x1dc>)
 8019b04:	1a80      	subs	r0, r0, r2
 8019b06:	fa0b f000 	lsl.w	r0, fp, r0
 8019b0a:	4318      	orrs	r0, r3
 8019b0c:	9004      	str	r0, [sp, #16]
 8019b0e:	463d      	mov	r5, r7
 8019b10:	e7d3      	b.n	8019aba <_svfiprintf_r+0x92>
 8019b12:	9a03      	ldr	r2, [sp, #12]
 8019b14:	1d11      	adds	r1, r2, #4
 8019b16:	6812      	ldr	r2, [r2, #0]
 8019b18:	9103      	str	r1, [sp, #12]
 8019b1a:	2a00      	cmp	r2, #0
 8019b1c:	db01      	blt.n	8019b22 <_svfiprintf_r+0xfa>
 8019b1e:	9207      	str	r2, [sp, #28]
 8019b20:	e004      	b.n	8019b2c <_svfiprintf_r+0x104>
 8019b22:	4252      	negs	r2, r2
 8019b24:	f043 0302 	orr.w	r3, r3, #2
 8019b28:	9207      	str	r2, [sp, #28]
 8019b2a:	9304      	str	r3, [sp, #16]
 8019b2c:	783b      	ldrb	r3, [r7, #0]
 8019b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8019b30:	d10c      	bne.n	8019b4c <_svfiprintf_r+0x124>
 8019b32:	787b      	ldrb	r3, [r7, #1]
 8019b34:	2b2a      	cmp	r3, #42	; 0x2a
 8019b36:	d133      	bne.n	8019ba0 <_svfiprintf_r+0x178>
 8019b38:	9b03      	ldr	r3, [sp, #12]
 8019b3a:	1d1a      	adds	r2, r3, #4
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	9203      	str	r2, [sp, #12]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	bfb8      	it	lt
 8019b44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019b48:	3702      	adds	r7, #2
 8019b4a:	9305      	str	r3, [sp, #20]
 8019b4c:	4d2e      	ldr	r5, [pc, #184]	; (8019c08 <_svfiprintf_r+0x1e0>)
 8019b4e:	7839      	ldrb	r1, [r7, #0]
 8019b50:	2203      	movs	r2, #3
 8019b52:	4628      	mov	r0, r5
 8019b54:	f7e6 fb4c 	bl	80001f0 <memchr>
 8019b58:	b138      	cbz	r0, 8019b6a <_svfiprintf_r+0x142>
 8019b5a:	2340      	movs	r3, #64	; 0x40
 8019b5c:	1b40      	subs	r0, r0, r5
 8019b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8019b62:	9b04      	ldr	r3, [sp, #16]
 8019b64:	4303      	orrs	r3, r0
 8019b66:	3701      	adds	r7, #1
 8019b68:	9304      	str	r3, [sp, #16]
 8019b6a:	7839      	ldrb	r1, [r7, #0]
 8019b6c:	4827      	ldr	r0, [pc, #156]	; (8019c0c <_svfiprintf_r+0x1e4>)
 8019b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019b72:	2206      	movs	r2, #6
 8019b74:	1c7e      	adds	r6, r7, #1
 8019b76:	f7e6 fb3b 	bl	80001f0 <memchr>
 8019b7a:	2800      	cmp	r0, #0
 8019b7c:	d038      	beq.n	8019bf0 <_svfiprintf_r+0x1c8>
 8019b7e:	4b24      	ldr	r3, [pc, #144]	; (8019c10 <_svfiprintf_r+0x1e8>)
 8019b80:	bb13      	cbnz	r3, 8019bc8 <_svfiprintf_r+0x1a0>
 8019b82:	9b03      	ldr	r3, [sp, #12]
 8019b84:	3307      	adds	r3, #7
 8019b86:	f023 0307 	bic.w	r3, r3, #7
 8019b8a:	3308      	adds	r3, #8
 8019b8c:	9303      	str	r3, [sp, #12]
 8019b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b90:	444b      	add	r3, r9
 8019b92:	9309      	str	r3, [sp, #36]	; 0x24
 8019b94:	e76d      	b.n	8019a72 <_svfiprintf_r+0x4a>
 8019b96:	fb05 3202 	mla	r2, r5, r2, r3
 8019b9a:	2001      	movs	r0, #1
 8019b9c:	460f      	mov	r7, r1
 8019b9e:	e7a6      	b.n	8019aee <_svfiprintf_r+0xc6>
 8019ba0:	2300      	movs	r3, #0
 8019ba2:	3701      	adds	r7, #1
 8019ba4:	9305      	str	r3, [sp, #20]
 8019ba6:	4619      	mov	r1, r3
 8019ba8:	250a      	movs	r5, #10
 8019baa:	4638      	mov	r0, r7
 8019bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019bb0:	3a30      	subs	r2, #48	; 0x30
 8019bb2:	2a09      	cmp	r2, #9
 8019bb4:	d903      	bls.n	8019bbe <_svfiprintf_r+0x196>
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d0c8      	beq.n	8019b4c <_svfiprintf_r+0x124>
 8019bba:	9105      	str	r1, [sp, #20]
 8019bbc:	e7c6      	b.n	8019b4c <_svfiprintf_r+0x124>
 8019bbe:	fb05 2101 	mla	r1, r5, r1, r2
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	4607      	mov	r7, r0
 8019bc6:	e7f0      	b.n	8019baa <_svfiprintf_r+0x182>
 8019bc8:	ab03      	add	r3, sp, #12
 8019bca:	9300      	str	r3, [sp, #0]
 8019bcc:	4622      	mov	r2, r4
 8019bce:	4b11      	ldr	r3, [pc, #68]	; (8019c14 <_svfiprintf_r+0x1ec>)
 8019bd0:	a904      	add	r1, sp, #16
 8019bd2:	4640      	mov	r0, r8
 8019bd4:	f3af 8000 	nop.w
 8019bd8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8019bdc:	4681      	mov	r9, r0
 8019bde:	d1d6      	bne.n	8019b8e <_svfiprintf_r+0x166>
 8019be0:	89a3      	ldrh	r3, [r4, #12]
 8019be2:	065b      	lsls	r3, r3, #25
 8019be4:	f53f af35 	bmi.w	8019a52 <_svfiprintf_r+0x2a>
 8019be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bea:	b01d      	add	sp, #116	; 0x74
 8019bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bf0:	ab03      	add	r3, sp, #12
 8019bf2:	9300      	str	r3, [sp, #0]
 8019bf4:	4622      	mov	r2, r4
 8019bf6:	4b07      	ldr	r3, [pc, #28]	; (8019c14 <_svfiprintf_r+0x1ec>)
 8019bf8:	a904      	add	r1, sp, #16
 8019bfa:	4640      	mov	r0, r8
 8019bfc:	f000 f9c2 	bl	8019f84 <_printf_i>
 8019c00:	e7ea      	b.n	8019bd8 <_svfiprintf_r+0x1b0>
 8019c02:	bf00      	nop
 8019c04:	0801cd6c 	.word	0x0801cd6c
 8019c08:	0801cd72 	.word	0x0801cd72
 8019c0c:	0801cd76 	.word	0x0801cd76
 8019c10:	00000000 	.word	0x00000000
 8019c14:	08019975 	.word	0x08019975

08019c18 <__sfputc_r>:
 8019c18:	6893      	ldr	r3, [r2, #8]
 8019c1a:	3b01      	subs	r3, #1
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	b410      	push	{r4}
 8019c20:	6093      	str	r3, [r2, #8]
 8019c22:	da08      	bge.n	8019c36 <__sfputc_r+0x1e>
 8019c24:	6994      	ldr	r4, [r2, #24]
 8019c26:	42a3      	cmp	r3, r4
 8019c28:	db01      	blt.n	8019c2e <__sfputc_r+0x16>
 8019c2a:	290a      	cmp	r1, #10
 8019c2c:	d103      	bne.n	8019c36 <__sfputc_r+0x1e>
 8019c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c32:	f000 bafd 	b.w	801a230 <__swbuf_r>
 8019c36:	6813      	ldr	r3, [r2, #0]
 8019c38:	1c58      	adds	r0, r3, #1
 8019c3a:	6010      	str	r0, [r2, #0]
 8019c3c:	7019      	strb	r1, [r3, #0]
 8019c3e:	4608      	mov	r0, r1
 8019c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c44:	4770      	bx	lr

08019c46 <__sfputs_r>:
 8019c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c48:	4606      	mov	r6, r0
 8019c4a:	460f      	mov	r7, r1
 8019c4c:	4614      	mov	r4, r2
 8019c4e:	18d5      	adds	r5, r2, r3
 8019c50:	42ac      	cmp	r4, r5
 8019c52:	d101      	bne.n	8019c58 <__sfputs_r+0x12>
 8019c54:	2000      	movs	r0, #0
 8019c56:	e007      	b.n	8019c68 <__sfputs_r+0x22>
 8019c58:	463a      	mov	r2, r7
 8019c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c5e:	4630      	mov	r0, r6
 8019c60:	f7ff ffda 	bl	8019c18 <__sfputc_r>
 8019c64:	1c43      	adds	r3, r0, #1
 8019c66:	d1f3      	bne.n	8019c50 <__sfputs_r+0xa>
 8019c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019c6c <_vfiprintf_r>:
 8019c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c70:	460c      	mov	r4, r1
 8019c72:	b09d      	sub	sp, #116	; 0x74
 8019c74:	4617      	mov	r7, r2
 8019c76:	461d      	mov	r5, r3
 8019c78:	4606      	mov	r6, r0
 8019c7a:	b118      	cbz	r0, 8019c84 <_vfiprintf_r+0x18>
 8019c7c:	6983      	ldr	r3, [r0, #24]
 8019c7e:	b90b      	cbnz	r3, 8019c84 <_vfiprintf_r+0x18>
 8019c80:	f7ff fdec 	bl	801985c <__sinit>
 8019c84:	4b7c      	ldr	r3, [pc, #496]	; (8019e78 <_vfiprintf_r+0x20c>)
 8019c86:	429c      	cmp	r4, r3
 8019c88:	d158      	bne.n	8019d3c <_vfiprintf_r+0xd0>
 8019c8a:	6874      	ldr	r4, [r6, #4]
 8019c8c:	89a3      	ldrh	r3, [r4, #12]
 8019c8e:	0718      	lsls	r0, r3, #28
 8019c90:	d55e      	bpl.n	8019d50 <_vfiprintf_r+0xe4>
 8019c92:	6923      	ldr	r3, [r4, #16]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d05b      	beq.n	8019d50 <_vfiprintf_r+0xe4>
 8019c98:	2300      	movs	r3, #0
 8019c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8019c9c:	2320      	movs	r3, #32
 8019c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ca2:	2330      	movs	r3, #48	; 0x30
 8019ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ca8:	9503      	str	r5, [sp, #12]
 8019caa:	f04f 0b01 	mov.w	fp, #1
 8019cae:	46b8      	mov	r8, r7
 8019cb0:	4645      	mov	r5, r8
 8019cb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019cb6:	b10b      	cbz	r3, 8019cbc <_vfiprintf_r+0x50>
 8019cb8:	2b25      	cmp	r3, #37	; 0x25
 8019cba:	d154      	bne.n	8019d66 <_vfiprintf_r+0xfa>
 8019cbc:	ebb8 0a07 	subs.w	sl, r8, r7
 8019cc0:	d00b      	beq.n	8019cda <_vfiprintf_r+0x6e>
 8019cc2:	4653      	mov	r3, sl
 8019cc4:	463a      	mov	r2, r7
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	4630      	mov	r0, r6
 8019cca:	f7ff ffbc 	bl	8019c46 <__sfputs_r>
 8019cce:	3001      	adds	r0, #1
 8019cd0:	f000 80c2 	beq.w	8019e58 <_vfiprintf_r+0x1ec>
 8019cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cd6:	4453      	add	r3, sl
 8019cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8019cda:	f898 3000 	ldrb.w	r3, [r8]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	f000 80ba 	beq.w	8019e58 <_vfiprintf_r+0x1ec>
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019cee:	9304      	str	r3, [sp, #16]
 8019cf0:	9307      	str	r3, [sp, #28]
 8019cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8019cf8:	46a8      	mov	r8, r5
 8019cfa:	2205      	movs	r2, #5
 8019cfc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019d00:	485e      	ldr	r0, [pc, #376]	; (8019e7c <_vfiprintf_r+0x210>)
 8019d02:	f7e6 fa75 	bl	80001f0 <memchr>
 8019d06:	9b04      	ldr	r3, [sp, #16]
 8019d08:	bb78      	cbnz	r0, 8019d6a <_vfiprintf_r+0xfe>
 8019d0a:	06d9      	lsls	r1, r3, #27
 8019d0c:	bf44      	itt	mi
 8019d0e:	2220      	movmi	r2, #32
 8019d10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019d14:	071a      	lsls	r2, r3, #28
 8019d16:	bf44      	itt	mi
 8019d18:	222b      	movmi	r2, #43	; 0x2b
 8019d1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019d1e:	782a      	ldrb	r2, [r5, #0]
 8019d20:	2a2a      	cmp	r2, #42	; 0x2a
 8019d22:	d02a      	beq.n	8019d7a <_vfiprintf_r+0x10e>
 8019d24:	9a07      	ldr	r2, [sp, #28]
 8019d26:	46a8      	mov	r8, r5
 8019d28:	2000      	movs	r0, #0
 8019d2a:	250a      	movs	r5, #10
 8019d2c:	4641      	mov	r1, r8
 8019d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d32:	3b30      	subs	r3, #48	; 0x30
 8019d34:	2b09      	cmp	r3, #9
 8019d36:	d969      	bls.n	8019e0c <_vfiprintf_r+0x1a0>
 8019d38:	b360      	cbz	r0, 8019d94 <_vfiprintf_r+0x128>
 8019d3a:	e024      	b.n	8019d86 <_vfiprintf_r+0x11a>
 8019d3c:	4b50      	ldr	r3, [pc, #320]	; (8019e80 <_vfiprintf_r+0x214>)
 8019d3e:	429c      	cmp	r4, r3
 8019d40:	d101      	bne.n	8019d46 <_vfiprintf_r+0xda>
 8019d42:	68b4      	ldr	r4, [r6, #8]
 8019d44:	e7a2      	b.n	8019c8c <_vfiprintf_r+0x20>
 8019d46:	4b4f      	ldr	r3, [pc, #316]	; (8019e84 <_vfiprintf_r+0x218>)
 8019d48:	429c      	cmp	r4, r3
 8019d4a:	bf08      	it	eq
 8019d4c:	68f4      	ldreq	r4, [r6, #12]
 8019d4e:	e79d      	b.n	8019c8c <_vfiprintf_r+0x20>
 8019d50:	4621      	mov	r1, r4
 8019d52:	4630      	mov	r0, r6
 8019d54:	f000 fad0 	bl	801a2f8 <__swsetup_r>
 8019d58:	2800      	cmp	r0, #0
 8019d5a:	d09d      	beq.n	8019c98 <_vfiprintf_r+0x2c>
 8019d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d60:	b01d      	add	sp, #116	; 0x74
 8019d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d66:	46a8      	mov	r8, r5
 8019d68:	e7a2      	b.n	8019cb0 <_vfiprintf_r+0x44>
 8019d6a:	4a44      	ldr	r2, [pc, #272]	; (8019e7c <_vfiprintf_r+0x210>)
 8019d6c:	1a80      	subs	r0, r0, r2
 8019d6e:	fa0b f000 	lsl.w	r0, fp, r0
 8019d72:	4318      	orrs	r0, r3
 8019d74:	9004      	str	r0, [sp, #16]
 8019d76:	4645      	mov	r5, r8
 8019d78:	e7be      	b.n	8019cf8 <_vfiprintf_r+0x8c>
 8019d7a:	9a03      	ldr	r2, [sp, #12]
 8019d7c:	1d11      	adds	r1, r2, #4
 8019d7e:	6812      	ldr	r2, [r2, #0]
 8019d80:	9103      	str	r1, [sp, #12]
 8019d82:	2a00      	cmp	r2, #0
 8019d84:	db01      	blt.n	8019d8a <_vfiprintf_r+0x11e>
 8019d86:	9207      	str	r2, [sp, #28]
 8019d88:	e004      	b.n	8019d94 <_vfiprintf_r+0x128>
 8019d8a:	4252      	negs	r2, r2
 8019d8c:	f043 0302 	orr.w	r3, r3, #2
 8019d90:	9207      	str	r2, [sp, #28]
 8019d92:	9304      	str	r3, [sp, #16]
 8019d94:	f898 3000 	ldrb.w	r3, [r8]
 8019d98:	2b2e      	cmp	r3, #46	; 0x2e
 8019d9a:	d10e      	bne.n	8019dba <_vfiprintf_r+0x14e>
 8019d9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019da0:	2b2a      	cmp	r3, #42	; 0x2a
 8019da2:	d138      	bne.n	8019e16 <_vfiprintf_r+0x1aa>
 8019da4:	9b03      	ldr	r3, [sp, #12]
 8019da6:	1d1a      	adds	r2, r3, #4
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	9203      	str	r2, [sp, #12]
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	bfb8      	it	lt
 8019db0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019db4:	f108 0802 	add.w	r8, r8, #2
 8019db8:	9305      	str	r3, [sp, #20]
 8019dba:	4d33      	ldr	r5, [pc, #204]	; (8019e88 <_vfiprintf_r+0x21c>)
 8019dbc:	f898 1000 	ldrb.w	r1, [r8]
 8019dc0:	2203      	movs	r2, #3
 8019dc2:	4628      	mov	r0, r5
 8019dc4:	f7e6 fa14 	bl	80001f0 <memchr>
 8019dc8:	b140      	cbz	r0, 8019ddc <_vfiprintf_r+0x170>
 8019dca:	2340      	movs	r3, #64	; 0x40
 8019dcc:	1b40      	subs	r0, r0, r5
 8019dce:	fa03 f000 	lsl.w	r0, r3, r0
 8019dd2:	9b04      	ldr	r3, [sp, #16]
 8019dd4:	4303      	orrs	r3, r0
 8019dd6:	f108 0801 	add.w	r8, r8, #1
 8019dda:	9304      	str	r3, [sp, #16]
 8019ddc:	f898 1000 	ldrb.w	r1, [r8]
 8019de0:	482a      	ldr	r0, [pc, #168]	; (8019e8c <_vfiprintf_r+0x220>)
 8019de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019de6:	2206      	movs	r2, #6
 8019de8:	f108 0701 	add.w	r7, r8, #1
 8019dec:	f7e6 fa00 	bl	80001f0 <memchr>
 8019df0:	2800      	cmp	r0, #0
 8019df2:	d037      	beq.n	8019e64 <_vfiprintf_r+0x1f8>
 8019df4:	4b26      	ldr	r3, [pc, #152]	; (8019e90 <_vfiprintf_r+0x224>)
 8019df6:	bb1b      	cbnz	r3, 8019e40 <_vfiprintf_r+0x1d4>
 8019df8:	9b03      	ldr	r3, [sp, #12]
 8019dfa:	3307      	adds	r3, #7
 8019dfc:	f023 0307 	bic.w	r3, r3, #7
 8019e00:	3308      	adds	r3, #8
 8019e02:	9303      	str	r3, [sp, #12]
 8019e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e06:	444b      	add	r3, r9
 8019e08:	9309      	str	r3, [sp, #36]	; 0x24
 8019e0a:	e750      	b.n	8019cae <_vfiprintf_r+0x42>
 8019e0c:	fb05 3202 	mla	r2, r5, r2, r3
 8019e10:	2001      	movs	r0, #1
 8019e12:	4688      	mov	r8, r1
 8019e14:	e78a      	b.n	8019d2c <_vfiprintf_r+0xc0>
 8019e16:	2300      	movs	r3, #0
 8019e18:	f108 0801 	add.w	r8, r8, #1
 8019e1c:	9305      	str	r3, [sp, #20]
 8019e1e:	4619      	mov	r1, r3
 8019e20:	250a      	movs	r5, #10
 8019e22:	4640      	mov	r0, r8
 8019e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e28:	3a30      	subs	r2, #48	; 0x30
 8019e2a:	2a09      	cmp	r2, #9
 8019e2c:	d903      	bls.n	8019e36 <_vfiprintf_r+0x1ca>
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d0c3      	beq.n	8019dba <_vfiprintf_r+0x14e>
 8019e32:	9105      	str	r1, [sp, #20]
 8019e34:	e7c1      	b.n	8019dba <_vfiprintf_r+0x14e>
 8019e36:	fb05 2101 	mla	r1, r5, r1, r2
 8019e3a:	2301      	movs	r3, #1
 8019e3c:	4680      	mov	r8, r0
 8019e3e:	e7f0      	b.n	8019e22 <_vfiprintf_r+0x1b6>
 8019e40:	ab03      	add	r3, sp, #12
 8019e42:	9300      	str	r3, [sp, #0]
 8019e44:	4622      	mov	r2, r4
 8019e46:	4b13      	ldr	r3, [pc, #76]	; (8019e94 <_vfiprintf_r+0x228>)
 8019e48:	a904      	add	r1, sp, #16
 8019e4a:	4630      	mov	r0, r6
 8019e4c:	f3af 8000 	nop.w
 8019e50:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8019e54:	4681      	mov	r9, r0
 8019e56:	d1d5      	bne.n	8019e04 <_vfiprintf_r+0x198>
 8019e58:	89a3      	ldrh	r3, [r4, #12]
 8019e5a:	065b      	lsls	r3, r3, #25
 8019e5c:	f53f af7e 	bmi.w	8019d5c <_vfiprintf_r+0xf0>
 8019e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e62:	e77d      	b.n	8019d60 <_vfiprintf_r+0xf4>
 8019e64:	ab03      	add	r3, sp, #12
 8019e66:	9300      	str	r3, [sp, #0]
 8019e68:	4622      	mov	r2, r4
 8019e6a:	4b0a      	ldr	r3, [pc, #40]	; (8019e94 <_vfiprintf_r+0x228>)
 8019e6c:	a904      	add	r1, sp, #16
 8019e6e:	4630      	mov	r0, r6
 8019e70:	f000 f888 	bl	8019f84 <_printf_i>
 8019e74:	e7ec      	b.n	8019e50 <_vfiprintf_r+0x1e4>
 8019e76:	bf00      	nop
 8019e78:	0801cd2c 	.word	0x0801cd2c
 8019e7c:	0801cd6c 	.word	0x0801cd6c
 8019e80:	0801cd4c 	.word	0x0801cd4c
 8019e84:	0801cd0c 	.word	0x0801cd0c
 8019e88:	0801cd72 	.word	0x0801cd72
 8019e8c:	0801cd76 	.word	0x0801cd76
 8019e90:	00000000 	.word	0x00000000
 8019e94:	08019c47 	.word	0x08019c47

08019e98 <_printf_common>:
 8019e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e9c:	4691      	mov	r9, r2
 8019e9e:	461f      	mov	r7, r3
 8019ea0:	688a      	ldr	r2, [r1, #8]
 8019ea2:	690b      	ldr	r3, [r1, #16]
 8019ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ea8:	4293      	cmp	r3, r2
 8019eaa:	bfb8      	it	lt
 8019eac:	4613      	movlt	r3, r2
 8019eae:	f8c9 3000 	str.w	r3, [r9]
 8019eb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019eb6:	4606      	mov	r6, r0
 8019eb8:	460c      	mov	r4, r1
 8019eba:	b112      	cbz	r2, 8019ec2 <_printf_common+0x2a>
 8019ebc:	3301      	adds	r3, #1
 8019ebe:	f8c9 3000 	str.w	r3, [r9]
 8019ec2:	6823      	ldr	r3, [r4, #0]
 8019ec4:	0699      	lsls	r1, r3, #26
 8019ec6:	bf42      	ittt	mi
 8019ec8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019ecc:	3302      	addmi	r3, #2
 8019ece:	f8c9 3000 	strmi.w	r3, [r9]
 8019ed2:	6825      	ldr	r5, [r4, #0]
 8019ed4:	f015 0506 	ands.w	r5, r5, #6
 8019ed8:	d107      	bne.n	8019eea <_printf_common+0x52>
 8019eda:	f104 0a19 	add.w	sl, r4, #25
 8019ede:	68e3      	ldr	r3, [r4, #12]
 8019ee0:	f8d9 2000 	ldr.w	r2, [r9]
 8019ee4:	1a9b      	subs	r3, r3, r2
 8019ee6:	42ab      	cmp	r3, r5
 8019ee8:	dc28      	bgt.n	8019f3c <_printf_common+0xa4>
 8019eea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019eee:	6822      	ldr	r2, [r4, #0]
 8019ef0:	3300      	adds	r3, #0
 8019ef2:	bf18      	it	ne
 8019ef4:	2301      	movne	r3, #1
 8019ef6:	0692      	lsls	r2, r2, #26
 8019ef8:	d42d      	bmi.n	8019f56 <_printf_common+0xbe>
 8019efa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019efe:	4639      	mov	r1, r7
 8019f00:	4630      	mov	r0, r6
 8019f02:	47c0      	blx	r8
 8019f04:	3001      	adds	r0, #1
 8019f06:	d020      	beq.n	8019f4a <_printf_common+0xb2>
 8019f08:	6823      	ldr	r3, [r4, #0]
 8019f0a:	68e5      	ldr	r5, [r4, #12]
 8019f0c:	f8d9 2000 	ldr.w	r2, [r9]
 8019f10:	f003 0306 	and.w	r3, r3, #6
 8019f14:	2b04      	cmp	r3, #4
 8019f16:	bf08      	it	eq
 8019f18:	1aad      	subeq	r5, r5, r2
 8019f1a:	68a3      	ldr	r3, [r4, #8]
 8019f1c:	6922      	ldr	r2, [r4, #16]
 8019f1e:	bf0c      	ite	eq
 8019f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019f24:	2500      	movne	r5, #0
 8019f26:	4293      	cmp	r3, r2
 8019f28:	bfc4      	itt	gt
 8019f2a:	1a9b      	subgt	r3, r3, r2
 8019f2c:	18ed      	addgt	r5, r5, r3
 8019f2e:	f04f 0900 	mov.w	r9, #0
 8019f32:	341a      	adds	r4, #26
 8019f34:	454d      	cmp	r5, r9
 8019f36:	d11a      	bne.n	8019f6e <_printf_common+0xd6>
 8019f38:	2000      	movs	r0, #0
 8019f3a:	e008      	b.n	8019f4e <_printf_common+0xb6>
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	4652      	mov	r2, sl
 8019f40:	4639      	mov	r1, r7
 8019f42:	4630      	mov	r0, r6
 8019f44:	47c0      	blx	r8
 8019f46:	3001      	adds	r0, #1
 8019f48:	d103      	bne.n	8019f52 <_printf_common+0xba>
 8019f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f52:	3501      	adds	r5, #1
 8019f54:	e7c3      	b.n	8019ede <_printf_common+0x46>
 8019f56:	18e1      	adds	r1, r4, r3
 8019f58:	1c5a      	adds	r2, r3, #1
 8019f5a:	2030      	movs	r0, #48	; 0x30
 8019f5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019f60:	4422      	add	r2, r4
 8019f62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019f66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019f6a:	3302      	adds	r3, #2
 8019f6c:	e7c5      	b.n	8019efa <_printf_common+0x62>
 8019f6e:	2301      	movs	r3, #1
 8019f70:	4622      	mov	r2, r4
 8019f72:	4639      	mov	r1, r7
 8019f74:	4630      	mov	r0, r6
 8019f76:	47c0      	blx	r8
 8019f78:	3001      	adds	r0, #1
 8019f7a:	d0e6      	beq.n	8019f4a <_printf_common+0xb2>
 8019f7c:	f109 0901 	add.w	r9, r9, #1
 8019f80:	e7d8      	b.n	8019f34 <_printf_common+0x9c>
	...

08019f84 <_printf_i>:
 8019f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019f8c:	460c      	mov	r4, r1
 8019f8e:	7e09      	ldrb	r1, [r1, #24]
 8019f90:	b085      	sub	sp, #20
 8019f92:	296e      	cmp	r1, #110	; 0x6e
 8019f94:	4617      	mov	r7, r2
 8019f96:	4606      	mov	r6, r0
 8019f98:	4698      	mov	r8, r3
 8019f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019f9c:	f000 80b3 	beq.w	801a106 <_printf_i+0x182>
 8019fa0:	d822      	bhi.n	8019fe8 <_printf_i+0x64>
 8019fa2:	2963      	cmp	r1, #99	; 0x63
 8019fa4:	d036      	beq.n	801a014 <_printf_i+0x90>
 8019fa6:	d80a      	bhi.n	8019fbe <_printf_i+0x3a>
 8019fa8:	2900      	cmp	r1, #0
 8019faa:	f000 80b9 	beq.w	801a120 <_printf_i+0x19c>
 8019fae:	2958      	cmp	r1, #88	; 0x58
 8019fb0:	f000 8083 	beq.w	801a0ba <_printf_i+0x136>
 8019fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019fbc:	e032      	b.n	801a024 <_printf_i+0xa0>
 8019fbe:	2964      	cmp	r1, #100	; 0x64
 8019fc0:	d001      	beq.n	8019fc6 <_printf_i+0x42>
 8019fc2:	2969      	cmp	r1, #105	; 0x69
 8019fc4:	d1f6      	bne.n	8019fb4 <_printf_i+0x30>
 8019fc6:	6820      	ldr	r0, [r4, #0]
 8019fc8:	6813      	ldr	r3, [r2, #0]
 8019fca:	0605      	lsls	r5, r0, #24
 8019fcc:	f103 0104 	add.w	r1, r3, #4
 8019fd0:	d52a      	bpl.n	801a028 <_printf_i+0xa4>
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	6011      	str	r1, [r2, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	da03      	bge.n	8019fe2 <_printf_i+0x5e>
 8019fda:	222d      	movs	r2, #45	; 0x2d
 8019fdc:	425b      	negs	r3, r3
 8019fde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019fe2:	486f      	ldr	r0, [pc, #444]	; (801a1a0 <_printf_i+0x21c>)
 8019fe4:	220a      	movs	r2, #10
 8019fe6:	e039      	b.n	801a05c <_printf_i+0xd8>
 8019fe8:	2973      	cmp	r1, #115	; 0x73
 8019fea:	f000 809d 	beq.w	801a128 <_printf_i+0x1a4>
 8019fee:	d808      	bhi.n	801a002 <_printf_i+0x7e>
 8019ff0:	296f      	cmp	r1, #111	; 0x6f
 8019ff2:	d020      	beq.n	801a036 <_printf_i+0xb2>
 8019ff4:	2970      	cmp	r1, #112	; 0x70
 8019ff6:	d1dd      	bne.n	8019fb4 <_printf_i+0x30>
 8019ff8:	6823      	ldr	r3, [r4, #0]
 8019ffa:	f043 0320 	orr.w	r3, r3, #32
 8019ffe:	6023      	str	r3, [r4, #0]
 801a000:	e003      	b.n	801a00a <_printf_i+0x86>
 801a002:	2975      	cmp	r1, #117	; 0x75
 801a004:	d017      	beq.n	801a036 <_printf_i+0xb2>
 801a006:	2978      	cmp	r1, #120	; 0x78
 801a008:	d1d4      	bne.n	8019fb4 <_printf_i+0x30>
 801a00a:	2378      	movs	r3, #120	; 0x78
 801a00c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a010:	4864      	ldr	r0, [pc, #400]	; (801a1a4 <_printf_i+0x220>)
 801a012:	e055      	b.n	801a0c0 <_printf_i+0x13c>
 801a014:	6813      	ldr	r3, [r2, #0]
 801a016:	1d19      	adds	r1, r3, #4
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	6011      	str	r1, [r2, #0]
 801a01c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a024:	2301      	movs	r3, #1
 801a026:	e08c      	b.n	801a142 <_printf_i+0x1be>
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	6011      	str	r1, [r2, #0]
 801a02c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a030:	bf18      	it	ne
 801a032:	b21b      	sxthne	r3, r3
 801a034:	e7cf      	b.n	8019fd6 <_printf_i+0x52>
 801a036:	6813      	ldr	r3, [r2, #0]
 801a038:	6825      	ldr	r5, [r4, #0]
 801a03a:	1d18      	adds	r0, r3, #4
 801a03c:	6010      	str	r0, [r2, #0]
 801a03e:	0628      	lsls	r0, r5, #24
 801a040:	d501      	bpl.n	801a046 <_printf_i+0xc2>
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	e002      	b.n	801a04c <_printf_i+0xc8>
 801a046:	0668      	lsls	r0, r5, #25
 801a048:	d5fb      	bpl.n	801a042 <_printf_i+0xbe>
 801a04a:	881b      	ldrh	r3, [r3, #0]
 801a04c:	4854      	ldr	r0, [pc, #336]	; (801a1a0 <_printf_i+0x21c>)
 801a04e:	296f      	cmp	r1, #111	; 0x6f
 801a050:	bf14      	ite	ne
 801a052:	220a      	movne	r2, #10
 801a054:	2208      	moveq	r2, #8
 801a056:	2100      	movs	r1, #0
 801a058:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a05c:	6865      	ldr	r5, [r4, #4]
 801a05e:	60a5      	str	r5, [r4, #8]
 801a060:	2d00      	cmp	r5, #0
 801a062:	f2c0 8095 	blt.w	801a190 <_printf_i+0x20c>
 801a066:	6821      	ldr	r1, [r4, #0]
 801a068:	f021 0104 	bic.w	r1, r1, #4
 801a06c:	6021      	str	r1, [r4, #0]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d13d      	bne.n	801a0ee <_printf_i+0x16a>
 801a072:	2d00      	cmp	r5, #0
 801a074:	f040 808e 	bne.w	801a194 <_printf_i+0x210>
 801a078:	4665      	mov	r5, ip
 801a07a:	2a08      	cmp	r2, #8
 801a07c:	d10b      	bne.n	801a096 <_printf_i+0x112>
 801a07e:	6823      	ldr	r3, [r4, #0]
 801a080:	07db      	lsls	r3, r3, #31
 801a082:	d508      	bpl.n	801a096 <_printf_i+0x112>
 801a084:	6923      	ldr	r3, [r4, #16]
 801a086:	6862      	ldr	r2, [r4, #4]
 801a088:	429a      	cmp	r2, r3
 801a08a:	bfde      	ittt	le
 801a08c:	2330      	movle	r3, #48	; 0x30
 801a08e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a092:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a096:	ebac 0305 	sub.w	r3, ip, r5
 801a09a:	6123      	str	r3, [r4, #16]
 801a09c:	f8cd 8000 	str.w	r8, [sp]
 801a0a0:	463b      	mov	r3, r7
 801a0a2:	aa03      	add	r2, sp, #12
 801a0a4:	4621      	mov	r1, r4
 801a0a6:	4630      	mov	r0, r6
 801a0a8:	f7ff fef6 	bl	8019e98 <_printf_common>
 801a0ac:	3001      	adds	r0, #1
 801a0ae:	d14d      	bne.n	801a14c <_printf_i+0x1c8>
 801a0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0b4:	b005      	add	sp, #20
 801a0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0ba:	4839      	ldr	r0, [pc, #228]	; (801a1a0 <_printf_i+0x21c>)
 801a0bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a0c0:	6813      	ldr	r3, [r2, #0]
 801a0c2:	6821      	ldr	r1, [r4, #0]
 801a0c4:	1d1d      	adds	r5, r3, #4
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	6015      	str	r5, [r2, #0]
 801a0ca:	060a      	lsls	r2, r1, #24
 801a0cc:	d50b      	bpl.n	801a0e6 <_printf_i+0x162>
 801a0ce:	07ca      	lsls	r2, r1, #31
 801a0d0:	bf44      	itt	mi
 801a0d2:	f041 0120 	orrmi.w	r1, r1, #32
 801a0d6:	6021      	strmi	r1, [r4, #0]
 801a0d8:	b91b      	cbnz	r3, 801a0e2 <_printf_i+0x15e>
 801a0da:	6822      	ldr	r2, [r4, #0]
 801a0dc:	f022 0220 	bic.w	r2, r2, #32
 801a0e0:	6022      	str	r2, [r4, #0]
 801a0e2:	2210      	movs	r2, #16
 801a0e4:	e7b7      	b.n	801a056 <_printf_i+0xd2>
 801a0e6:	064d      	lsls	r5, r1, #25
 801a0e8:	bf48      	it	mi
 801a0ea:	b29b      	uxthmi	r3, r3
 801a0ec:	e7ef      	b.n	801a0ce <_printf_i+0x14a>
 801a0ee:	4665      	mov	r5, ip
 801a0f0:	fbb3 f1f2 	udiv	r1, r3, r2
 801a0f4:	fb02 3311 	mls	r3, r2, r1, r3
 801a0f8:	5cc3      	ldrb	r3, [r0, r3]
 801a0fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a0fe:	460b      	mov	r3, r1
 801a100:	2900      	cmp	r1, #0
 801a102:	d1f5      	bne.n	801a0f0 <_printf_i+0x16c>
 801a104:	e7b9      	b.n	801a07a <_printf_i+0xf6>
 801a106:	6813      	ldr	r3, [r2, #0]
 801a108:	6825      	ldr	r5, [r4, #0]
 801a10a:	6961      	ldr	r1, [r4, #20]
 801a10c:	1d18      	adds	r0, r3, #4
 801a10e:	6010      	str	r0, [r2, #0]
 801a110:	0628      	lsls	r0, r5, #24
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	d501      	bpl.n	801a11a <_printf_i+0x196>
 801a116:	6019      	str	r1, [r3, #0]
 801a118:	e002      	b.n	801a120 <_printf_i+0x19c>
 801a11a:	066a      	lsls	r2, r5, #25
 801a11c:	d5fb      	bpl.n	801a116 <_printf_i+0x192>
 801a11e:	8019      	strh	r1, [r3, #0]
 801a120:	2300      	movs	r3, #0
 801a122:	6123      	str	r3, [r4, #16]
 801a124:	4665      	mov	r5, ip
 801a126:	e7b9      	b.n	801a09c <_printf_i+0x118>
 801a128:	6813      	ldr	r3, [r2, #0]
 801a12a:	1d19      	adds	r1, r3, #4
 801a12c:	6011      	str	r1, [r2, #0]
 801a12e:	681d      	ldr	r5, [r3, #0]
 801a130:	6862      	ldr	r2, [r4, #4]
 801a132:	2100      	movs	r1, #0
 801a134:	4628      	mov	r0, r5
 801a136:	f7e6 f85b 	bl	80001f0 <memchr>
 801a13a:	b108      	cbz	r0, 801a140 <_printf_i+0x1bc>
 801a13c:	1b40      	subs	r0, r0, r5
 801a13e:	6060      	str	r0, [r4, #4]
 801a140:	6863      	ldr	r3, [r4, #4]
 801a142:	6123      	str	r3, [r4, #16]
 801a144:	2300      	movs	r3, #0
 801a146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a14a:	e7a7      	b.n	801a09c <_printf_i+0x118>
 801a14c:	6923      	ldr	r3, [r4, #16]
 801a14e:	462a      	mov	r2, r5
 801a150:	4639      	mov	r1, r7
 801a152:	4630      	mov	r0, r6
 801a154:	47c0      	blx	r8
 801a156:	3001      	adds	r0, #1
 801a158:	d0aa      	beq.n	801a0b0 <_printf_i+0x12c>
 801a15a:	6823      	ldr	r3, [r4, #0]
 801a15c:	079b      	lsls	r3, r3, #30
 801a15e:	d413      	bmi.n	801a188 <_printf_i+0x204>
 801a160:	68e0      	ldr	r0, [r4, #12]
 801a162:	9b03      	ldr	r3, [sp, #12]
 801a164:	4298      	cmp	r0, r3
 801a166:	bfb8      	it	lt
 801a168:	4618      	movlt	r0, r3
 801a16a:	e7a3      	b.n	801a0b4 <_printf_i+0x130>
 801a16c:	2301      	movs	r3, #1
 801a16e:	464a      	mov	r2, r9
 801a170:	4639      	mov	r1, r7
 801a172:	4630      	mov	r0, r6
 801a174:	47c0      	blx	r8
 801a176:	3001      	adds	r0, #1
 801a178:	d09a      	beq.n	801a0b0 <_printf_i+0x12c>
 801a17a:	3501      	adds	r5, #1
 801a17c:	68e3      	ldr	r3, [r4, #12]
 801a17e:	9a03      	ldr	r2, [sp, #12]
 801a180:	1a9b      	subs	r3, r3, r2
 801a182:	42ab      	cmp	r3, r5
 801a184:	dcf2      	bgt.n	801a16c <_printf_i+0x1e8>
 801a186:	e7eb      	b.n	801a160 <_printf_i+0x1dc>
 801a188:	2500      	movs	r5, #0
 801a18a:	f104 0919 	add.w	r9, r4, #25
 801a18e:	e7f5      	b.n	801a17c <_printf_i+0x1f8>
 801a190:	2b00      	cmp	r3, #0
 801a192:	d1ac      	bne.n	801a0ee <_printf_i+0x16a>
 801a194:	7803      	ldrb	r3, [r0, #0]
 801a196:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a19a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a19e:	e76c      	b.n	801a07a <_printf_i+0xf6>
 801a1a0:	0801cd7d 	.word	0x0801cd7d
 801a1a4:	0801cd8e 	.word	0x0801cd8e

0801a1a8 <__sread>:
 801a1a8:	b510      	push	{r4, lr}
 801a1aa:	460c      	mov	r4, r1
 801a1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1b0:	f000 fa86 	bl	801a6c0 <_read_r>
 801a1b4:	2800      	cmp	r0, #0
 801a1b6:	bfab      	itete	ge
 801a1b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a1ba:	89a3      	ldrhlt	r3, [r4, #12]
 801a1bc:	181b      	addge	r3, r3, r0
 801a1be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a1c2:	bfac      	ite	ge
 801a1c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a1c6:	81a3      	strhlt	r3, [r4, #12]
 801a1c8:	bd10      	pop	{r4, pc}

0801a1ca <__swrite>:
 801a1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1ce:	461f      	mov	r7, r3
 801a1d0:	898b      	ldrh	r3, [r1, #12]
 801a1d2:	05db      	lsls	r3, r3, #23
 801a1d4:	4605      	mov	r5, r0
 801a1d6:	460c      	mov	r4, r1
 801a1d8:	4616      	mov	r6, r2
 801a1da:	d505      	bpl.n	801a1e8 <__swrite+0x1e>
 801a1dc:	2302      	movs	r3, #2
 801a1de:	2200      	movs	r2, #0
 801a1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1e4:	f000 f9b6 	bl	801a554 <_lseek_r>
 801a1e8:	89a3      	ldrh	r3, [r4, #12]
 801a1ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a1f2:	81a3      	strh	r3, [r4, #12]
 801a1f4:	4632      	mov	r2, r6
 801a1f6:	463b      	mov	r3, r7
 801a1f8:	4628      	mov	r0, r5
 801a1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1fe:	f000 b869 	b.w	801a2d4 <_write_r>

0801a202 <__sseek>:
 801a202:	b510      	push	{r4, lr}
 801a204:	460c      	mov	r4, r1
 801a206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a20a:	f000 f9a3 	bl	801a554 <_lseek_r>
 801a20e:	1c43      	adds	r3, r0, #1
 801a210:	89a3      	ldrh	r3, [r4, #12]
 801a212:	bf15      	itete	ne
 801a214:	6560      	strne	r0, [r4, #84]	; 0x54
 801a216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a21a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a21e:	81a3      	strheq	r3, [r4, #12]
 801a220:	bf18      	it	ne
 801a222:	81a3      	strhne	r3, [r4, #12]
 801a224:	bd10      	pop	{r4, pc}

0801a226 <__sclose>:
 801a226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a22a:	f000 b8d3 	b.w	801a3d4 <_close_r>
	...

0801a230 <__swbuf_r>:
 801a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a232:	460e      	mov	r6, r1
 801a234:	4614      	mov	r4, r2
 801a236:	4605      	mov	r5, r0
 801a238:	b118      	cbz	r0, 801a242 <__swbuf_r+0x12>
 801a23a:	6983      	ldr	r3, [r0, #24]
 801a23c:	b90b      	cbnz	r3, 801a242 <__swbuf_r+0x12>
 801a23e:	f7ff fb0d 	bl	801985c <__sinit>
 801a242:	4b21      	ldr	r3, [pc, #132]	; (801a2c8 <__swbuf_r+0x98>)
 801a244:	429c      	cmp	r4, r3
 801a246:	d12a      	bne.n	801a29e <__swbuf_r+0x6e>
 801a248:	686c      	ldr	r4, [r5, #4]
 801a24a:	69a3      	ldr	r3, [r4, #24]
 801a24c:	60a3      	str	r3, [r4, #8]
 801a24e:	89a3      	ldrh	r3, [r4, #12]
 801a250:	071a      	lsls	r2, r3, #28
 801a252:	d52e      	bpl.n	801a2b2 <__swbuf_r+0x82>
 801a254:	6923      	ldr	r3, [r4, #16]
 801a256:	b363      	cbz	r3, 801a2b2 <__swbuf_r+0x82>
 801a258:	6923      	ldr	r3, [r4, #16]
 801a25a:	6820      	ldr	r0, [r4, #0]
 801a25c:	1ac0      	subs	r0, r0, r3
 801a25e:	6963      	ldr	r3, [r4, #20]
 801a260:	b2f6      	uxtb	r6, r6
 801a262:	4283      	cmp	r3, r0
 801a264:	4637      	mov	r7, r6
 801a266:	dc04      	bgt.n	801a272 <__swbuf_r+0x42>
 801a268:	4621      	mov	r1, r4
 801a26a:	4628      	mov	r0, r5
 801a26c:	f000 f948 	bl	801a500 <_fflush_r>
 801a270:	bb28      	cbnz	r0, 801a2be <__swbuf_r+0x8e>
 801a272:	68a3      	ldr	r3, [r4, #8]
 801a274:	3b01      	subs	r3, #1
 801a276:	60a3      	str	r3, [r4, #8]
 801a278:	6823      	ldr	r3, [r4, #0]
 801a27a:	1c5a      	adds	r2, r3, #1
 801a27c:	6022      	str	r2, [r4, #0]
 801a27e:	701e      	strb	r6, [r3, #0]
 801a280:	6963      	ldr	r3, [r4, #20]
 801a282:	3001      	adds	r0, #1
 801a284:	4283      	cmp	r3, r0
 801a286:	d004      	beq.n	801a292 <__swbuf_r+0x62>
 801a288:	89a3      	ldrh	r3, [r4, #12]
 801a28a:	07db      	lsls	r3, r3, #31
 801a28c:	d519      	bpl.n	801a2c2 <__swbuf_r+0x92>
 801a28e:	2e0a      	cmp	r6, #10
 801a290:	d117      	bne.n	801a2c2 <__swbuf_r+0x92>
 801a292:	4621      	mov	r1, r4
 801a294:	4628      	mov	r0, r5
 801a296:	f000 f933 	bl	801a500 <_fflush_r>
 801a29a:	b190      	cbz	r0, 801a2c2 <__swbuf_r+0x92>
 801a29c:	e00f      	b.n	801a2be <__swbuf_r+0x8e>
 801a29e:	4b0b      	ldr	r3, [pc, #44]	; (801a2cc <__swbuf_r+0x9c>)
 801a2a0:	429c      	cmp	r4, r3
 801a2a2:	d101      	bne.n	801a2a8 <__swbuf_r+0x78>
 801a2a4:	68ac      	ldr	r4, [r5, #8]
 801a2a6:	e7d0      	b.n	801a24a <__swbuf_r+0x1a>
 801a2a8:	4b09      	ldr	r3, [pc, #36]	; (801a2d0 <__swbuf_r+0xa0>)
 801a2aa:	429c      	cmp	r4, r3
 801a2ac:	bf08      	it	eq
 801a2ae:	68ec      	ldreq	r4, [r5, #12]
 801a2b0:	e7cb      	b.n	801a24a <__swbuf_r+0x1a>
 801a2b2:	4621      	mov	r1, r4
 801a2b4:	4628      	mov	r0, r5
 801a2b6:	f000 f81f 	bl	801a2f8 <__swsetup_r>
 801a2ba:	2800      	cmp	r0, #0
 801a2bc:	d0cc      	beq.n	801a258 <__swbuf_r+0x28>
 801a2be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a2c2:	4638      	mov	r0, r7
 801a2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2c6:	bf00      	nop
 801a2c8:	0801cd2c 	.word	0x0801cd2c
 801a2cc:	0801cd4c 	.word	0x0801cd4c
 801a2d0:	0801cd0c 	.word	0x0801cd0c

0801a2d4 <_write_r>:
 801a2d4:	b538      	push	{r3, r4, r5, lr}
 801a2d6:	4c07      	ldr	r4, [pc, #28]	; (801a2f4 <_write_r+0x20>)
 801a2d8:	4605      	mov	r5, r0
 801a2da:	4608      	mov	r0, r1
 801a2dc:	4611      	mov	r1, r2
 801a2de:	2200      	movs	r2, #0
 801a2e0:	6022      	str	r2, [r4, #0]
 801a2e2:	461a      	mov	r2, r3
 801a2e4:	f7e7 fb03 	bl	80018ee <_write>
 801a2e8:	1c43      	adds	r3, r0, #1
 801a2ea:	d102      	bne.n	801a2f2 <_write_r+0x1e>
 801a2ec:	6823      	ldr	r3, [r4, #0]
 801a2ee:	b103      	cbz	r3, 801a2f2 <_write_r+0x1e>
 801a2f0:	602b      	str	r3, [r5, #0]
 801a2f2:	bd38      	pop	{r3, r4, r5, pc}
 801a2f4:	2000ab74 	.word	0x2000ab74

0801a2f8 <__swsetup_r>:
 801a2f8:	4b32      	ldr	r3, [pc, #200]	; (801a3c4 <__swsetup_r+0xcc>)
 801a2fa:	b570      	push	{r4, r5, r6, lr}
 801a2fc:	681d      	ldr	r5, [r3, #0]
 801a2fe:	4606      	mov	r6, r0
 801a300:	460c      	mov	r4, r1
 801a302:	b125      	cbz	r5, 801a30e <__swsetup_r+0x16>
 801a304:	69ab      	ldr	r3, [r5, #24]
 801a306:	b913      	cbnz	r3, 801a30e <__swsetup_r+0x16>
 801a308:	4628      	mov	r0, r5
 801a30a:	f7ff faa7 	bl	801985c <__sinit>
 801a30e:	4b2e      	ldr	r3, [pc, #184]	; (801a3c8 <__swsetup_r+0xd0>)
 801a310:	429c      	cmp	r4, r3
 801a312:	d10f      	bne.n	801a334 <__swsetup_r+0x3c>
 801a314:	686c      	ldr	r4, [r5, #4]
 801a316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a31a:	b29a      	uxth	r2, r3
 801a31c:	0715      	lsls	r5, r2, #28
 801a31e:	d42c      	bmi.n	801a37a <__swsetup_r+0x82>
 801a320:	06d0      	lsls	r0, r2, #27
 801a322:	d411      	bmi.n	801a348 <__swsetup_r+0x50>
 801a324:	2209      	movs	r2, #9
 801a326:	6032      	str	r2, [r6, #0]
 801a328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a32c:	81a3      	strh	r3, [r4, #12]
 801a32e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a332:	e03e      	b.n	801a3b2 <__swsetup_r+0xba>
 801a334:	4b25      	ldr	r3, [pc, #148]	; (801a3cc <__swsetup_r+0xd4>)
 801a336:	429c      	cmp	r4, r3
 801a338:	d101      	bne.n	801a33e <__swsetup_r+0x46>
 801a33a:	68ac      	ldr	r4, [r5, #8]
 801a33c:	e7eb      	b.n	801a316 <__swsetup_r+0x1e>
 801a33e:	4b24      	ldr	r3, [pc, #144]	; (801a3d0 <__swsetup_r+0xd8>)
 801a340:	429c      	cmp	r4, r3
 801a342:	bf08      	it	eq
 801a344:	68ec      	ldreq	r4, [r5, #12]
 801a346:	e7e6      	b.n	801a316 <__swsetup_r+0x1e>
 801a348:	0751      	lsls	r1, r2, #29
 801a34a:	d512      	bpl.n	801a372 <__swsetup_r+0x7a>
 801a34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a34e:	b141      	cbz	r1, 801a362 <__swsetup_r+0x6a>
 801a350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a354:	4299      	cmp	r1, r3
 801a356:	d002      	beq.n	801a35e <__swsetup_r+0x66>
 801a358:	4630      	mov	r0, r6
 801a35a:	f7ff f91b 	bl	8019594 <_free_r>
 801a35e:	2300      	movs	r3, #0
 801a360:	6363      	str	r3, [r4, #52]	; 0x34
 801a362:	89a3      	ldrh	r3, [r4, #12]
 801a364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a368:	81a3      	strh	r3, [r4, #12]
 801a36a:	2300      	movs	r3, #0
 801a36c:	6063      	str	r3, [r4, #4]
 801a36e:	6923      	ldr	r3, [r4, #16]
 801a370:	6023      	str	r3, [r4, #0]
 801a372:	89a3      	ldrh	r3, [r4, #12]
 801a374:	f043 0308 	orr.w	r3, r3, #8
 801a378:	81a3      	strh	r3, [r4, #12]
 801a37a:	6923      	ldr	r3, [r4, #16]
 801a37c:	b94b      	cbnz	r3, 801a392 <__swsetup_r+0x9a>
 801a37e:	89a3      	ldrh	r3, [r4, #12]
 801a380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a388:	d003      	beq.n	801a392 <__swsetup_r+0x9a>
 801a38a:	4621      	mov	r1, r4
 801a38c:	4630      	mov	r0, r6
 801a38e:	f000 f917 	bl	801a5c0 <__smakebuf_r>
 801a392:	89a2      	ldrh	r2, [r4, #12]
 801a394:	f012 0301 	ands.w	r3, r2, #1
 801a398:	d00c      	beq.n	801a3b4 <__swsetup_r+0xbc>
 801a39a:	2300      	movs	r3, #0
 801a39c:	60a3      	str	r3, [r4, #8]
 801a39e:	6963      	ldr	r3, [r4, #20]
 801a3a0:	425b      	negs	r3, r3
 801a3a2:	61a3      	str	r3, [r4, #24]
 801a3a4:	6923      	ldr	r3, [r4, #16]
 801a3a6:	b953      	cbnz	r3, 801a3be <__swsetup_r+0xc6>
 801a3a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a3b0:	d1ba      	bne.n	801a328 <__swsetup_r+0x30>
 801a3b2:	bd70      	pop	{r4, r5, r6, pc}
 801a3b4:	0792      	lsls	r2, r2, #30
 801a3b6:	bf58      	it	pl
 801a3b8:	6963      	ldrpl	r3, [r4, #20]
 801a3ba:	60a3      	str	r3, [r4, #8]
 801a3bc:	e7f2      	b.n	801a3a4 <__swsetup_r+0xac>
 801a3be:	2000      	movs	r0, #0
 801a3c0:	e7f7      	b.n	801a3b2 <__swsetup_r+0xba>
 801a3c2:	bf00      	nop
 801a3c4:	20000188 	.word	0x20000188
 801a3c8:	0801cd2c 	.word	0x0801cd2c
 801a3cc:	0801cd4c 	.word	0x0801cd4c
 801a3d0:	0801cd0c 	.word	0x0801cd0c

0801a3d4 <_close_r>:
 801a3d4:	b538      	push	{r3, r4, r5, lr}
 801a3d6:	4c06      	ldr	r4, [pc, #24]	; (801a3f0 <_close_r+0x1c>)
 801a3d8:	2300      	movs	r3, #0
 801a3da:	4605      	mov	r5, r0
 801a3dc:	4608      	mov	r0, r1
 801a3de:	6023      	str	r3, [r4, #0]
 801a3e0:	f7e7 faa1 	bl	8001926 <_close>
 801a3e4:	1c43      	adds	r3, r0, #1
 801a3e6:	d102      	bne.n	801a3ee <_close_r+0x1a>
 801a3e8:	6823      	ldr	r3, [r4, #0]
 801a3ea:	b103      	cbz	r3, 801a3ee <_close_r+0x1a>
 801a3ec:	602b      	str	r3, [r5, #0]
 801a3ee:	bd38      	pop	{r3, r4, r5, pc}
 801a3f0:	2000ab74 	.word	0x2000ab74

0801a3f4 <__sflush_r>:
 801a3f4:	898a      	ldrh	r2, [r1, #12]
 801a3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3fa:	4605      	mov	r5, r0
 801a3fc:	0710      	lsls	r0, r2, #28
 801a3fe:	460c      	mov	r4, r1
 801a400:	d458      	bmi.n	801a4b4 <__sflush_r+0xc0>
 801a402:	684b      	ldr	r3, [r1, #4]
 801a404:	2b00      	cmp	r3, #0
 801a406:	dc05      	bgt.n	801a414 <__sflush_r+0x20>
 801a408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	dc02      	bgt.n	801a414 <__sflush_r+0x20>
 801a40e:	2000      	movs	r0, #0
 801a410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a416:	2e00      	cmp	r6, #0
 801a418:	d0f9      	beq.n	801a40e <__sflush_r+0x1a>
 801a41a:	2300      	movs	r3, #0
 801a41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a420:	682f      	ldr	r7, [r5, #0]
 801a422:	6a21      	ldr	r1, [r4, #32]
 801a424:	602b      	str	r3, [r5, #0]
 801a426:	d032      	beq.n	801a48e <__sflush_r+0x9a>
 801a428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a42a:	89a3      	ldrh	r3, [r4, #12]
 801a42c:	075a      	lsls	r2, r3, #29
 801a42e:	d505      	bpl.n	801a43c <__sflush_r+0x48>
 801a430:	6863      	ldr	r3, [r4, #4]
 801a432:	1ac0      	subs	r0, r0, r3
 801a434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a436:	b10b      	cbz	r3, 801a43c <__sflush_r+0x48>
 801a438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a43a:	1ac0      	subs	r0, r0, r3
 801a43c:	2300      	movs	r3, #0
 801a43e:	4602      	mov	r2, r0
 801a440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a442:	6a21      	ldr	r1, [r4, #32]
 801a444:	4628      	mov	r0, r5
 801a446:	47b0      	blx	r6
 801a448:	1c43      	adds	r3, r0, #1
 801a44a:	89a3      	ldrh	r3, [r4, #12]
 801a44c:	d106      	bne.n	801a45c <__sflush_r+0x68>
 801a44e:	6829      	ldr	r1, [r5, #0]
 801a450:	291d      	cmp	r1, #29
 801a452:	d848      	bhi.n	801a4e6 <__sflush_r+0xf2>
 801a454:	4a29      	ldr	r2, [pc, #164]	; (801a4fc <__sflush_r+0x108>)
 801a456:	40ca      	lsrs	r2, r1
 801a458:	07d6      	lsls	r6, r2, #31
 801a45a:	d544      	bpl.n	801a4e6 <__sflush_r+0xf2>
 801a45c:	2200      	movs	r2, #0
 801a45e:	6062      	str	r2, [r4, #4]
 801a460:	04d9      	lsls	r1, r3, #19
 801a462:	6922      	ldr	r2, [r4, #16]
 801a464:	6022      	str	r2, [r4, #0]
 801a466:	d504      	bpl.n	801a472 <__sflush_r+0x7e>
 801a468:	1c42      	adds	r2, r0, #1
 801a46a:	d101      	bne.n	801a470 <__sflush_r+0x7c>
 801a46c:	682b      	ldr	r3, [r5, #0]
 801a46e:	b903      	cbnz	r3, 801a472 <__sflush_r+0x7e>
 801a470:	6560      	str	r0, [r4, #84]	; 0x54
 801a472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a474:	602f      	str	r7, [r5, #0]
 801a476:	2900      	cmp	r1, #0
 801a478:	d0c9      	beq.n	801a40e <__sflush_r+0x1a>
 801a47a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a47e:	4299      	cmp	r1, r3
 801a480:	d002      	beq.n	801a488 <__sflush_r+0x94>
 801a482:	4628      	mov	r0, r5
 801a484:	f7ff f886 	bl	8019594 <_free_r>
 801a488:	2000      	movs	r0, #0
 801a48a:	6360      	str	r0, [r4, #52]	; 0x34
 801a48c:	e7c0      	b.n	801a410 <__sflush_r+0x1c>
 801a48e:	2301      	movs	r3, #1
 801a490:	4628      	mov	r0, r5
 801a492:	47b0      	blx	r6
 801a494:	1c41      	adds	r1, r0, #1
 801a496:	d1c8      	bne.n	801a42a <__sflush_r+0x36>
 801a498:	682b      	ldr	r3, [r5, #0]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d0c5      	beq.n	801a42a <__sflush_r+0x36>
 801a49e:	2b1d      	cmp	r3, #29
 801a4a0:	d001      	beq.n	801a4a6 <__sflush_r+0xb2>
 801a4a2:	2b16      	cmp	r3, #22
 801a4a4:	d101      	bne.n	801a4aa <__sflush_r+0xb6>
 801a4a6:	602f      	str	r7, [r5, #0]
 801a4a8:	e7b1      	b.n	801a40e <__sflush_r+0x1a>
 801a4aa:	89a3      	ldrh	r3, [r4, #12]
 801a4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4b0:	81a3      	strh	r3, [r4, #12]
 801a4b2:	e7ad      	b.n	801a410 <__sflush_r+0x1c>
 801a4b4:	690f      	ldr	r7, [r1, #16]
 801a4b6:	2f00      	cmp	r7, #0
 801a4b8:	d0a9      	beq.n	801a40e <__sflush_r+0x1a>
 801a4ba:	0793      	lsls	r3, r2, #30
 801a4bc:	680e      	ldr	r6, [r1, #0]
 801a4be:	bf08      	it	eq
 801a4c0:	694b      	ldreq	r3, [r1, #20]
 801a4c2:	600f      	str	r7, [r1, #0]
 801a4c4:	bf18      	it	ne
 801a4c6:	2300      	movne	r3, #0
 801a4c8:	eba6 0807 	sub.w	r8, r6, r7
 801a4cc:	608b      	str	r3, [r1, #8]
 801a4ce:	f1b8 0f00 	cmp.w	r8, #0
 801a4d2:	dd9c      	ble.n	801a40e <__sflush_r+0x1a>
 801a4d4:	4643      	mov	r3, r8
 801a4d6:	463a      	mov	r2, r7
 801a4d8:	6a21      	ldr	r1, [r4, #32]
 801a4da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a4dc:	4628      	mov	r0, r5
 801a4de:	47b0      	blx	r6
 801a4e0:	2800      	cmp	r0, #0
 801a4e2:	dc06      	bgt.n	801a4f2 <__sflush_r+0xfe>
 801a4e4:	89a3      	ldrh	r3, [r4, #12]
 801a4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4ea:	81a3      	strh	r3, [r4, #12]
 801a4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a4f0:	e78e      	b.n	801a410 <__sflush_r+0x1c>
 801a4f2:	4407      	add	r7, r0
 801a4f4:	eba8 0800 	sub.w	r8, r8, r0
 801a4f8:	e7e9      	b.n	801a4ce <__sflush_r+0xda>
 801a4fa:	bf00      	nop
 801a4fc:	20400001 	.word	0x20400001

0801a500 <_fflush_r>:
 801a500:	b538      	push	{r3, r4, r5, lr}
 801a502:	690b      	ldr	r3, [r1, #16]
 801a504:	4605      	mov	r5, r0
 801a506:	460c      	mov	r4, r1
 801a508:	b1db      	cbz	r3, 801a542 <_fflush_r+0x42>
 801a50a:	b118      	cbz	r0, 801a514 <_fflush_r+0x14>
 801a50c:	6983      	ldr	r3, [r0, #24]
 801a50e:	b90b      	cbnz	r3, 801a514 <_fflush_r+0x14>
 801a510:	f7ff f9a4 	bl	801985c <__sinit>
 801a514:	4b0c      	ldr	r3, [pc, #48]	; (801a548 <_fflush_r+0x48>)
 801a516:	429c      	cmp	r4, r3
 801a518:	d109      	bne.n	801a52e <_fflush_r+0x2e>
 801a51a:	686c      	ldr	r4, [r5, #4]
 801a51c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a520:	b17b      	cbz	r3, 801a542 <_fflush_r+0x42>
 801a522:	4621      	mov	r1, r4
 801a524:	4628      	mov	r0, r5
 801a526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a52a:	f7ff bf63 	b.w	801a3f4 <__sflush_r>
 801a52e:	4b07      	ldr	r3, [pc, #28]	; (801a54c <_fflush_r+0x4c>)
 801a530:	429c      	cmp	r4, r3
 801a532:	d101      	bne.n	801a538 <_fflush_r+0x38>
 801a534:	68ac      	ldr	r4, [r5, #8]
 801a536:	e7f1      	b.n	801a51c <_fflush_r+0x1c>
 801a538:	4b05      	ldr	r3, [pc, #20]	; (801a550 <_fflush_r+0x50>)
 801a53a:	429c      	cmp	r4, r3
 801a53c:	bf08      	it	eq
 801a53e:	68ec      	ldreq	r4, [r5, #12]
 801a540:	e7ec      	b.n	801a51c <_fflush_r+0x1c>
 801a542:	2000      	movs	r0, #0
 801a544:	bd38      	pop	{r3, r4, r5, pc}
 801a546:	bf00      	nop
 801a548:	0801cd2c 	.word	0x0801cd2c
 801a54c:	0801cd4c 	.word	0x0801cd4c
 801a550:	0801cd0c 	.word	0x0801cd0c

0801a554 <_lseek_r>:
 801a554:	b538      	push	{r3, r4, r5, lr}
 801a556:	4c07      	ldr	r4, [pc, #28]	; (801a574 <_lseek_r+0x20>)
 801a558:	4605      	mov	r5, r0
 801a55a:	4608      	mov	r0, r1
 801a55c:	4611      	mov	r1, r2
 801a55e:	2200      	movs	r2, #0
 801a560:	6022      	str	r2, [r4, #0]
 801a562:	461a      	mov	r2, r3
 801a564:	f7e7 fa06 	bl	8001974 <_lseek>
 801a568:	1c43      	adds	r3, r0, #1
 801a56a:	d102      	bne.n	801a572 <_lseek_r+0x1e>
 801a56c:	6823      	ldr	r3, [r4, #0]
 801a56e:	b103      	cbz	r3, 801a572 <_lseek_r+0x1e>
 801a570:	602b      	str	r3, [r5, #0]
 801a572:	bd38      	pop	{r3, r4, r5, pc}
 801a574:	2000ab74 	.word	0x2000ab74

0801a578 <__swhatbuf_r>:
 801a578:	b570      	push	{r4, r5, r6, lr}
 801a57a:	460e      	mov	r6, r1
 801a57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a580:	2900      	cmp	r1, #0
 801a582:	b096      	sub	sp, #88	; 0x58
 801a584:	4614      	mov	r4, r2
 801a586:	461d      	mov	r5, r3
 801a588:	da07      	bge.n	801a59a <__swhatbuf_r+0x22>
 801a58a:	2300      	movs	r3, #0
 801a58c:	602b      	str	r3, [r5, #0]
 801a58e:	89b3      	ldrh	r3, [r6, #12]
 801a590:	061a      	lsls	r2, r3, #24
 801a592:	d410      	bmi.n	801a5b6 <__swhatbuf_r+0x3e>
 801a594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a598:	e00e      	b.n	801a5b8 <__swhatbuf_r+0x40>
 801a59a:	466a      	mov	r2, sp
 801a59c:	f000 f8a2 	bl	801a6e4 <_fstat_r>
 801a5a0:	2800      	cmp	r0, #0
 801a5a2:	dbf2      	blt.n	801a58a <__swhatbuf_r+0x12>
 801a5a4:	9a01      	ldr	r2, [sp, #4]
 801a5a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a5aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a5ae:	425a      	negs	r2, r3
 801a5b0:	415a      	adcs	r2, r3
 801a5b2:	602a      	str	r2, [r5, #0]
 801a5b4:	e7ee      	b.n	801a594 <__swhatbuf_r+0x1c>
 801a5b6:	2340      	movs	r3, #64	; 0x40
 801a5b8:	2000      	movs	r0, #0
 801a5ba:	6023      	str	r3, [r4, #0]
 801a5bc:	b016      	add	sp, #88	; 0x58
 801a5be:	bd70      	pop	{r4, r5, r6, pc}

0801a5c0 <__smakebuf_r>:
 801a5c0:	898b      	ldrh	r3, [r1, #12]
 801a5c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a5c4:	079d      	lsls	r5, r3, #30
 801a5c6:	4606      	mov	r6, r0
 801a5c8:	460c      	mov	r4, r1
 801a5ca:	d507      	bpl.n	801a5dc <__smakebuf_r+0x1c>
 801a5cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a5d0:	6023      	str	r3, [r4, #0]
 801a5d2:	6123      	str	r3, [r4, #16]
 801a5d4:	2301      	movs	r3, #1
 801a5d6:	6163      	str	r3, [r4, #20]
 801a5d8:	b002      	add	sp, #8
 801a5da:	bd70      	pop	{r4, r5, r6, pc}
 801a5dc:	ab01      	add	r3, sp, #4
 801a5de:	466a      	mov	r2, sp
 801a5e0:	f7ff ffca 	bl	801a578 <__swhatbuf_r>
 801a5e4:	9900      	ldr	r1, [sp, #0]
 801a5e6:	4605      	mov	r5, r0
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	f7ff f821 	bl	8019630 <_malloc_r>
 801a5ee:	b948      	cbnz	r0, 801a604 <__smakebuf_r+0x44>
 801a5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5f4:	059a      	lsls	r2, r3, #22
 801a5f6:	d4ef      	bmi.n	801a5d8 <__smakebuf_r+0x18>
 801a5f8:	f023 0303 	bic.w	r3, r3, #3
 801a5fc:	f043 0302 	orr.w	r3, r3, #2
 801a600:	81a3      	strh	r3, [r4, #12]
 801a602:	e7e3      	b.n	801a5cc <__smakebuf_r+0xc>
 801a604:	4b0d      	ldr	r3, [pc, #52]	; (801a63c <__smakebuf_r+0x7c>)
 801a606:	62b3      	str	r3, [r6, #40]	; 0x28
 801a608:	89a3      	ldrh	r3, [r4, #12]
 801a60a:	6020      	str	r0, [r4, #0]
 801a60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a610:	81a3      	strh	r3, [r4, #12]
 801a612:	9b00      	ldr	r3, [sp, #0]
 801a614:	6163      	str	r3, [r4, #20]
 801a616:	9b01      	ldr	r3, [sp, #4]
 801a618:	6120      	str	r0, [r4, #16]
 801a61a:	b15b      	cbz	r3, 801a634 <__smakebuf_r+0x74>
 801a61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a620:	4630      	mov	r0, r6
 801a622:	f000 f871 	bl	801a708 <_isatty_r>
 801a626:	b128      	cbz	r0, 801a634 <__smakebuf_r+0x74>
 801a628:	89a3      	ldrh	r3, [r4, #12]
 801a62a:	f023 0303 	bic.w	r3, r3, #3
 801a62e:	f043 0301 	orr.w	r3, r3, #1
 801a632:	81a3      	strh	r3, [r4, #12]
 801a634:	89a3      	ldrh	r3, [r4, #12]
 801a636:	431d      	orrs	r5, r3
 801a638:	81a5      	strh	r5, [r4, #12]
 801a63a:	e7cd      	b.n	801a5d8 <__smakebuf_r+0x18>
 801a63c:	08019825 	.word	0x08019825

0801a640 <memmove>:
 801a640:	4288      	cmp	r0, r1
 801a642:	b510      	push	{r4, lr}
 801a644:	eb01 0302 	add.w	r3, r1, r2
 801a648:	d807      	bhi.n	801a65a <memmove+0x1a>
 801a64a:	1e42      	subs	r2, r0, #1
 801a64c:	4299      	cmp	r1, r3
 801a64e:	d00a      	beq.n	801a666 <memmove+0x26>
 801a650:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a654:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a658:	e7f8      	b.n	801a64c <memmove+0xc>
 801a65a:	4283      	cmp	r3, r0
 801a65c:	d9f5      	bls.n	801a64a <memmove+0xa>
 801a65e:	1881      	adds	r1, r0, r2
 801a660:	1ad2      	subs	r2, r2, r3
 801a662:	42d3      	cmn	r3, r2
 801a664:	d100      	bne.n	801a668 <memmove+0x28>
 801a666:	bd10      	pop	{r4, pc}
 801a668:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a66c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a670:	e7f7      	b.n	801a662 <memmove+0x22>

0801a672 <_realloc_r>:
 801a672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a674:	4607      	mov	r7, r0
 801a676:	4614      	mov	r4, r2
 801a678:	460e      	mov	r6, r1
 801a67a:	b921      	cbnz	r1, 801a686 <_realloc_r+0x14>
 801a67c:	4611      	mov	r1, r2
 801a67e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a682:	f7fe bfd5 	b.w	8019630 <_malloc_r>
 801a686:	b922      	cbnz	r2, 801a692 <_realloc_r+0x20>
 801a688:	f7fe ff84 	bl	8019594 <_free_r>
 801a68c:	4625      	mov	r5, r4
 801a68e:	4628      	mov	r0, r5
 801a690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a692:	f000 f849 	bl	801a728 <_malloc_usable_size_r>
 801a696:	42a0      	cmp	r0, r4
 801a698:	d20f      	bcs.n	801a6ba <_realloc_r+0x48>
 801a69a:	4621      	mov	r1, r4
 801a69c:	4638      	mov	r0, r7
 801a69e:	f7fe ffc7 	bl	8019630 <_malloc_r>
 801a6a2:	4605      	mov	r5, r0
 801a6a4:	2800      	cmp	r0, #0
 801a6a6:	d0f2      	beq.n	801a68e <_realloc_r+0x1c>
 801a6a8:	4631      	mov	r1, r6
 801a6aa:	4622      	mov	r2, r4
 801a6ac:	f7fe ff5f 	bl	801956e <memcpy>
 801a6b0:	4631      	mov	r1, r6
 801a6b2:	4638      	mov	r0, r7
 801a6b4:	f7fe ff6e 	bl	8019594 <_free_r>
 801a6b8:	e7e9      	b.n	801a68e <_realloc_r+0x1c>
 801a6ba:	4635      	mov	r5, r6
 801a6bc:	e7e7      	b.n	801a68e <_realloc_r+0x1c>
	...

0801a6c0 <_read_r>:
 801a6c0:	b538      	push	{r3, r4, r5, lr}
 801a6c2:	4c07      	ldr	r4, [pc, #28]	; (801a6e0 <_read_r+0x20>)
 801a6c4:	4605      	mov	r5, r0
 801a6c6:	4608      	mov	r0, r1
 801a6c8:	4611      	mov	r1, r2
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	6022      	str	r2, [r4, #0]
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	f7e7 f8f0 	bl	80018b4 <_read>
 801a6d4:	1c43      	adds	r3, r0, #1
 801a6d6:	d102      	bne.n	801a6de <_read_r+0x1e>
 801a6d8:	6823      	ldr	r3, [r4, #0]
 801a6da:	b103      	cbz	r3, 801a6de <_read_r+0x1e>
 801a6dc:	602b      	str	r3, [r5, #0]
 801a6de:	bd38      	pop	{r3, r4, r5, pc}
 801a6e0:	2000ab74 	.word	0x2000ab74

0801a6e4 <_fstat_r>:
 801a6e4:	b538      	push	{r3, r4, r5, lr}
 801a6e6:	4c07      	ldr	r4, [pc, #28]	; (801a704 <_fstat_r+0x20>)
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	4605      	mov	r5, r0
 801a6ec:	4608      	mov	r0, r1
 801a6ee:	4611      	mov	r1, r2
 801a6f0:	6023      	str	r3, [r4, #0]
 801a6f2:	f7e7 f924 	bl	800193e <_fstat>
 801a6f6:	1c43      	adds	r3, r0, #1
 801a6f8:	d102      	bne.n	801a700 <_fstat_r+0x1c>
 801a6fa:	6823      	ldr	r3, [r4, #0]
 801a6fc:	b103      	cbz	r3, 801a700 <_fstat_r+0x1c>
 801a6fe:	602b      	str	r3, [r5, #0]
 801a700:	bd38      	pop	{r3, r4, r5, pc}
 801a702:	bf00      	nop
 801a704:	2000ab74 	.word	0x2000ab74

0801a708 <_isatty_r>:
 801a708:	b538      	push	{r3, r4, r5, lr}
 801a70a:	4c06      	ldr	r4, [pc, #24]	; (801a724 <_isatty_r+0x1c>)
 801a70c:	2300      	movs	r3, #0
 801a70e:	4605      	mov	r5, r0
 801a710:	4608      	mov	r0, r1
 801a712:	6023      	str	r3, [r4, #0]
 801a714:	f7e7 f923 	bl	800195e <_isatty>
 801a718:	1c43      	adds	r3, r0, #1
 801a71a:	d102      	bne.n	801a722 <_isatty_r+0x1a>
 801a71c:	6823      	ldr	r3, [r4, #0]
 801a71e:	b103      	cbz	r3, 801a722 <_isatty_r+0x1a>
 801a720:	602b      	str	r3, [r5, #0]
 801a722:	bd38      	pop	{r3, r4, r5, pc}
 801a724:	2000ab74 	.word	0x2000ab74

0801a728 <_malloc_usable_size_r>:
 801a728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a72c:	1f18      	subs	r0, r3, #4
 801a72e:	2b00      	cmp	r3, #0
 801a730:	bfbc      	itt	lt
 801a732:	580b      	ldrlt	r3, [r1, r0]
 801a734:	18c0      	addlt	r0, r0, r3
 801a736:	4770      	bx	lr

0801a738 <_init>:
 801a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a73a:	bf00      	nop
 801a73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a73e:	bc08      	pop	{r3}
 801a740:	469e      	mov	lr, r3
 801a742:	4770      	bx	lr

0801a744 <_fini>:
 801a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a746:	bf00      	nop
 801a748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a74a:	bc08      	pop	{r3}
 801a74c:	469e      	mov	lr, r3
 801a74e:	4770      	bx	lr
