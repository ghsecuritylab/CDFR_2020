
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c520  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800c6d0  0800c6d0  0001c6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c914  0800c914  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c914  0800c914  0001c914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c91c  0800c91c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c91c  0800c91c  0001c91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c920  0800c920  0001c920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ae8  200001e0  0800cb04  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008cc8  0800cb04  00028cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dd91  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000655c  00000000  00000000  0004dfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002150  00000000  00000000  00054500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e68  00000000  00000000  00056650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ddab  00000000  00000000  000584b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020f6a  00000000  00000000  00066263  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106967  00000000  00000000  000871cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018db34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bd8  00000000  00000000  0018dbb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c6b8 	.word	0x0800c6b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800c6b8 	.word	0x0800c6b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <F_QEI_Reset>:
	F_QEI_Reset();
}
///*
// * F_QEI_Reset Localization data are reseted to zero;
// */
void F_QEI_Reset(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
	__disable_irq();

	g_oldLeftCount	= 0;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <F_QEI_Reset+0x38>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
	g_oldRightCount	= 0;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <F_QEI_Reset+0x3c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
	g_leftSpeed		= 0;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <F_QEI_Reset+0x40>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
	g_rightSpeed	= 0;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <F_QEI_Reset+0x44>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
//
//	g_estimate.x = RBT_OF7_X;
//	g_estimate.y = RBT_OF7_Y;
//	g_estimate.teta = 0;

	TIM2->CNT=0;
 80005ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT=0;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <F_QEI_Reset+0x48>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24

	F_QEI_Read();
 80005bc:	f000 f80e 	bl	80005dc <F_QEI_Read>
  __ASM volatile ("cpsie i" : : : "memory");
 80005c0:	b662      	cpsie	i
	__enable_irq();
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200041b4 	.word	0x200041b4
 80005cc:	200041cc 	.word	0x200041cc
 80005d0:	200041c4 	.word	0x200041c4
 80005d4:	200041c8 	.word	0x200041c8
 80005d8:	40000400 	.word	0x40000400

080005dc <F_QEI_Read>:
///*
// * F_QEI_Read is called every Timer 9 interrupt to update encoder's data
// */
void F_QEI_Read (void){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

	g_oldLeftCount  = g_leftCount ;
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <F_QEI_Read+0x104>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a3f      	ldr	r2, [pc, #252]	; (80006e4 <F_QEI_Read+0x108>)
 80005e6:	6013      	str	r3, [r2, #0]
	g_oldRightCount = g_rightCount;
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <F_QEI_Read+0x10c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a3f      	ldr	r2, [pc, #252]	; (80006ec <F_QEI_Read+0x110>)
 80005ee:	6013      	str	r3, [r2, #0]

	g_rightCount = TIM2->CNT ;
 80005f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <F_QEI_Read+0x10c>)
 80005fa:	601a      	str	r2, [r3, #0]
	g_leftCount  = TIM3->CNT ;
 80005fc:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <F_QEI_Read+0x114>)
 80005fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000600:	461a      	mov	r2, r3
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <F_QEI_Read+0x104>)
 8000604:	601a      	str	r2, [r3, #0]

	g_leftSpeed  = g_leftCount  - g_oldLeftCount ;
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <F_QEI_Read+0x104>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <F_QEI_Read+0x108>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	4a38      	ldr	r2, [pc, #224]	; (80006f4 <F_QEI_Read+0x118>)
 8000612:	6013      	str	r3, [r2, #0]
	g_rightSpeed = g_rightCount - g_oldRightCount;
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <F_QEI_Read+0x10c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <F_QEI_Read+0x110>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	4a36      	ldr	r2, [pc, #216]	; (80006f8 <F_QEI_Read+0x11c>)
 8000620:	6013      	str	r3, [r2, #0]

	// Si on passe par zero en phase descendante
	if(g_leftSpeed  > 4096) g_leftSpeed = -(g_oldLeftCount  + (65535-g_leftCount));
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <F_QEI_Read+0x118>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800062a:	dd0a      	ble.n	8000642 <F_QEI_Read+0x66>
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <F_QEI_Read+0x104>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000634:	33ff      	adds	r3, #255	; 0xff
 8000636:	4a2b      	ldr	r2, [pc, #172]	; (80006e4 <F_QEI_Read+0x108>)
 8000638:	6812      	ldr	r2, [r2, #0]
 800063a:	4413      	add	r3, r2
 800063c:	425b      	negs	r3, r3
 800063e:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <F_QEI_Read+0x118>)
 8000640:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed > 4096) g_rightSpeed= -(g_oldRightCount + (65535-g_rightCount));
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <F_QEI_Read+0x11c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800064a:	dd0a      	ble.n	8000662 <F_QEI_Read+0x86>
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <F_QEI_Read+0x10c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000654:	33ff      	adds	r3, #255	; 0xff
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <F_QEI_Read+0x110>)
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	4413      	add	r3, r2
 800065c:	425b      	negs	r3, r3
 800065e:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <F_QEI_Read+0x11c>)
 8000660:	6013      	str	r3, [r2, #0]
	// Si on passe par zero en phase montante
	if(g_leftSpeed  < -4096) g_leftSpeed = (g_leftCount + (65535  - g_oldLeftCount));
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <F_QEI_Read+0x118>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800066a:	da09      	bge.n	8000680 <F_QEI_Read+0xa4>
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <F_QEI_Read+0x108>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000674:	33ff      	adds	r3, #255	; 0xff
 8000676:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <F_QEI_Read+0x104>)
 8000678:	6812      	ldr	r2, [r2, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <F_QEI_Read+0x118>)
 800067e:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed < -4096) g_rightSpeed= (g_rightCount + (65535 - g_oldRightCount));
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <F_QEI_Read+0x11c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000688:	da09      	bge.n	800069e <F_QEI_Read+0xc2>
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <F_QEI_Read+0x110>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000692:	33ff      	adds	r3, #255	; 0xff
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <F_QEI_Read+0x10c>)
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	4413      	add	r3, r2
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <F_QEI_Read+0x11c>)
 800069c:	6013      	str	r3, [r2, #0]

	g_fwdSpeed = (float)( g_leftSpeed + g_rightSpeed ) / 2;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <F_QEI_Read+0x118>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <F_QEI_Read+0x11c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80006b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <F_QEI_Read+0x120>)
 80006ba:	edc3 7a00 	vstr	s15, [r3]
	g_rotSpeed =  g_rightSpeed - g_leftSpeed;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <F_QEI_Read+0x11c>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <F_QEI_Read+0x118>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <F_QEI_Read+0x124>)
 80006d2:	edc3 7a00 	vstr	s15, [r3]

	//F_QEI_XYTetaProcessing();
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	200041c0 	.word	0x200041c0
 80006e4:	200041b4 	.word	0x200041b4
 80006e8:	200041bc 	.word	0x200041bc
 80006ec:	200041cc 	.word	0x200041cc
 80006f0:	40000400 	.word	0x40000400
 80006f4:	200041c4 	.word	0x200041c4
 80006f8:	200041c8 	.word	0x200041c8
 80006fc:	200041b0 	.word	0x200041b0
 8000700:	200041b8 	.word	0x200041b8

08000704 <F_LCD_Init>:
#include "D_QEI.h"

extern int g_leftCount;
extern int g_rightCount;

void F_LCD_Init(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	g_addr = LCD_ADDR;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <F_LCD_Init+0x2c>)
 800070a:	2227      	movs	r2, #39	; 0x27
 800070c:	701a      	strb	r2, [r3, #0]
	g_cols = LCD_COLS;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <F_LCD_Init+0x30>)
 8000710:	2210      	movs	r2, #16
 8000712:	701a      	strb	r2, [r3, #0]
	g_rows = LCD_ROWS;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <F_LCD_Init+0x34>)
 8000716:	2202      	movs	r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
	g_charsize = LCD_CHARSIZE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <F_LCD_Init+0x38>)
 800071c:	2204      	movs	r2, #4
 800071e:	701a      	strb	r2, [r3, #0]
	g_backlightval = LCD_BACKLIGHT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <F_LCD_Init+0x3c>)
 8000722:	2208      	movs	r2, #8
 8000724:	701a      	strb	r2, [r3, #0]

	F_LCD_begin();
 8000726:	f000 f80d 	bl	8000744 <F_LCD_begin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200041d2 	.word	0x200041d2
 8000734:	200041d7 	.word	0x200041d7
 8000738:	200041d1 	.word	0x200041d1
 800073c:	200041d3 	.word	0x200041d3
 8000740:	200041d4 	.word	0x200041d4

08000744 <F_LCD_begin>:
void F_LCD_begin() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	g_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <F_LCD_begin+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]

	if (g_rows > 1) {
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <F_LCD_begin+0xc0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d906      	bls.n	8000764 <F_LCD_begin+0x20>
		g_displayfunction |= LCD_2LINE;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <F_LCD_begin+0xbc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <F_LCD_begin+0xbc>)
 8000762:	701a      	strb	r2, [r3, #0]
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((g_charsize != 0) && (g_rows == 1)) {
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <F_LCD_begin+0xc4>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00a      	beq.n	8000782 <F_LCD_begin+0x3e>
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <F_LCD_begin+0xc0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d106      	bne.n	8000782 <F_LCD_begin+0x3e>
		g_displayfunction |= LCD_5x10DOTS;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <F_LCD_begin+0xbc>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <F_LCD_begin+0xbc>)
 8000780:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f001 fde2 	bl	800234c <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	D_LCD_expanderWrite(g_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <F_LCD_begin+0xc8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f90b 	bl	80009a8 <D_LCD_expanderWrite>
	HAL_Delay(100);
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	f001 fdda 	bl	800234c <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	D_LCD_write4bits(0x03 << 4);
 8000798:	2030      	movs	r0, #48	; 0x30
 800079a:	f000 f8f4 	bl	8000986 <D_LCD_write4bits>
	HAL_Delay(5); // wait min 4.1ms
 800079e:	2005      	movs	r0, #5
 80007a0:	f001 fdd4 	bl	800234c <HAL_Delay>

	// second try
	D_LCD_write4bits(0x03 << 4);
 80007a4:	2030      	movs	r0, #48	; 0x30
 80007a6:	f000 f8ee 	bl	8000986 <D_LCD_write4bits>
	HAL_Delay(5); // wait min 4.1ms
 80007aa:	2005      	movs	r0, #5
 80007ac:	f001 fdce 	bl	800234c <HAL_Delay>

	// third go!
	D_LCD_write4bits(0x03 << 4);
 80007b0:	2030      	movs	r0, #48	; 0x30
 80007b2:	f000 f8e8 	bl	8000986 <D_LCD_write4bits>
	HAL_Delay(5);
 80007b6:	2005      	movs	r0, #5
 80007b8:	f001 fdc8 	bl	800234c <HAL_Delay>

	// finally, set to 4-bit interface
	D_LCD_write4bits(0x02 << 4);
 80007bc:	2020      	movs	r0, #32
 80007be:	f000 f8e2 	bl	8000986 <D_LCD_write4bits>

	// set # lines, font size, etc.
	F_LCD_command(LCD_FUNCTIONSET | g_displayfunction);
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <F_LCD_begin+0xbc>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f87f 	bl	80008d0 <F_LCD_command>

	// turn the display on with no cursor or blinking default
	g_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <F_LCD_begin+0xcc>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	701a      	strb	r2, [r3, #0]
	F_LCD_display();
 80007d8:	f000 f864 	bl	80008a4 <F_LCD_display>

	// clear it off
	F_LCD_clear();
 80007dc:	f000 f81c 	bl	8000818 <F_LCD_clear>

	// Initialize to default text direction (for roman languages)
	g_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <F_LCD_begin+0xd0>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	F_LCD_command(LCD_ENTRYMODESET | g_displaymode);
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <F_LCD_begin+0xd0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f86d 	bl	80008d0 <F_LCD_command>

	F_LCD_home();
 80007f6:	f000 f819 	bl	800082c <F_LCD_home>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200041d6 	.word	0x200041d6
 8000804:	200041d1 	.word	0x200041d1
 8000808:	200041d3 	.word	0x200041d3
 800080c:	200041d4 	.word	0x200041d4
 8000810:	200041d5 	.word	0x200041d5
 8000814:	200041d0 	.word	0x200041d0

08000818 <F_LCD_clear>:
/********** high level commands, for the user! */
void F_LCD_clear(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	F_LCD_command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 800081c:	2001      	movs	r0, #1
 800081e:	f000 f857 	bl	80008d0 <F_LCD_command>
	HAL_Delay(50);  // this command takes a long time!
 8000822:	2032      	movs	r0, #50	; 0x32
 8000824:	f001 fd92 	bl	800234c <HAL_Delay>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <F_LCD_home>:
void F_LCD_home(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	F_LCD_command(LCD_RETURNHOME);  // set cursor position to zero
 8000830:	2002      	movs	r0, #2
 8000832:	f000 f84d 	bl	80008d0 <F_LCD_command>
	HAL_Delay(50);  // this command takes a long time!
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f001 fd88 	bl	800234c <HAL_Delay>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <F_LCD_setCursor>:
void F_LCD_setCursor(uint8_t col, uint8_t row){
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	460a      	mov	r2, r1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	4613      	mov	r3, r2
 800084e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <F_LCD_setCursor+0x5c>)
 8000852:	f107 0408 	add.w	r4, r7, #8
 8000856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > g_rows) {
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <F_LCD_setCursor+0x60>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	429a      	cmp	r2, r3
 8000864:	d903      	bls.n	800086e <F_LCD_setCursor+0x2e>
		row = g_rows-1;    // we count rows starting w/0
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <F_LCD_setCursor+0x60>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3b01      	subs	r3, #1
 800086c:	71bb      	strb	r3, [r7, #6]
	}
	F_LCD_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	f107 0218 	add.w	r2, r7, #24
 8000876:	4413      	add	r3, r2
 8000878:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4413      	add	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	b25b      	sxtb	r3, r3
 8000886:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800088a:	b25b      	sxtb	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f81e 	bl	80008d0 <F_LCD_command>
}
 8000894:	bf00      	nop
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	0800c6d0 	.word	0x0800c6d0
 80008a0:	200041d1 	.word	0x200041d1

080008a4 <F_LCD_display>:
// Turn the display on/off (quickly)
void F_LCD_noDisplay() {
	g_displaycontrol &= ~LCD_DISPLAYON;
	F_LCD_command(LCD_DISPLAYCONTROL | g_displaycontrol);
}
void F_LCD_display() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	g_displaycontrol |= LCD_DISPLAYON;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <F_LCD_display+0x28>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <F_LCD_display+0x28>)
 80008b4:	701a      	strb	r2, [r3, #0]
	F_LCD_command(LCD_DISPLAYCONTROL | g_displaycontrol);
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <F_LCD_display+0x28>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f805 	bl	80008d0 <F_LCD_command>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200041d5 	.word	0x200041d5

080008d0 <F_LCD_command>:
  return g_backlightval == LCD_BACKLIGHT;
}

/*********** mid level commands, for sending data/cmds */

void F_LCD_command(uint8_t value) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	D_LCD_send(value, 0);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f830 	bl	8000944 <D_LCD_send>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <F_LCD_write>:
void F_LCD_write(uint8_t value) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	D_LCD_send(value, LCD_RS);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2101      	movs	r1, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f822 	bl	8000944 <D_LCD_send>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <F_LCD_printstr>:
void F_LCD_printstr(char *c){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	//This function is not identical to the function used for "real" I2C displays
	//it's here so the user sketch doesn't have to be changed
	int idx=0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	while (c[idx] !='\0' && idx<16) {
 8000914:	e009      	b.n	800092a <F_LCD_printstr+0x22>
		F_LCD_write(c[idx]);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffe4 	bl	80008ec <F_LCD_write>
		idx++;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
	while (c[idx] !='\0' && idx<16) {
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <F_LCD_printstr+0x34>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	ddec      	ble.n	8000916 <F_LCD_printstr+0xe>
	}
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <D_LCD_send>:
	F_LCD_printstr(line2);
}
/************ low level data pushing commands **********/

// write either command or data
void D_LCD_send(uint8_t value, uint8_t mode) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	4613      	mov	r3, r2
 8000952:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib=value&0xf0;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f023 030f 	bic.w	r3, r3, #15
 800095a:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib=(value<<4)&0xf0;
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	73bb      	strb	r3, [r7, #14]

	D_LCD_write4bits((highnib)|mode);
 8000962:	7bfa      	ldrb	r2, [r7, #15]
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	4313      	orrs	r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f80b 	bl	8000986 <D_LCD_write4bits>
	D_LCD_write4bits((lownib)|mode);
 8000970:	7bba      	ldrb	r2, [r7, #14]
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	4313      	orrs	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f804 	bl	8000986 <D_LCD_write4bits>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <D_LCD_write4bits>:
void D_LCD_write4bits(uint8_t value) {
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
	D_LCD_expanderWrite(value);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f808 	bl	80009a8 <D_LCD_expanderWrite>
	D_LCD_pulseEnable(value);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f81c 	bl	80009d8 <D_LCD_pulseEnable>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <D_LCD_expanderWrite>:
void D_LCD_expanderWrite(uint8_t a_data){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	F_I2C1_WriteValue(g_addr,a_data | g_backlightval);
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <D_LCD_expanderWrite+0x28>)
 80009b4:	7818      	ldrb	r0, [r3, #0]
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <D_LCD_expanderWrite+0x2c>)
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4313      	orrs	r3, r2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	f000 fdc3 	bl	800154c <F_I2C1_WriteValue>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200041d2 	.word	0x200041d2
 80009d4:	200041d4 	.word	0x200041d4

080009d8 <D_LCD_pulseEnable>:
void D_LCD_pulseEnable(uint8_t _data){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	D_LCD_expanderWrite(_data | LCD_EN);	// En high
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ffdc 	bl	80009a8 <D_LCD_expanderWrite>
	HAL_Delay(1);		// enable pulse must be >450ns
 80009f0:	2001      	movs	r0, #1
 80009f2:	f001 fcab 	bl	800234c <HAL_Delay>

	D_LCD_expanderWrite(_data & ~LCD_EN);	// En low
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f023 0304 	bic.w	r3, r3, #4
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ffd2 	bl	80009a8 <D_LCD_expanderWrite>
	//HAL_Delay(1);		// commands need > 37us to settle
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <F_LCD_DebugTask_Handler>:
	} else {
		F_LCD_noBacklight();		// turn backlight off
	}
}

void F_LCD_DebugTask_Handler(void const * argument){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

	char line1[16],line2[16];
	uint32_t OldTick =0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c

	// 1. Initialization message
	sprintf(line1,"Time %s",__TIME__);
 8000a18:	f107 0318 	add.w	r3, r7, #24
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <F_LCD_DebugTask_Handler+0xc8>)
 8000a1e:	492e      	ldr	r1, [pc, #184]	; (8000ad8 <F_LCD_DebugTask_Handler+0xcc>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00b fb05 	bl	800c030 <siprintf>
	sprintf(line2,"Date%s",__DATE__);
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <F_LCD_DebugTask_Handler+0xd0>)
 8000a2c:	492c      	ldr	r1, [pc, #176]	; (8000ae0 <F_LCD_DebugTask_Handler+0xd4>)
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f00b fafe 	bl	800c030 <siprintf>

	F_LCD_Init();
 8000a34:	f7ff fe66 	bl	8000704 <F_LCD_Init>
	F_LCD_setCursor(0,0);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ff00 	bl	8000840 <F_LCD_setCursor>
	F_LCD_printstr(line1);
 8000a40:	f107 0318 	add.w	r3, r7, #24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5f 	bl	8000908 <F_LCD_printstr>
	F_LCD_setCursor(0,1);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fef7 	bl	8000840 <F_LCD_setCursor>
	F_LCD_printstr(line2);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff56 	bl	8000908 <F_LCD_printstr>

	// 2. Wait 1s and clear Initialization message
	osDelay(1000);
 8000a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a60:	f008 febf 	bl	80097e2 <osDelay>
	F_LCD_clear();
 8000a64:	f7ff fed8 	bl	8000818 <F_LCD_clear>

    while(1){
        // 3. Wait until period elapse
    	osDelay(300);
 8000a68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a6c:	f008 feb9 	bl	80097e2 <osDelay>
    	F_GPIO_SetLed4(TRUE);	// Flag ON
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fb63 	bl	800113c <F_GPIO_SetLed4>
    	uint32_t currentTick = osKernelSysTick();
 8000a76:	f008 fe58 	bl	800972a <osKernelSysTick>
 8000a7a:	62b8      	str	r0, [r7, #40]	; 0x28

    	// 4. Fit data for printing
    	sprintf(line1,"t: %d",(int)currentTick);
 8000a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4918      	ldr	r1, [pc, #96]	; (8000ae4 <F_LCD_DebugTask_Handler+0xd8>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00b fad3 	bl	800c030 <siprintf>
    	sprintf(line2,"d: %d",(int)(currentTick-OldTick));
 8000a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4914      	ldr	r1, [pc, #80]	; (8000ae8 <F_LCD_DebugTask_Handler+0xdc>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00b fac9 	bl	800c030 <siprintf>

    	// 5. Print on LCD screen
    	F_LCD_clear();
 8000a9e:	f7ff febb 	bl	8000818 <F_LCD_clear>
    	F_LCD_setCursor(0,0);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fecb 	bl	8000840 <F_LCD_setCursor>
    	F_LCD_printstr(line1);
 8000aaa:	f107 0318 	add.w	r3, r7, #24
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff2a 	bl	8000908 <F_LCD_printstr>
    	F_LCD_setCursor(0,1);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fec2 	bl	8000840 <F_LCD_setCursor>
    	F_LCD_printstr(line2);
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff21 	bl	8000908 <F_LCD_printstr>

    	// 6. Set flag to LOW.
    	OldTick = currentTick;
 8000ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    	F_GPIO_SetLed4(FALSE);	// Flag OFF
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 fb36 	bl	800113c <F_GPIO_SetLed4>
    while(1){
 8000ad0:	e7ca      	b.n	8000a68 <F_LCD_DebugTask_Handler+0x5c>
 8000ad2:	bf00      	nop
 8000ad4:	0800c710 	.word	0x0800c710
 8000ad8:	0800c71c 	.word	0x0800c71c
 8000adc:	0800c724 	.word	0x0800c724
 8000ae0:	0800c730 	.word	0x0800c730
 8000ae4:	0800c738 	.word	0x0800c738
 8000ae8:	0800c740 	.word	0x0800c740

08000aec <F_Odometry_Compute>:
#include "F_Odometry.h"

#include "D_QEI.h"
#include "cmsis_os.h"

void F_Odometry_Compute(uint32_t period_inTick){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	F_QEI_Read();
 8000af4:	f7ff fd72 	bl	80005dc <F_QEI_Read>
	//	g_estimate.x +=  TICKTOMM * g_fwdSpeed  * cosf(g_estimate.teta);
	//	g_estimate.y +=  TICKTOMM * g_fwdSpeed  * sinf(g_estimate.teta);
	//	g_estimate.teta +=  tanf( TICKTOMM * g_rotSpeed  / ENTRAXE ) ;
	//
	//	F_Math_ModuloPi(&g_estimate.teta);
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <F_Odometry_RegTask_Handler>:

void F_Odometry_RegTask_Handler(void const * argument){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    TickType_t prevTick = 0u;	// Save previous tick
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
    TickType_t tick = 0u;		// Current tick
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]

    uint32_t period;

    // 1. Initialize QEI
    F_QEI_Reset();
 8000b10:	f7ff fd3e 	bl	8000590 <F_QEI_Reset>

    // 2. Get tick count
    prevTick = osKernelSysTick();
 8000b14:	f008 fe09 	bl	800972a <osKernelSysTick>
 8000b18:	6178      	str	r0, [r7, #20]

    while(1){
        // 2. Wait until period elapse
    	osDelay(ODO_TECH);
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f008 fe61 	bl	80097e2 <osDelay>
    	F_GPIO_SetLed1(TRUE);	// Flag On
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 fa9b 	bl	800105c <F_GPIO_SetLed1>

        // 3. Get tick and compute period
        tick = osKernelSysTick();
 8000b26:	f008 fe00 	bl	800972a <osKernelSysTick>
 8000b2a:	6138      	str	r0, [r7, #16]
        period = tick - prevTick;
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	60fb      	str	r3, [r7, #12]

        //4. Compute location
        F_Odometry_Compute(period);
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff ffd9 	bl	8000aec <F_Odometry_Compute>

        // 5. Set previous tick
        prevTick = tick;
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	617b      	str	r3, [r7, #20]
        F_GPIO_SetLed1(FALSE);	// Flag Off
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fa8c 	bl	800105c <F_GPIO_SetLed1>
    	osDelay(ODO_TECH);
 8000b44:	e7e9      	b.n	8000b1a <F_Odometry_RegTask_Handler+0x1a>
	...

08000b48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <vApplicationGetIdleTaskMemory+0x30>)
 8000b5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200001fc 	.word	0x200001fc
 8000b78:	20000250 	.word	0x20000250

08000b7c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b0a4      	sub	sp, #144	; 0x90
 8000b80:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <MX_FREERTOS_Init+0xc8>)
 8000b84:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b88:	461d      	mov	r5, r3
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f008 fdd4 	bl	800974a <osThreadCreate>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_FREERTOS_Init+0xcc>)
 8000ba6:	601a      	str	r2, [r3, #0]

  /* definition and creation of MotionRegTask */
  osThreadDef(MotionRegTask, StartMotionRegTask, osPriorityHigh, 0, 128);
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <MX_FREERTOS_Init+0xd0>)
 8000baa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotionRegTaskHandle = osThreadCreate(osThread(MotionRegTask), NULL);
 8000bbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fdc1 	bl	800974a <osThreadCreate>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_FREERTOS_Init+0xd4>)
 8000bcc:	601a      	str	r2, [r3, #0]

  /* definition and creation of OdometryRegTask */
  osThreadDef(OdometryRegTask, StartOdometryRegTask, osPriorityRealtime, 0, 128);
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_FREERTOS_Init+0xd8>)
 8000bd0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OdometryRegTaskHandle = osThreadCreate(osThread(OdometryRegTask), NULL);
 8000be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f008 fdae 	bl	800974a <osThreadCreate>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_FREERTOS_Init+0xdc>)
 8000bf2:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 128);
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_FREERTOS_Init+0xe0>)
 8000bf6:	f107 0420 	add.w	r4, r7, #32
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f008 fd9b 	bl	800974a <osThreadCreate>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_FREERTOS_Init+0xe4>)
 8000c18:	601a      	str	r2, [r3, #0]

  /* definition and creation of DebugTask */
  osThreadDef(DebugTask, StartDebugTask, osPriorityNormal, 0, 128);
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_FREERTOS_Init+0xe8>)
 8000c1c:	1d3c      	adds	r4, r7, #4
 8000c1e:	461d      	mov	r5, r3
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugTaskHandle = osThreadCreate(osThread(DebugTask), NULL);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 fd8a 	bl	800974a <osThreadCreate>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_FREERTOS_Init+0xec>)
 8000c3a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c3c:	bf00      	nop
 8000c3e:	3790      	adds	r7, #144	; 0x90
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	0800c754 	.word	0x0800c754
 8000c48:	200041d8 	.word	0x200041d8
 8000c4c:	0800c780 	.word	0x0800c780
 8000c50:	200041e8 	.word	0x200041e8
 8000c54:	0800c7ac 	.word	0x0800c7ac
 8000c58:	200041e0 	.word	0x200041e0
 8000c5c:	0800c7d4 	.word	0x0800c7d4
 8000c60:	200041e4 	.word	0x200041e4
 8000c64:	0800c7fc 	.word	0x0800c7fc
 8000c68:	200041dc 	.word	0x200041dc

08000c6c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  //MX_LWIP_Init();

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c74:	f00a fc02 	bl	800b47c <MX_USB_DEVICE_Init>


  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f008 fdb2 	bl	80097e2 <osDelay>
    F_GPIO_SetLed5(TRUE);	// Flag ON
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fa78 	bl	8001174 <F_GPIO_SetLed5>
    HAL_Delay(2);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f001 fb61 	bl	800234c <HAL_Delay>
    F_GPIO_SetLed5(FALSE);	// Flaf OFF
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f000 fa72 	bl	8001174 <F_GPIO_SetLed5>
    osDelay(10);
 8000c90:	e7f2      	b.n	8000c78 <StartDefaultTask+0xc>

08000c92 <StartMotionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionRegTask */
void StartMotionRegTask(void const * argument)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotionRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8000c9a:	2032      	movs	r0, #50	; 0x32
 8000c9c:	f008 fda1 	bl	80097e2 <osDelay>
    F_GPIO_SetLed2(TRUE);	// Flag ON
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f9f7 	bl	8001094 <F_GPIO_SetLed2>
    HAL_Delay(1);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f001 fb50 	bl	800234c <HAL_Delay>
    F_GPIO_SetLed2(FALSE);	// Flaf OFF
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 f9f1 	bl	8001094 <F_GPIO_SetLed2>
    osDelay(50);
 8000cb2:	e7f2      	b.n	8000c9a <StartMotionRegTask+0x8>

08000cb4 <StartOdometryRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOdometryRegTask */
void StartOdometryRegTask(void const * argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOdometryRegTask */
	F_Odometry_RegTask_Handler(argument);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff1f 	bl	8000b00 <F_Odometry_RegTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f008 fd8d 	bl	80097e2 <osDelay>
 8000cc8:	e7fb      	b.n	8000cc2 <StartOdometryRegTask+0xe>

08000cca <StartSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsTask */
void StartSensorsTask(void const * argument)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000cd2:	20c8      	movs	r0, #200	; 0xc8
 8000cd4:	f008 fd85 	bl	80097e2 <osDelay>
    F_GPIO_SetLed3(TRUE);	// Flag ON
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 f9f7 	bl	80010cc <F_GPIO_SetLed3>
    HAL_Delay(30);
 8000cde:	201e      	movs	r0, #30
 8000ce0:	f001 fb34 	bl	800234c <HAL_Delay>
    F_GPIO_SetLed3(FALSE);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f000 f9f1 	bl	80010cc <F_GPIO_SetLed3>
    osDelay(200);
 8000cea:	e7f2      	b.n	8000cd2 <StartSensorsTask+0x8>

08000cec <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	//F_UART_DebugTask_Handler(argument);
	F_LCD_DebugTask_Handler(argument);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fe89 	bl	8000a0c <F_LCD_DebugTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(400);
 8000cfa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000cfe:	f008 fd70 	bl	80097e2 <osDelay>
 8000d02:	e7fa      	b.n	8000cfa <StartDebugTask+0xe>

08000d04 <MX_GPIO_Init>:
     PC9   ------> S_TIM8_CH4
     PG9   ------> USART6_RX
     PG14   ------> USART6_TX
*/
void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
 8000d1e:	4bb3      	ldr	r3, [pc, #716]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4ab2      	ldr	r2, [pc, #712]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4bb0      	ldr	r3, [pc, #704]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	623b      	str	r3, [r7, #32]
 8000d34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	4bac      	ldr	r3, [pc, #688]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4aab      	ldr	r2, [pc, #684]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4ba9      	ldr	r3, [pc, #676]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	4ba5      	ldr	r3, [pc, #660]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4aa4      	ldr	r2, [pc, #656]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d5c:	f043 0320 	orr.w	r3, r3, #32
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4ba2      	ldr	r3, [pc, #648]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a9d      	ldr	r2, [pc, #628]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b9b      	ldr	r3, [pc, #620]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b97      	ldr	r3, [pc, #604]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a96      	ldr	r2, [pc, #600]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b94      	ldr	r3, [pc, #592]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b90      	ldr	r3, [pc, #576]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a8f      	ldr	r2, [pc, #572]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b8d      	ldr	r3, [pc, #564]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b89      	ldr	r3, [pc, #548]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a88      	ldr	r2, [pc, #544]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b86      	ldr	r3, [pc, #536]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b82      	ldr	r3, [pc, #520]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a81      	ldr	r2, [pc, #516]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b7f      	ldr	r3, [pc, #508]	; (8000fec <MX_GPIO_Init+0x2e8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f247 4130 	movw	r1, #29744	; 0x7430
 8000e00:	487b      	ldr	r0, [pc, #492]	; (8000ff0 <MX_GPIO_Init+0x2ec>)
 8000e02:	f001 fdef 	bl	80029e4 <HAL_GPIO_WritePin>
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2108      	movs	r1, #8
 8000e0a:	487a      	ldr	r0, [pc, #488]	; (8000ff4 <MX_GPIO_Init+0x2f0>)
 8000e0c:	f001 fdea 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000e10:	2200      	movs	r2, #0
 8000e12:	f244 41c1 	movw	r1, #17601	; 0x44c1
 8000e16:	4878      	ldr	r0, [pc, #480]	; (8000ff8 <MX_GPIO_Init+0x2f4>)
 8000e18:	f001 fde4 	bl	80029e4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8000e22:	4876      	ldr	r0, [pc, #472]	; (8000ffc <MX_GPIO_Init+0x2f8>)
 8000e24:	f001 fdde 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2e:	4874      	ldr	r0, [pc, #464]	; (8001000 <MX_GPIO_Init+0x2fc>)
 8000e30:	f001 fdd8 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|XSHUNT_3_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000e3a:	4872      	ldr	r0, [pc, #456]	; (8001004 <MX_GPIO_Init+0x300>)
 8000e3c:	f001 fdd2 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e40:	2374      	movs	r3, #116	; 0x74
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000e50:	2305      	movs	r3, #5
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4868      	ldr	r0, [pc, #416]	; (8000ffc <MX_GPIO_Init+0x2f8>)
 8000e5c:	f001 fc18 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	4b68      	ldr	r3, [pc, #416]	; (8001008 <MX_GPIO_Init+0x304>)
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	4865      	ldr	r0, [pc, #404]	; (800100c <MX_GPIO_Init+0x308>)
 8000e76:	f001 fc0b 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_FB_Pin;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_FB_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4858      	ldr	r0, [pc, #352]	; (8000ff0 <MX_GPIO_Init+0x2ec>)
 8000e8e:	f001 fbff 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000e92:	f247 4330 	movw	r3, #29744	; 0x7430
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4851      	ldr	r0, [pc, #324]	; (8000ff0 <MX_GPIO_Init+0x2ec>)
 8000eac:	f001 fbf0 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <MX_GPIO_Init+0x2f0>)
 8000ec8:	f001 fbe2 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TIRETTE_Pin|M_SF_Pin;
 8000ecc:	2360      	movs	r3, #96	; 0x60
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4845      	ldr	r0, [pc, #276]	; (8000ff4 <MX_GPIO_Init+0x2f0>)
 8000ee0:	f001 fbd6 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000ee4:	f244 43c1 	movw	r3, #17601	; 0x44c1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	483e      	ldr	r0, [pc, #248]	; (8000ff8 <MX_GPIO_Init+0x2f4>)
 8000efe:	f001 fbc7 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_FB_Pin;
 8000f02:	2302      	movs	r3, #2
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_FB_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	4838      	ldr	r0, [pc, #224]	; (8000ff8 <MX_GPIO_Init+0x2f4>)
 8000f16:	f001 fbbb 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CONTACT_4_Pin|USB_OverCurrent_Pin;
 8000f1a:	2381      	movs	r3, #129	; 0x81
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4835      	ldr	r0, [pc, #212]	; (8001004 <MX_GPIO_Init+0x300>)
 8000f2e:	f001 fbaf 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin;
 8000f32:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	482c      	ldr	r0, [pc, #176]	; (8000ffc <MX_GPIO_Init+0x2f8>)
 8000f4c:	f001 fba0 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PWM_SERVO_5_Pin|PWM_SERVO_6_Pin|PWM_SERVO_7_Pin|PWM_SERVO_8_Pin;
 8000f50:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4823      	ldr	r0, [pc, #140]	; (8000ffc <MX_GPIO_Init+0x2f8>)
 8000f6e:	f001 fb8f 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481d      	ldr	r0, [pc, #116]	; (8001000 <MX_GPIO_Init+0x2fc>)
 8000f8c:	f001 fb80 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|XSHUNT_3_Pin;
 8000f90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <MX_GPIO_Init+0x300>)
 8000faa:	f001 fb71 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin|PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 8000fae:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <MX_GPIO_Init+0x308>)
 8000fcc:	f001 fb60 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CONTACT_5_Pin|CONTACT_1_Pin|CONTACT_2_Pin|CONTACT_3_Pin;
 8000fd0:	23b1      	movs	r3, #177	; 0xb1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <MX_GPIO_Init+0x2fc>)
 8000fe4:	f001 fb54 	bl	8002690 <HAL_GPIO_Init>
 8000fe8:	e012      	b.n	8001010 <MX_GPIO_Init+0x30c>
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40021400 	.word	0x40021400
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021800 	.word	0x40021800
 8001008:	10110000 	.word	0x10110000
 800100c:	40020800 	.word	0x40020800

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001010:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001022:	2308      	movs	r3, #8
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_GPIO_Init+0x350>)
 800102e:	f001 fb2f 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTACT_6_Pin;
 8001032:	2302      	movs	r3, #2
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONTACT_6_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_GPIO_Init+0x354>)
 8001046:	f001 fb23 	bl	8002690 <HAL_GPIO_Init>

}
 800104a:	bf00      	nop
 800104c:	3738      	adds	r7, #56	; 0x38
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021800 	.word	0x40021800
 8001058:	40021000 	.word	0x40021000

0800105c <F_GPIO_SetLed1>:
	}
}
void F_GPIO_PrintCode(int from0to31){
	// TODO
}
void F_GPIO_SetLed1(int boul){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <F_GPIO_SetLed1+0x1c>
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <F_GPIO_SetLed1+0x34>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <F_GPIO_SetLed1+0x34>)
 8001070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001074:	6153      	str	r3, [r2, #20]
	}else{
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
	}
}
 8001076:	e005      	b.n	8001084 <F_GPIO_SetLed1+0x28>
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <F_GPIO_SetLed1+0x34>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <F_GPIO_SetLed1+0x34>)
 800107e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001082:	6153      	str	r3, [r2, #20]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40020400 	.word	0x40020400

08001094 <F_GPIO_SetLed2>:
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
	}else{
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
	}
}
void F_GPIO_SetLed2(int boul){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <F_GPIO_SetLed2+0x1c>
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <F_GPIO_SetLed2+0x34>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <F_GPIO_SetLed2+0x34>)
 80010a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010ac:	6153      	str	r3, [r2, #20]
	}else{
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
	}
}
 80010ae:	e005      	b.n	80010bc <F_GPIO_SetLed2+0x28>
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <F_GPIO_SetLed2+0x34>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <F_GPIO_SetLed2+0x34>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	6153      	str	r3, [r2, #20]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40020400 	.word	0x40020400

080010cc <F_GPIO_SetLed3>:
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
	}else{
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
	}
}
void F_GPIO_SetLed3(int boul){
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <F_GPIO_SetLed3+0x1c>
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <F_GPIO_SetLed3+0x34>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <F_GPIO_SetLed3+0x34>)
 80010e0:	f023 0308 	bic.w	r3, r3, #8
 80010e4:	6153      	str	r3, [r2, #20]
	}else{
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
	}
}
 80010e6:	e005      	b.n	80010f4 <F_GPIO_SetLed3+0x28>
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <F_GPIO_SetLed3+0x34>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <F_GPIO_SetLed3+0x34>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6153      	str	r3, [r2, #20]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40020000 	.word	0x40020000

08001104 <F_GPIO_ToogleLed3>:
void F_GPIO_ToogleLed3(void){
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	if((LED_3_GPIO_Port->ODR & LED_3_Pin) > 0){
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <F_GPIO_ToogleLed3+0x1e>
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 800111a:	f023 0308 	bic.w	r3, r3, #8
 800111e:	6153      	str	r3, [r2, #20]
	}else{
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
	}
}
 8001120:	e005      	b.n	800112e <F_GPIO_ToogleLed3+0x2a>
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <F_GPIO_ToogleLed3+0x34>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6153      	str	r3, [r2, #20]
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40020000 	.word	0x40020000

0800113c <F_GPIO_SetLed4>:
void F_GPIO_SetLed4(int boul){
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <F_GPIO_SetLed4+0x1c>
		LED_5_GPIO_Port->ODR &= ~LED_5_Pin;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <F_GPIO_SetLed4+0x34>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <F_GPIO_SetLed4+0x34>)
 8001150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001154:	6153      	str	r3, [r2, #20]
	}else{
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
	}
}
 8001156:	e005      	b.n	8001164 <F_GPIO_SetLed4+0x28>
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <F_GPIO_SetLed4+0x34>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <F_GPIO_SetLed4+0x34>)
 800115e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001162:	6153      	str	r3, [r2, #20]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40020c00 	.word	0x40020c00

08001174 <F_GPIO_SetLed5>:
		LED_5_GPIO_Port->ODR &= ~LED_5_Pin;
	}else{
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
	}
}
void F_GPIO_SetLed5(int boul){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <F_GPIO_SetLed5+0x1c>
		LED_2_GPIO_Port->ODR &= ~LED_2_Pin;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <F_GPIO_SetLed5+0x34>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <F_GPIO_SetLed5+0x34>)
 8001188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800118c:	6153      	str	r3, [r2, #20]
	}else{
		LED_2_GPIO_Port->ODR |= LED_2_Pin;
	}
}
 800118e:	e005      	b.n	800119c <F_GPIO_SetLed5+0x28>
		LED_2_GPIO_Port->ODR |= LED_2_Pin;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <F_GPIO_SetLed5+0x34>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <F_GPIO_SetLed5+0x34>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6153      	str	r3, [r2, #20]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f023 0201 	bic.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800134e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800135a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4013      	ands	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800

08001374 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	2220      	movs	r2, #32
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00a fd7b 	bl	800beae <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013c8:	2002      	movs	r0, #2
 80013ca:	f7ff ffbb 	bl	8001344 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80013ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d4:	2302      	movs	r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80013dc:	2301      	movs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4827      	ldr	r0, [pc, #156]	; (800148c <MX_I2C1_Init+0xe8>)
 80013ee:	f004 ff08 	bl	8006202 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80013f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013f6:	f7ff ffbd 	bl	8001374 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80013fa:	f7ff fed7 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80013fe:	4603      	mov	r3, r0
 8001400:	2200      	movs	r2, #0
 8001402:	2105      	movs	r1, #5
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff27 	bl	8001258 <NVIC_EncodePriority>
 800140a:	4603      	mov	r3, r0
 800140c:	4619      	mov	r1, r3
 800140e:	201f      	movs	r0, #31
 8001410:	f7ff fef8 	bl	8001204 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001414:	201f      	movs	r0, #31
 8001416:	f7ff fed7 	bl	80011c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800141a:	f7ff fec7 	bl	80011ac <__NVIC_GetPriorityGrouping>
 800141e:	4603      	mov	r3, r0
 8001420:	2200      	movs	r2, #0
 8001422:	2105      	movs	r1, #5
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff17 	bl	8001258 <NVIC_EncodePriority>
 800142a:	4603      	mov	r3, r0
 800142c:	4619      	mov	r1, r3
 800142e:	2020      	movs	r0, #32
 8001430:	f7ff fee8 	bl	8001204 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001434:	2020      	movs	r0, #32
 8001436:	f7ff fec7 	bl	80011c8 <__NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <MX_I2C1_Init+0xec>)
 800143c:	f7ff ff72 	bl	8001324 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001440:	4813      	ldr	r0, [pc, #76]	; (8001490 <MX_I2C1_Init+0xec>)
 8001442:	f7ff ff4c 	bl	80012de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <MX_I2C1_Init+0xec>)
 8001448:	f7ff ff39 	bl	80012be <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_I2C1_Init+0xf0>)
 8001452:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800146a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_I2C1_Init+0xec>)
 8001478:	f005 f844 	bl	8006504 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800147c:	2100      	movs	r1, #0
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_I2C1_Init+0xec>)
 8001480:	f7ff ff3d 	bl	80012fe <LL_I2C_SetOwnAddress2>

}
 8001484:	bf00      	nop
 8001486:	3738      	adds	r7, #56	; 0x38
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40020400 	.word	0x40020400
 8001490:	40005400 	.word	0x40005400
 8001494:	000186a0 	.word	0x000186a0

08001498 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	; 0x38
 800149c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	2220      	movs	r2, #32
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00a fd01 	bl	800beae <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80014bc:	2020      	movs	r0, #32
 80014be:	f7ff ff41 	bl	8001344 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80014c2:	2303      	movs	r3, #3
 80014c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014c6:	2302      	movs	r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80014ce:	2301      	movs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80014d6:	2304      	movs	r3, #4
 80014d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <MX_I2C2_Init+0xa8>)
 80014e0:	f004 fe8f 	bl	8006202 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80014e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014e8:	f7ff ff44 	bl	8001374 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 80014ec:	4815      	ldr	r0, [pc, #84]	; (8001544 <MX_I2C2_Init+0xac>)
 80014ee:	f7ff ff19 	bl	8001324 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <MX_I2C2_Init+0xac>)
 80014f4:	f7ff fef3 	bl	80012de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80014f8:	4812      	ldr	r0, [pc, #72]	; (8001544 <MX_I2C2_Init+0xac>)
 80014fa:	f7ff fee0 	bl	80012be <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_I2C2_Init+0xb0>)
 8001504:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800151c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4619      	mov	r1, r3
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_I2C2_Init+0xac>)
 800152a:	f004 ffeb 	bl	8006504 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 800152e:	2100      	movs	r1, #0
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_I2C2_Init+0xac>)
 8001532:	f7ff fee4 	bl	80012fe <LL_I2C_SetOwnAddress2>

}
 8001536:	bf00      	nop
 8001538:	3738      	adds	r7, #56	; 0x38
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021400 	.word	0x40021400
 8001544:	40005800 	.word	0x40005800
 8001548:	000186a0 	.word	0x000186a0

0800154c <F_I2C1_WriteValue>:
/* USER CODE BEGIN 1 */

/**
 * Write a single value in a slave register
 */
int F_I2C1_WriteValue(uint8_t slave_addr, uint8_t value){
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4613      	mov	r3, r2
 800155a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i

	__disable_irq();

	int i2c_status = I2C_STATUS_OK;
 800155e:	2301      	movs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
	uint32_t timeout = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
//	uint16_t i = 0;

	// Send start
	I2C1->CR1 |= I2C_CR1_START; // send START bit
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a27      	ldr	r2, [pc, #156]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8001572:	e008      	b.n	8001586 <F_I2C1_WriteValue+0x3a>
		if(timeout > I2C_TIMEOUT){
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <F_I2C1_WriteValue+0xc0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <F_I2C1_WriteValue+0x34>
			//printf("Erreur : Start Condition \n");
			return I2C_STATUS_KO;
 800157c:	2300      	movs	r3, #0
 800157e:	e03c      	b.n	80015fa <F_I2C1_WriteValue+0xae>
		}
	timeout++;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
	while (!(I2C1->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <F_I2C1_WriteValue+0x28>
	}
	timeout=0;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	// Send slave address
	I2C1->DR = (slave_addr<<1) & 0xFE  ;	// address + write
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 800159c:	b2db      	uxtb	r3, r3
 800159e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80015a0:	e008      	b.n	80015b4 <F_I2C1_WriteValue+0x68>
		if(timeout > I2C_TIMEOUT){
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <F_I2C1_WriteValue+0xc0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <F_I2C1_WriteValue+0x62>
			//printf("Erreur : Send slave address \n");
			return I2C_STATUS_KO;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e025      	b.n	80015fa <F_I2C1_WriteValue+0xae>
		}
		timeout++;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <F_I2C1_WriteValue+0x56>
	}
	timeout=0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
	i2c_status = I2C1->SR2; // read status to clear flag
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	60bb      	str	r3, [r7, #8]

	// Send register address
	I2C1->DR = value;
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	6113      	str	r3, [r2, #16]
	while ((!(I2C1->SR1 & I2C_SR1_TXE)) && (!(I2C1->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 80015d0:	bf00      	nop
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <F_I2C1_WriteValue+0x9e>
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f3      	beq.n	80015d2 <F_I2C1_WriteValue+0x86>


	I2C1->CR1 |= I2C_CR1_STOP; // send STOP bit
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <F_I2C1_WriteValue+0xbc>)
 80015f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015f6:	b662      	cpsie	i

	__enable_irq();

	return i2c_status;
 80015f8:	68bb      	ldr	r3, [r7, #8]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40005400 	.word	0x40005400
 800160c:	000186a0 	.word	0x000186a0

08001610 <LL_I2C_Enable>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001634:	f000 fe48 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001638:	f000 f81a 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163c:	f7ff fb62 	bl	8000d04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001640:	f000 fd5e 	bl	8002100 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001644:	f7ff feae 	bl	80013a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001648:	f7ff ff26 	bl	8001498 <MX_I2C2_Init>
  MX_TIM4_Init();
 800164c:	f000 fae0 	bl	8001c10 <MX_TIM4_Init>
  MX_UART4_Init();
 8001650:	f000 fd2c 	bl	80020ac <MX_UART4_Init>
  MX_TIM2_Init();
 8001654:	f000 f9e8 	bl	8001a28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001658:	f000 fa60 	bl	8001b1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Init_Motors();
  LL_I2C_Enable(I2C1);
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <main+0x3c>)
 800165e:	f7ff ffd7 	bl	8001610 <LL_I2C_Enable>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001662:	f7ff fa8b 	bl	8000b7c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001666:	f008 f859 	bl	800971c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800166a:	e7fe      	b.n	800166a <main+0x3a>
 800166c:	40005400 	.word	0x40005400

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	; 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	2230      	movs	r2, #48	; 0x30
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f00a fc15 	bl	800beae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <SystemClock_Config+0xcc>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <SystemClock_Config+0xcc>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <SystemClock_Config+0xd0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a21      	ldr	r2, [pc, #132]	; (8001740 <SystemClock_Config+0xd0>)
 80016ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e0:	2304      	movs	r3, #4
 80016e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e4:	23a8      	movs	r3, #168	; 0xa8
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ec:	2307      	movs	r3, #7
 80016ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 fb19 	bl	8003d2c <HAL_RCC_OscConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001700:	f000 f832 	bl	8001768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001704:	230f      	movs	r3, #15
 8001706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2302      	movs	r3, #2
 800170a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001710:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2105      	movs	r1, #5
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fd44 	bl	80041b0 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800172e:	f000 f81b 	bl	8001768 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	; 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001756:	f000 fdd9 	bl	800230c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40014400 	.word	0x40014400

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_MspInit+0x54>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_MspInit+0x54>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_MspInit+0x54>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_MspInit+0x54>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_MspInit+0x54>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_MspInit+0x54>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	210f      	movs	r1, #15
 80017ba:	f06f 0001 	mvn.w	r0, #1
 80017be:	f000 fe9f 	bl	8002500 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	2019      	movs	r0, #25
 80017e6:	f000 fe8b 	bl	8002500 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80017ea:	2019      	movs	r0, #25
 80017ec:	f000 fea4 	bl	8002538 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_InitTick+0xa4>)
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <HAL_InitTick+0xa4>)
 80017fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_InitTick+0xa4>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f002 feb8 	bl	800458c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800181c:	f002 fea2 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8001820:	4603      	mov	r3, r0
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_InitTick+0xa8>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	3b01      	subs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_InitTick+0xac>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_InitTick+0xb0>)
 8001838:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_InitTick+0xac>)
 800183c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001840:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_InitTick+0xac>)
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_InitTick+0xac>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_InitTick+0xac>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <HAL_InitTick+0xac>)
 8001856:	f002 fecb 	bl	80045f0 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <HAL_InitTick+0xac>)
 8001862:	f002 fef0 	bl	8004646 <HAL_TIM_Base_Start_IT>
 8001866:	4603      	mov	r3, r0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	431bde83 	.word	0x431bde83
 800187c:	200041ec 	.word	0x200041ec
 8001880:	40014400 	.word	0x40014400

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018be:	f002 ff50 	bl	8004762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200041ec 	.word	0x200041ec

080018cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(UART4->SR & USART_SR_RXNE){
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <UART4_IRQHandler+0x34>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00c      	beq.n	8001922 <UART4_IRQHandler+0x2a>
		UART4->SR &= ~USART_SR_RXNE;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <UART4_IRQHandler+0x34>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <UART4_IRQHandler+0x34>)
 800190e:	f023 0320 	bic.w	r3, r3, #32
 8001912:	6013      	str	r3, [r2, #0]

		F_GPIO_ToogleLed3();
 8001914:	f7ff fbf6 	bl	8001104 <F_GPIO_ToogleLed3>
		g_uart_buff = UART4->DR;
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <UART4_IRQHandler+0x34>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <UART4_IRQHandler+0x38>)
 8001920:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001922:	4804      	ldr	r0, [pc, #16]	; (8001934 <UART4_IRQHandler+0x3c>)
 8001924:	f003 ff22 	bl	800576c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40004c00 	.word	0x40004c00
 8001930:	2000422c 	.word	0x2000422c
 8001934:	200042f0 	.word	0x200042f0

08001938 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <ETH_IRQHandler+0x10>)
 800193e:	f000 fe2b 	bl	8002598 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20005c04 	.word	0x20005c04

0800194c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <OTG_FS_IRQHandler+0x10>)
 8001952:	f001 f9b0 	bl	8002cb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200088c0 	.word	0x200088c0

08001960 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x50>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x16>
		heap_end = &end;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <_sbrk+0x50>)
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <_sbrk+0x54>)
 8001974:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <_sbrk+0x50>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <_sbrk+0x50>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	466a      	mov	r2, sp
 8001986:	4293      	cmp	r3, r2
 8001988:	d905      	bls.n	8001996 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <_sbrk+0x58>)
 800198c:	220c      	movs	r2, #12
 800198e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001994:	e006      	b.n	80019a4 <_sbrk+0x44>
	}

	heap_end += incr;
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <_sbrk+0x50>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <_sbrk+0x50>)
 80019a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	20000450 	.word	0x20000450
 80019b4:	20008cc8 	.word	0x20008cc8
 80019b8:	2000741c 	.word	0x2000741c

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <SystemInit+0x60>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <SystemInit+0x60>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <SystemInit+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <SystemInit+0x64>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SystemInit+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <SystemInit+0x64>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <SystemInit+0x64>)
 80019e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <SystemInit+0x64>)
 80019f4:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <SystemInit+0x68>)
 80019f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <SystemInit+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <SystemInit+0x64>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <SystemInit+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SystemInit+0x60>)
 8001a0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a10:	609a      	str	r2, [r3, #8]
#endif
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	40023800 	.word	0x40023800
 8001a24:	24003010 	.word	0x24003010

08001a28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2e:	f107 0318 	add.w	r3, r7, #24
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001a52:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a78:	4827      	ldr	r0, [pc, #156]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a7a:	f002 fdb9 	bl	80045f0 <HAL_TIM_Base_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001a84:	f7ff fe70 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	4619      	mov	r1, r3
 8001a94:	4820      	ldr	r0, [pc, #128]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001a96:	f003 f8cf 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001aa0:	f7ff fe62 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001aa4:	481c      	ldr	r0, [pc, #112]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001aa6:	f002 fe27 	bl	80046f8 <HAL_TIM_IC_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ab0:	f7ff fe5a 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4815      	ldr	r0, [pc, #84]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001ac4:	f003 fdac 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001ace:	f7ff fe4b 	bl	8001768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001aea:	f002 ff42 	bl	8004972 <HAL_TIM_IC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001af4:	f7ff fe38 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001af8:	463b      	mov	r3, r7
 8001afa:	2204      	movs	r2, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <MX_TIM2_Init+0xf0>)
 8001b00:	f002 ff37 	bl	8004972 <HAL_TIM_IC_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001b0a:	f7ff fe2d 	bl	8001768 <Error_Handler>
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200042b0 	.word	0x200042b0

08001b1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <MX_TIM3_Init+0xf0>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b6a:	4827      	ldr	r0, [pc, #156]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b6c:	f002 fd40 	bl	80045f0 <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8001b76:	f7ff fdf7 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4619      	mov	r1, r3
 8001b86:	4820      	ldr	r0, [pc, #128]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b88:	f003 f856 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001b92:	f7ff fde9 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001b96:	481c      	ldr	r0, [pc, #112]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001b98:	f002 fdae 	bl	80046f8 <HAL_TIM_IC_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ba2:	f7ff fde1 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4814      	ldr	r0, [pc, #80]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001bb6:	f003 fd33 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001bc0:	f7ff fdd2 	bl	8001768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bc4:	230a      	movs	r3, #10
 8001bc6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001bdc:	f002 fec9 	bl	8004972 <HAL_TIM_IC_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8001be6:	f7ff fdbf 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	2204      	movs	r2, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM3_Init+0xec>)
 8001bf2:	f002 febe 	bl	8004972 <HAL_TIM_IC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001bfc:	f7ff fdb4 	bl	8001768 <Error_Handler>
  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20004270 	.word	0x20004270
 8001c0c:	40000400 	.word	0x40000400

08001c10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08e      	sub	sp, #56	; 0x38
 8001c14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c42:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <MX_TIM4_Init+0x104>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2250;
 8001c52:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c54:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c66:	482a      	ldr	r0, [pc, #168]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c68:	f002 fcc2 	bl	80045f0 <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001c72:	f7ff fd79 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4823      	ldr	r0, [pc, #140]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c84:	f002 ffd8 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c8e:	f7ff fd6b 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c92:	481f      	ldr	r0, [pc, #124]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001c94:	f002 fcfb 	bl	800468e <HAL_TIM_PWM_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c9e:	f7ff fd63 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4817      	ldr	r0, [pc, #92]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001cb2:	f003 fcb5 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001cbc:	f7ff fd54 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc0:	2360      	movs	r3, #96	; 0x60
 8001cc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8001cc4:	2314      	movs	r3, #20
 8001cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480e      	ldr	r0, [pc, #56]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001cd8:	f002 fee8 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ce2:	f7ff fd41 	bl	8001768 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	220c      	movs	r2, #12
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001cf2:	f002 fedb 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001cfc:	f7ff fd34 	bl	8001768 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <MX_TIM4_Init+0x100>)
 8001d02:	f000 f8b9 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001d06:	bf00      	nop
 8001d08:	3738      	adds	r7, #56	; 0x38
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20004230 	.word	0x20004230
 8001d14:	40000800 	.word	0x40000800

08001d18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d14b      	bne.n	8001dd2 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
 8001d3e:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a41      	ldr	r2, [pc, #260]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = QEI_M1_CH1_Pin;
 8001d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001da0:	2301      	movs	r3, #1
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QEI_M1_CH1_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	482f      	ldr	r0, [pc, #188]	; (8001e68 <HAL_TIM_Base_MspInit+0x150>)
 8001dac:	f000 fc70 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QEI_M1_CH2_Pin;
 8001db0:	2308      	movs	r3, #8
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QEI_M1_CH2_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4828      	ldr	r0, [pc, #160]	; (8001e6c <HAL_TIM_Base_MspInit+0x154>)
 8001dcc:	f000 fc60 	bl	8002690 <HAL_GPIO_Init>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001dd0:	e044      	b.n	8001e5c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM3)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <HAL_TIM_Base_MspInit+0x158>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d12c      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI_M2_CH1_Pin|QEI_M2_CH2_Pin;
 8001e14:	2330      	movs	r3, #48	; 0x30
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e24:	2302      	movs	r3, #2
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480f      	ldr	r0, [pc, #60]	; (8001e6c <HAL_TIM_Base_MspInit+0x154>)
 8001e30:	f000 fc2e 	bl	8002690 <HAL_GPIO_Init>
}
 8001e34:	e012      	b.n	8001e5c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM4)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <HAL_TIM_Base_MspInit+0x15c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d10d      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_TIM_Base_MspInit+0x14c>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3738      	adds	r7, #56	; 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40000800 	.word	0x40000800

08001e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_TIM_MspPostInit+0x68>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d11e      	bne.n	8001ed8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = CMD_MOTEUR_DROIT_Pin|CMD_MOTEUR_GAUCHE_Pin;
 8001eb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001eba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_TIM_MspPostInit+0x70>)
 8001ed4:	f000 fbdc 	bl	8002690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40000800 	.word	0x40000800
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020c00 	.word	0x40020c00

08001eec <__NVIC_GetPriorityGrouping>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4907      	ldr	r1, [pc, #28]	; (8001f40 <__NVIC_EnableIRQ+0x38>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_SetPriority>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	; (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60da      	str	r2, [r3, #12]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	615a      	str	r2, [r3, #20]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <LL_AHB1_GRP1_EnableClock>:
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4313      	orrs	r3, r2
 800205e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4013      	ands	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40023800 	.word	0x40023800

0800207c <LL_APB1_GRP1_EnableClock>:
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40023800 	.word	0x40023800

080020ac <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <MX_UART4_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80020bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_UART4_Init+0x4c>)
 80020e4:	f003 faf5 	bl	80056d2 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80020ee:	f7ff fb3b 	bl	8001768 <Error_Handler>
  }

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200042f0 	.word	0x200042f0
 80020fc:	40004c00 	.word	0x40004c00

08002100 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800212a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800212e:	f7ff ffa5 	bl	800207c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002132:	2008      	movs	r0, #8
 8002134:	f7ff ff8a 	bl	800204c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002138:	f44f 7340 	mov.w	r3, #768	; 0x300
 800213c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800213e:	2302      	movs	r3, #2
 8002140:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800214a:	2301      	movs	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800214e:	2307      	movs	r3, #7
 8002150:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4819      	ldr	r0, [pc, #100]	; (80021bc <MX_USART3_UART_Init+0xbc>)
 8002158:	f004 f853 	bl	8006202 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800215c:	f7ff fec6 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002160:	4603      	mov	r3, r0
 8002162:	2200      	movs	r2, #0
 8002164:	2105      	movs	r1, #5
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff16 	bl	8001f98 <NVIC_EncodePriority>
 800216c:	4603      	mov	r3, r0
 800216e:	4619      	mov	r1, r3
 8002170:	2027      	movs	r0, #39	; 0x27
 8002172:	f7ff fee7 	bl	8001f44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002176:	2027      	movs	r0, #39	; 0x27
 8002178:	f7ff fec6 	bl	8001f08 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 57600;
 800217c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002180:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800218e:	230c      	movs	r3, #12
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002192:	2300      	movs	r3, #0
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002196:	2300      	movs	r3, #0
 8002198:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_USART3_UART_Init+0xc0>)
 80021a2:	f004 fc11 	bl	80069c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <MX_USART3_UART_Init+0xc0>)
 80021a8:	f7ff ff39 	bl	800201e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_USART3_UART_Init+0xc0>)
 80021ae:	f7ff ff26 	bl	8001ffe <LL_USART_Enable>

}
 80021b2:	bf00      	nop
 80021b4:	3738      	adds	r7, #56	; 0x38
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40004800 	.word	0x40004800

080021c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <HAL_UART_MspInit+0xa4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d13c      	bne.n	8002260 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_UART_MspInit+0xa8>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_UART_MspInit+0xa8>)
 80021f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_UART_MspInit+0xa8>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_UART_MspInit+0xa8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_UART_MspInit+0xa8>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_UART_MspInit+0xa8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800221e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002228:	2301      	movs	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002230:	2308      	movs	r3, #8
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	480d      	ldr	r0, [pc, #52]	; (8002270 <HAL_UART_MspInit+0xac>)
 800223c:	f000 fa28 	bl	8002690 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2105      	movs	r1, #5
 8002244:	2034      	movs	r0, #52	; 0x34
 8002246:	f000 f95b 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800224a:	2034      	movs	r0, #52	; 0x34
 800224c:	f000 f974 	bl	8002538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */
	UART4->CR1 |= USART_CR1_UE 	// UART Enable
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_UART_MspInit+0xa4>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_UART_MspInit+0xa4>)
 8002256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800225a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800225e:	60d3      	str	r3, [r2, #12]
				| USART_CR1_RE		// Rx enbale
				| USART_CR1_RXNEIE;	// Rx enable interrupt
  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002260:	bf00      	nop
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40004c00 	.word	0x40004c00
 800226c:	40023800 	.word	0x40023800
 8002270:	40020800 	.word	0x40020800

08002274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800227a:	e003      	b.n	8002284 <LoopCopyDataInit>

0800227c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800227e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002282:	3104      	adds	r1, #4

08002284 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800228a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800228c:	d3f6      	bcc.n	800227c <CopyDataInit>
  ldr  r2, =_sbss
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002290:	e002      	b.n	8002298 <LoopFillZerobss>

08002292 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002292:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002294:	f842 3b04 	str.w	r3, [r2], #4

08002298 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800229a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800229c:	d3f9      	bcc.n	8002292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800229e:	f7ff fb8d 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a2:	f009 fdc5 	bl	800be30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a6:	f7ff f9c3 	bl	8001630 <main>
  bx  lr    
 80022aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80022b0:	0800c924 	.word	0x0800c924
  ldr  r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022b8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80022bc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80022c0:	20008cc8 	.word	0x20008cc8

080022c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <HAL_Init+0x40>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_Init+0x40>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_Init+0x40>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f8fa 	bl	80024ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7ff fa6a 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7ff fa3c 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00

0800230c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x24>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4413      	add	r3, r2
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_IncTick+0x24>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000004 	.word	0x20000004
 8002330:	20004330 	.word	0x20004330

08002334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return uwTick;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_GetTick+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20004330 	.word	0x20004330

0800234c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff ffee 	bl	8002334 <HAL_GetTick>
 8002358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002364:	d005      	beq.n	8002372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_Delay+0x40>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002372:	bf00      	nop
 8002374:	f7ff ffde 	bl	8002334 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	429a      	cmp	r2, r3
 8002382:	d8f7      	bhi.n	8002374 <HAL_Delay+0x28>
  {
  }
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000004 	.word	0x20000004

08002390 <__NVIC_SetPriorityGrouping>:
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff4c 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002512:	f7ff ff61 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 8002516:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f7ff ffb1 	bl	8002484 <NVIC_EncodePriority>
 8002522:	4602      	mov	r2, r0
 8002524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff80 	bl	8002430 <__NVIC_SetPriority>
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff54 	bl	80023f4 <__NVIC_EnableIRQ>
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d004      	beq.n	8002572 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e00c      	b.n	800258c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2205      	movs	r2, #5
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a8:	3314      	adds	r3, #20
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d112      	bne.n	80025da <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f005 fd75 	bl	80080a4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c2:	3314      	adds	r3, #20
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025d8:	e01b      	b.n	8002612 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e2:	3314      	adds	r3, #20
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d111      	bne.n	8002612 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f839 	bl	8002666 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fc:	3314      	adds	r3, #20
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261a:	3314      	adds	r3, #20
 800261c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002620:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262a:	3314      	adds	r3, #20
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002636:	d112      	bne.n	800265e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f81e 	bl	800267a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002646:	3314      	adds	r3, #20
 8002648:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800264c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e177      	b.n	800299c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 8166 	bne.w	8002996 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x4a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b12      	cmp	r3, #18
 80026d8:	d123      	bne.n	8002722 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d00b      	beq.n	8002776 <HAL_GPIO_Init+0xe6>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276a:	2b11      	cmp	r3, #17
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80c0 	beq.w	8002996 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_GPIO_Init+0x320>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a64      	ldr	r2, [pc, #400]	; (80029b0 <HAL_GPIO_Init+0x320>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <HAL_GPIO_Init+0x320>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_GPIO_Init+0x324>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a57      	ldr	r2, [pc, #348]	; (80029b8 <HAL_GPIO_Init+0x328>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d037      	beq.n	80028ce <HAL_GPIO_Init+0x23e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a56      	ldr	r2, [pc, #344]	; (80029bc <HAL_GPIO_Init+0x32c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d031      	beq.n	80028ca <HAL_GPIO_Init+0x23a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a55      	ldr	r2, [pc, #340]	; (80029c0 <HAL_GPIO_Init+0x330>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d02b      	beq.n	80028c6 <HAL_GPIO_Init+0x236>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a54      	ldr	r2, [pc, #336]	; (80029c4 <HAL_GPIO_Init+0x334>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d025      	beq.n	80028c2 <HAL_GPIO_Init+0x232>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a53      	ldr	r2, [pc, #332]	; (80029c8 <HAL_GPIO_Init+0x338>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01f      	beq.n	80028be <HAL_GPIO_Init+0x22e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a52      	ldr	r2, [pc, #328]	; (80029cc <HAL_GPIO_Init+0x33c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d019      	beq.n	80028ba <HAL_GPIO_Init+0x22a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a51      	ldr	r2, [pc, #324]	; (80029d0 <HAL_GPIO_Init+0x340>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a50      	ldr	r2, [pc, #320]	; (80029d4 <HAL_GPIO_Init+0x344>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_GPIO_Init+0x222>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4f      	ldr	r2, [pc, #316]	; (80029d8 <HAL_GPIO_Init+0x348>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <HAL_GPIO_Init+0x21e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4e      	ldr	r2, [pc, #312]	; (80029dc <HAL_GPIO_Init+0x34c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_GPIO_Init+0x21a>
 80028a6:	2309      	movs	r3, #9
 80028a8:	e012      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028aa:	230a      	movs	r3, #10
 80028ac:	e010      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028ae:	2308      	movs	r3, #8
 80028b0:	e00e      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00c      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028b6:	2306      	movs	r3, #6
 80028b8:	e00a      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028ba:	2305      	movs	r3, #5
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028be:	2304      	movs	r3, #4
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x240>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4934      	ldr	r1, [pc, #208]	; (80029b4 <HAL_GPIO_Init+0x324>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_GPIO_Init+0x350>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002912:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002918:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <HAL_GPIO_Init+0x350>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800293c:	4a28      	ldr	r2, [pc, #160]	; (80029e0 <HAL_GPIO_Init+0x350>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002966:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_GPIO_Init+0x350>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002990:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f ae84 	bls.w	80026ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	3724      	adds	r7, #36	; 0x24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40021400 	.word	0x40021400
 80029d0:	40021800 	.word	0x40021800
 80029d4:	40021c00 	.word	0x40021c00
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40022400 	.word	0x40022400
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a18:	b08f      	sub	sp, #60	; 0x3c
 8002a1a:	af0a      	add	r7, sp, #40	; 0x28
 8002a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e10f      	b.n	8002c48 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f008 fee6 	bl	800b814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 f955 	bl	8006d16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	687e      	ldr	r6, [r7, #4]
 8002a74:	466d      	mov	r5, sp
 8002a76:	f106 0410 	add.w	r4, r6, #16
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a8a:	1d33      	adds	r3, r6, #4
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f004 f82c 	bl	8006aec <USB_CoreInit>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0d0      	b.n	8002c48 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 f943 	bl	8006d38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e04a      	b.n	8002b4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	333d      	adds	r3, #61	; 0x3d
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	333c      	adds	r3, #60	; 0x3c
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	b298      	uxth	r0, r3
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3342      	adds	r3, #66	; 0x42
 8002af4:	4602      	mov	r2, r0
 8002af6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	333f      	adds	r3, #63	; 0x3f
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3344      	adds	r3, #68	; 0x44
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3348      	adds	r3, #72	; 0x48
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	3350      	adds	r3, #80	; 0x50
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3af      	bcc.n	8002ab8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e044      	b.n	8002be8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	3301      	adds	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3b5      	bcc.n	8002b5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	687e      	ldr	r6, [r7, #4]
 8002bfa:	466d      	mov	r5, sp
 8002bfc:	f106 0410 	add.w	r4, r6, #16
 8002c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c10:	1d33      	adds	r3, r6, #4
 8002c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	f004 f8b9 	bl	8006d8c <USB_DevInit>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e00d      	b.n	8002c48 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f005 f8ae 	bl	8007da2 <USB_DevDisconnect>

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_PCD_Start+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e020      	b.n	8002cae <HAL_PCD_Start+0x5e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d109      	bne.n	8002c90 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d005      	beq.n	8002c90 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 f86c 	bl	8007d72 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 f828 	bl	8006cf4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cb6:	b590      	push	{r4, r7, lr}
 8002cb8:	b08d      	sub	sp, #52	; 0x34
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f005 f913 	bl	8007ef8 <USB_GetMode>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 838e 	bne.w	80033f6 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 f877 	bl	8007dd2 <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8384 	beq.w	80033f4 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f005 f86e 	bl	8007dd2 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d107      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f002 0202 	and.w	r2, r2, #2
 8002d0e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f005 f85c 	bl	8007dd2 <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d24:	d17b      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 f862 	bl	8007df8 <USB_ReadDevAllOutEpInterrupt>
 8002d34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d36:	e06f      	b.n	8002e18 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d064      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f005 f887 	bl	8007e60 <USB_ReadDevOutEPInterrupt>
 8002d52:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fe0e 	bl	8003994 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00c      	beq.n	8002d9c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 ff0d 	bl	8003ba4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d96:	461a      	mov	r2, r3
 8002d98:	2308      	movs	r3, #8
 8002d9a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db2:	461a      	mov	r2, r3
 8002db4:	2310      	movs	r3, #16
 8002db6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d015      	beq.n	8002dee <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	f005 f8d2 	bl	8007f80 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	2320      	movs	r3, #32
 8002dec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	461a      	mov	r2, r3
 8002e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	3301      	adds	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d18c      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 ffd5 	bl	8007dd2 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e32:	f040 80c4 	bne.w	8002fbe <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fff6 	bl	8007e2c <USB_ReadDevAllInEpInterrupt>
 8002e40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e46:	e0b6      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80ab 	beq.w	8002faa <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f005 f81c 	bl	8007e9c <USB_ReadDevInEPInterrupt>
 8002e64:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69f9      	ldr	r1, [r7, #28]
 8002e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e90:	4013      	ands	r3, r2
 8002e92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d11b      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3348      	adds	r3, #72	; 0x48
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4403      	add	r3, r0
 8002ece:	3344      	adds	r3, #68	; 0x44
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4419      	add	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4403      	add	r3, r0
 8002ee2:	3348      	adds	r3, #72	; 0x48
 8002ee4:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f008 fd20 	bl	800b932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d116      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d113      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x272>
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3350      	adds	r3, #80	; 0x50
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f20:	461a      	mov	r2, r3
 8002f22:	2101      	movs	r1, #1
 8002f24:	f005 f82c 	bl	8007f80 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2308      	movs	r3, #8
 8002f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	2340      	movs	r3, #64	; 0x40
 8002f7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f92:	461a      	mov	r2, r3
 8002f94:	2302      	movs	r3, #2
 8002f96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fc67 	bl	8003878 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	3301      	adds	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af45 	bne.w	8002e48 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 ff05 	bl	8007dd2 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd2:	d122      	bne.n	800301a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fe89 	bl	8003d14 <HAL_PCDEx_LPM_Callback>
 8003002:	e002      	b.n	800300a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f008 fd0b 	bl	800ba20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fed7 	bl	8007dd2 <USB_ReadInterrupts>
 8003024:	4603      	mov	r3, r0
 8003026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302e:	d112      	bne.n	8003056 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d102      	bne.n	8003046 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f008 fcc7 	bl	800b9d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003054:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 feb9 	bl	8007dd2 <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306a:	f040 80a7 	bne.w	80031bc <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2110      	movs	r1, #16
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fff1 	bl	8007070 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308e:	2300      	movs	r3, #0
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003092:	e036      	b.n	8003102 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	461a      	mov	r2, r3
 80030a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d4:	461a      	mov	r2, r3
 80030d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ec:	0151      	lsls	r1, r2, #5
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	440a      	add	r2, r1
 80030f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	3301      	adds	r3, #1
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003108:	429a      	cmp	r2, r3
 800310a:	d3c3      	bcc.n	8003094 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800311e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003138:	f043 030b 	orr.w	r3, r3, #11
 800313c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314e:	f043 030b 	orr.w	r3, r3, #11
 8003152:	6453      	str	r3, [r2, #68]	; 0x44
 8003154:	e015      	b.n	8003182 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003164:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003168:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800316c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317c:	f043 030b 	orr.w	r3, r3, #11
 8003180:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003190:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003194:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031a6:	461a      	mov	r2, r3
 80031a8:	f004 feea 	bl	8007f80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fe06 	bl	8007dd2 <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d0:	d124      	bne.n	800321c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 fe9c 	bl	8007f14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 ffa6 	bl	8007132 <USB_GetDevSpeed>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681c      	ldr	r4, [r3, #0]
 80031f2:	f001 f997 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 80031f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	4620      	mov	r0, r4
 8003202:	f003 fcd5 	bl	8006bb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f008 fbbb 	bl	800b982 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800321a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f004 fdd6 	bl	8007dd2 <USB_ReadInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b10      	cmp	r3, #16
 800322e:	d161      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0210 	bic.w	r2, r2, #16
 800323e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	0c5b      	lsrs	r3, r3, #17
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	2b02      	cmp	r3, #2
 800326a:	d124      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d035      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	6a38      	ldr	r0, [r7, #32]
 800328c:	f004 fc4e 	bl	8007b2c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	619a      	str	r2, [r3, #24]
 80032b4:	e016      	b.n	80032e4 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	0c5b      	lsrs	r3, r3, #17
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d110      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032c8:	2208      	movs	r2, #8
 80032ca:	4619      	mov	r1, r3
 80032cc:	6a38      	ldr	r0, [r7, #32]
 80032ce:	f004 fc2d 	bl	8007b2c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032de:	441a      	add	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0210 	orr.w	r2, r2, #16
 80032f2:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 fd6a 	bl	8007dd2 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d10a      	bne.n	800331e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f008 fb2c 	bl	800b966 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f002 0208 	and.w	r2, r2, #8
 800331c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fd55 	bl	8007dd2 <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003332:	d10f      	bne.n	8003354 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	b2db      	uxtb	r3, r3
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f008 fb8e 	bl	800ba60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f004 fd3a 	bl	8007dd2 <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003368:	d10f      	bne.n	800338a <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	b2db      	uxtb	r3, r3
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f008 fb61 	bl	800ba3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f004 fd1f 	bl	8007dd2 <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d10a      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f008 fb6f 	bl	800ba84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 fd09 	bl	8007dd2 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d115      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f008 fb5f 	bl	800baa0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	e000      	b.n	80033f6 <HAL_PCD_IRQHandler+0x740>
      return;
 80033f4:	bf00      	nop
    }
  }
}
 80033f6:	3734      	adds	r7, #52	; 0x34
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}

080033fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_PCD_SetAddress+0x1a>
 8003412:	2302      	movs	r3, #2
 8003414:	e013      	b.n	800343e <HAL_PCD_SetAddress+0x42>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fc79 	bl	8007d26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	4608      	mov	r0, r1
 8003450:	4611      	mov	r1, r2
 8003452:	461a      	mov	r2, r3
 8003454:	4603      	mov	r3, r0
 8003456:	70fb      	strb	r3, [r7, #3]
 8003458:	460b      	mov	r3, r1
 800345a:	803b      	strh	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da0f      	bge.n	800348c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3338      	adds	r3, #56	; 0x38
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	3304      	adds	r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	705a      	strb	r2, [r3, #1]
 800348a:	e00f      	b.n	80034ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034b8:	883a      	ldrh	r2, [r7, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	78ba      	ldrb	r2, [r7, #2]
 80034c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034d6:	78bb      	ldrb	r3, [r7, #2]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d102      	bne.n	80034e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_PCD_EP_Open+0xaa>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e00e      	b.n	800350e <HAL_PCD_EP_Open+0xc8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68f9      	ldr	r1, [r7, #12]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fe3c 	bl	800717c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800350c:	7afb      	ldrb	r3, [r7, #11]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003526:	2b00      	cmp	r3, #0
 8003528:	da0f      	bge.n	800354a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	3338      	adds	r3, #56	; 0x38
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	705a      	strb	r2, [r3, #1]
 8003548:	e00f      	b.n	800356a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	3304      	adds	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_PCD_EP_Close+0x6e>
 8003580:	2302      	movs	r3, #2
 8003582:	e00e      	b.n	80035a2 <HAL_PCD_EP_Close+0x8c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 fe7a 	bl	800728c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	460b      	mov	r3, r1
 80035b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	3304      	adds	r3, #4
 80035d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d102      	bne.n	8003606 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	f004 f8fd 	bl	800781c <USB_EP0StartXfer>
 8003622:	e008      	b.n	8003636 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	f003 feaf 	bl	8007394 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	460b      	mov	r3, r1
 800367e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	f003 020f 	and.w	r2, r3, #15
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	3338      	adds	r3, #56	; 0x38
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2201      	movs	r2, #1
 80036ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d102      	bne.n	80036ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	f004 f89b 	bl	800781c <USB_EP0StartXfer>
 80036e6:	e008      	b.n	80036fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	6979      	ldr	r1, [r7, #20]
 80036f6:	f003 fe4d 	bl	8007394 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d901      	bls.n	8003722 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e050      	b.n	80037c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0f      	bge.n	800374a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3338      	adds	r3, #56	; 0x38
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	705a      	strb	r2, [r3, #1]
 8003748:	e00d      	b.n	8003766 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_PCD_EP_SetStall+0x82>
 8003782:	2302      	movs	r3, #2
 8003784:	e01e      	b.n	80037c4 <HAL_PCD_EP_SetStall+0xc0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	4618      	mov	r0, r3
 8003796:	f004 f9f2 	bl	8007b7e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	b2d9      	uxtb	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037b4:	461a      	mov	r2, r3
 80037b6:	f004 fbe3 	bl	8007f80 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d901      	bls.n	80037ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e042      	b.n	8003870 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da0f      	bge.n	8003812 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	3338      	adds	r3, #56	; 0x38
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	705a      	strb	r2, [r3, #1]
 8003810:	e00f      	b.n	8003832 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_PCD_EP_ClrStall+0x86>
 800384e:	2302      	movs	r3, #2
 8003850:	e00e      	b.n	8003870 <HAL_PCD_EP_ClrStall+0xa4>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f004 f9fa 	bl	8007c5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af02      	add	r7, sp, #8
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	3338      	adds	r3, #56	; 0x38
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	3304      	adds	r3, #4
 800389e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d901      	bls.n	80038b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e06c      	b.n	800398a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d902      	bls.n	80038cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3303      	adds	r3, #3
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038d4:	e02b      	b.n	800392e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d902      	bls.n	80038f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3303      	adds	r3, #3
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800390a:	b2db      	uxtb	r3, r3
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	4603      	mov	r3, r0
 8003910:	6978      	ldr	r0, [r7, #20]
 8003912:	f004 f8d6 	bl	8007ac2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	441a      	add	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	441a      	add	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	b29b      	uxth	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	429a      	cmp	r2, r3
 8003942:	d809      	bhi.n	8003958 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394c:	429a      	cmp	r2, r3
 800394e:	d203      	bcs.n	8003958 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1be      	bne.n	80038d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	429a      	cmp	r2, r3
 8003962:	d811      	bhi.n	8003988 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2201      	movs	r2, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	43db      	mvns	r3, r3
 800397e:	6939      	ldr	r1, [r7, #16]
 8003980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003984:	4013      	ands	r3, r2
 8003986:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	333c      	adds	r3, #60	; 0x3c
 80039ac:	3304      	adds	r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 80b3 	bne.w	8003b32 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d028      	beq.n	8003a28 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a70      	ldr	r2, [pc, #448]	; (8003b9c <PCD_EP_OutXfrComplete_int+0x208>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d90e      	bls.n	80039fc <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f4:	461a      	mov	r2, r3
 80039f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f007 ff6b 	bl	800b8d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f004 fab6 	bl	8007f80 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2308      	movs	r3, #8
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	e0b3      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2320      	movs	r3, #32
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	e0a4      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 809f 	bne.w	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a51      	ldr	r2, [pc, #324]	; (8003b9c <PCD_EP_OutXfrComplete_int+0x208>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d90f      	bls.n	8003a7a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	6093      	str	r3, [r2, #8]
 8003a78:	e08a      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a8c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	0159      	lsls	r1, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003aa0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4403      	add	r3, r0
 8003ab0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ab4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4419      	add	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4403      	add	r3, r0
 8003aee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003af2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f007 fefe 	bl	800b8fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d144      	bne.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d138      	bne.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f004 fa28 	bl	8007f80 <USB_EP0_OutStart>
 8003b30:	e02e      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d124      	bne.n	8003b84 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b56:	6093      	str	r3, [r2, #8]
 8003b58:	e01a      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	461a      	mov	r2, r3
 8003b72:	2320      	movs	r3, #32
 8003b74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f007 febd 	bl	800b8fc <HAL_PCD_DataOutStageCallback>
 8003b82:	e005      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f007 feb6 	bl	800b8fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	4f54300a 	.word	0x4f54300a
 8003ba0:	4f54310a 	.word	0x4f54310a

08003ba4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	333c      	adds	r3, #60	; 0x3c
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d113      	bne.n	8003c02 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d922      	bls.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01d      	beq.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfe:	6093      	str	r3, [r2, #8]
 8003c00:	e012      	b.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10e      	bne.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	461a      	mov	r2, r3
 8003c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f007 fe55 	bl	800b8d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d90c      	bls.n	8003c50 <PCD_EP_OutSetupPacket_int+0xac>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	f004 f998 	bl	8007f80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	4f54300a 	.word	0x4f54300a
 8003c60:	4f54310a 	.word	0x4f54310a

08003c64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
 8003c70:	4613      	mov	r3, r2
 8003c72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c82:	883b      	ldrh	r3, [r7, #0]
 8003c84:	0419      	lsls	r1, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c90:	e028      	b.n	8003ce4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e00d      	b.n	8003cc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	3340      	adds	r3, #64	; 0x40
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4413      	add	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
 8003cc2:	7bfa      	ldrb	r2, [r7, #15]
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3ec      	bcc.n	8003ca6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ccc:	883b      	ldrh	r3, [r7, #0]
 8003cce:	0418      	lsls	r0, r3, #16
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	4302      	orrs	r2, r0
 8003cdc:	3340      	adds	r3, #64	; 0x40
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e22d      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d075      	beq.n	8003e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4a:	4ba3      	ldr	r3, [pc, #652]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d00c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d56:	4ba0      	ldr	r3, [pc, #640]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d112      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b9d      	ldr	r3, [pc, #628]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	4b99      	ldr	r3, [pc, #612]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d05b      	beq.n	8003e34 <HAL_RCC_OscConfig+0x108>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d157      	bne.n	8003e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e208      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x74>
 8003d92:	4b91      	ldr	r3, [pc, #580]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a90      	ldr	r2, [pc, #576]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e01d      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003daa:	4b8b      	ldr	r3, [pc, #556]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a8a      	ldr	r2, [pc, #552]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a87      	ldr	r2, [pc, #540]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003dc4:	4b84      	ldr	r3, [pc, #528]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a83      	ldr	r2, [pc, #524]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b81      	ldr	r3, [pc, #516]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a80      	ldr	r2, [pc, #512]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe faa6 	bl	8002334 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe faa2 	bl	8002334 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1cd      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b76      	ldr	r3, [pc, #472]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0xc0>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fa92 	bl	8002334 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fa8e 	bl	8002334 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e1b9      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0xe8>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d063      	beq.n	8003f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	4b65      	ldr	r3, [pc, #404]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4e:	4b62      	ldr	r3, [pc, #392]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d11c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b5f      	ldr	r3, [pc, #380]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e66:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCC_OscConfig+0x152>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d001      	beq.n	8003e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e18d      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7e:	4b56      	ldr	r3, [pc, #344]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4952      	ldr	r1, [pc, #328]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e92:	e03a      	b.n	8003f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e9c:	4b4f      	ldr	r3, [pc, #316]	; (8003fdc <HAL_RCC_OscConfig+0x2b0>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fa47 	bl	8002334 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eaa:	f7fe fa43 	bl	8002334 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e16e      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebc:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec8:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4940      	ldr	r1, [pc, #256]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
 8003edc:	e015      	b.n	8003f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ede:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCC_OscConfig+0x2b0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fa26 	bl	8002334 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eec:	f7fe fa22 	bl	8002334 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e14d      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	4b36      	ldr	r3, [pc, #216]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d030      	beq.n	8003f78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1e:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <HAL_RCC_OscConfig+0x2b4>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fe fa06 	bl	8002334 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7fe fa02 	bl	8002334 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e12d      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3e:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x200>
 8003f4a:	e015      	b.n	8003f78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x2b4>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe f9ef 	bl	8002334 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe f9eb 	bl	8002334 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e116      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a0 	beq.w	80040c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d121      	bne.n	8004006 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fce:	f7fe f9b1 	bl	8002334 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	e011      	b.n	8003ffa <HAL_RCC_OscConfig+0x2ce>
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	42470000 	.word	0x42470000
 8003fe0:	42470e80 	.word	0x42470e80
 8003fe4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fe f9a4 	bl	8002334 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0cf      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCC_OscConfig+0x478>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d106      	bne.n	800401c <HAL_RCC_OscConfig+0x2f0>
 800400e:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a65      	ldr	r2, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x32a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x312>
 8004024:	4b60      	ldr	r3, [pc, #384]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a5f      	ldr	r2, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a5c      	ldr	r2, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x32a>
 800403e:	4b5a      	ldr	r3, [pc, #360]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a59      	ldr	r2, [pc, #356]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
 800404a:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a56      	ldr	r2, [pc, #344]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fe f969 	bl	8002334 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fe f965 	bl	8002334 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	; 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e08e      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ee      	beq.n	8004066 <HAL_RCC_OscConfig+0x33a>
 8004088:	e014      	b.n	80040b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fe f953 	bl	8002334 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fe f94f 	bl	8002334 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e078      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a3a      	ldr	r2, [pc, #232]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d064      	beq.n	8004198 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d05c      	beq.n	8004194 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d141      	bne.n	8004166 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCC_OscConfig+0x480>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fe f924 	bl	8002334 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fe f920 	bl	8002334 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e04b      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	3b01      	subs	r3, #1
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	491d      	ldr	r1, [pc, #116]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004138:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <HAL_RCC_OscConfig+0x480>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fe f8f9 	bl	8002334 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004146:	f7fe f8f5 	bl	8002334 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e020      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x41a>
 8004164:	e018      	b.n	8004198 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_RCC_OscConfig+0x480>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe f8e2 	bl	8002334 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe f8de 	bl	8002334 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e009      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCC_OscConfig+0x47c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x448>
 8004192:	e001      	b.n	8004198 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470060 	.word	0x42470060

080041b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0ca      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b67      	ldr	r3, [pc, #412]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d90c      	bls.n	80041ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b64      	ldr	r3, [pc, #400]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b62      	ldr	r3, [pc, #392]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b6      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004204:	4b58      	ldr	r3, [pc, #352]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a57      	ldr	r2, [pc, #348]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800420e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800421c:	4b52      	ldr	r3, [pc, #328]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a51      	ldr	r2, [pc, #324]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	494c      	ldr	r1, [pc, #304]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d044      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	4b46      	ldr	r3, [pc, #280]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d119      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07d      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d003      	beq.n	800426e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426a:	2b03      	cmp	r3, #3
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426e:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e06d      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427e:	4b3a      	ldr	r3, [pc, #232]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e065      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428e:	4b36      	ldr	r3, [pc, #216]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4933      	ldr	r1, [pc, #204]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a0:	f7fe f848 	bl	8002334 <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	e00a      	b.n	80042be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a8:	f7fe f844 	bl	8002334 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e04d      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 020c 	and.w	r2, r3, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d1eb      	bne.n	80042a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20c      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <HAL_RCC_ClockConfig+0x1b4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e030      	b.n	800435a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4915      	ldr	r1, [pc, #84]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	490d      	ldr	r1, [pc, #52]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004336:	f000 f81d 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 800433a:	4601      	mov	r1, r0
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	4a09      	ldr	r2, [pc, #36]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	5cd3      	ldrb	r3, [r2, r3]
 800434a:	fa21 f303 	lsr.w	r3, r1, r3
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004352:	2000      	movs	r0, #0
 8004354:	f7fd fa3c 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023c00 	.word	0x40023c00
 8004368:	40023800 	.word	0x40023800
 800436c:	0800c868 	.word	0x0800c868
 8004370:	20000000 	.word	0x20000000

08004374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	2300      	movs	r3, #0
 8004384:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800438a:	4b63      	ldr	r3, [pc, #396]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b04      	cmp	r3, #4
 8004394:	d007      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x32>
 8004396:	2b08      	cmp	r3, #8
 8004398:	d008      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x38>
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80b4 	bne.w	8004508 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b5e      	ldr	r3, [pc, #376]	; (800451c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043a2:	60bb      	str	r3, [r7, #8]
       break;
 80043a4:	e0b3      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043a6:	4b5e      	ldr	r3, [pc, #376]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80043a8:	60bb      	str	r3, [r7, #8]
      break;
 80043aa:	e0b0      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ac:	4b5a      	ldr	r3, [pc, #360]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043b6:	4b58      	ldr	r3, [pc, #352]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d04a      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c2:	4b55      	ldr	r3, [pc, #340]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	f04f 0400 	mov.w	r4, #0
 80043cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	ea03 0501 	and.w	r5, r3, r1
 80043d8:	ea04 0602 	and.w	r6, r4, r2
 80043dc:	4629      	mov	r1, r5
 80043de:	4632      	mov	r2, r6
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	f04f 0400 	mov.w	r4, #0
 80043e8:	0154      	lsls	r4, r2, #5
 80043ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043ee:	014b      	lsls	r3, r1, #5
 80043f0:	4619      	mov	r1, r3
 80043f2:	4622      	mov	r2, r4
 80043f4:	1b49      	subs	r1, r1, r5
 80043f6:	eb62 0206 	sbc.w	r2, r2, r6
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	f04f 0400 	mov.w	r4, #0
 8004402:	0194      	lsls	r4, r2, #6
 8004404:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004408:	018b      	lsls	r3, r1, #6
 800440a:	1a5b      	subs	r3, r3, r1
 800440c:	eb64 0402 	sbc.w	r4, r4, r2
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	00e2      	lsls	r2, r4, #3
 800441a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800441e:	00d9      	lsls	r1, r3, #3
 8004420:	460b      	mov	r3, r1
 8004422:	4614      	mov	r4, r2
 8004424:	195b      	adds	r3, r3, r5
 8004426:	eb44 0406 	adc.w	r4, r4, r6
 800442a:	f04f 0100 	mov.w	r1, #0
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	0262      	lsls	r2, r4, #9
 8004434:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004438:	0259      	lsls	r1, r3, #9
 800443a:	460b      	mov	r3, r1
 800443c:	4614      	mov	r4, r2
 800443e:	4618      	mov	r0, r3
 8004440:	4621      	mov	r1, r4
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f04f 0400 	mov.w	r4, #0
 8004448:	461a      	mov	r2, r3
 800444a:	4623      	mov	r3, r4
 800444c:	f7fb ff20 	bl	8000290 <__aeabi_uldivmod>
 8004450:	4603      	mov	r3, r0
 8004452:	460c      	mov	r4, r1
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e049      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004458:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	f04f 0400 	mov.w	r4, #0
 8004462:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	ea03 0501 	and.w	r5, r3, r1
 800446e:	ea04 0602 	and.w	r6, r4, r2
 8004472:	4629      	mov	r1, r5
 8004474:	4632      	mov	r2, r6
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	f04f 0400 	mov.w	r4, #0
 800447e:	0154      	lsls	r4, r2, #5
 8004480:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004484:	014b      	lsls	r3, r1, #5
 8004486:	4619      	mov	r1, r3
 8004488:	4622      	mov	r2, r4
 800448a:	1b49      	subs	r1, r1, r5
 800448c:	eb62 0206 	sbc.w	r2, r2, r6
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	f04f 0400 	mov.w	r4, #0
 8004498:	0194      	lsls	r4, r2, #6
 800449a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800449e:	018b      	lsls	r3, r1, #6
 80044a0:	1a5b      	subs	r3, r3, r1
 80044a2:	eb64 0402 	sbc.w	r4, r4, r2
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	00e2      	lsls	r2, r4, #3
 80044b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044b4:	00d9      	lsls	r1, r3, #3
 80044b6:	460b      	mov	r3, r1
 80044b8:	4614      	mov	r4, r2
 80044ba:	195b      	adds	r3, r3, r5
 80044bc:	eb44 0406 	adc.w	r4, r4, r6
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	02a2      	lsls	r2, r4, #10
 80044ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044ce:	0299      	lsls	r1, r3, #10
 80044d0:	460b      	mov	r3, r1
 80044d2:	4614      	mov	r4, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	4621      	mov	r1, r4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f04f 0400 	mov.w	r4, #0
 80044de:	461a      	mov	r2, r3
 80044e0:	4623      	mov	r3, r4
 80044e2:	f7fb fed5 	bl	8000290 <__aeabi_uldivmod>
 80044e6:	4603      	mov	r3, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	60bb      	str	r3, [r7, #8]
      break;
 8004506:	e002      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800450a:	60bb      	str	r3, [r7, #8]
      break;
 800450c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450e:	68bb      	ldr	r3, [r7, #8]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	00f42400 	.word	0x00f42400
 8004520:	007a1200 	.word	0x007a1200

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4601      	mov	r1, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4a03      	ldr	r2, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	0800c878 	.word	0x0800c878

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004568:	f7ff ffdc 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800456c:	4601      	mov	r1, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0b5b      	lsrs	r3, r3, #13
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4a03      	ldr	r2, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	0800c878 	.word	0x0800c878

0800458c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	220f      	movs	r2, #15
 800459a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0203 	and.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	08db      	lsrs	r3, r3, #3
 80045c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <HAL_RCC_GetClockConfig+0x60>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40023c00 	.word	0x40023c00

080045f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e01d      	b.n	800463e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd fb7e 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fbe2 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b06      	cmp	r3, #6
 800466e:	d007      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e01d      	b.n	80046dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f815 	bl	80046e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f000 fb93 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e01d      	b.n	8004746 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f815 	bl	800474e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3304      	adds	r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f000 fb5e 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d122      	bne.n	80047be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d11b      	bne.n	80047be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f06f 0202 	mvn.w	r2, #2
 800478e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fb08 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 80047aa:	e005      	b.n	80047b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fafa 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fb0b 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d122      	bne.n	8004812 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d11b      	bne.n	8004812 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f06f 0204 	mvn.w	r2, #4
 80047e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fade 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 80047fe:	e005      	b.n	800480c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fad0 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fae1 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d122      	bne.n	8004866 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d11b      	bne.n	8004866 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f06f 0208 	mvn.w	r2, #8
 8004836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2204      	movs	r2, #4
 800483c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fab4 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004852:	e005      	b.n	8004860 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 faa6 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fab7 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b10      	cmp	r3, #16
 8004872:	d122      	bne.n	80048ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d11b      	bne.n	80048ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0210 	mvn.w	r2, #16
 800488a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2208      	movs	r2, #8
 8004890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fa8a 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 80048a6:	e005      	b.n	80048b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fa7c 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa8d 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10e      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f06f 0201 	mvn.w	r2, #1
 80048de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc ff2f 	bl	8001744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d10e      	bne.n	8004912 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d107      	bne.n	8004912 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800490a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fed6 	bl	80056be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d10e      	bne.n	800493e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d107      	bne.n	800493e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa52 	bl	8004de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b20      	cmp	r3, #32
 800494a:	d10e      	bne.n	800496a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b20      	cmp	r3, #32
 8004958:	d107      	bne.n	800496a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f06f 0220 	mvn.w	r2, #32
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fea0 	bl	80056aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIM_IC_ConfigChannel+0x1a>
 8004988:	2302      	movs	r3, #2
 800498a:	e08a      	b.n	8004aa2 <HAL_TIM_IC_ConfigChannel+0x130>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f000 fc71 	bl	8005298 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 020c 	bic.w	r2, r2, #12
 80049c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6999      	ldr	r1, [r3, #24]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]
 80049d8:	e05a      	b.n	8004a90 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11c      	bne.n	8004a1a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6819      	ldr	r1, [r3, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f000 fcf5 	bl	80053de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a02:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6999      	ldr	r1, [r3, #24]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	619a      	str	r2, [r3, #24]
 8004a18:	e03a      	b.n	8004a90 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f000 fd42 	bl	80054b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 020c 	bic.w	r2, r2, #12
 8004a42:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69d9      	ldr	r1, [r3, #28]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	61da      	str	r2, [r3, #28]
 8004a56:	e01b      	b.n	8004a90 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f000 fd62 	bl	8005530 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69d9      	ldr	r1, [r3, #28]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	021a      	lsls	r2, r3, #8
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0b4      	b.n	8004c30 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	f200 809f 	bhi.w	8004c1c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b19 	.word	0x08004b19
 8004ae8:	08004c1d 	.word	0x08004c1d
 8004aec:	08004c1d 	.word	0x08004c1d
 8004af0:	08004c1d 	.word	0x08004c1d
 8004af4:	08004b59 	.word	0x08004b59
 8004af8:	08004c1d 	.word	0x08004c1d
 8004afc:	08004c1d 	.word	0x08004c1d
 8004b00:	08004c1d 	.word	0x08004c1d
 8004b04:	08004b9b 	.word	0x08004b9b
 8004b08:	08004c1d 	.word	0x08004c1d
 8004b0c:	08004c1d 	.word	0x08004c1d
 8004b10:	08004c1d 	.word	0x08004c1d
 8004b14:	08004bdb 	.word	0x08004bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fa0a 	bl	8004f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0208 	orr.w	r2, r2, #8
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	619a      	str	r2, [r3, #24]
      break;
 8004b56:	e062      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fa5a 	bl	8005018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6999      	ldr	r1, [r3, #24]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	619a      	str	r2, [r3, #24]
      break;
 8004b98:	e041      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 faaf 	bl	8005104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0208 	orr.w	r2, r2, #8
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0204 	bic.w	r2, r2, #4
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
      break;
 8004bd8:	e021      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fb03 	bl	80051ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69d9      	ldr	r1, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	61da      	str	r2, [r3, #28]
      break;
 8004c1a:	e000      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004c1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_ConfigClockSource+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0a6      	b.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d067      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0x120>
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d80b      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x6c>
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d073      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x140>
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d802      	bhi.n	8004c9a <HAL_TIM_ConfigClockSource+0x62>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d06f      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c98:	e078      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d06c      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x140>
 8004c9e:	2b30      	cmp	r3, #48	; 0x30
 8004ca0:	d06a      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ca2:	e073      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ca4:	2b70      	cmp	r3, #112	; 0x70
 8004ca6:	d00d      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x8c>
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d804      	bhi.n	8004cb6 <HAL_TIM_ConfigClockSource+0x7e>
 8004cac:	2b50      	cmp	r3, #80	; 0x50
 8004cae:	d033      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0xe0>
 8004cb0:	2b60      	cmp	r3, #96	; 0x60
 8004cb2:	d041      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004cb4:	e06a      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cba:	d066      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x152>
 8004cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc0:	d017      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004cc2:	e063      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f000 fc84 	bl	80055e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ce6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	609a      	str	r2, [r3, #8]
      break;
 8004cf0:	e04c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6899      	ldr	r1, [r3, #8]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f000 fc6d 	bl	80055e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d14:	609a      	str	r2, [r3, #8]
      break;
 8004d16:	e039      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f000 fb2b 	bl	8005380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2150      	movs	r1, #80	; 0x50
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fc3a 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004d36:	e029      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	461a      	mov	r2, r3
 8004d46:	f000 fb87 	bl	8005458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2160      	movs	r1, #96	; 0x60
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fc2a 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004d56:	e019      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	461a      	mov	r2, r3
 8004d66:	f000 fb0b 	bl	8005380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2140      	movs	r1, #64	; 0x40
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fc1a 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004d76:	e009      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f000 fc11 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a40      	ldr	r2, [pc, #256]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d00f      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3d      	ldr	r2, [pc, #244]	; (8004f10 <TIM_Base_SetConfig+0x118>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3c      	ldr	r2, [pc, #240]	; (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3b      	ldr	r2, [pc, #236]	; (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3a      	ldr	r2, [pc, #232]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d02b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d027      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <TIM_Base_SetConfig+0x118>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d023      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01f      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d017      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <TIM_Base_SetConfig+0x128>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <TIM_Base_SetConfig+0x12c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <TIM_Base_SetConfig+0x130>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <TIM_Base_SetConfig+0x134>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <TIM_Base_SetConfig+0x138>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <TIM_Base_SetConfig+0x13c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0xf8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d103      	bne.n	8004ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	615a      	str	r2, [r3, #20]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800
 8004f2c:	40001800 	.word	0x40001800
 8004f30:	40001c00 	.word	0x40001c00
 8004f34:	40002000 	.word	0x40002000

08004f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f023 0201 	bic.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0302 	bic.w	r3, r3, #2
 8004f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a20      	ldr	r2, [pc, #128]	; (8005010 <TIM_OC1_SetConfig+0xd8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_OC1_SetConfig+0x64>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <TIM_OC1_SetConfig+0xdc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d10c      	bne.n	8004fb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0308 	bic.w	r3, r3, #8
 8004fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a15      	ldr	r2, [pc, #84]	; (8005010 <TIM_OC1_SetConfig+0xd8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_OC1_SetConfig+0x8e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <TIM_OC1_SetConfig+0xdc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d111      	bne.n	8004fea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	621a      	str	r2, [r3, #32]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40010000 	.word	0x40010000
 8005014:	40010400 	.word	0x40010400

08005018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f023 0210 	bic.w	r2, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0320 	bic.w	r3, r3, #32
 8005062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a22      	ldr	r2, [pc, #136]	; (80050fc <TIM_OC2_SetConfig+0xe4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_OC2_SetConfig+0x68>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a21      	ldr	r2, [pc, #132]	; (8005100 <TIM_OC2_SetConfig+0xe8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10d      	bne.n	800509c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <TIM_OC2_SetConfig+0xe4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC2_SetConfig+0x94>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <TIM_OC2_SetConfig+0xe8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d113      	bne.n	80050d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40010400 	.word	0x40010400

08005104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800514c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a21      	ldr	r2, [pc, #132]	; (80051e4 <TIM_OC3_SetConfig+0xe0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC3_SetConfig+0x66>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <TIM_OC3_SetConfig+0xe4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10d      	bne.n	8005186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <TIM_OC3_SetConfig+0xe0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_OC3_SetConfig+0x92>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <TIM_OC3_SetConfig+0xe4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d113      	bne.n	80051be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800519c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	621a      	str	r2, [r3, #32]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400

080051ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	031b      	lsls	r3, r3, #12
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a12      	ldr	r2, [pc, #72]	; (8005290 <TIM_OC4_SetConfig+0xa4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC4_SetConfig+0x68>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a11      	ldr	r2, [pc, #68]	; (8005294 <TIM_OC4_SetConfig+0xa8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d109      	bne.n	8005268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	019b      	lsls	r3, r3, #6
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40010400 	.word	0x40010400

08005298 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a28      	ldr	r2, [pc, #160]	; (8005364 <TIM_TI1_SetConfig+0xcc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01b      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d017      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <TIM_TI1_SetConfig+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a24      	ldr	r2, [pc, #144]	; (800536c <TIM_TI1_SetConfig+0xd4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a23      	ldr	r2, [pc, #140]	; (8005370 <TIM_TI1_SetConfig+0xd8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <TIM_TI1_SetConfig+0xdc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a21      	ldr	r2, [pc, #132]	; (8005378 <TIM_TI1_SetConfig+0xe0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a20      	ldr	r2, [pc, #128]	; (800537c <TIM_TI1_SetConfig+0xe4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <TIM_TI1_SetConfig+0x6a>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <TIM_TI1_SetConfig+0x6c>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e003      	b.n	8005322 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	b2db      	uxtb	r3, r3
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f023 030a 	bic.w	r3, r3, #10
 800533c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 030a 	and.w	r3, r3, #10
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40010400 	.word	0x40010400
 8005378:	40014000 	.word	0x40014000
 800537c:	40001800 	.word	0x40001800

08005380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f023 0210 	bic.w	r2, r3, #16
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800541c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	031b      	lsls	r3, r3, #12
 8005422:	b29b      	uxth	r3, r3
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005430:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 0210 	bic.w	r2, r3, #16
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	031b      	lsls	r3, r3, #12
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	621a      	str	r2, [r3, #32]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 0303 	bic.w	r3, r3, #3
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	031b      	lsls	r3, r3, #12
 8005574:	b29b      	uxth	r3, r3
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	031b      	lsls	r3, r3, #12
 8005588:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005634:	2302      	movs	r3, #2
 8005636:	e032      	b.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005670:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	4313      	orrs	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e03f      	b.n	8005764 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fc fd63 	bl	80021c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005714:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa64 	bl	8005be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800572a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800573a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800574a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_UART_IRQHandler+0x52>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f992 	bl	8005ae0 <UART_Receive_IT>
      return;
 80057bc:	e0cc      	b.n	8005958 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80ab 	beq.w	800591c <HAL_UART_IRQHandler+0x1b0>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_UART_IRQHandler+0x70>
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80a0 	beq.w	800591c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_UART_IRQHandler+0x90>
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f4:	f043 0201 	orr.w	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_UART_IRQHandler+0xb0>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	f043 0202 	orr.w	r2, r3, #2
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_UART_IRQHandler+0xd0>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005834:	f043 0204 	orr.w	r2, r3, #4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_UART_IRQHandler+0xf0>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	f043 0208 	orr.w	r2, r3, #8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d078      	beq.n	8005956 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_UART_IRQHandler+0x112>
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f931 	bl	8005ae0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_UART_IRQHandler+0x13a>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d031      	beq.n	800590a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f87a 	bl	80059a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d123      	bne.n	8005902 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d013      	beq.n	80058fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	4a22      	ldr	r2, [pc, #136]	; (8005960 <HAL_UART_IRQHandler+0x1f4>)
 80058d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc fe38 	bl	8002554 <HAL_DMA_Abort_IT>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058f4:	4610      	mov	r0, r2
 80058f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	e00e      	b.n	8005918 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f846 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	e00a      	b.n	8005918 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f842 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	e006      	b.n	8005918 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f83e 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005916:	e01e      	b.n	8005956 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	bf00      	nop
    return;
 800591a:	e01c      	b.n	8005956 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_UART_IRQHandler+0x1cc>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f867 	bl	8005a04 <UART_Transmit_IT>
    return;
 8005936:	e00f      	b.n	8005958 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_UART_IRQHandler+0x1ec>
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8af 	bl	8005ab0 <UART_EndTransmit_IT>
    return;
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005956:	bf00      	nop
  }
}
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	080059dd 	.word	0x080059dd

08005964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0201 	bic.w	r2, r2, #1
 80059c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff ffc8 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b21      	cmp	r3, #33	; 0x21
 8005a16:	d144      	bne.n	8005aa2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	d11a      	bne.n	8005a58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	1c9a      	adds	r2, r3, #2
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]
 8005a4a:	e00e      	b.n	8005a6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]
 8005a56:	e008      	b.n	8005a6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	1c59      	adds	r1, r3, #1
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6211      	str	r1, [r2, #32]
 8005a62:	781a      	ldrb	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4619      	mov	r1, r3
 8005a78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e000      	b.n	8005aa4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005aa2:	2302      	movs	r3, #2
  }
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff ff47 	bl	8005964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b22      	cmp	r3, #34	; 0x22
 8005af2:	d171      	bne.n	8005bd8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d123      	bne.n	8005b46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10e      	bne.n	8005b2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	1c9a      	adds	r2, r3, #2
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	629a      	str	r2, [r3, #40]	; 0x28
 8005b28:	e029      	b.n	8005b7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
 8005b44:	e01b      	b.n	8005b7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6858      	ldr	r0, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6291      	str	r1, [r2, #40]	; 0x28
 8005b5e:	b2c2      	uxtb	r2, r0
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e00c      	b.n	8005b7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	1c58      	adds	r0, r3, #1
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	6288      	str	r0, [r1, #40]	; 0x28
 8005b76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d120      	bne.n	8005bd4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0220 	bic.w	r2, r2, #32
 8005ba0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff fed4 	bl	8005978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e002      	b.n	8005bda <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c24:	f023 030c 	bic.w	r3, r3, #12
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	68f9      	ldr	r1, [r7, #12]
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c50:	f040 80e4 	bne.w	8005e1c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4aab      	ldr	r2, [pc, #684]	; (8005f08 <UART_SetConfig+0x324>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <UART_SetConfig+0x84>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4aaa      	ldr	r2, [pc, #680]	; (8005f0c <UART_SetConfig+0x328>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d16c      	bne.n	8005d42 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005c68:	f7fe fc7c 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009a      	lsls	r2, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c82:	4aa3      	ldr	r2, [pc, #652]	; (8005f10 <UART_SetConfig+0x32c>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	011c      	lsls	r4, r3, #4
 8005c8c:	f7fe fc6a 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009a      	lsls	r2, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ca6:	f7fe fc5d 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009a      	lsls	r2, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	4a93      	ldr	r2, [pc, #588]	; (8005f10 <UART_SetConfig+0x32c>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	2264      	movs	r2, #100	; 0x64
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	1aeb      	subs	r3, r5, r3
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	3332      	adds	r3, #50	; 0x32
 8005cd4:	4a8e      	ldr	r2, [pc, #568]	; (8005f10 <UART_SetConfig+0x32c>)
 8005cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ce2:	441c      	add	r4, r3
 8005ce4:	f7fe fc3e 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009a      	lsls	r2, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	fbb2 f5f3 	udiv	r5, r2, r3
 8005cfe:	f7fe fc31 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005d02:	4602      	mov	r2, r0
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009a      	lsls	r2, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	4a7d      	ldr	r2, [pc, #500]	; (8005f10 <UART_SetConfig+0x32c>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2264      	movs	r2, #100	; 0x64
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	1aeb      	subs	r3, r5, r3
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	3332      	adds	r3, #50	; 0x32
 8005d2c:	4a78      	ldr	r2, [pc, #480]	; (8005f10 <UART_SetConfig+0x32c>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f003 0207 	and.w	r2, r3, #7
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4422      	add	r2, r4
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	e154      	b.n	8005fec <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005d42:	f7fe fbfb 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005d46:	4602      	mov	r2, r0
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009a      	lsls	r2, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	4a6c      	ldr	r2, [pc, #432]	; (8005f10 <UART_SetConfig+0x32c>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	011c      	lsls	r4, r3, #4
 8005d66:	f7fe fbe9 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009a      	lsls	r2, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005d80:	f7fe fbdc 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005d84:	4602      	mov	r2, r0
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009a      	lsls	r2, r3, #2
 8005d8e:	441a      	add	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9a:	4a5d      	ldr	r2, [pc, #372]	; (8005f10 <UART_SetConfig+0x32c>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	2264      	movs	r2, #100	; 0x64
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	1aeb      	subs	r3, r5, r3
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	3332      	adds	r3, #50	; 0x32
 8005dae:	4a58      	ldr	r2, [pc, #352]	; (8005f10 <UART_SetConfig+0x32c>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dbc:	441c      	add	r4, r3
 8005dbe:	f7fe fbbd 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009a      	lsls	r2, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	fbb2 f5f3 	udiv	r5, r2, r3
 8005dd8:	f7fe fbb0 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009a      	lsls	r2, r3, #2
 8005de6:	441a      	add	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	4a47      	ldr	r2, [pc, #284]	; (8005f10 <UART_SetConfig+0x32c>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2264      	movs	r2, #100	; 0x64
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	1aeb      	subs	r3, r5, r3
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	3332      	adds	r3, #50	; 0x32
 8005e06:	4a42      	ldr	r2, [pc, #264]	; (8005f10 <UART_SetConfig+0x32c>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f003 0207 	and.w	r2, r3, #7
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4422      	add	r2, r4
 8005e18:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005e1a:	e0e7      	b.n	8005fec <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a39      	ldr	r2, [pc, #228]	; (8005f08 <UART_SetConfig+0x324>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <UART_SetConfig+0x24c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a38      	ldr	r2, [pc, #224]	; (8005f0c <UART_SetConfig+0x328>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d171      	bne.n	8005f14 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005e30:	f7fe fb98 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005e34:	4602      	mov	r2, r0
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009a      	lsls	r2, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	4a31      	ldr	r2, [pc, #196]	; (8005f10 <UART_SetConfig+0x32c>)
 8005e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	011c      	lsls	r4, r3, #4
 8005e54:	f7fe fb86 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009a      	lsls	r2, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e6e:	f7fe fb79 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005e72:	4602      	mov	r2, r0
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009a      	lsls	r2, r3, #2
 8005e7c:	441a      	add	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <UART_SetConfig+0x32c>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	2264      	movs	r2, #100	; 0x64
 8005e92:	fb02 f303 	mul.w	r3, r2, r3
 8005e96:	1aeb      	subs	r3, r5, r3
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	3332      	adds	r3, #50	; 0x32
 8005e9c:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <UART_SetConfig+0x32c>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea8:	441c      	add	r4, r3
 8005eaa:	f7fe fb5b 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009a      	lsls	r2, r3, #2
 8005eb8:	441a      	add	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ec4:	f7fe fb4e 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009a      	lsls	r2, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <UART_SetConfig+0x32c>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	2264      	movs	r2, #100	; 0x64
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	1aeb      	subs	r3, r5, r3
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	3332      	adds	r3, #50	; 0x32
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <UART_SetConfig+0x32c>)
 8005ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f003 020f 	and.w	r2, r3, #15
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4422      	add	r2, r4
 8005f04:	609a      	str	r2, [r3, #8]
 8005f06:	e071      	b.n	8005fec <UART_SetConfig+0x408>
 8005f08:	40011000 	.word	0x40011000
 8005f0c:	40011400 	.word	0x40011400
 8005f10:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005f14:	f7fe fb12 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009a      	lsls	r2, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	4a31      	ldr	r2, [pc, #196]	; (8005ff4 <UART_SetConfig+0x410>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	011c      	lsls	r4, r3, #4
 8005f38:	f7fe fb00 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009a      	lsls	r2, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005f52:	f7fe faf3 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005f56:	4602      	mov	r2, r0
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009a      	lsls	r2, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <UART_SetConfig+0x410>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2264      	movs	r2, #100	; 0x64
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	1aeb      	subs	r3, r5, r3
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	3332      	adds	r3, #50	; 0x32
 8005f80:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <UART_SetConfig+0x410>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f8c:	441c      	add	r4, r3
 8005f8e:	f7fe fad5 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005f92:	4602      	mov	r2, r0
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009a      	lsls	r2, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	fbb2 f5f3 	udiv	r5, r2, r3
 8005fa8:	f7fe fac8 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8005fac:	4602      	mov	r2, r0
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009a      	lsls	r2, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <UART_SetConfig+0x410>)
 8005fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	2264      	movs	r2, #100	; 0x64
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	1aeb      	subs	r3, r5, r3
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	3332      	adds	r3, #50	; 0x32
 8005fd6:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <UART_SetConfig+0x410>)
 8005fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	f003 020f 	and.w	r2, r3, #15
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4422      	add	r2, r4
 8005fe8:	609a      	str	r2, [r3, #8]
}
 8005fea:	e7ff      	b.n	8005fec <UART_SetConfig+0x408>
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff4:	51eb851f 	.word	0x51eb851f

08005ff8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b089      	sub	sp, #36	; 0x24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	fa93 f3a3 	rbit	r3, r3
 8006012:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	fab3 f383 	clz	r3, r3
 800601a:	b2db      	uxtb	r3, r3
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	2103      	movs	r1, #3
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	fa93 f3a3 	rbit	r3, r3
 8006032:	61bb      	str	r3, [r7, #24]
  return result;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	fab3 f383 	clz	r3, r3
 800603a:	b2db      	uxtb	r3, r3
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	431a      	orrs	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	43db      	mvns	r3, r3
 800606a:	401a      	ands	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	431a      	orrs	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	605a      	str	r2, [r3, #4]
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006086:	b480      	push	{r7}
 8006088:	b089      	sub	sp, #36	; 0x24
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	fa93 f3a3 	rbit	r3, r3
 80060a0:	613b      	str	r3, [r7, #16]
  return result;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	fab3 f383 	clz	r3, r3
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	2103      	movs	r1, #3
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	401a      	ands	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	fa93 f3a3 	rbit	r3, r3
 80060c0:	61bb      	str	r3, [r7, #24]
  return result;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	fab3 f383 	clz	r3, r3
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	fa01 f303 	lsl.w	r3, r1, r3
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80060d8:	bf00      	nop
 80060da:	3724      	adds	r7, #36	; 0x24
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	; 0x24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	fa93 f3a3 	rbit	r3, r3
 80060fe:	613b      	str	r3, [r7, #16]
  return result;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	fab3 f383 	clz	r3, r3
 8006106:	b2db      	uxtb	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	2103      	movs	r1, #3
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	401a      	ands	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	61bb      	str	r3, [r7, #24]
  return result;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	fab3 f383 	clz	r3, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	431a      	orrs	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	60da      	str	r2, [r3, #12]
}
 8006136:	bf00      	nop
 8006138:	3724      	adds	r7, #36	; 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006142:	b480      	push	{r7}
 8006144:	b089      	sub	sp, #36	; 0x24
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	fa93 f3a3 	rbit	r3, r3
 800615c:	613b      	str	r3, [r7, #16]
  return result;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	fab3 f383 	clz	r3, r3
 8006164:	b2db      	uxtb	r3, r3
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	210f      	movs	r1, #15
 800616a:	fa01 f303 	lsl.w	r3, r1, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	401a      	ands	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	fa93 f3a3 	rbit	r3, r3
 800617c:	61bb      	str	r3, [r7, #24]
  return result;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	fab3 f383 	clz	r3, r3
 8006184:	b2db      	uxtb	r3, r3
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	fa01 f303 	lsl.w	r3, r1, r3
 800618e:	431a      	orrs	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006194:	bf00      	nop
 8006196:	3724      	adds	r7, #36	; 0x24
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b089      	sub	sp, #36	; 0x24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	fa93 f3a3 	rbit	r3, r3
 80061bc:	613b      	str	r3, [r7, #16]
  return result;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	fab3 f383 	clz	r3, r3
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	210f      	movs	r1, #15
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	43db      	mvns	r3, r3
 80061d0:	401a      	ands	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	fa93 f3a3 	rbit	r3, r3
 80061de:	61bb      	str	r3, [r7, #24]
  return result;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	fa01 f303 	lsl.w	r3, r1, r3
 80061f0:	431a      	orrs	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80061f6:	bf00      	nop
 80061f8:	3724      	adds	r7, #36	; 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b088      	sub	sp, #32
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006210:	2300      	movs	r3, #0
 8006212:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	fa93 f3a3 	rbit	r3, r3
 8006220:	613b      	str	r3, [r7, #16]
  return result;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	fab3 f383 	clz	r3, r3
 8006228:	b2db      	uxtb	r3, r3
 800622a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800622c:	e049      	b.n	80062c2 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	2101      	movs	r1, #1
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	4013      	ands	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d03b      	beq.n	80062bc <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	461a      	mov	r2, r3
 800624a:	69b9      	ldr	r1, [r7, #24]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fed3 	bl	8005ff8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d003      	beq.n	8006262 <LL_GPIO_Init+0x60>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d106      	bne.n	8006270 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	461a      	mov	r2, r3
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ff0b 	bl	8006086 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	461a      	mov	r2, r3
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff ff33 	bl	80060e4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d11a      	bne.n	80062bc <LL_GPIO_Init+0xba>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	fa93 f3a3 	rbit	r3, r3
 8006290:	60bb      	str	r3, [r7, #8]
  return result;
 8006292:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006294:	fab3 f383 	clz	r3, r3
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b07      	cmp	r3, #7
 800629c:	d807      	bhi.n	80062ae <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	461a      	mov	r2, r3
 80062a4:	69b9      	ldr	r1, [r7, #24]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff ff4b 	bl	8006142 <LL_GPIO_SetAFPin_0_7>
 80062ac:	e006      	b.n	80062bc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	461a      	mov	r2, r3
 80062b4:	69b9      	ldr	r1, [r7, #24]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ff72 	bl	80061a0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	3301      	adds	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ae      	bne.n	800622e <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d003      	beq.n	80062e0 <LL_GPIO_Init+0xde>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d107      	bne.n	80062f0 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff feb3 	bl	8006056 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <LL_I2C_Enable>:
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f043 0201 	orr.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <LL_I2C_Disable>:
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <LL_I2C_ConfigFilters>:
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f023 021f 	bic.w	r2, r3, #31
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	430b      	orrs	r3, r1
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_I2C_SetOwnAddress1>:
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800637a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	430a      	orrs	r2, r1
 8006384:	431a      	orrs	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	609a      	str	r2, [r3, #8]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8006398:	b490      	push	{r4, r7}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 80063a6:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 80063a8:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	4a3f      	ldr	r2, [pc, #252]	; (80064ac <LL_I2C_ConfigSpeed+0x114>)
 80063ae:	fba2 2303 	umull	r2, r3, r2, r3
 80063b2:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063bc:	ea44 0203 	orr.w	r2, r4, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4938      	ldr	r1, [pc, #224]	; (80064b0 <LL_I2C_ConfigSpeed+0x118>)
 80063d0:	428b      	cmp	r3, r1
 80063d2:	d801      	bhi.n	80063d8 <LL_I2C_ConfigSpeed+0x40>
 80063d4:	1c63      	adds	r3, r4, #1
 80063d6:	e008      	b.n	80063ea <LL_I2C_ConfigSpeed+0x52>
 80063d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80063dc:	fb03 f304 	mul.w	r3, r3, r4
 80063e0:	4934      	ldr	r1, [pc, #208]	; (80064b4 <LL_I2C_ConfigSpeed+0x11c>)
 80063e2:	fba1 1303 	umull	r1, r3, r1, r3
 80063e6:	099b      	lsrs	r3, r3, #6
 80063e8:	3301      	adds	r3, #1
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2f      	ldr	r2, [pc, #188]	; (80064b0 <LL_I2C_ConfigSpeed+0x118>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d939      	bls.n	800646c <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d117      	bne.n	800642e <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	4413      	add	r3, r2
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	fbb2 f3f3 	udiv	r3, r2, r3
 800640c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006426:	e01d      	b.n	8006464 <LL_I2C_ConfigSpeed+0xcc>
 8006428:	f248 0301 	movw	r3, #32769	; 0x8001
 800642c:	e01a      	b.n	8006464 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009a      	lsls	r2, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009a      	lsls	r2, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800645a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645e:	e001      	b.n	8006464 <LL_I2C_ConfigSpeed+0xcc>
 8006460:	f248 0301 	movw	r3, #32769	; 0x8001
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	ea43 0402 	orr.w	r4, r3, r2
 800646a:	e010      	b.n	800648e <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800647a:	2b03      	cmp	r3, #3
 800647c:	d905      	bls.n	800648a <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	e000      	b.n	800648c <LL_I2C_ConfigSpeed+0xf4>
 800648a:	2304      	movs	r3, #4
 800648c:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8006496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800649a:	ea44 0203 	orr.w	r2, r4, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	61da      	str	r2, [r3, #28]
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc90      	pop	{r4, r7}
 80064aa:	4770      	bx	lr
 80064ac:	431bde83 	.word	0x431bde83
 80064b0:	000186a0 	.word	0x000186a0
 80064b4:	10624dd3 	.word	0x10624dd3

080064b8 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 021a 	bic.w	r2, r3, #26
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ff03 	bl	800631a <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f89d 	bl	8006658 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68d9      	ldr	r1, [r3, #12]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	461a      	mov	r2, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff ff06 	bl	800633a <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800652e:	6939      	ldr	r1, [r7, #16]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff2d 	bl	8006398 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6959      	ldr	r1, [r3, #20]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	461a      	mov	r2, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff0c 	bl	8006366 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ffaf 	bl	80064b8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff fecd 	bl	80062fa <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ffb9 	bl	80064de <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800657c:	4b04      	ldr	r3, [pc, #16]	; (8006590 <LL_RCC_GetSysClkSource+0x18>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 030c 	and.w	r3, r3, #12
}
 8006584:	4618      	mov	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40023800 	.word	0x40023800

08006594 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <LL_RCC_GetAHBPrescaler+0x18>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40023800 	.word	0x40023800

080065b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80065bc:	4618      	mov	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800

080065cc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80065d8:	4618      	mov	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40023800 	.word	0x40023800

080065e8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <LL_RCC_PLL_GetMainSource+0x18>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800

08006604 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006608:	4b04      	ldr	r3, [pc, #16]	; (800661c <LL_RCC_PLL_GetN+0x18>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	099b      	lsrs	r3, r3, #6
 800660e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006612:	4618      	mov	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40023800 	.word	0x40023800

08006620 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <LL_RCC_PLL_GetP+0x18>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40023800 	.word	0x40023800

0800663c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006640:	4b04      	ldr	r3, [pc, #16]	; (8006654 <LL_RCC_PLL_GetDivider+0x18>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800

08006658 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006660:	f000 f820 	bl	80066a4 <RCC_GetSystemClockFreq>
 8006664:	4602      	mov	r2, r0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f83e 	bl	80066f0 <RCC_GetHCLKClockFreq>
 8006674:	4602      	mov	r2, r0
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f84c 	bl	800671c <RCC_GetPCLK1ClockFreq>
 8006684:	4602      	mov	r2, r0
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 f858 	bl	8006744 <RCC_GetPCLK2ClockFreq>
 8006694:	4602      	mov	r2, r0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60da      	str	r2, [r3, #12]
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80066ae:	f7ff ff63 	bl	8006578 <LL_RCC_GetSysClkSource>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d006      	beq.n	80066c6 <RCC_GetSystemClockFreq+0x22>
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d007      	beq.n	80066cc <RCC_GetSystemClockFreq+0x28>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80066c0:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <RCC_GetSystemClockFreq+0x44>)
 80066c2:	607b      	str	r3, [r7, #4]
      break;
 80066c4:	e00a      	b.n	80066dc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80066c6:	4b09      	ldr	r3, [pc, #36]	; (80066ec <RCC_GetSystemClockFreq+0x48>)
 80066c8:	607b      	str	r3, [r7, #4]
      break;
 80066ca:	e007      	b.n	80066dc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80066cc:	2008      	movs	r0, #8
 80066ce:	f000 f84d 	bl	800676c <RCC_PLL_GetFreqDomain_SYS>
 80066d2:	6078      	str	r0, [r7, #4]
      break;
 80066d4:	e002      	b.n	80066dc <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80066d6:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <RCC_GetSystemClockFreq+0x44>)
 80066d8:	607b      	str	r3, [r7, #4]
      break;
 80066da:	bf00      	nop
  }

  return frequency;
 80066dc:	687b      	ldr	r3, [r7, #4]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	00f42400 	.word	0x00f42400
 80066ec:	007a1200 	.word	0x007a1200

080066f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80066f8:	f7ff ff4c 	bl	8006594 <LL_RCC_GetAHBPrescaler>
 80066fc:	4603      	mov	r3, r0
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	4a04      	ldr	r2, [pc, #16]	; (8006718 <RCC_GetHCLKClockFreq+0x28>)
 8006706:	5cd3      	ldrb	r3, [r2, r3]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	40d3      	lsrs	r3, r2
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	0800c868 	.word	0x0800c868

0800671c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006724:	f7ff ff44 	bl	80065b0 <LL_RCC_GetAPB1Prescaler>
 8006728:	4603      	mov	r3, r0
 800672a:	0a9b      	lsrs	r3, r3, #10
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <RCC_GetPCLK1ClockFreq+0x24>)
 800672e:	5cd3      	ldrb	r3, [r2, r3]
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	40d3      	lsrs	r3, r2
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	0800c878 	.word	0x0800c878

08006744 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800674c:	f7ff ff3e 	bl	80065cc <LL_RCC_GetAPB2Prescaler>
 8006750:	4603      	mov	r3, r0
 8006752:	0b5b      	lsrs	r3, r3, #13
 8006754:	4a04      	ldr	r2, [pc, #16]	; (8006768 <RCC_GetPCLK2ClockFreq+0x24>)
 8006756:	5cd3      	ldrb	r3, [r2, r3]
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	40d3      	lsrs	r3, r2
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	0800c878 	.word	0x0800c878

0800676c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006780:	f7ff ff32 	bl	80065e8 <LL_RCC_PLL_GetMainSource>
 8006784:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800678c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006790:	d003      	beq.n	800679a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8006792:	e005      	b.n	80067a0 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006796:	617b      	str	r3, [r7, #20]
      break;
 8006798:	e005      	b.n	80067a6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800679a:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800679c:	617b      	str	r3, [r7, #20]
      break;
 800679e:	e002      	b.n	80067a6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80067a2:	617b      	str	r3, [r7, #20]
      break;
 80067a4:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d113      	bne.n	80067d4 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80067ac:	f7ff ff46 	bl	800663c <LL_RCC_PLL_GetDivider>
 80067b0:	4602      	mov	r2, r0
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	fbb3 f4f2 	udiv	r4, r3, r2
 80067b8:	f7ff ff24 	bl	8006604 <LL_RCC_PLL_GetN>
 80067bc:	4603      	mov	r3, r0
 80067be:	fb03 f404 	mul.w	r4, r3, r4
 80067c2:	f7ff ff2d 	bl	8006620 <LL_RCC_PLL_GetP>
 80067c6:	4603      	mov	r3, r0
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	3301      	adds	r3, #1
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80067d2:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80067d4:	693b      	ldr	r3, [r7, #16]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd90      	pop	{r4, r7, pc}
 80067de:	bf00      	nop
 80067e0:	00f42400 	.word	0x00f42400
 80067e4:	007a1200 	.word	0x007a1200

080067e8 <LL_USART_IsEnabled>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	bf0c      	ite	eq
 80067fe:	2301      	moveq	r3, #1
 8006800:	2300      	movne	r3, #0
 8006802:	b2db      	uxtb	r3, r3
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <LL_USART_SetStopBitsLength>:
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <LL_USART_SetHWFlowCtrl>:
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	615a      	str	r2, [r3, #20]
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <LL_USART_SetBaudRate>:
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006870:	d152      	bne.n	8006918 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009a      	lsls	r2, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	4a4f      	ldr	r2, [pc, #316]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	b29b      	uxth	r3, r3
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	b299      	uxth	r1, r3
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009a      	lsls	r2, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a8:	4b46      	ldr	r3, [pc, #280]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80068aa:	fba3 0302 	umull	r0, r3, r3, r2
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	2064      	movs	r0, #100	; 0x64
 80068b2:	fb00 f303 	mul.w	r3, r0, r3
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	3332      	adds	r3, #50	; 0x32
 80068bc:	4a41      	ldr	r2, [pc, #260]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	440b      	add	r3, r1
 80068d2:	b299      	uxth	r1, r3
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009a      	lsls	r2, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068e8:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80068ea:	fba3 0302 	umull	r0, r3, r3, r2
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	2064      	movs	r0, #100	; 0x64
 80068f2:	fb00 f303 	mul.w	r3, r0, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	3332      	adds	r3, #50	; 0x32
 80068fc:	4a31      	ldr	r2, [pc, #196]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	b29b      	uxth	r3, r3
 800690c:	440b      	add	r3, r1
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	609a      	str	r2, [r3, #8]
}
 8006916:	e04f      	b.n	80069b8 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009a      	lsls	r2, r3, #2
 8006922:	441a      	add	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	b29b      	uxth	r3, r3
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	b299      	uxth	r1, r3
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009a      	lsls	r2, r3, #2
 8006944:	441a      	add	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	fbb2 f2f3 	udiv	r2, r2, r3
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 8006950:	fba3 0302 	umull	r0, r3, r3, r2
 8006954:	095b      	lsrs	r3, r3, #5
 8006956:	2064      	movs	r0, #100	; 0x64
 8006958:	fb00 f303 	mul.w	r3, r0, r3
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	3332      	adds	r3, #50	; 0x32
 8006962:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 8006964:	fba2 2303 	umull	r2, r3, r2, r3
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	b29b      	uxth	r3, r3
 800696c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006970:	b29b      	uxth	r3, r3
 8006972:	440b      	add	r3, r1
 8006974:	b299      	uxth	r1, r3
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009a      	lsls	r2, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	fbb2 f2f3 	udiv	r2, r2, r3
 800698a:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 800698c:	fba3 0302 	umull	r0, r3, r3, r2
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	2064      	movs	r0, #100	; 0x64
 8006994:	fb00 f303 	mul.w	r3, r0, r3
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	3332      	adds	r3, #50	; 0x32
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <LL_USART_SetBaudRate+0x168>)
 80069a0:	fba2 2303 	umull	r2, r3, r2, r3
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	440b      	add	r3, r1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	609a      	str	r2, [r3, #8]
}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	51eb851f 	.word	0x51eb851f

080069c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff ff04 	bl	80067e8 <LL_USART_IsEnabled>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d16c      	bne.n	8006ac0 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80069ee:	f023 030c 	bic.w	r3, r3, #12
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	6851      	ldr	r1, [r2, #4]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	68d2      	ldr	r2, [r2, #12]
 80069fa:	4311      	orrs	r1, r2
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	6912      	ldr	r2, [r2, #16]
 8006a00:	4311      	orrs	r1, r2
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	6992      	ldr	r2, [r2, #24]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fefb 	bl	8006810 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff ff08 	bl	8006836 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fe14 	bl	8006658 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a26      	ldr	r2, [pc, #152]	; (8006acc <LL_USART_Init+0x104>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d102      	bne.n	8006a3e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e02f      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a23      	ldr	r2, [pc, #140]	; (8006ad0 <LL_USART_Init+0x108>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d102      	bne.n	8006a4c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	e028      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <LL_USART_Init+0x10c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d102      	bne.n	8006a5a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	e021      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <LL_USART_Init+0x110>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d102      	bne.n	8006a68 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	e01a      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <LL_USART_Init+0x114>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d102      	bne.n	8006a76 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e013      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <LL_USART_Init+0x118>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d102      	bne.n	8006a84 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	e00c      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <LL_USART_Init+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d102      	bne.n	8006a92 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	e005      	b.n	8006a9e <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <LL_USART_Init+0x120>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d101      	bne.n	8006a9e <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8006aac:	2300      	movs	r3, #0
 8006aae:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699a      	ldr	r2, [r3, #24]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fece 	bl	800685c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40011000 	.word	0x40011000
 8006ad0:	40004400 	.word	0x40004400
 8006ad4:	40004800 	.word	0x40004800
 8006ad8:	40011400 	.word	0x40011400
 8006adc:	40004c00 	.word	0x40004c00
 8006ae0:	40005000 	.word	0x40005000
 8006ae4:	40007800 	.word	0x40007800
 8006ae8:	40007c00 	.word	0x40007c00

08006aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aec:	b084      	sub	sp, #16
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	f107 001c 	add.w	r0, r7, #28
 8006afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d122      	bne.n	8006b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d105      	bne.n	8006b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fa7c 	bl	800803c <USB_CoreReset>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	e01a      	b.n	8006b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 fa70 	bl	800803c <USB_CoreReset>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38
 8006b72:	e005      	b.n	8006b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d10b      	bne.n	8006b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f043 0206 	orr.w	r2, r3, #6
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006baa:	b004      	add	sp, #16
 8006bac:	4770      	bx	lr
	...

08006bb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d165      	bne.n	8006c90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4a41      	ldr	r2, [pc, #260]	; (8006ccc <USB_SetTurnaroundTime+0x11c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d906      	bls.n	8006bda <USB_SetTurnaroundTime+0x2a>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4a40      	ldr	r2, [pc, #256]	; (8006cd0 <USB_SetTurnaroundTime+0x120>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d802      	bhi.n	8006bda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006bd4:	230f      	movs	r3, #15
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e062      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a3c      	ldr	r2, [pc, #240]	; (8006cd0 <USB_SetTurnaroundTime+0x120>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d906      	bls.n	8006bf0 <USB_SetTurnaroundTime+0x40>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4a3b      	ldr	r2, [pc, #236]	; (8006cd4 <USB_SetTurnaroundTime+0x124>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d802      	bhi.n	8006bf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006bea:	230e      	movs	r3, #14
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e057      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a38      	ldr	r2, [pc, #224]	; (8006cd4 <USB_SetTurnaroundTime+0x124>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d906      	bls.n	8006c06 <USB_SetTurnaroundTime+0x56>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4a37      	ldr	r2, [pc, #220]	; (8006cd8 <USB_SetTurnaroundTime+0x128>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d802      	bhi.n	8006c06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c00:	230d      	movs	r3, #13
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e04c      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4a33      	ldr	r2, [pc, #204]	; (8006cd8 <USB_SetTurnaroundTime+0x128>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d906      	bls.n	8006c1c <USB_SetTurnaroundTime+0x6c>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4a32      	ldr	r2, [pc, #200]	; (8006cdc <USB_SetTurnaroundTime+0x12c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d802      	bhi.n	8006c1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c16:	230c      	movs	r3, #12
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e041      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4a2f      	ldr	r2, [pc, #188]	; (8006cdc <USB_SetTurnaroundTime+0x12c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d906      	bls.n	8006c32 <USB_SetTurnaroundTime+0x82>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4a2e      	ldr	r2, [pc, #184]	; (8006ce0 <USB_SetTurnaroundTime+0x130>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d802      	bhi.n	8006c32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c2c:	230b      	movs	r3, #11
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e036      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4a2a      	ldr	r2, [pc, #168]	; (8006ce0 <USB_SetTurnaroundTime+0x130>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d906      	bls.n	8006c48 <USB_SetTurnaroundTime+0x98>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4a29      	ldr	r2, [pc, #164]	; (8006ce4 <USB_SetTurnaroundTime+0x134>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d802      	bhi.n	8006c48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c42:	230a      	movs	r3, #10
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	e02b      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4a26      	ldr	r2, [pc, #152]	; (8006ce4 <USB_SetTurnaroundTime+0x134>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d906      	bls.n	8006c5e <USB_SetTurnaroundTime+0xae>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4a25      	ldr	r2, [pc, #148]	; (8006ce8 <USB_SetTurnaroundTime+0x138>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d802      	bhi.n	8006c5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c58:	2309      	movs	r3, #9
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e020      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4a21      	ldr	r2, [pc, #132]	; (8006ce8 <USB_SetTurnaroundTime+0x138>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d906      	bls.n	8006c74 <USB_SetTurnaroundTime+0xc4>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4a20      	ldr	r2, [pc, #128]	; (8006cec <USB_SetTurnaroundTime+0x13c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d802      	bhi.n	8006c74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c6e:	2308      	movs	r3, #8
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e015      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <USB_SetTurnaroundTime+0x13c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d906      	bls.n	8006c8a <USB_SetTurnaroundTime+0xda>
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <USB_SetTurnaroundTime+0x140>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d802      	bhi.n	8006c8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c84:	2307      	movs	r3, #7
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e00a      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c8a:	2306      	movs	r3, #6
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e007      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c96:	2309      	movs	r3, #9
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	e001      	b.n	8006ca0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c9c:	2309      	movs	r3, #9
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	00d8acbf 	.word	0x00d8acbf
 8006cd0:	00e4e1bf 	.word	0x00e4e1bf
 8006cd4:	00f423ff 	.word	0x00f423ff
 8006cd8:	0106737f 	.word	0x0106737f
 8006cdc:	011a499f 	.word	0x011a499f
 8006ce0:	01312cff 	.word	0x01312cff
 8006ce4:	014ca43f 	.word	0x014ca43f
 8006ce8:	016e35ff 	.word	0x016e35ff
 8006cec:	01a6ab1f 	.word	0x01a6ab1f
 8006cf0:	01e847ff 	.word	0x01e847ff

08006cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f043 0201 	orr.w	r2, r3, #1
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f023 0201 	bic.w	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d106      	bne.n	8006d64 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	e00b      	b.n	8006d7c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60da      	str	r2, [r3, #12]
 8006d76:	e001      	b.n	8006d7c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e003      	b.n	8006d84 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d7c:	2032      	movs	r0, #50	; 0x32
 8006d7e:	f7fb fae5 	bl	800234c <HAL_Delay>

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006da6:	2300      	movs	r3, #0
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	e009      	b.n	8006dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3340      	adds	r3, #64	; 0x40
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0e      	cmp	r3, #14
 8006dc4:	d9f2      	bls.n	8006dac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d112      	bne.n	8006df2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38
 8006df0:	e00b      	b.n	8006e0a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e10:	461a      	mov	r2, r3
 8006e12:	2300      	movs	r3, #0
 8006e14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e24:	461a      	mov	r2, r3
 8006e26:	680b      	ldr	r3, [r1, #0]
 8006e28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d10c      	bne.n	8006e4a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e36:	2100      	movs	r1, #0
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f961 	bl	8007100 <USB_SetDevSpeed>
 8006e3e:	e008      	b.n	8006e52 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e40:	2101      	movs	r1, #1
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f95c 	bl	8007100 <USB_SetDevSpeed>
 8006e48:	e003      	b.n	8006e52 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e4a:	2103      	movs	r1, #3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f957 	bl	8007100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e52:	2110      	movs	r1, #16
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f90b 	bl	8007070 <USB_FlushTxFifo>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f929 	bl	80070bc <USB_FlushRxFifo>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	461a      	mov	r2, r3
 8006e88:	2300      	movs	r3, #0
 8006e8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e92:	461a      	mov	r2, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	e043      	b.n	8006f26 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb4:	d118      	bne.n	8006ee8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	e013      	b.n	8006efa <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e008      	b.n	8006efa <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	461a      	mov	r2, r3
 8006f08:	2300      	movs	r3, #0
 8006f0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3301      	adds	r3, #1
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d3b7      	bcc.n	8006e9e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	e043      	b.n	8006fbc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f4a:	d118      	bne.n	8006f7e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e013      	b.n	8006f90 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	461a      	mov	r2, r3
 8006f76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	e008      	b.n	8006f90 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d3b7      	bcc.n	8006f34 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d111      	bne.n	8007002 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4b20      	ldr	r3, [pc, #128]	; (8007068 <USB_DevInit+0x2dc>)
 8006fe8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffc:	f043 0303 	orr.w	r3, r3, #3
 8007000:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800700e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	2b00      	cmp	r3, #0
 8007014:	d105      	bne.n	8007022 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f043 0210 	orr.w	r2, r3, #16
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	4b11      	ldr	r3, [pc, #68]	; (800706c <USB_DevInit+0x2e0>)
 8007028:	4313      	orrs	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800702e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f043 0208 	orr.w	r2, r3, #8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d107      	bne.n	8007056 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800704e:	f043 0304 	orr.w	r3, r3, #4
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007062:	b004      	add	sp, #16
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	00800100 	.word	0x00800100
 800706c:	803c3800 	.word	0x803c3800

08007070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	019b      	lsls	r3, r3, #6
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3301      	adds	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <USB_FlushTxFifo+0x48>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d901      	bls.n	800709c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d0f0      	beq.n	800708a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	00030d40 	.word	0x00030d40

080070bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2210      	movs	r2, #16
 80070cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3301      	adds	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <USB_FlushRxFifo+0x40>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d901      	bls.n	80070e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e006      	b.n	80070ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d0f0      	beq.n	80070ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	00030d40 	.word	0x00030d40

08007100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007120:	4313      	orrs	r3, r2
 8007122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007132:	b480      	push	{r7}
 8007134:	b087      	sub	sp, #28
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 0306 	and.w	r3, r3, #6
 800714a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]
 8007156:	e00a      	b.n	800716e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USB_GetDevSpeed+0x32>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b06      	cmp	r3, #6
 8007162:	d102      	bne.n	800716a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007164:	2302      	movs	r3, #2
 8007166:	75fb      	strb	r3, [r7, #23]
 8007168:	e001      	b.n	800716e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800716a:	230f      	movs	r3, #15
 800716c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d13a      	bne.n	800720e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	2101      	movs	r1, #1
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	68f9      	ldr	r1, [r7, #12]
 80071b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d155      	bne.n	800727c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	78db      	ldrb	r3, [r3, #3]
 80071ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	059b      	lsls	r3, r3, #22
 80071f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071f4:	4313      	orrs	r3, r2
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	e036      	b.n	800727c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007214:	69da      	ldr	r2, [r3, #28]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	2101      	movs	r1, #1
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	68f9      	ldr	r1, [r7, #12]
 8007228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800722c:	4313      	orrs	r3, r2
 800722e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d11a      	bne.n	800727c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	78db      	ldrb	r3, [r3, #3]
 8007260:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007262:	430b      	orrs	r3, r1
 8007264:	4313      	orrs	r3, r2
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800727a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d135      	bne.n	8007314 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f303 	lsl.w	r3, r1, r3
 80072be:	b29b      	uxth	r3, r3
 80072c0:	43db      	mvns	r3, r3
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c8:	4013      	ands	r3, r2
 80072ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	2101      	movs	r1, #1
 80072de:	fa01 f303 	lsl.w	r3, r1, r3
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	43db      	mvns	r3, r3
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ec:	4013      	ands	r3, r2
 80072ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	0159      	lsls	r1, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	440b      	add	r3, r1
 8007306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730a:	4619      	mov	r1, r3
 800730c:	4b1f      	ldr	r3, [pc, #124]	; (800738c <USB_DeactivateEndpoint+0x100>)
 800730e:	4013      	ands	r3, r2
 8007310:	600b      	str	r3, [r1, #0]
 8007312:	e034      	b.n	800737e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f303 	lsl.w	r3, r1, r3
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	43db      	mvns	r3, r3
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007334:	4013      	ands	r3, r2
 8007336:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	43db      	mvns	r3, r3
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007358:	4013      	ands	r3, r2
 800735a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	0159      	lsls	r1, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	440b      	add	r3, r1
 8007372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007376:	4619      	mov	r1, r3
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <USB_DeactivateEndpoint+0x104>)
 800737a:	4013      	ands	r3, r2
 800737c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	ec337800 	.word	0xec337800
 8007390:	eff37800 	.word	0xeff37800

08007394 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 815c 	bne.w	800766e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d132      	bne.n	8007424 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007400:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741c:	0cdb      	lsrs	r3, r3, #19
 800741e:	04db      	lsls	r3, r3, #19
 8007420:	6113      	str	r3, [r2, #16]
 8007422:	e074      	b.n	800750e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743e:	0cdb      	lsrs	r3, r3, #19
 8007440:	04db      	lsls	r3, r3, #19
 8007442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007462:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6959      	ldr	r1, [r3, #20]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	440b      	add	r3, r1
 8007480:	1e59      	subs	r1, r3, #1
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	fbb1 f3f3 	udiv	r3, r1, r3
 800748a:	04d9      	lsls	r1, r3, #19
 800748c:	4b9d      	ldr	r3, [pc, #628]	; (8007704 <USB_EPStartXfer+0x370>)
 800748e:	400b      	ands	r3, r1
 8007490:	69b9      	ldr	r1, [r7, #24]
 8007492:	0148      	lsls	r0, r1, #5
 8007494:	69f9      	ldr	r1, [r7, #28]
 8007496:	4401      	add	r1, r0
 8007498:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800749c:	4313      	orrs	r3, r2
 800749e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	691a      	ldr	r2, [r3, #16]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074b6:	69b9      	ldr	r1, [r7, #24]
 80074b8:	0148      	lsls	r0, r1, #5
 80074ba:	69f9      	ldr	r1, [r7, #28]
 80074bc:	4401      	add	r1, r0
 80074be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074c2:	4313      	orrs	r3, r2
 80074c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	78db      	ldrb	r3, [r3, #3]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d11f      	bne.n	800750e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800750c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d14b      	bne.n	80075ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	461a      	mov	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	78db      	ldrb	r3, [r3, #3]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d128      	bne.n	800758a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d110      	bne.n	800756a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e00f      	b.n	800758a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007588:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e12f      	b.n	800780c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	0151      	lsls	r1, r2, #5
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	440a      	add	r2, r1
 80075c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	78db      	ldrb	r3, [r3, #3]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d015      	beq.n	8007600 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 8117 	beq.w	800780c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	2101      	movs	r1, #1
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	69f9      	ldr	r1, [r7, #28]
 80075f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fa:	4313      	orrs	r3, r2
 80075fc:	634b      	str	r3, [r1, #52]	; 0x34
 80075fe:	e105      	b.n	800780c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760c:	2b00      	cmp	r3, #0
 800760e:	d110      	bne.n	8007632 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	440a      	add	r2, r1
 8007626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	e00f      	b.n	8007652 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	0151      	lsls	r1, r2, #5
 8007644:	69fa      	ldr	r2, [r7, #28]
 8007646:	440a      	add	r2, r1
 8007648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007650:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	68d9      	ldr	r1, [r3, #12]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	b298      	uxth	r0, r3
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	4603      	mov	r3, r0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fa2b 	bl	8007ac2 <USB_WritePacket>
 800766c:	e0ce      	b.n	800780c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007688:	0cdb      	lsrs	r3, r3, #19
 800768a:	04db      	lsls	r3, r3, #19
 800768c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d126      	bne.n	8007708 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d0:	69b9      	ldr	r1, [r7, #24]
 80076d2:	0148      	lsls	r0, r1, #5
 80076d4:	69f9      	ldr	r1, [r7, #28]
 80076d6:	4401      	add	r1, r0
 80076d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076dc:	4313      	orrs	r3, r2
 80076de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076fe:	6113      	str	r3, [r2, #16]
 8007700:	e036      	b.n	8007770 <USB_EPStartXfer+0x3dc>
 8007702:	bf00      	nop
 8007704:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	695a      	ldr	r2, [r3, #20]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	4413      	add	r3, r2
 8007712:	1e5a      	subs	r2, r3, #1
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	fbb2 f3f3 	udiv	r3, r2, r3
 800771c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	8afb      	ldrh	r3, [r7, #22]
 800772e:	04d9      	lsls	r1, r3, #19
 8007730:	4b39      	ldr	r3, [pc, #228]	; (8007818 <USB_EPStartXfer+0x484>)
 8007732:	400b      	ands	r3, r1
 8007734:	69b9      	ldr	r1, [r7, #24]
 8007736:	0148      	lsls	r0, r1, #5
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	4401      	add	r1, r0
 800773c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007740:	4313      	orrs	r3, r2
 8007742:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	8af9      	ldrh	r1, [r7, #22]
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007760:	69b9      	ldr	r1, [r7, #24]
 8007762:	0148      	lsls	r0, r1, #5
 8007764:	69f9      	ldr	r1, [r7, #28]
 8007766:	4401      	add	r1, r0
 8007768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800776c:	4313      	orrs	r3, r2
 800776e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10d      	bne.n	8007792 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	68d9      	ldr	r1, [r3, #12]
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	460a      	mov	r2, r1
 8007790:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	78db      	ldrb	r3, [r3, #3]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d128      	bne.n	80077ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d110      	bne.n	80077cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e00f      	b.n	80077ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800780a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	1ff80000 	.word	0x1ff80000

0800781c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b01      	cmp	r3, #1
 800783a:	f040 80cd 	bne.w	80079d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d132      	bne.n	80078ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007860:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007864:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007868:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a4:	0cdb      	lsrs	r3, r3, #19
 80078a6:	04db      	lsls	r3, r3, #19
 80078a8:	6113      	str	r3, [r2, #16]
 80078aa:	e04e      	b.n	800794a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	0cdb      	lsrs	r3, r3, #19
 80078c8:	04db      	lsls	r3, r3, #19
 80078ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d903      	bls.n	8007904 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800793a:	6939      	ldr	r1, [r7, #16]
 800793c:	0148      	lsls	r0, r1, #5
 800793e:	6979      	ldr	r1, [r7, #20]
 8007940:	4401      	add	r1, r0
 8007942:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007946:	4313      	orrs	r3, r2
 8007948:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d11e      	bne.n	800798e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007964:	461a      	mov	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	440a      	add	r2, r1
 8007982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	e092      	b.n	8007ab4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d07e      	beq.n	8007ab4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	2101      	movs	r1, #1
 80079c8:	fa01 f303 	lsl.w	r3, r1, r3
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079d2:	4313      	orrs	r3, r2
 80079d4:	634b      	str	r3, [r1, #52]	; 0x34
 80079d6:	e06d      	b.n	8007ab4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f2:	0cdb      	lsrs	r3, r3, #19
 80079f4:	04db      	lsls	r3, r3, #19
 80079f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a1a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a62:	6939      	ldr	r1, [r7, #16]
 8007a64:	0148      	lsls	r0, r1, #5
 8007a66:	6979      	ldr	r1, [r7, #20]
 8007a68:	4401      	add	r1, r0
 8007a6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d10d      	bne.n	8007a94 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	68d9      	ldr	r1, [r3, #12]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a90:	460a      	mov	r2, r1
 8007a92:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b089      	sub	sp, #36	; 0x24
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	4611      	mov	r1, r2
 8007ace:	461a      	mov	r2, r3
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	71fb      	strb	r3, [r7, #7]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007ae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d11a      	bne.n	8007b1e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ae8:	88bb      	ldrh	r3, [r7, #4]
 8007aea:	3303      	adds	r3, #3
 8007aec:	089b      	lsrs	r3, r3, #2
 8007aee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007af0:	2300      	movs	r3, #0
 8007af2:	61bb      	str	r3, [r7, #24]
 8007af4:	e00f      	b.n	8007b16 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	031a      	lsls	r2, r3, #12
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b02:	461a      	mov	r2, r3
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	3301      	adds	r3, #1
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d3eb      	bcc.n	8007af6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3724      	adds	r7, #36	; 0x24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b089      	sub	sp, #36	; 0x24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	3303      	adds	r3, #3
 8007b46:	089b      	lsrs	r3, r3, #2
 8007b48:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	e00b      	b.n	8007b68 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	3301      	adds	r3, #1
 8007b66:	61bb      	str	r3, [r7, #24]
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d3ef      	bcc.n	8007b50 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007b70:	69fb      	ldr	r3, [r7, #28]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3724      	adds	r7, #36	; 0x24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d12c      	bne.n	8007bf4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	db12      	blt.n	8007bd2 <USB_EPSetStall+0x54>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00f      	beq.n	8007bd2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	e02b      	b.n	8007c4c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	db12      	blt.n	8007c2c <USB_EPSetStall+0xae>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00f      	beq.n	8007c2c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	0151      	lsls	r1, r2, #5
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	440a      	add	r2, r1
 8007c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c2a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d128      	bne.n	8007cc8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	78db      	ldrb	r3, [r3, #3]
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d003      	beq.n	8007ca6 <USB_EPClearStall+0x4c>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	78db      	ldrb	r3, [r3, #3]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d138      	bne.n	8007d18 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e027      	b.n	8007d18 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ce6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	78db      	ldrb	r3, [r3, #3]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d003      	beq.n	8007cf8 <USB_EPClearStall+0x9e>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	78db      	ldrb	r3, [r3, #3]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d10f      	bne.n	8007d18 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d16:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d48:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d60:	4313      	orrs	r3, r2
 8007d62:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d8c:	f023 0302 	bic.w	r3, r3, #2
 8007d90:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d92:	2003      	movs	r0, #3
 8007d94:	f7fa fada 	bl	800234c <HAL_Delay>

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007dc2:	2003      	movs	r0, #3
 8007dc4:	f7fa fac2 	bl	800234c <HAL_Delay>

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4013      	ands	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007dea:	68fb      	ldr	r3, [r7, #12]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	0c1b      	lsrs	r3, r3, #16
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	b29b      	uxth	r3, r3
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ecc:	01db      	lsls	r3, r3, #7
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007eea:	68bb      	ldr	r3, [r7, #8]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0301 	and.w	r3, r3, #1
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f32:	f023 0307 	bic.w	r3, r3, #7
 8007f36:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 0306 	and.w	r3, r3, #6
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d109      	bne.n	8007f5c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f56:	f043 0303 	orr.w	r3, r3, #3
 8007f5a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	333c      	adds	r3, #60	; 0x3c
 8007f96:	3304      	adds	r3, #4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4a26      	ldr	r2, [pc, #152]	; (8008038 <USB_EP0_OutStart+0xb8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d90a      	bls.n	8007fba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fb4:	d101      	bne.n	8007fba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e037      	b.n	800802a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe8:	f043 0318 	orr.w	r3, r3, #24
 8007fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ffc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008000:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d10f      	bne.n	8008028 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008022:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	4f54300a 	.word	0x4f54300a

0800803c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <USB_CoreReset+0x64>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e01b      	b.n	8008092 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	daf2      	bge.n	8008048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	f043 0201 	orr.w	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <USB_CoreReset+0x64>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d901      	bls.n	8008084 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e006      	b.n	8008092 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b01      	cmp	r3, #1
 800808e:	d0f0      	beq.n	8008072 <USB_CoreReset+0x36>

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	00030d40 	.word	0x00030d40

080080a4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <HAL_ETH_RxCpltCallback+0x1c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 fbab 	bl	800980c <osSemaphoreRelease>
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000454 	.word	0x20000454

080080c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	7c1b      	ldrb	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d115      	bne.n	8008108 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080e0:	2202      	movs	r2, #2
 80080e2:	2181      	movs	r1, #129	; 0x81
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f003 fd50 	bl	800bb8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080f4:	2202      	movs	r2, #2
 80080f6:	2101      	movs	r1, #1
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f003 fd46 	bl	800bb8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008106:	e012      	b.n	800812e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	2202      	movs	r2, #2
 800810c:	2181      	movs	r1, #129	; 0x81
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f003 fd3b 	bl	800bb8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	2202      	movs	r2, #2
 800811e:	2101      	movs	r1, #1
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f003 fd32 	bl	800bb8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800812e:	2308      	movs	r3, #8
 8008130:	2203      	movs	r2, #3
 8008132:	2182      	movs	r1, #130	; 0x82
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f003 fd28 	bl	800bb8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008140:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008144:	f003 fe98 	bl	800be78 <malloc>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
 8008160:	e026      	b.n	80081b0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008168:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	7c1b      	ldrb	r3, [r3, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008196:	2101      	movs	r1, #1
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f003 fde7 	bl	800bd6c <USBD_LL_PrepareReceive>
 800819e:	e007      	b.n	80081b0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081a6:	2340      	movs	r3, #64	; 0x40
 80081a8:	2101      	movs	r1, #1
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f003 fdde 	bl	800bd6c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80081ca:	2181      	movs	r1, #129	; 0x81
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f003 fd02 	bl	800bbd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80081d8:	2101      	movs	r1, #1
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f003 fcfb 	bl	800bbd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80081e8:	2182      	movs	r1, #130	; 0x82
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f003 fcf3 	bl	800bbd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008210:	4618      	mov	r0, r3
 8008212:	f003 fe39 	bl	800be88 <free>
    pdev->pClassData = NULL;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008238:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824e:	2b00      	cmp	r3, #0
 8008250:	d039      	beq.n	80082c6 <USBD_CDC_Setup+0x9e>
 8008252:	2b20      	cmp	r3, #32
 8008254:	d17c      	bne.n	8008350 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	88db      	ldrh	r3, [r3, #6]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d029      	beq.n	80082b2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b25b      	sxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	da11      	bge.n	800828c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008274:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	88d2      	ldrh	r2, [r2, #6]
 800827a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800827c:	6939      	ldr	r1, [r7, #16]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	88db      	ldrh	r3, [r3, #6]
 8008282:	461a      	mov	r2, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f99b 	bl	80095c0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800828a:	e068      	b.n	800835e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	785a      	ldrb	r2, [r3, #1]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	b2da      	uxtb	r2, r3
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082a2:	6939      	ldr	r1, [r7, #16]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	88db      	ldrh	r3, [r3, #6]
 80082a8:	461a      	mov	r2, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 f9b6 	bl	800961c <USBD_CtlPrepareRx>
    break;
 80082b0:	e055      	b.n	800835e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	7850      	ldrb	r0, [r2, #1]
 80082be:	2200      	movs	r2, #0
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	4798      	blx	r3
    break;
 80082c4:	e04b      	b.n	800835e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	785b      	ldrb	r3, [r3, #1]
 80082ca:	2b0a      	cmp	r3, #10
 80082cc:	d017      	beq.n	80082fe <USBD_CDC_Setup+0xd6>
 80082ce:	2b0b      	cmp	r3, #11
 80082d0:	d029      	beq.n	8008326 <USBD_CDC_Setup+0xfe>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d133      	bne.n	800833e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d107      	bne.n	80082f0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80082e0:	f107 030c 	add.w	r3, r7, #12
 80082e4:	2202      	movs	r2, #2
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f969 	bl	80095c0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80082ee:	e02e      	b.n	800834e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 f8f9 	bl	80094ea <USBD_CtlError>
			  ret = USBD_FAIL;
 80082f8:	2302      	movs	r3, #2
 80082fa:	75fb      	strb	r3, [r7, #23]
      break;
 80082fc:	e027      	b.n	800834e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008304:	2b03      	cmp	r3, #3
 8008306:	d107      	bne.n	8008318 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008308:	f107 030f 	add.w	r3, r7, #15
 800830c:	2201      	movs	r2, #1
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 f955 	bl	80095c0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008316:	e01a      	b.n	800834e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 f8e5 	bl	80094ea <USBD_CtlError>
			  ret = USBD_FAIL;
 8008320:	2302      	movs	r3, #2
 8008322:	75fb      	strb	r3, [r7, #23]
      break;
 8008324:	e013      	b.n	800834e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800832c:	2b03      	cmp	r3, #3
 800832e:	d00d      	beq.n	800834c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f8d9 	bl	80094ea <USBD_CtlError>
			  ret = USBD_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800833c:	e006      	b.n	800834c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 f8d2 	bl	80094ea <USBD_CtlError>
      ret = USBD_FAIL;
 8008346:	2302      	movs	r3, #2
 8008348:	75fb      	strb	r3, [r7, #23]
      break;
 800834a:	e000      	b.n	800834e <USBD_CDC_Setup+0x126>
      break;
 800834c:	bf00      	nop
    }
    break;
 800834e:	e006      	b.n	800835e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f8c9 	bl	80094ea <USBD_CtlError>
    ret = USBD_FAIL;
 8008358:	2302      	movs	r3, #2
 800835a:	75fb      	strb	r3, [r7, #23]
    break;
 800835c:	bf00      	nop
  }

  return ret;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800837a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008382:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800838a:	2b00      	cmp	r3, #0
 800838c:	d03a      	beq.n	8008404 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	331c      	adds	r3, #28
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d029      	beq.n	80083f8 <USBD_CDC_DataIn+0x90>
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	440b      	add	r3, r1
 80083b2:	331c      	adds	r3, #28
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	78f9      	ldrb	r1, [r7, #3]
 80083b8:	68b8      	ldr	r0, [r7, #8]
 80083ba:	460b      	mov	r3, r1
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	1a5b      	subs	r3, r3, r1
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4403      	add	r3, r0
 80083c4:	3344      	adds	r3, #68	; 0x44
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80083cc:	fb03 f301 	mul.w	r3, r3, r1
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d110      	bne.n	80083f8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	331c      	adds	r3, #28
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80083ea:	78f9      	ldrb	r1, [r7, #3]
 80083ec:	2300      	movs	r3, #0
 80083ee:	2200      	movs	r2, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f003 fc98 	bl	800bd26 <USBD_LL_Transmit>
 80083f6:	e003      	b.n	8008400 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	e000      	b.n	8008406 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008404:	2302      	movs	r3, #2
  }
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008420:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f003 fcc3 	bl	800bdb2 <USBD_LL_GetRxDataSize>
 800842c:	4602      	mov	r2, r0
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008452:	4611      	mov	r1, r2
 8008454:	4798      	blx	r3

    return USBD_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e000      	b.n	800845c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800845a:	2302      	movs	r3, #2
  }
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008472:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800847a:	2b00      	cmp	r3, #0
 800847c:	d015      	beq.n	80084aa <USBD_CDC_EP0_RxReady+0x46>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008484:	2bff      	cmp	r3, #255	; 0xff
 8008486:	d010      	beq.n	80084aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008496:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800849e:	b292      	uxth	r2, r2
 80084a0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2243      	movs	r2, #67	; 0x43
 80084c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80084c2:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20000090 	.word	0x20000090

080084d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2243      	movs	r2, #67	; 0x43
 80084e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80084e2:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	2000004c 	.word	0x2000004c

080084f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2243      	movs	r2, #67	; 0x43
 8008500:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008502:	4b03      	ldr	r3, [pc, #12]	; (8008510 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	200000d4 	.word	0x200000d4

08008514 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	220a      	movs	r2, #10
 8008520:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008522:	4b03      	ldr	r3, [pc, #12]	; (8008530 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	20000008 	.word	0x20000008

08008534 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800853e:	2302      	movs	r3, #2
 8008540:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008562:	b480      	push	{r7}
 8008564:	b087      	sub	sp, #28
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008576:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008580:	88fa      	ldrh	r2, [r7, #6]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d017      	beq.n	8008608 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	7c1b      	ldrb	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d109      	bne.n	80085f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ea:	2101      	movs	r1, #1
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f003 fbbd 	bl	800bd6c <USBD_LL_PrepareReceive>
 80085f2:	e007      	b.n	8008604 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	2101      	movs	r1, #1
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f003 fbb4 	bl	800bd6c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e000      	b.n	800860a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008608:	2302      	movs	r3, #2
  }
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	4613      	mov	r3, r2
 800861e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008626:	2302      	movs	r3, #2
 8008628:	e01a      	b.n	8008660 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	79fa      	ldrb	r2, [r7, #7]
 8008656:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f003 fa2f 	bl	800babc <USBD_LL_Init>

  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d006      	beq.n	800868a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
 8008688:	e001      	b.n	800868e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800868a:	2302      	movs	r3, #2
 800868c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f003 fa55 	bl	800bb54 <USBD_LL_Start>

  return USBD_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80086d6:	2302      	movs	r3, #2
 80086d8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00c      	beq.n	80086fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	78fa      	ldrb	r2, [r7, #3]
 80086ee:	4611      	mov	r1, r2
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	78fa      	ldrb	r2, [r7, #3]
 800871e:	4611      	mov	r1, r2
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	4798      	blx	r3
  return USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fe95 	bl	8009470 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008754:	461a      	mov	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	2b01      	cmp	r3, #1
 8008768:	d00c      	beq.n	8008784 <USBD_LL_SetupStage+0x56>
 800876a:	2b01      	cmp	r3, #1
 800876c:	d302      	bcc.n	8008774 <USBD_LL_SetupStage+0x46>
 800876e:	2b02      	cmp	r3, #2
 8008770:	d010      	beq.n	8008794 <USBD_LL_SetupStage+0x66>
 8008772:	e017      	b.n	80087a4 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fa05 	bl	8008b8c <USBD_StdDevReq>
    break;
 8008782:	e01a      	b.n	80087ba <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa67 	bl	8008c60 <USBD_StdItfReq>
    break;
 8008792:	e012      	b.n	80087ba <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 faa5 	bl	8008cec <USBD_StdEPReq>
    break;
 80087a2:	e00a      	b.n	80087ba <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80087aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f003 fa2e 	bl	800bc14 <USBD_LL_StallEP>
    break;
 80087b8:	bf00      	nop
  }

  return USBD_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	460b      	mov	r3, r1
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80087d2:	7afb      	ldrb	r3, [r7, #11]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d14b      	bne.n	8008870 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80087de:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d134      	bne.n	8008854 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d919      	bls.n	800882a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	1ad2      	subs	r2, r2, r3
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800880c:	429a      	cmp	r2, r3
 800880e:	d203      	bcs.n	8008818 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008814:	b29b      	uxth	r3, r3
 8008816:	e002      	b.n	800881e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800881c:	b29b      	uxth	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 ff18 	bl	8009658 <USBD_CtlContinueRx>
 8008828:	e038      	b.n	800889c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800883c:	2b03      	cmp	r3, #3
 800883e:	d105      	bne.n	800884c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 ff15 	bl	800967c <USBD_CtlSendStatus>
 8008852:	e023      	b.n	800889c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800885a:	2b05      	cmp	r3, #5
 800885c:	d11e      	bne.n	800889c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008866:	2100      	movs	r1, #0
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f003 f9d3 	bl	800bc14 <USBD_LL_StallEP>
 800886e:	e015      	b.n	800889c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00d      	beq.n	8008898 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008882:	2b03      	cmp	r3, #3
 8008884:	d108      	bne.n	8008898 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	7afa      	ldrb	r2, [r7, #11]
 8008890:	4611      	mov	r1, r2
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	4798      	blx	r3
 8008896:	e001      	b.n	800889c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008898:	2302      	movs	r3, #2
 800889a:	e000      	b.n	800889e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	460b      	mov	r3, r1
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d17f      	bne.n	80089ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3314      	adds	r3, #20
 80088be:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d15c      	bne.n	8008984 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d915      	bls.n	8008902 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 fe82 	bl	80095f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80088f4:	2300      	movs	r3, #0
 80088f6:	2200      	movs	r2, #0
 80088f8:	2100      	movs	r1, #0
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f003 fa36 	bl	800bd6c <USBD_LL_PrepareReceive>
 8008900:	e04e      	b.n	80089a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	6912      	ldr	r2, [r2, #16]
 800890a:	fbb3 f1f2 	udiv	r1, r3, r2
 800890e:	fb02 f201 	mul.w	r2, r2, r1
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11c      	bne.n	8008952 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008920:	429a      	cmp	r2, r3
 8008922:	d316      	bcc.n	8008952 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800892e:	429a      	cmp	r2, r3
 8008930:	d20f      	bcs.n	8008952 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008932:	2200      	movs	r2, #0
 8008934:	2100      	movs	r1, #0
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 fe5e 	bl	80095f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008944:	2300      	movs	r3, #0
 8008946:	2200      	movs	r2, #0
 8008948:	2100      	movs	r1, #0
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f003 fa0e 	bl	800bd6c <USBD_LL_PrepareReceive>
 8008950:	e026      	b.n	80089a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008964:	2b03      	cmp	r3, #3
 8008966:	d105      	bne.n	8008974 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008974:	2180      	movs	r1, #128	; 0x80
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f003 f94c 	bl	800bc14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fe90 	bl	80096a2 <USBD_CtlReceiveStatus>
 8008982:	e00d      	b.n	80089a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800898a:	2b04      	cmp	r3, #4
 800898c:	d004      	beq.n	8008998 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008994:	2b00      	cmp	r3, #0
 8008996:	d103      	bne.n	80089a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f003 f93a 	bl	800bc14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d11d      	bne.n	80089e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7ff fe82 	bl	80086b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80089b8:	e015      	b.n	80089e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00d      	beq.n	80089e2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d108      	bne.n	80089e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	7afa      	ldrb	r2, [r7, #11]
 80089da:	4611      	mov	r1, r2
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	4798      	blx	r3
 80089e0:	e001      	b.n	80089e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089e2:	2302      	movs	r3, #2
 80089e4:	e000      	b.n	80089e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089f8:	2340      	movs	r3, #64	; 0x40
 80089fa:	2200      	movs	r2, #0
 80089fc:	2100      	movs	r1, #0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f003 f8c3 	bl	800bb8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2240      	movs	r2, #64	; 0x40
 8008a10:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a14:	2340      	movs	r3, #64	; 0x40
 8008a16:	2200      	movs	r2, #0
 8008a18:	2180      	movs	r1, #128	; 0x80
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f003 f8b5 	bl	800bb8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2240      	movs	r2, #64	; 0x40
 8008a2a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6852      	ldr	r2, [r2, #4]
 8008a60:	b2d2      	uxtb	r2, r2
 8008a62:	4611      	mov	r1, r2
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4798      	blx	r3
  }

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	78fa      	ldrb	r2, [r7, #3]
 8008a82:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d10b      	bne.n	8008b08 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6852      	ldr	r2, [r2, #4]
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d004      	beq.n	8008bb0 <USBD_StdDevReq+0x24>
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d002      	beq.n	8008bb0 <USBD_StdDevReq+0x24>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d008      	beq.n	8008bc0 <USBD_StdDevReq+0x34>
 8008bae:	e04c      	b.n	8008c4a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4798      	blx	r3
    break;
 8008bbe:	e049      	b.n	8008c54 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	2b09      	cmp	r3, #9
 8008bc6:	d83a      	bhi.n	8008c3e <USBD_StdDevReq+0xb2>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <USBD_StdDevReq+0x44>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008c21 	.word	0x08008c21
 8008bd4:	08008c35 	.word	0x08008c35
 8008bd8:	08008c3f 	.word	0x08008c3f
 8008bdc:	08008c2b 	.word	0x08008c2b
 8008be0:	08008c3f 	.word	0x08008c3f
 8008be4:	08008c03 	.word	0x08008c03
 8008be8:	08008bf9 	.word	0x08008bf9
 8008bec:	08008c3f 	.word	0x08008c3f
 8008bf0:	08008c17 	.word	0x08008c17
 8008bf4:	08008c0d 	.word	0x08008c0d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f9d2 	bl	8008fa4 <USBD_GetDescriptor>
      break;
 8008c00:	e022      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fac7 	bl	8009198 <USBD_SetAddress>
      break;
 8008c0a:	e01d      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb04 	bl	800921c <USBD_SetConfig>
      break;
 8008c14:	e018      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fb8d 	bl	8009338 <USBD_GetConfig>
      break;
 8008c1e:	e013      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fbbc 	bl	80093a0 <USBD_GetStatus>
      break;
 8008c28:	e00e      	b.n	8008c48 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fbea 	bl	8009406 <USBD_SetFeature>
      break;
 8008c32:	e009      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fbf9 	bl	800942e <USBD_ClrFeature>
      break;
 8008c3c:	e004      	b.n	8008c48 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fc52 	bl	80094ea <USBD_CtlError>
      break;
 8008c46:	bf00      	nop
    }
    break;
 8008c48:	e004      	b.n	8008c54 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc4c 	bl	80094ea <USBD_CtlError>
    break;
 8008c52:	bf00      	nop
  }

  return ret;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop

08008c60 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d003      	beq.n	8008c82 <USBD_StdItfReq+0x22>
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	d001      	beq.n	8008c82 <USBD_StdItfReq+0x22>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d12a      	bne.n	8008cd8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d81d      	bhi.n	8008cca <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	889b      	ldrh	r3, [r3, #4]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d813      	bhi.n	8008cc0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	88db      	ldrh	r3, [r3, #6]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d110      	bne.n	8008cd4 <USBD_StdItfReq+0x74>
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10d      	bne.n	8008cd4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fcdf 	bl	800967c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008cbe:	e009      	b.n	8008cd4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fc11 	bl	80094ea <USBD_CtlError>
      break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fc0c 	bl	80094ea <USBD_CtlError>
      break;
 8008cd2:	e000      	b.n	8008cd6 <USBD_StdItfReq+0x76>
      break;
 8008cd4:	bf00      	nop
    }
    break;
 8008cd6:	e004      	b.n	8008ce2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fc05 	bl	80094ea <USBD_CtlError>
    break;
 8008ce0:	bf00      	nop
  }

  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	889b      	ldrh	r3, [r3, #4]
 8008cfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d004      	beq.n	8008d16 <USBD_StdEPReq+0x2a>
 8008d0c:	2b40      	cmp	r3, #64	; 0x40
 8008d0e:	d002      	beq.n	8008d16 <USBD_StdEPReq+0x2a>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <USBD_StdEPReq+0x3a>
 8008d14:	e13b      	b.n	8008f8e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4798      	blx	r3
    break;
 8008d24:	e138      	b.n	8008f98 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d10a      	bne.n	8008d48 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	e128      	b.n	8008f9a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d03e      	beq.n	8008dce <USBD_StdEPReq+0xe2>
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d002      	beq.n	8008d5a <USBD_StdEPReq+0x6e>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d070      	beq.n	8008e3a <USBD_StdEPReq+0x14e>
 8008d58:	e113      	b.n	8008f82 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d002      	beq.n	8008d6a <USBD_StdEPReq+0x7e>
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d015      	beq.n	8008d94 <USBD_StdEPReq+0xa8>
 8008d68:	e02b      	b.n	8008dc2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00c      	beq.n	8008d8a <USBD_StdEPReq+0x9e>
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b80      	cmp	r3, #128	; 0x80
 8008d74:	d009      	beq.n	8008d8a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f002 ff4a 	bl	800bc14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008d80:	2180      	movs	r1, #128	; 0x80
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f002 ff46 	bl	800bc14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008d88:	e020      	b.n	8008dcc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fbac 	bl	80094ea <USBD_CtlError>
        break;
 8008d92:	e01b      	b.n	8008dcc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	885b      	ldrh	r3, [r3, #2]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10e      	bne.n	8008dba <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <USBD_StdEPReq+0xce>
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b80      	cmp	r3, #128	; 0x80
 8008da6:	d008      	beq.n	8008dba <USBD_StdEPReq+0xce>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	88db      	ldrh	r3, [r3, #6]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f002 ff2d 	bl	800bc14 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fc5e 	bl	800967c <USBD_CtlSendStatus>

        break;
 8008dc0:	e004      	b.n	8008dcc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fb90 	bl	80094ea <USBD_CtlError>
        break;
 8008dca:	bf00      	nop
      }
      break;
 8008dcc:	e0de      	b.n	8008f8c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d002      	beq.n	8008dde <USBD_StdEPReq+0xf2>
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d015      	beq.n	8008e08 <USBD_StdEPReq+0x11c>
 8008ddc:	e026      	b.n	8008e2c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00c      	beq.n	8008dfe <USBD_StdEPReq+0x112>
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	2b80      	cmp	r3, #128	; 0x80
 8008de8:	d009      	beq.n	8008dfe <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f002 ff10 	bl	800bc14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008df4:	2180      	movs	r1, #128	; 0x80
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f002 ff0c 	bl	800bc14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008dfc:	e01c      	b.n	8008e38 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fb72 	bl	80094ea <USBD_CtlError>
        break;
 8008e06:	e017      	b.n	8008e38 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	885b      	ldrh	r3, [r3, #2]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d112      	bne.n	8008e36 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d004      	beq.n	8008e24 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f002 ff17 	bl	800bc52 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fc29 	bl	800967c <USBD_CtlSendStatus>
        }
        break;
 8008e2a:	e004      	b.n	8008e36 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fb5b 	bl	80094ea <USBD_CtlError>
        break;
 8008e34:	e000      	b.n	8008e38 <USBD_StdEPReq+0x14c>
        break;
 8008e36:	bf00      	nop
      }
      break;
 8008e38:	e0a8      	b.n	8008f8c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d002      	beq.n	8008e4a <USBD_StdEPReq+0x15e>
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d031      	beq.n	8008eac <USBD_StdEPReq+0x1c0>
 8008e48:	e095      	b.n	8008f76 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d007      	beq.n	8008e60 <USBD_StdEPReq+0x174>
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	2b80      	cmp	r3, #128	; 0x80
 8008e54:	d004      	beq.n	8008e60 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fb46 	bl	80094ea <USBD_CtlError>
          break;
 8008e5e:	e08f      	b.n	8008f80 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	da0b      	bge.n	8008e80 <USBD_StdEPReq+0x194>
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e6e:	4613      	mov	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	3310      	adds	r3, #16
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	e00a      	b.n	8008e96 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	4413      	add	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fb8b 	bl	80095c0 <USBD_CtlSendData>
          break;
 8008eaa:	e069      	b.n	8008f80 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da11      	bge.n	8008ed8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 020f 	and.w	r2, r3, #15
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	3318      	adds	r3, #24
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d117      	bne.n	8008efe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fb0a 	bl	80094ea <USBD_CtlError>
            break;
 8008ed6:	e053      	b.n	8008f80 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	f003 020f 	and.w	r2, r3, #15
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	440b      	add	r3, r1
 8008eea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d104      	bne.n	8008efe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 faf7 	bl	80094ea <USBD_CtlError>
            break;
 8008efc:	e040      	b.n	8008f80 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008efe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da0b      	bge.n	8008f1e <USBD_StdEPReq+0x232>
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	3310      	adds	r3, #16
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	4413      	add	r3, r2
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	e00a      	b.n	8008f34 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	4413      	add	r3, r2
 8008f34:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <USBD_StdEPReq+0x256>
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	2b80      	cmp	r3, #128	; 0x80
 8008f40:	d103      	bne.n	8008f4a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	e00e      	b.n	8008f68 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f002 fe9e 	bl	800bc90 <USBD_LL_IsStallEP>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e002      	b.n	8008f68 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fb26 	bl	80095c0 <USBD_CtlSendData>
          break;
 8008f74:	e004      	b.n	8008f80 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fab6 	bl	80094ea <USBD_CtlError>
        break;
 8008f7e:	bf00      	nop
      }
      break;
 8008f80:	e004      	b.n	8008f8c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fab0 	bl	80094ea <USBD_CtlError>
      break;
 8008f8a:	bf00      	nop
    }
    break;
 8008f8c:	e004      	b.n	8008f98 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 faaa 	bl	80094ea <USBD_CtlError>
    break;
 8008f96:	bf00      	nop
  }

  return ret;
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	885b      	ldrh	r3, [r3, #2]
 8008fb2:	0a1b      	lsrs	r3, r3, #8
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b06      	cmp	r3, #6
 8008fba:	f200 80c9 	bhi.w	8009150 <USBD_GetDescriptor+0x1ac>
 8008fbe:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <USBD_GetDescriptor+0x20>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08008fe1 	.word	0x08008fe1
 8008fc8:	08008ff9 	.word	0x08008ff9
 8008fcc:	08009039 	.word	0x08009039
 8008fd0:	08009151 	.word	0x08009151
 8008fd4:	08009151 	.word	0x08009151
 8008fd8:	080090fd 	.word	0x080090fd
 8008fdc:	08009123 	.word	0x08009123
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	f107 010a 	add.w	r1, r7, #10
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
 8008ff4:	60f8      	str	r0, [r7, #12]
    break;
 8008ff6:	e0b0      	b.n	800915a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	7c1b      	ldrb	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10d      	bne.n	800901c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	f107 020a 	add.w	r2, r7, #10
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
 8009010:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	2202      	movs	r2, #2
 8009018:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800901a:	e09e      	b.n	800915a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	f107 020a 	add.w	r2, r7, #10
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3301      	adds	r3, #1
 8009032:	2202      	movs	r2, #2
 8009034:	701a      	strb	r2, [r3, #0]
    break;
 8009036:	e090      	b.n	800915a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	885b      	ldrh	r3, [r3, #2]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b05      	cmp	r3, #5
 8009040:	d856      	bhi.n	80090f0 <USBD_GetDescriptor+0x14c>
 8009042:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <USBD_GetDescriptor+0xa4>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	08009061 	.word	0x08009061
 800904c:	08009079 	.word	0x08009079
 8009050:	08009091 	.word	0x08009091
 8009054:	080090a9 	.word	0x080090a9
 8009058:	080090c1 	.word	0x080090c1
 800905c:	080090d9 	.word	0x080090d9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	7c12      	ldrb	r2, [r2, #16]
 800906c:	f107 010a 	add.w	r1, r7, #10
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	60f8      	str	r0, [r7, #12]
      break;
 8009076:	e040      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	7c12      	ldrb	r2, [r2, #16]
 8009084:	f107 010a 	add.w	r1, r7, #10
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	60f8      	str	r0, [r7, #12]
      break;
 800908e:	e034      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 010a 	add.w	r1, r7, #10
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
      break;
 80090a6:	e028      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 010a 	add.w	r1, r7, #10
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
      break;
 80090be:	e01c      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	7c12      	ldrb	r2, [r2, #16]
 80090cc:	f107 010a 	add.w	r1, r7, #10
 80090d0:	4610      	mov	r0, r2
 80090d2:	4798      	blx	r3
 80090d4:	60f8      	str	r0, [r7, #12]
      break;
 80090d6:	e010      	b.n	80090fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	7c12      	ldrb	r2, [r2, #16]
 80090e4:	f107 010a 	add.w	r1, r7, #10
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	60f8      	str	r0, [r7, #12]
      break;
 80090ee:	e004      	b.n	80090fa <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9f9 	bl	80094ea <USBD_CtlError>
      return;
 80090f8:	e04b      	b.n	8009192 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80090fa:	e02e      	b.n	800915a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7c1b      	ldrb	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910c:	f107 020a 	add.w	r2, r7, #10
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
 8009114:	60f8      	str	r0, [r7, #12]
      break;
 8009116:	e020      	b.n	800915a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9e5 	bl	80094ea <USBD_CtlError>
      return;
 8009120:	e037      	b.n	8009192 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7c1b      	ldrb	r3, [r3, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10d      	bne.n	8009146 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	f107 020a 	add.w	r2, r7, #10
 8009136:	4610      	mov	r0, r2
 8009138:	4798      	blx	r3
 800913a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	2207      	movs	r2, #7
 8009142:	701a      	strb	r2, [r3, #0]
      break;
 8009144:	e009      	b.n	800915a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9ce 	bl	80094ea <USBD_CtlError>
      return;
 800914e:	e020      	b.n	8009192 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f9c9 	bl	80094ea <USBD_CtlError>
    return;
 8009158:	e01b      	b.n	8009192 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800915a:	897b      	ldrh	r3, [r7, #10]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d011      	beq.n	8009184 <USBD_GetDescriptor+0x1e0>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	88db      	ldrh	r3, [r3, #6]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00d      	beq.n	8009184 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	88da      	ldrh	r2, [r3, #6]
 800916c:	897b      	ldrh	r3, [r7, #10]
 800916e:	4293      	cmp	r3, r2
 8009170:	bf28      	it	cs
 8009172:	4613      	movcs	r3, r2
 8009174:	b29b      	uxth	r3, r3
 8009176:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009178:	897b      	ldrh	r3, [r7, #10]
 800917a:	461a      	mov	r2, r3
 800917c:	68f9      	ldr	r1, [r7, #12]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa1e 	bl	80095c0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	88db      	ldrh	r3, [r3, #6]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fa75 	bl	800967c <USBD_CtlSendStatus>
  }
}
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	889b      	ldrh	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d130      	bne.n	800920c <USBD_SetAddress+0x74>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88db      	ldrh	r3, [r3, #6]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d12c      	bne.n	800920c <USBD_SetAddress+0x74>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	2b7f      	cmp	r3, #127	; 0x7f
 80091b8:	d828      	bhi.n	800920c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d104      	bne.n	80091da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f989 	bl	80094ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d8:	e01c      	b.n	8009214 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	7bfa      	ldrb	r2, [r7, #15]
 80091de:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f002 fd7e 	bl	800bce8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fa45 	bl	800967c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009200:	e008      	b.n	8009214 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920a:	e003      	b.n	8009214 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f96b 	bl	80094ea <USBD_CtlError>
  }
}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	885b      	ldrh	r3, [r3, #2]
 800922a:	b2da      	uxtb	r2, r3
 800922c:	4b41      	ldr	r3, [pc, #260]	; (8009334 <USBD_SetConfig+0x118>)
 800922e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009230:	4b40      	ldr	r3, [pc, #256]	; (8009334 <USBD_SetConfig+0x118>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d904      	bls.n	8009242 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f955 	bl	80094ea <USBD_CtlError>
 8009240:	e075      	b.n	800932e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009248:	2b02      	cmp	r3, #2
 800924a:	d002      	beq.n	8009252 <USBD_SetConfig+0x36>
 800924c:	2b03      	cmp	r3, #3
 800924e:	d023      	beq.n	8009298 <USBD_SetConfig+0x7c>
 8009250:	e062      	b.n	8009318 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009252:	4b38      	ldr	r3, [pc, #224]	; (8009334 <USBD_SetConfig+0x118>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01a      	beq.n	8009290 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800925a:	4b36      	ldr	r3, [pc, #216]	; (8009334 <USBD_SetConfig+0x118>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2203      	movs	r2, #3
 8009268:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800926c:	4b31      	ldr	r3, [pc, #196]	; (8009334 <USBD_SetConfig+0x118>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff fa29 	bl	80086ca <USBD_SetClassConfig>
 8009278:	4603      	mov	r3, r0
 800927a:	2b02      	cmp	r3, #2
 800927c:	d104      	bne.n	8009288 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f932 	bl	80094ea <USBD_CtlError>
          return;
 8009286:	e052      	b.n	800932e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f9f7 	bl	800967c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800928e:	e04e      	b.n	800932e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f9f3 	bl	800967c <USBD_CtlSendStatus>
      break;
 8009296:	e04a      	b.n	800932e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009298:	4b26      	ldr	r3, [pc, #152]	; (8009334 <USBD_SetConfig+0x118>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d112      	bne.n	80092c6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80092a8:	4b22      	ldr	r3, [pc, #136]	; (8009334 <USBD_SetConfig+0x118>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80092b2:	4b20      	ldr	r3, [pc, #128]	; (8009334 <USBD_SetConfig+0x118>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff fa25 	bl	8008708 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f9dc 	bl	800967c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80092c4:	e033      	b.n	800932e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80092c6:	4b1b      	ldr	r3, [pc, #108]	; (8009334 <USBD_SetConfig+0x118>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d01d      	beq.n	8009310 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff fa13 	bl	8008708 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092e2:	4b14      	ldr	r3, [pc, #80]	; (8009334 <USBD_SetConfig+0x118>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092ec:	4b11      	ldr	r3, [pc, #68]	; (8009334 <USBD_SetConfig+0x118>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff f9e9 	bl	80086ca <USBD_SetClassConfig>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d104      	bne.n	8009308 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f8f2 	bl	80094ea <USBD_CtlError>
          return;
 8009306:	e012      	b.n	800932e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f9b7 	bl	800967c <USBD_CtlSendStatus>
      break;
 800930e:	e00e      	b.n	800932e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f9b3 	bl	800967c <USBD_CtlSendStatus>
      break;
 8009316:	e00a      	b.n	800932e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f8e5 	bl	80094ea <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009320:	4b04      	ldr	r3, [pc, #16]	; (8009334 <USBD_SetConfig+0x118>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff f9ee 	bl	8008708 <USBD_ClrClassConfig>
      break;
 800932c:	bf00      	nop
    }
  }
}
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	20000458 	.word	0x20000458

08009338 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	88db      	ldrh	r3, [r3, #6]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d004      	beq.n	8009354 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f8cc 	bl	80094ea <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009352:	e021      	b.n	8009398 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800935a:	2b01      	cmp	r3, #1
 800935c:	db17      	blt.n	800938e <USBD_GetConfig+0x56>
 800935e:	2b02      	cmp	r3, #2
 8009360:	dd02      	ble.n	8009368 <USBD_GetConfig+0x30>
 8009362:	2b03      	cmp	r3, #3
 8009364:	d00b      	beq.n	800937e <USBD_GetConfig+0x46>
 8009366:	e012      	b.n	800938e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3308      	adds	r3, #8
 8009372:	2201      	movs	r2, #1
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f922 	bl	80095c0 <USBD_CtlSendData>
      break;
 800937c:	e00c      	b.n	8009398 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3304      	adds	r3, #4
 8009382:	2201      	movs	r2, #1
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f91a 	bl	80095c0 <USBD_CtlSendData>
      break;
 800938c:	e004      	b.n	8009398 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f8aa 	bl	80094ea <USBD_CtlError>
      break;
 8009396:	bf00      	nop
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093b0:	3b01      	subs	r3, #1
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d81e      	bhi.n	80093f4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	88db      	ldrh	r3, [r3, #6]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d004      	beq.n	80093c8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f892 	bl	80094ea <USBD_CtlError>
      break;
 80093c6:	e01a      	b.n	80093fe <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f043 0202 	orr.w	r2, r3, #2
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	330c      	adds	r3, #12
 80093e8:	2202      	movs	r2, #2
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f8e7 	bl	80095c0 <USBD_CtlSendData>
    break;
 80093f2:	e004      	b.n	80093fe <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f877 	bl	80094ea <USBD_CtlError>
    break;
 80093fc:	bf00      	nop
  }
}
 80093fe:	bf00      	nop
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	885b      	ldrh	r3, [r3, #2]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d106      	bne.n	8009426 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f92b 	bl	800967c <USBD_CtlSendStatus>
  }

}
 8009426:	bf00      	nop
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800943e:	3b01      	subs	r3, #1
 8009440:	2b02      	cmp	r3, #2
 8009442:	d80b      	bhi.n	800945c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	885b      	ldrh	r3, [r3, #2]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d10c      	bne.n	8009466 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f911 	bl	800967c <USBD_CtlSendStatus>
    }
    break;
 800945a:	e004      	b.n	8009466 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f843 	bl	80094ea <USBD_CtlError>
    break;
 8009464:	e000      	b.n	8009468 <USBD_ClrFeature+0x3a>
    break;
 8009466:	bf00      	nop
  }
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	785a      	ldrb	r2, [r3, #1]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	3302      	adds	r3, #2
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	b29a      	uxth	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	3303      	adds	r3, #3
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	b29b      	uxth	r3, r3
 800949a:	021b      	lsls	r3, r3, #8
 800949c:	b29b      	uxth	r3, r3
 800949e:	4413      	add	r3, r2
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	3304      	adds	r3, #4
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	3305      	adds	r3, #5
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	4413      	add	r3, r2
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	3306      	adds	r3, #6
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	3307      	adds	r3, #7
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4413      	add	r3, r2
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	80da      	strh	r2, [r3, #6]

}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b082      	sub	sp, #8
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80094f4:	2180      	movs	r1, #128	; 0x80
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f002 fb8c 	bl	800bc14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80094fc:	2100      	movs	r1, #0
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f002 fb88 	bl	800bc14 <USBD_LL_StallEP>
}
 8009504:	bf00      	nop
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d032      	beq.n	8009588 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 f834 	bl	8009590 <USBD_GetLen>
 8009528:	4603      	mov	r3, r0
 800952a:	3301      	adds	r3, #1
 800952c:	b29b      	uxth	r3, r3
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	b29a      	uxth	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	75fa      	strb	r2, [r7, #23]
 800953c:	461a      	mov	r2, r3
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	4413      	add	r3, r2
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	7812      	ldrb	r2, [r2, #0]
 8009546:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	75fa      	strb	r2, [r7, #23]
 800954e:	461a      	mov	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	4413      	add	r3, r2
 8009554:	2203      	movs	r2, #3
 8009556:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009558:	e012      	b.n	8009580 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	60fa      	str	r2, [r7, #12]
 8009560:	7dfa      	ldrb	r2, [r7, #23]
 8009562:	1c51      	adds	r1, r2, #1
 8009564:	75f9      	strb	r1, [r7, #23]
 8009566:	4611      	mov	r1, r2
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	440a      	add	r2, r1
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	75fa      	strb	r2, [r7, #23]
 8009576:	461a      	mov	r2, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	4413      	add	r3, r2
 800957c:	2200      	movs	r2, #0
 800957e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e8      	bne.n	800955a <USBD_GetString+0x4e>
    }
  }
}
 8009588:	bf00      	nop
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800959c:	e005      	b.n	80095aa <USBD_GetLen+0x1a>
    {
        len++;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	3301      	adds	r3, #1
 80095a2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3301      	adds	r3, #1
 80095a8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f5      	bne.n	800959e <USBD_GetLen+0xe>
    }

    return len;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2202      	movs	r2, #2
 80095d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80095d6:	88fa      	ldrh	r2, [r7, #6]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80095dc:	88fa      	ldrh	r2, [r7, #6]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80095e2:	88fb      	ldrh	r3, [r7, #6]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	2100      	movs	r1, #0
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f002 fb9c 	bl	800bd26 <USBD_LL_Transmit>

  return USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	2100      	movs	r1, #0
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f002 fb8a 	bl	800bd26 <USBD_LL_Transmit>

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	4613      	mov	r3, r2
 8009628:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2203      	movs	r2, #3
 800962e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009632:	88fa      	ldrh	r2, [r7, #6]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800963a:	88fa      	ldrh	r2, [r7, #6]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	2100      	movs	r1, #0
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f002 fb8f 	bl	800bd6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	2100      	movs	r1, #0
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f002 fb7d 	bl	800bd6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2204      	movs	r2, #4
 8009688:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800968c:	2300      	movs	r3, #0
 800968e:	2200      	movs	r2, #0
 8009690:	2100      	movs	r1, #0
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f002 fb47 	bl	800bd26 <USBD_LL_Transmit>

  return USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2205      	movs	r2, #5
 80096ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80096b2:	2300      	movs	r3, #0
 80096b4:	2200      	movs	r2, #0
 80096b6:	2100      	movs	r1, #0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f002 fb57 	bl	800bd6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80096d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096da:	2b84      	cmp	r3, #132	; 0x84
 80096dc:	d005      	beq.n	80096ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80096de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	3303      	adds	r3, #3
 80096e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80096ea:	68fb      	ldr	r3, [r7, #12]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096fe:	f3ef 8305 	mrs	r3, IPSR
 8009702:	607b      	str	r3, [r7, #4]
  return(result);
 8009704:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009706:	2b00      	cmp	r3, #0
 8009708:	bf14      	ite	ne
 800970a:	2301      	movne	r3, #1
 800970c:	2300      	moveq	r3, #0
 800970e:	b2db      	uxtb	r3, r3
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009720:	f000 fd70 	bl	800a204 <vTaskStartScheduler>
  
  return osOK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	bd80      	pop	{r7, pc}

0800972a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800972e:	f7ff ffe3 	bl	80096f8 <inHandlerMode>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009738:	f000 fe7c 	bl	800a434 <xTaskGetTickCountFromISR>
 800973c:	4603      	mov	r3, r0
 800973e:	e002      	b.n	8009746 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009740:	f000 fe68 	bl	800a414 <xTaskGetTickCount>
 8009744:	4603      	mov	r3, r0
  }
}
 8009746:	4618      	mov	r0, r3
 8009748:	bd80      	pop	{r7, pc}

0800974a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800974a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974c:	b089      	sub	sp, #36	; 0x24
 800974e:	af04      	add	r7, sp, #16
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d020      	beq.n	800979e <osThreadCreate+0x54>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01c      	beq.n	800979e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685c      	ldr	r4, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681d      	ldr	r5, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691e      	ldr	r6, [r3, #16]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff ffa6 	bl	80096c8 <makeFreeRtosPriority>
 800977c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009786:	9202      	str	r2, [sp, #8]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	9100      	str	r1, [sp, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	4632      	mov	r2, r6
 8009790:	4629      	mov	r1, r5
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fb7b 	bl	8009e8e <xTaskCreateStatic>
 8009798:	4603      	mov	r3, r0
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	e01c      	b.n	80097d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685c      	ldr	r4, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097aa:	b29e      	uxth	r6, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff ff88 	bl	80096c8 <makeFreeRtosPriority>
 80097b8:	4602      	mov	r2, r0
 80097ba:	f107 030c 	add.w	r3, r7, #12
 80097be:	9301      	str	r3, [sp, #4]
 80097c0:	9200      	str	r2, [sp, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	4632      	mov	r2, r6
 80097c6:	4629      	mov	r1, r5
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 fbb9 	bl	8009f40 <xTaskCreate>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d001      	beq.n	80097d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	e000      	b.n	80097da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80097d8:	68fb      	ldr	r3, [r7, #12]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <osDelay+0x16>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	e000      	b.n	80097fa <osDelay+0x18>
 80097f8:	2301      	movs	r3, #1
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fcce 	bl	800a19c <vTaskDelay>
  
  return osOK;
 8009800:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009818:	2300      	movs	r3, #0
 800981a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800981c:	f7ff ff6c 	bl	80096f8 <inHandlerMode>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d016      	beq.n	8009854 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009826:	f107 0308 	add.w	r3, r7, #8
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f9d1 	bl	8009bd4 <xQueueGiveFromISR>
 8009832:	4603      	mov	r3, r0
 8009834:	2b01      	cmp	r3, #1
 8009836:	d001      	beq.n	800983c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009838:	23ff      	movs	r3, #255	; 0xff
 800983a:	e017      	b.n	800986c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d013      	beq.n	800986a <osSemaphoreRelease+0x5e>
 8009842:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <osSemaphoreRelease+0x68>)
 8009844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	e00a      	b.n	800986a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009854:	2300      	movs	r3, #0
 8009856:	2200      	movs	r2, #0
 8009858:	2100      	movs	r1, #0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f8c0 	bl	80099e0 <xQueueGenericSend>
 8009860:	4603      	mov	r3, r0
 8009862:	2b01      	cmp	r3, #1
 8009864:	d001      	beq.n	800986a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009866:	23ff      	movs	r3, #255	; 0xff
 8009868:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800986a:	68fb      	ldr	r3, [r7, #12]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000ed04 	.word	0xe000ed04

08009878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f103 0208 	add.w	r2, r3, #8
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f103 0208 	add.w	r2, r3, #8
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f103 0208 	add.w	r2, r3, #8
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	601a      	str	r2, [r3, #0]
}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800991a:	b480      	push	{r7}
 800991c:	b085      	sub	sp, #20
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009930:	d103      	bne.n	800993a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e00c      	b.n	8009954 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3308      	adds	r3, #8
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e002      	b.n	8009948 <vListInsert+0x2e>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	429a      	cmp	r2, r3
 8009952:	d2f6      	bcs.n	8009942 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	601a      	str	r2, [r3, #0]
}
 8009980:	bf00      	nop
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	6892      	ldr	r2, [r2, #8]
 80099a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6852      	ldr	r2, [r2, #4]
 80099ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d103      	bne.n	80099c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	1e5a      	subs	r2, r3, #1
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08e      	sub	sp, #56	; 0x38
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099ee:	2300      	movs	r3, #0
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d109      	bne.n	8009a10 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a0e:	e7fe      	b.n	8009a0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d103      	bne.n	8009a1e <xQueueGenericSend+0x3e>
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <xQueueGenericSend+0x42>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <xQueueGenericSend+0x44>
 8009a22:	2300      	movs	r3, #0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d109      	bne.n	8009a3c <xQueueGenericSend+0x5c>
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
 8009a3a:	e7fe      	b.n	8009a3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d103      	bne.n	8009a4a <xQueueGenericSend+0x6a>
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <xQueueGenericSend+0x6e>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <xQueueGenericSend+0x70>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d109      	bne.n	8009a68 <xQueueGenericSend+0x88>
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	623b      	str	r3, [r7, #32]
 8009a66:	e7fe      	b.n	8009a66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a68:	f000 ffec 	bl	800aa44 <xTaskGetSchedulerState>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <xQueueGenericSend+0x98>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <xQueueGenericSend+0x9c>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e000      	b.n	8009a7e <xQueueGenericSend+0x9e>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <xQueueGenericSend+0xb6>
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	e7fe      	b.n	8009a94 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a96:	f001 fa01 	bl	800ae9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d302      	bcc.n	8009aac <xQueueGenericSend+0xcc>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d129      	bne.n	8009b00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ab2:	f000 f918 	bl	8009ce6 <prvCopyDataToQueue>
 8009ab6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d010      	beq.n	8009ae2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	3324      	adds	r3, #36	; 0x24
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fe01 	bl	800a6cc <xTaskRemoveFromEventList>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d013      	beq.n	8009af8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ad0:	4b3f      	ldr	r3, [pc, #252]	; (8009bd0 <xQueueGenericSend+0x1f0>)
 8009ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	e00a      	b.n	8009af8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d007      	beq.n	8009af8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ae8:	4b39      	ldr	r3, [pc, #228]	; (8009bd0 <xQueueGenericSend+0x1f0>)
 8009aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009af8:	f001 f9fe 	bl	800aef8 <vPortExitCritical>
				return pdPASS;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e063      	b.n	8009bc8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d103      	bne.n	8009b0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b06:	f001 f9f7 	bl	800aef8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e05c      	b.n	8009bc8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d106      	bne.n	8009b22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b14:	f107 0314 	add.w	r3, r7, #20
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fe39 	bl	800a790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b22:	f001 f9e9 	bl	800aef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b26:	f000 fbcb 	bl	800a2c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b2a:	f001 f9b7 	bl	800ae9c <vPortEnterCritical>
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b34:	b25b      	sxtb	r3, r3
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b3a:	d103      	bne.n	8009b44 <xQueueGenericSend+0x164>
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b4a:	b25b      	sxtb	r3, r3
 8009b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b50:	d103      	bne.n	8009b5a <xQueueGenericSend+0x17a>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b5a:	f001 f9cd 	bl	800aef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b5e:	1d3a      	adds	r2, r7, #4
 8009b60:	f107 0314 	add.w	r3, r7, #20
 8009b64:	4611      	mov	r1, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fe28 	bl	800a7bc <xTaskCheckForTimeOut>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d124      	bne.n	8009bbc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b74:	f000 f973 	bl	8009e5e <prvIsQueueFull>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d018      	beq.n	8009bb0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	3310      	adds	r3, #16
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	4611      	mov	r1, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fd7c 	bl	800a684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b8e:	f000 f914 	bl	8009dba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b92:	f000 fba3 	bl	800a2dc <xTaskResumeAll>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f47f af7c 	bne.w	8009a96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <xQueueGenericSend+0x1f0>)
 8009ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	e772      	b.n	8009a96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bb2:	f000 f902 	bl	8009dba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bb6:	f000 fb91 	bl	800a2dc <xTaskResumeAll>
 8009bba:	e76c      	b.n	8009a96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bbe:	f000 f8fc 	bl	8009dba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bc2:	f000 fb8b 	bl	800a2dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bc6:	2300      	movs	r3, #0
		}
	}
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3738      	adds	r7, #56	; 0x38
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08e      	sub	sp, #56	; 0x38
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d109      	bne.n	8009bfc <xQueueGiveFromISR+0x28>
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	623b      	str	r3, [r7, #32]
 8009bfa:	e7fe      	b.n	8009bfa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d009      	beq.n	8009c18 <xQueueGiveFromISR+0x44>
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	61fb      	str	r3, [r7, #28]
 8009c16:	e7fe      	b.n	8009c16 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <xQueueGiveFromISR+0x54>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <xQueueGiveFromISR+0x58>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e000      	b.n	8009c2e <xQueueGiveFromISR+0x5a>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d109      	bne.n	8009c46 <xQueueGiveFromISR+0x72>
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	e7fe      	b.n	8009c44 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c46:	f001 fa05 	bl	800b054 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	617a      	str	r2, [r7, #20]
 8009c60:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d22b      	bcs.n	8009cce <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c90:	d112      	bne.n	8009cb8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d016      	beq.n	8009cc8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	3324      	adds	r3, #36	; 0x24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fd14 	bl	800a6cc <xTaskRemoveFromEventList>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00e      	beq.n	8009cc8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00b      	beq.n	8009cc8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	e007      	b.n	8009cc8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	b25a      	sxtb	r2, r3
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	637b      	str	r3, [r7, #52]	; 0x34
 8009ccc:	e001      	b.n	8009cd2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3738      	adds	r7, #56	; 0x38
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b086      	sub	sp, #24
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10d      	bne.n	8009d20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d14d      	bne.n	8009da8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 feb5 	bl	800aa80 <xTaskPriorityDisinherit>
 8009d16:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	605a      	str	r2, [r3, #4]
 8009d1e:	e043      	b.n	8009da8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d119      	bne.n	8009d5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6898      	ldr	r0, [r3, #8]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68b9      	ldr	r1, [r7, #8]
 8009d32:	f002 f8b1 	bl	800be98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	441a      	add	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689a      	ldr	r2, [r3, #8]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d32b      	bcc.n	8009da8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	609a      	str	r2, [r3, #8]
 8009d58:	e026      	b.n	8009da8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68d8      	ldr	r0, [r3, #12]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	461a      	mov	r2, r3
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	f002 f897 	bl	800be98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	425b      	negs	r3, r3
 8009d74:	441a      	add	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d207      	bcs.n	8009d96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	685a      	ldr	r2, [r3, #4]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	425b      	negs	r3, r3
 8009d90:	441a      	add	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d105      	bne.n	8009da8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009db0:	697b      	ldr	r3, [r7, #20]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dc2:	f001 f86b 	bl	800ae9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dcc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dce:	e011      	b.n	8009df4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d012      	beq.n	8009dfe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3324      	adds	r3, #36	; 0x24
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 fc75 	bl	800a6cc <xTaskRemoveFromEventList>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009de8:	f000 fd48 	bl	800a87c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	dce9      	bgt.n	8009dd0 <prvUnlockQueue+0x16>
 8009dfc:	e000      	b.n	8009e00 <prvUnlockQueue+0x46>
					break;
 8009dfe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	22ff      	movs	r2, #255	; 0xff
 8009e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e08:	f001 f876 	bl	800aef8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e0c:	f001 f846 	bl	800ae9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e18:	e011      	b.n	8009e3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d012      	beq.n	8009e48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3310      	adds	r3, #16
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 fc50 	bl	800a6cc <xTaskRemoveFromEventList>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e32:	f000 fd23 	bl	800a87c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	dce9      	bgt.n	8009e1a <prvUnlockQueue+0x60>
 8009e46:	e000      	b.n	8009e4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	22ff      	movs	r2, #255	; 0xff
 8009e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e52:	f001 f851 	bl	800aef8 <vPortExitCritical>
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e66:	f001 f819 	bl	800ae9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d102      	bne.n	8009e7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e76:	2301      	movs	r3, #1
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e001      	b.n	8009e80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e80:	f001 f83a 	bl	800aef8 <vPortExitCritical>

	return xReturn;
 8009e84:	68fb      	ldr	r3, [r7, #12]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b08e      	sub	sp, #56	; 0x38
 8009e92:	af04      	add	r7, sp, #16
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <xTaskCreateStatic+0x28>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	623b      	str	r3, [r7, #32]
 8009eb4:	e7fe      	b.n	8009eb4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d109      	bne.n	8009ed0 <xTaskCreateStatic+0x42>
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	61fb      	str	r3, [r7, #28]
 8009ece:	e7fe      	b.n	8009ece <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ed0:	2354      	movs	r3, #84	; 0x54
 8009ed2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b54      	cmp	r3, #84	; 0x54
 8009ed8:	d009      	beq.n	8009eee <xTaskCreateStatic+0x60>
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	61bb      	str	r3, [r7, #24]
 8009eec:	e7fe      	b.n	8009eec <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01e      	beq.n	8009f32 <xTaskCreateStatic+0xa4>
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01b      	beq.n	8009f32 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9303      	str	r3, [sp, #12]
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	f107 0314 	add.w	r3, r7, #20
 8009f18:	9301      	str	r3, [sp, #4]
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f850 	bl	8009fca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f2c:	f000 f8cc 	bl	800a0c8 <prvAddNewTaskToReadyList>
 8009f30:	e001      	b.n	8009f36 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f36:	697b      	ldr	r3, [r7, #20]
	}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3728      	adds	r7, #40	; 0x28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08c      	sub	sp, #48	; 0x30
 8009f44:	af04      	add	r7, sp, #16
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f50:	88fb      	ldrh	r3, [r7, #6]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 f8bb 	bl	800b0d0 <pvPortMalloc>
 8009f5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00e      	beq.n	8009f80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009f62:	2054      	movs	r0, #84	; 0x54
 8009f64:	f001 f8b4 	bl	800b0d0 <pvPortMalloc>
 8009f68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	631a      	str	r2, [r3, #48]	; 0x30
 8009f76:	e005      	b.n	8009f84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f78:	6978      	ldr	r0, [r7, #20]
 8009f7a:	f001 f96b 	bl	800b254 <vPortFree>
 8009f7e:	e001      	b.n	8009f84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f80:	2300      	movs	r3, #0
 8009f82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d017      	beq.n	8009fba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f92:	88fa      	ldrh	r2, [r7, #6]
 8009f94:	2300      	movs	r3, #0
 8009f96:	9303      	str	r3, [sp, #12]
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 f80e 	bl	8009fca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fae:	69f8      	ldr	r0, [r7, #28]
 8009fb0:	f000 f88a 	bl	800a0c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	e002      	b.n	8009fc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
	}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3720      	adds	r7, #32
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b088      	sub	sp, #32
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	607a      	str	r2, [r7, #4]
 8009fd6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f003 0307 	and.w	r3, r3, #7
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d009      	beq.n	800a010 <prvInitialiseNewTask+0x46>
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	e7fe      	b.n	800a00e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a010:	2300      	movs	r3, #0
 800a012:	61fb      	str	r3, [r7, #28]
 800a014:	e012      	b.n	800a03c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	7819      	ldrb	r1, [r3, #0]
 800a01e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	4413      	add	r3, r2
 800a024:	3334      	adds	r3, #52	; 0x34
 800a026:	460a      	mov	r2, r1
 800a028:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	4413      	add	r3, r2
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d006      	beq.n	800a044 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	3301      	adds	r3, #1
 800a03a:	61fb      	str	r3, [r7, #28]
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	2b0f      	cmp	r3, #15
 800a040:	d9e9      	bls.n	800a016 <prvInitialiseNewTask+0x4c>
 800a042:	e000      	b.n	800a046 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a044:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	2b06      	cmp	r3, #6
 800a052:	d901      	bls.n	800a058 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a054:	2306      	movs	r3, #6
 800a056:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a05c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a062:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	2200      	movs	r2, #0
 800a068:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	3304      	adds	r3, #4
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff fc22 	bl	80098b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	3318      	adds	r3, #24
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff fc1d 	bl	80098b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	f1c3 0207 	rsb	r2, r3, #7
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	2200      	movs	r2, #0
 800a098:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	68f9      	ldr	r1, [r7, #12]
 800a0a6:	69b8      	ldr	r0, [r7, #24]
 800a0a8:	f000 fdd4 	bl	800ac54 <pxPortInitialiseStack>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0be:	bf00      	nop
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0d0:	f000 fee4 	bl	800ae9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0d4:	4b2a      	ldr	r3, [pc, #168]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	4a29      	ldr	r2, [pc, #164]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0de:	4b29      	ldr	r3, [pc, #164]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0e6:	4a27      	ldr	r2, [pc, #156]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0ec:	4b24      	ldr	r3, [pc, #144]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d110      	bne.n	800a116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0f4:	f000 fbe6 	bl	800a8c4 <prvInitialiseTaskLists>
 800a0f8:	e00d      	b.n	800a116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <prvAddNewTaskToReadyList+0xc0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a102:	4b20      	ldr	r3, [pc, #128]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d802      	bhi.n	800a116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a110:	4a1c      	ldr	r2, [pc, #112]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a116:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <prvAddNewTaskToReadyList+0xc4>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3301      	adds	r3, #1
 800a11c:	4a1b      	ldr	r2, [pc, #108]	; (800a18c <prvAddNewTaskToReadyList+0xc4>)
 800a11e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	2201      	movs	r2, #1
 800a126:	409a      	lsls	r2, r3
 800a128:	4b19      	ldr	r3, [pc, #100]	; (800a190 <prvAddNewTaskToReadyList+0xc8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	4a18      	ldr	r2, [pc, #96]	; (800a190 <prvAddNewTaskToReadyList+0xc8>)
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4a15      	ldr	r2, [pc, #84]	; (800a194 <prvAddNewTaskToReadyList+0xcc>)
 800a140:	441a      	add	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3304      	adds	r3, #4
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7ff fbc2 	bl	80098d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a14e:	f000 fed3 	bl	800aef8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a152:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <prvAddNewTaskToReadyList+0xc0>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00e      	beq.n	800a178 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a15a:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	429a      	cmp	r2, r3
 800a166:	d207      	bcs.n	800a178 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a168:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <prvAddNewTaskToReadyList+0xd0>)
 800a16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	2000055c 	.word	0x2000055c
 800a184:	2000045c 	.word	0x2000045c
 800a188:	20000568 	.word	0x20000568
 800a18c:	20000578 	.word	0x20000578
 800a190:	20000564 	.word	0x20000564
 800a194:	20000460 	.word	0x20000460
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d016      	beq.n	800a1dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ae:	4b13      	ldr	r3, [pc, #76]	; (800a1fc <vTaskDelay+0x60>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d009      	beq.n	800a1ca <vTaskDelay+0x2e>
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	60bb      	str	r3, [r7, #8]
 800a1c8:	e7fe      	b.n	800a1c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a1ca:	f000 f879 	bl	800a2c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fcd9 	bl	800ab88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1d6:	f000 f881 	bl	800a2dc <xTaskResumeAll>
 800a1da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d107      	bne.n	800a1f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a1e2:	4b07      	ldr	r3, [pc, #28]	; (800a200 <vTaskDelay+0x64>)
 800a1e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1f2:	bf00      	nop
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000584 	.word	0x20000584
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	; 0x28
 800a208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a212:	463a      	mov	r2, r7
 800a214:	1d39      	adds	r1, r7, #4
 800a216:	f107 0308 	add.w	r3, r7, #8
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f6 fc94 	bl	8000b48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	9202      	str	r2, [sp, #8]
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	2300      	movs	r3, #0
 800a230:	460a      	mov	r2, r1
 800a232:	491d      	ldr	r1, [pc, #116]	; (800a2a8 <vTaskStartScheduler+0xa4>)
 800a234:	481d      	ldr	r0, [pc, #116]	; (800a2ac <vTaskStartScheduler+0xa8>)
 800a236:	f7ff fe2a 	bl	8009e8e <xTaskCreateStatic>
 800a23a:	4602      	mov	r2, r0
 800a23c:	4b1c      	ldr	r3, [pc, #112]	; (800a2b0 <vTaskStartScheduler+0xac>)
 800a23e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a240:	4b1b      	ldr	r3, [pc, #108]	; (800a2b0 <vTaskStartScheduler+0xac>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a248:	2301      	movs	r3, #1
 800a24a:	617b      	str	r3, [r7, #20]
 800a24c:	e001      	b.n	800a252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d115      	bne.n	800a284 <vTaskStartScheduler+0x80>
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a26a:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <vTaskStartScheduler+0xb0>)
 800a26c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a270:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a272:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <vTaskStartScheduler+0xb4>)
 800a274:	2201      	movs	r2, #1
 800a276:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a278:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <vTaskStartScheduler+0xb8>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a27e:	f000 fd6f 	bl	800ad60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a282:	e00d      	b.n	800a2a0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28a:	d109      	bne.n	800a2a0 <vTaskStartScheduler+0x9c>
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	e7fe      	b.n	800a29e <vTaskStartScheduler+0x9a>
}
 800a2a0:	bf00      	nop
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	0800c818 	.word	0x0800c818
 800a2ac:	0800a895 	.word	0x0800a895
 800a2b0:	20000580 	.word	0x20000580
 800a2b4:	2000057c 	.word	0x2000057c
 800a2b8:	20000568 	.word	0x20000568
 800a2bc:	20000560 	.word	0x20000560

0800a2c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <vTaskSuspendAll+0x18>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	4a03      	ldr	r2, [pc, #12]	; (800a2d8 <vTaskSuspendAll+0x18>)
 800a2cc:	6013      	str	r3, [r2, #0]
}
 800a2ce:	bf00      	nop
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	20000584 	.word	0x20000584

0800a2dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2ea:	4b41      	ldr	r3, [pc, #260]	; (800a3f0 <xTaskResumeAll+0x114>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d109      	bne.n	800a306 <xTaskResumeAll+0x2a>
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	e7fe      	b.n	800a304 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a306:	f000 fdc9 	bl	800ae9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a30a:	4b39      	ldr	r3, [pc, #228]	; (800a3f0 <xTaskResumeAll+0x114>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3b01      	subs	r3, #1
 800a310:	4a37      	ldr	r2, [pc, #220]	; (800a3f0 <xTaskResumeAll+0x114>)
 800a312:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a314:	4b36      	ldr	r3, [pc, #216]	; (800a3f0 <xTaskResumeAll+0x114>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d161      	bne.n	800a3e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a31c:	4b35      	ldr	r3, [pc, #212]	; (800a3f4 <xTaskResumeAll+0x118>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d05d      	beq.n	800a3e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a324:	e02e      	b.n	800a384 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a326:	4b34      	ldr	r3, [pc, #208]	; (800a3f8 <xTaskResumeAll+0x11c>)
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3318      	adds	r3, #24
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff fb2a 	bl	800998c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fb25 	bl	800998c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a346:	2201      	movs	r2, #1
 800a348:	409a      	lsls	r2, r3
 800a34a:	4b2c      	ldr	r3, [pc, #176]	; (800a3fc <xTaskResumeAll+0x120>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4313      	orrs	r3, r2
 800a350:	4a2a      	ldr	r2, [pc, #168]	; (800a3fc <xTaskResumeAll+0x120>)
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4a27      	ldr	r2, [pc, #156]	; (800a400 <xTaskResumeAll+0x124>)
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7ff fab1 	bl	80098d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	4b23      	ldr	r3, [pc, #140]	; (800a404 <xTaskResumeAll+0x128>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d302      	bcc.n	800a384 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a37e:	4b22      	ldr	r3, [pc, #136]	; (800a408 <xTaskResumeAll+0x12c>)
 800a380:	2201      	movs	r2, #1
 800a382:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a384:	4b1c      	ldr	r3, [pc, #112]	; (800a3f8 <xTaskResumeAll+0x11c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1cc      	bne.n	800a326 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a392:	f000 fb31 	bl	800a9f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a396:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <xTaskResumeAll+0x130>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d010      	beq.n	800a3c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f000 f859 	bl	800a458 <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a3ac:	4b16      	ldr	r3, [pc, #88]	; (800a408 <xTaskResumeAll+0x12c>)
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1f1      	bne.n	800a3a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a3be:	4b13      	ldr	r3, [pc, #76]	; (800a40c <xTaskResumeAll+0x130>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3c4:	4b10      	ldr	r3, [pc, #64]	; (800a408 <xTaskResumeAll+0x12c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3d0:	4b0f      	ldr	r3, [pc, #60]	; (800a410 <xTaskResumeAll+0x134>)
 800a3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3e0:	f000 fd8a 	bl	800aef8 <vPortExitCritical>

	return xAlreadyYielded;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000584 	.word	0x20000584
 800a3f4:	2000055c 	.word	0x2000055c
 800a3f8:	2000051c 	.word	0x2000051c
 800a3fc:	20000564 	.word	0x20000564
 800a400:	20000460 	.word	0x20000460
 800a404:	2000045c 	.word	0x2000045c
 800a408:	20000570 	.word	0x20000570
 800a40c:	2000056c 	.word	0x2000056c
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <xTaskGetTickCount+0x1c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a420:	687b      	ldr	r3, [r7, #4]
}
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	20000560 	.word	0x20000560

0800a434 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a43a:	f000 fe0b 	bl	800b054 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a43e:	2300      	movs	r3, #0
 800a440:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a442:	4b04      	ldr	r3, [pc, #16]	; (800a454 <xTaskGetTickCountFromISR+0x20>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a448:	683b      	ldr	r3, [r7, #0]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000560 	.word	0x20000560

0800a458 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a45e:	2300      	movs	r3, #0
 800a460:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a462:	4b50      	ldr	r3, [pc, #320]	; (800a5a4 <xTaskIncrementTick+0x14c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f040 808c 	bne.w	800a584 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a46c:	4b4e      	ldr	r3, [pc, #312]	; (800a5a8 <xTaskIncrementTick+0x150>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a474:	4a4c      	ldr	r2, [pc, #304]	; (800a5a8 <xTaskIncrementTick+0x150>)
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d11f      	bne.n	800a4c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a480:	4b4a      	ldr	r3, [pc, #296]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d009      	beq.n	800a49e <xTaskIncrementTick+0x46>
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	603b      	str	r3, [r7, #0]
 800a49c:	e7fe      	b.n	800a49c <xTaskIncrementTick+0x44>
 800a49e:	4b43      	ldr	r3, [pc, #268]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	4b42      	ldr	r3, [pc, #264]	; (800a5b0 <xTaskIncrementTick+0x158>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a40      	ldr	r2, [pc, #256]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	4a40      	ldr	r2, [pc, #256]	; (800a5b0 <xTaskIncrementTick+0x158>)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	4b40      	ldr	r3, [pc, #256]	; (800a5b4 <xTaskIncrementTick+0x15c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	4a3e      	ldr	r2, [pc, #248]	; (800a5b4 <xTaskIncrementTick+0x15c>)
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	f000 fa9c 	bl	800a9f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4c0:	4b3d      	ldr	r3, [pc, #244]	; (800a5b8 <xTaskIncrementTick+0x160>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d34d      	bcc.n	800a566 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ca:	4b38      	ldr	r3, [pc, #224]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <xTaskIncrementTick+0x80>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <xTaskIncrementTick+0x82>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4de:	4b36      	ldr	r3, [pc, #216]	; (800a5b8 <xTaskIncrementTick+0x160>)
 800a4e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4e4:	601a      	str	r2, [r3, #0]
					break;
 800a4e6:	e03e      	b.n	800a566 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4e8:	4b30      	ldr	r3, [pc, #192]	; (800a5ac <xTaskIncrementTick+0x154>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d203      	bcs.n	800a508 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a500:	4a2d      	ldr	r2, [pc, #180]	; (800a5b8 <xTaskIncrementTick+0x160>)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6013      	str	r3, [r2, #0]
						break;
 800a506:	e02e      	b.n	800a566 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fa3d 	bl	800998c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	2b00      	cmp	r3, #0
 800a518:	d004      	beq.n	800a524 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	3318      	adds	r3, #24
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff fa34 	bl	800998c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	2201      	movs	r2, #1
 800a52a:	409a      	lsls	r2, r3
 800a52c:	4b23      	ldr	r3, [pc, #140]	; (800a5bc <xTaskIncrementTick+0x164>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4313      	orrs	r3, r2
 800a532:	4a22      	ldr	r2, [pc, #136]	; (800a5bc <xTaskIncrementTick+0x164>)
 800a534:	6013      	str	r3, [r2, #0]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4a1f      	ldr	r2, [pc, #124]	; (800a5c0 <xTaskIncrementTick+0x168>)
 800a544:	441a      	add	r2, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	3304      	adds	r3, #4
 800a54a:	4619      	mov	r1, r3
 800a54c:	4610      	mov	r0, r2
 800a54e:	f7ff f9c0 	bl	80098d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a556:	4b1b      	ldr	r3, [pc, #108]	; (800a5c4 <xTaskIncrementTick+0x16c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d3b4      	bcc.n	800a4ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a560:	2301      	movs	r3, #1
 800a562:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a564:	e7b1      	b.n	800a4ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a566:	4b17      	ldr	r3, [pc, #92]	; (800a5c4 <xTaskIncrementTick+0x16c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56c:	4914      	ldr	r1, [pc, #80]	; (800a5c0 <xTaskIncrementTick+0x168>)
 800a56e:	4613      	mov	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	440b      	add	r3, r1
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d907      	bls.n	800a58e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a57e:	2301      	movs	r3, #1
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	e004      	b.n	800a58e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a584:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <xTaskIncrementTick+0x170>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3301      	adds	r3, #1
 800a58a:	4a0f      	ldr	r2, [pc, #60]	; (800a5c8 <xTaskIncrementTick+0x170>)
 800a58c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a58e:	4b0f      	ldr	r3, [pc, #60]	; (800a5cc <xTaskIncrementTick+0x174>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a596:	2301      	movs	r3, #1
 800a598:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a59a:	697b      	ldr	r3, [r7, #20]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000584 	.word	0x20000584
 800a5a8:	20000560 	.word	0x20000560
 800a5ac:	20000514 	.word	0x20000514
 800a5b0:	20000518 	.word	0x20000518
 800a5b4:	20000574 	.word	0x20000574
 800a5b8:	2000057c 	.word	0x2000057c
 800a5bc:	20000564 	.word	0x20000564
 800a5c0:	20000460 	.word	0x20000460
 800a5c4:	2000045c 	.word	0x2000045c
 800a5c8:	2000056c 	.word	0x2000056c
 800a5cc:	20000570 	.word	0x20000570

0800a5d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5d6:	4b26      	ldr	r3, [pc, #152]	; (800a670 <vTaskSwitchContext+0xa0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5de:	4b25      	ldr	r3, [pc, #148]	; (800a674 <vTaskSwitchContext+0xa4>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5e4:	e03e      	b.n	800a664 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a5e6:	4b23      	ldr	r3, [pc, #140]	; (800a674 <vTaskSwitchContext+0xa4>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a5ec:	4b22      	ldr	r3, [pc, #136]	; (800a678 <vTaskSwitchContext+0xa8>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	fab3 f383 	clz	r3, r3
 800a5f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	f1c3 031f 	rsb	r3, r3, #31
 800a600:	617b      	str	r3, [r7, #20]
 800a602:	491e      	ldr	r1, [pc, #120]	; (800a67c <vTaskSwitchContext+0xac>)
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	607b      	str	r3, [r7, #4]
 800a628:	e7fe      	b.n	800a628 <vTaskSwitchContext+0x58>
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4a11      	ldr	r2, [pc, #68]	; (800a67c <vTaskSwitchContext+0xac>)
 800a636:	4413      	add	r3, r2
 800a638:	613b      	str	r3, [r7, #16]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	605a      	str	r2, [r3, #4]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	3308      	adds	r3, #8
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d104      	bne.n	800a65a <vTaskSwitchContext+0x8a>
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	605a      	str	r2, [r3, #4]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	4a07      	ldr	r2, [pc, #28]	; (800a680 <vTaskSwitchContext+0xb0>)
 800a662:	6013      	str	r3, [r2, #0]
}
 800a664:	bf00      	nop
 800a666:	371c      	adds	r7, #28
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	20000584 	.word	0x20000584
 800a674:	20000570 	.word	0x20000570
 800a678:	20000564 	.word	0x20000564
 800a67c:	20000460 	.word	0x20000460
 800a680:	2000045c 	.word	0x2000045c

0800a684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d109      	bne.n	800a6a8 <vTaskPlaceOnEventList+0x24>
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	e7fe      	b.n	800a6a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6a8:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <vTaskPlaceOnEventList+0x44>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3318      	adds	r3, #24
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff f932 	bl	800991a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	6838      	ldr	r0, [r7, #0]
 800a6ba:	f000 fa65 	bl	800ab88 <prvAddCurrentTaskToDelayedList>
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	2000045c 	.word	0x2000045c

0800a6cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d109      	bne.n	800a6f6 <xTaskRemoveFromEventList+0x2a>
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	e7fe      	b.n	800a6f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	3318      	adds	r3, #24
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff f946 	bl	800998c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a700:	4b1d      	ldr	r3, [pc, #116]	; (800a778 <xTaskRemoveFromEventList+0xac>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d11c      	bne.n	800a742 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7ff f93d 	bl	800998c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	2201      	movs	r2, #1
 800a718:	409a      	lsls	r2, r3
 800a71a:	4b18      	ldr	r3, [pc, #96]	; (800a77c <xTaskRemoveFromEventList+0xb0>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4313      	orrs	r3, r2
 800a720:	4a16      	ldr	r2, [pc, #88]	; (800a77c <xTaskRemoveFromEventList+0xb0>)
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4a13      	ldr	r2, [pc, #76]	; (800a780 <xTaskRemoveFromEventList+0xb4>)
 800a732:	441a      	add	r2, r3
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	3304      	adds	r3, #4
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7ff f8c9 	bl	80098d2 <vListInsertEnd>
 800a740:	e005      	b.n	800a74e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	3318      	adds	r3, #24
 800a746:	4619      	mov	r1, r3
 800a748:	480e      	ldr	r0, [pc, #56]	; (800a784 <xTaskRemoveFromEventList+0xb8>)
 800a74a:	f7ff f8c2 	bl	80098d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a752:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <xTaskRemoveFromEventList+0xbc>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	429a      	cmp	r2, r3
 800a75a:	d905      	bls.n	800a768 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a75c:	2301      	movs	r3, #1
 800a75e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <xTaskRemoveFromEventList+0xc0>)
 800a762:	2201      	movs	r2, #1
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	e001      	b.n	800a76c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a76c:	697b      	ldr	r3, [r7, #20]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000584 	.word	0x20000584
 800a77c:	20000564 	.word	0x20000564
 800a780:	20000460 	.word	0x20000460
 800a784:	2000051c 	.word	0x2000051c
 800a788:	2000045c 	.word	0x2000045c
 800a78c:	20000570 	.word	0x20000570

0800a790 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a798:	4b06      	ldr	r3, [pc, #24]	; (800a7b4 <vTaskInternalSetTimeOutState+0x24>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <vTaskInternalSetTimeOutState+0x28>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	605a      	str	r2, [r3, #4]
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	20000574 	.word	0x20000574
 800a7b8:	20000560 	.word	0x20000560

0800a7bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d109      	bne.n	800a7e0 <xTaskCheckForTimeOut+0x24>
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	e7fe      	b.n	800a7de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d109      	bne.n	800a7fa <xTaskCheckForTimeOut+0x3e>
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e7fe      	b.n	800a7f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a7fa:	f000 fb4f 	bl	800ae9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7fe:	4b1d      	ldr	r3, [pc, #116]	; (800a874 <xTaskCheckForTimeOut+0xb8>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a816:	d102      	bne.n	800a81e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a818:	2300      	movs	r3, #0
 800a81a:	61fb      	str	r3, [r7, #28]
 800a81c:	e023      	b.n	800a866 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <xTaskCheckForTimeOut+0xbc>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d007      	beq.n	800a83a <xTaskCheckForTimeOut+0x7e>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	d302      	bcc.n	800a83a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	61fb      	str	r3, [r7, #28]
 800a838:	e015      	b.n	800a866 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	429a      	cmp	r2, r3
 800a842:	d20b      	bcs.n	800a85c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7ff ff9d 	bl	800a790 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a856:	2300      	movs	r3, #0
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	e004      	b.n	800a866 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a862:	2301      	movs	r3, #1
 800a864:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a866:	f000 fb47 	bl	800aef8 <vPortExitCritical>

	return xReturn;
 800a86a:	69fb      	ldr	r3, [r7, #28]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000560 	.word	0x20000560
 800a878:	20000574 	.word	0x20000574

0800a87c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a880:	4b03      	ldr	r3, [pc, #12]	; (800a890 <vTaskMissedYield+0x14>)
 800a882:	2201      	movs	r2, #1
 800a884:	601a      	str	r2, [r3, #0]
}
 800a886:	bf00      	nop
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	20000570 	.word	0x20000570

0800a894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a89c:	f000 f852 	bl	800a944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8a0:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <prvIdleTask+0x28>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d9f9      	bls.n	800a89c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8a8:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <prvIdleTask+0x2c>)
 800a8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8b8:	e7f0      	b.n	800a89c <prvIdleTask+0x8>
 800a8ba:	bf00      	nop
 800a8bc:	20000460 	.word	0x20000460
 800a8c0:	e000ed04 	.word	0xe000ed04

0800a8c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	607b      	str	r3, [r7, #4]
 800a8ce:	e00c      	b.n	800a8ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4a12      	ldr	r2, [pc, #72]	; (800a924 <prvInitialiseTaskLists+0x60>)
 800a8dc:	4413      	add	r3, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe ffca 	bl	8009878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	607b      	str	r3, [r7, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b06      	cmp	r3, #6
 800a8ee:	d9ef      	bls.n	800a8d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8f0:	480d      	ldr	r0, [pc, #52]	; (800a928 <prvInitialiseTaskLists+0x64>)
 800a8f2:	f7fe ffc1 	bl	8009878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8f6:	480d      	ldr	r0, [pc, #52]	; (800a92c <prvInitialiseTaskLists+0x68>)
 800a8f8:	f7fe ffbe 	bl	8009878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8fc:	480c      	ldr	r0, [pc, #48]	; (800a930 <prvInitialiseTaskLists+0x6c>)
 800a8fe:	f7fe ffbb 	bl	8009878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a902:	480c      	ldr	r0, [pc, #48]	; (800a934 <prvInitialiseTaskLists+0x70>)
 800a904:	f7fe ffb8 	bl	8009878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a908:	480b      	ldr	r0, [pc, #44]	; (800a938 <prvInitialiseTaskLists+0x74>)
 800a90a:	f7fe ffb5 	bl	8009878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a90e:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <prvInitialiseTaskLists+0x78>)
 800a910:	4a05      	ldr	r2, [pc, #20]	; (800a928 <prvInitialiseTaskLists+0x64>)
 800a912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a914:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <prvInitialiseTaskLists+0x7c>)
 800a916:	4a05      	ldr	r2, [pc, #20]	; (800a92c <prvInitialiseTaskLists+0x68>)
 800a918:	601a      	str	r2, [r3, #0]
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000460 	.word	0x20000460
 800a928:	200004ec 	.word	0x200004ec
 800a92c:	20000500 	.word	0x20000500
 800a930:	2000051c 	.word	0x2000051c
 800a934:	20000530 	.word	0x20000530
 800a938:	20000548 	.word	0x20000548
 800a93c:	20000514 	.word	0x20000514
 800a940:	20000518 	.word	0x20000518

0800a944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a94a:	e019      	b.n	800a980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a94c:	f000 faa6 	bl	800ae9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <prvCheckTasksWaitingTermination+0x4c>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3304      	adds	r3, #4
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff f815 	bl	800998c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <prvCheckTasksWaitingTermination+0x50>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	4a0a      	ldr	r2, [pc, #40]	; (800a994 <prvCheckTasksWaitingTermination+0x50>)
 800a96a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <prvCheckTasksWaitingTermination+0x54>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3b01      	subs	r3, #1
 800a972:	4a09      	ldr	r2, [pc, #36]	; (800a998 <prvCheckTasksWaitingTermination+0x54>)
 800a974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a976:	f000 fabf 	bl	800aef8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f80e 	bl	800a99c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a980:	4b05      	ldr	r3, [pc, #20]	; (800a998 <prvCheckTasksWaitingTermination+0x54>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e1      	bne.n	800a94c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a988:	bf00      	nop
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	20000530 	.word	0x20000530
 800a994:	2000055c 	.word	0x2000055c
 800a998:	20000544 	.word	0x20000544

0800a99c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d108      	bne.n	800a9c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fc4e 	bl	800b254 <vPortFree>
				vPortFree( pxTCB );
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc4b 	bl	800b254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9be:	e017      	b.n	800a9f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d103      	bne.n	800a9d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fc42 	bl	800b254 <vPortFree>
	}
 800a9d0:	e00e      	b.n	800a9f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d009      	beq.n	800a9f0 <prvDeleteTCB+0x54>
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	60fb      	str	r3, [r7, #12]
 800a9ee:	e7fe      	b.n	800a9ee <prvDeleteTCB+0x52>
	}
 800a9f0:	bf00      	nop
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9fe:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <prvResetNextTaskUnblockTime+0x44>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <prvResetNextTaskUnblockTime+0x14>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e000      	b.n	800aa0e <prvResetNextTaskUnblockTime+0x16>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa12:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <prvResetNextTaskUnblockTime+0x48>)
 800aa14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa1a:	e008      	b.n	800aa2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aa1c:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <prvResetNextTaskUnblockTime+0x44>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	4a05      	ldr	r2, [pc, #20]	; (800aa40 <prvResetNextTaskUnblockTime+0x48>)
 800aa2c:	6013      	str	r3, [r2, #0]
}
 800aa2e:	bf00      	nop
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	20000514 	.word	0x20000514
 800aa40:	2000057c 	.word	0x2000057c

0800aa44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <xTaskGetSchedulerState+0x34>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d102      	bne.n	800aa58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa52:	2301      	movs	r3, #1
 800aa54:	607b      	str	r3, [r7, #4]
 800aa56:	e008      	b.n	800aa6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa58:	4b08      	ldr	r3, [pc, #32]	; (800aa7c <xTaskGetSchedulerState+0x38>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa60:	2302      	movs	r3, #2
 800aa62:	607b      	str	r3, [r7, #4]
 800aa64:	e001      	b.n	800aa6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa66:	2300      	movs	r3, #0
 800aa68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa6a:	687b      	ldr	r3, [r7, #4]
	}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	20000568 	.word	0x20000568
 800aa7c:	20000584 	.word	0x20000584

0800aa80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d06c      	beq.n	800ab70 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa96:	4b39      	ldr	r3, [pc, #228]	; (800ab7c <xTaskPriorityDisinherit+0xfc>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d009      	beq.n	800aab4 <xTaskPriorityDisinherit+0x34>
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	e7fe      	b.n	800aab2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <xTaskPriorityDisinherit+0x50>
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	60bb      	str	r3, [r7, #8]
 800aace:	e7fe      	b.n	800aace <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad4:	1e5a      	subs	r2, r3, #1
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d044      	beq.n	800ab70 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d140      	bne.n	800ab70 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe ff4a 	bl	800998c <uxListRemove>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d115      	bne.n	800ab2a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab02:	491f      	ldr	r1, [pc, #124]	; (800ab80 <xTaskPriorityDisinherit+0x100>)
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	440b      	add	r3, r1
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10a      	bne.n	800ab2a <xTaskPriorityDisinherit+0xaa>
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	2201      	movs	r2, #1
 800ab1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1e:	43da      	mvns	r2, r3
 800ab20:	4b18      	ldr	r3, [pc, #96]	; (800ab84 <xTaskPriorityDisinherit+0x104>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4013      	ands	r3, r2
 800ab26:	4a17      	ldr	r2, [pc, #92]	; (800ab84 <xTaskPriorityDisinherit+0x104>)
 800ab28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab36:	f1c3 0207 	rsb	r2, r3, #7
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	2201      	movs	r2, #1
 800ab44:	409a      	lsls	r2, r3
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <xTaskPriorityDisinherit+0x104>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	4a0d      	ldr	r2, [pc, #52]	; (800ab84 <xTaskPriorityDisinherit+0x104>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4a08      	ldr	r2, [pc, #32]	; (800ab80 <xTaskPriorityDisinherit+0x100>)
 800ab5e:	441a      	add	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fe feb3 	bl	80098d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab70:	697b      	ldr	r3, [r7, #20]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2000045c 	.word	0x2000045c
 800ab80:	20000460 	.word	0x20000460
 800ab84:	20000564 	.word	0x20000564

0800ab88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab92:	4b29      	ldr	r3, [pc, #164]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab98:	4b28      	ldr	r3, [pc, #160]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fef4 	bl	800998c <uxListRemove>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10b      	bne.n	800abc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800abaa:	4b24      	ldr	r3, [pc, #144]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	2201      	movs	r2, #1
 800abb2:	fa02 f303 	lsl.w	r3, r2, r3
 800abb6:	43da      	mvns	r2, r3
 800abb8:	4b21      	ldr	r3, [pc, #132]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4013      	ands	r3, r2
 800abbe:	4a20      	ldr	r2, [pc, #128]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800abc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc8:	d10a      	bne.n	800abe0 <prvAddCurrentTaskToDelayedList+0x58>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d007      	beq.n	800abe0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abd0:	4b1a      	ldr	r3, [pc, #104]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3304      	adds	r3, #4
 800abd6:	4619      	mov	r1, r3
 800abd8:	481a      	ldr	r0, [pc, #104]	; (800ac44 <prvAddCurrentTaskToDelayedList+0xbc>)
 800abda:	f7fe fe7a 	bl	80098d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abde:	e026      	b.n	800ac2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abe8:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d209      	bcs.n	800ac0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abf8:	4b13      	ldr	r3, [pc, #76]	; (800ac48 <prvAddCurrentTaskToDelayedList+0xc0>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f7fe fe88 	bl	800991a <vListInsert>
}
 800ac0a:	e010      	b.n	800ac2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac0c:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4619      	mov	r1, r3
 800ac18:	4610      	mov	r0, r2
 800ac1a:	f7fe fe7e 	bl	800991a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac1e:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d202      	bcs.n	800ac2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ac28:	4a09      	ldr	r2, [pc, #36]	; (800ac50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6013      	str	r3, [r2, #0]
}
 800ac2e:	bf00      	nop
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20000560 	.word	0x20000560
 800ac3c:	2000045c 	.word	0x2000045c
 800ac40:	20000564 	.word	0x20000564
 800ac44:	20000548 	.word	0x20000548
 800ac48:	20000518 	.word	0x20000518
 800ac4c:	20000514 	.word	0x20000514
 800ac50:	2000057c 	.word	0x2000057c

0800ac54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3b04      	subs	r3, #4
 800ac64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3b04      	subs	r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f023 0201 	bic.w	r2, r3, #1
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac84:	4a0c      	ldr	r2, [pc, #48]	; (800acb8 <pxPortInitialiseStack+0x64>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3b14      	subs	r3, #20
 800ac8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3b04      	subs	r3, #4
 800ac9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f06f 0202 	mvn.w	r2, #2
 800aca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3b20      	subs	r3, #32
 800aca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acaa:	68fb      	ldr	r3, [r7, #12]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	0800acbd 	.word	0x0800acbd

0800acbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acc6:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <prvTaskExitError+0x50>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acce:	d009      	beq.n	800ace4 <prvTaskExitError+0x28>
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60fb      	str	r3, [r7, #12]
 800ace2:	e7fe      	b.n	800ace2 <prvTaskExitError+0x26>
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acf6:	bf00      	nop
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0fc      	beq.n	800acf8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acfe:	bf00      	nop
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	20000118 	.word	0x20000118

0800ad10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <pxCurrentTCBConst2>)
 800ad12:	6819      	ldr	r1, [r3, #0]
 800ad14:	6808      	ldr	r0, [r1, #0]
 800ad16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1a:	f380 8809 	msr	PSP, r0
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f04f 0000 	mov.w	r0, #0
 800ad26:	f380 8811 	msr	BASEPRI, r0
 800ad2a:	4770      	bx	lr
 800ad2c:	f3af 8000 	nop.w

0800ad30 <pxCurrentTCBConst2>:
 800ad30:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop

0800ad38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad38:	4808      	ldr	r0, [pc, #32]	; (800ad5c <prvPortStartFirstTask+0x24>)
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	6800      	ldr	r0, [r0, #0]
 800ad3e:	f380 8808 	msr	MSP, r0
 800ad42:	f04f 0000 	mov.w	r0, #0
 800ad46:	f380 8814 	msr	CONTROL, r0
 800ad4a:	b662      	cpsie	i
 800ad4c:	b661      	cpsie	f
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	df00      	svc	0
 800ad58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad5a:	bf00      	nop
 800ad5c:	e000ed08 	.word	0xe000ed08

0800ad60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad66:	4b44      	ldr	r3, [pc, #272]	; (800ae78 <xPortStartScheduler+0x118>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a44      	ldr	r2, [pc, #272]	; (800ae7c <xPortStartScheduler+0x11c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d109      	bne.n	800ad84 <xPortStartScheduler+0x24>
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	613b      	str	r3, [r7, #16]
 800ad82:	e7fe      	b.n	800ad82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad84:	4b3c      	ldr	r3, [pc, #240]	; (800ae78 <xPortStartScheduler+0x118>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a3d      	ldr	r2, [pc, #244]	; (800ae80 <xPortStartScheduler+0x120>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d109      	bne.n	800ada2 <xPortStartScheduler+0x42>
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e7fe      	b.n	800ada0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ada2:	4b38      	ldr	r3, [pc, #224]	; (800ae84 <xPortStartScheduler+0x124>)
 800ada4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	22ff      	movs	r2, #255	; 0xff
 800adb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	4b30      	ldr	r3, [pc, #192]	; (800ae88 <xPortStartScheduler+0x128>)
 800adc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adca:	4b30      	ldr	r3, [pc, #192]	; (800ae8c <xPortStartScheduler+0x12c>)
 800adcc:	2207      	movs	r2, #7
 800adce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800add0:	e009      	b.n	800ade6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800add2:	4b2e      	ldr	r3, [pc, #184]	; (800ae8c <xPortStartScheduler+0x12c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3b01      	subs	r3, #1
 800add8:	4a2c      	ldr	r2, [pc, #176]	; (800ae8c <xPortStartScheduler+0x12c>)
 800adda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adee:	2b80      	cmp	r3, #128	; 0x80
 800adf0:	d0ef      	beq.n	800add2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adf2:	4b26      	ldr	r3, [pc, #152]	; (800ae8c <xPortStartScheduler+0x12c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f1c3 0307 	rsb	r3, r3, #7
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d009      	beq.n	800ae12 <xPortStartScheduler+0xb2>
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	60bb      	str	r3, [r7, #8]
 800ae10:	e7fe      	b.n	800ae10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae12:	4b1e      	ldr	r3, [pc, #120]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	4a1c      	ldr	r2, [pc, #112]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ae1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae1c:	4b1b      	ldr	r3, [pc, #108]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae24:	4a19      	ldr	r2, [pc, #100]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ae26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae30:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <xPortStartScheduler+0x130>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a16      	ldr	r2, [pc, #88]	; (800ae90 <xPortStartScheduler+0x130>)
 800ae36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae3c:	4b14      	ldr	r3, [pc, #80]	; (800ae90 <xPortStartScheduler+0x130>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a13      	ldr	r2, [pc, #76]	; (800ae90 <xPortStartScheduler+0x130>)
 800ae42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae48:	f000 f8d6 	bl	800aff8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae4c:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <xPortStartScheduler+0x134>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae52:	f000 f8f5 	bl	800b040 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae56:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <xPortStartScheduler+0x138>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a0f      	ldr	r2, [pc, #60]	; (800ae98 <xPortStartScheduler+0x138>)
 800ae5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae62:	f7ff ff69 	bl	800ad38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae66:	f7ff fbb3 	bl	800a5d0 <vTaskSwitchContext>
	prvTaskExitError();
 800ae6a:	f7ff ff27 	bl	800acbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	e000ed00 	.word	0xe000ed00
 800ae7c:	410fc271 	.word	0x410fc271
 800ae80:	410fc270 	.word	0x410fc270
 800ae84:	e000e400 	.word	0xe000e400
 800ae88:	20000588 	.word	0x20000588
 800ae8c:	2000058c 	.word	0x2000058c
 800ae90:	e000ed20 	.word	0xe000ed20
 800ae94:	20000118 	.word	0x20000118
 800ae98:	e000ef34 	.word	0xe000ef34

0800ae9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeb4:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <vPortEnterCritical+0x54>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	4a0d      	ldr	r2, [pc, #52]	; (800aef0 <vPortEnterCritical+0x54>)
 800aebc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aebe:	4b0c      	ldr	r3, [pc, #48]	; (800aef0 <vPortEnterCritical+0x54>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d10e      	bne.n	800aee4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aec6:	4b0b      	ldr	r3, [pc, #44]	; (800aef4 <vPortEnterCritical+0x58>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d009      	beq.n	800aee4 <vPortEnterCritical+0x48>
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	e7fe      	b.n	800aee2 <vPortEnterCritical+0x46>
	}
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	20000118 	.word	0x20000118
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aefe:	4b11      	ldr	r3, [pc, #68]	; (800af44 <vPortExitCritical+0x4c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d109      	bne.n	800af1a <vPortExitCritical+0x22>
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	607b      	str	r3, [r7, #4]
 800af18:	e7fe      	b.n	800af18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800af1a:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <vPortExitCritical+0x4c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3b01      	subs	r3, #1
 800af20:	4a08      	ldr	r2, [pc, #32]	; (800af44 <vPortExitCritical+0x4c>)
 800af22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af24:	4b07      	ldr	r3, [pc, #28]	; (800af44 <vPortExitCritical+0x4c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <vPortExitCritical+0x3e>
 800af2c:	2300      	movs	r3, #0
 800af2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800af36:	bf00      	nop
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	20000118 	.word	0x20000118
	...

0800af50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af50:	f3ef 8009 	mrs	r0, PSP
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <pxCurrentTCBConst>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	f01e 0f10 	tst.w	lr, #16
 800af60:	bf08      	it	eq
 800af62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	6010      	str	r0, [r2, #0]
 800af6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af74:	f380 8811 	msr	BASEPRI, r0
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f7ff fb26 	bl	800a5d0 <vTaskSwitchContext>
 800af84:	f04f 0000 	mov.w	r0, #0
 800af88:	f380 8811 	msr	BASEPRI, r0
 800af8c:	bc09      	pop	{r0, r3}
 800af8e:	6819      	ldr	r1, [r3, #0]
 800af90:	6808      	ldr	r0, [r1, #0]
 800af92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af96:	f01e 0f10 	tst.w	lr, #16
 800af9a:	bf08      	it	eq
 800af9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afa0:	f380 8809 	msr	PSP, r0
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst>:
 800afb0:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afd0:	f7ff fa42 	bl	800a458 <xTaskIncrementTick>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afda:	4b06      	ldr	r3, [pc, #24]	; (800aff4 <SysTick_Handler+0x3c>)
 800afdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe0:	601a      	str	r2, [r3, #0]
 800afe2:	2300      	movs	r3, #0
 800afe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800afec:	bf00      	nop
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	e000ed04 	.word	0xe000ed04

0800aff8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800affc:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <vPortSetupTimerInterrupt+0x34>)
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b002:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <vPortSetupTimerInterrupt+0x38>)
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b008:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <vPortSetupTimerInterrupt+0x3c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a0a      	ldr	r2, [pc, #40]	; (800b038 <vPortSetupTimerInterrupt+0x40>)
 800b00e:	fba2 2303 	umull	r2, r3, r2, r3
 800b012:	099b      	lsrs	r3, r3, #6
 800b014:	4a09      	ldr	r2, [pc, #36]	; (800b03c <vPortSetupTimerInterrupt+0x44>)
 800b016:	3b01      	subs	r3, #1
 800b018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b01a:	4b04      	ldr	r3, [pc, #16]	; (800b02c <vPortSetupTimerInterrupt+0x34>)
 800b01c:	2207      	movs	r2, #7
 800b01e:	601a      	str	r2, [r3, #0]
}
 800b020:	bf00      	nop
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	e000e010 	.word	0xe000e010
 800b030:	e000e018 	.word	0xe000e018
 800b034:	20000000 	.word	0x20000000
 800b038:	10624dd3 	.word	0x10624dd3
 800b03c:	e000e014 	.word	0xe000e014

0800b040 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b040:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b050 <vPortEnableVFP+0x10>
 800b044:	6801      	ldr	r1, [r0, #0]
 800b046:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b04a:	6001      	str	r1, [r0, #0]
 800b04c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b04e:	bf00      	nop
 800b050:	e000ed88 	.word	0xe000ed88

0800b054 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b05a:	f3ef 8305 	mrs	r3, IPSR
 800b05e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b0f      	cmp	r3, #15
 800b064:	d913      	bls.n	800b08e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b066:	4a16      	ldr	r2, [pc, #88]	; (800b0c0 <vPortValidateInterruptPriority+0x6c>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4413      	add	r3, r2
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b070:	4b14      	ldr	r3, [pc, #80]	; (800b0c4 <vPortValidateInterruptPriority+0x70>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	7afa      	ldrb	r2, [r7, #11]
 800b076:	429a      	cmp	r2, r3
 800b078:	d209      	bcs.n	800b08e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	607b      	str	r3, [r7, #4]
 800b08c:	e7fe      	b.n	800b08c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b08e:	4b0e      	ldr	r3, [pc, #56]	; (800b0c8 <vPortValidateInterruptPriority+0x74>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b096:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <vPortValidateInterruptPriority+0x78>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d909      	bls.n	800b0b2 <vPortValidateInterruptPriority+0x5e>
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	e7fe      	b.n	800b0b0 <vPortValidateInterruptPriority+0x5c>
	}
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	e000e3f0 	.word	0xe000e3f0
 800b0c4:	20000588 	.word	0x20000588
 800b0c8:	e000ed0c 	.word	0xe000ed0c
 800b0cc:	2000058c 	.word	0x2000058c

0800b0d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	; 0x28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0dc:	f7ff f8f0 	bl	800a2c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0e0:	4b57      	ldr	r3, [pc, #348]	; (800b240 <pvPortMalloc+0x170>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0e8:	f000 f90c 	bl	800b304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0ec:	4b55      	ldr	r3, [pc, #340]	; (800b244 <pvPortMalloc+0x174>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f040 808c 	bne.w	800b212 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01c      	beq.n	800b13a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b100:	2208      	movs	r2, #8
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4413      	add	r3, r2
 800b106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f003 0307 	and.w	r3, r3, #7
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d013      	beq.n	800b13a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f023 0307 	bic.w	r3, r3, #7
 800b118:	3308      	adds	r3, #8
 800b11a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f003 0307 	and.w	r3, r3, #7
 800b122:	2b00      	cmp	r3, #0
 800b124:	d009      	beq.n	800b13a <pvPortMalloc+0x6a>
 800b126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e7fe      	b.n	800b138 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d068      	beq.n	800b212 <pvPortMalloc+0x142>
 800b140:	4b41      	ldr	r3, [pc, #260]	; (800b248 <pvPortMalloc+0x178>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	429a      	cmp	r2, r3
 800b148:	d863      	bhi.n	800b212 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b14a:	4b40      	ldr	r3, [pc, #256]	; (800b24c <pvPortMalloc+0x17c>)
 800b14c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b14e:	4b3f      	ldr	r3, [pc, #252]	; (800b24c <pvPortMalloc+0x17c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b154:	e004      	b.n	800b160 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d903      	bls.n	800b172 <pvPortMalloc+0xa2>
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1f1      	bne.n	800b156 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b172:	4b33      	ldr	r3, [pc, #204]	; (800b240 <pvPortMalloc+0x170>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b178:	429a      	cmp	r2, r3
 800b17a:	d04a      	beq.n	800b212 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b17c:	6a3b      	ldr	r3, [r7, #32]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2208      	movs	r2, #8
 800b182:	4413      	add	r3, r2
 800b184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	6a3b      	ldr	r3, [r7, #32]
 800b18c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	1ad2      	subs	r2, r2, r3
 800b196:	2308      	movs	r3, #8
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d91e      	bls.n	800b1dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	f003 0307 	and.w	r3, r3, #7
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d009      	beq.n	800b1c4 <pvPortMalloc+0xf4>
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	613b      	str	r3, [r7, #16]
 800b1c2:	e7fe      	b.n	800b1c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	1ad2      	subs	r2, r2, r3
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1d6:	69b8      	ldr	r0, [r7, #24]
 800b1d8:	f000 f8f6 	bl	800b3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1dc:	4b1a      	ldr	r3, [pc, #104]	; (800b248 <pvPortMalloc+0x178>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	4a18      	ldr	r2, [pc, #96]	; (800b248 <pvPortMalloc+0x178>)
 800b1e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1ea:	4b17      	ldr	r3, [pc, #92]	; (800b248 <pvPortMalloc+0x178>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4b18      	ldr	r3, [pc, #96]	; (800b250 <pvPortMalloc+0x180>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d203      	bcs.n	800b1fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1f6:	4b14      	ldr	r3, [pc, #80]	; (800b248 <pvPortMalloc+0x178>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a15      	ldr	r2, [pc, #84]	; (800b250 <pvPortMalloc+0x180>)
 800b1fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	4b10      	ldr	r3, [pc, #64]	; (800b244 <pvPortMalloc+0x174>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	431a      	orrs	r2, r3
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b212:	f7ff f863 	bl	800a2dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	f003 0307 	and.w	r3, r3, #7
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d009      	beq.n	800b234 <pvPortMalloc+0x164>
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	e7fe      	b.n	800b232 <pvPortMalloc+0x162>
	return pvReturn;
 800b234:	69fb      	ldr	r3, [r7, #28]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3728      	adds	r7, #40	; 0x28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20004198 	.word	0x20004198
 800b244:	200041a4 	.word	0x200041a4
 800b248:	2000419c 	.word	0x2000419c
 800b24c:	20004190 	.word	0x20004190
 800b250:	200041a0 	.word	0x200041a0

0800b254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d046      	beq.n	800b2f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b266:	2308      	movs	r3, #8
 800b268:	425b      	negs	r3, r3
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	4413      	add	r3, r2
 800b26e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	4b20      	ldr	r3, [pc, #128]	; (800b2fc <vPortFree+0xa8>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4013      	ands	r3, r2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <vPortFree+0x42>
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e7fe      	b.n	800b294 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d009      	beq.n	800b2b2 <vPortFree+0x5e>
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	60bb      	str	r3, [r7, #8]
 800b2b0:	e7fe      	b.n	800b2b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <vPortFree+0xa8>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d019      	beq.n	800b2f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d115      	bne.n	800b2f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <vPortFree+0xa8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	43db      	mvns	r3, r3
 800b2d2:	401a      	ands	r2, r3
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2d8:	f7fe fff2 	bl	800a2c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	4b07      	ldr	r3, [pc, #28]	; (800b300 <vPortFree+0xac>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	4a06      	ldr	r2, [pc, #24]	; (800b300 <vPortFree+0xac>)
 800b2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2ea:	6938      	ldr	r0, [r7, #16]
 800b2ec:	f000 f86c 	bl	800b3c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b2f0:	f7fe fff4 	bl	800a2dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2f4:	bf00      	nop
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	200041a4 	.word	0x200041a4
 800b300:	2000419c 	.word	0x2000419c

0800b304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b30a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b310:	4b27      	ldr	r3, [pc, #156]	; (800b3b0 <prvHeapInit+0xac>)
 800b312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00c      	beq.n	800b338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3307      	adds	r3, #7
 800b322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f023 0307 	bic.w	r3, r3, #7
 800b32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	4a1f      	ldr	r2, [pc, #124]	; (800b3b0 <prvHeapInit+0xac>)
 800b334:	4413      	add	r3, r2
 800b336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b33c:	4a1d      	ldr	r2, [pc, #116]	; (800b3b4 <prvHeapInit+0xb0>)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b342:	4b1c      	ldr	r3, [pc, #112]	; (800b3b4 <prvHeapInit+0xb0>)
 800b344:	2200      	movs	r2, #0
 800b346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	4413      	add	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b350:	2208      	movs	r2, #8
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	1a9b      	subs	r3, r3, r2
 800b356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f023 0307 	bic.w	r3, r3, #7
 800b35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4a15      	ldr	r2, [pc, #84]	; (800b3b8 <prvHeapInit+0xb4>)
 800b364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b366:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <prvHeapInit+0xb4>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2200      	movs	r2, #0
 800b36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b36e:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <prvHeapInit+0xb4>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2200      	movs	r2, #0
 800b374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b384:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <prvHeapInit+0xb4>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	4a0a      	ldr	r2, [pc, #40]	; (800b3bc <prvHeapInit+0xb8>)
 800b392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	4a09      	ldr	r2, [pc, #36]	; (800b3c0 <prvHeapInit+0xbc>)
 800b39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b39c:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <prvHeapInit+0xc0>)
 800b39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3a2:	601a      	str	r2, [r3, #0]
}
 800b3a4:	bf00      	nop
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr
 800b3b0:	20000590 	.word	0x20000590
 800b3b4:	20004190 	.word	0x20004190
 800b3b8:	20004198 	.word	0x20004198
 800b3bc:	200041a0 	.word	0x200041a0
 800b3c0:	2000419c 	.word	0x2000419c
 800b3c4:	200041a4 	.word	0x200041a4

0800b3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3d0:	4b28      	ldr	r3, [pc, #160]	; (800b474 <prvInsertBlockIntoFreeList+0xac>)
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	e002      	b.n	800b3dc <prvInsertBlockIntoFreeList+0x14>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d8f7      	bhi.n	800b3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d108      	bne.n	800b40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	441a      	add	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	441a      	add	r2, r3
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d118      	bne.n	800b450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	4b15      	ldr	r3, [pc, #84]	; (800b478 <prvInsertBlockIntoFreeList+0xb0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	429a      	cmp	r2, r3
 800b428:	d00d      	beq.n	800b446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	441a      	add	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	e008      	b.n	800b458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b446:	4b0c      	ldr	r3, [pc, #48]	; (800b478 <prvInsertBlockIntoFreeList+0xb0>)
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	601a      	str	r2, [r3, #0]
 800b44e:	e003      	b.n	800b458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d002      	beq.n	800b466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b466:	bf00      	nop
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20004190 	.word	0x20004190
 800b478:	20004198 	.word	0x20004198

0800b47c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b480:	2200      	movs	r2, #0
 800b482:	4912      	ldr	r1, [pc, #72]	; (800b4cc <MX_USB_DEVICE_Init+0x50>)
 800b484:	4812      	ldr	r0, [pc, #72]	; (800b4d0 <MX_USB_DEVICE_Init+0x54>)
 800b486:	f7fd f8c4 	bl	8008612 <USBD_Init>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b490:	f7f6 f96a 	bl	8001768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b494:	490f      	ldr	r1, [pc, #60]	; (800b4d4 <MX_USB_DEVICE_Init+0x58>)
 800b496:	480e      	ldr	r0, [pc, #56]	; (800b4d0 <MX_USB_DEVICE_Init+0x54>)
 800b498:	f7fd f8e6 	bl	8008668 <USBD_RegisterClass>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b4a2:	f7f6 f961 	bl	8001768 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b4a6:	490c      	ldr	r1, [pc, #48]	; (800b4d8 <MX_USB_DEVICE_Init+0x5c>)
 800b4a8:	4809      	ldr	r0, [pc, #36]	; (800b4d0 <MX_USB_DEVICE_Init+0x54>)
 800b4aa:	f7fd f843 	bl	8008534 <USBD_CDC_RegisterInterface>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b4b4:	f7f6 f958 	bl	8001768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b4b8:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <MX_USB_DEVICE_Init+0x54>)
 800b4ba:	f7fd f8ef 	bl	800869c <USBD_Start>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b4c4:	f7f6 f950 	bl	8001768 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b4c8:	bf00      	nop
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	2000012c 	.word	0x2000012c
 800b4d0:	20007424 	.word	0x20007424
 800b4d4:	20000014 	.word	0x20000014
 800b4d8:	2000011c 	.word	0x2000011c

0800b4dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4905      	ldr	r1, [pc, #20]	; (800b4f8 <CDC_Init_FS+0x1c>)
 800b4e4:	4805      	ldr	r0, [pc, #20]	; (800b4fc <CDC_Init_FS+0x20>)
 800b4e6:	f7fd f83c 	bl	8008562 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4ea:	4905      	ldr	r1, [pc, #20]	; (800b500 <CDC_Init_FS+0x24>)
 800b4ec:	4803      	ldr	r0, [pc, #12]	; (800b4fc <CDC_Init_FS+0x20>)
 800b4ee:	f7fd f852 	bl	8008596 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20007ec0 	.word	0x20007ec0
 800b4fc:	20007424 	.word	0x20007424
 800b500:	200076c0 	.word	0x200076c0

0800b504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	6039      	str	r1, [r7, #0]
 800b51e:	71fb      	strb	r3, [r7, #7]
 800b520:	4613      	mov	r3, r2
 800b522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	2b23      	cmp	r3, #35	; 0x23
 800b528:	d84a      	bhi.n	800b5c0 <CDC_Control_FS+0xac>
 800b52a:	a201      	add	r2, pc, #4	; (adr r2, 800b530 <CDC_Control_FS+0x1c>)
 800b52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b530:	0800b5c1 	.word	0x0800b5c1
 800b534:	0800b5c1 	.word	0x0800b5c1
 800b538:	0800b5c1 	.word	0x0800b5c1
 800b53c:	0800b5c1 	.word	0x0800b5c1
 800b540:	0800b5c1 	.word	0x0800b5c1
 800b544:	0800b5c1 	.word	0x0800b5c1
 800b548:	0800b5c1 	.word	0x0800b5c1
 800b54c:	0800b5c1 	.word	0x0800b5c1
 800b550:	0800b5c1 	.word	0x0800b5c1
 800b554:	0800b5c1 	.word	0x0800b5c1
 800b558:	0800b5c1 	.word	0x0800b5c1
 800b55c:	0800b5c1 	.word	0x0800b5c1
 800b560:	0800b5c1 	.word	0x0800b5c1
 800b564:	0800b5c1 	.word	0x0800b5c1
 800b568:	0800b5c1 	.word	0x0800b5c1
 800b56c:	0800b5c1 	.word	0x0800b5c1
 800b570:	0800b5c1 	.word	0x0800b5c1
 800b574:	0800b5c1 	.word	0x0800b5c1
 800b578:	0800b5c1 	.word	0x0800b5c1
 800b57c:	0800b5c1 	.word	0x0800b5c1
 800b580:	0800b5c1 	.word	0x0800b5c1
 800b584:	0800b5c1 	.word	0x0800b5c1
 800b588:	0800b5c1 	.word	0x0800b5c1
 800b58c:	0800b5c1 	.word	0x0800b5c1
 800b590:	0800b5c1 	.word	0x0800b5c1
 800b594:	0800b5c1 	.word	0x0800b5c1
 800b598:	0800b5c1 	.word	0x0800b5c1
 800b59c:	0800b5c1 	.word	0x0800b5c1
 800b5a0:	0800b5c1 	.word	0x0800b5c1
 800b5a4:	0800b5c1 	.word	0x0800b5c1
 800b5a8:	0800b5c1 	.word	0x0800b5c1
 800b5ac:	0800b5c1 	.word	0x0800b5c1
 800b5b0:	0800b5c1 	.word	0x0800b5c1
 800b5b4:	0800b5c1 	.word	0x0800b5c1
 800b5b8:	0800b5c1 	.word	0x0800b5c1
 800b5bc:	0800b5c1 	.word	0x0800b5c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5c0:	bf00      	nop
  }

  return (USBD_OK);
 800b5c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	4805      	ldr	r0, [pc, #20]	; (800b5f4 <CDC_Receive_FS+0x24>)
 800b5de:	f7fc ffda 	bl	8008596 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5e2:	4804      	ldr	r0, [pc, #16]	; (800b5f4 <CDC_Receive_FS+0x24>)
 800b5e4:	f7fc ffeb 	bl	80085be <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b5e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20007424 	.word	0x20007424

0800b5f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	6039      	str	r1, [r7, #0]
 800b602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2212      	movs	r2, #18
 800b608:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b60a:	4b03      	ldr	r3, [pc, #12]	; (800b618 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	20000148 	.word	0x20000148

0800b61c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	6039      	str	r1, [r7, #0]
 800b626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2204      	movs	r2, #4
 800b62c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b62e:	4b03      	ldr	r3, [pc, #12]	; (800b63c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	2000015c 	.word	0x2000015c

0800b640 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	6039      	str	r1, [r7, #0]
 800b64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d105      	bne.n	800b65e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	4907      	ldr	r1, [pc, #28]	; (800b674 <USBD_FS_ProductStrDescriptor+0x34>)
 800b656:	4808      	ldr	r0, [pc, #32]	; (800b678 <USBD_FS_ProductStrDescriptor+0x38>)
 800b658:	f7fd ff58 	bl	800950c <USBD_GetString>
 800b65c:	e004      	b.n	800b668 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	4904      	ldr	r1, [pc, #16]	; (800b674 <USBD_FS_ProductStrDescriptor+0x34>)
 800b662:	4805      	ldr	r0, [pc, #20]	; (800b678 <USBD_FS_ProductStrDescriptor+0x38>)
 800b664:	f7fd ff52 	bl	800950c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b668:	4b02      	ldr	r3, [pc, #8]	; (800b674 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	200086c0 	.word	0x200086c0
 800b678:	0800c820 	.word	0x0800c820

0800b67c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	6039      	str	r1, [r7, #0]
 800b686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	4904      	ldr	r1, [pc, #16]	; (800b69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b68c:	4804      	ldr	r0, [pc, #16]	; (800b6a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b68e:	f7fd ff3d 	bl	800950c <USBD_GetString>
  return USBD_StrDesc;
 800b692:	4b02      	ldr	r3, [pc, #8]	; (800b69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	200086c0 	.word	0x200086c0
 800b6a0:	0800c838 	.word	0x0800c838

0800b6a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	6039      	str	r1, [r7, #0]
 800b6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	221a      	movs	r2, #26
 800b6b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b6b6:	f000 f843 	bl	800b740 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b6ba:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	20000160 	.word	0x20000160

0800b6c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	6039      	str	r1, [r7, #0]
 800b6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d105      	bne.n	800b6e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	4907      	ldr	r1, [pc, #28]	; (800b6fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6de:	4808      	ldr	r0, [pc, #32]	; (800b700 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6e0:	f7fd ff14 	bl	800950c <USBD_GetString>
 800b6e4:	e004      	b.n	800b6f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	4904      	ldr	r1, [pc, #16]	; (800b6fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6ea:	4805      	ldr	r0, [pc, #20]	; (800b700 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6ec:	f7fd ff0e 	bl	800950c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6f0:	4b02      	ldr	r3, [pc, #8]	; (800b6fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	200086c0 	.word	0x200086c0
 800b700:	0800c84c 	.word	0x0800c84c

0800b704 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b710:	79fb      	ldrb	r3, [r7, #7]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d105      	bne.n	800b722 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	4907      	ldr	r1, [pc, #28]	; (800b738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b71a:	4808      	ldr	r0, [pc, #32]	; (800b73c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b71c:	f7fd fef6 	bl	800950c <USBD_GetString>
 800b720:	e004      	b.n	800b72c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	4904      	ldr	r1, [pc, #16]	; (800b738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b726:	4805      	ldr	r0, [pc, #20]	; (800b73c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b728:	f7fd fef0 	bl	800950c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	200086c0 	.word	0x200086c0
 800b73c:	0800c858 	.word	0x0800c858

0800b740 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b746:	4b0f      	ldr	r3, [pc, #60]	; (800b784 <Get_SerialNum+0x44>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b74c:	4b0e      	ldr	r3, [pc, #56]	; (800b788 <Get_SerialNum+0x48>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b752:	4b0e      	ldr	r3, [pc, #56]	; (800b78c <Get_SerialNum+0x4c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4413      	add	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d009      	beq.n	800b77a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b766:	2208      	movs	r2, #8
 800b768:	4909      	ldr	r1, [pc, #36]	; (800b790 <Get_SerialNum+0x50>)
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f000 f814 	bl	800b798 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b770:	2204      	movs	r2, #4
 800b772:	4908      	ldr	r1, [pc, #32]	; (800b794 <Get_SerialNum+0x54>)
 800b774:	68b8      	ldr	r0, [r7, #8]
 800b776:	f000 f80f 	bl	800b798 <IntToUnicode>
  }
}
 800b77a:	bf00      	nop
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	1fff7a10 	.word	0x1fff7a10
 800b788:	1fff7a14 	.word	0x1fff7a14
 800b78c:	1fff7a18 	.word	0x1fff7a18
 800b790:	20000162 	.word	0x20000162
 800b794:	20000172 	.word	0x20000172

0800b798 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	75fb      	strb	r3, [r7, #23]
 800b7ae:	e027      	b.n	800b800 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	0f1b      	lsrs	r3, r3, #28
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d80b      	bhi.n	800b7d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	0f1b      	lsrs	r3, r3, #28
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	440b      	add	r3, r1
 800b7c8:	3230      	adds	r2, #48	; 0x30
 800b7ca:	b2d2      	uxtb	r2, r2
 800b7cc:	701a      	strb	r2, [r3, #0]
 800b7ce:	e00a      	b.n	800b7e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	0f1b      	lsrs	r3, r3, #28
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	440b      	add	r3, r1
 800b7e0:	3237      	adds	r2, #55	; 0x37
 800b7e2:	b2d2      	uxtb	r2, r2
 800b7e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	75fb      	strb	r3, [r7, #23]
 800b800:	7dfa      	ldrb	r2, [r7, #23]
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	429a      	cmp	r2, r3
 800b806:	d3d3      	bcc.n	800b7b0 <IntToUnicode+0x18>
  }
}
 800b808:	bf00      	nop
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08a      	sub	sp, #40	; 0x28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	605a      	str	r2, [r3, #4]
 800b826:	609a      	str	r2, [r3, #8]
 800b828:	60da      	str	r2, [r3, #12]
 800b82a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b834:	d147      	bne.n	800b8c6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b836:	2300      	movs	r3, #0
 800b838:	613b      	str	r3, [r7, #16]
 800b83a:	4b25      	ldr	r3, [pc, #148]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83e:	4a24      	ldr	r2, [pc, #144]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b840:	f043 0301 	orr.w	r3, r3, #1
 800b844:	6313      	str	r3, [r2, #48]	; 0x30
 800b846:	4b22      	ldr	r3, [pc, #136]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	613b      	str	r3, [r7, #16]
 800b850:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b852:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800b856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b858:	2302      	movs	r3, #2
 800b85a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b85c:	2300      	movs	r3, #0
 800b85e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b860:	2303      	movs	r3, #3
 800b862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b864:	230a      	movs	r3, #10
 800b866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b868:	f107 0314 	add.w	r3, r7, #20
 800b86c:	4619      	mov	r1, r3
 800b86e:	4819      	ldr	r0, [pc, #100]	; (800b8d4 <HAL_PCD_MspInit+0xc0>)
 800b870:	f7f6 ff0e 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b874:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b87a:	2300      	movs	r3, #0
 800b87c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b882:	f107 0314 	add.w	r3, r7, #20
 800b886:	4619      	mov	r1, r3
 800b888:	4812      	ldr	r0, [pc, #72]	; (800b8d4 <HAL_PCD_MspInit+0xc0>)
 800b88a:	f7f6 ff01 	bl	8002690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b88e:	4b10      	ldr	r3, [pc, #64]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b892:	4a0f      	ldr	r2, [pc, #60]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b898:	6353      	str	r3, [r2, #52]	; 0x34
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	4b0c      	ldr	r3, [pc, #48]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a2:	4a0b      	ldr	r2, [pc, #44]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b8a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8a8:	6453      	str	r3, [r2, #68]	; 0x44
 800b8aa:	4b09      	ldr	r3, [pc, #36]	; (800b8d0 <HAL_PCD_MspInit+0xbc>)
 800b8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2105      	movs	r1, #5
 800b8ba:	2043      	movs	r0, #67	; 0x43
 800b8bc:	f7f6 fe20 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8c0:	2043      	movs	r0, #67	; 0x43
 800b8c2:	f7f6 fe39 	bl	8002538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8c6:	bf00      	nop
 800b8c8:	3728      	adds	r7, #40	; 0x28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	40023800 	.word	0x40023800
 800b8d4:	40020000 	.word	0x40020000

0800b8d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	f7fc ff1d 	bl	800872e <USBD_LL_SetupStage>
}
 800b8f4:	bf00      	nop
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b90e:	78fa      	ldrb	r2, [r7, #3]
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	4613      	mov	r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	1a9b      	subs	r3, r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	440b      	add	r3, r1
 800b91c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	78fb      	ldrb	r3, [r7, #3]
 800b924:	4619      	mov	r1, r3
 800b926:	f7fc ff4d 	bl	80087c4 <USBD_LL_DataOutStage>
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	460b      	mov	r3, r1
 800b93c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b944:	78fa      	ldrb	r2, [r7, #3]
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	4613      	mov	r3, r2
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	1a9b      	subs	r3, r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	440b      	add	r3, r1
 800b952:	3348      	adds	r3, #72	; 0x48
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	78fb      	ldrb	r3, [r7, #3]
 800b958:	4619      	mov	r1, r3
 800b95a:	f7fc ffa4 	bl	80088a6 <USBD_LL_DataInStage>
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b974:	4618      	mov	r0, r3
 800b976:	f7fd f8b2 	bl	8008ade <USBD_LL_SOF>
}
 800b97a:	bf00      	nop
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b98a:	2301      	movs	r3, #1
 800b98c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d102      	bne.n	800b99c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b996:	2300      	movs	r3, #0
 800b998:	73fb      	strb	r3, [r7, #15]
 800b99a:	e008      	b.n	800b9ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d102      	bne.n	800b9aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	73fb      	strb	r3, [r7, #15]
 800b9a8:	e001      	b.n	800b9ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b9aa:	f7f5 fedd 	bl	8001768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9b4:	7bfa      	ldrb	r2, [r7, #15]
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fd f85a 	bl	8008a72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fd f813 	bl	80089f0 <USBD_LL_Reset>
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fd f855 	bl	8008a92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	6812      	ldr	r2, [r2, #0]
 800b9f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9fa:	f043 0301 	orr.w	r3, r3, #1
 800b9fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d005      	beq.n	800ba14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba08:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <HAL_PCD_SuspendCallback+0x48>)
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	4a03      	ldr	r2, [pc, #12]	; (800ba1c <HAL_PCD_SuspendCallback+0x48>)
 800ba0e:	f043 0306 	orr.w	r3, r3, #6
 800ba12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	e000ed00 	.word	0xe000ed00

0800ba20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fd f844 	bl	8008abc <USBD_LL_Resume>
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba4e:	78fa      	ldrb	r2, [r7, #3]
 800ba50:	4611      	mov	r1, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd f86a 	bl	8008b2c <USBD_LL_IsoOUTIncomplete>
}
 800ba58:	bf00      	nop
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba72:	78fa      	ldrb	r2, [r7, #3]
 800ba74:	4611      	mov	r1, r2
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fd f84b 	bl	8008b12 <USBD_LL_IsoINIncomplete>
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fd f857 	bl	8008b46 <USBD_LL_DevConnected>
}
 800ba98:	bf00      	nop
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fd f854 	bl	8008b5c <USBD_LL_DevDisconnected>
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d13c      	bne.n	800bb46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bacc:	4a20      	ldr	r2, [pc, #128]	; (800bb50 <USBD_LL_Init+0x94>)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a1e      	ldr	r2, [pc, #120]	; (800bb50 <USBD_LL_Init+0x94>)
 800bad8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800badc:	4b1c      	ldr	r3, [pc, #112]	; (800bb50 <USBD_LL_Init+0x94>)
 800bade:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bae2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bae4:	4b1a      	ldr	r3, [pc, #104]	; (800bb50 <USBD_LL_Init+0x94>)
 800bae6:	2204      	movs	r2, #4
 800bae8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800baea:	4b19      	ldr	r3, [pc, #100]	; (800bb50 <USBD_LL_Init+0x94>)
 800baec:	2202      	movs	r2, #2
 800baee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800baf0:	4b17      	ldr	r3, [pc, #92]	; (800bb50 <USBD_LL_Init+0x94>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baf6:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <USBD_LL_Init+0x94>)
 800baf8:	2202      	movs	r2, #2
 800bafa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800bafc:	4b14      	ldr	r3, [pc, #80]	; (800bb50 <USBD_LL_Init+0x94>)
 800bafe:	2201      	movs	r2, #1
 800bb00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb02:	4b13      	ldr	r3, [pc, #76]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb08:	4b11      	ldr	r3, [pc, #68]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bb0e:	4b10      	ldr	r3, [pc, #64]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb10:	2201      	movs	r2, #1
 800bb12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb14:	4b0e      	ldr	r3, [pc, #56]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb1a:	480d      	ldr	r0, [pc, #52]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb1c:	f7f6 ff7b 	bl	8002a16 <HAL_PCD_Init>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb26:	f7f5 fe1f 	bl	8001768 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb2a:	2180      	movs	r1, #128	; 0x80
 800bb2c:	4808      	ldr	r0, [pc, #32]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb2e:	f7f8 f8e0 	bl	8003cf2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb32:	2240      	movs	r2, #64	; 0x40
 800bb34:	2100      	movs	r1, #0
 800bb36:	4806      	ldr	r0, [pc, #24]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb38:	f7f8 f894 	bl	8003c64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb3c:	2280      	movs	r2, #128	; 0x80
 800bb3e:	2101      	movs	r1, #1
 800bb40:	4803      	ldr	r0, [pc, #12]	; (800bb50 <USBD_LL_Init+0x94>)
 800bb42:	f7f8 f88f 	bl	8003c64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	200088c0 	.word	0x200088c0

0800bb54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7f7 f870 	bl	8002c50 <HAL_PCD_Start>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 f92e 	bl	800bdd8 <USBD_Get_USB_Status>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb80:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	461a      	mov	r2, r3
 800bb98:	4603      	mov	r3, r0
 800bb9a:	70fb      	strb	r3, [r7, #3]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70bb      	strb	r3, [r7, #2]
 800bba0:	4613      	mov	r3, r2
 800bba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bbb2:	78bb      	ldrb	r3, [r7, #2]
 800bbb4:	883a      	ldrh	r2, [r7, #0]
 800bbb6:	78f9      	ldrb	r1, [r7, #3]
 800bbb8:	f7f7 fc45 	bl	8003446 <HAL_PCD_EP_Open>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 f908 	bl	800bdd8 <USBD_Get_USB_Status>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b084      	sub	sp, #16
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbf0:	78fa      	ldrb	r2, [r7, #3]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f7 fc8e 	bl	8003516 <HAL_PCD_EP_Close>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 f8e9 	bl	800bdd8 <USBD_Get_USB_Status>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc2e:	78fa      	ldrb	r2, [r7, #3]
 800bc30:	4611      	mov	r1, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f7 fd66 	bl	8003704 <HAL_PCD_EP_SetStall>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f000 f8ca 	bl	800bdd8 <USBD_Get_USB_Status>
 800bc44:	4603      	mov	r3, r0
 800bc46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc6c:	78fa      	ldrb	r2, [r7, #3]
 800bc6e:	4611      	mov	r1, r2
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f7 fdab 	bl	80037cc <HAL_PCD_EP_ClrStall>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 f8ab 	bl	800bdd8 <USBD_Get_USB_Status>
 800bc82:	4603      	mov	r3, r0
 800bc84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bca2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da0b      	bge.n	800bcc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bcac:	78fb      	ldrb	r3, [r7, #3]
 800bcae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	1a9b      	subs	r3, r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	333e      	adds	r3, #62	; 0x3e
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	e00b      	b.n	800bcdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bcc4:	78fb      	ldrb	r3, [r7, #3]
 800bcc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcca:	68f9      	ldr	r1, [r7, #12]
 800bccc:	4613      	mov	r3, r2
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	1a9b      	subs	r3, r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	440b      	add	r3, r1
 800bcd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	4611      	mov	r1, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f7 fb78 	bl	80033fc <HAL_PCD_SetAddress>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 f860 	bl	800bdd8 <USBD_Get_USB_Status>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b086      	sub	sp, #24
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	60f8      	str	r0, [r7, #12]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	461a      	mov	r2, r3
 800bd32:	460b      	mov	r3, r1
 800bd34:	72fb      	strb	r3, [r7, #11]
 800bd36:	4613      	mov	r3, r2
 800bd38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd48:	893b      	ldrh	r3, [r7, #8]
 800bd4a:	7af9      	ldrb	r1, [r7, #11]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	f7f7 fc8f 	bl	8003670 <HAL_PCD_EP_Transmit>
 800bd52:	4603      	mov	r3, r0
 800bd54:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 f83d 	bl	800bdd8 <USBD_Get_USB_Status>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bd62:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	461a      	mov	r2, r3
 800bd78:	460b      	mov	r3, r1
 800bd7a:	72fb      	strb	r3, [r7, #11]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd8e:	893b      	ldrh	r3, [r7, #8]
 800bd90:	7af9      	ldrb	r1, [r7, #11]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	f7f7 fc09 	bl	80035aa <HAL_PCD_EP_Receive>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f81a 	bl	800bdd8 <USBD_Get_USB_Status>
 800bda4:	4603      	mov	r3, r0
 800bda6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800bda8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b082      	sub	sp, #8
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bdc4:	78fa      	ldrb	r2, [r7, #3]
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f7 fc39 	bl	8003640 <HAL_PCD_EP_GetRxCount>
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d817      	bhi.n	800be1c <USBD_Get_USB_Status+0x44>
 800bdec:	a201      	add	r2, pc, #4	; (adr r2, 800bdf4 <USBD_Get_USB_Status+0x1c>)
 800bdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf2:	bf00      	nop
 800bdf4:	0800be05 	.word	0x0800be05
 800bdf8:	0800be0b 	.word	0x0800be0b
 800bdfc:	0800be11 	.word	0x0800be11
 800be00:	0800be17 	.word	0x0800be17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
    break;
 800be08:	e00b      	b.n	800be22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be0a:	2302      	movs	r3, #2
 800be0c:	73fb      	strb	r3, [r7, #15]
    break;
 800be0e:	e008      	b.n	800be22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be10:	2301      	movs	r3, #1
 800be12:	73fb      	strb	r3, [r7, #15]
    break;
 800be14:	e005      	b.n	800be22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be16:	2302      	movs	r3, #2
 800be18:	73fb      	strb	r3, [r7, #15]
    break;
 800be1a:	e002      	b.n	800be22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be1c:	2302      	movs	r3, #2
 800be1e:	73fb      	strb	r3, [r7, #15]
    break;
 800be20:	bf00      	nop
  }
  return usb_status;
 800be22:	7bfb      	ldrb	r3, [r7, #15]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <__libc_init_array>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	4e0d      	ldr	r6, [pc, #52]	; (800be68 <__libc_init_array+0x38>)
 800be34:	4c0d      	ldr	r4, [pc, #52]	; (800be6c <__libc_init_array+0x3c>)
 800be36:	1ba4      	subs	r4, r4, r6
 800be38:	10a4      	asrs	r4, r4, #2
 800be3a:	2500      	movs	r5, #0
 800be3c:	42a5      	cmp	r5, r4
 800be3e:	d109      	bne.n	800be54 <__libc_init_array+0x24>
 800be40:	4e0b      	ldr	r6, [pc, #44]	; (800be70 <__libc_init_array+0x40>)
 800be42:	4c0c      	ldr	r4, [pc, #48]	; (800be74 <__libc_init_array+0x44>)
 800be44:	f000 fc38 	bl	800c6b8 <_init>
 800be48:	1ba4      	subs	r4, r4, r6
 800be4a:	10a4      	asrs	r4, r4, #2
 800be4c:	2500      	movs	r5, #0
 800be4e:	42a5      	cmp	r5, r4
 800be50:	d105      	bne.n	800be5e <__libc_init_array+0x2e>
 800be52:	bd70      	pop	{r4, r5, r6, pc}
 800be54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be58:	4798      	blx	r3
 800be5a:	3501      	adds	r5, #1
 800be5c:	e7ee      	b.n	800be3c <__libc_init_array+0xc>
 800be5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be62:	4798      	blx	r3
 800be64:	3501      	adds	r5, #1
 800be66:	e7f2      	b.n	800be4e <__libc_init_array+0x1e>
 800be68:	0800c91c 	.word	0x0800c91c
 800be6c:	0800c91c 	.word	0x0800c91c
 800be70:	0800c91c 	.word	0x0800c91c
 800be74:	0800c920 	.word	0x0800c920

0800be78 <malloc>:
 800be78:	4b02      	ldr	r3, [pc, #8]	; (800be84 <malloc+0xc>)
 800be7a:	4601      	mov	r1, r0
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	f000 b86d 	b.w	800bf5c <_malloc_r>
 800be82:	bf00      	nop
 800be84:	2000017c 	.word	0x2000017c

0800be88 <free>:
 800be88:	4b02      	ldr	r3, [pc, #8]	; (800be94 <free+0xc>)
 800be8a:	4601      	mov	r1, r0
 800be8c:	6818      	ldr	r0, [r3, #0]
 800be8e:	f000 b817 	b.w	800bec0 <_free_r>
 800be92:	bf00      	nop
 800be94:	2000017c 	.word	0x2000017c

0800be98 <memcpy>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	1e43      	subs	r3, r0, #1
 800be9c:	440a      	add	r2, r1
 800be9e:	4291      	cmp	r1, r2
 800bea0:	d100      	bne.n	800bea4 <memcpy+0xc>
 800bea2:	bd10      	pop	{r4, pc}
 800bea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beac:	e7f7      	b.n	800be9e <memcpy+0x6>

0800beae <memset>:
 800beae:	4402      	add	r2, r0
 800beb0:	4603      	mov	r3, r0
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d100      	bne.n	800beb8 <memset+0xa>
 800beb6:	4770      	bx	lr
 800beb8:	f803 1b01 	strb.w	r1, [r3], #1
 800bebc:	e7f9      	b.n	800beb2 <memset+0x4>
	...

0800bec0 <_free_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4605      	mov	r5, r0
 800bec4:	2900      	cmp	r1, #0
 800bec6:	d045      	beq.n	800bf54 <_free_r+0x94>
 800bec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800becc:	1f0c      	subs	r4, r1, #4
 800bece:	2b00      	cmp	r3, #0
 800bed0:	bfb8      	it	lt
 800bed2:	18e4      	addlt	r4, r4, r3
 800bed4:	f000 f8cc 	bl	800c070 <__malloc_lock>
 800bed8:	4a1f      	ldr	r2, [pc, #124]	; (800bf58 <_free_r+0x98>)
 800beda:	6813      	ldr	r3, [r2, #0]
 800bedc:	4610      	mov	r0, r2
 800bede:	b933      	cbnz	r3, 800beee <_free_r+0x2e>
 800bee0:	6063      	str	r3, [r4, #4]
 800bee2:	6014      	str	r4, [r2, #0]
 800bee4:	4628      	mov	r0, r5
 800bee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beea:	f000 b8c2 	b.w	800c072 <__malloc_unlock>
 800beee:	42a3      	cmp	r3, r4
 800bef0:	d90c      	bls.n	800bf0c <_free_r+0x4c>
 800bef2:	6821      	ldr	r1, [r4, #0]
 800bef4:	1862      	adds	r2, r4, r1
 800bef6:	4293      	cmp	r3, r2
 800bef8:	bf04      	itt	eq
 800befa:	681a      	ldreq	r2, [r3, #0]
 800befc:	685b      	ldreq	r3, [r3, #4]
 800befe:	6063      	str	r3, [r4, #4]
 800bf00:	bf04      	itt	eq
 800bf02:	1852      	addeq	r2, r2, r1
 800bf04:	6022      	streq	r2, [r4, #0]
 800bf06:	6004      	str	r4, [r0, #0]
 800bf08:	e7ec      	b.n	800bee4 <_free_r+0x24>
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	b10a      	cbz	r2, 800bf14 <_free_r+0x54>
 800bf10:	42a2      	cmp	r2, r4
 800bf12:	d9fa      	bls.n	800bf0a <_free_r+0x4a>
 800bf14:	6819      	ldr	r1, [r3, #0]
 800bf16:	1858      	adds	r0, r3, r1
 800bf18:	42a0      	cmp	r0, r4
 800bf1a:	d10b      	bne.n	800bf34 <_free_r+0x74>
 800bf1c:	6820      	ldr	r0, [r4, #0]
 800bf1e:	4401      	add	r1, r0
 800bf20:	1858      	adds	r0, r3, r1
 800bf22:	4282      	cmp	r2, r0
 800bf24:	6019      	str	r1, [r3, #0]
 800bf26:	d1dd      	bne.n	800bee4 <_free_r+0x24>
 800bf28:	6810      	ldr	r0, [r2, #0]
 800bf2a:	6852      	ldr	r2, [r2, #4]
 800bf2c:	605a      	str	r2, [r3, #4]
 800bf2e:	4401      	add	r1, r0
 800bf30:	6019      	str	r1, [r3, #0]
 800bf32:	e7d7      	b.n	800bee4 <_free_r+0x24>
 800bf34:	d902      	bls.n	800bf3c <_free_r+0x7c>
 800bf36:	230c      	movs	r3, #12
 800bf38:	602b      	str	r3, [r5, #0]
 800bf3a:	e7d3      	b.n	800bee4 <_free_r+0x24>
 800bf3c:	6820      	ldr	r0, [r4, #0]
 800bf3e:	1821      	adds	r1, r4, r0
 800bf40:	428a      	cmp	r2, r1
 800bf42:	bf04      	itt	eq
 800bf44:	6811      	ldreq	r1, [r2, #0]
 800bf46:	6852      	ldreq	r2, [r2, #4]
 800bf48:	6062      	str	r2, [r4, #4]
 800bf4a:	bf04      	itt	eq
 800bf4c:	1809      	addeq	r1, r1, r0
 800bf4e:	6021      	streq	r1, [r4, #0]
 800bf50:	605c      	str	r4, [r3, #4]
 800bf52:	e7c7      	b.n	800bee4 <_free_r+0x24>
 800bf54:	bd38      	pop	{r3, r4, r5, pc}
 800bf56:	bf00      	nop
 800bf58:	200041a8 	.word	0x200041a8

0800bf5c <_malloc_r>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	1ccd      	adds	r5, r1, #3
 800bf60:	f025 0503 	bic.w	r5, r5, #3
 800bf64:	3508      	adds	r5, #8
 800bf66:	2d0c      	cmp	r5, #12
 800bf68:	bf38      	it	cc
 800bf6a:	250c      	movcc	r5, #12
 800bf6c:	2d00      	cmp	r5, #0
 800bf6e:	4606      	mov	r6, r0
 800bf70:	db01      	blt.n	800bf76 <_malloc_r+0x1a>
 800bf72:	42a9      	cmp	r1, r5
 800bf74:	d903      	bls.n	800bf7e <_malloc_r+0x22>
 800bf76:	230c      	movs	r3, #12
 800bf78:	6033      	str	r3, [r6, #0]
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	bd70      	pop	{r4, r5, r6, pc}
 800bf7e:	f000 f877 	bl	800c070 <__malloc_lock>
 800bf82:	4a21      	ldr	r2, [pc, #132]	; (800c008 <_malloc_r+0xac>)
 800bf84:	6814      	ldr	r4, [r2, #0]
 800bf86:	4621      	mov	r1, r4
 800bf88:	b991      	cbnz	r1, 800bfb0 <_malloc_r+0x54>
 800bf8a:	4c20      	ldr	r4, [pc, #128]	; (800c00c <_malloc_r+0xb0>)
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	b91b      	cbnz	r3, 800bf98 <_malloc_r+0x3c>
 800bf90:	4630      	mov	r0, r6
 800bf92:	f000 f83d 	bl	800c010 <_sbrk_r>
 800bf96:	6020      	str	r0, [r4, #0]
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	f000 f838 	bl	800c010 <_sbrk_r>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d124      	bne.n	800bfee <_malloc_r+0x92>
 800bfa4:	230c      	movs	r3, #12
 800bfa6:	6033      	str	r3, [r6, #0]
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f000 f862 	bl	800c072 <__malloc_unlock>
 800bfae:	e7e4      	b.n	800bf7a <_malloc_r+0x1e>
 800bfb0:	680b      	ldr	r3, [r1, #0]
 800bfb2:	1b5b      	subs	r3, r3, r5
 800bfb4:	d418      	bmi.n	800bfe8 <_malloc_r+0x8c>
 800bfb6:	2b0b      	cmp	r3, #11
 800bfb8:	d90f      	bls.n	800bfda <_malloc_r+0x7e>
 800bfba:	600b      	str	r3, [r1, #0]
 800bfbc:	50cd      	str	r5, [r1, r3]
 800bfbe:	18cc      	adds	r4, r1, r3
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f000 f856 	bl	800c072 <__malloc_unlock>
 800bfc6:	f104 000b 	add.w	r0, r4, #11
 800bfca:	1d23      	adds	r3, r4, #4
 800bfcc:	f020 0007 	bic.w	r0, r0, #7
 800bfd0:	1ac3      	subs	r3, r0, r3
 800bfd2:	d0d3      	beq.n	800bf7c <_malloc_r+0x20>
 800bfd4:	425a      	negs	r2, r3
 800bfd6:	50e2      	str	r2, [r4, r3]
 800bfd8:	e7d0      	b.n	800bf7c <_malloc_r+0x20>
 800bfda:	428c      	cmp	r4, r1
 800bfdc:	684b      	ldr	r3, [r1, #4]
 800bfde:	bf16      	itet	ne
 800bfe0:	6063      	strne	r3, [r4, #4]
 800bfe2:	6013      	streq	r3, [r2, #0]
 800bfe4:	460c      	movne	r4, r1
 800bfe6:	e7eb      	b.n	800bfc0 <_malloc_r+0x64>
 800bfe8:	460c      	mov	r4, r1
 800bfea:	6849      	ldr	r1, [r1, #4]
 800bfec:	e7cc      	b.n	800bf88 <_malloc_r+0x2c>
 800bfee:	1cc4      	adds	r4, r0, #3
 800bff0:	f024 0403 	bic.w	r4, r4, #3
 800bff4:	42a0      	cmp	r0, r4
 800bff6:	d005      	beq.n	800c004 <_malloc_r+0xa8>
 800bff8:	1a21      	subs	r1, r4, r0
 800bffa:	4630      	mov	r0, r6
 800bffc:	f000 f808 	bl	800c010 <_sbrk_r>
 800c000:	3001      	adds	r0, #1
 800c002:	d0cf      	beq.n	800bfa4 <_malloc_r+0x48>
 800c004:	6025      	str	r5, [r4, #0]
 800c006:	e7db      	b.n	800bfc0 <_malloc_r+0x64>
 800c008:	200041a8 	.word	0x200041a8
 800c00c:	200041ac 	.word	0x200041ac

0800c010 <_sbrk_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4c06      	ldr	r4, [pc, #24]	; (800c02c <_sbrk_r+0x1c>)
 800c014:	2300      	movs	r3, #0
 800c016:	4605      	mov	r5, r0
 800c018:	4608      	mov	r0, r1
 800c01a:	6023      	str	r3, [r4, #0]
 800c01c:	f7f5 fca0 	bl	8001960 <_sbrk>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	d102      	bne.n	800c02a <_sbrk_r+0x1a>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	b103      	cbz	r3, 800c02a <_sbrk_r+0x1a>
 800c028:	602b      	str	r3, [r5, #0]
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	2000741c 	.word	0x2000741c

0800c030 <siprintf>:
 800c030:	b40e      	push	{r1, r2, r3}
 800c032:	b500      	push	{lr}
 800c034:	b09c      	sub	sp, #112	; 0x70
 800c036:	ab1d      	add	r3, sp, #116	; 0x74
 800c038:	9002      	str	r0, [sp, #8]
 800c03a:	9006      	str	r0, [sp, #24]
 800c03c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c040:	4809      	ldr	r0, [pc, #36]	; (800c068 <siprintf+0x38>)
 800c042:	9107      	str	r1, [sp, #28]
 800c044:	9104      	str	r1, [sp, #16]
 800c046:	4909      	ldr	r1, [pc, #36]	; (800c06c <siprintf+0x3c>)
 800c048:	f853 2b04 	ldr.w	r2, [r3], #4
 800c04c:	9105      	str	r1, [sp, #20]
 800c04e:	6800      	ldr	r0, [r0, #0]
 800c050:	9301      	str	r3, [sp, #4]
 800c052:	a902      	add	r1, sp, #8
 800c054:	f000 f868 	bl	800c128 <_svfiprintf_r>
 800c058:	9b02      	ldr	r3, [sp, #8]
 800c05a:	2200      	movs	r2, #0
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	b01c      	add	sp, #112	; 0x70
 800c060:	f85d eb04 	ldr.w	lr, [sp], #4
 800c064:	b003      	add	sp, #12
 800c066:	4770      	bx	lr
 800c068:	2000017c 	.word	0x2000017c
 800c06c:	ffff0208 	.word	0xffff0208

0800c070 <__malloc_lock>:
 800c070:	4770      	bx	lr

0800c072 <__malloc_unlock>:
 800c072:	4770      	bx	lr

0800c074 <__ssputs_r>:
 800c074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c078:	688e      	ldr	r6, [r1, #8]
 800c07a:	429e      	cmp	r6, r3
 800c07c:	4682      	mov	sl, r0
 800c07e:	460c      	mov	r4, r1
 800c080:	4690      	mov	r8, r2
 800c082:	4699      	mov	r9, r3
 800c084:	d837      	bhi.n	800c0f6 <__ssputs_r+0x82>
 800c086:	898a      	ldrh	r2, [r1, #12]
 800c088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c08c:	d031      	beq.n	800c0f2 <__ssputs_r+0x7e>
 800c08e:	6825      	ldr	r5, [r4, #0]
 800c090:	6909      	ldr	r1, [r1, #16]
 800c092:	1a6f      	subs	r7, r5, r1
 800c094:	6965      	ldr	r5, [r4, #20]
 800c096:	2302      	movs	r3, #2
 800c098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c09c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c0a0:	f109 0301 	add.w	r3, r9, #1
 800c0a4:	443b      	add	r3, r7
 800c0a6:	429d      	cmp	r5, r3
 800c0a8:	bf38      	it	cc
 800c0aa:	461d      	movcc	r5, r3
 800c0ac:	0553      	lsls	r3, r2, #21
 800c0ae:	d530      	bpl.n	800c112 <__ssputs_r+0x9e>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	f7ff ff53 	bl	800bf5c <_malloc_r>
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	b950      	cbnz	r0, 800c0d0 <__ssputs_r+0x5c>
 800c0ba:	230c      	movs	r3, #12
 800c0bc:	f8ca 3000 	str.w	r3, [sl]
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0c6:	81a3      	strh	r3, [r4, #12]
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d0:	463a      	mov	r2, r7
 800c0d2:	6921      	ldr	r1, [r4, #16]
 800c0d4:	f7ff fee0 	bl	800be98 <memcpy>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e2:	81a3      	strh	r3, [r4, #12]
 800c0e4:	6126      	str	r6, [r4, #16]
 800c0e6:	6165      	str	r5, [r4, #20]
 800c0e8:	443e      	add	r6, r7
 800c0ea:	1bed      	subs	r5, r5, r7
 800c0ec:	6026      	str	r6, [r4, #0]
 800c0ee:	60a5      	str	r5, [r4, #8]
 800c0f0:	464e      	mov	r6, r9
 800c0f2:	454e      	cmp	r6, r9
 800c0f4:	d900      	bls.n	800c0f8 <__ssputs_r+0x84>
 800c0f6:	464e      	mov	r6, r9
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	4641      	mov	r1, r8
 800c0fc:	6820      	ldr	r0, [r4, #0]
 800c0fe:	f000 fa93 	bl	800c628 <memmove>
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	1b9b      	subs	r3, r3, r6
 800c106:	60a3      	str	r3, [r4, #8]
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	441e      	add	r6, r3
 800c10c:	6026      	str	r6, [r4, #0]
 800c10e:	2000      	movs	r0, #0
 800c110:	e7dc      	b.n	800c0cc <__ssputs_r+0x58>
 800c112:	462a      	mov	r2, r5
 800c114:	f000 faa1 	bl	800c65a <_realloc_r>
 800c118:	4606      	mov	r6, r0
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d1e2      	bne.n	800c0e4 <__ssputs_r+0x70>
 800c11e:	6921      	ldr	r1, [r4, #16]
 800c120:	4650      	mov	r0, sl
 800c122:	f7ff fecd 	bl	800bec0 <_free_r>
 800c126:	e7c8      	b.n	800c0ba <__ssputs_r+0x46>

0800c128 <_svfiprintf_r>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	461d      	mov	r5, r3
 800c12e:	898b      	ldrh	r3, [r1, #12]
 800c130:	061f      	lsls	r7, r3, #24
 800c132:	b09d      	sub	sp, #116	; 0x74
 800c134:	4680      	mov	r8, r0
 800c136:	460c      	mov	r4, r1
 800c138:	4616      	mov	r6, r2
 800c13a:	d50f      	bpl.n	800c15c <_svfiprintf_r+0x34>
 800c13c:	690b      	ldr	r3, [r1, #16]
 800c13e:	b96b      	cbnz	r3, 800c15c <_svfiprintf_r+0x34>
 800c140:	2140      	movs	r1, #64	; 0x40
 800c142:	f7ff ff0b 	bl	800bf5c <_malloc_r>
 800c146:	6020      	str	r0, [r4, #0]
 800c148:	6120      	str	r0, [r4, #16]
 800c14a:	b928      	cbnz	r0, 800c158 <_svfiprintf_r+0x30>
 800c14c:	230c      	movs	r3, #12
 800c14e:	f8c8 3000 	str.w	r3, [r8]
 800c152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c156:	e0c8      	b.n	800c2ea <_svfiprintf_r+0x1c2>
 800c158:	2340      	movs	r3, #64	; 0x40
 800c15a:	6163      	str	r3, [r4, #20]
 800c15c:	2300      	movs	r3, #0
 800c15e:	9309      	str	r3, [sp, #36]	; 0x24
 800c160:	2320      	movs	r3, #32
 800c162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c166:	2330      	movs	r3, #48	; 0x30
 800c168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c16c:	9503      	str	r5, [sp, #12]
 800c16e:	f04f 0b01 	mov.w	fp, #1
 800c172:	4637      	mov	r7, r6
 800c174:	463d      	mov	r5, r7
 800c176:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c17a:	b10b      	cbz	r3, 800c180 <_svfiprintf_r+0x58>
 800c17c:	2b25      	cmp	r3, #37	; 0x25
 800c17e:	d13e      	bne.n	800c1fe <_svfiprintf_r+0xd6>
 800c180:	ebb7 0a06 	subs.w	sl, r7, r6
 800c184:	d00b      	beq.n	800c19e <_svfiprintf_r+0x76>
 800c186:	4653      	mov	r3, sl
 800c188:	4632      	mov	r2, r6
 800c18a:	4621      	mov	r1, r4
 800c18c:	4640      	mov	r0, r8
 800c18e:	f7ff ff71 	bl	800c074 <__ssputs_r>
 800c192:	3001      	adds	r0, #1
 800c194:	f000 80a4 	beq.w	800c2e0 <_svfiprintf_r+0x1b8>
 800c198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19a:	4453      	add	r3, sl
 800c19c:	9309      	str	r3, [sp, #36]	; 0x24
 800c19e:	783b      	ldrb	r3, [r7, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 809d 	beq.w	800c2e0 <_svfiprintf_r+0x1b8>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1b0:	9304      	str	r3, [sp, #16]
 800c1b2:	9307      	str	r3, [sp, #28]
 800c1b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ba:	462f      	mov	r7, r5
 800c1bc:	2205      	movs	r2, #5
 800c1be:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c1c2:	4850      	ldr	r0, [pc, #320]	; (800c304 <_svfiprintf_r+0x1dc>)
 800c1c4:	f7f4 f814 	bl	80001f0 <memchr>
 800c1c8:	9b04      	ldr	r3, [sp, #16]
 800c1ca:	b9d0      	cbnz	r0, 800c202 <_svfiprintf_r+0xda>
 800c1cc:	06d9      	lsls	r1, r3, #27
 800c1ce:	bf44      	itt	mi
 800c1d0:	2220      	movmi	r2, #32
 800c1d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1d6:	071a      	lsls	r2, r3, #28
 800c1d8:	bf44      	itt	mi
 800c1da:	222b      	movmi	r2, #43	; 0x2b
 800c1dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1e0:	782a      	ldrb	r2, [r5, #0]
 800c1e2:	2a2a      	cmp	r2, #42	; 0x2a
 800c1e4:	d015      	beq.n	800c212 <_svfiprintf_r+0xea>
 800c1e6:	9a07      	ldr	r2, [sp, #28]
 800c1e8:	462f      	mov	r7, r5
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	250a      	movs	r5, #10
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1f4:	3b30      	subs	r3, #48	; 0x30
 800c1f6:	2b09      	cmp	r3, #9
 800c1f8:	d94d      	bls.n	800c296 <_svfiprintf_r+0x16e>
 800c1fa:	b1b8      	cbz	r0, 800c22c <_svfiprintf_r+0x104>
 800c1fc:	e00f      	b.n	800c21e <_svfiprintf_r+0xf6>
 800c1fe:	462f      	mov	r7, r5
 800c200:	e7b8      	b.n	800c174 <_svfiprintf_r+0x4c>
 800c202:	4a40      	ldr	r2, [pc, #256]	; (800c304 <_svfiprintf_r+0x1dc>)
 800c204:	1a80      	subs	r0, r0, r2
 800c206:	fa0b f000 	lsl.w	r0, fp, r0
 800c20a:	4318      	orrs	r0, r3
 800c20c:	9004      	str	r0, [sp, #16]
 800c20e:	463d      	mov	r5, r7
 800c210:	e7d3      	b.n	800c1ba <_svfiprintf_r+0x92>
 800c212:	9a03      	ldr	r2, [sp, #12]
 800c214:	1d11      	adds	r1, r2, #4
 800c216:	6812      	ldr	r2, [r2, #0]
 800c218:	9103      	str	r1, [sp, #12]
 800c21a:	2a00      	cmp	r2, #0
 800c21c:	db01      	blt.n	800c222 <_svfiprintf_r+0xfa>
 800c21e:	9207      	str	r2, [sp, #28]
 800c220:	e004      	b.n	800c22c <_svfiprintf_r+0x104>
 800c222:	4252      	negs	r2, r2
 800c224:	f043 0302 	orr.w	r3, r3, #2
 800c228:	9207      	str	r2, [sp, #28]
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	783b      	ldrb	r3, [r7, #0]
 800c22e:	2b2e      	cmp	r3, #46	; 0x2e
 800c230:	d10c      	bne.n	800c24c <_svfiprintf_r+0x124>
 800c232:	787b      	ldrb	r3, [r7, #1]
 800c234:	2b2a      	cmp	r3, #42	; 0x2a
 800c236:	d133      	bne.n	800c2a0 <_svfiprintf_r+0x178>
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	1d1a      	adds	r2, r3, #4
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	9203      	str	r2, [sp, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	bfb8      	it	lt
 800c244:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c248:	3702      	adds	r7, #2
 800c24a:	9305      	str	r3, [sp, #20]
 800c24c:	4d2e      	ldr	r5, [pc, #184]	; (800c308 <_svfiprintf_r+0x1e0>)
 800c24e:	7839      	ldrb	r1, [r7, #0]
 800c250:	2203      	movs	r2, #3
 800c252:	4628      	mov	r0, r5
 800c254:	f7f3 ffcc 	bl	80001f0 <memchr>
 800c258:	b138      	cbz	r0, 800c26a <_svfiprintf_r+0x142>
 800c25a:	2340      	movs	r3, #64	; 0x40
 800c25c:	1b40      	subs	r0, r0, r5
 800c25e:	fa03 f000 	lsl.w	r0, r3, r0
 800c262:	9b04      	ldr	r3, [sp, #16]
 800c264:	4303      	orrs	r3, r0
 800c266:	3701      	adds	r7, #1
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	7839      	ldrb	r1, [r7, #0]
 800c26c:	4827      	ldr	r0, [pc, #156]	; (800c30c <_svfiprintf_r+0x1e4>)
 800c26e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c272:	2206      	movs	r2, #6
 800c274:	1c7e      	adds	r6, r7, #1
 800c276:	f7f3 ffbb 	bl	80001f0 <memchr>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d038      	beq.n	800c2f0 <_svfiprintf_r+0x1c8>
 800c27e:	4b24      	ldr	r3, [pc, #144]	; (800c310 <_svfiprintf_r+0x1e8>)
 800c280:	bb13      	cbnz	r3, 800c2c8 <_svfiprintf_r+0x1a0>
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	3307      	adds	r3, #7
 800c286:	f023 0307 	bic.w	r3, r3, #7
 800c28a:	3308      	adds	r3, #8
 800c28c:	9303      	str	r3, [sp, #12]
 800c28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c290:	444b      	add	r3, r9
 800c292:	9309      	str	r3, [sp, #36]	; 0x24
 800c294:	e76d      	b.n	800c172 <_svfiprintf_r+0x4a>
 800c296:	fb05 3202 	mla	r2, r5, r2, r3
 800c29a:	2001      	movs	r0, #1
 800c29c:	460f      	mov	r7, r1
 800c29e:	e7a6      	b.n	800c1ee <_svfiprintf_r+0xc6>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	3701      	adds	r7, #1
 800c2a4:	9305      	str	r3, [sp, #20]
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	250a      	movs	r5, #10
 800c2aa:	4638      	mov	r0, r7
 800c2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2b0:	3a30      	subs	r2, #48	; 0x30
 800c2b2:	2a09      	cmp	r2, #9
 800c2b4:	d903      	bls.n	800c2be <_svfiprintf_r+0x196>
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d0c8      	beq.n	800c24c <_svfiprintf_r+0x124>
 800c2ba:	9105      	str	r1, [sp, #20]
 800c2bc:	e7c6      	b.n	800c24c <_svfiprintf_r+0x124>
 800c2be:	fb05 2101 	mla	r1, r5, r1, r2
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	e7f0      	b.n	800c2aa <_svfiprintf_r+0x182>
 800c2c8:	ab03      	add	r3, sp, #12
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	4622      	mov	r2, r4
 800c2ce:	4b11      	ldr	r3, [pc, #68]	; (800c314 <_svfiprintf_r+0x1ec>)
 800c2d0:	a904      	add	r1, sp, #16
 800c2d2:	4640      	mov	r0, r8
 800c2d4:	f3af 8000 	nop.w
 800c2d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c2dc:	4681      	mov	r9, r0
 800c2de:	d1d6      	bne.n	800c28e <_svfiprintf_r+0x166>
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	065b      	lsls	r3, r3, #25
 800c2e4:	f53f af35 	bmi.w	800c152 <_svfiprintf_r+0x2a>
 800c2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ea:	b01d      	add	sp, #116	; 0x74
 800c2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f0:	ab03      	add	r3, sp, #12
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	4b07      	ldr	r3, [pc, #28]	; (800c314 <_svfiprintf_r+0x1ec>)
 800c2f8:	a904      	add	r1, sp, #16
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f000 f882 	bl	800c404 <_printf_i>
 800c300:	e7ea      	b.n	800c2d8 <_svfiprintf_r+0x1b0>
 800c302:	bf00      	nop
 800c304:	0800c8e0 	.word	0x0800c8e0
 800c308:	0800c8e6 	.word	0x0800c8e6
 800c30c:	0800c8ea 	.word	0x0800c8ea
 800c310:	00000000 	.word	0x00000000
 800c314:	0800c075 	.word	0x0800c075

0800c318 <_printf_common>:
 800c318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c31c:	4691      	mov	r9, r2
 800c31e:	461f      	mov	r7, r3
 800c320:	688a      	ldr	r2, [r1, #8]
 800c322:	690b      	ldr	r3, [r1, #16]
 800c324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c328:	4293      	cmp	r3, r2
 800c32a:	bfb8      	it	lt
 800c32c:	4613      	movlt	r3, r2
 800c32e:	f8c9 3000 	str.w	r3, [r9]
 800c332:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c336:	4606      	mov	r6, r0
 800c338:	460c      	mov	r4, r1
 800c33a:	b112      	cbz	r2, 800c342 <_printf_common+0x2a>
 800c33c:	3301      	adds	r3, #1
 800c33e:	f8c9 3000 	str.w	r3, [r9]
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	0699      	lsls	r1, r3, #26
 800c346:	bf42      	ittt	mi
 800c348:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c34c:	3302      	addmi	r3, #2
 800c34e:	f8c9 3000 	strmi.w	r3, [r9]
 800c352:	6825      	ldr	r5, [r4, #0]
 800c354:	f015 0506 	ands.w	r5, r5, #6
 800c358:	d107      	bne.n	800c36a <_printf_common+0x52>
 800c35a:	f104 0a19 	add.w	sl, r4, #25
 800c35e:	68e3      	ldr	r3, [r4, #12]
 800c360:	f8d9 2000 	ldr.w	r2, [r9]
 800c364:	1a9b      	subs	r3, r3, r2
 800c366:	42ab      	cmp	r3, r5
 800c368:	dc28      	bgt.n	800c3bc <_printf_common+0xa4>
 800c36a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c36e:	6822      	ldr	r2, [r4, #0]
 800c370:	3300      	adds	r3, #0
 800c372:	bf18      	it	ne
 800c374:	2301      	movne	r3, #1
 800c376:	0692      	lsls	r2, r2, #26
 800c378:	d42d      	bmi.n	800c3d6 <_printf_common+0xbe>
 800c37a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c37e:	4639      	mov	r1, r7
 800c380:	4630      	mov	r0, r6
 800c382:	47c0      	blx	r8
 800c384:	3001      	adds	r0, #1
 800c386:	d020      	beq.n	800c3ca <_printf_common+0xb2>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	68e5      	ldr	r5, [r4, #12]
 800c38c:	f8d9 2000 	ldr.w	r2, [r9]
 800c390:	f003 0306 	and.w	r3, r3, #6
 800c394:	2b04      	cmp	r3, #4
 800c396:	bf08      	it	eq
 800c398:	1aad      	subeq	r5, r5, r2
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	6922      	ldr	r2, [r4, #16]
 800c39e:	bf0c      	ite	eq
 800c3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3a4:	2500      	movne	r5, #0
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	bfc4      	itt	gt
 800c3aa:	1a9b      	subgt	r3, r3, r2
 800c3ac:	18ed      	addgt	r5, r5, r3
 800c3ae:	f04f 0900 	mov.w	r9, #0
 800c3b2:	341a      	adds	r4, #26
 800c3b4:	454d      	cmp	r5, r9
 800c3b6:	d11a      	bne.n	800c3ee <_printf_common+0xd6>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	e008      	b.n	800c3ce <_printf_common+0xb6>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	4652      	mov	r2, sl
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	47c0      	blx	r8
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d103      	bne.n	800c3d2 <_printf_common+0xba>
 800c3ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d2:	3501      	adds	r5, #1
 800c3d4:	e7c3      	b.n	800c35e <_printf_common+0x46>
 800c3d6:	18e1      	adds	r1, r4, r3
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	2030      	movs	r0, #48	; 0x30
 800c3dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3e0:	4422      	add	r2, r4
 800c3e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3ea:	3302      	adds	r3, #2
 800c3ec:	e7c5      	b.n	800c37a <_printf_common+0x62>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	47c0      	blx	r8
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d0e6      	beq.n	800c3ca <_printf_common+0xb2>
 800c3fc:	f109 0901 	add.w	r9, r9, #1
 800c400:	e7d8      	b.n	800c3b4 <_printf_common+0x9c>
	...

0800c404 <_printf_i>:
 800c404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c408:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c40c:	460c      	mov	r4, r1
 800c40e:	7e09      	ldrb	r1, [r1, #24]
 800c410:	b085      	sub	sp, #20
 800c412:	296e      	cmp	r1, #110	; 0x6e
 800c414:	4617      	mov	r7, r2
 800c416:	4606      	mov	r6, r0
 800c418:	4698      	mov	r8, r3
 800c41a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c41c:	f000 80b3 	beq.w	800c586 <_printf_i+0x182>
 800c420:	d822      	bhi.n	800c468 <_printf_i+0x64>
 800c422:	2963      	cmp	r1, #99	; 0x63
 800c424:	d036      	beq.n	800c494 <_printf_i+0x90>
 800c426:	d80a      	bhi.n	800c43e <_printf_i+0x3a>
 800c428:	2900      	cmp	r1, #0
 800c42a:	f000 80b9 	beq.w	800c5a0 <_printf_i+0x19c>
 800c42e:	2958      	cmp	r1, #88	; 0x58
 800c430:	f000 8083 	beq.w	800c53a <_printf_i+0x136>
 800c434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c438:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c43c:	e032      	b.n	800c4a4 <_printf_i+0xa0>
 800c43e:	2964      	cmp	r1, #100	; 0x64
 800c440:	d001      	beq.n	800c446 <_printf_i+0x42>
 800c442:	2969      	cmp	r1, #105	; 0x69
 800c444:	d1f6      	bne.n	800c434 <_printf_i+0x30>
 800c446:	6820      	ldr	r0, [r4, #0]
 800c448:	6813      	ldr	r3, [r2, #0]
 800c44a:	0605      	lsls	r5, r0, #24
 800c44c:	f103 0104 	add.w	r1, r3, #4
 800c450:	d52a      	bpl.n	800c4a8 <_printf_i+0xa4>
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	da03      	bge.n	800c462 <_printf_i+0x5e>
 800c45a:	222d      	movs	r2, #45	; 0x2d
 800c45c:	425b      	negs	r3, r3
 800c45e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c462:	486f      	ldr	r0, [pc, #444]	; (800c620 <_printf_i+0x21c>)
 800c464:	220a      	movs	r2, #10
 800c466:	e039      	b.n	800c4dc <_printf_i+0xd8>
 800c468:	2973      	cmp	r1, #115	; 0x73
 800c46a:	f000 809d 	beq.w	800c5a8 <_printf_i+0x1a4>
 800c46e:	d808      	bhi.n	800c482 <_printf_i+0x7e>
 800c470:	296f      	cmp	r1, #111	; 0x6f
 800c472:	d020      	beq.n	800c4b6 <_printf_i+0xb2>
 800c474:	2970      	cmp	r1, #112	; 0x70
 800c476:	d1dd      	bne.n	800c434 <_printf_i+0x30>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	f043 0320 	orr.w	r3, r3, #32
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	e003      	b.n	800c48a <_printf_i+0x86>
 800c482:	2975      	cmp	r1, #117	; 0x75
 800c484:	d017      	beq.n	800c4b6 <_printf_i+0xb2>
 800c486:	2978      	cmp	r1, #120	; 0x78
 800c488:	d1d4      	bne.n	800c434 <_printf_i+0x30>
 800c48a:	2378      	movs	r3, #120	; 0x78
 800c48c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c490:	4864      	ldr	r0, [pc, #400]	; (800c624 <_printf_i+0x220>)
 800c492:	e055      	b.n	800c540 <_printf_i+0x13c>
 800c494:	6813      	ldr	r3, [r2, #0]
 800c496:	1d19      	adds	r1, r3, #4
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6011      	str	r1, [r2, #0]
 800c49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e08c      	b.n	800c5c2 <_printf_i+0x1be>
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6011      	str	r1, [r2, #0]
 800c4ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4b0:	bf18      	it	ne
 800c4b2:	b21b      	sxthne	r3, r3
 800c4b4:	e7cf      	b.n	800c456 <_printf_i+0x52>
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	6825      	ldr	r5, [r4, #0]
 800c4ba:	1d18      	adds	r0, r3, #4
 800c4bc:	6010      	str	r0, [r2, #0]
 800c4be:	0628      	lsls	r0, r5, #24
 800c4c0:	d501      	bpl.n	800c4c6 <_printf_i+0xc2>
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	e002      	b.n	800c4cc <_printf_i+0xc8>
 800c4c6:	0668      	lsls	r0, r5, #25
 800c4c8:	d5fb      	bpl.n	800c4c2 <_printf_i+0xbe>
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	4854      	ldr	r0, [pc, #336]	; (800c620 <_printf_i+0x21c>)
 800c4ce:	296f      	cmp	r1, #111	; 0x6f
 800c4d0:	bf14      	ite	ne
 800c4d2:	220a      	movne	r2, #10
 800c4d4:	2208      	moveq	r2, #8
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4dc:	6865      	ldr	r5, [r4, #4]
 800c4de:	60a5      	str	r5, [r4, #8]
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	f2c0 8095 	blt.w	800c610 <_printf_i+0x20c>
 800c4e6:	6821      	ldr	r1, [r4, #0]
 800c4e8:	f021 0104 	bic.w	r1, r1, #4
 800c4ec:	6021      	str	r1, [r4, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d13d      	bne.n	800c56e <_printf_i+0x16a>
 800c4f2:	2d00      	cmp	r5, #0
 800c4f4:	f040 808e 	bne.w	800c614 <_printf_i+0x210>
 800c4f8:	4665      	mov	r5, ip
 800c4fa:	2a08      	cmp	r2, #8
 800c4fc:	d10b      	bne.n	800c516 <_printf_i+0x112>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	07db      	lsls	r3, r3, #31
 800c502:	d508      	bpl.n	800c516 <_printf_i+0x112>
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	6862      	ldr	r2, [r4, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	bfde      	ittt	le
 800c50c:	2330      	movle	r3, #48	; 0x30
 800c50e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c512:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c516:	ebac 0305 	sub.w	r3, ip, r5
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	f8cd 8000 	str.w	r8, [sp]
 800c520:	463b      	mov	r3, r7
 800c522:	aa03      	add	r2, sp, #12
 800c524:	4621      	mov	r1, r4
 800c526:	4630      	mov	r0, r6
 800c528:	f7ff fef6 	bl	800c318 <_printf_common>
 800c52c:	3001      	adds	r0, #1
 800c52e:	d14d      	bne.n	800c5cc <_printf_i+0x1c8>
 800c530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c534:	b005      	add	sp, #20
 800c536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c53a:	4839      	ldr	r0, [pc, #228]	; (800c620 <_printf_i+0x21c>)
 800c53c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c540:	6813      	ldr	r3, [r2, #0]
 800c542:	6821      	ldr	r1, [r4, #0]
 800c544:	1d1d      	adds	r5, r3, #4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6015      	str	r5, [r2, #0]
 800c54a:	060a      	lsls	r2, r1, #24
 800c54c:	d50b      	bpl.n	800c566 <_printf_i+0x162>
 800c54e:	07ca      	lsls	r2, r1, #31
 800c550:	bf44      	itt	mi
 800c552:	f041 0120 	orrmi.w	r1, r1, #32
 800c556:	6021      	strmi	r1, [r4, #0]
 800c558:	b91b      	cbnz	r3, 800c562 <_printf_i+0x15e>
 800c55a:	6822      	ldr	r2, [r4, #0]
 800c55c:	f022 0220 	bic.w	r2, r2, #32
 800c560:	6022      	str	r2, [r4, #0]
 800c562:	2210      	movs	r2, #16
 800c564:	e7b7      	b.n	800c4d6 <_printf_i+0xd2>
 800c566:	064d      	lsls	r5, r1, #25
 800c568:	bf48      	it	mi
 800c56a:	b29b      	uxthmi	r3, r3
 800c56c:	e7ef      	b.n	800c54e <_printf_i+0x14a>
 800c56e:	4665      	mov	r5, ip
 800c570:	fbb3 f1f2 	udiv	r1, r3, r2
 800c574:	fb02 3311 	mls	r3, r2, r1, r3
 800c578:	5cc3      	ldrb	r3, [r0, r3]
 800c57a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c57e:	460b      	mov	r3, r1
 800c580:	2900      	cmp	r1, #0
 800c582:	d1f5      	bne.n	800c570 <_printf_i+0x16c>
 800c584:	e7b9      	b.n	800c4fa <_printf_i+0xf6>
 800c586:	6813      	ldr	r3, [r2, #0]
 800c588:	6825      	ldr	r5, [r4, #0]
 800c58a:	6961      	ldr	r1, [r4, #20]
 800c58c:	1d18      	adds	r0, r3, #4
 800c58e:	6010      	str	r0, [r2, #0]
 800c590:	0628      	lsls	r0, r5, #24
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	d501      	bpl.n	800c59a <_printf_i+0x196>
 800c596:	6019      	str	r1, [r3, #0]
 800c598:	e002      	b.n	800c5a0 <_printf_i+0x19c>
 800c59a:	066a      	lsls	r2, r5, #25
 800c59c:	d5fb      	bpl.n	800c596 <_printf_i+0x192>
 800c59e:	8019      	strh	r1, [r3, #0]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	6123      	str	r3, [r4, #16]
 800c5a4:	4665      	mov	r5, ip
 800c5a6:	e7b9      	b.n	800c51c <_printf_i+0x118>
 800c5a8:	6813      	ldr	r3, [r2, #0]
 800c5aa:	1d19      	adds	r1, r3, #4
 800c5ac:	6011      	str	r1, [r2, #0]
 800c5ae:	681d      	ldr	r5, [r3, #0]
 800c5b0:	6862      	ldr	r2, [r4, #4]
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	f7f3 fe1b 	bl	80001f0 <memchr>
 800c5ba:	b108      	cbz	r0, 800c5c0 <_printf_i+0x1bc>
 800c5bc:	1b40      	subs	r0, r0, r5
 800c5be:	6060      	str	r0, [r4, #4]
 800c5c0:	6863      	ldr	r3, [r4, #4]
 800c5c2:	6123      	str	r3, [r4, #16]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ca:	e7a7      	b.n	800c51c <_printf_i+0x118>
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	47c0      	blx	r8
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	d0aa      	beq.n	800c530 <_printf_i+0x12c>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	079b      	lsls	r3, r3, #30
 800c5de:	d413      	bmi.n	800c608 <_printf_i+0x204>
 800c5e0:	68e0      	ldr	r0, [r4, #12]
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	4298      	cmp	r0, r3
 800c5e6:	bfb8      	it	lt
 800c5e8:	4618      	movlt	r0, r3
 800c5ea:	e7a3      	b.n	800c534 <_printf_i+0x130>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	464a      	mov	r2, r9
 800c5f0:	4639      	mov	r1, r7
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	47c0      	blx	r8
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	d09a      	beq.n	800c530 <_printf_i+0x12c>
 800c5fa:	3501      	adds	r5, #1
 800c5fc:	68e3      	ldr	r3, [r4, #12]
 800c5fe:	9a03      	ldr	r2, [sp, #12]
 800c600:	1a9b      	subs	r3, r3, r2
 800c602:	42ab      	cmp	r3, r5
 800c604:	dcf2      	bgt.n	800c5ec <_printf_i+0x1e8>
 800c606:	e7eb      	b.n	800c5e0 <_printf_i+0x1dc>
 800c608:	2500      	movs	r5, #0
 800c60a:	f104 0919 	add.w	r9, r4, #25
 800c60e:	e7f5      	b.n	800c5fc <_printf_i+0x1f8>
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1ac      	bne.n	800c56e <_printf_i+0x16a>
 800c614:	7803      	ldrb	r3, [r0, #0]
 800c616:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c61a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c61e:	e76c      	b.n	800c4fa <_printf_i+0xf6>
 800c620:	0800c8f1 	.word	0x0800c8f1
 800c624:	0800c902 	.word	0x0800c902

0800c628 <memmove>:
 800c628:	4288      	cmp	r0, r1
 800c62a:	b510      	push	{r4, lr}
 800c62c:	eb01 0302 	add.w	r3, r1, r2
 800c630:	d807      	bhi.n	800c642 <memmove+0x1a>
 800c632:	1e42      	subs	r2, r0, #1
 800c634:	4299      	cmp	r1, r3
 800c636:	d00a      	beq.n	800c64e <memmove+0x26>
 800c638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c640:	e7f8      	b.n	800c634 <memmove+0xc>
 800c642:	4283      	cmp	r3, r0
 800c644:	d9f5      	bls.n	800c632 <memmove+0xa>
 800c646:	1881      	adds	r1, r0, r2
 800c648:	1ad2      	subs	r2, r2, r3
 800c64a:	42d3      	cmn	r3, r2
 800c64c:	d100      	bne.n	800c650 <memmove+0x28>
 800c64e:	bd10      	pop	{r4, pc}
 800c650:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c654:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c658:	e7f7      	b.n	800c64a <memmove+0x22>

0800c65a <_realloc_r>:
 800c65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65c:	4607      	mov	r7, r0
 800c65e:	4614      	mov	r4, r2
 800c660:	460e      	mov	r6, r1
 800c662:	b921      	cbnz	r1, 800c66e <_realloc_r+0x14>
 800c664:	4611      	mov	r1, r2
 800c666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c66a:	f7ff bc77 	b.w	800bf5c <_malloc_r>
 800c66e:	b922      	cbnz	r2, 800c67a <_realloc_r+0x20>
 800c670:	f7ff fc26 	bl	800bec0 <_free_r>
 800c674:	4625      	mov	r5, r4
 800c676:	4628      	mov	r0, r5
 800c678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c67a:	f000 f814 	bl	800c6a6 <_malloc_usable_size_r>
 800c67e:	42a0      	cmp	r0, r4
 800c680:	d20f      	bcs.n	800c6a2 <_realloc_r+0x48>
 800c682:	4621      	mov	r1, r4
 800c684:	4638      	mov	r0, r7
 800c686:	f7ff fc69 	bl	800bf5c <_malloc_r>
 800c68a:	4605      	mov	r5, r0
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d0f2      	beq.n	800c676 <_realloc_r+0x1c>
 800c690:	4631      	mov	r1, r6
 800c692:	4622      	mov	r2, r4
 800c694:	f7ff fc00 	bl	800be98 <memcpy>
 800c698:	4631      	mov	r1, r6
 800c69a:	4638      	mov	r0, r7
 800c69c:	f7ff fc10 	bl	800bec0 <_free_r>
 800c6a0:	e7e9      	b.n	800c676 <_realloc_r+0x1c>
 800c6a2:	4635      	mov	r5, r6
 800c6a4:	e7e7      	b.n	800c676 <_realloc_r+0x1c>

0800c6a6 <_malloc_usable_size_r>:
 800c6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6aa:	1f18      	subs	r0, r3, #4
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	bfbc      	itt	lt
 800c6b0:	580b      	ldrlt	r3, [r1, r0]
 800c6b2:	18c0      	addlt	r0, r0, r3
 800c6b4:	4770      	bx	lr
	...

0800c6b8 <_init>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	bf00      	nop
 800c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6be:	bc08      	pop	{r3}
 800c6c0:	469e      	mov	lr, r3
 800c6c2:	4770      	bx	lr

0800c6c4 <_fini>:
 800c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c6:	bf00      	nop
 800c6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ca:	bc08      	pop	{r3}
 800c6cc:	469e      	mov	lr, r3
 800c6ce:	4770      	bx	lr
