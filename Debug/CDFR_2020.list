
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002004  08015aa8  08015aa8  00025aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017aac  08017aac  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08017aac  08017aac  00027aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017ab4  08017ab4  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017ab4  08017ab4  00027ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ab8  08017ab8  00027ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08017abc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c234  200001e4  08017ca0  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c418  08017ca0  0003c418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000428d8  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000089b4  00000000  00000000  00072aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002500  00000000  00000000  0007b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002208  00000000  00000000  0007d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039130  00000000  00000000  0007fba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030765  00000000  00000000  000b8cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010abb6  00000000  00000000  000e943d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f3ff3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b4c  00000000  00000000  001f4070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015a90 	.word	0x08015a90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	08015a90 	.word	0x08015a90

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000200 	.word	0x20000200
 80005c0:	20000254 	.word	0x20000254

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b09c      	sub	sp, #112	; 0x70
 80005c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_FREERTOS_Init+0xa4>)
 80005cc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f008 fa10 	bl	8008a0a <osThreadCreate>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_FREERTOS_Init+0xa8>)
 80005ee:	601a      	str	r2, [r3, #0]

  /* definition and creation of SpeedRegTask */
  osThreadDef(SpeedRegTask, StartSpeedRegTask, osPriorityRealtime, 0, 128);
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_FREERTOS_Init+0xac>)
 80005f2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SpeedRegTaskHandle = osThreadCreate(osThread(SpeedRegTask), NULL);
 8000604:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 f9fd 	bl	8008a0a <osThreadCreate>
 8000610:	4602      	mov	r2, r0
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_FREERTOS_Init+0xb0>)
 8000614:	601a      	str	r2, [r3, #0]

  /* definition and creation of PositionRegTask */
  osThreadDef(PositionRegTask, StartPositionRegTask, osPriorityRealtime, 0, 128);
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_FREERTOS_Init+0xb4>)
 8000618:	f107 041c 	add.w	r4, r7, #28
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000626:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PositionRegTaskHandle = osThreadCreate(osThread(PositionRegTask), NULL);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f008 f9ea 	bl	8008a0a <osThreadCreate>
 8000636:	4602      	mov	r2, r0
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_FREERTOS_Init+0xb8>)
 800063a:	601a      	str	r2, [r3, #0]

  /* definition and creation of TimerGameTask */
  osThreadDef(TimerGameTask, StartTimerGameTask, osPriorityNormal, 0, 128);
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_FREERTOS_Init+0xbc>)
 800063e:	463c      	mov	r4, r7
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimerGameTaskHandle = osThreadCreate(osThread(TimerGameTask), NULL);
 800064e:	463b      	mov	r3, r7
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f008 f9d9 	bl	8008a0a <osThreadCreate>
 8000658:	4602      	mov	r2, r0
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_FREERTOS_Init+0xc0>)
 800065c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800065e:	bf00      	nop
 8000660:	3770      	adds	r7, #112	; 0x70
 8000662:	46bd      	mov	sp, r7
 8000664:	bdb0      	pop	{r4, r5, r7, pc}
 8000666:	bf00      	nop
 8000668:	08015ab4 	.word	0x08015ab4
 800066c:	20004340 	.word	0x20004340
 8000670:	08015ae0 	.word	0x08015ae0
 8000674:	20004344 	.word	0x20004344
 8000678:	08015b0c 	.word	0x08015b0c
 800067c:	2000434c 	.word	0x2000434c
 8000680:	08015b38 	.word	0x08015b38
 8000684:	20004348 	.word	0x20004348

08000688 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000690:	f006 f9ee 	bl	8006a70 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000694:	f013 fde8 	bl	8014268 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f008 fa02 	bl	8008aa2 <osDelay>
 800069e:	e7fb      	b.n	8000698 <StartDefaultTask+0x10>

080006a0 <StartSpeedRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSpeedRegTask */
void StartSpeedRegTask(void const * argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSpeedRegTask */
  /* Infinite loop */
  for(;;)
  {
	F_GPIO_ToogleLedRed();
 80006a8:	f000 fa1c 	bl	8000ae4 <F_GPIO_ToogleLedRed>
    osDelay(1000);
 80006ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b0:	f008 f9f7 	bl	8008aa2 <osDelay>
	F_GPIO_ToogleLedRed();
 80006b4:	e7f8      	b.n	80006a8 <StartSpeedRegTask+0x8>

080006b6 <StartPositionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPositionRegTask */
void StartPositionRegTask(void const * argument)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPositionRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(20);
 80006be:	2014      	movs	r0, #20
 80006c0:	f008 f9ef 	bl	8008aa2 <osDelay>
 80006c4:	e7fb      	b.n	80006be <StartPositionRegTask+0x8>

080006c6 <StartTimerGameTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimerGameTask */
void StartTimerGameTask(void const * argument)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimerGameTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f008 f9e6 	bl	8008aa2 <osDelay>
 80006d6:	e7fa      	b.n	80006ce <StartTimerGameTask+0x8>

080006d8 <MX_GPIO_Init>:
     PB3   ------> S_TIM2_CH2
     PB4   ------> S_TIM3_CH1
     PB5   ------> S_TIM3_CH2
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
 80006f2:	4bb2      	ldr	r3, [pc, #712]	; (80009bc <MX_GPIO_Init+0x2e4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4ab1      	ldr	r2, [pc, #708]	; (80009bc <MX_GPIO_Init+0x2e4>)
 80006f8:	f043 0310 	orr.w	r3, r3, #16
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4baf      	ldr	r3, [pc, #700]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0310 	and.w	r3, r3, #16
 8000706:	623b      	str	r3, [r7, #32]
 8000708:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
 800070e:	4bab      	ldr	r3, [pc, #684]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4aaa      	ldr	r2, [pc, #680]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4ba8      	ldr	r3, [pc, #672]	; (80009bc <MX_GPIO_Init+0x2e4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	61fb      	str	r3, [r7, #28]
 8000724:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	4ba4      	ldr	r3, [pc, #656]	; (80009bc <MX_GPIO_Init+0x2e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4aa3      	ldr	r2, [pc, #652]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000730:	f043 0320 	orr.w	r3, r3, #32
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4ba1      	ldr	r3, [pc, #644]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0320 	and.w	r3, r3, #32
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	4b9d      	ldr	r3, [pc, #628]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a9c      	ldr	r2, [pc, #624]	; (80009bc <MX_GPIO_Init+0x2e4>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b9a      	ldr	r3, [pc, #616]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b96      	ldr	r3, [pc, #600]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a95      	ldr	r2, [pc, #596]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b93      	ldr	r3, [pc, #588]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b8f      	ldr	r3, [pc, #572]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a8e      	ldr	r2, [pc, #568]	; (80009bc <MX_GPIO_Init+0x2e4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b8c      	ldr	r3, [pc, #560]	; (80009bc <MX_GPIO_Init+0x2e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b88      	ldr	r3, [pc, #544]	; (80009bc <MX_GPIO_Init+0x2e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a87      	ldr	r2, [pc, #540]	; (80009bc <MX_GPIO_Init+0x2e4>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b85      	ldr	r3, [pc, #532]	; (80009bc <MX_GPIO_Init+0x2e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b81      	ldr	r3, [pc, #516]	; (80009bc <MX_GPIO_Init+0x2e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a80      	ldr	r2, [pc, #512]	; (80009bc <MX_GPIO_Init+0x2e4>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b7e      	ldr	r3, [pc, #504]	; (80009bc <MX_GPIO_Init+0x2e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 80007ce:	2200      	movs	r2, #0
 80007d0:	f247 4130 	movw	r1, #29744	; 0x7430
 80007d4:	487a      	ldr	r0, [pc, #488]	; (80009c0 <MX_GPIO_Init+0x2e8>)
 80007d6:	f002 f8c5 	bl	8002964 <HAL_GPIO_WritePin>
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4879      	ldr	r0, [pc, #484]	; (80009c4 <MX_GPIO_Init+0x2ec>)
 80007e0:	f002 f8c0 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 80007e4:	2200      	movs	r2, #0
 80007e6:	f244 41c1 	movw	r1, #17601	; 0x44c1
 80007ea:	4877      	ldr	r0, [pc, #476]	; (80009c8 <MX_GPIO_Init+0x2f0>)
 80007ec:	f002 f8ba 	bl	8002964 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80007f6:	4875      	ldr	r0, [pc, #468]	; (80009cc <MX_GPIO_Init+0x2f4>)
 80007f8:	f002 f8b4 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000802:	4873      	ldr	r0, [pc, #460]	; (80009d0 <MX_GPIO_Init+0x2f8>)
 8000804:	f002 f8ae 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|XSHUNT_3_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800080e:	4871      	ldr	r0, [pc, #452]	; (80009d4 <MX_GPIO_Init+0x2fc>)
 8000810:	f002 f8a8 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000814:	2374      	movs	r3, #116	; 0x74
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000824:	2305      	movs	r3, #5
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	4867      	ldr	r0, [pc, #412]	; (80009cc <MX_GPIO_Init+0x2f4>)
 8000830:	f001 feee 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <MX_GPIO_Init+0x300>)
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	4864      	ldr	r0, [pc, #400]	; (80009dc <MX_GPIO_Init+0x304>)
 800084a:	f001 fee1 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_FB_Pin;
 800084e:	2308      	movs	r3, #8
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_FB_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4857      	ldr	r0, [pc, #348]	; (80009c0 <MX_GPIO_Init+0x2e8>)
 8000862:	f001 fed5 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000866:	f247 4330 	movw	r3, #29744	; 0x7430
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	4850      	ldr	r0, [pc, #320]	; (80009c0 <MX_GPIO_Init+0x2e8>)
 8000880:	f001 fec6 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000884:	2308      	movs	r3, #8
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	484a      	ldr	r0, [pc, #296]	; (80009c4 <MX_GPIO_Init+0x2ec>)
 800089c:	f001 feb8 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TIRETTE_Pin|M_SF_Pin;
 80008a0:	2360      	movs	r3, #96	; 0x60
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4844      	ldr	r0, [pc, #272]	; (80009c4 <MX_GPIO_Init+0x2ec>)
 80008b4:	f001 feac 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 80008b8:	f244 43c1 	movw	r3, #17601	; 0x44c1
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	483d      	ldr	r0, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x2f0>)
 80008d2:	f001 fe9d 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_FB_Pin;
 80008d6:	2302      	movs	r3, #2
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_FB_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	4837      	ldr	r0, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x2f0>)
 80008ea:	f001 fe91 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CONTACT_4_Pin|USB_OverCurrent_Pin;
 80008ee:	2381      	movs	r3, #129	; 0x81
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	4834      	ldr	r0, [pc, #208]	; (80009d4 <MX_GPIO_Init+0x2fc>)
 8000902:	f001 fe85 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin;
 8000906:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	482b      	ldr	r0, [pc, #172]	; (80009cc <MX_GPIO_Init+0x2f4>)
 8000920:	f001 fe76 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PWM_SERVO_5_Pin|PWM_SERVO_6_Pin|PWM_SERVO_7_Pin|PWM_SERVO_8_Pin;
 8000924:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000936:	2301      	movs	r3, #1
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x2f4>)
 8000942:	f001 fe65 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 8000946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	481c      	ldr	r0, [pc, #112]	; (80009d0 <MX_GPIO_Init+0x2f8>)
 8000960:	f001 fe56 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CMD_MOTEUR_DROIT_Pin|CMD_MOTEUR_GAUCHE_Pin;
 8000964:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000976:	2302      	movs	r3, #2
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_GPIO_Init+0x2f8>)
 8000982:	f001 fe45 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|XSHUNT_3_Pin;
 8000986:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_GPIO_Init+0x2fc>)
 80009a0:	f001 fe36 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin|PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 80009a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80009b6:	2303      	movs	r3, #3
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
 80009ba:	e011      	b.n	80009e0 <MX_GPIO_Init+0x308>
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021400 	.word	0x40021400
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40021800 	.word	0x40021800
 80009d8:	10110000 	.word	0x10110000
 80009dc:	40020800 	.word	0x40020800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	4839      	ldr	r0, [pc, #228]	; (8000acc <MX_GPIO_Init+0x3f4>)
 80009e8:	f001 fe12 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QEI_M1_CH1_Pin;
 80009ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009fe:	2301      	movs	r3, #1
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QEI_M1_CH1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4831      	ldr	r0, [pc, #196]	; (8000ad0 <MX_GPIO_Init+0x3f8>)
 8000a0a:	f001 fe01 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a20:	2308      	movs	r3, #8
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4828      	ldr	r0, [pc, #160]	; (8000acc <MX_GPIO_Init+0x3f4>)
 8000a2c:	f001 fdf0 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CONTACT_5_Pin|CONTACT_1_Pin|CONTACT_2_Pin|CONTACT_3_Pin;
 8000a30:	23b1      	movs	r3, #177	; 0xb1
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <MX_GPIO_Init+0x3fc>)
 8000a44:	f001 fde4 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000a48:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0x400>)
 8000a66:	f001 fdd3 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QEI_M1_CH2_Pin;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QEI_M1_CH2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_GPIO_Init+0x404>)
 8000a86:	f001 fdc3 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = QEI_M2_CH1_Pin|QEI_M2_CH2_Pin;
 8000a8a:	2330      	movs	r3, #48	; 0x30
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_GPIO_Init+0x404>)
 8000aa6:	f001 fdb3 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTACT_6_Pin;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONTACT_6_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_GPIO_Init+0x408>)
 8000abe:	f001 fda7 	bl	8002610 <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3738      	adds	r7, #56	; 0x38
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <F_GPIO_ToogleLedRed>:

/* USER CODE BEGIN 2 */
void F_GPIO_ToogleLedRed(void){
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	if((GPIOB->ODR & LED_Red) > 0){
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <F_GPIO_ToogleLedRed+0x34>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <F_GPIO_ToogleLedRed+0x1e>
		GPIOB->ODR &= ~LED_Red;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <F_GPIO_ToogleLedRed+0x34>)
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <F_GPIO_ToogleLedRed+0x34>)
 8000afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000afe:	6153      	str	r3, [r2, #20]
	}else{
		GPIOB->ODR |= LED_Red;
	}
}
 8000b00:	e005      	b.n	8000b0e <F_GPIO_ToogleLedRed+0x2a>
		GPIOB->ODR |= LED_Red;
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <F_GPIO_ToogleLedRed+0x34>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <F_GPIO_ToogleLedRed+0x34>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6153      	str	r3, [r2, #20]
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40020400 	.word	0x40020400

08000b1c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60da      	str	r2, [r3, #12]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f023 0201 	bic.w	r2, r3, #1
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	60da      	str	r2, [r3, #12]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be0:	4907      	ldr	r1, [pc, #28]	; (8000c00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40023800 	.word	0x40023800

08000c04 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	; 0x38
 8000c08:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f014 f850 	bl	8014cb8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
 8000c26:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff ffbb 	bl	8000ba4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000c2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c34:	2302      	movs	r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000c44:	2304      	movs	r3, #4
 8000c46:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4817      	ldr	r0, [pc, #92]	; (8000cac <MX_I2C1_Init+0xa8>)
 8000c4e:	f003 ffbe 	bl	8004bce <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000c52:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000c56:	f7ff ffbd 	bl	8000bd4 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8000c5a:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <MX_I2C1_Init+0xac>)
 8000c5c:	f7ff ff91 	bl	8000b82 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <MX_I2C1_Init+0xac>)
 8000c62:	f7ff ff6b 	bl	8000b3c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000c66:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0xac>)
 8000c68:	f7ff ff58 	bl	8000b1c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_I2C1_Init+0xb0>)
 8000c72:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000c8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_I2C1_Init+0xac>)
 8000c98:	f004 f91a 	bl	8004ed0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_I2C1_Init+0xac>)
 8000ca0:	f7ff ff5c 	bl	8000b5c <LL_I2C_SetOwnAddress2>

}
 8000ca4:	bf00      	nop
 8000ca6:	3738      	adds	r7, #56	; 0x38
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f013 fff6 	bl	8014cb8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
 8000cda:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000cdc:	2020      	movs	r0, #32
 8000cde:	f7ff ff61 	bl	8000ba4 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4818      	ldr	r0, [pc, #96]	; (8000d60 <MX_I2C2_Init+0xa8>)
 8000d00:	f003 ff65 	bl	8004bce <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8000d04:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000d08:	f7ff ff64 	bl	8000bd4 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8000d0c:	4815      	ldr	r0, [pc, #84]	; (8000d64 <MX_I2C2_Init+0xac>)
 8000d0e:	f7ff ff38 	bl	8000b82 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_I2C2_Init+0xac>)
 8000d14:	f7ff ff12 	bl	8000b3c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <MX_I2C2_Init+0xac>)
 8000d1a:	f7ff feff 	bl	8000b1c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_I2C2_Init+0xb0>)
 8000d24:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_I2C2_Init+0xac>)
 8000d4a:	f004 f8c1 	bl	8004ed0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_I2C2_Init+0xac>)
 8000d52:	f7ff ff03 	bl	8000b5c <LL_I2C_SetOwnAddress2>

}
 8000d56:	bf00      	nop
 8000d58:	3738      	adds	r7, #56	; 0x38
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021400 	.word	0x40021400
 8000d64:	40005800 	.word	0x40005800
 8000d68:	000186a0 	.word	0x000186a0

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */
  
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d70:	f000 faf6 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d74:	f000 f80e 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d78:	f7ff fcae 	bl	80006d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d7c:	f000 fa74 	bl	8001268 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000d80:	f7ff ff40 	bl	8000c04 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d84:	f7ff ff98 	bl	8000cb8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  // Test
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000d88:	f7ff fc1c 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d8c:	f007 fe26 	bl	80089dc <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <main+0x24>
	...

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f013 ff88 	bl	8014cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xd0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000df4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e04:	2304      	movs	r3, #4
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e08:	23a8      	movs	r3, #168	; 0xa8
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e10:	2307      	movs	r3, #7
 8000e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 ff47 	bl	8003cac <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e24:	f000 f832 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2105      	movs	r1, #5
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 f972 	bl	8004130 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e52:	f000 f81b 	bl	8000e8c <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	; 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7a:	f000 fa93 	bl	80013a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40014400 	.word	0x40014400

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_MspInit+0x54>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <HAL_MspInit+0x54>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_MspInit+0x54>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_MspInit+0x54>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_MspInit+0x54>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_MspInit+0x54>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	210f      	movs	r1, #15
 8000ede:	f06f 0001 	mvn.w	r0, #1
 8000ee2:	f000 fb59 	bl	8001598 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	2019      	movs	r0, #25
 8000f0a:	f000 fb45 	bl	8001598 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000f0e:	2019      	movs	r0, #25
 8000f10:	f000 fb5e 	bl	80015d0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f22:	6453      	str	r3, [r2, #68]	; 0x44
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_InitTick+0xa4>)
 8000f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f30:	f107 0210 	add.w	r2, r7, #16
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fad2 	bl	80044e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f40:	f003 fabc 	bl	80044bc <HAL_RCC_GetPCLK2Freq>
 8000f44:	4603      	mov	r3, r0
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4c:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_InitTick+0xa8>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	0c9b      	lsrs	r3, r3, #18
 8000f54:	3b01      	subs	r3, #1
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_InitTick+0xac>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <HAL_InitTick+0xb0>)
 8000f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_InitTick+0xac>)
 8000f60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f64:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_InitTick+0xac>)
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_InitTick+0xac>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_InitTick+0xac>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000f78:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <HAL_InitTick+0xac>)
 8000f7a:	f003 fae5 	bl	8004548 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <HAL_InitTick+0xac>)
 8000f86:	f003 fb14 	bl	80045b2 <HAL_TIM_Base_Start_IT>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3730      	adds	r7, #48	; 0x30
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	20004350 	.word	0x20004350
 8000fa4:	40014400 	.word	0x40014400

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fe2:	f003 fb0a 	bl	80045fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20004350 	.word	0x20004350

08000ff0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <ETH_IRQHandler+0x10>)
 8000ff6:	f000 fedf 	bl	8001db8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20005cac 	.word	0x20005cac

08001004 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <OTG_FS_IRQHandler+0x10>)
 800100a:	f001 fe14 	bl	8002c36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000c010 	.word	0x2000c010

08001018 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
	}

return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e009      	b.n	8001078 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <_write+0x12>
	}
	return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_close>:

int _close(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b2:	605a      	str	r2, [r3, #4]
	return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
	return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x50>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x16>
		heap_end = &end;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <_sbrk+0x50>)
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <_sbrk+0x54>)
 8001108:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <_sbrk+0x50>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <_sbrk+0x50>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	466a      	mov	r2, sp
 800111a:	4293      	cmp	r3, r2
 800111c:	d905      	bls.n	800112a <_sbrk+0x36>
	{
		errno = ENOMEM;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <_sbrk+0x58>)
 8001120:	220c      	movs	r2, #12
 8001122:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001128:	e006      	b.n	8001138 <_sbrk+0x44>
	}

	heap_end += incr;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <_sbrk+0x50>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <_sbrk+0x50>)
 8001134:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000454 	.word	0x20000454
 8001148:	2000c418 	.word	0x2000c418
 800114c:	2000ab6c 	.word	0x2000ab6c

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <SystemInit+0x60>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <SystemInit+0x60>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <SystemInit+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <SystemInit+0x64>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <SystemInit+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <SystemInit+0x64>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <SystemInit+0x64>)
 800117c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <SystemInit+0x64>)
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <SystemInit+0x68>)
 800118a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <SystemInit+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <SystemInit+0x64>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SystemInit+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SystemInit+0x60>)
 80011a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a4:	609a      	str	r2, [r3, #8]
#endif
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	40023800 	.word	0x40023800
 80011b8:	24003010 	.word	0x24003010

080011bc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60da      	str	r2, [r3, #12]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	615a      	str	r2, [r3, #20]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_AHB1_GRP1_EnableClock>:
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4313      	orrs	r3, r2
 800121a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800121e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4013      	ands	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40023800 	.word	0x40023800

08001238 <LL_APB1_GRP1_EnableClock>:
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4313      	orrs	r3, r2
 800124a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <LL_APB1_GRP1_EnableClock+0x2c>)
 800124e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4013      	ands	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40023800 	.word	0x40023800

08001268 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001292:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001296:	f7ff ffcf 	bl	8001238 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800129a:	2008      	movs	r0, #8
 800129c:	f7ff ffb4 	bl	8001208 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80012a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012a6:	2302      	movs	r3, #2
 80012a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012b6:	2307      	movs	r3, #7
 80012b8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_USART3_UART_Init+0x9c>)
 80012c0:	f003 fc85 	bl	8004bce <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 80012c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80012c8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012d6:	230c      	movs	r3, #12
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_USART3_UART_Init+0xa0>)
 80012ea:	f004 f853 	bl	8005394 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_USART3_UART_Init+0xa0>)
 80012f0:	f7ff ff74 	bl	80011dc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_USART3_UART_Init+0xa0>)
 80012f6:	f7ff ff61 	bl	80011bc <LL_USART_Enable>

}
 80012fa:	bf00      	nop
 80012fc:	3738      	adds	r7, #56	; 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40004800 	.word	0x40004800

0800130c <Reset_Handler>:
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0x14>
 8001310:	2100      	movs	r1, #0
 8001312:	e003      	b.n	800131c <LoopCopyDataInit>

08001314 <CopyDataInit>:
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <LoopFillZerobss+0x18>)
 8001316:	585b      	ldr	r3, [r3, r1]
 8001318:	5043      	str	r3, [r0, r1]
 800131a:	3104      	adds	r1, #4

0800131c <LoopCopyDataInit>:
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <LoopFillZerobss+0x1c>)
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <LoopFillZerobss+0x20>)
 8001320:	1842      	adds	r2, r0, r1
 8001322:	429a      	cmp	r2, r3
 8001324:	d3f6      	bcc.n	8001314 <CopyDataInit>
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopFillZerobss+0x24>)
 8001328:	e002      	b.n	8001330 <LoopFillZerobss>

0800132a <FillZerobss>:
 800132a:	2300      	movs	r3, #0
 800132c:	f842 3b04 	str.w	r3, [r2], #4

08001330 <LoopFillZerobss>:
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <LoopFillZerobss+0x28>)
 8001332:	429a      	cmp	r2, r3
 8001334:	d3f9      	bcc.n	800132a <FillZerobss>
 8001336:	f7ff ff0b 	bl	8001150 <SystemInit>
 800133a:	f013 fc6f 	bl	8014c1c <__libc_init_array>
 800133e:	f7ff fd15 	bl	8000d6c <main>
 8001342:	4770      	bx	lr
 8001344:	20030000 	.word	0x20030000
 8001348:	08017abc 	.word	0x08017abc
 800134c:	20000000 	.word	0x20000000
 8001350:	200001e4 	.word	0x200001e4
 8001354:	200001e4 	.word	0x200001e4
 8001358:	2000c418 	.word	0x2000c418

0800135c <ADC_IRQHandler>:
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_Init+0x40>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_Init+0x40>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_Init+0x40>)
 8001382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f8fa 	bl	8001582 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fdb0 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001394:	f7ff fd82 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023c00 	.word	0x40023c00

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000004 	.word	0x20000004
 80013c8:	20004390 	.word	0x20004390

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20004390 	.word	0x20004390

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_Delay+0x40>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000004 	.word	0x20000004

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff4c 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015aa:	f7ff ff61 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f7ff ffb1 	bl	800151c <NVIC_EncodePriority>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff80 	bl	80014c8 <__NVIC_SetPriority>
}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff54 	bl	800148c <__NVIC_EnableIRQ>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80015fc:	4baa      	ldr	r3, [pc, #680]	; (80018a8 <HAL_ETH_Init+0x2bc>)
 80015fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e185      	b.n	800191e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f005 fb50 	bl	8006ccc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b9e      	ldr	r3, [pc, #632]	; (80018ac <HAL_ETH_Init+0x2c0>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	4a9d      	ldr	r2, [pc, #628]	; (80018ac <HAL_ETH_Init+0x2c0>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	6453      	str	r3, [r2, #68]	; 0x44
 800163c:	4b9b      	ldr	r3, [pc, #620]	; (80018ac <HAL_ETH_Init+0x2c0>)
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001648:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <HAL_ETH_Init+0x2c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a98      	ldr	r2, [pc, #608]	; (80018b0 <HAL_ETH_Init+0x2c4>)
 800164e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001652:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001654:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <HAL_ETH_Init+0x2c4>)
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4994      	ldr	r1, [pc, #592]	; (80018b0 <HAL_ETH_Init+0x2c4>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800167a:	f7ff fea7 	bl	80013cc <HAL_GetTick>
 800167e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001680:	e011      	b.n	80016a6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001682:	f7ff fea3 	bl	80013cc <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001690:	d909      	bls.n	80016a6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2203      	movs	r2, #3
 8001696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e13b      	b.n	800191e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e4      	bne.n	8001682 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f023 031c 	bic.w	r3, r3, #28
 80016c6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016c8:	f002 feec 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80016cc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4a78      	ldr	r2, [pc, #480]	; (80018b4 <HAL_ETH_Init+0x2c8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d908      	bls.n	80016e8 <HAL_ETH_Init+0xfc>
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4a77      	ldr	r2, [pc, #476]	; (80018b8 <HAL_ETH_Init+0x2cc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d804      	bhi.n	80016e8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e027      	b.n	8001738 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	4a73      	ldr	r2, [pc, #460]	; (80018b8 <HAL_ETH_Init+0x2cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d908      	bls.n	8001702 <HAL_ETH_Init+0x116>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	4a72      	ldr	r2, [pc, #456]	; (80018bc <HAL_ETH_Init+0x2d0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d804      	bhi.n	8001702 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f043 030c 	orr.w	r3, r3, #12
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	e01a      	b.n	8001738 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4a6d      	ldr	r2, [pc, #436]	; (80018bc <HAL_ETH_Init+0x2d0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d903      	bls.n	8001712 <HAL_ETH_Init+0x126>
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4a6c      	ldr	r2, [pc, #432]	; (80018c0 <HAL_ETH_Init+0x2d4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d911      	bls.n	8001736 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4a6a      	ldr	r2, [pc, #424]	; (80018c0 <HAL_ETH_Init+0x2d4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d908      	bls.n	800172c <HAL_ETH_Init+0x140>
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4a69      	ldr	r2, [pc, #420]	; (80018c4 <HAL_ETH_Init+0x2d8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d804      	bhi.n	800172c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e005      	b.n	8001738 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	e000      	b.n	8001738 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001736:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001740:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001744:	2100      	movs	r1, #0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fc19 	bl	8001f7e <HAL_ETH_WritePHYRegister>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001756:	6939      	ldr	r1, [r7, #16]
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fca5 	bl	80020a8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0d9      	b.n	800191e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800176a:	20ff      	movs	r0, #255	; 0xff
 800176c:	f7ff fe3a 	bl	80013e4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80a7 	beq.w	80018c8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800177a:	f7ff fe27 	bl	80013cc <HAL_GetTick>
 800177e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	461a      	mov	r2, r3
 8001786:	2101      	movs	r1, #1
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fb90 	bl	8001eae <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800178e:	f7ff fe1d 	bl	80013cc <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d90f      	bls.n	80017c0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80017a4:	6939      	ldr	r1, [r7, #16]
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fc7e 	bl	80020a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0ae      	b.n	800191e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0da      	beq.n	8001780 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80017ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ce:	2100      	movs	r1, #0
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fbd4 	bl	8001f7e <HAL_ETH_WritePHYRegister>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00b      	beq.n	80017f4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017e0:	6939      	ldr	r1, [r7, #16]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fc60 	bl	80020a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017f0:	2301      	movs	r3, #1
 80017f2:	e094      	b.n	800191e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80017f4:	f7ff fdea 	bl	80013cc <HAL_GetTick>
 80017f8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	461a      	mov	r2, r3
 8001800:	2101      	movs	r1, #1
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fb53 	bl	8001eae <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001808:	f7ff fde0 	bl	80013cc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d90f      	bls.n	800183a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800181e:	6939      	ldr	r1, [r7, #16]
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fc41 	bl	80020a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e071      	b.n	800191e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0da      	beq.n	80017fa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	461a      	mov	r2, r3
 800184a:	211f      	movs	r1, #31
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fb2e 	bl	8001eae <HAL_ETH_ReadPHYRegister>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00b      	beq.n	8001870 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fc22 	bl	80020a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800186c:	2301      	movs	r3, #1
 800186e:	e056      	b.n	800191e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	e002      	b.n	800188a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	e037      	b.n	800190c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	e032      	b.n	800190c <HAL_ETH_Init+0x320>
 80018a6:	bf00      	nop
 80018a8:	03938700 	.word	0x03938700
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40013800 	.word	0x40013800
 80018b4:	01312cff 	.word	0x01312cff
 80018b8:	02160ebf 	.word	0x02160ebf
 80018bc:	039386ff 	.word	0x039386ff
 80018c0:	05f5e0ff 	.word	0x05f5e0ff
 80018c4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80018d8:	4313      	orrs	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fb4c 	bl	8001f7e <HAL_ETH_WritePHYRegister>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fbd8 	bl	80020a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e00c      	b.n	800191e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001904:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001908:	f7ff fd6c 	bl	80013e4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800190c:	6939      	ldr	r1, [r7, #16]
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fbca 	bl	80020a8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop

08001928 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_ETH_DMATxDescListInit+0x20>
 8001944:	2302      	movs	r3, #2
 8001946:	e052      	b.n	80019ee <HAL_ETH_DMATxDescListInit+0xc6>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e030      	b.n	80019c6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	015b      	lsls	r3, r3, #5
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001974:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	461a      	mov	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d208      	bcs.n	80019ba <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	015b      	lsls	r3, r3, #5
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	461a      	mov	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	e002      	b.n	80019c0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d3ca      	bcc.n	8001964 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d8:	3310      	adds	r3, #16
 80019da:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b087      	sub	sp, #28
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_ETH_DMARxDescListInit+0x20>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e056      	b.n	8001ac8 <HAL_ETH_DMARxDescListInit+0xce>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2202      	movs	r2, #2
 8001a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e034      	b.n	8001aa0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	015b      	lsls	r3, r3, #5
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a46:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a4e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d208      	bcs.n	8001a94 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	e002      	b.n	8001a9a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d3c6      	bcc.n	8001a36 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	330c      	adds	r3, #12
 8001ab4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_ETH_TransmitFrame+0x24>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e0cd      	b.n	8001c94 <HAL_ETH_TransmitFrame+0x1c0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0b8      	b.n	8001c94 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da09      	bge.n	8001b40 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2212      	movs	r2, #18
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0a9      	b.n	8001c94 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d915      	bls.n	8001b76 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0a9b      	lsrs	r3, r3, #10
 8001b54:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e001      	b.n	8001b7a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001b76:	2301      	movs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d11c      	bne.n	8001bba <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001b8e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b9a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001baa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb8:	e04b      	b.n	8001c52 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e044      	b.n	8001c4a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bce:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bee:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d116      	bne.n	8001c28 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c08:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <HAL_ETH_TransmitFrame+0x1d0>)
 8001c0e:	fb02 f203 	mul.w	r2, r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001c1a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c26:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c36:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	3301      	adds	r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3b6      	bcc.n	8001bc0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	3314      	adds	r3, #20
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6e:	3314      	adds	r3, #20
 8001c70:	2204      	movs	r2, #4
 8001c72:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	ac02b00b 	.word	0xac02b00b
 8001ca4:	fffffa0c 	.word	0xfffffa0c

08001ca8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e074      	b.n	8001dac <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001cd2:	e05a      	b.n	8001d8a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce8:	d10d      	bne.n	8001d06 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
 8001d04:	e041      	b.n	8001d8a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10b      	bne.n	8001d2c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	461a      	mov	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
 8001d2a:	e02e      	b.n	8001d8a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d103      	bne.n	8001d4e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d5a:	1f1a      	subs	r2, r3, #4
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e010      	b.n	8001dac <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db02      	blt.n	8001d9a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d99c      	bls.n	8001cd4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	3314      	adds	r3, #20
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b40      	cmp	r3, #64	; 0x40
 8001dd2:	d112      	bne.n	8001dfa <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f005 f847 	bl	8006e68 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de2:	3314      	adds	r3, #20
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001df8:	e01b      	b.n	8001e32 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e02:	3314      	adds	r3, #20
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d111      	bne.n	8001e32 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f839 	bl	8001e86 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1c:	3314      	adds	r3, #20
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e40:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e56:	d112      	bne.n	8001e7e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f81e 	bl	8001e9a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e66:	3314      	adds	r3, #20
 8001e68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e6c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b82      	cmp	r3, #130	; 0x82
 8001ece:	d101      	bne.n	8001ed4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e050      	b.n	8001f76 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2282      	movs	r2, #130	; 0x82
 8001ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 031c 	and.w	r3, r3, #28
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8a1b      	ldrh	r3, [r3, #16]
 8001ef0:	02db      	lsls	r3, r3, #11
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001efa:	897b      	ldrh	r3, [r7, #10]
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f023 0302 	bic.w	r3, r3, #2
 8001f0e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f20:	f7ff fa54 	bl	80013cc <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f26:	e015      	b.n	8001f54 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f28:	f7ff fa50 	bl	80013cc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d309      	bcc.n	8001f4c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e014      	b.n	8001f76 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e4      	bne.n	8001f28 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	460b      	mov	r3, r1
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b42      	cmp	r3, #66	; 0x42
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e04e      	b.n	8002042 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2242      	movs	r2, #66	; 0x42
 8001fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 031c 	and.w	r3, r3, #28
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8a1b      	ldrh	r3, [r3, #16]
 8001fc0:	02db      	lsls	r3, r3, #11
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001fca:	897b      	ldrh	r3, [r7, #10]
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ffa:	f7ff f9e7 	bl	80013cc <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002000:	e015      	b.n	800202e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002002:	f7ff f9e3 	bl	80013cc <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d309      	bcc.n	8002026 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e00d      	b.n	8002042 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e4      	bne.n	8002002 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_ETH_Start+0x16>
 800205c:	2302      	movs	r3, #2
 800205e:	e01f      	b.n	80020a0 <HAL_ETH_Start+0x56>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fa1b 	bl	80024ac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa35 	bl	80024e6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fa7f 	bl	8002580 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fa4c 	bl	8002520 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fa61 	bl	8002550 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0b0      	sub	sp, #192	; 0xc0
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020d6:	2300      	movs	r3, #0
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f2:	663b      	str	r3, [r7, #96]	; 0x60
 80020f4:	e001      	b.n	80020fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002104:	2300      	movs	r3, #0
 8002106:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002114:	2340      	movs	r3, #64	; 0x40
 8002116:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800217c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002180:	4bac      	ldr	r3, [pc, #688]	; (8002434 <ETH_MACDMAConfig+0x38c>)
 8002182:	4013      	ands	r3, r2
 8002184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002188:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800218a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800218c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800218e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002190:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002194:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800219a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800219c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800219e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80021a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80021a2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021a8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021ac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021b0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021b4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021b8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021bc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80021be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021dc:	2001      	movs	r0, #1
 80021de:	f7ff f901 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002200:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002206:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800220c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002210:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002218:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800221a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff f8dc 	bl	80013e4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002234:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800223e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002248:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002254:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002258:	f64f 7341 	movw	r3, #65345	; 0xff41
 800225c:	4013      	ands	r3, r2
 800225e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002266:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800226c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800226e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002272:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002278:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800227a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800227e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002284:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002286:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002298:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f7ff f89d 	bl	80013e4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7ff f888 	bl	80013e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002302:	2304      	movs	r3, #4
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800230c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002322:	2300      	movs	r3, #0
 8002324:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002326:	2300      	movs	r3, #0
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002332:	3318      	adds	r3, #24
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800233a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800233e:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <ETH_MACDMAConfig+0x390>)
 8002340:	4013      	ands	r3, r2
 8002342:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002346:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002348:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800234a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800234c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800234e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002350:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002352:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002354:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002356:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002358:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800235a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800235c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800235e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002362:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002366:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002368:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237a:	3318      	adds	r3, #24
 800237c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002380:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238a:	3318      	adds	r3, #24
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff f826 	bl	80013e4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	3318      	adds	r3, #24
 80023a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023ac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023b0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023b4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023b8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80023ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023bc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023be:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80023c2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7fe ffff 	bl	80013e4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10f      	bne.n	800241c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002404:	331c      	adds	r3, #28
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002418:	331c      	adds	r3, #28
 800241a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	461a      	mov	r2, r3
 8002422:	2100      	movs	r1, #0
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f809 	bl	800243c <ETH_MACAddressConfig>
}
 800242a:	bf00      	nop
 800242c:	37c0      	adds	r7, #192	; 0xc0
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	ff20810f 	.word	0xff20810f
 8002438:	f8de3f23 	.word	0xf8de3f23

0800243c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3305      	adds	r3, #5
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	3204      	adds	r2, #4
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <ETH_MACAddressConfig+0x68>)
 800245e:	4413      	add	r3, r2
 8002460:	461a      	mov	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3303      	adds	r3, #3
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	061a      	lsls	r2, r3, #24
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3302      	adds	r3, #2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3301      	adds	r3, #1
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	4313      	orrs	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <ETH_MACAddressConfig+0x6c>)
 800248e:	4413      	add	r3, r2
 8002490:	461a      	mov	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6013      	str	r3, [r2, #0]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40028040 	.word	0x40028040
 80024a8:	40028044 	.word	0x40028044

080024ac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0208 	orr.w	r2, r2, #8
 80024c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f000 f87f 	bl	80025d4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0204 	orr.w	r2, r2, #4
 8002500:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800250a:	2001      	movs	r0, #1
 800250c:	f000 f862 	bl	80025d4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	3318      	adds	r3, #24
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800253c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002540:	3318      	adds	r3, #24
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002560:	3318      	adds	r3, #24
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0202 	orr.w	r2, r2, #2
 800256c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002570:	3318      	adds	r3, #24
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002594:	3318      	adds	r3, #24
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a4:	3318      	adds	r3, #24
 80025a6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b0:	3318      	adds	r3, #24
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f000 f80c 	bl	80025d4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c6:	3318      	adds	r3, #24
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <ETH_Delay+0x34>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <ETH_Delay+0x38>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0a5b      	lsrs	r3, r3, #9
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80025f0:	bf00      	nop
  } 
  while (Delay --);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	60fa      	str	r2, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f9      	bne.n	80025f0 <ETH_Delay+0x1c>
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	20000000 	.word	0x20000000
 800260c:	10624dd3 	.word	0x10624dd3

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e177      	b.n	800291c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8166 	bne.w	8002916 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x4a>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b12      	cmp	r3, #18
 8002658:	d123      	bne.n	80026a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3208      	adds	r2, #8
 8002662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	08da      	lsrs	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3208      	adds	r2, #8
 800269c:	69b9      	ldr	r1, [r7, #24]
 800269e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0203 	and.w	r2, r3, #3
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d00b      	beq.n	80026f6 <HAL_GPIO_Init+0xe6>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d007      	beq.n	80026f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ea:	2b11      	cmp	r3, #17
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	d130      	bne.n	8002758 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 0201 	and.w	r2, r3, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80c0 	beq.w	8002916 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_GPIO_Init+0x320>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a64      	ldr	r2, [pc, #400]	; (8002930 <HAL_GPIO_Init+0x320>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b62      	ldr	r3, [pc, #392]	; (8002930 <HAL_GPIO_Init+0x320>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b2:	4a60      	ldr	r2, [pc, #384]	; (8002934 <HAL_GPIO_Init+0x324>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_GPIO_Init+0x328>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d037      	beq.n	800284e <HAL_GPIO_Init+0x23e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a56      	ldr	r2, [pc, #344]	; (800293c <HAL_GPIO_Init+0x32c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d031      	beq.n	800284a <HAL_GPIO_Init+0x23a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a55      	ldr	r2, [pc, #340]	; (8002940 <HAL_GPIO_Init+0x330>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02b      	beq.n	8002846 <HAL_GPIO_Init+0x236>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a54      	ldr	r2, [pc, #336]	; (8002944 <HAL_GPIO_Init+0x334>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d025      	beq.n	8002842 <HAL_GPIO_Init+0x232>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a53      	ldr	r2, [pc, #332]	; (8002948 <HAL_GPIO_Init+0x338>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_GPIO_Init+0x22e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_GPIO_Init+0x33c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x22a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a51      	ldr	r2, [pc, #324]	; (8002950 <HAL_GPIO_Init+0x340>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x226>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a50      	ldr	r2, [pc, #320]	; (8002954 <HAL_GPIO_Init+0x344>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x222>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4f      	ldr	r2, [pc, #316]	; (8002958 <HAL_GPIO_Init+0x348>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x21e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4e      	ldr	r2, [pc, #312]	; (800295c <HAL_GPIO_Init+0x34c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x21a>
 8002826:	2309      	movs	r3, #9
 8002828:	e012      	b.n	8002850 <HAL_GPIO_Init+0x240>
 800282a:	230a      	movs	r3, #10
 800282c:	e010      	b.n	8002850 <HAL_GPIO_Init+0x240>
 800282e:	2308      	movs	r3, #8
 8002830:	e00e      	b.n	8002850 <HAL_GPIO_Init+0x240>
 8002832:	2307      	movs	r3, #7
 8002834:	e00c      	b.n	8002850 <HAL_GPIO_Init+0x240>
 8002836:	2306      	movs	r3, #6
 8002838:	e00a      	b.n	8002850 <HAL_GPIO_Init+0x240>
 800283a:	2305      	movs	r3, #5
 800283c:	e008      	b.n	8002850 <HAL_GPIO_Init+0x240>
 800283e:	2304      	movs	r3, #4
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x240>
 8002842:	2303      	movs	r3, #3
 8002844:	e004      	b.n	8002850 <HAL_GPIO_Init+0x240>
 8002846:	2302      	movs	r3, #2
 8002848:	e002      	b.n	8002850 <HAL_GPIO_Init+0x240>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_GPIO_Init+0x240>
 800284e:	2300      	movs	r3, #0
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f002 0203 	and.w	r2, r2, #3
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	4093      	lsls	r3, r2
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002860:	4934      	ldr	r1, [pc, #208]	; (8002934 <HAL_GPIO_Init+0x324>)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800286e:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <HAL_GPIO_Init+0x350>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002892:	4a33      	ldr	r2, [pc, #204]	; (8002960 <HAL_GPIO_Init+0x350>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_GPIO_Init+0x350>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028bc:	4a28      	ldr	r2, [pc, #160]	; (8002960 <HAL_GPIO_Init+0x350>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c2:	4b27      	ldr	r3, [pc, #156]	; (8002960 <HAL_GPIO_Init+0x350>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_GPIO_Init+0x350>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_GPIO_Init+0x350>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_GPIO_Init+0x350>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b0f      	cmp	r3, #15
 8002920:	f67f ae84 	bls.w	800262c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002924:	bf00      	nop
 8002926:	3724      	adds	r7, #36	; 0x24
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40023800 	.word	0x40023800
 8002934:	40013800 	.word	0x40013800
 8002938:	40020000 	.word	0x40020000
 800293c:	40020400 	.word	0x40020400
 8002940:	40020800 	.word	0x40020800
 8002944:	40020c00 	.word	0x40020c00
 8002948:	40021000 	.word	0x40021000
 800294c:	40021400 	.word	0x40021400
 8002950:	40021800 	.word	0x40021800
 8002954:	40021c00 	.word	0x40021c00
 8002958:	40022000 	.word	0x40022000
 800295c:	40022400 	.word	0x40022400
 8002960:	40013c00 	.word	0x40013c00

08002964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	4613      	mov	r3, r2
 8002972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002980:	e003      	b.n	800298a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	619a      	str	r2, [r3, #24]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002998:	b08f      	sub	sp, #60	; 0x3c
 800299a:	af0a      	add	r7, sp, #40	; 0x28
 800299c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e10f      	b.n	8002bc8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f011 fe1c 	bl	8014600 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2203      	movs	r2, #3
 80029cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fe7b 	bl	80056e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	687e      	ldr	r6, [r7, #4]
 80029f4:	466d      	mov	r5, sp
 80029f6:	f106 0410 	add.w	r4, r6, #16
 80029fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a0a:	1d33      	adds	r3, r6, #4
 8002a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a0e:	6838      	ldr	r0, [r7, #0]
 8002a10:	f002 fd52 	bl	80054b8 <USB_CoreInit>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0d0      	b.n	8002bc8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fe69 	bl	8005704 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	e04a      	b.n	8002ace <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	333d      	adds	r3, #61	; 0x3d
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	333c      	adds	r3, #60	; 0x3c
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	b298      	uxth	r0, r3
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3342      	adds	r3, #66	; 0x42
 8002a74:	4602      	mov	r2, r0
 8002a76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	333f      	adds	r3, #63	; 0x3f
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3344      	adds	r3, #68	; 0x44
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3348      	adds	r3, #72	; 0x48
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3350      	adds	r3, #80	; 0x50
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	3301      	adds	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3af      	bcc.n	8002a38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e044      	b.n	8002b68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	3301      	adds	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d3b5      	bcc.n	8002ade <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	687e      	ldr	r6, [r7, #4]
 8002b7a:	466d      	mov	r5, sp
 8002b7c:	f106 0410 	add.w	r4, r6, #16
 8002b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b90:	1d33      	adds	r3, r6, #4
 8002b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b94:	6838      	ldr	r0, [r7, #0]
 8002b96:	f002 fddf 	bl	8005758 <USB_DevInit>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e00d      	b.n	8002bc8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fdd4 	bl	800676e <USB_DevDisconnect>

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_PCD_Start+0x1c>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e020      	b.n	8002c2e <HAL_PCD_Start+0x5e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d109      	bne.n	8002c10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d005      	beq.n	8002c10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fd92 	bl	800673e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 fd4e 	bl	80056c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c36:	b590      	push	{r4, r7, lr}
 8002c38:	b08d      	sub	sp, #52	; 0x34
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f003 fe39 	bl	80068c4 <USB_GetMode>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 838e 	bne.w	8003376 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fd9d 	bl	800679e <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8384 	beq.w	8003374 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fd94 	bl	800679e <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d107      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f002 0202 	and.w	r2, r2, #2
 8002c8e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 fd82 	bl	800679e <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ca4:	d17b      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 fd88 	bl	80067c4 <USB_ReadDevAllOutEpInterrupt>
 8002cb4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002cb6:	e06f      	b.n	8002d98 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d064      	beq.n	8002d8c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fdad 	bl	800682c <USB_ReadDevOutEPInterrupt>
 8002cd2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cea:	461a      	mov	r2, r3
 8002cec:	2301      	movs	r3, #1
 8002cee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fe0e 	bl	8003914 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 ff0d 	bl	8003b24 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d16:	461a      	mov	r2, r3
 8002d18:	2308      	movs	r3, #8
 8002d1a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d32:	461a      	mov	r2, r3
 8002d34:	2310      	movs	r3, #16
 8002d36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d108      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d54:	461a      	mov	r2, r3
 8002d56:	2101      	movs	r1, #1
 8002d58:	f003 fdf8 	bl	800694c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d84:	461a      	mov	r2, r3
 8002d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3301      	adds	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d18c      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fcfb 	bl	800679e <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db2:	f040 80c4 	bne.w	8002f3e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fd1c 	bl	80067f8 <USB_ReadDevAllInEpInterrupt>
 8002dc0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dc6:	e0b6      	b.n	8002f36 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80ab 	beq.w	8002f2a <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 fd42 	bl	8006868 <USB_ReadDevInEPInterrupt>
 8002de4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05b      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	2201      	movs	r2, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69f9      	ldr	r1, [r7, #28]
 8002e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e10:	4013      	ands	r3, r2
 8002e12:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e20:	461a      	mov	r2, r3
 8002e22:	2301      	movs	r3, #1
 8002e24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d11b      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3348      	adds	r3, #72	; 0x48
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4403      	add	r3, r0
 8002e4e:	3344      	adds	r3, #68	; 0x44
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4419      	add	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4403      	add	r3, r0
 8002e62:	3348      	adds	r3, #72	; 0x48
 8002e64:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f011 fc56 	bl	801471e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d116      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d113      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x272>
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3350      	adds	r3, #80	; 0x50
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	f003 fd52 	bl	800694c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eda:	461a      	mov	r2, r3
 8002edc:	2310      	movs	r3, #16
 8002ede:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2340      	movs	r3, #64	; 0x40
 8002efa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f12:	461a      	mov	r2, r3
 8002f14:	2302      	movs	r3, #2
 8002f16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fc67 	bl	80037f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f af45 	bne.w	8002dc8 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fc2b 	bl	800679e <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f52:	d122      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fe89 	bl	8003c94 <HAL_PCDEx_LPM_Callback>
 8002f82:	e002      	b.n	8002f8a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f011 fc41 	bl	801480c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 fbfd 	bl	800679e <USB_ReadInterrupts>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fae:	d112      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f011 fbfd 	bl	80147c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002fd4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 fbdf 	bl	800679e <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fea:	f040 80a7 	bne.w	800313c <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2110      	movs	r1, #16
 8003008:	4618      	mov	r0, r3
 800300a:	f002 fd17 	bl	8005a3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300e:	2300      	movs	r3, #0
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003012:	e036      	b.n	8003082 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003020:	461a      	mov	r2, r3
 8003022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003026:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003038:	0151      	lsls	r1, r2, #5
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	440a      	add	r2, r1
 800303e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003046:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003054:	461a      	mov	r2, r3
 8003056:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800305a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306c:	0151      	lsls	r1, r2, #5
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	440a      	add	r2, r1
 8003072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800307a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	3301      	adds	r3, #1
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003088:	429a      	cmp	r2, r3
 800308a:	d3c3      	bcc.n	8003014 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800309a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800309e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d016      	beq.n	80030d6 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b8:	f043 030b 	orr.w	r3, r3, #11
 80030bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ce:	f043 030b 	orr.w	r3, r3, #11
 80030d2:	6453      	str	r3, [r2, #68]	; 0x44
 80030d4:	e015      	b.n	8003102 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fc:	f043 030b 	orr.w	r3, r3, #11
 8003100:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003110:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003114:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003126:	461a      	mov	r2, r3
 8003128:	f003 fc10 	bl	800694c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800313a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f003 fb2c 	bl	800679e <USB_ReadInterrupts>
 8003146:	4603      	mov	r3, r0
 8003148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003150:	d124      	bne.n	800319c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fbc2 	bl	80068e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f002 fccc 	bl	8005afe <USB_GetDevSpeed>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681c      	ldr	r4, [r3, #0]
 8003172:	f001 f997 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 8003176:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	4620      	mov	r0, r4
 8003182:	f002 f9fb 	bl	800557c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f011 faf1 	bl	801476e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800319a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fafc 	bl	800679e <USB_ReadInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d161      	bne.n	8003274 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0210 	bic.w	r2, r2, #16
 80031be:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f003 020f 	and.w	r2, r3, #15
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	0c5b      	lsrs	r3, r3, #17
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d124      	bne.n	8003236 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d035      	beq.n	8003264 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	6a38      	ldr	r0, [r7, #32]
 800320c:	f003 f974 	bl	80064f8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800321c:	441a      	add	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800322e:	441a      	add	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	619a      	str	r2, [r3, #24]
 8003234:	e016      	b.n	8003264 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	0c5b      	lsrs	r3, r3, #17
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	2b06      	cmp	r3, #6
 8003240:	d110      	bne.n	8003264 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003248:	2208      	movs	r2, #8
 800324a:	4619      	mov	r1, r3
 800324c:	6a38      	ldr	r0, [r7, #32]
 800324e:	f003 f953 	bl	80064f8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800325e:	441a      	add	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0210 	orr.w	r2, r2, #16
 8003272:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f003 fa90 	bl	800679e <USB_ReadInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b08      	cmp	r3, #8
 8003286:	d10a      	bne.n	800329e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f011 fa62 	bl	8014752 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f002 0208 	and.w	r2, r2, #8
 800329c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 fa7b 	bl	800679e <USB_ReadInterrupts>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b2:	d10f      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f011 fac4 	bl	801484c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fa60 	bl	800679e <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e8:	d10f      	bne.n	800330a <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	4619      	mov	r1, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f011 fa97 	bl	8014828 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 fa45 	bl	800679e <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331e:	d10a      	bne.n	8003336 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f011 faa5 	bl	8014870 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fa2f 	bl	800679e <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d115      	bne.n	8003376 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f011 fa95 	bl	801488c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	e000      	b.n	8003376 <HAL_PCD_IRQHandler+0x740>
      return;
 8003374:	bf00      	nop
    }
  }
}
 8003376:	3734      	adds	r7, #52	; 0x34
 8003378:	46bd      	mov	sp, r7
 800337a:	bd90      	pop	{r4, r7, pc}

0800337c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_PCD_SetAddress+0x1a>
 8003392:	2302      	movs	r3, #2
 8003394:	e013      	b.n	80033be <HAL_PCD_SetAddress+0x42>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 f99f 	bl	80066f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	4608      	mov	r0, r1
 80033d0:	4611      	mov	r1, r2
 80033d2:	461a      	mov	r2, r3
 80033d4:	4603      	mov	r3, r0
 80033d6:	70fb      	strb	r3, [r7, #3]
 80033d8:	460b      	mov	r3, r1
 80033da:	803b      	strh	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	da0f      	bge.n	800340c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	3338      	adds	r3, #56	; 0x38
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	705a      	strb	r2, [r3, #1]
 800340a:	e00f      	b.n	800342c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003438:	883a      	ldrh	r2, [r7, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	78ba      	ldrb	r2, [r7, #2]
 8003442:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003456:	78bb      	ldrb	r3, [r7, #2]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d102      	bne.n	8003462 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_PCD_EP_Open+0xaa>
 800346c:	2302      	movs	r3, #2
 800346e:	e00e      	b.n	800348e <HAL_PCD_EP_Open+0xc8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	4618      	mov	r0, r3
 8003480:	f002 fb62 	bl	8005b48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800348c:	7afb      	ldrb	r3, [r7, #11]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da0f      	bge.n	80034ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	3338      	adds	r3, #56	; 0x38
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	705a      	strb	r2, [r3, #1]
 80034c8:	e00f      	b.n	80034ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4413      	add	r3, r2
 80034e0:	3304      	adds	r3, #4
 80034e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_PCD_EP_Close+0x6e>
 8003500:	2302      	movs	r3, #2
 8003502:	e00e      	b.n	8003522 <HAL_PCD_EP_Close+0x8c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fba0 	bl	8005c58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	460b      	mov	r3, r1
 8003538:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353a:	7afb      	ldrb	r3, [r7, #11]
 800353c:	f003 020f 	and.w	r2, r3, #15
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2200      	movs	r2, #0
 8003564:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800356c:	7afb      	ldrb	r3, [r7, #11]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	b2da      	uxtb	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003586:	7afb      	ldrb	r3, [r7, #11]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	6979      	ldr	r1, [r7, #20]
 800359e:	f002 fe23 	bl	80061e8 <USB_EP0StartXfer>
 80035a2:	e008      	b.n	80035b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	6979      	ldr	r1, [r7, #20]
 80035b2:	f002 fbd5 	bl	8005d60 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	f003 020f 	and.w	r2, r3, #15
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	460b      	mov	r3, r1
 80035fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003600:	7afb      	ldrb	r3, [r7, #11]
 8003602:	f003 020f 	and.w	r2, r3, #15
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	3338      	adds	r3, #56	; 0x38
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	3304      	adds	r3, #4
 8003616:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2201      	movs	r2, #1
 800362e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003630:	7afb      	ldrb	r3, [r7, #11]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	b2da      	uxtb	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d102      	bne.n	800364a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800364a:	7afb      	ldrb	r3, [r7, #11]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	6979      	ldr	r1, [r7, #20]
 8003662:	f002 fdc1 	bl	80061e8 <USB_EP0StartXfer>
 8003666:	e008      	b.n	800367a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	6979      	ldr	r1, [r7, #20]
 8003676:	f002 fb73 	bl	8005d60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	d901      	bls.n	80036a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e050      	b.n	8003744 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da0f      	bge.n	80036ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 020f 	and.w	r2, r3, #15
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	3338      	adds	r3, #56	; 0x38
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	3304      	adds	r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	705a      	strb	r2, [r3, #1]
 80036c8:	e00d      	b.n	80036e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_PCD_EP_SetStall+0x82>
 8003702:	2302      	movs	r3, #2
 8003704:	e01e      	b.n	8003744 <HAL_PCD_EP_SetStall+0xc0>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	4618      	mov	r0, r3
 8003716:	f002 ff18 	bl	800654a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	b2d9      	uxtb	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003734:	461a      	mov	r2, r3
 8003736:	f003 f909 	bl	800694c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 020f 	and.w	r2, r3, #15
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d901      	bls.n	800376a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e042      	b.n	80037f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800376a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da0f      	bge.n	8003792 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	3338      	adds	r3, #56	; 0x38
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	705a      	strb	r2, [r3, #1]
 8003790:	e00f      	b.n	80037b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	3304      	adds	r3, #4
 80037aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_PCD_EP_ClrStall+0x86>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e00e      	b.n	80037f0 <HAL_PCD_EP_ClrStall+0xa4>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f002 ff20 	bl	8006626 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	3338      	adds	r3, #56	; 0x38
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4413      	add	r3, r2
 800381c:	3304      	adds	r3, #4
 800381e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d901      	bls.n	8003830 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e06c      	b.n	800390a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	429a      	cmp	r2, r3
 8003844:	d902      	bls.n	800384c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3303      	adds	r3, #3
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003854:	e02b      	b.n	80038ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	429a      	cmp	r2, r3
 800386a:	d902      	bls.n	8003872 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3303      	adds	r3, #3
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68d9      	ldr	r1, [r3, #12]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800388a:	b2db      	uxtb	r3, r3
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4603      	mov	r3, r0
 8003890:	6978      	ldr	r0, [r7, #20]
 8003892:	f002 fdfc 	bl	800648e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	441a      	add	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	441a      	add	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d809      	bhi.n	80038d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d203      	bcs.n	80038d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1be      	bne.n	8003856 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d811      	bhi.n	8003908 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	2201      	movs	r2, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	6939      	ldr	r1, [r7, #16]
 8003900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003904:	4013      	ands	r3, r2
 8003906:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	333c      	adds	r3, #60	; 0x3c
 800392c:	3304      	adds	r3, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b01      	cmp	r3, #1
 8003948:	f040 80b3 	bne.w	8003ab2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a70      	ldr	r2, [pc, #448]	; (8003b1c <PCD_EP_OutXfrComplete_int+0x208>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d90e      	bls.n	800397c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f010 fea1 	bl	80146c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800398c:	461a      	mov	r2, r3
 800398e:	2101      	movs	r1, #1
 8003990:	f002 ffdc 	bl	800694c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a0:	461a      	mov	r2, r3
 80039a2:	2308      	movs	r3, #8
 80039a4:	6093      	str	r3, [r2, #8]
 80039a6:	e0b3      	b.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	2320      	movs	r3, #32
 80039c2:	6093      	str	r3, [r2, #8]
 80039c4:	e0a4      	b.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 809f 	bne.w	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a51      	ldr	r2, [pc, #324]	; (8003b1c <PCD_EP_OutXfrComplete_int+0x208>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d90f      	bls.n	80039fa <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	461a      	mov	r2, r3
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	6093      	str	r3, [r2, #8]
 80039f8:	e08a      	b.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a0c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	0159      	lsls	r1, r3, #5
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	440b      	add	r3, r1
 8003a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a20:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4403      	add	r3, r0
 8003a30:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a34:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a48:	6819      	ldr	r1, [r3, #0]
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4403      	add	r3, r0
 8003a58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4419      	add	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4403      	add	r3, r0
 8003a6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a72:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f010 fe34 	bl	80146e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d144      	bne.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d138      	bne.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2101      	movs	r1, #1
 8003aac:	f002 ff4e 	bl	800694c <USB_EP0_OutStart>
 8003ab0:	e02e      	b.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d124      	bne.n	8003b04 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad6:	6093      	str	r3, [r2, #8]
 8003ad8:	e01a      	b.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	461a      	mov	r2, r3
 8003af2:	2320      	movs	r3, #32
 8003af4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f010 fdf3 	bl	80146e8 <HAL_PCD_DataOutStageCallback>
 8003b02:	e005      	b.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f010 fdec 	bl	80146e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	4f54300a 	.word	0x4f54300a
 8003b20:	4f54310a 	.word	0x4f54310a

08003b24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	333c      	adds	r3, #60	; 0x3c
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d113      	bne.n	8003b82 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <PCD_EP_OutSetupPacket_int+0xb8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d922      	bls.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01d      	beq.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	e012      	b.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10e      	bne.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f010 fd8b 	bl	80146c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <PCD_EP_OutSetupPacket_int+0xb8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d90c      	bls.n	8003bd0 <PCD_EP_OutSetupPacket_int+0xac>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d108      	bne.n	8003bd0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2101      	movs	r1, #1
 8003bcc:	f002 febe 	bl	800694c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	4f54300a 	.word	0x4f54300a
 8003be0:	4f54310a 	.word	0x4f54310a

08003be4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c02:	883b      	ldrh	r3, [r7, #0]
 8003c04:	0419      	lsls	r1, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c10:	e028      	b.n	8003c64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	e00d      	b.n	8003c42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	3340      	adds	r3, #64	; 0x40
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4413      	add	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d3ec      	bcc.n	8003c26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c4c:	883b      	ldrh	r3, [r7, #0]
 8003c4e:	0418      	lsls	r0, r3, #16
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4302      	orrs	r2, r0
 8003c5c:	3340      	adds	r3, #64	; 0x40
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	887a      	ldrh	r2, [r7, #2]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e22d      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d075      	beq.n	8003db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cca:	4ba3      	ldr	r3, [pc, #652]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d00c      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd6:	4ba0      	ldr	r3, [pc, #640]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d112      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce2:	4b9d      	ldr	r3, [pc, #628]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cee:	d10b      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	4b99      	ldr	r3, [pc, #612]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05b      	beq.n	8003db4 <HAL_RCC_OscConfig+0x108>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d157      	bne.n	8003db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e208      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d106      	bne.n	8003d20 <HAL_RCC_OscConfig+0x74>
 8003d12:	4b91      	ldr	r3, [pc, #580]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a90      	ldr	r2, [pc, #576]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e01d      	b.n	8003d5c <HAL_RCC_OscConfig+0xb0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x98>
 8003d2a:	4b8b      	ldr	r3, [pc, #556]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a8a      	ldr	r2, [pc, #552]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a87      	ldr	r2, [pc, #540]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0xb0>
 8003d44:	4b84      	ldr	r3, [pc, #528]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a83      	ldr	r2, [pc, #524]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b81      	ldr	r3, [pc, #516]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a80      	ldr	r2, [pc, #512]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d013      	beq.n	8003d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fd fb32 	bl	80013cc <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fd fb2e 	bl	80013cc <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1cd      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0xc0>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fb1e 	bl	80013cc <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fd fb1a 	bl	80013cc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	; 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e1b9      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da6:	4b6c      	ldr	r3, [pc, #432]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0xe8>
 8003db2:	e000      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d063      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dc2:	4b65      	ldr	r3, [pc, #404]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dce:	4b62      	ldr	r3, [pc, #392]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d11c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dda:	4b5f      	ldr	r3, [pc, #380]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d116      	bne.n	8003e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de6:	4b5c      	ldr	r3, [pc, #368]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_RCC_OscConfig+0x152>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d001      	beq.n	8003dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e18d      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfe:	4b56      	ldr	r3, [pc, #344]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4952      	ldr	r1, [pc, #328]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e12:	e03a      	b.n	8003e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e1c:	4b4f      	ldr	r3, [pc, #316]	; (8003f5c <HAL_RCC_OscConfig+0x2b0>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd fad3 	bl	80013cc <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e2a:	f7fd facf 	bl	80013cc <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e16e      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3c:	4b46      	ldr	r3, [pc, #280]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e48:	4b43      	ldr	r3, [pc, #268]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4940      	ldr	r1, [pc, #256]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]
 8003e5c:	e015      	b.n	8003e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5e:	4b3f      	ldr	r3, [pc, #252]	; (8003f5c <HAL_RCC_OscConfig+0x2b0>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd fab2 	bl	80013cc <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e6c:	f7fd faae 	bl	80013cc <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e14d      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d030      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e9e:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <HAL_RCC_OscConfig+0x2b4>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fd fa92 	bl	80013cc <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eac:	f7fd fa8e 	bl	80013cc <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e12d      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x200>
 8003eca:	e015      	b.n	8003ef8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_RCC_OscConfig+0x2b4>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fa7b 	bl	80013cc <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eda:	f7fd fa77 	bl	80013cc <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e116      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80a0 	beq.w	8004046 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0a:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6413      	str	r3, [r2, #64]	; 0x40
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d121      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4e:	f7fd fa3d 	bl	80013cc <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f54:	e011      	b.n	8003f7a <HAL_RCC_OscConfig+0x2ce>
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	42470000 	.word	0x42470000
 8003f60:	42470e80 	.word	0x42470e80
 8003f64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f68:	f7fd fa30 	bl	80013cc <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0cf      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <HAL_RCC_OscConfig+0x478>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d106      	bne.n	8003f9c <HAL_RCC_OscConfig+0x2f0>
 8003f8e:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a65      	ldr	r2, [pc, #404]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9a:	e01c      	b.n	8003fd6 <HAL_RCC_OscConfig+0x32a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	d10c      	bne.n	8003fbe <HAL_RCC_OscConfig+0x312>
 8003fa4:	4b60      	ldr	r3, [pc, #384]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a5f      	ldr	r2, [pc, #380]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb0:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a5c      	ldr	r2, [pc, #368]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	e00b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x32a>
 8003fbe:	4b5a      	ldr	r3, [pc, #360]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	4a59      	ldr	r2, [pc, #356]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fca:	4b57      	ldr	r3, [pc, #348]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	4a56      	ldr	r2, [pc, #344]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d015      	beq.n	800400a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fd f9f5 	bl	80013cc <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7fd f9f1 	bl	80013cc <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e08e      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffc:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ee      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x33a>
 8004008:	e014      	b.n	8004034 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400a:	f7fd f9df 	bl	80013cc <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fd f9db 	bl	80013cc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e078      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004028:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ee      	bne.n	8004012 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403a:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a3a      	ldr	r2, [pc, #232]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d064      	beq.n	8004118 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800404e:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b08      	cmp	r3, #8
 8004058:	d05c      	beq.n	8004114 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d141      	bne.n	80040e6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_RCC_OscConfig+0x480>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fd f9b0 	bl	80013cc <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd f9ac 	bl	80013cc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e04b      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	019b      	lsls	r3, r3, #6
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	3b01      	subs	r3, #1
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	491d      	ldr	r1, [pc, #116]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCC_OscConfig+0x480>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040be:	f7fd f985 	bl	80013cc <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c6:	f7fd f981 	bl	80013cc <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e020      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x41a>
 80040e4:	e018      	b.n	8004118 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_OscConfig+0x480>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fd f96e 	bl	80013cc <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fd f96a 	bl	80013cc <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e009      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_RCC_OscConfig+0x47c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x448>
 8004112:	e001      	b.n	8004118 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40007000 	.word	0x40007000
 8004128:	40023800 	.word	0x40023800
 800412c:	42470060 	.word	0x42470060

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0ca      	b.n	80042da <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90c      	bls.n	800416c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b64      	ldr	r3, [pc, #400]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b62      	ldr	r3, [pc, #392]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b6      	b.n	80042da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b58      	ldr	r3, [pc, #352]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a57      	ldr	r2, [pc, #348]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800418e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b52      	ldr	r3, [pc, #328]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a51      	ldr	r2, [pc, #324]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494c      	ldr	r1, [pc, #304]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07d      	b.n	80042da <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06d      	b.n	80042da <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e065      	b.n	80042da <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4933      	ldr	r1, [pc, #204]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004220:	f7fd f8d4 	bl	80013cc <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fd f8d0 	bl	80013cc <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e04d      	b.n	80042da <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d20c      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e030      	b.n	80042da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4915      	ldr	r1, [pc, #84]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490d      	ldr	r1, [pc, #52]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f81d 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042ba:	4601      	mov	r1, r0
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	5cd3      	ldrb	r3, [r2, r3]
 80042ca:	fa21 f303 	lsr.w	r3, r1, r3
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80042d2:	2000      	movs	r0, #0
 80042d4:	f7fc fe0e 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40023c00 	.word	0x40023c00
 80042e8:	40023800 	.word	0x40023800
 80042ec:	080178e0 	.word	0x080178e0
 80042f0:	20000000 	.word	0x20000000

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	2300      	movs	r3, #0
 8004304:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800430a:	4b63      	ldr	r3, [pc, #396]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b04      	cmp	r3, #4
 8004314:	d007      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x32>
 8004316:	2b08      	cmp	r3, #8
 8004318:	d008      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x38>
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 80b4 	bne.w	8004488 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b5e      	ldr	r3, [pc, #376]	; (800449c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004322:	60bb      	str	r3, [r7, #8]
       break;
 8004324:	e0b3      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004326:	4b5e      	ldr	r3, [pc, #376]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004328:	60bb      	str	r3, [r7, #8]
      break;
 800432a:	e0b0      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4b5a      	ldr	r3, [pc, #360]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004336:	4b58      	ldr	r3, [pc, #352]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d04a      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b55      	ldr	r3, [pc, #340]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	ea03 0501 	and.w	r5, r3, r1
 8004358:	ea04 0602 	and.w	r6, r4, r2
 800435c:	4629      	mov	r1, r5
 800435e:	4632      	mov	r2, r6
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	0154      	lsls	r4, r2, #5
 800436a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800436e:	014b      	lsls	r3, r1, #5
 8004370:	4619      	mov	r1, r3
 8004372:	4622      	mov	r2, r4
 8004374:	1b49      	subs	r1, r1, r5
 8004376:	eb62 0206 	sbc.w	r2, r2, r6
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	f04f 0400 	mov.w	r4, #0
 8004382:	0194      	lsls	r4, r2, #6
 8004384:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004388:	018b      	lsls	r3, r1, #6
 800438a:	1a5b      	subs	r3, r3, r1
 800438c:	eb64 0402 	sbc.w	r4, r4, r2
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	00e2      	lsls	r2, r4, #3
 800439a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800439e:	00d9      	lsls	r1, r3, #3
 80043a0:	460b      	mov	r3, r1
 80043a2:	4614      	mov	r4, r2
 80043a4:	195b      	adds	r3, r3, r5
 80043a6:	eb44 0406 	adc.w	r4, r4, r6
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	0262      	lsls	r2, r4, #9
 80043b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043b8:	0259      	lsls	r1, r3, #9
 80043ba:	460b      	mov	r3, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	4621      	mov	r1, r4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f04f 0400 	mov.w	r4, #0
 80043c8:	461a      	mov	r2, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	f7fb ff60 	bl	8000290 <__aeabi_uldivmod>
 80043d0:	4603      	mov	r3, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e049      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d8:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	099b      	lsrs	r3, r3, #6
 80043de:	f04f 0400 	mov.w	r4, #0
 80043e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	ea03 0501 	and.w	r5, r3, r1
 80043ee:	ea04 0602 	and.w	r6, r4, r2
 80043f2:	4629      	mov	r1, r5
 80043f4:	4632      	mov	r2, r6
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f04f 0400 	mov.w	r4, #0
 80043fe:	0154      	lsls	r4, r2, #5
 8004400:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004404:	014b      	lsls	r3, r1, #5
 8004406:	4619      	mov	r1, r3
 8004408:	4622      	mov	r2, r4
 800440a:	1b49      	subs	r1, r1, r5
 800440c:	eb62 0206 	sbc.w	r2, r2, r6
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	f04f 0400 	mov.w	r4, #0
 8004418:	0194      	lsls	r4, r2, #6
 800441a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800441e:	018b      	lsls	r3, r1, #6
 8004420:	1a5b      	subs	r3, r3, r1
 8004422:	eb64 0402 	sbc.w	r4, r4, r2
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	00e2      	lsls	r2, r4, #3
 8004430:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004434:	00d9      	lsls	r1, r3, #3
 8004436:	460b      	mov	r3, r1
 8004438:	4614      	mov	r4, r2
 800443a:	195b      	adds	r3, r3, r5
 800443c:	eb44 0406 	adc.w	r4, r4, r6
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	02a2      	lsls	r2, r4, #10
 800444a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800444e:	0299      	lsls	r1, r3, #10
 8004450:	460b      	mov	r3, r1
 8004452:	4614      	mov	r4, r2
 8004454:	4618      	mov	r0, r3
 8004456:	4621      	mov	r1, r4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f04f 0400 	mov.w	r4, #0
 800445e:	461a      	mov	r2, r3
 8004460:	4623      	mov	r3, r4
 8004462:	f7fb ff15 	bl	8000290 <__aeabi_uldivmod>
 8004466:	4603      	mov	r3, r0
 8004468:	460c      	mov	r4, r1
 800446a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	3301      	adds	r3, #1
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	60bb      	str	r3, [r7, #8]
      break;
 8004486:	e002      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800448a:	60bb      	str	r3, [r7, #8]
      break;
 800448c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448e:	68bb      	ldr	r3, [r7, #8]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000000 	.word	0x20000000

080044bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044c0:	f7ff fff0 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c4:	4601      	mov	r1, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0b5b      	lsrs	r3, r3, #13
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4a03      	ldr	r2, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d2:	5cd3      	ldrb	r3, [r2, r3]
 80044d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40023800 	.word	0x40023800
 80044e0:	080178f0 	.word	0x080178f0

080044e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	220f      	movs	r2, #15
 80044f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <HAL_RCC_GetClockConfig+0x5c>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0203 	and.w	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <HAL_RCC_GetClockConfig+0x5c>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <HAL_RCC_GetClockConfig+0x5c>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_RCC_GetClockConfig+0x5c>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	08db      	lsrs	r3, r3, #3
 800451e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004526:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_RCC_GetClockConfig+0x60>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	601a      	str	r2, [r3, #0]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	40023c00 	.word	0x40023c00

08004548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e01d      	b.n	8004596 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f815 	bl	800459e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 f968 	bl	800485c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d007      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b02      	cmp	r3, #2
 800460e:	d122      	bne.n	8004656 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	d11b      	bne.n	8004656 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0202 	mvn.w	r2, #2
 8004626:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8ee 	bl	800481e <HAL_TIM_IC_CaptureCallback>
 8004642:	e005      	b.n	8004650 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8e0 	bl	800480a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8f1 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d122      	bne.n	80046aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b04      	cmp	r3, #4
 8004670:	d11b      	bne.n	80046aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0204 	mvn.w	r2, #4
 800467a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8c4 	bl	800481e <HAL_TIM_IC_CaptureCallback>
 8004696:	e005      	b.n	80046a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f8b6 	bl	800480a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8c7 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d122      	bne.n	80046fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d11b      	bne.n	80046fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f06f 0208 	mvn.w	r2, #8
 80046ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2204      	movs	r2, #4
 80046d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f89a 	bl	800481e <HAL_TIM_IC_CaptureCallback>
 80046ea:	e005      	b.n	80046f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f88c 	bl	800480a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f89d 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b10      	cmp	r3, #16
 800470a:	d122      	bne.n	8004752 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b10      	cmp	r3, #16
 8004718:	d11b      	bne.n	8004752 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f06f 0210 	mvn.w	r2, #16
 8004722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2208      	movs	r2, #8
 8004728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f870 	bl	800481e <HAL_TIM_IC_CaptureCallback>
 800473e:	e005      	b.n	800474c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f862 	bl	800480a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f873 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10e      	bne.n	800477e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f06f 0201 	mvn.w	r2, #1
 8004776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fc fb75 	bl	8000e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b80      	cmp	r3, #128	; 0x80
 800478a:	d10e      	bne.n	80047aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d107      	bne.n	80047aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f903 	bl	80049b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d10e      	bne.n	80047d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d107      	bne.n	80047d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f838 	bl	8004846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d10e      	bne.n	8004802 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d107      	bne.n	8004802 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f06f 0220 	mvn.w	r2, #32
 80047fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8cd 	bl	800499c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a40      	ldr	r2, [pc, #256]	; (8004970 <TIM_Base_SetConfig+0x114>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487a:	d00f      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3d      	ldr	r2, [pc, #244]	; (8004974 <TIM_Base_SetConfig+0x118>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3c      	ldr	r2, [pc, #240]	; (8004978 <TIM_Base_SetConfig+0x11c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a3b      	ldr	r2, [pc, #236]	; (800497c <TIM_Base_SetConfig+0x120>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a3a      	ldr	r2, [pc, #232]	; (8004980 <TIM_Base_SetConfig+0x124>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d108      	bne.n	80048ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2f      	ldr	r2, [pc, #188]	; (8004970 <TIM_Base_SetConfig+0x114>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d02b      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048bc:	d027      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2c      	ldr	r2, [pc, #176]	; (8004974 <TIM_Base_SetConfig+0x118>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d023      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2b      	ldr	r2, [pc, #172]	; (8004978 <TIM_Base_SetConfig+0x11c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01f      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2a      	ldr	r2, [pc, #168]	; (800497c <TIM_Base_SetConfig+0x120>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01b      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a29      	ldr	r2, [pc, #164]	; (8004980 <TIM_Base_SetConfig+0x124>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d017      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a28      	ldr	r2, [pc, #160]	; (8004984 <TIM_Base_SetConfig+0x128>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a27      	ldr	r2, [pc, #156]	; (8004988 <TIM_Base_SetConfig+0x12c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00f      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a26      	ldr	r2, [pc, #152]	; (800498c <TIM_Base_SetConfig+0x130>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00b      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a25      	ldr	r2, [pc, #148]	; (8004990 <TIM_Base_SetConfig+0x134>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a24      	ldr	r2, [pc, #144]	; (8004994 <TIM_Base_SetConfig+0x138>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a23      	ldr	r2, [pc, #140]	; (8004998 <TIM_Base_SetConfig+0x13c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d108      	bne.n	8004920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <TIM_Base_SetConfig+0x114>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0xf8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a0c      	ldr	r2, [pc, #48]	; (8004980 <TIM_Base_SetConfig+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	615a      	str	r2, [r3, #20]
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40000c00 	.word	0x40000c00
 8004980:	40010400 	.word	0x40010400
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800
 8004990:	40001800 	.word	0x40001800
 8004994:	40001c00 	.word	0x40001c00
 8004998:	40002000 	.word	0x40002000

0800499c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	fab3 f383 	clz	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	2103      	movs	r1, #3
 80049ec:	fa01 f303 	lsl.w	r3, r1, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	61bb      	str	r3, [r7, #24]
  return result;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	401a      	ands	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b089      	sub	sp, #36	; 0x24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	613b      	str	r3, [r7, #16]
  return result;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	fab3 f383 	clz	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	2103      	movs	r1, #3
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	401a      	ands	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	61bb      	str	r3, [r7, #24]
  return result;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004aa4:	bf00      	nop
 8004aa6:	3724      	adds	r7, #36	; 0x24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	613b      	str	r3, [r7, #16]
  return result;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	fa93 f3a3 	rbit	r3, r3
 8004aea:	61bb      	str	r3, [r7, #24]
  return result;
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	fab3 f383 	clz	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	60da      	str	r2, [r3, #12]
}
 8004b02:	bf00      	nop
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b089      	sub	sp, #36	; 0x24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1a      	ldr	r2, [r3, #32]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	fa93 f3a3 	rbit	r3, r3
 8004b28:	613b      	str	r3, [r7, #16]
  return result;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	fab3 f383 	clz	r3, r3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	210f      	movs	r1, #15
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	401a      	ands	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	fa93 f3a3 	rbit	r3, r3
 8004b48:	61bb      	str	r3, [r7, #24]
  return result;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	fab3 f383 	clz	r3, r3
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004b60:	bf00      	nop
 8004b62:	3724      	adds	r7, #36	; 0x24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	; 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	fa93 f3a3 	rbit	r3, r3
 8004b88:	613b      	str	r3, [r7, #16]
  return result;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	210f      	movs	r1, #15
 8004b96:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	fa93 f3a3 	rbit	r3, r3
 8004baa:	61bb      	str	r3, [r7, #24]
  return result;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004bc2:	bf00      	nop
 8004bc4:	3724      	adds	r7, #36	; 0x24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	613b      	str	r3, [r7, #16]
  return result;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	fab3 f383 	clz	r3, r3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004bf8:	e049      	b.n	8004c8e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	2101      	movs	r1, #1
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d03b      	beq.n	8004c88 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	461a      	mov	r2, r3
 8004c16:	69b9      	ldr	r1, [r7, #24]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff fed3 	bl	80049c4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d003      	beq.n	8004c2e <LL_GPIO_Init+0x60>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d106      	bne.n	8004c3c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	461a      	mov	r2, r3
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ff0b 	bl	8004a52 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	461a      	mov	r2, r3
 8004c42:	69b9      	ldr	r1, [r7, #24]
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff33 	bl	8004ab0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d11a      	bne.n	8004c88 <LL_GPIO_Init+0xba>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	60bb      	str	r3, [r7, #8]
  return result;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b07      	cmp	r3, #7
 8004c68:	d807      	bhi.n	8004c7a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff ff4b 	bl	8004b0e <LL_GPIO_SetAFPin_0_7>
 8004c78:	e006      	b.n	8004c88 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ff72 	bl	8004b6c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1ae      	bne.n	8004bfa <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d003      	beq.n	8004cac <LL_GPIO_Init+0xde>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d107      	bne.n	8004cbc <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff feb3 	bl	8004a22 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <LL_I2C_Enable>:
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <LL_I2C_Disable>:
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 0201 	bic.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_I2C_ConfigFilters>:
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f023 021f 	bic.w	r2, r3, #31
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_I2C_SetOwnAddress1>:
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	609a      	str	r2, [r3, #8]
}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8004d64:	b490      	push	{r4, r7}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8004d72:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8004d74:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4a3f      	ldr	r2, [pc, #252]	; (8004e78 <LL_I2C_ConfigSpeed+0x114>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d88:	ea44 0203 	orr.w	r2, r4, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4938      	ldr	r1, [pc, #224]	; (8004e7c <LL_I2C_ConfigSpeed+0x118>)
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	d801      	bhi.n	8004da4 <LL_I2C_ConfigSpeed+0x40>
 8004da0:	1c63      	adds	r3, r4, #1
 8004da2:	e008      	b.n	8004db6 <LL_I2C_ConfigSpeed+0x52>
 8004da4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004da8:	fb03 f304 	mul.w	r3, r3, r4
 8004dac:	4934      	ldr	r1, [pc, #208]	; (8004e80 <LL_I2C_ConfigSpeed+0x11c>)
 8004dae:	fba1 1303 	umull	r1, r3, r1, r3
 8004db2:	099b      	lsrs	r3, r3, #6
 8004db4:	3301      	adds	r3, #1
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a2f      	ldr	r2, [pc, #188]	; (8004e7c <LL_I2C_ConfigSpeed+0x118>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d939      	bls.n	8004e38 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d117      	bne.n	8004dfa <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df2:	e01d      	b.n	8004e30 <LL_I2C_ConfigSpeed+0xcc>
 8004df4:	f248 0301 	movw	r3, #32769	; 0x8001
 8004df8:	e01a      	b.n	8004e30 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009a      	lsls	r2, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2a:	e001      	b.n	8004e30 <LL_I2C_ConfigSpeed+0xcc>
 8004e2c:	f248 0301 	movw	r3, #32769	; 0x8001
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	ea43 0402 	orr.w	r4, r3, r2
 8004e36:	e010      	b.n	8004e5a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d905      	bls.n	8004e56 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	e000      	b.n	8004e58 <LL_I2C_ConfigSpeed+0xf4>
 8004e56:	2304      	movs	r3, #4
 8004e58:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e66:	ea44 0203 	orr.w	r2, r4, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	61da      	str	r2, [r3, #28]
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc90      	pop	{r4, r7}
 8004e76:	4770      	bx	lr
 8004e78:	431bde83 	.word	0x431bde83
 8004e7c:	000186a0 	.word	0x000186a0
 8004e80:	10624dd3 	.word	0x10624dd3

08004e84 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 021a 	bic.w	r2, r3, #26
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff ff03 	bl	8004ce6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f89d 	bl	8005024 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68d9      	ldr	r1, [r3, #12]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff06 	bl	8004d06 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff ff2d 	bl	8004d64 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6959      	ldr	r1, [r3, #20]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	461a      	mov	r2, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff0c 	bl	8004d32 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ffaf 	bl	8004e84 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fecd 	bl	8004cc6 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff ffb9 	bl	8004eaa <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <LL_RCC_GetSysClkSource+0x18>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 030c 	and.w	r3, r3, #12
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800

08004f60 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <LL_RCC_GetAHBPrescaler+0x18>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40023800 	.word	0x40023800

08004f7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800

08004f98 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40023800 	.word	0x40023800

08004fb4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <LL_RCC_PLL_GetMainSource+0x18>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800

08004fd0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <LL_RCC_PLL_GetN+0x18>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	099b      	lsrs	r3, r3, #6
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40023800 	.word	0x40023800

08004fec <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <LL_RCC_PLL_GetP+0x18>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800

08005008 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <LL_RCC_PLL_GetDivider+0x18>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40023800 	.word	0x40023800

08005024 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800502c:	f000 f820 	bl	8005070 <RCC_GetSystemClockFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f83e 	bl	80050bc <RCC_GetHCLKClockFreq>
 8005040:	4602      	mov	r2, r0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f84c 	bl	80050e8 <RCC_GetPCLK1ClockFreq>
 8005050:	4602      	mov	r2, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f858 	bl	8005110 <RCC_GetPCLK2ClockFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60da      	str	r2, [r3, #12]
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800507a:	f7ff ff63 	bl	8004f44 <LL_RCC_GetSysClkSource>
 800507e:	4603      	mov	r3, r0
 8005080:	2b04      	cmp	r3, #4
 8005082:	d006      	beq.n	8005092 <RCC_GetSystemClockFreq+0x22>
 8005084:	2b08      	cmp	r3, #8
 8005086:	d007      	beq.n	8005098 <RCC_GetSystemClockFreq+0x28>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800508c:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <RCC_GetSystemClockFreq+0x44>)
 800508e:	607b      	str	r3, [r7, #4]
      break;
 8005090:	e00a      	b.n	80050a8 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <RCC_GetSystemClockFreq+0x48>)
 8005094:	607b      	str	r3, [r7, #4]
      break;
 8005096:	e007      	b.n	80050a8 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005098:	2008      	movs	r0, #8
 800509a:	f000 f84d 	bl	8005138 <RCC_PLL_GetFreqDomain_SYS>
 800509e:	6078      	str	r0, [r7, #4]
      break;
 80050a0:	e002      	b.n	80050a8 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <RCC_GetSystemClockFreq+0x44>)
 80050a4:	607b      	str	r3, [r7, #4]
      break;
 80050a6:	bf00      	nop
  }

  return frequency;
 80050a8:	687b      	ldr	r3, [r7, #4]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	007a1200 	.word	0x007a1200

080050bc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80050c4:	f7ff ff4c 	bl	8004f60 <LL_RCC_GetAHBPrescaler>
 80050c8:	4603      	mov	r3, r0
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <RCC_GetHCLKClockFreq+0x28>)
 80050d2:	5cd3      	ldrb	r3, [r2, r3]
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	40d3      	lsrs	r3, r2
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	080178e0 	.word	0x080178e0

080050e8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80050f0:	f7ff ff44 	bl	8004f7c <LL_RCC_GetAPB1Prescaler>
 80050f4:	4603      	mov	r3, r0
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	4a04      	ldr	r2, [pc, #16]	; (800510c <RCC_GetPCLK1ClockFreq+0x24>)
 80050fa:	5cd3      	ldrb	r3, [r2, r3]
 80050fc:	461a      	mov	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	40d3      	lsrs	r3, r2
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	080178f0 	.word	0x080178f0

08005110 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005118:	f7ff ff3e 	bl	8004f98 <LL_RCC_GetAPB2Prescaler>
 800511c:	4603      	mov	r3, r0
 800511e:	0b5b      	lsrs	r3, r3, #13
 8005120:	4a04      	ldr	r2, [pc, #16]	; (8005134 <RCC_GetPCLK2ClockFreq+0x24>)
 8005122:	5cd3      	ldrb	r3, [r2, r3]
 8005124:	461a      	mov	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	40d3      	lsrs	r3, r2
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	080178f0 	.word	0x080178f0

08005138 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800514c:	f7ff ff32 	bl	8004fb4 <LL_RCC_PLL_GetMainSource>
 8005150:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8005158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515c:	d003      	beq.n	8005166 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800515e:	e005      	b.n	800516c <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005160:	4b12      	ldr	r3, [pc, #72]	; (80051ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005162:	617b      	str	r3, [r7, #20]
      break;
 8005164:	e005      	b.n	8005172 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005168:	617b      	str	r3, [r7, #20]
      break;
 800516a:	e002      	b.n	8005172 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 800516c:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800516e:	617b      	str	r3, [r7, #20]
      break;
 8005170:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d113      	bne.n	80051a0 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005178:	f7ff ff46 	bl	8005008 <LL_RCC_PLL_GetDivider>
 800517c:	4602      	mov	r2, r0
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	fbb3 f4f2 	udiv	r4, r3, r2
 8005184:	f7ff ff24 	bl	8004fd0 <LL_RCC_PLL_GetN>
 8005188:	4603      	mov	r3, r0
 800518a:	fb03 f404 	mul.w	r4, r3, r4
 800518e:	f7ff ff2d 	bl	8004fec <LL_RCC_PLL_GetP>
 8005192:	4603      	mov	r3, r0
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	3301      	adds	r3, #1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	fbb4 f3f3 	udiv	r3, r4, r3
 800519e:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80051a0:	693b      	ldr	r3, [r7, #16]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd90      	pop	{r4, r7, pc}
 80051aa:	bf00      	nop
 80051ac:	00f42400 	.word	0x00f42400
 80051b0:	007a1200 	.word	0x007a1200

080051b4 <LL_USART_IsEnabled>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c8:	bf0c      	ite	eq
 80051ca:	2301      	moveq	r3, #1
 80051cc:	2300      	movne	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <LL_USART_SetStopBitsLength>:
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	611a      	str	r2, [r3, #16]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <LL_USART_SetHWFlowCtrl>:
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	615a      	str	r2, [r3, #20]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_USART_SetBaudRate>:
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523c:	d152      	bne.n	80052e4 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009a      	lsls	r2, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	4a4f      	ldr	r2, [pc, #316]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	b29b      	uxth	r3, r3
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	b299      	uxth	r1, r3
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009a      	lsls	r2, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	fbb2 f2f3 	udiv	r2, r2, r3
 8005274:	4b46      	ldr	r3, [pc, #280]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 8005276:	fba3 0302 	umull	r0, r3, r3, r2
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2064      	movs	r0, #100	; 0x64
 800527e:	fb00 f303 	mul.w	r3, r0, r3
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	3332      	adds	r3, #50	; 0x32
 8005288:	4a41      	ldr	r2, [pc, #260]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	b29b      	uxth	r3, r3
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800529a:	b29b      	uxth	r3, r3
 800529c:	440b      	add	r3, r1
 800529e:	b299      	uxth	r1, r3
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009a      	lsls	r2, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b4:	4b36      	ldr	r3, [pc, #216]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 80052b6:	fba3 0302 	umull	r0, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2064      	movs	r0, #100	; 0x64
 80052be:	fb00 f303 	mul.w	r3, r0, r3
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	3332      	adds	r3, #50	; 0x32
 80052c8:	4a31      	ldr	r2, [pc, #196]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	440b      	add	r3, r1
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	609a      	str	r2, [r3, #8]
}
 80052e2:	e04f      	b.n	8005384 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009a      	lsls	r2, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	4a25      	ldr	r2, [pc, #148]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	b29b      	uxth	r3, r3
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	b299      	uxth	r1, r3
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009a      	lsls	r2, r3, #2
 8005310:	441a      	add	r2, r3
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	fbb2 f2f3 	udiv	r2, r2, r3
 800531a:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 800531c:	fba3 0302 	umull	r0, r3, r3, r2
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	2064      	movs	r0, #100	; 0x64
 8005324:	fb00 f303 	mul.w	r3, r0, r3
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	3332      	adds	r3, #50	; 0x32
 800532e:	4a18      	ldr	r2, [pc, #96]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	b29b      	uxth	r3, r3
 8005338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800533c:	b29b      	uxth	r3, r3
 800533e:	440b      	add	r3, r1
 8005340:	b299      	uxth	r1, r3
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009a      	lsls	r2, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	fbb2 f2f3 	udiv	r2, r2, r3
 8005356:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 8005358:	fba3 0302 	umull	r0, r3, r3, r2
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	2064      	movs	r0, #100	; 0x64
 8005360:	fb00 f303 	mul.w	r3, r0, r3
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	3332      	adds	r3, #50	; 0x32
 800536a:	4a09      	ldr	r2, [pc, #36]	; (8005390 <LL_USART_SetBaudRate+0x168>)
 800536c:	fba2 2303 	umull	r2, r3, r2, r3
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	b29b      	uxth	r3, r3
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	b29b      	uxth	r3, r3
 800537a:	440b      	add	r3, r1
 800537c:	b29b      	uxth	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	51eb851f 	.word	0x51eb851f

08005394 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff ff04 	bl	80051b4 <LL_USART_IsEnabled>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d16c      	bne.n	800548c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80053ba:	f023 030c 	bic.w	r3, r3, #12
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	6851      	ldr	r1, [r2, #4]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	68d2      	ldr	r2, [r2, #12]
 80053c6:	4311      	orrs	r1, r2
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	6912      	ldr	r2, [r2, #16]
 80053cc:	4311      	orrs	r1, r2
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	6992      	ldr	r2, [r2, #24]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fefb 	bl	80051dc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ff08 	bl	8005202 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80053f2:	f107 0308 	add.w	r3, r7, #8
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fe14 	bl	8005024 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a26      	ldr	r2, [pc, #152]	; (8005498 <LL_USART_Init+0x104>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d102      	bne.n	800540a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e02f      	b.n	800546a <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a23      	ldr	r2, [pc, #140]	; (800549c <LL_USART_Init+0x108>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d102      	bne.n	8005418 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	e028      	b.n	800546a <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <LL_USART_Init+0x10c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d102      	bne.n	8005426 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	e021      	b.n	800546a <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <LL_USART_Init+0x110>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d102      	bne.n	8005434 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e01a      	b.n	800546a <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <LL_USART_Init+0x114>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d102      	bne.n	8005442 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	e013      	b.n	800546a <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a19      	ldr	r2, [pc, #100]	; (80054ac <LL_USART_Init+0x118>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d102      	bne.n	8005450 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e00c      	b.n	800546a <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <LL_USART_Init+0x11c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d102      	bne.n	800545e <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e005      	b.n	800546a <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <LL_USART_Init+0x120>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d101      	bne.n	800546a <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8005478:	2300      	movs	r3, #0
 800547a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	699a      	ldr	r2, [r3, #24]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69b9      	ldr	r1, [r7, #24]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff fece 	bl	8005228 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800548c:	7ffb      	ldrb	r3, [r7, #31]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40011000 	.word	0x40011000
 800549c:	40004400 	.word	0x40004400
 80054a0:	40004800 	.word	0x40004800
 80054a4:	40011400 	.word	0x40011400
 80054a8:	40004c00 	.word	0x40004c00
 80054ac:	40005000 	.word	0x40005000
 80054b0:	40007800 	.word	0x40007800
 80054b4:	40007c00 	.word	0x40007c00

080054b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054b8:	b084      	sub	sp, #16
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	f107 001c 	add.w	r0, r7, #28
 80054c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d122      	bne.n	8005516 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 fa7c 	bl	8006a08 <USB_CoreReset>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
 8005514:	e01a      	b.n	800554c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f001 fa70 	bl	8006a08 <USB_CoreReset>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800552c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
 800553e:	e005      	b.n	800554c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	2b01      	cmp	r3, #1
 8005550:	d10b      	bne.n	800556a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f043 0206 	orr.w	r2, r3, #6
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005576:	b004      	add	sp, #16
 8005578:	4770      	bx	lr
	...

0800557c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d165      	bne.n	800565c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a41      	ldr	r2, [pc, #260]	; (8005698 <USB_SetTurnaroundTime+0x11c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d906      	bls.n	80055a6 <USB_SetTurnaroundTime+0x2a>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a40      	ldr	r2, [pc, #256]	; (800569c <USB_SetTurnaroundTime+0x120>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d802      	bhi.n	80055a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055a0:	230f      	movs	r3, #15
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e062      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a3c      	ldr	r2, [pc, #240]	; (800569c <USB_SetTurnaroundTime+0x120>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d906      	bls.n	80055bc <USB_SetTurnaroundTime+0x40>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a3b      	ldr	r2, [pc, #236]	; (80056a0 <USB_SetTurnaroundTime+0x124>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d802      	bhi.n	80055bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055b6:	230e      	movs	r3, #14
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e057      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a38      	ldr	r2, [pc, #224]	; (80056a0 <USB_SetTurnaroundTime+0x124>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d906      	bls.n	80055d2 <USB_SetTurnaroundTime+0x56>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a37      	ldr	r2, [pc, #220]	; (80056a4 <USB_SetTurnaroundTime+0x128>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d802      	bhi.n	80055d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055cc:	230d      	movs	r3, #13
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e04c      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4a33      	ldr	r2, [pc, #204]	; (80056a4 <USB_SetTurnaroundTime+0x128>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d906      	bls.n	80055e8 <USB_SetTurnaroundTime+0x6c>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a32      	ldr	r2, [pc, #200]	; (80056a8 <USB_SetTurnaroundTime+0x12c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d802      	bhi.n	80055e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055e2:	230c      	movs	r3, #12
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e041      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4a2f      	ldr	r2, [pc, #188]	; (80056a8 <USB_SetTurnaroundTime+0x12c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d906      	bls.n	80055fe <USB_SetTurnaroundTime+0x82>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a2e      	ldr	r2, [pc, #184]	; (80056ac <USB_SetTurnaroundTime+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d802      	bhi.n	80055fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055f8:	230b      	movs	r3, #11
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e036      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <USB_SetTurnaroundTime+0x130>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d906      	bls.n	8005614 <USB_SetTurnaroundTime+0x98>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <USB_SetTurnaroundTime+0x134>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d802      	bhi.n	8005614 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800560e:	230a      	movs	r3, #10
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e02b      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <USB_SetTurnaroundTime+0x134>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d906      	bls.n	800562a <USB_SetTurnaroundTime+0xae>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <USB_SetTurnaroundTime+0x138>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d802      	bhi.n	800562a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005624:	2309      	movs	r3, #9
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e020      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <USB_SetTurnaroundTime+0x138>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d906      	bls.n	8005640 <USB_SetTurnaroundTime+0xc4>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <USB_SetTurnaroundTime+0x13c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d802      	bhi.n	8005640 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800563a:	2308      	movs	r3, #8
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e015      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <USB_SetTurnaroundTime+0x13c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d906      	bls.n	8005656 <USB_SetTurnaroundTime+0xda>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <USB_SetTurnaroundTime+0x140>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d802      	bhi.n	8005656 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005650:	2307      	movs	r3, #7
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e00a      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005656:	2306      	movs	r3, #6
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e007      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005662:	2309      	movs	r3, #9
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e001      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005668:	2309      	movs	r3, #9
 800566a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	029b      	lsls	r3, r3, #10
 8005680:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005684:	431a      	orrs	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	00d8acbf 	.word	0x00d8acbf
 800569c:	00e4e1bf 	.word	0x00e4e1bf
 80056a0:	00f423ff 	.word	0x00f423ff
 80056a4:	0106737f 	.word	0x0106737f
 80056a8:	011a499f 	.word	0x011a499f
 80056ac:	01312cff 	.word	0x01312cff
 80056b0:	014ca43f 	.word	0x014ca43f
 80056b4:	016e35ff 	.word	0x016e35ff
 80056b8:	01a6ab1f 	.word	0x01a6ab1f
 80056bc:	01e847ff 	.word	0x01e847ff

080056c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 0201 	bic.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d106      	bne.n	8005730 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	e00b      	b.n	8005748 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]
 8005742:	e001      	b.n	8005748 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e003      	b.n	8005750 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005748:	2032      	movs	r0, #50	; 0x32
 800574a:	f7fb fe4b 	bl	80013e4 <HAL_Delay>

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005758:	b084      	sub	sp, #16
 800575a:	b580      	push	{r7, lr}
 800575c:	b086      	sub	sp, #24
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	e009      	b.n	800578c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3340      	adds	r3, #64	; 0x40
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	2200      	movs	r2, #0
 8005784:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	3301      	adds	r3, #1
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b0e      	cmp	r3, #14
 8005790:	d9f2      	bls.n	8005778 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d112      	bne.n	80057be <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
 80057bc:	e00b      	b.n	80057d6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057dc:	461a      	mov	r2, r3
 80057de:	2300      	movs	r3, #0
 80057e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	4619      	mov	r1, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f0:	461a      	mov	r2, r3
 80057f2:	680b      	ldr	r3, [r1, #0]
 80057f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d10c      	bne.n	8005816 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005802:	2100      	movs	r1, #0
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f961 	bl	8005acc <USB_SetDevSpeed>
 800580a:	e008      	b.n	800581e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800580c:	2101      	movs	r1, #1
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f95c 	bl	8005acc <USB_SetDevSpeed>
 8005814:	e003      	b.n	800581e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005816:	2103      	movs	r1, #3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f957 	bl	8005acc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800581e:	2110      	movs	r1, #16
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f90b 	bl	8005a3c <USB_FlushTxFifo>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f929 	bl	8005a88 <USB_FlushRxFifo>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	461a      	mov	r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585e:	461a      	mov	r2, r3
 8005860:	2300      	movs	r3, #0
 8005862:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	e043      	b.n	80058f2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005880:	d118      	bne.n	80058b4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	461a      	mov	r2, r3
 8005896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	e013      	b.n	80058c6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	461a      	mov	r2, r3
 80058ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e008      	b.n	80058c6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	461a      	mov	r2, r3
 80058c2:	2300      	movs	r3, #0
 80058c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	461a      	mov	r2, r3
 80058d4:	2300      	movs	r3, #0
 80058d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	461a      	mov	r2, r3
 80058e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3301      	adds	r3, #1
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d3b7      	bcc.n	800586a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e043      	b.n	8005988 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005916:	d118      	bne.n	800594a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592a:	461a      	mov	r2, r3
 800592c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e013      	b.n	800595c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	461a      	mov	r2, r3
 8005942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e008      	b.n	800595c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	461a      	mov	r2, r3
 8005958:	2300      	movs	r3, #0
 800595a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	461a      	mov	r2, r3
 800596a:	2300      	movs	r3, #0
 800596c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	461a      	mov	r2, r3
 800597c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	3301      	adds	r3, #1
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d3b7      	bcc.n	8005900 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800599e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d111      	bne.n	80059ce <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <USB_DevInit+0x2dc>)
 80059b4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c8:	f043 0303 	orr.w	r3, r3, #3
 80059cc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d105      	bne.n	80059ee <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f043 0210 	orr.w	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <USB_DevInit+0x2e0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f043 0208 	orr.w	r2, r3, #8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d107      	bne.n	8005a22 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a1a:	f043 0304 	orr.w	r3, r3, #4
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a2e:	b004      	add	sp, #16
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	00800100 	.word	0x00800100
 8005a38:	803c3800 	.word	0x803c3800

08005a3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <USB_FlushTxFifo+0x48>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e006      	b.n	8005a76 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d0f0      	beq.n	8005a56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	00030d40 	.word	0x00030d40

08005a88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2210      	movs	r2, #16
 8005a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <USB_FlushRxFifo+0x40>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e006      	b.n	8005aba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d0f0      	beq.n	8005a9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	00030d40 	.word	0x00030d40

08005acc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	68f9      	ldr	r1, [r7, #12]
 8005ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aec:	4313      	orrs	r3, r2
 8005aee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b087      	sub	sp, #28
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0306 	and.w	r3, r3, #6
 8005b16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]
 8005b22:	e00a      	b.n	8005b3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d002      	beq.n	8005b30 <USB_GetDevSpeed+0x32>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b06      	cmp	r3, #6
 8005b2e:	d102      	bne.n	8005b36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b30:	2302      	movs	r3, #2
 8005b32:	75fb      	strb	r3, [r7, #23]
 8005b34:	e001      	b.n	8005b3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b36:	230f      	movs	r3, #15
 8005b38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d13a      	bne.n	8005bda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	2101      	movs	r1, #1
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	68f9      	ldr	r1, [r7, #12]
 8005b7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d155      	bne.n	8005c48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	78db      	ldrb	r3, [r3, #3]
 8005bb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	059b      	lsls	r3, r3, #22
 8005bbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e036      	b.n	8005c48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	2101      	movs	r1, #1
 8005bec:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	68f9      	ldr	r1, [r7, #12]
 8005bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d11a      	bne.n	8005c48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	78db      	ldrb	r3, [r3, #3]
 8005c2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d135      	bne.n	8005ce0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	2101      	movs	r1, #1
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c94:	4013      	ands	r3, r2
 8005c96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	2101      	movs	r1, #1
 8005caa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	0159      	lsls	r1, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	440b      	add	r3, r1
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4b1f      	ldr	r3, [pc, #124]	; (8005d58 <USB_DeactivateEndpoint+0x100>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]
 8005cde:	e034      	b.n	8005d4a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	041b      	lsls	r3, r3, #16
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d00:	4013      	ands	r3, r2
 8005d02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	2101      	movs	r1, #1
 8005d16:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d24:	4013      	ands	r3, r2
 8005d26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	0159      	lsls	r1, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	440b      	add	r3, r1
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	4619      	mov	r1, r3
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <USB_DeactivateEndpoint+0x104>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	ec337800 	.word	0xec337800
 8005d5c:	eff37800 	.word	0xeff37800

08005d60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	f040 815c 	bne.w	800603a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d132      	bne.n	8005df0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de8:	0cdb      	lsrs	r3, r3, #19
 8005dea:	04db      	lsls	r3, r3, #19
 8005dec:	6113      	str	r3, [r2, #16]
 8005dee:	e074      	b.n	8005eda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0a:	0cdb      	lsrs	r3, r3, #19
 8005e0c:	04db      	lsls	r3, r3, #19
 8005e0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6959      	ldr	r1, [r3, #20]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	440b      	add	r3, r1
 8005e4c:	1e59      	subs	r1, r3, #1
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e56:	04d9      	lsls	r1, r3, #19
 8005e58:	4b9d      	ldr	r3, [pc, #628]	; (80060d0 <USB_EPStartXfer+0x370>)
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	0148      	lsls	r0, r1, #5
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	4401      	add	r1, r0
 8005e64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e82:	69b9      	ldr	r1, [r7, #24]
 8005e84:	0148      	lsls	r0, r1, #5
 8005e86:	69f9      	ldr	r1, [r7, #28]
 8005e88:	4401      	add	r1, r0
 8005e8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	78db      	ldrb	r3, [r3, #3]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d11f      	bne.n	8005eda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005eb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d14b      	bne.n	8005f78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	78db      	ldrb	r3, [r3, #3]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d128      	bne.n	8005f56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d110      	bne.n	8005f36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	e00f      	b.n	8005f56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e12f      	b.n	80061d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	78db      	ldrb	r3, [r3, #3]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d015      	beq.n	8005fcc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8117 	beq.w	80061d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	2101      	movs	r1, #1
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	634b      	str	r3, [r1, #52]	; 0x34
 8005fca:	e105      	b.n	80061d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d110      	bne.n	8005ffe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e00f      	b.n	800601e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	68d9      	ldr	r1, [r3, #12]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	b298      	uxth	r0, r3
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	4603      	mov	r3, r0
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fa2b 	bl	800648e <USB_WritePacket>
 8006038:	e0ce      	b.n	80061d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006054:	0cdb      	lsrs	r3, r3, #19
 8006056:	04db      	lsls	r3, r3, #19
 8006058:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800607c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d126      	bne.n	80060d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800609c:	69b9      	ldr	r1, [r7, #24]
 800609e:	0148      	lsls	r0, r1, #5
 80060a0:	69f9      	ldr	r1, [r7, #28]
 80060a2:	4401      	add	r1, r0
 80060a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a8:	4313      	orrs	r3, r2
 80060aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060ca:	6113      	str	r3, [r2, #16]
 80060cc:	e036      	b.n	800613c <USB_EPStartXfer+0x3dc>
 80060ce:	bf00      	nop
 80060d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4413      	add	r3, r2
 80060de:	1e5a      	subs	r2, r3, #1
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	8afb      	ldrh	r3, [r7, #22]
 80060fa:	04d9      	lsls	r1, r3, #19
 80060fc:	4b39      	ldr	r3, [pc, #228]	; (80061e4 <USB_EPStartXfer+0x484>)
 80060fe:	400b      	ands	r3, r1
 8006100:	69b9      	ldr	r1, [r7, #24]
 8006102:	0148      	lsls	r0, r1, #5
 8006104:	69f9      	ldr	r1, [r7, #28]
 8006106:	4401      	add	r1, r0
 8006108:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800610c:	4313      	orrs	r3, r2
 800610e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	8af9      	ldrh	r1, [r7, #22]
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800612c:	69b9      	ldr	r1, [r7, #24]
 800612e:	0148      	lsls	r0, r1, #5
 8006130:	69f9      	ldr	r1, [r7, #28]
 8006132:	4401      	add	r1, r0
 8006134:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006138:	4313      	orrs	r3, r2
 800613a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10d      	bne.n	800615e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d009      	beq.n	800615e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	68d9      	ldr	r1, [r3, #12]
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	460a      	mov	r2, r1
 800615c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	78db      	ldrb	r3, [r3, #3]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d128      	bne.n	80061b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d110      	bne.n	8006198 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006190:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	e00f      	b.n	80061b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	1ff80000 	.word	0x1ff80000

080061e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b01      	cmp	r3, #1
 8006206:	f040 80cd 	bne.w	80063a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d132      	bne.n	8006278 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006230:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	440a      	add	r2, r1
 800624c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006254:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006270:	0cdb      	lsrs	r3, r3, #19
 8006272:	04db      	lsls	r3, r3, #19
 8006274:	6113      	str	r3, [r2, #16]
 8006276:	e04e      	b.n	8006316 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006292:	0cdb      	lsrs	r3, r3, #19
 8006294:	04db      	lsls	r3, r3, #19
 8006296:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	0151      	lsls	r1, r2, #5
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	440a      	add	r2, r1
 80062ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d903      	bls.n	80062d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006306:	6939      	ldr	r1, [r7, #16]
 8006308:	0148      	lsls	r0, r1, #5
 800630a:	6979      	ldr	r1, [r7, #20]
 800630c:	4401      	add	r1, r0
 800630e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006312:	4313      	orrs	r3, r2
 8006314:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d11e      	bne.n	800635a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d009      	beq.n	8006338 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	461a      	mov	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006352:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	e092      	b.n	8006480 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006374:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006378:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d07e      	beq.n	8006480 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	2101      	movs	r1, #1
 8006394:	fa01 f303 	lsl.w	r3, r1, r3
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800639e:	4313      	orrs	r3, r2
 80063a0:	634b      	str	r3, [r1, #52]	; 0x34
 80063a2:	e06d      	b.n	8006480 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063be:	0cdb      	lsrs	r3, r3, #19
 80063c0:	04db      	lsls	r3, r3, #19
 80063c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006412:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006416:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642e:	6939      	ldr	r1, [r7, #16]
 8006430:	0148      	lsls	r0, r1, #5
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	4401      	add	r1, r0
 8006436:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800643a:	4313      	orrs	r3, r2
 800643c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d10d      	bne.n	8006460 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	68d9      	ldr	r1, [r3, #12]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	460a      	mov	r2, r1
 800645e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800647e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800648e:	b480      	push	{r7}
 8006490:	b089      	sub	sp, #36	; 0x24
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	4611      	mov	r1, r2
 800649a:	461a      	mov	r2, r3
 800649c:	460b      	mov	r3, r1
 800649e:	71fb      	strb	r3, [r7, #7]
 80064a0:	4613      	mov	r3, r2
 80064a2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80064ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11a      	bne.n	80064ea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064b4:	88bb      	ldrh	r3, [r7, #4]
 80064b6:	3303      	adds	r3, #3
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e00f      	b.n	80064e2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	031a      	lsls	r2, r3, #12
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ce:	461a      	mov	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3304      	adds	r3, #4
 80064da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	3301      	adds	r3, #1
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d3eb      	bcc.n	80064c2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3724      	adds	r7, #36	; 0x24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b089      	sub	sp, #36	; 0x24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	3303      	adds	r3, #3
 8006512:	089b      	lsrs	r3, r3, #2
 8006514:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	e00b      	b.n	8006534 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	601a      	str	r2, [r3, #0]
    pDest++;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	3304      	adds	r3, #4
 800652c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	3301      	adds	r3, #1
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	429a      	cmp	r2, r3
 800653a:	d3ef      	bcc.n	800651c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800653c:	69fb      	ldr	r3, [r7, #28]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3724      	adds	r7, #36	; 0x24
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	785b      	ldrb	r3, [r3, #1]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d12c      	bne.n	80065c0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	db12      	blt.n	800659e <USB_EPSetStall+0x54>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00f      	beq.n	800659e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800659c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e02b      	b.n	8006618 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	db12      	blt.n	80065f8 <USB_EPSetStall+0xae>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00f      	beq.n	80065f8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065f6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	440a      	add	r2, r1
 800660e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006612:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d128      	bne.n	8006694 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006660:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	78db      	ldrb	r3, [r3, #3]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d003      	beq.n	8006672 <USB_EPClearStall+0x4c>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	78db      	ldrb	r3, [r3, #3]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d138      	bne.n	80066e4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e027      	b.n	80066e4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	78db      	ldrb	r3, [r3, #3]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d003      	beq.n	80066c4 <USB_EPClearStall+0x9e>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	78db      	ldrb	r3, [r3, #3]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d10f      	bne.n	80066e4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006710:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006714:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800672c:	4313      	orrs	r3, r2
 800672e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006758:	f023 0302 	bic.w	r3, r3, #2
 800675c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800675e:	2003      	movs	r0, #3
 8006760:	f7fa fe40 	bl	80013e4 <HAL_Delay>

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800678e:	2003      	movs	r0, #3
 8006790:	f7fa fe28 	bl	80013e4 <HAL_Delay>

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4013      	ands	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067b6:	68fb      	ldr	r3, [r7, #12]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	4013      	ands	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	0c1b      	lsrs	r3, r3, #16
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	b29b      	uxth	r3, r3
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	4013      	ands	r3, r2
 8006858:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800685a:	68bb      	ldr	r3, [r7, #8]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
 8006898:	01db      	lsls	r3, r3, #7
 800689a:	b2db      	uxtb	r3, r3
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4013      	ands	r3, r2
 80068b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068b6:	68bb      	ldr	r3, [r7, #8]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f003 0301 	and.w	r3, r3, #1
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068fe:	f023 0307 	bic.w	r3, r3, #7
 8006902:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0306 	and.w	r3, r3, #6
 8006910:	2b04      	cmp	r3, #4
 8006912:	d109      	bne.n	8006928 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006922:	f043 0303 	orr.w	r3, r3, #3
 8006926:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
	...

0800694c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	460b      	mov	r3, r1
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	333c      	adds	r3, #60	; 0x3c
 8006962:	3304      	adds	r3, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4a26      	ldr	r2, [pc, #152]	; (8006a04 <USB_EP0_OutStart+0xb8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d90a      	bls.n	8006986 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800697c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006980:	d101      	bne.n	8006986 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e037      	b.n	80069f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	461a      	mov	r2, r3
 800698e:	2300      	movs	r3, #0
 8006990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b4:	f043 0318 	orr.w	r3, r3, #24
 80069b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069ce:	7afb      	ldrb	r3, [r7, #11]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d10f      	bne.n	80069f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	461a      	mov	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	4f54300a 	.word	0x4f54300a

08006a08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <USB_CoreReset+0x64>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e01b      	b.n	8006a5e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	daf2      	bge.n	8006a14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f043 0201 	orr.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <USB_CoreReset+0x64>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d901      	bls.n	8006a50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e006      	b.n	8006a5e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d0f0      	beq.n	8006a3e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	00030d40 	.word	0x00030d40

08006a70 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8006a76:	4b8c      	ldr	r3, [pc, #560]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006a78:	220a      	movs	r2, #10
 8006a7a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 8006a7c:	4b8a      	ldr	r3, [pc, #552]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006a7e:	220a      	movs	r2, #10
 8006a80:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8006a82:	4b89      	ldr	r3, [pc, #548]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006a84:	220a      	movs	r2, #10
 8006a86:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 5;
 8006a88:	4b87      	ldr	r3, [pc, #540]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006a8a:	2205      	movs	r2, #5
 8006a8c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006a8e:	4b87      	ldr	r3, [pc, #540]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006a94:	4b85      	ldr	r3, [pc, #532]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006a96:	22ff      	movs	r2, #255	; 0xff
 8006a98:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006a9a:	4b84      	ldr	r3, [pc, #528]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006aa0:	4b82      	ldr	r3, [pc, #520]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8006aa6:	4b82      	ldr	r3, [pc, #520]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 8006aac:	4b80      	ldr	r3, [pc, #512]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006aae:	220a      	movs	r2, #10
 8006ab0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 8006ab2:	4b7f      	ldr	r3, [pc, #508]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006ab4:	220a      	movs	r2, #10
 8006ab6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006ab8:	4b7d      	ldr	r3, [pc, #500]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006abe:	2100      	movs	r1, #0
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f004 ff59 	bl	800b978 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006ac6:	4b78      	ldr	r3, [pc, #480]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	061a      	lsls	r2, r3, #24
 8006acc:	4b76      	ldr	r3, [pc, #472]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	4b74      	ldr	r3, [pc, #464]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006ad6:	789b      	ldrb	r3, [r3, #2]
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	4313      	orrs	r3, r2
 8006adc:	4a72      	ldr	r2, [pc, #456]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006ade:	78d2      	ldrb	r2, [r2, #3]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	061a      	lsls	r2, r3, #24
 8006ae4:	4b70      	ldr	r3, [pc, #448]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	0619      	lsls	r1, r3, #24
 8006aea:	4b6f      	ldr	r3, [pc, #444]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	4319      	orrs	r1, r3
 8006af2:	4b6d      	ldr	r3, [pc, #436]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006af4:	789b      	ldrb	r3, [r3, #2]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	430b      	orrs	r3, r1
 8006afa:	496b      	ldr	r1, [pc, #428]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006afc:	78c9      	ldrb	r1, [r1, #3]
 8006afe:	430b      	orrs	r3, r1
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b06:	431a      	orrs	r2, r3
 8006b08:	4b67      	ldr	r3, [pc, #412]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	0619      	lsls	r1, r3, #24
 8006b0e:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	041b      	lsls	r3, r3, #16
 8006b14:	4319      	orrs	r1, r3
 8006b16:	4b64      	ldr	r3, [pc, #400]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006b18:	789b      	ldrb	r3, [r3, #2]
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	4962      	ldr	r1, [pc, #392]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006b20:	78c9      	ldrb	r1, [r1, #3]
 8006b22:	430b      	orrs	r3, r1
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	4b5e      	ldr	r3, [pc, #376]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	0619      	lsls	r1, r3, #24
 8006b32:	4b5d      	ldr	r3, [pc, #372]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	4319      	orrs	r1, r3
 8006b3a:	4b5b      	ldr	r3, [pc, #364]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006b3c:	789b      	ldrb	r3, [r3, #2]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	430b      	orrs	r3, r1
 8006b42:	4959      	ldr	r1, [pc, #356]	; (8006ca8 <MX_LWIP_Init+0x238>)
 8006b44:	78c9      	ldrb	r1, [r1, #3]
 8006b46:	430b      	orrs	r3, r1
 8006b48:	0e1b      	lsrs	r3, r3, #24
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	4a59      	ldr	r2, [pc, #356]	; (8006cb4 <MX_LWIP_Init+0x244>)
 8006b4e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006b50:	4b56      	ldr	r3, [pc, #344]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	061a      	lsls	r2, r3, #24
 8006b56:	4b55      	ldr	r3, [pc, #340]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	4b53      	ldr	r3, [pc, #332]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b60:	789b      	ldrb	r3, [r3, #2]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	4313      	orrs	r3, r2
 8006b66:	4a51      	ldr	r2, [pc, #324]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b68:	78d2      	ldrb	r2, [r2, #3]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	061a      	lsls	r2, r3, #24
 8006b6e:	4b4f      	ldr	r3, [pc, #316]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	0619      	lsls	r1, r3, #24
 8006b74:	4b4d      	ldr	r3, [pc, #308]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	041b      	lsls	r3, r3, #16
 8006b7a:	4319      	orrs	r1, r3
 8006b7c:	4b4b      	ldr	r3, [pc, #300]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b7e:	789b      	ldrb	r3, [r3, #2]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	430b      	orrs	r3, r1
 8006b84:	4949      	ldr	r1, [pc, #292]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b86:	78c9      	ldrb	r1, [r1, #3]
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b90:	431a      	orrs	r2, r3
 8006b92:	4b46      	ldr	r3, [pc, #280]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	0619      	lsls	r1, r3, #24
 8006b98:	4b44      	ldr	r3, [pc, #272]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006b9a:	785b      	ldrb	r3, [r3, #1]
 8006b9c:	041b      	lsls	r3, r3, #16
 8006b9e:	4319      	orrs	r1, r3
 8006ba0:	4b42      	ldr	r3, [pc, #264]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006ba2:	789b      	ldrb	r3, [r3, #2]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	4940      	ldr	r1, [pc, #256]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006baa:	78c9      	ldrb	r1, [r1, #3]
 8006bac:	430b      	orrs	r3, r1
 8006bae:	0a1b      	lsrs	r3, r3, #8
 8006bb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	0619      	lsls	r1, r3, #24
 8006bbc:	4b3b      	ldr	r3, [pc, #236]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	4319      	orrs	r1, r3
 8006bc4:	4b39      	ldr	r3, [pc, #228]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006bc6:	789b      	ldrb	r3, [r3, #2]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	4937      	ldr	r1, [pc, #220]	; (8006cac <MX_LWIP_Init+0x23c>)
 8006bce:	78c9      	ldrb	r1, [r1, #3]
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	0e1b      	lsrs	r3, r3, #24
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	4a38      	ldr	r2, [pc, #224]	; (8006cb8 <MX_LWIP_Init+0x248>)
 8006bd8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006bda:	4b35      	ldr	r3, [pc, #212]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	061a      	lsls	r2, r3, #24
 8006be0:	4b33      	ldr	r3, [pc, #204]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	431a      	orrs	r2, r3
 8006be8:	4b31      	ldr	r3, [pc, #196]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006bea:	789b      	ldrb	r3, [r3, #2]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	4a2f      	ldr	r2, [pc, #188]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006bf2:	78d2      	ldrb	r2, [r2, #3]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	061a      	lsls	r2, r3, #24
 8006bf8:	4b2d      	ldr	r3, [pc, #180]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	0619      	lsls	r1, r3, #24
 8006bfe:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	4319      	orrs	r1, r3
 8006c06:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c08:	789b      	ldrb	r3, [r3, #2]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	4928      	ldr	r1, [pc, #160]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c10:	78c9      	ldrb	r1, [r1, #3]
 8006c12:	430b      	orrs	r3, r1
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	0619      	lsls	r1, r3, #24
 8006c22:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	4319      	orrs	r1, r3
 8006c2a:	4b21      	ldr	r3, [pc, #132]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c2c:	789b      	ldrb	r3, [r3, #2]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	430b      	orrs	r3, r1
 8006c32:	491f      	ldr	r1, [pc, #124]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c34:	78c9      	ldrb	r1, [r1, #3]
 8006c36:	430b      	orrs	r3, r1
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	0619      	lsls	r1, r3, #24
 8006c46:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	4319      	orrs	r1, r3
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c50:	789b      	ldrb	r3, [r3, #2]
 8006c52:	021b      	lsls	r3, r3, #8
 8006c54:	430b      	orrs	r3, r1
 8006c56:	4916      	ldr	r1, [pc, #88]	; (8006cb0 <MX_LWIP_Init+0x240>)
 8006c58:	78c9      	ldrb	r1, [r1, #3]
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	0e1b      	lsrs	r3, r3, #24
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <MX_LWIP_Init+0x24c>)
 8006c62:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006c64:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <MX_LWIP_Init+0x250>)
 8006c66:	9302      	str	r3, [sp, #8]
 8006c68:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <MX_LWIP_Init+0x254>)
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <MX_LWIP_Init+0x24c>)
 8006c72:	4a11      	ldr	r2, [pc, #68]	; (8006cb8 <MX_LWIP_Init+0x248>)
 8006c74:	490f      	ldr	r1, [pc, #60]	; (8006cb4 <MX_LWIP_Init+0x244>)
 8006c76:	4814      	ldr	r0, [pc, #80]	; (8006cc8 <MX_LWIP_Init+0x258>)
 8006c78:	f005 fb38 	bl	800c2ec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006c7c:	4812      	ldr	r0, [pc, #72]	; (8006cc8 <MX_LWIP_Init+0x258>)
 8006c7e:	f005 fc0d 	bl	800c49c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006c82:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <MX_LWIP_Init+0x258>)
 8006c84:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006c88:	089b      	lsrs	r3, r3, #2
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006c94:	480c      	ldr	r0, [pc, #48]	; (8006cc8 <MX_LWIP_Init+0x258>)
 8006c96:	f005 fc11 	bl	800c4bc <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006c9a:	e002      	b.n	8006ca2 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8006c9c:	480a      	ldr	r0, [pc, #40]	; (8006cc8 <MX_LWIP_Init+0x258>)
 8006c9e:	f005 fc51 	bl	800c544 <netif_set_down>
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	200043d0 	.word	0x200043d0
 8006cac:	200043cc 	.word	0x200043cc
 8006cb0:	20004394 	.word	0x20004394
 8006cb4:	200043c8 	.word	0x200043c8
 8006cb8:	200043d4 	.word	0x200043d4
 8006cbc:	200043d8 	.word	0x200043d8
 8006cc0:	0800b8a1 	.word	0x0800b8a1
 8006cc4:	08007319 	.word	0x08007319
 8006cc8:	20004398 	.word	0x20004398

08006ccc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08e      	sub	sp, #56	; 0x38
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	609a      	str	r2, [r3, #8]
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a59      	ldr	r2, [pc, #356]	; (8006e50 <HAL_ETH_MspInit+0x184>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	f040 80ac 	bne.w	8006e48 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	623b      	str	r3, [r7, #32]
 8006cf4:	4b57      	ldr	r3, [pc, #348]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	4a56      	ldr	r2, [pc, #344]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8006d00:	4b54      	ldr	r3, [pc, #336]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61fb      	str	r3, [r7, #28]
 8006d10:	4b50      	ldr	r3, [pc, #320]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	4a4f      	ldr	r2, [pc, #316]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d1c:	4b4d      	ldr	r3, [pc, #308]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	4b49      	ldr	r3, [pc, #292]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	4a48      	ldr	r2, [pc, #288]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d36:	6313      	str	r3, [r2, #48]	; 0x30
 8006d38:	4b46      	ldr	r3, [pc, #280]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	4b42      	ldr	r3, [pc, #264]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	4a41      	ldr	r2, [pc, #260]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d4e:	f043 0304 	orr.w	r3, r3, #4
 8006d52:	6313      	str	r3, [r2, #48]	; 0x30
 8006d54:	4b3f      	ldr	r3, [pc, #252]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d60:	2300      	movs	r3, #0
 8006d62:	613b      	str	r3, [r7, #16]
 8006d64:	4b3b      	ldr	r3, [pc, #236]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	4a3a      	ldr	r2, [pc, #232]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d70:	4b38      	ldr	r3, [pc, #224]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	4b34      	ldr	r3, [pc, #208]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	4a33      	ldr	r2, [pc, #204]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d86:	f043 0302 	orr.w	r3, r3, #2
 8006d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d8c:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	4a2c      	ldr	r2, [pc, #176]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da6:	6313      	str	r3, [r2, #48]	; 0x30
 8006da8:	4b2a      	ldr	r3, [pc, #168]	; (8006e54 <HAL_ETH_MspInit+0x188>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006db4:	2332      	movs	r3, #50	; 0x32
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db8:	2302      	movs	r3, #2
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006dc4:	230b      	movs	r3, #11
 8006dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4822      	ldr	r0, [pc, #136]	; (8006e58 <HAL_ETH_MspInit+0x18c>)
 8006dd0:	f7fb fc1e 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006dd4:	2386      	movs	r3, #134	; 0x86
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006de0:	2303      	movs	r3, #3
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006de4:	230b      	movs	r3, #11
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dec:	4619      	mov	r1, r3
 8006dee:	481b      	ldr	r0, [pc, #108]	; (8006e5c <HAL_ETH_MspInit+0x190>)
 8006df0:	f7fb fc0e 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e02:	2303      	movs	r3, #3
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e06:	230b      	movs	r3, #11
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4813      	ldr	r0, [pc, #76]	; (8006e60 <HAL_ETH_MspInit+0x194>)
 8006e12:	f7fb fbfd 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006e16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e24:	2303      	movs	r3, #3
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e28:	230b      	movs	r3, #11
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e30:	4619      	mov	r1, r3
 8006e32:	480c      	ldr	r0, [pc, #48]	; (8006e64 <HAL_ETH_MspInit+0x198>)
 8006e34:	f7fb fbec 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2105      	movs	r1, #5
 8006e3c:	203d      	movs	r0, #61	; 0x3d
 8006e3e:	f7fa fbab 	bl	8001598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006e42:	203d      	movs	r0, #61	; 0x3d
 8006e44:	f7fa fbc4 	bl	80015d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3738      	adds	r7, #56	; 0x38
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40028000 	.word	0x40028000
 8006e54:	40023800 	.word	0x40023800
 8006e58:	40020800 	.word	0x40020800
 8006e5c:	40020000 	.word	0x40020000
 8006e60:	40020400 	.word	0x40020400
 8006e64:	40021800 	.word	0x40021800

08006e68 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006e70:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <HAL_ETH_RxCpltCallback+0x1c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 ff47 	bl	8008d08 <osSemaphoreRelease>
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000458 	.word	0x20000458

08006e88 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8006e88:	b5b0      	push	{r4, r5, r7, lr}
 8006e8a:	b090      	sub	sp, #64	; 0x40
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006e94:	4b5c      	ldr	r3, [pc, #368]	; (8007008 <low_level_init+0x180>)
 8006e96:	4a5d      	ldr	r2, [pc, #372]	; (800700c <low_level_init+0x184>)
 8006e98:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006e9a:	4b5b      	ldr	r3, [pc, #364]	; (8007008 <low_level_init+0x180>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006ea0:	4b59      	ldr	r3, [pc, #356]	; (8007008 <low_level_init+0x180>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8006eb2:	23e1      	movs	r3, #225	; 0xe1
 8006eb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006eca:	4a4f      	ldr	r2, [pc, #316]	; (8007008 <low_level_init+0x180>)
 8006ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ed0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006ed2:	4b4d      	ldr	r3, [pc, #308]	; (8007008 <low_level_init+0x180>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006ed8:	4b4b      	ldr	r3, [pc, #300]	; (8007008 <low_level_init+0x180>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006ede:	4b4a      	ldr	r3, [pc, #296]	; (8007008 <low_level_init+0x180>)
 8006ee0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006ee4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006ee6:	4848      	ldr	r0, [pc, #288]	; (8007008 <low_level_init+0x180>)
 8006ee8:	f7fa fb80 	bl	80015ec <HAL_ETH_Init>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d108      	bne.n	8006f0c <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006f00:	f043 0304 	orr.w	r3, r3, #4
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	4a40      	ldr	r2, [pc, #256]	; (8007010 <low_level_init+0x188>)
 8006f10:	4940      	ldr	r1, [pc, #256]	; (8007014 <low_level_init+0x18c>)
 8006f12:	483d      	ldr	r0, [pc, #244]	; (8007008 <low_level_init+0x180>)
 8006f14:	f7fa fd08 	bl	8001928 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006f18:	2304      	movs	r3, #4
 8006f1a:	4a3f      	ldr	r2, [pc, #252]	; (8007018 <low_level_init+0x190>)
 8006f1c:	493f      	ldr	r1, [pc, #252]	; (800701c <low_level_init+0x194>)
 8006f1e:	483a      	ldr	r0, [pc, #232]	; (8007008 <low_level_init+0x180>)
 8006f20:	f7fa fd6b 	bl	80019fa <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2206      	movs	r2, #6
 8006f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006f2c:	4b36      	ldr	r3, [pc, #216]	; (8007008 <low_level_init+0x180>)
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	781a      	ldrb	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006f38:	4b33      	ldr	r3, [pc, #204]	; (8007008 <low_level_init+0x180>)
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	785a      	ldrb	r2, [r3, #1]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006f44:	4b30      	ldr	r3, [pc, #192]	; (8007008 <low_level_init+0x180>)
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	789a      	ldrb	r2, [r3, #2]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006f50:	4b2d      	ldr	r3, [pc, #180]	; (8007008 <low_level_init+0x180>)
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	78da      	ldrb	r2, [r3, #3]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006f5c:	4b2a      	ldr	r3, [pc, #168]	; (8007008 <low_level_init+0x180>)
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	791a      	ldrb	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006f68:	4b27      	ldr	r3, [pc, #156]	; (8007008 <low_level_init+0x180>)
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	795a      	ldrb	r2, [r3, #5]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006f7a:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006f82:	f043 030a 	orr.w	r3, r3, #10
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f92:	2300      	movs	r3, #0
 8006f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 fe31 	bl	8008c04 <osSemaphoreCreate>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4b1e      	ldr	r3, [pc, #120]	; (8007020 <low_level_init+0x198>)
 8006fa6:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006fa8:	4b1e      	ldr	r3, [pc, #120]	; (8007024 <low_level_init+0x19c>)
 8006faa:	f107 040c 	add.w	r4, r7, #12
 8006fae:	461d      	mov	r5, r3
 8006fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006fb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006fbc:	f107 030c 	add.w	r3, r7, #12
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 fd21 	bl	8008a0a <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006fc8:	480f      	ldr	r0, [pc, #60]	; (8007008 <low_level_init+0x180>)
 8006fca:	f7fb f83e 	bl	800204a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006fce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	211d      	movs	r1, #29
 8006fd6:	480c      	ldr	r0, [pc, #48]	; (8007008 <low_level_init+0x180>)
 8006fd8:	f7fa ff69 	bl	8001eae <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f043 030b 	orr.w	r3, r3, #11
 8006fe2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	211d      	movs	r1, #29
 8006fea:	4807      	ldr	r0, [pc, #28]	; (8007008 <low_level_init+0x180>)
 8006fec:	f7fa ffc7 	bl	8001f7e <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	211d      	movs	r1, #29
 8006ff8:	4803      	ldr	r0, [pc, #12]	; (8007008 <low_level_init+0x180>)
 8006ffa:	f7fa ff58 	bl	8001eae <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8006ffe:	bf00      	nop
 8007000:	3740      	adds	r7, #64	; 0x40
 8007002:	46bd      	mov	sp, r7
 8007004:	bdb0      	pop	{r4, r5, r7, pc}
 8007006:	bf00      	nop
 8007008:	20005cac 	.word	0x20005cac
 800700c:	40028000 	.word	0x40028000
 8007010:	20005cf4 	.word	0x20005cf4
 8007014:	200043dc 	.word	0x200043dc
 8007018:	2000445c 	.word	0x2000445c
 800701c:	20005c2c 	.word	0x20005c2c
 8007020:	20000458 	.word	0x20000458
 8007024:	08015b5c 	.word	0x08015b5c

08007028 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007032:	4b4b      	ldr	r3, [pc, #300]	; (8007160 <low_level_output+0x138>)
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800704a:	4b45      	ldr	r3, [pc, #276]	; (8007160 <low_level_output+0x138>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	623b      	str	r3, [r7, #32]
 8007058:	e05a      	b.n	8007110 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	da03      	bge.n	800706a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007062:	23f8      	movs	r3, #248	; 0xf8
 8007064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007068:	e05c      	b.n	8007124 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	895b      	ldrh	r3, [r3, #10]
 800706e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007074:	e02f      	b.n	80070d6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	18d0      	adds	r0, r2, r3
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	18d1      	adds	r1, r2, r3
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800708a:	3304      	adds	r3, #4
 800708c:	461a      	mov	r2, r3
 800708e:	f00d fe08 	bl	8014ca2 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	da03      	bge.n	80070a8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80070a0:	23f8      	movs	r3, #248	; 0xf8
 80070a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80070a6:	e03d      	b.n	8007124 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80070b8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80070c4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80070d0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	4413      	add	r3, r2
 80070dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d8c8      	bhi.n	8007076 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80070e4:	69fa      	ldr	r2, [r7, #28]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	18d0      	adds	r0, r2, r3
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4413      	add	r3, r2
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4619      	mov	r1, r3
 80070f6:	f00d fdd4 	bl	8014ca2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	623b      	str	r3, [r7, #32]
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1a1      	bne.n	800705a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007116:	6979      	ldr	r1, [r7, #20]
 8007118:	4811      	ldr	r0, [pc, #68]	; (8007160 <low_level_output+0x138>)
 800711a:	f7fa fcdb 	bl	8001ad4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007124:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <low_level_output+0x138>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712c:	3314      	adds	r3, #20
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00d      	beq.n	8007154 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007138:	4b09      	ldr	r3, [pc, #36]	; (8007160 <low_level_output+0x138>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007140:	3314      	adds	r3, #20
 8007142:	2220      	movs	r2, #32
 8007144:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007146:	4b06      	ldr	r3, [pc, #24]	; (8007160 <low_level_output+0x138>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714e:	3304      	adds	r3, #4
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007158:	4618      	mov	r0, r3
 800715a:	3728      	adds	r7, #40	; 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20005cac 	.word	0x20005cac

08007164 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08c      	sub	sp, #48	; 0x30
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800716c:	2300      	movs	r3, #0
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007170:	2300      	movs	r3, #0
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007184:	2300      	movs	r3, #0
 8007186:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007188:	484e      	ldr	r0, [pc, #312]	; (80072c4 <low_level_input+0x160>)
 800718a:	f7fa fd8d 	bl	8001ca8 <HAL_ETH_GetReceivedFrame_IT>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <low_level_input+0x34>
    return NULL;
 8007194:	2300      	movs	r3, #0
 8007196:	e091      	b.n	80072bc <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007198:	4b4a      	ldr	r3, [pc, #296]	; (80072c4 <low_level_input+0x160>)
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800719e:	4b49      	ldr	r3, [pc, #292]	; (80072c4 <low_level_input+0x160>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80071a4:	89fb      	ldrh	r3, [r7, #14]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d006      	beq.n	80071b8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80071aa:	89fb      	ldrh	r3, [r7, #14]
 80071ac:	2203      	movs	r2, #3
 80071ae:	4619      	mov	r1, r3
 80071b0:	2004      	movs	r0, #4
 80071b2:	f005 fa49 	bl	800c648 <pbuf_alloc>
 80071b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d04b      	beq.n	8007256 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80071be:	4b41      	ldr	r3, [pc, #260]	; (80072c4 <low_level_input+0x160>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80071cc:	e040      	b.n	8007250 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	895b      	ldrh	r3, [r3, #10]
 80071d2:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80071d8:	e021      	b.n	800721e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	18d0      	adds	r0, r2, r3
 80071e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	18d1      	adds	r1, r2, r3
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80071ee:	3304      	adds	r3, #4
 80071f0:	461a      	mov	r2, r3
 80071f2:	f00d fd56 	bl	8014ca2 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	4413      	add	r3, r2
 8007208:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800720c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007218:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	4413      	add	r3, r2
 8007224:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007228:	4293      	cmp	r3, r2
 800722a:	d8d6      	bhi.n	80071da <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	18d0      	adds	r0, r2, r3
 8007234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4619      	mov	r1, r3
 800723e:	f00d fd30 	bl	8014ca2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	4413      	add	r3, r2
 8007248:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1bb      	bne.n	80071ce <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007256:	4b1b      	ldr	r3, [pc, #108]	; (80072c4 <low_level_input+0x160>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800725c:	2300      	movs	r3, #0
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	e00b      	b.n	800727a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	3301      	adds	r3, #1
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <low_level_input+0x160>)
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d3ee      	bcc.n	8007262 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8007284:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <low_level_input+0x160>)
 8007286:	2200      	movs	r2, #0
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800728a:	4b0e      	ldr	r3, [pc, #56]	; (80072c4 <low_level_input+0x160>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007292:	3314      	adds	r3, #20
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <low_level_input+0x160>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a6:	3314      	adds	r3, #20
 80072a8:	2280      	movs	r2, #128	; 0x80
 80072aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <low_level_input+0x160>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b4:	3308      	adds	r3, #8
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
  }
  return p;
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3730      	adds	r7, #48	; 0x30
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20005cac 	.word	0x20005cac

080072c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80072d4:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <ethernetif_input+0x4c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072dc:	4618      	mov	r0, r3
 80072de:	f001 fcc5 	bl	8008c6c <osSemaphoreWait>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1f5      	bne.n	80072d4 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff ff3b 	bl	8007164 <low_level_input>
 80072ee:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	68b8      	ldr	r0, [r7, #8]
 80072fe:	4798      	blx	r3
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8007306:	68b8      	ldr	r0, [r7, #8]
 8007308:	f005 fd10 	bl	800cd2c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1ea      	bne.n	80072e8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007312:	e7df      	b.n	80072d4 <ethernetif_input+0xc>
 8007314:	20000458 	.word	0x20000458

08007318 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <ethernetif_init+0x1c>
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <ethernetif_init+0x48>)
 8007328:	f240 222d 	movw	r2, #557	; 0x22d
 800732c:	490d      	ldr	r1, [pc, #52]	; (8007364 <ethernetif_init+0x4c>)
 800732e:	480e      	ldr	r0, [pc, #56]	; (8007368 <ethernetif_init+0x50>)
 8007330:	f00d fd72 	bl	8014e18 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2273      	movs	r2, #115	; 0x73
 8007338:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2274      	movs	r2, #116	; 0x74
 8007340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a09      	ldr	r2, [pc, #36]	; (800736c <ethernetif_init+0x54>)
 8007348:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a08      	ldr	r2, [pc, #32]	; (8007370 <ethernetif_init+0x58>)
 800734e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fd99 	bl	8006e88 <low_level_init>

  return ERR_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	08015b78 	.word	0x08015b78
 8007364:	08015b94 	.word	0x08015b94
 8007368:	08015ba4 	.word	0x08015ba4
 800736c:	0801244d 	.word	0x0801244d
 8007370:	08007029 	.word	0x08007029

08007374 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007378:	f7fa f828 	bl	80013cc <HAL_GetTick>
 800737c:	4603      	mov	r3, r0
}
 800737e:	4618      	mov	r0, r3
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7c1b      	ldrb	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d115      	bne.n	80073c6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800739a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800739e:	2202      	movs	r2, #2
 80073a0:	2181      	movs	r1, #129	; 0x81
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f00d fae7 	bl	8014976 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b2:	2202      	movs	r2, #2
 80073b4:	2101      	movs	r1, #1
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f00d fadd 	bl	8014976 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80073c4:	e012      	b.n	80073ec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	2202      	movs	r2, #2
 80073ca:	2181      	movs	r1, #129	; 0x81
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f00d fad2 	bl	8014976 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073d8:	2340      	movs	r3, #64	; 0x40
 80073da:	2202      	movs	r2, #2
 80073dc:	2101      	movs	r1, #1
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f00d fac9 	bl	8014976 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073ec:	2308      	movs	r3, #8
 80073ee:	2203      	movs	r2, #3
 80073f0:	2182      	movs	r1, #130	; 0x82
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f00d fabf 	bl	8014976 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80073fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007402:	f00d fc2f 	bl	8014c64 <malloc>
 8007406:	4603      	mov	r3, r0
 8007408:	461a      	mov	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800741a:	2301      	movs	r3, #1
 800741c:	73fb      	strb	r3, [r7, #15]
 800741e:	e026      	b.n	800746e <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007426:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7c1b      	ldrb	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007454:	2101      	movs	r1, #1
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f00d fb7e 	bl	8014b58 <USBD_LL_PrepareReceive>
 800745c:	e007      	b.n	800746e <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	2101      	movs	r1, #1
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f00d fb75 	bl	8014b58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007488:	2181      	movs	r1, #129	; 0x81
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f00d fa99 	bl	80149c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007496:	2101      	movs	r1, #1
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f00d fa92 	bl	80149c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074a6:	2182      	movs	r1, #130	; 0x82
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f00d fa8a 	bl	80149c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00e      	beq.n	80074dc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074ce:	4618      	mov	r0, r3
 80074d0:	f00d fbd0 	bl	8014c74 <free>
    pdev->pClassData = NULL;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074f6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800750c:	2b00      	cmp	r3, #0
 800750e:	d039      	beq.n	8007584 <USBD_CDC_Setup+0x9e>
 8007510:	2b20      	cmp	r3, #32
 8007512:	d17c      	bne.n	800760e <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	88db      	ldrh	r3, [r3, #6]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d029      	beq.n	8007570 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b25b      	sxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	da11      	bge.n	800754a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007532:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	88d2      	ldrh	r2, [r2, #6]
 8007538:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800753a:	6939      	ldr	r1, [r7, #16]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	88db      	ldrh	r3, [r3, #6]
 8007540:	461a      	mov	r2, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 f99c 	bl	8008880 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007548:	e068      	b.n	800761c <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	785a      	ldrb	r2, [r3, #1]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	88db      	ldrh	r3, [r3, #6]
 8007558:	b2da      	uxtb	r2, r3
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007560:	6939      	ldr	r1, [r7, #16]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	88db      	ldrh	r3, [r3, #6]
 8007566:	461a      	mov	r2, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f9b7 	bl	80088dc <USBD_CtlPrepareRx>
    break;
 800756e:	e055      	b.n	800761c <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	7850      	ldrb	r0, [r2, #1]
 800757c:	2200      	movs	r2, #0
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	4798      	blx	r3
    break;
 8007582:	e04b      	b.n	800761c <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b0a      	cmp	r3, #10
 800758a:	d017      	beq.n	80075bc <USBD_CDC_Setup+0xd6>
 800758c:	2b0b      	cmp	r3, #11
 800758e:	d029      	beq.n	80075e4 <USBD_CDC_Setup+0xfe>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d133      	bne.n	80075fc <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800759a:	2b03      	cmp	r3, #3
 800759c:	d107      	bne.n	80075ae <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800759e:	f107 030c 	add.w	r3, r7, #12
 80075a2:	2202      	movs	r2, #2
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f96a 	bl	8008880 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80075ac:	e02e      	b.n	800760c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f8fa 	bl	80087aa <USBD_CtlError>
			  ret = USBD_FAIL;
 80075b6:	2302      	movs	r3, #2
 80075b8:	75fb      	strb	r3, [r7, #23]
      break;
 80075ba:	e027      	b.n	800760c <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d107      	bne.n	80075d6 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80075c6:	f107 030f 	add.w	r3, r7, #15
 80075ca:	2201      	movs	r2, #1
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 f956 	bl	8008880 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80075d4:	e01a      	b.n	800760c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f8e6 	bl	80087aa <USBD_CtlError>
			  ret = USBD_FAIL;
 80075de:	2302      	movs	r3, #2
 80075e0:	75fb      	strb	r3, [r7, #23]
      break;
 80075e2:	e013      	b.n	800760c <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d00d      	beq.n	800760a <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 f8da 	bl	80087aa <USBD_CtlError>
			  ret = USBD_FAIL;
 80075f6:	2302      	movs	r3, #2
 80075f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80075fa:	e006      	b.n	800760a <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 f8d3 	bl	80087aa <USBD_CtlError>
      ret = USBD_FAIL;
 8007604:	2302      	movs	r3, #2
 8007606:	75fb      	strb	r3, [r7, #23]
      break;
 8007608:	e000      	b.n	800760c <USBD_CDC_Setup+0x126>
      break;
 800760a:	bf00      	nop
    }
    break;
 800760c:	e006      	b.n	800761c <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 f8ca 	bl	80087aa <USBD_CtlError>
    ret = USBD_FAIL;
 8007616:	2302      	movs	r3, #2
 8007618:	75fb      	strb	r3, [r7, #23]
    break;
 800761a:	bf00      	nop
  }

  return ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007638:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007640:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007648:	2b00      	cmp	r3, #0
 800764a:	d03a      	beq.n	80076c2 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	440b      	add	r3, r1
 800765a:	331c      	adds	r3, #28
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d029      	beq.n	80076b6 <USBD_CDC_DataIn+0x90>
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	331c      	adds	r3, #28
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	78f9      	ldrb	r1, [r7, #3]
 8007676:	68b8      	ldr	r0, [r7, #8]
 8007678:	460b      	mov	r3, r1
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	1a5b      	subs	r3, r3, r1
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4403      	add	r3, r0
 8007682:	3344      	adds	r3, #68	; 0x44
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	fbb2 f1f3 	udiv	r1, r2, r3
 800768a:	fb03 f301 	mul.w	r3, r3, r1
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d110      	bne.n	80076b6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007694:	78fa      	ldrb	r2, [r7, #3]
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	440b      	add	r3, r1
 80076a2:	331c      	adds	r3, #28
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80076a8:	78f9      	ldrb	r1, [r7, #3]
 80076aa:	2300      	movs	r3, #0
 80076ac:	2200      	movs	r2, #0
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f00d fa2f 	bl	8014b12 <USBD_LL_Transmit>
 80076b4:	e003      	b.n	80076be <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	e000      	b.n	80076c4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80076c2:	2302      	movs	r3, #2
  }
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076de:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f00d fa5a 	bl	8014b9e <USBD_LL_GetRxDataSize>
 80076ea:	4602      	mov	r2, r0
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00d      	beq.n	8007718 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007710:	4611      	mov	r1, r2
 8007712:	4798      	blx	r3

    return USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007730:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007738:	2b00      	cmp	r3, #0
 800773a:	d015      	beq.n	8007768 <USBD_CDC_EP0_RxReady+0x46>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007742:	2bff      	cmp	r3, #255	; 0xff
 8007744:	d010      	beq.n	8007768 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007754:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800775c:	b292      	uxth	r2, r2
 800775e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	22ff      	movs	r2, #255	; 0xff
 8007764:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2243      	movs	r2, #67	; 0x43
 8007780:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007782:	4b03      	ldr	r3, [pc, #12]	; (8007790 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	20000090 	.word	0x20000090

08007794 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2243      	movs	r2, #67	; 0x43
 80077a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	2000004c 	.word	0x2000004c

080077b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2243      	movs	r2, #67	; 0x43
 80077c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80077c2:	4b03      	ldr	r3, [pc, #12]	; (80077d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	200000d4 	.word	0x200000d4

080077d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	220a      	movs	r2, #10
 80077e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	20000008 	.word	0x20000008

080077f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80077fe:	2302      	movs	r3, #2
 8007800:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007822:	b480      	push	{r7}
 8007824:	b087      	sub	sp, #28
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	4613      	mov	r3, r2
 800782e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007836:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007840:	88fa      	ldrh	r2, [r7, #6]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007866:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800788c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007894:	2b00      	cmp	r3, #0
 8007896:	d017      	beq.n	80078c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	7c1b      	ldrb	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078aa:	2101      	movs	r1, #1
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f00d f953 	bl	8014b58 <USBD_LL_PrepareReceive>
 80078b2:	e007      	b.n	80078c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ba:	2340      	movs	r3, #64	; 0x40
 80078bc:	2101      	movs	r1, #1
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f00d f94a 	bl	8014b58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e000      	b.n	80078ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80078c8:	2302      	movs	r3, #2
  }
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	4613      	mov	r3, r2
 80078de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	e01a      	b.n	8007920 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	79fa      	ldrb	r2, [r7, #7]
 8007916:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f00c ffc5 	bl	80148a8 <USBD_LL_Init>

  return USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d006      	beq.n	800794a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
 8007948:	e001      	b.n	800794e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800794a:	2302      	movs	r3, #2
 800794c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f00c ffeb 	bl	8014940 <USBD_LL_Start>

  return USBD_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007996:	2302      	movs	r3, #2
 8007998:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00c      	beq.n	80079be <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4611      	mov	r1, r2
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	78fa      	ldrb	r2, [r7, #3]
 80079de:	4611      	mov	r1, r2
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
  return USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fe95 	bl	8008730 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007a22:	f003 031f 	and.w	r3, r3, #31
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d00c      	beq.n	8007a44 <USBD_LL_SetupStage+0x56>
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d302      	bcc.n	8007a34 <USBD_LL_SetupStage+0x46>
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d010      	beq.n	8007a54 <USBD_LL_SetupStage+0x66>
 8007a32:	e017      	b.n	8007a64 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa05 	bl	8007e4c <USBD_StdDevReq>
    break;
 8007a42:	e01a      	b.n	8007a7a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa67 	bl	8007f20 <USBD_StdItfReq>
    break;
 8007a52:	e012      	b.n	8007a7a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 faa5 	bl	8007fac <USBD_StdEPReq>
    break;
 8007a62:	e00a      	b.n	8007a7a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007a6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f00c ffc4 	bl	8014a00 <USBD_LL_StallEP>
    break;
 8007a78:	bf00      	nop
  }

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d14b      	bne.n	8007b30 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a9e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d134      	bne.n	8007b14 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d919      	bls.n	8007aea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	1ad2      	subs	r2, r2, r3
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d203      	bcs.n	8007ad8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	e002      	b.n	8007ade <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 ff18 	bl	8008918 <USBD_CtlContinueRx>
 8007ae8:	e038      	b.n	8007b5c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d105      	bne.n	8007b0c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 ff15 	bl	800893c <USBD_CtlSendStatus>
 8007b12:	e023      	b.n	8007b5c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007b1a:	2b05      	cmp	r3, #5
 8007b1c:	d11e      	bne.n	8007b5c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007b26:	2100      	movs	r1, #0
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f00c ff69 	bl	8014a00 <USBD_LL_StallEP>
 8007b2e:	e015      	b.n	8007b5c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00d      	beq.n	8007b58 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d108      	bne.n	8007b58 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	7afa      	ldrb	r2, [r7, #11]
 8007b50:	4611      	mov	r1, r2
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	4798      	blx	r3
 8007b56:	e001      	b.n	8007b5c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e000      	b.n	8007b5e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	607a      	str	r2, [r7, #4]
 8007b72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d17f      	bne.n	8007c7a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3314      	adds	r3, #20
 8007b7e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d15c      	bne.n	8007c44 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d915      	bls.n	8007bc2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fe82 	bl	80088b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2100      	movs	r1, #0
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f00c ffcc 	bl	8014b58 <USBD_LL_PrepareReceive>
 8007bc0:	e04e      	b.n	8007c60 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	6912      	ldr	r2, [r2, #16]
 8007bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bce:	fb02 f201 	mul.w	r2, r2, r1
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11c      	bne.n	8007c12 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d316      	bcc.n	8007c12 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d20f      	bcs.n	8007c12 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 fe5e 	bl	80088b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007c04:	2300      	movs	r3, #0
 8007c06:	2200      	movs	r2, #0
 8007c08:	2100      	movs	r1, #0
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f00c ffa4 	bl	8014b58 <USBD_LL_PrepareReceive>
 8007c10:	e026      	b.n	8007c60 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d105      	bne.n	8007c34 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007c34:	2180      	movs	r1, #128	; 0x80
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f00c fee2 	bl	8014a00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fe90 	bl	8008962 <USBD_CtlReceiveStatus>
 8007c42:	e00d      	b.n	8007c60 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d004      	beq.n	8007c58 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c58:	2180      	movs	r1, #128	; 0x80
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f00c fed0 	bl	8014a00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d11d      	bne.n	8007ca6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fe82 	bl	8007974 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007c78:	e015      	b.n	8007ca6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00d      	beq.n	8007ca2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d108      	bne.n	8007ca2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	7afa      	ldrb	r2, [r7, #11]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	4798      	blx	r3
 8007ca0:	e001      	b.n	8007ca6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e000      	b.n	8007ca8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cb8:	2340      	movs	r3, #64	; 0x40
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f00c fe59 	bl	8014976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2240      	movs	r2, #64	; 0x40
 8007cd0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2180      	movs	r1, #128	; 0x80
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f00c fe4b 	bl	8014976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2240      	movs	r2, #64	; 0x40
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d009      	beq.n	8007d28 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6852      	ldr	r2, [r2, #4]
 8007d20:	b2d2      	uxtb	r2, r2
 8007d22:	4611      	mov	r1, r2
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
  }

  return USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b083      	sub	sp, #12
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d10b      	bne.n	8007dc8 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6852      	ldr	r2, [r2, #4]
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e62:	2b20      	cmp	r3, #32
 8007e64:	d004      	beq.n	8007e70 <USBD_StdDevReq+0x24>
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d002      	beq.n	8007e70 <USBD_StdDevReq+0x24>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <USBD_StdDevReq+0x34>
 8007e6e:	e04c      	b.n	8007f0a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
    break;
 8007e7e:	e049      	b.n	8007f14 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d83a      	bhi.n	8007efe <USBD_StdDevReq+0xb2>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_StdDevReq+0x44>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ee1 	.word	0x08007ee1
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	08007eff 	.word	0x08007eff
 8007e9c:	08007eeb 	.word	0x08007eeb
 8007ea0:	08007eff 	.word	0x08007eff
 8007ea4:	08007ec3 	.word	0x08007ec3
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007eff 	.word	0x08007eff
 8007eb0:	08007ed7 	.word	0x08007ed7
 8007eb4:	08007ecd 	.word	0x08007ecd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9d2 	bl	8008264 <USBD_GetDescriptor>
      break;
 8007ec0:	e022      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fac7 	bl	8008458 <USBD_SetAddress>
      break;
 8007eca:	e01d      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fb04 	bl	80084dc <USBD_SetConfig>
      break;
 8007ed4:	e018      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fb8d 	bl	80085f8 <USBD_GetConfig>
      break;
 8007ede:	e013      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fbbc 	bl	8008660 <USBD_GetStatus>
      break;
 8007ee8:	e00e      	b.n	8007f08 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fbea 	bl	80086c6 <USBD_SetFeature>
      break;
 8007ef2:	e009      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fbf9 	bl	80086ee <USBD_ClrFeature>
      break;
 8007efc:	e004      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fc52 	bl	80087aa <USBD_CtlError>
      break;
 8007f06:	bf00      	nop
    }
    break;
 8007f08:	e004      	b.n	8007f14 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fc4c 	bl	80087aa <USBD_CtlError>
    break;
 8007f12:	bf00      	nop
  }

  return ret;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d003      	beq.n	8007f42 <USBD_StdItfReq+0x22>
 8007f3a:	2b40      	cmp	r3, #64	; 0x40
 8007f3c:	d001      	beq.n	8007f42 <USBD_StdItfReq+0x22>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d12a      	bne.n	8007f98 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d81d      	bhi.n	8007f8a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d813      	bhi.n	8007f80 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d110      	bne.n	8007f94 <USBD_StdItfReq+0x74>
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10d      	bne.n	8007f94 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fcdf 	bl	800893c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007f7e:	e009      	b.n	8007f94 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fc11 	bl	80087aa <USBD_CtlError>
      break;
 8007f88:	e004      	b.n	8007f94 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc0c 	bl	80087aa <USBD_CtlError>
      break;
 8007f92:	e000      	b.n	8007f96 <USBD_StdItfReq+0x76>
      break;
 8007f94:	bf00      	nop
    }
    break;
 8007f96:	e004      	b.n	8007fa2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fc05 	bl	80087aa <USBD_CtlError>
    break;
 8007fa0:	bf00      	nop
  }

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	889b      	ldrh	r3, [r3, #4]
 8007fbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d004      	beq.n	8007fd6 <USBD_StdEPReq+0x2a>
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d002      	beq.n	8007fd6 <USBD_StdEPReq+0x2a>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <USBD_StdEPReq+0x3a>
 8007fd4:	e13b      	b.n	800824e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
    break;
 8007fe4:	e138      	b.n	8008258 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d10a      	bne.n	8008008 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	e128      	b.n	800825a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d03e      	beq.n	800808e <USBD_StdEPReq+0xe2>
 8008010:	2b03      	cmp	r3, #3
 8008012:	d002      	beq.n	800801a <USBD_StdEPReq+0x6e>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d070      	beq.n	80080fa <USBD_StdEPReq+0x14e>
 8008018:	e113      	b.n	8008242 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008020:	2b02      	cmp	r3, #2
 8008022:	d002      	beq.n	800802a <USBD_StdEPReq+0x7e>
 8008024:	2b03      	cmp	r3, #3
 8008026:	d015      	beq.n	8008054 <USBD_StdEPReq+0xa8>
 8008028:	e02b      	b.n	8008082 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00c      	beq.n	800804a <USBD_StdEPReq+0x9e>
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b80      	cmp	r3, #128	; 0x80
 8008034:	d009      	beq.n	800804a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f00c fce0 	bl	8014a00 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008040:	2180      	movs	r1, #128	; 0x80
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f00c fcdc 	bl	8014a00 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008048:	e020      	b.n	800808c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fbac 	bl	80087aa <USBD_CtlError>
        break;
 8008052:	e01b      	b.n	800808c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	885b      	ldrh	r3, [r3, #2]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10e      	bne.n	800807a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <USBD_StdEPReq+0xce>
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d008      	beq.n	800807a <USBD_StdEPReq+0xce>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88db      	ldrh	r3, [r3, #6]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f00c fcc3 	bl	8014a00 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fc5e 	bl	800893c <USBD_CtlSendStatus>

        break;
 8008080:	e004      	b.n	800808c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fb90 	bl	80087aa <USBD_CtlError>
        break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e0de      	b.n	800824c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008094:	2b02      	cmp	r3, #2
 8008096:	d002      	beq.n	800809e <USBD_StdEPReq+0xf2>
 8008098:	2b03      	cmp	r3, #3
 800809a:	d015      	beq.n	80080c8 <USBD_StdEPReq+0x11c>
 800809c:	e026      	b.n	80080ec <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00c      	beq.n	80080be <USBD_StdEPReq+0x112>
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b80      	cmp	r3, #128	; 0x80
 80080a8:	d009      	beq.n	80080be <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f00c fca6 	bl	8014a00 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80080b4:	2180      	movs	r1, #128	; 0x80
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f00c fca2 	bl	8014a00 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80080bc:	e01c      	b.n	80080f8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb72 	bl	80087aa <USBD_CtlError>
        break;
 80080c6:	e017      	b.n	80080f8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	885b      	ldrh	r3, [r3, #2]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d112      	bne.n	80080f6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f00c fcad 	bl	8014a3e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc29 	bl	800893c <USBD_CtlSendStatus>
        }
        break;
 80080ea:	e004      	b.n	80080f6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fb5b 	bl	80087aa <USBD_CtlError>
        break;
 80080f4:	e000      	b.n	80080f8 <USBD_StdEPReq+0x14c>
        break;
 80080f6:	bf00      	nop
      }
      break;
 80080f8:	e0a8      	b.n	800824c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008100:	2b02      	cmp	r3, #2
 8008102:	d002      	beq.n	800810a <USBD_StdEPReq+0x15e>
 8008104:	2b03      	cmp	r3, #3
 8008106:	d031      	beq.n	800816c <USBD_StdEPReq+0x1c0>
 8008108:	e095      	b.n	8008236 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d007      	beq.n	8008120 <USBD_StdEPReq+0x174>
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d004      	beq.n	8008120 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fb46 	bl	80087aa <USBD_CtlError>
          break;
 800811e:	e08f      	b.n	8008240 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008124:	2b00      	cmp	r3, #0
 8008126:	da0b      	bge.n	8008140 <USBD_StdEPReq+0x194>
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	3310      	adds	r3, #16
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4413      	add	r3, r2
 800813c:	3304      	adds	r3, #4
 800813e:	e00a      	b.n	8008156 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4413      	add	r3, r2
 8008156:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2202      	movs	r2, #2
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb8b 	bl	8008880 <USBD_CtlSendData>
          break;
 800816a:	e069      	b.n	8008240 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800816c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008170:	2b00      	cmp	r3, #0
 8008172:	da11      	bge.n	8008198 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	f003 020f 	and.w	r2, r3, #15
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	3318      	adds	r3, #24
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d117      	bne.n	80081be <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fb0a 	bl	80087aa <USBD_CtlError>
            break;
 8008196:	e053      	b.n	8008240 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	f003 020f 	and.w	r2, r3, #15
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 faf7 	bl	80087aa <USBD_CtlError>
            break;
 80081bc:	e040      	b.n	8008240 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80081be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da0b      	bge.n	80081de <USBD_StdEPReq+0x232>
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	3310      	adds	r3, #16
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4413      	add	r3, r2
 80081da:	3304      	adds	r3, #4
 80081dc:	e00a      	b.n	80081f4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	4413      	add	r3, r2
 80081f4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <USBD_StdEPReq+0x256>
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d103      	bne.n	800820a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e00e      	b.n	8008228 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f00c fc34 	bl	8014a7c <USBD_LL_IsStallEP>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e002      	b.n	8008228 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2202      	movs	r2, #2
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fb26 	bl	8008880 <USBD_CtlSendData>
          break;
 8008234:	e004      	b.n	8008240 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fab6 	bl	80087aa <USBD_CtlError>
        break;
 800823e:	bf00      	nop
      }
      break;
 8008240:	e004      	b.n	800824c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fab0 	bl	80087aa <USBD_CtlError>
      break;
 800824a:	bf00      	nop
    }
    break;
 800824c:	e004      	b.n	8008258 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 faaa 	bl	80087aa <USBD_CtlError>
    break;
 8008256:	bf00      	nop
  }

  return ret;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	0a1b      	lsrs	r3, r3, #8
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	2b06      	cmp	r3, #6
 800827a:	f200 80c9 	bhi.w	8008410 <USBD_GetDescriptor+0x1ac>
 800827e:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <USBD_GetDescriptor+0x20>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082a1 	.word	0x080082a1
 8008288:	080082b9 	.word	0x080082b9
 800828c:	080082f9 	.word	0x080082f9
 8008290:	08008411 	.word	0x08008411
 8008294:	08008411 	.word	0x08008411
 8008298:	080083bd 	.word	0x080083bd
 800829c:	080083e3 	.word	0x080083e3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7c12      	ldrb	r2, [r2, #16]
 80082ac:	f107 010a 	add.w	r1, r7, #10
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	60f8      	str	r0, [r7, #12]
    break;
 80082b6:	e0b0      	b.n	800841a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7c1b      	ldrb	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10d      	bne.n	80082dc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	f107 020a 	add.w	r2, r7, #10
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3301      	adds	r3, #1
 80082d6:	2202      	movs	r2, #2
 80082d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80082da:	e09e      	b.n	800841a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	f107 020a 	add.w	r2, r7, #10
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	2202      	movs	r2, #2
 80082f4:	701a      	strb	r2, [r3, #0]
    break;
 80082f6:	e090      	b.n	800841a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	885b      	ldrh	r3, [r3, #2]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b05      	cmp	r3, #5
 8008300:	d856      	bhi.n	80083b0 <USBD_GetDescriptor+0x14c>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBD_GetDescriptor+0xa4>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008321 	.word	0x08008321
 800830c:	08008339 	.word	0x08008339
 8008310:	08008351 	.word	0x08008351
 8008314:	08008369 	.word	0x08008369
 8008318:	08008381 	.word	0x08008381
 800831c:	08008399 	.word	0x08008399
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7c12      	ldrb	r2, [r2, #16]
 800832c:	f107 010a 	add.w	r1, r7, #10
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
      break;
 8008336:	e040      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 010a 	add.w	r1, r7, #10
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
      break;
 800834e:	e034      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 010a 	add.w	r1, r7, #10
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
      break;
 8008366:	e028      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	7c12      	ldrb	r2, [r2, #16]
 8008374:	f107 010a 	add.w	r1, r7, #10
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
      break;
 800837e:	e01c      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 010a 	add.w	r1, r7, #10
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
      break;
 8008396:	e010      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	7c12      	ldrb	r2, [r2, #16]
 80083a4:	f107 010a 	add.w	r1, r7, #10
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	60f8      	str	r0, [r7, #12]
      break;
 80083ae:	e004      	b.n	80083ba <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9f9 	bl	80087aa <USBD_CtlError>
      return;
 80083b8:	e04b      	b.n	8008452 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80083ba:	e02e      	b.n	800841a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7c1b      	ldrb	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d109      	bne.n	80083d8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	f107 020a 	add.w	r2, r7, #10
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
 80083d4:	60f8      	str	r0, [r7, #12]
      break;
 80083d6:	e020      	b.n	800841a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f9e5 	bl	80087aa <USBD_CtlError>
      return;
 80083e0:	e037      	b.n	8008452 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7c1b      	ldrb	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10d      	bne.n	8008406 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	f107 020a 	add.w	r2, r7, #10
 80083f6:	4610      	mov	r0, r2
 80083f8:	4798      	blx	r3
 80083fa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	2207      	movs	r2, #7
 8008402:	701a      	strb	r2, [r3, #0]
      break;
 8008404:	e009      	b.n	800841a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f9ce 	bl	80087aa <USBD_CtlError>
      return;
 800840e:	e020      	b.n	8008452 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f9c9 	bl	80087aa <USBD_CtlError>
    return;
 8008418:	e01b      	b.n	8008452 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800841a:	897b      	ldrh	r3, [r7, #10]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d011      	beq.n	8008444 <USBD_GetDescriptor+0x1e0>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	88db      	ldrh	r3, [r3, #6]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00d      	beq.n	8008444 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	88da      	ldrh	r2, [r3, #6]
 800842c:	897b      	ldrh	r3, [r7, #10]
 800842e:	4293      	cmp	r3, r2
 8008430:	bf28      	it	cs
 8008432:	4613      	movcs	r3, r2
 8008434:	b29b      	uxth	r3, r3
 8008436:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008438:	897b      	ldrh	r3, [r7, #10]
 800843a:	461a      	mov	r2, r3
 800843c:	68f9      	ldr	r1, [r7, #12]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa1e 	bl	8008880 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	88db      	ldrh	r3, [r3, #6]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa75 	bl	800893c <USBD_CtlSendStatus>
  }
}
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	889b      	ldrh	r3, [r3, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d130      	bne.n	80084cc <USBD_SetAddress+0x74>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d12c      	bne.n	80084cc <USBD_SetAddress+0x74>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	885b      	ldrh	r3, [r3, #2]
 8008476:	2b7f      	cmp	r3, #127	; 0x7f
 8008478:	d828      	bhi.n	80084cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008484:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800848c:	2b03      	cmp	r3, #3
 800848e:	d104      	bne.n	800849a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f989 	bl	80087aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008498:	e01c      	b.n	80084d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f00c fb14 	bl	8014ad4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa45 	bl	800893c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c0:	e008      	b.n	80084d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	e003      	b.n	80084d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f96b 	bl	80087aa <USBD_CtlError>
  }
}
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	885b      	ldrh	r3, [r3, #2]
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	4b41      	ldr	r3, [pc, #260]	; (80085f4 <USBD_SetConfig+0x118>)
 80084ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f0:	4b40      	ldr	r3, [pc, #256]	; (80085f4 <USBD_SetConfig+0x118>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d904      	bls.n	8008502 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f955 	bl	80087aa <USBD_CtlError>
 8008500:	e075      	b.n	80085ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008508:	2b02      	cmp	r3, #2
 800850a:	d002      	beq.n	8008512 <USBD_SetConfig+0x36>
 800850c:	2b03      	cmp	r3, #3
 800850e:	d023      	beq.n	8008558 <USBD_SetConfig+0x7c>
 8008510:	e062      	b.n	80085d8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008512:	4b38      	ldr	r3, [pc, #224]	; (80085f4 <USBD_SetConfig+0x118>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d01a      	beq.n	8008550 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800851a:	4b36      	ldr	r3, [pc, #216]	; (80085f4 <USBD_SetConfig+0x118>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2203      	movs	r2, #3
 8008528:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800852c:	4b31      	ldr	r3, [pc, #196]	; (80085f4 <USBD_SetConfig+0x118>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff fa29 	bl	800798a <USBD_SetClassConfig>
 8008538:	4603      	mov	r3, r0
 800853a:	2b02      	cmp	r3, #2
 800853c:	d104      	bne.n	8008548 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f932 	bl	80087aa <USBD_CtlError>
          return;
 8008546:	e052      	b.n	80085ee <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f9f7 	bl	800893c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800854e:	e04e      	b.n	80085ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9f3 	bl	800893c <USBD_CtlSendStatus>
      break;
 8008556:	e04a      	b.n	80085ee <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008558:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <USBD_SetConfig+0x118>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d112      	bne.n	8008586 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008568:	4b22      	ldr	r3, [pc, #136]	; (80085f4 <USBD_SetConfig+0x118>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008572:	4b20      	ldr	r3, [pc, #128]	; (80085f4 <USBD_SetConfig+0x118>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fa25 	bl	80079c8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f9dc 	bl	800893c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008584:	e033      	b.n	80085ee <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008586:	4b1b      	ldr	r3, [pc, #108]	; (80085f4 <USBD_SetConfig+0x118>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d01d      	beq.n	80085d0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff fa13 	bl	80079c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085a2:	4b14      	ldr	r3, [pc, #80]	; (80085f4 <USBD_SetConfig+0x118>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085ac:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <USBD_SetConfig+0x118>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff f9e9 	bl	800798a <USBD_SetClassConfig>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d104      	bne.n	80085c8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f8f2 	bl	80087aa <USBD_CtlError>
          return;
 80085c6:	e012      	b.n	80085ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f9b7 	bl	800893c <USBD_CtlSendStatus>
      break;
 80085ce:	e00e      	b.n	80085ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f9b3 	bl	800893c <USBD_CtlSendStatus>
      break;
 80085d6:	e00a      	b.n	80085ee <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f8e5 	bl	80087aa <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <USBD_SetConfig+0x118>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff f9ee 	bl	80079c8 <USBD_ClrClassConfig>
      break;
 80085ec:	bf00      	nop
    }
  }
}
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	2000045c 	.word	0x2000045c

080085f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d004      	beq.n	8008614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f8cc 	bl	80087aa <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008612:	e021      	b.n	8008658 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800861a:	2b01      	cmp	r3, #1
 800861c:	db17      	blt.n	800864e <USBD_GetConfig+0x56>
 800861e:	2b02      	cmp	r3, #2
 8008620:	dd02      	ble.n	8008628 <USBD_GetConfig+0x30>
 8008622:	2b03      	cmp	r3, #3
 8008624:	d00b      	beq.n	800863e <USBD_GetConfig+0x46>
 8008626:	e012      	b.n	800864e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3308      	adds	r3, #8
 8008632:	2201      	movs	r2, #1
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f922 	bl	8008880 <USBD_CtlSendData>
      break;
 800863c:	e00c      	b.n	8008658 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3304      	adds	r3, #4
 8008642:	2201      	movs	r2, #1
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f91a 	bl	8008880 <USBD_CtlSendData>
      break;
 800864c:	e004      	b.n	8008658 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8aa 	bl	80087aa <USBD_CtlError>
      break;
 8008656:	bf00      	nop
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008670:	3b01      	subs	r3, #1
 8008672:	2b02      	cmp	r3, #2
 8008674:	d81e      	bhi.n	80086b4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	88db      	ldrh	r3, [r3, #6]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d004      	beq.n	8008688 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f892 	bl	80087aa <USBD_CtlError>
      break;
 8008686:	e01a      	b.n	80086be <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f043 0202 	orr.w	r2, r3, #2
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	330c      	adds	r3, #12
 80086a8:	2202      	movs	r2, #2
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f8e7 	bl	8008880 <USBD_CtlSendData>
    break;
 80086b2:	e004      	b.n	80086be <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f877 	bl	80087aa <USBD_CtlError>
    break;
 80086bc:	bf00      	nop
  }
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d106      	bne.n	80086e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f92b 	bl	800893c <USBD_CtlSendStatus>
  }

}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086fe:	3b01      	subs	r3, #1
 8008700:	2b02      	cmp	r3, #2
 8008702:	d80b      	bhi.n	800871c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	885b      	ldrh	r3, [r3, #2]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d10c      	bne.n	8008726 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f911 	bl	800893c <USBD_CtlSendStatus>
    }
    break;
 800871a:	e004      	b.n	8008726 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f843 	bl	80087aa <USBD_CtlError>
    break;
 8008724:	e000      	b.n	8008728 <USBD_ClrFeature+0x3a>
    break;
 8008726:	bf00      	nop
  }
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781a      	ldrb	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	785a      	ldrb	r2, [r3, #1]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	3302      	adds	r3, #2
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	b29a      	uxth	r2, r3
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	3303      	adds	r3, #3
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	b29b      	uxth	r3, r3
 800875e:	4413      	add	r3, r2
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	3304      	adds	r3, #4
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b29a      	uxth	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	3305      	adds	r3, #5
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	b29b      	uxth	r3, r3
 800877a:	4413      	add	r3, r2
 800877c:	b29a      	uxth	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	3306      	adds	r3, #6
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	b29a      	uxth	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	3307      	adds	r3, #7
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	4413      	add	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	80da      	strh	r2, [r3, #6]

}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80087b4:	2180      	movs	r1, #128	; 0x80
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f00c f922 	bl	8014a00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80087bc:	2100      	movs	r1, #0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f00c f91e 	bl	8014a00 <USBD_LL_StallEP>
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d032      	beq.n	8008848 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f834 	bl	8008850 <USBD_GetLen>
 80087e8:	4603      	mov	r3, r0
 80087ea:	3301      	adds	r3, #1
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	75fa      	strb	r2, [r7, #23]
 80087fc:	461a      	mov	r2, r3
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	4413      	add	r3, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	7812      	ldrb	r2, [r2, #0]
 8008806:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	75fa      	strb	r2, [r7, #23]
 800880e:	461a      	mov	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4413      	add	r3, r2
 8008814:	2203      	movs	r2, #3
 8008816:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008818:	e012      	b.n	8008840 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	60fa      	str	r2, [r7, #12]
 8008820:	7dfa      	ldrb	r2, [r7, #23]
 8008822:	1c51      	adds	r1, r2, #1
 8008824:	75f9      	strb	r1, [r7, #23]
 8008826:	4611      	mov	r1, r2
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	440a      	add	r2, r1
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	75fa      	strb	r2, [r7, #23]
 8008836:	461a      	mov	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4413      	add	r3, r2
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e8      	bne.n	800881a <USBD_GetString+0x4e>
    }
  }
}
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800885c:	e005      	b.n	800886a <USBD_GetLen+0x1a>
    {
        len++;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	3301      	adds	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3301      	adds	r3, #1
 8008868:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f5      	bne.n	800885e <USBD_GetLen+0xe>
    }

    return len;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2202      	movs	r2, #2
 8008892:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008896:	88fa      	ldrh	r2, [r7, #6]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800889c:	88fa      	ldrh	r2, [r7, #6]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80088a2:	88fb      	ldrh	r3, [r7, #6]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	2100      	movs	r1, #0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f00c f932 	bl	8014b12 <USBD_LL_Transmit>

  return USBD_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	2100      	movs	r1, #0
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f00c f920 	bl	8014b12 <USBD_LL_Transmit>

  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2203      	movs	r2, #3
 80088ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	2100      	movs	r1, #0
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f00c f925 	bl	8014b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	4613      	mov	r3, r2
 8008924:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	2100      	movs	r1, #0
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f00c f913 	bl	8014b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2204      	movs	r2, #4
 8008948:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800894c:	2300      	movs	r3, #0
 800894e:	2200      	movs	r2, #0
 8008950:	2100      	movs	r1, #0
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f00c f8dd 	bl	8014b12 <USBD_LL_Transmit>

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2205      	movs	r2, #5
 800896e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f00c f8ed 	bl	8014b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800899a:	2b84      	cmp	r3, #132	; 0x84
 800899c:	d005      	beq.n	80089aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800899e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4413      	add	r3, r2
 80089a6:	3303      	adds	r3, #3
 80089a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80089aa:	68fb      	ldr	r3, [r7, #12]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089be:	f3ef 8305 	mrs	r3, IPSR
 80089c2:	607b      	str	r3, [r7, #4]
  return(result);
 80089c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bf14      	ite	ne
 80089ca:	2301      	movne	r3, #1
 80089cc:	2300      	moveq	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80089e0:	f001 fc3a 	bl	800a258 <vTaskStartScheduler>
  
  return osOK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	bd80      	pop	{r7, pc}

080089ea <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80089ee:	f7ff ffe3 	bl	80089b8 <inHandlerMode>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80089f8:	f001 fd46 	bl	800a488 <xTaskGetTickCountFromISR>
 80089fc:	4603      	mov	r3, r0
 80089fe:	e002      	b.n	8008a06 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008a00:	f001 fd32 	bl	800a468 <xTaskGetTickCount>
 8008a04:	4603      	mov	r3, r0
  }
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a0c:	b089      	sub	sp, #36	; 0x24
 8008a0e:	af04      	add	r7, sp, #16
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d020      	beq.n	8008a5e <osThreadCreate+0x54>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d01c      	beq.n	8008a5e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685c      	ldr	r4, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681d      	ldr	r5, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691e      	ldr	r6, [r3, #16]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff ffa6 	bl	8008988 <makeFreeRtosPriority>
 8008a3c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a46:	9202      	str	r2, [sp, #8]
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	9100      	str	r1, [sp, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	4632      	mov	r2, r6
 8008a50:	4629      	mov	r1, r5
 8008a52:	4620      	mov	r0, r4
 8008a54:	f001 fa45 	bl	8009ee2 <xTaskCreateStatic>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	e01c      	b.n	8008a98 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685c      	ldr	r4, [r3, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a6a:	b29e      	uxth	r6, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff ff88 	bl	8008988 <makeFreeRtosPriority>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	9200      	str	r2, [sp, #0]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	4632      	mov	r2, r6
 8008a86:	4629      	mov	r1, r5
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f001 fa83 	bl	8009f94 <xTaskCreate>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d001      	beq.n	8008a98 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e000      	b.n	8008a9a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a98:	68fb      	ldr	r3, [r7, #12]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008aa2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <osDelay+0x16>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	e000      	b.n	8008aba <osDelay+0x18>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4618      	mov	r0, r3
 8008abc:	f001 fb98 	bl	800a1f0 <vTaskDelay>
  
  return osOK;
 8008ac0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	f000 fc41 	bl	8009368 <xQueueCreateMutexStatic>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	e003      	b.n	8008af2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008aea:	2001      	movs	r0, #1
 8008aec:	f000 fc24 	bl	8009338 <xQueueCreateMutex>
 8008af0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <osMutexWait+0x18>
    return osErrorParameter;
 8008b10:	2380      	movs	r3, #128	; 0x80
 8008b12:	e03a      	b.n	8008b8a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b1e:	d103      	bne.n	8008b28 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	e009      	b.n	8008b3c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d006      	beq.n	8008b3c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <osMutexWait+0x40>
      ticks = 1;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008b3c:	f7ff ff3c 	bl	80089b8 <inHandlerMode>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d017      	beq.n	8008b76 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 f822 	bl	8009b98 <xQueueReceiveFromISR>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d001      	beq.n	8008b5e <osMutexWait+0x62>
      return osErrorOS;
 8008b5a:	23ff      	movs	r3, #255	; 0xff
 8008b5c:	e015      	b.n	8008b8a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d011      	beq.n	8008b88 <osMutexWait+0x8c>
 8008b64:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <osMutexWait+0x98>)
 8008b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	e008      	b.n	8008b88 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008b76:	68f9      	ldr	r1, [r7, #12]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 ff05 	bl	8009988 <xQueueSemaphoreTake>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d001      	beq.n	8008b88 <osMutexWait+0x8c>
    return osErrorOS;
 8008b84:	23ff      	movs	r3, #255	; 0xff
 8008b86:	e000      	b.n	8008b8a <osMutexWait+0x8e>
  }
  
  return osOK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	e000ed04 	.word	0xe000ed04

08008b98 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008ba8:	f7ff ff06 	bl	80089b8 <inHandlerMode>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d016      	beq.n	8008be0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fd7f 	bl	80096bc <xQueueGiveFromISR>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d001      	beq.n	8008bc8 <osMutexRelease+0x30>
      return osErrorOS;
 8008bc4:	23ff      	movs	r3, #255	; 0xff
 8008bc6:	e017      	b.n	8008bf8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d013      	beq.n	8008bf6 <osMutexRelease+0x5e>
 8008bce:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <osMutexRelease+0x68>)
 8008bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	e00a      	b.n	8008bf6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008be0:	2300      	movs	r3, #0
 8008be2:	2200      	movs	r2, #0
 8008be4:	2100      	movs	r1, #0
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fbda 	bl	80093a0 <xQueueGenericSend>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d001      	beq.n	8008bf6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008bf2:	23ff      	movs	r3, #255	; 0xff
 8008bf4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d010      	beq.n	8008c38 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d10b      	bne.n	8008c34 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	2303      	movs	r3, #3
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4613      	mov	r3, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	2100      	movs	r1, #0
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	f000 fa9c 	bl	8009168 <xQueueGenericCreateStatic>
 8008c30:	4603      	mov	r3, r0
 8008c32:	e016      	b.n	8008c62 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	e014      	b.n	8008c62 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d110      	bne.n	8008c60 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8008c3e:	2203      	movs	r2, #3
 8008c40:	2100      	movs	r1, #0
 8008c42:	2001      	movs	r0, #1
 8008c44:	f000 fb02 	bl	800924c <xQueueGenericCreate>
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d005      	beq.n	8008c5c <osSemaphoreCreate+0x58>
 8008c50:	2300      	movs	r3, #0
 8008c52:	2200      	movs	r2, #0
 8008c54:	2100      	movs	r1, #0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fba2 	bl	80093a0 <xQueueGenericSend>
      return sema;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	e000      	b.n	8008c62 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008c60:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008c76:	2300      	movs	r3, #0
 8008c78:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008c80:	2380      	movs	r3, #128	; 0x80
 8008c82:	e03a      	b.n	8008cfa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c8e:	d103      	bne.n	8008c98 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e009      	b.n	8008cac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d006      	beq.n	8008cac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <osSemaphoreWait+0x40>
      ticks = 1;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008cac:	f7ff fe84 	bl	80089b8 <inHandlerMode>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d017      	beq.n	8008ce6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008cb6:	f107 0308 	add.w	r3, r7, #8
 8008cba:	461a      	mov	r2, r3
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 ff6a 	bl	8009b98 <xQueueReceiveFromISR>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d001      	beq.n	8008cce <osSemaphoreWait+0x62>
      return osErrorOS;
 8008cca:	23ff      	movs	r3, #255	; 0xff
 8008ccc:	e015      	b.n	8008cfa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d011      	beq.n	8008cf8 <osSemaphoreWait+0x8c>
 8008cd4:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <osSemaphoreWait+0x98>)
 8008cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	e008      	b.n	8008cf8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fe4d 	bl	8009988 <xQueueSemaphoreTake>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d001      	beq.n	8008cf8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008cf4:	23ff      	movs	r3, #255	; 0xff
 8008cf6:	e000      	b.n	8008cfa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	e000ed04 	.word	0xe000ed04

08008d08 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008d18:	f7ff fe4e 	bl	80089b8 <inHandlerMode>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d016      	beq.n	8008d50 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008d22:	f107 0308 	add.w	r3, r7, #8
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fcc7 	bl	80096bc <xQueueGiveFromISR>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d001      	beq.n	8008d38 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008d34:	23ff      	movs	r3, #255	; 0xff
 8008d36:	e017      	b.n	8008d68 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d013      	beq.n	8008d66 <osSemaphoreRelease+0x5e>
 8008d3e:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <osSemaphoreRelease+0x68>)
 8008d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	e00a      	b.n	8008d66 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008d50:	2300      	movs	r3, #0
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fb22 	bl	80093a0 <xQueueGenericSend>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d001      	beq.n	8008d66 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008d62:	23ff      	movs	r3, #255	; 0xff
 8008d64:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008d66:	68fb      	ldr	r3, [r7, #12]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008d74:	b590      	push	{r4, r7, lr}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d012      	beq.n	8008dac <osMessageCreate+0x38>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00e      	beq.n	8008dac <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6859      	ldr	r1, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	689a      	ldr	r2, [r3, #8]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68dc      	ldr	r4, [r3, #12]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	4623      	mov	r3, r4
 8008da4:	f000 f9e0 	bl	8009168 <xQueueGenericCreateStatic>
 8008da8:	4603      	mov	r3, r0
 8008daa:	e008      	b.n	8008dbe <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	4619      	mov	r1, r3
 8008db8:	f000 fa48 	bl	800924c <xQueueGenericCreate>
 8008dbc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd90      	pop	{r4, r7, pc}
	...

08008dc8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <osMessagePut+0x1e>
    ticks = 1;
 8008de2:	2301      	movs	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008de6:	f7ff fde7 	bl	80089b8 <inHandlerMode>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d018      	beq.n	8008e22 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008df0:	f107 0210 	add.w	r2, r7, #16
 8008df4:	f107 0108 	add.w	r1, r7, #8
 8008df8:	2300      	movs	r3, #0
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 fbca 	bl	8009594 <xQueueGenericSendFromISR>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d001      	beq.n	8008e0a <osMessagePut+0x42>
      return osErrorOS;
 8008e06:	23ff      	movs	r3, #255	; 0xff
 8008e08:	e018      	b.n	8008e3c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d014      	beq.n	8008e3a <osMessagePut+0x72>
 8008e10:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <osMessagePut+0x7c>)
 8008e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	e00b      	b.n	8008e3a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008e22:	f107 0108 	add.w	r1, r7, #8
 8008e26:	2300      	movs	r3, #0
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 fab8 	bl	80093a0 <xQueueGenericSend>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d001      	beq.n	8008e3a <osMessagePut+0x72>
      return osErrorOS;
 8008e36:	23ff      	movs	r3, #255	; 0xff
 8008e38:	e000      	b.n	8008e3c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	e000ed04 	.word	0xe000ed04

08008e48 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b08b      	sub	sp, #44	; 0x2c
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10a      	bne.n	8008e78 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008e62:	2380      	movs	r3, #128	; 0x80
 8008e64:	617b      	str	r3, [r7, #20]
    return event;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	461c      	mov	r4, r3
 8008e6a:	f107 0314 	add.w	r3, r7, #20
 8008e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e76:	e054      	b.n	8008f22 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e86:	d103      	bne.n	8008e90 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e8e:	e009      	b.n	8008ea4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <osMessageGet+0x5c>
      ticks = 1;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008ea4:	f7ff fd88 	bl	80089b8 <inHandlerMode>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01c      	beq.n	8008ee8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008eae:	f107 0220 	add.w	r2, r7, #32
 8008eb2:	f107 0314 	add.w	r3, r7, #20
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4619      	mov	r1, r3
 8008eba:	68b8      	ldr	r0, [r7, #8]
 8008ebc:	f000 fe6c 	bl	8009b98 <xQueueReceiveFromISR>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d102      	bne.n	8008ecc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	e001      	b.n	8008ed0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d01d      	beq.n	8008f12 <osMessageGet+0xca>
 8008ed6:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <osMessageGet+0xe4>)
 8008ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	e014      	b.n	8008f12 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	3304      	adds	r3, #4
 8008eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	68b8      	ldr	r0, [r7, #8]
 8008ef4:	f000 fc6c 	bl	80097d0 <xQueueReceive>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d102      	bne.n	8008f04 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008efe:	2310      	movs	r3, #16
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	e006      	b.n	8008f12 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <osMessageGet+0xc6>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e000      	b.n	8008f10 <osMessageGet+0xc8>
 8008f0e:	2340      	movs	r3, #64	; 0x40
 8008f10:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	461c      	mov	r4, r3
 8008f16:	f107 0314 	add.w	r3, r7, #20
 8008f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	372c      	adds	r7, #44	; 0x2c
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd90      	pop	{r4, r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f103 0208 	add.w	r2, r3, #8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f103 0208 	add.w	r2, r3, #8
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f103 0208 	add.w	r2, r3, #8
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	1c5a      	adds	r2, r3, #1
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe8:	d103      	bne.n	8008ff2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e00c      	b.n	800900c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e002      	b.n	8009000 <vListInsert+0x2e>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	429a      	cmp	r2, r3
 800900a:	d2f6      	bcs.n	8008ffa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	601a      	str	r2, [r3, #0]
}
 8009038:	bf00      	nop
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	6892      	ldr	r2, [r2, #8]
 800905a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	6852      	ldr	r2, [r2, #4]
 8009064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d103      	bne.n	8009078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	1e5a      	subs	r2, r3, #1
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d109      	bne.n	80090c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	60bb      	str	r3, [r7, #8]
 80090be:	e7fe      	b.n	80090be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80090c0:	f002 f854 	bl	800b16c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090cc:	68f9      	ldr	r1, [r7, #12]
 80090ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090d0:	fb01 f303 	mul.w	r3, r1, r3
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f0:	3b01      	subs	r3, #1
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090f6:	fb01 f303 	mul.w	r3, r1, r3
 80090fa:	441a      	add	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	22ff      	movs	r2, #255	; 0xff
 8009104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	22ff      	movs	r2, #255	; 0xff
 800910c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d114      	bne.n	8009140 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d01a      	beq.n	8009154 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3310      	adds	r3, #16
 8009122:	4618      	mov	r0, r3
 8009124:	f001 fafc 	bl	800a720 <xTaskRemoveFromEventList>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d012      	beq.n	8009154 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800912e:	4b0d      	ldr	r3, [pc, #52]	; (8009164 <xQueueGenericReset+0xcc>)
 8009130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	e009      	b.n	8009154 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3310      	adds	r3, #16
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff fef3 	bl	8008f30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3324      	adds	r3, #36	; 0x24
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff feee 	bl	8008f30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009154:	f002 f838 	bl	800b1c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009158:	2301      	movs	r3, #1
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	e000ed04 	.word	0xe000ed04

08009168 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08e      	sub	sp, #56	; 0x38
 800916c:	af02      	add	r7, sp, #8
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d109      	bne.n	8009190 <xQueueGenericCreateStatic+0x28>
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	62bb      	str	r3, [r7, #40]	; 0x28
 800918e:	e7fe      	b.n	800918e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <xQueueGenericCreateStatic+0x42>
 8009196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
 80091a8:	e7fe      	b.n	80091a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <xQueueGenericCreateStatic+0x4e>
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <xQueueGenericCreateStatic+0x52>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e000      	b.n	80091bc <xQueueGenericCreateStatic+0x54>
 80091ba:	2300      	movs	r3, #0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d109      	bne.n	80091d4 <xQueueGenericCreateStatic+0x6c>
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	623b      	str	r3, [r7, #32]
 80091d2:	e7fe      	b.n	80091d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <xQueueGenericCreateStatic+0x78>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <xQueueGenericCreateStatic+0x7c>
 80091e0:	2301      	movs	r3, #1
 80091e2:	e000      	b.n	80091e6 <xQueueGenericCreateStatic+0x7e>
 80091e4:	2300      	movs	r3, #0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d109      	bne.n	80091fe <xQueueGenericCreateStatic+0x96>
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	e7fe      	b.n	80091fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091fe:	2348      	movs	r3, #72	; 0x48
 8009200:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b48      	cmp	r3, #72	; 0x48
 8009206:	d009      	beq.n	800921c <xQueueGenericCreateStatic+0xb4>
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	e7fe      	b.n	800921a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00d      	beq.n	8009242 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800922e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	4613      	mov	r3, r2
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	68b9      	ldr	r1, [r7, #8]
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f842 	bl	80092c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009244:	4618      	mov	r0, r3
 8009246:	3730      	adds	r7, #48	; 0x30
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	; 0x28
 8009250:	af02      	add	r7, sp, #8
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <xQueueGenericCreate+0x28>
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	e7fe      	b.n	8009272 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d102      	bne.n	8009280 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800927a:	2300      	movs	r3, #0
 800927c:	61fb      	str	r3, [r7, #28]
 800927e:	e004      	b.n	800928a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	fb02 f303 	mul.w	r3, r2, r3
 8009288:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	3348      	adds	r3, #72	; 0x48
 800928e:	4618      	mov	r0, r3
 8009290:	f002 f886 	bl	800b3a0 <pvPortMalloc>
 8009294:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00f      	beq.n	80092bc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	3348      	adds	r3, #72	; 0x48
 80092a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092aa:	79fa      	ldrb	r2, [r7, #7]
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 f805 	bl	80092c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80092bc:	69bb      	ldr	r3, [r7, #24]
	}
 80092be:	4618      	mov	r0, r3
 80092c0:	3720      	adds	r7, #32
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	607a      	str	r2, [r7, #4]
 80092d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d103      	bne.n	80092e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	e002      	b.n	80092e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092f4:	2101      	movs	r1, #1
 80092f6:	69b8      	ldr	r0, [r7, #24]
 80092f8:	f7ff fece 	bl	8009098 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00e      	beq.n	8009330 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009324:	2300      	movs	r3, #0
 8009326:	2200      	movs	r2, #0
 8009328:	2100      	movs	r1, #0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f838 	bl	80093a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009342:	2301      	movs	r3, #1
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	461a      	mov	r2, r3
 800934e:	6939      	ldr	r1, [r7, #16]
 8009350:	6978      	ldr	r0, [r7, #20]
 8009352:	f7ff ff7b 	bl	800924c <xQueueGenericCreate>
 8009356:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7ff ffd3 	bl	8009304 <prvInitialiseMutex>

		return pxNewQueue;
 800935e:	68fb      	ldr	r3, [r7, #12]
	}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af02      	add	r7, sp, #8
 800936e:	4603      	mov	r3, r0
 8009370:	6039      	str	r1, [r7, #0]
 8009372:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009374:	2301      	movs	r3, #1
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	2300      	movs	r3, #0
 800937a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2200      	movs	r2, #0
 8009384:	6939      	ldr	r1, [r7, #16]
 8009386:	6978      	ldr	r0, [r7, #20]
 8009388:	f7ff feee 	bl	8009168 <xQueueGenericCreateStatic>
 800938c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff ffb8 	bl	8009304 <prvInitialiseMutex>

		return pxNewQueue;
 8009394:	68fb      	ldr	r3, [r7, #12]
	}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08e      	sub	sp, #56	; 0x38
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093ae:	2300      	movs	r3, #0
 80093b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d109      	bne.n	80093d0 <xQueueGenericSend+0x30>
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ce:	e7fe      	b.n	80093ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <xQueueGenericSend+0x3e>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <xQueueGenericSend+0x42>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <xQueueGenericSend+0x44>
 80093e2:	2300      	movs	r3, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <xQueueGenericSend+0x5c>
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
 80093fa:	e7fe      	b.n	80093fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d103      	bne.n	800940a <xQueueGenericSend+0x6a>
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <xQueueGenericSend+0x6e>
 800940a:	2301      	movs	r3, #1
 800940c:	e000      	b.n	8009410 <xQueueGenericSend+0x70>
 800940e:	2300      	movs	r3, #0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <xQueueGenericSend+0x88>
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	623b      	str	r3, [r7, #32]
 8009426:	e7fe      	b.n	8009426 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009428:	f001 fb36 	bl	800aa98 <xTaskGetSchedulerState>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d102      	bne.n	8009438 <xQueueGenericSend+0x98>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <xQueueGenericSend+0x9c>
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <xQueueGenericSend+0x9e>
 800943c:	2300      	movs	r3, #0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d109      	bne.n	8009456 <xQueueGenericSend+0xb6>
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	61fb      	str	r3, [r7, #28]
 8009454:	e7fe      	b.n	8009454 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009456:	f001 fe89 	bl	800b16c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009462:	429a      	cmp	r2, r3
 8009464:	d302      	bcc.n	800946c <xQueueGenericSend+0xcc>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d129      	bne.n	80094c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	68b9      	ldr	r1, [r7, #8]
 8009470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009472:	f000 fc26 	bl	8009cc2 <prvCopyDataToQueue>
 8009476:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	d010      	beq.n	80094a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	3324      	adds	r3, #36	; 0x24
 8009484:	4618      	mov	r0, r3
 8009486:	f001 f94b 	bl	800a720 <xTaskRemoveFromEventList>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d013      	beq.n	80094b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009490:	4b3f      	ldr	r3, [pc, #252]	; (8009590 <xQueueGenericSend+0x1f0>)
 8009492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	e00a      	b.n	80094b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d007      	beq.n	80094b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80094a8:	4b39      	ldr	r3, [pc, #228]	; (8009590 <xQueueGenericSend+0x1f0>)
 80094aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80094b8:	f001 fe86 	bl	800b1c8 <vPortExitCritical>
				return pdPASS;
 80094bc:	2301      	movs	r3, #1
 80094be:	e063      	b.n	8009588 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094c6:	f001 fe7f 	bl	800b1c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e05c      	b.n	8009588 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094d4:	f107 0314 	add.w	r3, r7, #20
 80094d8:	4618      	mov	r0, r3
 80094da:	f001 f983 	bl	800a7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094de:	2301      	movs	r3, #1
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094e2:	f001 fe71 	bl	800b1c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094e6:	f000 ff15 	bl	800a314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094ea:	f001 fe3f 	bl	800b16c <vPortEnterCritical>
 80094ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094f4:	b25b      	sxtb	r3, r3
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094fa:	d103      	bne.n	8009504 <xQueueGenericSend+0x164>
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800950a:	b25b      	sxtb	r3, r3
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009510:	d103      	bne.n	800951a <xQueueGenericSend+0x17a>
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800951a:	f001 fe55 	bl	800b1c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800951e:	1d3a      	adds	r2, r7, #4
 8009520:	f107 0314 	add.w	r3, r7, #20
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f001 f972 	bl	800a810 <xTaskCheckForTimeOut>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d124      	bne.n	800957c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009534:	f000 fcbd 	bl	8009eb2 <prvIsQueueFull>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d018      	beq.n	8009570 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	3310      	adds	r3, #16
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f001 f8c6 	bl	800a6d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800954c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800954e:	f000 fc48 	bl	8009de2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009552:	f000 feed 	bl	800a330 <xTaskResumeAll>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	f47f af7c 	bne.w	8009456 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800955e:	4b0c      	ldr	r3, [pc, #48]	; (8009590 <xQueueGenericSend+0x1f0>)
 8009560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	e772      	b.n	8009456 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009572:	f000 fc36 	bl	8009de2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009576:	f000 fedb 	bl	800a330 <xTaskResumeAll>
 800957a:	e76c      	b.n	8009456 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800957c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800957e:	f000 fc30 	bl	8009de2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009582:	f000 fed5 	bl	800a330 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009586:	2300      	movs	r3, #0
		}
	}
}
 8009588:	4618      	mov	r0, r3
 800958a:	3738      	adds	r7, #56	; 0x38
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	e000ed04 	.word	0xe000ed04

08009594 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08e      	sub	sp, #56	; 0x38
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d109      	bne.n	80095c0 <xQueueGenericSendFromISR+0x2c>
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
 80095be:	e7fe      	b.n	80095be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d103      	bne.n	80095ce <xQueueGenericSendFromISR+0x3a>
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <xQueueGenericSendFromISR+0x3e>
 80095ce:	2301      	movs	r3, #1
 80095d0:	e000      	b.n	80095d4 <xQueueGenericSendFromISR+0x40>
 80095d2:	2300      	movs	r3, #0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <xQueueGenericSendFromISR+0x58>
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	623b      	str	r3, [r7, #32]
 80095ea:	e7fe      	b.n	80095ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d103      	bne.n	80095fa <xQueueGenericSendFromISR+0x66>
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <xQueueGenericSendFromISR+0x6a>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e000      	b.n	8009600 <xQueueGenericSendFromISR+0x6c>
 80095fe:	2300      	movs	r3, #0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d109      	bne.n	8009618 <xQueueGenericSendFromISR+0x84>
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	61fb      	str	r3, [r7, #28]
 8009616:	e7fe      	b.n	8009616 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009618:	f001 fe84 	bl	800b324 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800961c:	f3ef 8211 	mrs	r2, BASEPRI
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	61ba      	str	r2, [r7, #24]
 8009632:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009634:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009636:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009640:	429a      	cmp	r2, r3
 8009642:	d302      	bcc.n	800964a <xQueueGenericSendFromISR+0xb6>
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d12c      	bne.n	80096a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800965a:	f000 fb32 	bl	8009cc2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800965e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009666:	d112      	bne.n	800968e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	2b00      	cmp	r3, #0
 800966e:	d016      	beq.n	800969e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	3324      	adds	r3, #36	; 0x24
 8009674:	4618      	mov	r0, r3
 8009676:	f001 f853 	bl	800a720 <xTaskRemoveFromEventList>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00e      	beq.n	800969e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00b      	beq.n	800969e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	e007      	b.n	800969e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800968e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009692:	3301      	adds	r3, #1
 8009694:	b2db      	uxtb	r3, r3
 8009696:	b25a      	sxtb	r2, r3
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800969e:	2301      	movs	r3, #1
 80096a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80096a2:	e001      	b.n	80096a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	637b      	str	r3, [r7, #52]	; 0x34
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3738      	adds	r7, #56	; 0x38
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08e      	sub	sp, #56	; 0x38
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <xQueueGiveFromISR+0x28>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	623b      	str	r3, [r7, #32]
 80096e2:	e7fe      	b.n	80096e2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d009      	beq.n	8009700 <xQueueGiveFromISR+0x44>
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	61fb      	str	r3, [r7, #28]
 80096fe:	e7fe      	b.n	80096fe <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <xQueueGiveFromISR+0x54>
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <xQueueGiveFromISR+0x58>
 8009710:	2301      	movs	r3, #1
 8009712:	e000      	b.n	8009716 <xQueueGiveFromISR+0x5a>
 8009714:	2300      	movs	r3, #0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <xQueueGiveFromISR+0x72>
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	e7fe      	b.n	800972c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800972e:	f001 fdf9 	bl	800b324 <vPortValidateInterruptPriority>
	__asm volatile
 8009732:	f3ef 8211 	mrs	r2, BASEPRI
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	617a      	str	r2, [r7, #20]
 8009748:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800974a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800975a:	429a      	cmp	r2, r3
 800975c:	d22b      	bcs.n	80097b6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009778:	d112      	bne.n	80097a0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	d016      	beq.n	80097b0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	3324      	adds	r3, #36	; 0x24
 8009786:	4618      	mov	r0, r3
 8009788:	f000 ffca 	bl	800a720 <xTaskRemoveFromEventList>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00e      	beq.n	80097b0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	e007      	b.n	80097b0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097a4:	3301      	adds	r3, #1
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	b25a      	sxtb	r2, r3
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097b0:	2301      	movs	r3, #1
 80097b2:	637b      	str	r3, [r7, #52]	; 0x34
 80097b4:	e001      	b.n	80097ba <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3738      	adds	r7, #56	; 0x38
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	; 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097dc:	2300      	movs	r3, #0
 80097de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d109      	bne.n	80097fe <xQueueReceive+0x2e>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	623b      	str	r3, [r7, #32]
 80097fc:	e7fe      	b.n	80097fc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <xQueueReceive+0x3c>
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <xQueueReceive+0x40>
 800980c:	2301      	movs	r3, #1
 800980e:	e000      	b.n	8009812 <xQueueReceive+0x42>
 8009810:	2300      	movs	r3, #0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d109      	bne.n	800982a <xQueueReceive+0x5a>
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	61fb      	str	r3, [r7, #28]
 8009828:	e7fe      	b.n	8009828 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800982a:	f001 f935 	bl	800aa98 <xTaskGetSchedulerState>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d102      	bne.n	800983a <xQueueReceive+0x6a>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <xQueueReceive+0x6e>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <xQueueReceive+0x70>
 800983e:	2300      	movs	r3, #0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <xQueueReceive+0x88>
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	61bb      	str	r3, [r7, #24]
 8009856:	e7fe      	b.n	8009856 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009858:	f001 fc88 	bl	800b16c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d01f      	beq.n	80098a8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800986c:	f000 fa93 	bl	8009d96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	1e5a      	subs	r2, r3, #1
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00f      	beq.n	80098a0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	3310      	adds	r3, #16
 8009884:	4618      	mov	r0, r3
 8009886:	f000 ff4b 	bl	800a720 <xTaskRemoveFromEventList>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d007      	beq.n	80098a0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009890:	4b3c      	ldr	r3, [pc, #240]	; (8009984 <xQueueReceive+0x1b4>)
 8009892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098a0:	f001 fc92 	bl	800b1c8 <vPortExitCritical>
				return pdPASS;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e069      	b.n	800997c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d103      	bne.n	80098b6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098ae:	f001 fc8b 	bl	800b1c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098b2:	2300      	movs	r3, #0
 80098b4:	e062      	b.n	800997c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d106      	bne.n	80098ca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098bc:	f107 0310 	add.w	r3, r7, #16
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 ff8f 	bl	800a7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098c6:	2301      	movs	r3, #1
 80098c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098ca:	f001 fc7d 	bl	800b1c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098ce:	f000 fd21 	bl	800a314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098d2:	f001 fc4b 	bl	800b16c <vPortEnterCritical>
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098dc:	b25b      	sxtb	r3, r3
 80098de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098e2:	d103      	bne.n	80098ec <xQueueReceive+0x11c>
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098f2:	b25b      	sxtb	r3, r3
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098f8:	d103      	bne.n	8009902 <xQueueReceive+0x132>
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009902:	f001 fc61 	bl	800b1c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009906:	1d3a      	adds	r2, r7, #4
 8009908:	f107 0310 	add.w	r3, r7, #16
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f000 ff7e 	bl	800a810 <xTaskCheckForTimeOut>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d123      	bne.n	8009962 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800991a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800991c:	f000 fab3 	bl	8009e86 <prvIsQueueEmpty>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d017      	beq.n	8009956 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009928:	3324      	adds	r3, #36	; 0x24
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	4611      	mov	r1, r2
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fed2 	bl	800a6d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009936:	f000 fa54 	bl	8009de2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800993a:	f000 fcf9 	bl	800a330 <xTaskResumeAll>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d189      	bne.n	8009858 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009944:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <xQueueReceive+0x1b4>)
 8009946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	e780      	b.n	8009858 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009958:	f000 fa43 	bl	8009de2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800995c:	f000 fce8 	bl	800a330 <xTaskResumeAll>
 8009960:	e77a      	b.n	8009858 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009964:	f000 fa3d 	bl	8009de2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009968:	f000 fce2 	bl	800a330 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800996c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996e:	f000 fa8a 	bl	8009e86 <prvIsQueueEmpty>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	f43f af6f 	beq.w	8009858 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800997a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800997c:	4618      	mov	r0, r3
 800997e:	3730      	adds	r7, #48	; 0x30
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08e      	sub	sp, #56	; 0x38
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009992:	2300      	movs	r3, #0
 8009994:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800999a:	2300      	movs	r3, #0
 800999c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800999e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <xQueueSemaphoreTake+0x30>
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	623b      	str	r3, [r7, #32]
 80099b6:	e7fe      	b.n	80099b6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d009      	beq.n	80099d4 <xQueueSemaphoreTake+0x4c>
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	61fb      	str	r3, [r7, #28]
 80099d2:	e7fe      	b.n	80099d2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099d4:	f001 f860 	bl	800aa98 <xTaskGetSchedulerState>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d102      	bne.n	80099e4 <xQueueSemaphoreTake+0x5c>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <xQueueSemaphoreTake+0x60>
 80099e4:	2301      	movs	r3, #1
 80099e6:	e000      	b.n	80099ea <xQueueSemaphoreTake+0x62>
 80099e8:	2300      	movs	r3, #0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d109      	bne.n	8009a02 <xQueueSemaphoreTake+0x7a>
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	61bb      	str	r3, [r7, #24]
 8009a00:	e7fe      	b.n	8009a00 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a02:	f001 fbb3 	bl	800b16c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d024      	beq.n	8009a5c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a14:	1e5a      	subs	r2, r3, #1
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009a22:	f001 f9ff 	bl	800ae24 <pvTaskIncrementMutexHeldCount>
 8009a26:	4602      	mov	r2, r0
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00f      	beq.n	8009a54 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a36:	3310      	adds	r3, #16
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fe71 	bl	800a720 <xTaskRemoveFromEventList>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d007      	beq.n	8009a54 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a44:	4b53      	ldr	r3, [pc, #332]	; (8009b94 <xQueueSemaphoreTake+0x20c>)
 8009a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a54:	f001 fbb8 	bl	800b1c8 <vPortExitCritical>
				return pdPASS;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e096      	b.n	8009b8a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d110      	bne.n	8009a84 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d009      	beq.n	8009a7c <xQueueSemaphoreTake+0xf4>
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	617b      	str	r3, [r7, #20]
 8009a7a:	e7fe      	b.n	8009a7a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a7c:	f001 fba4 	bl	800b1c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e082      	b.n	8009b8a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a8a:	f107 030c 	add.w	r3, r7, #12
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fea8 	bl	800a7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a98:	f001 fb96 	bl	800b1c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a9c:	f000 fc3a 	bl	800a314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa0:	f001 fb64 	bl	800b16c <vPortEnterCritical>
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aaa:	b25b      	sxtb	r3, r3
 8009aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ab0:	d103      	bne.n	8009aba <xQueueSemaphoreTake+0x132>
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ac0:	b25b      	sxtb	r3, r3
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ac6:	d103      	bne.n	8009ad0 <xQueueSemaphoreTake+0x148>
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad0:	f001 fb7a 	bl	800b1c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	f107 030c 	add.w	r3, r7, #12
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 fe97 	bl	800a810 <xTaskCheckForTimeOut>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d132      	bne.n	8009b4e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009aea:	f000 f9cc 	bl	8009e86 <prvIsQueueEmpty>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d026      	beq.n	8009b42 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d109      	bne.n	8009b10 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009afc:	f001 fb36 	bl	800b16c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 ffe5 	bl	800aad4 <xTaskPriorityInherit>
 8009b0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009b0c:	f001 fb5c 	bl	800b1c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	3324      	adds	r3, #36	; 0x24
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	4611      	mov	r1, r2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fddd 	bl	800a6d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b20:	f000 f95f 	bl	8009de2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b24:	f000 fc04 	bl	800a330 <xTaskResumeAll>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f47f af69 	bne.w	8009a02 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009b30:	4b18      	ldr	r3, [pc, #96]	; (8009b94 <xQueueSemaphoreTake+0x20c>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	e75f      	b.n	8009a02 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b44:	f000 f94d 	bl	8009de2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b48:	f000 fbf2 	bl	800a330 <xTaskResumeAll>
 8009b4c:	e759      	b.n	8009a02 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b50:	f000 f947 	bl	8009de2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b54:	f000 fbec 	bl	800a330 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b5a:	f000 f994 	bl	8009e86 <prvIsQueueEmpty>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f43f af4e 	beq.w	8009a02 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00d      	beq.n	8009b88 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009b6c:	f001 fafe 	bl	800b16c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b72:	f000 f88e 	bl	8009c92 <prvGetDisinheritPriorityAfterTimeout>
 8009b76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 f8b2 	bl	800ace8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b84:	f001 fb20 	bl	800b1c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3738      	adds	r7, #56	; 0x38
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08e      	sub	sp, #56	; 0x38
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d109      	bne.n	8009bc2 <xQueueReceiveFromISR+0x2a>
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	623b      	str	r3, [r7, #32]
 8009bc0:	e7fe      	b.n	8009bc0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <xQueueReceiveFromISR+0x38>
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <xQueueReceiveFromISR+0x3c>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e000      	b.n	8009bd6 <xQueueReceiveFromISR+0x3e>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d109      	bne.n	8009bee <xQueueReceiveFromISR+0x56>
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	e7fe      	b.n	8009bec <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bee:	f001 fb99 	bl	800b324 <vPortValidateInterruptPriority>
	__asm volatile
 8009bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	61ba      	str	r2, [r7, #24]
 8009c08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d02f      	beq.n	8009c7a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c24:	68b9      	ldr	r1, [r7, #8]
 8009c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c28:	f000 f8b5 	bl	8009d96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	1e5a      	subs	r2, r3, #1
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c3c:	d112      	bne.n	8009c64 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d016      	beq.n	8009c74 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	3310      	adds	r3, #16
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fd68 	bl	800a720 <xTaskRemoveFromEventList>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00e      	beq.n	8009c74 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	e007      	b.n	8009c74 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c68:	3301      	adds	r3, #1
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	b25a      	sxtb	r2, r3
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c74:	2301      	movs	r3, #1
 8009c76:	637b      	str	r3, [r7, #52]	; 0x34
 8009c78:	e001      	b.n	8009c7e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3738      	adds	r7, #56	; 0x38
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d006      	beq.n	8009cb0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f1c3 0307 	rsb	r3, r3, #7
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	e001      	b.n	8009cb4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
	}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b086      	sub	sp, #24
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10d      	bne.n	8009cfc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d14d      	bne.n	8009d84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 ff77 	bl	800abe0 <xTaskPriorityDisinherit>
 8009cf2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	605a      	str	r2, [r3, #4]
 8009cfa:	e043      	b.n	8009d84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d119      	bne.n	8009d36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6898      	ldr	r0, [r3, #8]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	f00a ffc8 	bl	8014ca2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	441a      	add	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d32b      	bcc.n	8009d84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	609a      	str	r2, [r3, #8]
 8009d34:	e026      	b.n	8009d84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	68d8      	ldr	r0, [r3, #12]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	461a      	mov	r2, r3
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	f00a ffae 	bl	8014ca2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	425b      	negs	r3, r3
 8009d50:	441a      	add	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d207      	bcs.n	8009d72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	425b      	negs	r3, r3
 8009d6c:	441a      	add	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d105      	bne.n	8009d84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	3b01      	subs	r3, #1
 8009d82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	1c5a      	adds	r2, r3, #1
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d8c:	697b      	ldr	r3, [r7, #20]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d018      	beq.n	8009dda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	441a      	add	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68da      	ldr	r2, [r3, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d303      	bcc.n	8009dca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68d9      	ldr	r1, [r3, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	6838      	ldr	r0, [r7, #0]
 8009dd6:	f00a ff64 	bl	8014ca2 <memcpy>
	}
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b084      	sub	sp, #16
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dea:	f001 f9bf 	bl	800b16c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009df4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009df6:	e011      	b.n	8009e1c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d012      	beq.n	8009e26 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3324      	adds	r3, #36	; 0x24
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 fc8b 	bl	800a720 <xTaskRemoveFromEventList>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e10:	f000 fd5e 	bl	800a8d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dce9      	bgt.n	8009df8 <prvUnlockQueue+0x16>
 8009e24:	e000      	b.n	8009e28 <prvUnlockQueue+0x46>
					break;
 8009e26:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	22ff      	movs	r2, #255	; 0xff
 8009e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e30:	f001 f9ca 	bl	800b1c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e34:	f001 f99a 	bl	800b16c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e3e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e40:	e011      	b.n	8009e66 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d012      	beq.n	8009e70 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3310      	adds	r3, #16
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fc66 	bl	800a720 <xTaskRemoveFromEventList>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e5a:	f000 fd39 	bl	800a8d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	dce9      	bgt.n	8009e42 <prvUnlockQueue+0x60>
 8009e6e:	e000      	b.n	8009e72 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e70:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	22ff      	movs	r2, #255	; 0xff
 8009e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e7a:	f001 f9a5 	bl	800b1c8 <vPortExitCritical>
}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e8e:	f001 f96d 	bl	800b16c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d102      	bne.n	8009ea0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	e001      	b.n	8009ea4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ea4:	f001 f990 	bl	800b1c8 <vPortExitCritical>

	return xReturn;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eba:	f001 f957 	bl	800b16c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d102      	bne.n	8009ed0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e001      	b.n	8009ed4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ed4:	f001 f978 	bl	800b1c8 <vPortExitCritical>

	return xReturn;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b08e      	sub	sp, #56	; 0x38
 8009ee6:	af04      	add	r7, sp, #16
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	607a      	str	r2, [r7, #4]
 8009eee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d109      	bne.n	8009f0a <xTaskCreateStatic+0x28>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	623b      	str	r3, [r7, #32]
 8009f08:	e7fe      	b.n	8009f08 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d109      	bne.n	8009f24 <xTaskCreateStatic+0x42>
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	61fb      	str	r3, [r7, #28]
 8009f22:	e7fe      	b.n	8009f22 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f24:	2354      	movs	r3, #84	; 0x54
 8009f26:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	2b54      	cmp	r3, #84	; 0x54
 8009f2c:	d009      	beq.n	8009f42 <xTaskCreateStatic+0x60>
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	61bb      	str	r3, [r7, #24]
 8009f40:	e7fe      	b.n	8009f40 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01e      	beq.n	8009f86 <xTaskCreateStatic+0xa4>
 8009f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d01b      	beq.n	8009f86 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f60:	2300      	movs	r3, #0
 8009f62:	9303      	str	r3, [sp, #12]
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	9302      	str	r3, [sp, #8]
 8009f68:	f107 0314 	add.w	r3, r7, #20
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	68b9      	ldr	r1, [r7, #8]
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 f850 	bl	800a01e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f80:	f000 f8cc 	bl	800a11c <prvAddNewTaskToReadyList>
 8009f84:	e001      	b.n	8009f8a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f8a:	697b      	ldr	r3, [r7, #20]
	}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3728      	adds	r7, #40	; 0x28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08c      	sub	sp, #48	; 0x30
 8009f98:	af04      	add	r7, sp, #16
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fa4:	88fb      	ldrh	r3, [r7, #6]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f001 f9f9 	bl	800b3a0 <pvPortMalloc>
 8009fae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00e      	beq.n	8009fd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009fb6:	2054      	movs	r0, #84	; 0x54
 8009fb8:	f001 f9f2 	bl	800b3a0 <pvPortMalloc>
 8009fbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d003      	beq.n	8009fcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8009fca:	e005      	b.n	8009fd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fcc:	6978      	ldr	r0, [r7, #20]
 8009fce:	f001 faa9 	bl	800b524 <vPortFree>
 8009fd2:	e001      	b.n	8009fd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d017      	beq.n	800a00e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fe6:	88fa      	ldrh	r2, [r7, #6]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9303      	str	r3, [sp, #12]
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	9302      	str	r3, [sp, #8]
 8009ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 f80e 	bl	800a01e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a002:	69f8      	ldr	r0, [r7, #28]
 800a004:	f000 f88a 	bl	800a11c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a008:	2301      	movs	r3, #1
 800a00a:	61bb      	str	r3, [r7, #24]
 800a00c:	e002      	b.n	800a014 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a012:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a014:	69bb      	ldr	r3, [r7, #24]
	}
 800a016:	4618      	mov	r0, r3
 800a018:	3720      	adds	r7, #32
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b088      	sub	sp, #32
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	607a      	str	r2, [r7, #4]
 800a02a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a036:	3b01      	subs	r3, #1
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	f023 0307 	bic.w	r3, r3, #7
 800a044:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	f003 0307 	and.w	r3, r3, #7
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d009      	beq.n	800a064 <prvInitialiseNewTask+0x46>
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	e7fe      	b.n	800a062 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	e012      	b.n	800a090 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	4413      	add	r3, r2
 800a070:	7819      	ldrb	r1, [r3, #0]
 800a072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	4413      	add	r3, r2
 800a078:	3334      	adds	r3, #52	; 0x34
 800a07a:	460a      	mov	r2, r1
 800a07c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	4413      	add	r3, r2
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d006      	beq.n	800a098 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	3301      	adds	r3, #1
 800a08e:	61fb      	str	r3, [r7, #28]
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	2b0f      	cmp	r3, #15
 800a094:	d9e9      	bls.n	800a06a <prvInitialiseNewTask+0x4c>
 800a096:	e000      	b.n	800a09a <prvInitialiseNewTask+0x7c>
		{
			break;
 800a098:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	2b06      	cmp	r3, #6
 800a0a6:	d901      	bls.n	800a0ac <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe ff54 	bl	8008f70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ca:	3318      	adds	r3, #24
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe ff4f 	bl	8008f70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	f1c3 0207 	rsb	r2, r3, #7
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	68f9      	ldr	r1, [r7, #12]
 800a0fa:	69b8      	ldr	r0, [r7, #24]
 800a0fc:	f000 ff0c 	bl	800af18 <pxPortInitialiseStack>
 800a100:	4602      	mov	r2, r0
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a112:	bf00      	nop
 800a114:	3720      	adds	r7, #32
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a124:	f001 f822 	bl	800b16c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a128:	4b2a      	ldr	r3, [pc, #168]	; (800a1d4 <prvAddNewTaskToReadyList+0xb8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3301      	adds	r3, #1
 800a12e:	4a29      	ldr	r2, [pc, #164]	; (800a1d4 <prvAddNewTaskToReadyList+0xb8>)
 800a130:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a132:	4b29      	ldr	r3, [pc, #164]	; (800a1d8 <prvAddNewTaskToReadyList+0xbc>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d109      	bne.n	800a14e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a13a:	4a27      	ldr	r2, [pc, #156]	; (800a1d8 <prvAddNewTaskToReadyList+0xbc>)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a140:	4b24      	ldr	r3, [pc, #144]	; (800a1d4 <prvAddNewTaskToReadyList+0xb8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d110      	bne.n	800a16a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a148:	f000 fbe6 	bl	800a918 <prvInitialiseTaskLists>
 800a14c:	e00d      	b.n	800a16a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a14e:	4b23      	ldr	r3, [pc, #140]	; (800a1dc <prvAddNewTaskToReadyList+0xc0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d109      	bne.n	800a16a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a156:	4b20      	ldr	r3, [pc, #128]	; (800a1d8 <prvAddNewTaskToReadyList+0xbc>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	429a      	cmp	r2, r3
 800a162:	d802      	bhi.n	800a16a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a164:	4a1c      	ldr	r2, [pc, #112]	; (800a1d8 <prvAddNewTaskToReadyList+0xbc>)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a16a:	4b1d      	ldr	r3, [pc, #116]	; (800a1e0 <prvAddNewTaskToReadyList+0xc4>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3301      	adds	r3, #1
 800a170:	4a1b      	ldr	r2, [pc, #108]	; (800a1e0 <prvAddNewTaskToReadyList+0xc4>)
 800a172:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	2201      	movs	r2, #1
 800a17a:	409a      	lsls	r2, r3
 800a17c:	4b19      	ldr	r3, [pc, #100]	; (800a1e4 <prvAddNewTaskToReadyList+0xc8>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4313      	orrs	r3, r2
 800a182:	4a18      	ldr	r2, [pc, #96]	; (800a1e4 <prvAddNewTaskToReadyList+0xc8>)
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4a15      	ldr	r2, [pc, #84]	; (800a1e8 <prvAddNewTaskToReadyList+0xcc>)
 800a194:	441a      	add	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3304      	adds	r3, #4
 800a19a:	4619      	mov	r1, r3
 800a19c:	4610      	mov	r0, r2
 800a19e:	f7fe fef4 	bl	8008f8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1a2:	f001 f811 	bl	800b1c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1a6:	4b0d      	ldr	r3, [pc, #52]	; (800a1dc <prvAddNewTaskToReadyList+0xc0>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00e      	beq.n	800a1cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <prvAddNewTaskToReadyList+0xbc>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d207      	bcs.n	800a1cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1bc:	4b0b      	ldr	r3, [pc, #44]	; (800a1ec <prvAddNewTaskToReadyList+0xd0>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1cc:	bf00      	nop
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20000560 	.word	0x20000560
 800a1d8:	20000460 	.word	0x20000460
 800a1dc:	2000056c 	.word	0x2000056c
 800a1e0:	2000057c 	.word	0x2000057c
 800a1e4:	20000568 	.word	0x20000568
 800a1e8:	20000464 	.word	0x20000464
 800a1ec:	e000ed04 	.word	0xe000ed04

0800a1f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d016      	beq.n	800a230 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a202:	4b13      	ldr	r3, [pc, #76]	; (800a250 <vTaskDelay+0x60>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d009      	beq.n	800a21e <vTaskDelay+0x2e>
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	60bb      	str	r3, [r7, #8]
 800a21c:	e7fe      	b.n	800a21c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a21e:	f000 f879 	bl	800a314 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a222:	2100      	movs	r1, #0
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fe11 	bl	800ae4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a22a:	f000 f881 	bl	800a330 <xTaskResumeAll>
 800a22e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d107      	bne.n	800a246 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a236:	4b07      	ldr	r3, [pc, #28]	; (800a254 <vTaskDelay+0x64>)
 800a238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000588 	.word	0x20000588
 800a254:	e000ed04 	.word	0xe000ed04

0800a258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08a      	sub	sp, #40	; 0x28
 800a25c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a266:	463a      	mov	r2, r7
 800a268:	1d39      	adds	r1, r7, #4
 800a26a:	f107 0308 	add.w	r3, r7, #8
 800a26e:	4618      	mov	r0, r3
 800a270:	f7f6 f98e 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	9202      	str	r2, [sp, #8]
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	2300      	movs	r3, #0
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	2300      	movs	r3, #0
 800a284:	460a      	mov	r2, r1
 800a286:	491d      	ldr	r1, [pc, #116]	; (800a2fc <vTaskStartScheduler+0xa4>)
 800a288:	481d      	ldr	r0, [pc, #116]	; (800a300 <vTaskStartScheduler+0xa8>)
 800a28a:	f7ff fe2a 	bl	8009ee2 <xTaskCreateStatic>
 800a28e:	4602      	mov	r2, r0
 800a290:	4b1c      	ldr	r3, [pc, #112]	; (800a304 <vTaskStartScheduler+0xac>)
 800a292:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a294:	4b1b      	ldr	r3, [pc, #108]	; (800a304 <vTaskStartScheduler+0xac>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a29c:	2301      	movs	r3, #1
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	e001      	b.n	800a2a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d115      	bne.n	800a2d8 <vTaskStartScheduler+0x80>
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2be:	4b12      	ldr	r3, [pc, #72]	; (800a308 <vTaskStartScheduler+0xb0>)
 800a2c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2c6:	4b11      	ldr	r3, [pc, #68]	; (800a30c <vTaskStartScheduler+0xb4>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a2cc:	4b10      	ldr	r3, [pc, #64]	; (800a310 <vTaskStartScheduler+0xb8>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2d2:	f000 fead 	bl	800b030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2d6:	e00d      	b.n	800a2f4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2de:	d109      	bne.n	800a2f4 <vTaskStartScheduler+0x9c>
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	e7fe      	b.n	800a2f2 <vTaskStartScheduler+0x9a>
}
 800a2f4:	bf00      	nop
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	08015bcc 	.word	0x08015bcc
 800a300:	0800a8e9 	.word	0x0800a8e9
 800a304:	20000584 	.word	0x20000584
 800a308:	20000580 	.word	0x20000580
 800a30c:	2000056c 	.word	0x2000056c
 800a310:	20000564 	.word	0x20000564

0800a314 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a318:	4b04      	ldr	r3, [pc, #16]	; (800a32c <vTaskSuspendAll+0x18>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3301      	adds	r3, #1
 800a31e:	4a03      	ldr	r2, [pc, #12]	; (800a32c <vTaskSuspendAll+0x18>)
 800a320:	6013      	str	r3, [r2, #0]
}
 800a322:	bf00      	nop
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	20000588 	.word	0x20000588

0800a330 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a33a:	2300      	movs	r3, #0
 800a33c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a33e:	4b41      	ldr	r3, [pc, #260]	; (800a444 <xTaskResumeAll+0x114>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <xTaskResumeAll+0x2a>
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	e7fe      	b.n	800a358 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a35a:	f000 ff07 	bl	800b16c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a35e:	4b39      	ldr	r3, [pc, #228]	; (800a444 <xTaskResumeAll+0x114>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3b01      	subs	r3, #1
 800a364:	4a37      	ldr	r2, [pc, #220]	; (800a444 <xTaskResumeAll+0x114>)
 800a366:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a368:	4b36      	ldr	r3, [pc, #216]	; (800a444 <xTaskResumeAll+0x114>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d161      	bne.n	800a434 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a370:	4b35      	ldr	r3, [pc, #212]	; (800a448 <xTaskResumeAll+0x118>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d05d      	beq.n	800a434 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a378:	e02e      	b.n	800a3d8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a37a:	4b34      	ldr	r3, [pc, #208]	; (800a44c <xTaskResumeAll+0x11c>)
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3318      	adds	r3, #24
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fe5c 	bl	8009044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3304      	adds	r3, #4
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe fe57 	bl	8009044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	2201      	movs	r2, #1
 800a39c:	409a      	lsls	r2, r3
 800a39e:	4b2c      	ldr	r3, [pc, #176]	; (800a450 <xTaskResumeAll+0x120>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	4a2a      	ldr	r2, [pc, #168]	; (800a450 <xTaskResumeAll+0x120>)
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4a27      	ldr	r2, [pc, #156]	; (800a454 <xTaskResumeAll+0x124>)
 800a3b6:	441a      	add	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f7fe fde3 	bl	8008f8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4b23      	ldr	r3, [pc, #140]	; (800a458 <xTaskResumeAll+0x128>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d302      	bcc.n	800a3d8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a3d2:	4b22      	ldr	r3, [pc, #136]	; (800a45c <xTaskResumeAll+0x12c>)
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3d8:	4b1c      	ldr	r3, [pc, #112]	; (800a44c <xTaskResumeAll+0x11c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1cc      	bne.n	800a37a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3e6:	f000 fb31 	bl	800aa4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3ea:	4b1d      	ldr	r3, [pc, #116]	; (800a460 <xTaskResumeAll+0x130>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d010      	beq.n	800a418 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3f6:	f000 f859 	bl	800a4ac <xTaskIncrementTick>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a400:	4b16      	ldr	r3, [pc, #88]	; (800a45c <xTaskResumeAll+0x12c>)
 800a402:	2201      	movs	r2, #1
 800a404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	3b01      	subs	r3, #1
 800a40a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f1      	bne.n	800a3f6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a412:	4b13      	ldr	r3, [pc, #76]	; (800a460 <xTaskResumeAll+0x130>)
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a418:	4b10      	ldr	r3, [pc, #64]	; (800a45c <xTaskResumeAll+0x12c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d009      	beq.n	800a434 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a420:	2301      	movs	r3, #1
 800a422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a424:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <xTaskResumeAll+0x134>)
 800a426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a434:	f000 fec8 	bl	800b1c8 <vPortExitCritical>

	return xAlreadyYielded;
 800a438:	68bb      	ldr	r3, [r7, #8]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20000588 	.word	0x20000588
 800a448:	20000560 	.word	0x20000560
 800a44c:	20000520 	.word	0x20000520
 800a450:	20000568 	.word	0x20000568
 800a454:	20000464 	.word	0x20000464
 800a458:	20000460 	.word	0x20000460
 800a45c:	20000574 	.word	0x20000574
 800a460:	20000570 	.word	0x20000570
 800a464:	e000ed04 	.word	0xe000ed04

0800a468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a46e:	4b05      	ldr	r3, [pc, #20]	; (800a484 <xTaskGetTickCount+0x1c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a474:	687b      	ldr	r3, [r7, #4]
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20000564 	.word	0x20000564

0800a488 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a48e:	f000 ff49 	bl	800b324 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a492:	2300      	movs	r3, #0
 800a494:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a496:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <xTaskGetTickCountFromISR+0x20>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a49c:	683b      	ldr	r3, [r7, #0]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20000564 	.word	0x20000564

0800a4ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4b6:	4b50      	ldr	r3, [pc, #320]	; (800a5f8 <xTaskIncrementTick+0x14c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f040 808c 	bne.w	800a5d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4c0:	4b4e      	ldr	r3, [pc, #312]	; (800a5fc <xTaskIncrementTick+0x150>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4c8:	4a4c      	ldr	r2, [pc, #304]	; (800a5fc <xTaskIncrementTick+0x150>)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d11f      	bne.n	800a514 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4d4:	4b4a      	ldr	r3, [pc, #296]	; (800a600 <xTaskIncrementTick+0x154>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <xTaskIncrementTick+0x46>
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	e7fe      	b.n	800a4f0 <xTaskIncrementTick+0x44>
 800a4f2:	4b43      	ldr	r3, [pc, #268]	; (800a600 <xTaskIncrementTick+0x154>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	4b42      	ldr	r3, [pc, #264]	; (800a604 <xTaskIncrementTick+0x158>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a40      	ldr	r2, [pc, #256]	; (800a600 <xTaskIncrementTick+0x154>)
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	4a40      	ldr	r2, [pc, #256]	; (800a604 <xTaskIncrementTick+0x158>)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	4b40      	ldr	r3, [pc, #256]	; (800a608 <xTaskIncrementTick+0x15c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	3301      	adds	r3, #1
 800a50c:	4a3e      	ldr	r2, [pc, #248]	; (800a608 <xTaskIncrementTick+0x15c>)
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	f000 fa9c 	bl	800aa4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a514:	4b3d      	ldr	r3, [pc, #244]	; (800a60c <xTaskIncrementTick+0x160>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d34d      	bcc.n	800a5ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a51e:	4b38      	ldr	r3, [pc, #224]	; (800a600 <xTaskIncrementTick+0x154>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d101      	bne.n	800a52c <xTaskIncrementTick+0x80>
 800a528:	2301      	movs	r3, #1
 800a52a:	e000      	b.n	800a52e <xTaskIncrementTick+0x82>
 800a52c:	2300      	movs	r3, #0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d004      	beq.n	800a53c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a532:	4b36      	ldr	r3, [pc, #216]	; (800a60c <xTaskIncrementTick+0x160>)
 800a534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a538:	601a      	str	r2, [r3, #0]
					break;
 800a53a:	e03e      	b.n	800a5ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a53c:	4b30      	ldr	r3, [pc, #192]	; (800a600 <xTaskIncrementTick+0x154>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	429a      	cmp	r2, r3
 800a552:	d203      	bcs.n	800a55c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a554:	4a2d      	ldr	r2, [pc, #180]	; (800a60c <xTaskIncrementTick+0x160>)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6013      	str	r3, [r2, #0]
						break;
 800a55a:	e02e      	b.n	800a5ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	3304      	adds	r3, #4
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe fd6f 	bl	8009044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d004      	beq.n	800a578 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	3318      	adds	r3, #24
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fd66 	bl	8009044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57c:	2201      	movs	r2, #1
 800a57e:	409a      	lsls	r2, r3
 800a580:	4b23      	ldr	r3, [pc, #140]	; (800a610 <xTaskIncrementTick+0x164>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4313      	orrs	r3, r2
 800a586:	4a22      	ldr	r2, [pc, #136]	; (800a610 <xTaskIncrementTick+0x164>)
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4a1f      	ldr	r2, [pc, #124]	; (800a614 <xTaskIncrementTick+0x168>)
 800a598:	441a      	add	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	3304      	adds	r3, #4
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7fe fcf2 	bl	8008f8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <xTaskIncrementTick+0x16c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d3b4      	bcc.n	800a51e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5b8:	e7b1      	b.n	800a51e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5ba:	4b17      	ldr	r3, [pc, #92]	; (800a618 <xTaskIncrementTick+0x16c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c0:	4914      	ldr	r1, [pc, #80]	; (800a614 <xTaskIncrementTick+0x168>)
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	440b      	add	r3, r1
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d907      	bls.n	800a5e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e004      	b.n	800a5e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5d8:	4b10      	ldr	r3, [pc, #64]	; (800a61c <xTaskIncrementTick+0x170>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	4a0f      	ldr	r2, [pc, #60]	; (800a61c <xTaskIncrementTick+0x170>)
 800a5e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5e2:	4b0f      	ldr	r3, [pc, #60]	; (800a620 <xTaskIncrementTick+0x174>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5ee:	697b      	ldr	r3, [r7, #20]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	20000588 	.word	0x20000588
 800a5fc:	20000564 	.word	0x20000564
 800a600:	20000518 	.word	0x20000518
 800a604:	2000051c 	.word	0x2000051c
 800a608:	20000578 	.word	0x20000578
 800a60c:	20000580 	.word	0x20000580
 800a610:	20000568 	.word	0x20000568
 800a614:	20000464 	.word	0x20000464
 800a618:	20000460 	.word	0x20000460
 800a61c:	20000570 	.word	0x20000570
 800a620:	20000574 	.word	0x20000574

0800a624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a62a:	4b26      	ldr	r3, [pc, #152]	; (800a6c4 <vTaskSwitchContext+0xa0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a632:	4b25      	ldr	r3, [pc, #148]	; (800a6c8 <vTaskSwitchContext+0xa4>)
 800a634:	2201      	movs	r2, #1
 800a636:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a638:	e03e      	b.n	800a6b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a63a:	4b23      	ldr	r3, [pc, #140]	; (800a6c8 <vTaskSwitchContext+0xa4>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a640:	4b22      	ldr	r3, [pc, #136]	; (800a6cc <vTaskSwitchContext+0xa8>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	fab3 f383 	clz	r3, r3
 800a64c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a64e:	7afb      	ldrb	r3, [r7, #11]
 800a650:	f1c3 031f 	rsb	r3, r3, #31
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	491e      	ldr	r1, [pc, #120]	; (800a6d0 <vTaskSwitchContext+0xac>)
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d109      	bne.n	800a67e <vTaskSwitchContext+0x5a>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	607b      	str	r3, [r7, #4]
 800a67c:	e7fe      	b.n	800a67c <vTaskSwitchContext+0x58>
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4613      	mov	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4a11      	ldr	r2, [pc, #68]	; (800a6d0 <vTaskSwitchContext+0xac>)
 800a68a:	4413      	add	r3, r2
 800a68c:	613b      	str	r3, [r7, #16]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	605a      	str	r2, [r3, #4]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	3308      	adds	r3, #8
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d104      	bne.n	800a6ae <vTaskSwitchContext+0x8a>
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	605a      	str	r2, [r3, #4]
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	4a07      	ldr	r2, [pc, #28]	; (800a6d4 <vTaskSwitchContext+0xb0>)
 800a6b6:	6013      	str	r3, [r2, #0]
}
 800a6b8:	bf00      	nop
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	20000588 	.word	0x20000588
 800a6c8:	20000574 	.word	0x20000574
 800a6cc:	20000568 	.word	0x20000568
 800a6d0:	20000464 	.word	0x20000464
 800a6d4:	20000460 	.word	0x20000460

0800a6d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d109      	bne.n	800a6fc <vTaskPlaceOnEventList+0x24>
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	60fb      	str	r3, [r7, #12]
 800a6fa:	e7fe      	b.n	800a6fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6fc:	4b07      	ldr	r3, [pc, #28]	; (800a71c <vTaskPlaceOnEventList+0x44>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3318      	adds	r3, #24
 800a702:	4619      	mov	r1, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7fe fc64 	bl	8008fd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a70a:	2101      	movs	r1, #1
 800a70c:	6838      	ldr	r0, [r7, #0]
 800a70e:	f000 fb9d 	bl	800ae4c <prvAddCurrentTaskToDelayedList>
}
 800a712:	bf00      	nop
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000460 	.word	0x20000460

0800a720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <xTaskRemoveFromEventList+0x2a>
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	e7fe      	b.n	800a748 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	3318      	adds	r3, #24
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe fc78 	bl	8009044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a754:	4b1d      	ldr	r3, [pc, #116]	; (800a7cc <xTaskRemoveFromEventList+0xac>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d11c      	bne.n	800a796 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3304      	adds	r3, #4
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe fc6f 	bl	8009044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76a:	2201      	movs	r2, #1
 800a76c:	409a      	lsls	r2, r3
 800a76e:	4b18      	ldr	r3, [pc, #96]	; (800a7d0 <xTaskRemoveFromEventList+0xb0>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4313      	orrs	r3, r2
 800a774:	4a16      	ldr	r2, [pc, #88]	; (800a7d0 <xTaskRemoveFromEventList+0xb0>)
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77c:	4613      	mov	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4a13      	ldr	r2, [pc, #76]	; (800a7d4 <xTaskRemoveFromEventList+0xb4>)
 800a786:	441a      	add	r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f7fe fbfb 	bl	8008f8a <vListInsertEnd>
 800a794:	e005      	b.n	800a7a2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	3318      	adds	r3, #24
 800a79a:	4619      	mov	r1, r3
 800a79c:	480e      	ldr	r0, [pc, #56]	; (800a7d8 <xTaskRemoveFromEventList+0xb8>)
 800a79e:	f7fe fbf4 	bl	8008f8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <xTaskRemoveFromEventList+0xbc>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d905      	bls.n	800a7bc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7b4:	4b0a      	ldr	r3, [pc, #40]	; (800a7e0 <xTaskRemoveFromEventList+0xc0>)
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	e001      	b.n	800a7c0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a7c0:	697b      	ldr	r3, [r7, #20]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000588 	.word	0x20000588
 800a7d0:	20000568 	.word	0x20000568
 800a7d4:	20000464 	.word	0x20000464
 800a7d8:	20000520 	.word	0x20000520
 800a7dc:	20000460 	.word	0x20000460
 800a7e0:	20000574 	.word	0x20000574

0800a7e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7ec:	4b06      	ldr	r3, [pc, #24]	; (800a808 <vTaskInternalSetTimeOutState+0x24>)
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7f4:	4b05      	ldr	r3, [pc, #20]	; (800a80c <vTaskInternalSetTimeOutState+0x28>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	605a      	str	r2, [r3, #4]
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	20000578 	.word	0x20000578
 800a80c:	20000564 	.word	0x20000564

0800a810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d109      	bne.n	800a834 <xTaskCheckForTimeOut+0x24>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	613b      	str	r3, [r7, #16]
 800a832:	e7fe      	b.n	800a832 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d109      	bne.n	800a84e <xTaskCheckForTimeOut+0x3e>
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e7fe      	b.n	800a84c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a84e:	f000 fc8d 	bl	800b16c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a852:	4b1d      	ldr	r3, [pc, #116]	; (800a8c8 <xTaskCheckForTimeOut+0xb8>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a86a:	d102      	bne.n	800a872 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	e023      	b.n	800a8ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <xTaskCheckForTimeOut+0xbc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d007      	beq.n	800a88e <xTaskCheckForTimeOut+0x7e>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	429a      	cmp	r2, r3
 800a886:	d302      	bcc.n	800a88e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a888:	2301      	movs	r3, #1
 800a88a:	61fb      	str	r3, [r7, #28]
 800a88c:	e015      	b.n	800a8ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	429a      	cmp	r2, r3
 800a896:	d20b      	bcs.n	800a8b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff9d 	bl	800a7e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	61fb      	str	r3, [r7, #28]
 800a8ae:	e004      	b.n	800a8ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8ba:	f000 fc85 	bl	800b1c8 <vPortExitCritical>

	return xReturn;
 800a8be:	69fb      	ldr	r3, [r7, #28]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3720      	adds	r7, #32
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	20000564 	.word	0x20000564
 800a8cc:	20000578 	.word	0x20000578

0800a8d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8d4:	4b03      	ldr	r3, [pc, #12]	; (800a8e4 <vTaskMissedYield+0x14>)
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]
}
 800a8da:	bf00      	nop
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	20000574 	.word	0x20000574

0800a8e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8f0:	f000 f852 	bl	800a998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8f4:	4b06      	ldr	r3, [pc, #24]	; (800a910 <prvIdleTask+0x28>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d9f9      	bls.n	800a8f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <prvIdleTask+0x2c>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a90c:	e7f0      	b.n	800a8f0 <prvIdleTask+0x8>
 800a90e:	bf00      	nop
 800a910:	20000464 	.word	0x20000464
 800a914:	e000ed04 	.word	0xe000ed04

0800a918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a91e:	2300      	movs	r3, #0
 800a920:	607b      	str	r3, [r7, #4]
 800a922:	e00c      	b.n	800a93e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	4613      	mov	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4a12      	ldr	r2, [pc, #72]	; (800a978 <prvInitialiseTaskLists+0x60>)
 800a930:	4413      	add	r3, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fafc 	bl	8008f30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3301      	adds	r3, #1
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b06      	cmp	r3, #6
 800a942:	d9ef      	bls.n	800a924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a944:	480d      	ldr	r0, [pc, #52]	; (800a97c <prvInitialiseTaskLists+0x64>)
 800a946:	f7fe faf3 	bl	8008f30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a94a:	480d      	ldr	r0, [pc, #52]	; (800a980 <prvInitialiseTaskLists+0x68>)
 800a94c:	f7fe faf0 	bl	8008f30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a950:	480c      	ldr	r0, [pc, #48]	; (800a984 <prvInitialiseTaskLists+0x6c>)
 800a952:	f7fe faed 	bl	8008f30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a956:	480c      	ldr	r0, [pc, #48]	; (800a988 <prvInitialiseTaskLists+0x70>)
 800a958:	f7fe faea 	bl	8008f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a95c:	480b      	ldr	r0, [pc, #44]	; (800a98c <prvInitialiseTaskLists+0x74>)
 800a95e:	f7fe fae7 	bl	8008f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a962:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <prvInitialiseTaskLists+0x78>)
 800a964:	4a05      	ldr	r2, [pc, #20]	; (800a97c <prvInitialiseTaskLists+0x64>)
 800a966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a968:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <prvInitialiseTaskLists+0x7c>)
 800a96a:	4a05      	ldr	r2, [pc, #20]	; (800a980 <prvInitialiseTaskLists+0x68>)
 800a96c:	601a      	str	r2, [r3, #0]
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000464 	.word	0x20000464
 800a97c:	200004f0 	.word	0x200004f0
 800a980:	20000504 	.word	0x20000504
 800a984:	20000520 	.word	0x20000520
 800a988:	20000534 	.word	0x20000534
 800a98c:	2000054c 	.word	0x2000054c
 800a990:	20000518 	.word	0x20000518
 800a994:	2000051c 	.word	0x2000051c

0800a998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a99e:	e019      	b.n	800a9d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9a0:	f000 fbe4 	bl	800b16c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a9a4:	4b0f      	ldr	r3, [pc, #60]	; (800a9e4 <prvCheckTasksWaitingTermination+0x4c>)
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fb47 	bl	8009044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9b6:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <prvCheckTasksWaitingTermination+0x50>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	4a0a      	ldr	r2, [pc, #40]	; (800a9e8 <prvCheckTasksWaitingTermination+0x50>)
 800a9be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9c0:	4b0a      	ldr	r3, [pc, #40]	; (800a9ec <prvCheckTasksWaitingTermination+0x54>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	4a09      	ldr	r2, [pc, #36]	; (800a9ec <prvCheckTasksWaitingTermination+0x54>)
 800a9c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9ca:	f000 fbfd 	bl	800b1c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f80e 	bl	800a9f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <prvCheckTasksWaitingTermination+0x54>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e1      	bne.n	800a9a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9dc:	bf00      	nop
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20000534 	.word	0x20000534
 800a9e8:	20000560 	.word	0x20000560
 800a9ec:	20000548 	.word	0x20000548

0800a9f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d108      	bne.n	800aa14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fd8c 	bl	800b524 <vPortFree>
				vPortFree( pxTCB );
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fd89 	bl	800b524 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa12:	e017      	b.n	800aa44 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d103      	bne.n	800aa26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fd80 	bl	800b524 <vPortFree>
	}
 800aa24:	e00e      	b.n	800aa44 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d009      	beq.n	800aa44 <prvDeleteTCB+0x54>
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	e7fe      	b.n	800aa42 <prvDeleteTCB+0x52>
	}
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa52:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <prvResetNextTaskUnblockTime+0x44>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <prvResetNextTaskUnblockTime+0x14>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <prvResetNextTaskUnblockTime+0x16>
 800aa60:	2300      	movs	r3, #0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d004      	beq.n	800aa70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa66:	4b0b      	ldr	r3, [pc, #44]	; (800aa94 <prvResetNextTaskUnblockTime+0x48>)
 800aa68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa6e:	e008      	b.n	800aa82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <prvResetNextTaskUnblockTime+0x44>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	4a05      	ldr	r2, [pc, #20]	; (800aa94 <prvResetNextTaskUnblockTime+0x48>)
 800aa80:	6013      	str	r3, [r2, #0]
}
 800aa82:	bf00      	nop
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	20000518 	.word	0x20000518
 800aa94:	20000580 	.word	0x20000580

0800aa98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa9e:	4b0b      	ldr	r3, [pc, #44]	; (800aacc <xTaskGetSchedulerState+0x34>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d102      	bne.n	800aaac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	607b      	str	r3, [r7, #4]
 800aaaa:	e008      	b.n	800aabe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaac:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <xTaskGetSchedulerState+0x38>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aab4:	2302      	movs	r3, #2
 800aab6:	607b      	str	r3, [r7, #4]
 800aab8:	e001      	b.n	800aabe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaba:	2300      	movs	r3, #0
 800aabc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aabe:	687b      	ldr	r3, [r7, #4]
	}
 800aac0:	4618      	mov	r0, r3
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	2000056c 	.word	0x2000056c
 800aad0:	20000588 	.word	0x20000588

0800aad4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d06e      	beq.n	800abc8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaee:	4b39      	ldr	r3, [pc, #228]	; (800abd4 <xTaskPriorityInherit+0x100>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d25e      	bcs.n	800abb6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	db06      	blt.n	800ab0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab00:	4b34      	ldr	r3, [pc, #208]	; (800abd4 <xTaskPriorityInherit+0x100>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	f1c3 0207 	rsb	r2, r3, #7
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	6959      	ldr	r1, [r3, #20]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab16:	4613      	mov	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4a2e      	ldr	r2, [pc, #184]	; (800abd8 <xTaskPriorityInherit+0x104>)
 800ab20:	4413      	add	r3, r2
 800ab22:	4299      	cmp	r1, r3
 800ab24:	d101      	bne.n	800ab2a <xTaskPriorityInherit+0x56>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <xTaskPriorityInherit+0x58>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d03a      	beq.n	800aba6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe fa85 	bl	8009044 <uxListRemove>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d115      	bne.n	800ab6c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab44:	4924      	ldr	r1, [pc, #144]	; (800abd8 <xTaskPriorityInherit+0x104>)
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	440b      	add	r3, r1
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <xTaskPriorityInherit+0x98>
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab60:	43da      	mvns	r2, r3
 800ab62:	4b1e      	ldr	r3, [pc, #120]	; (800abdc <xTaskPriorityInherit+0x108>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4013      	ands	r3, r2
 800ab68:	4a1c      	ldr	r2, [pc, #112]	; (800abdc <xTaskPriorityInherit+0x108>)
 800ab6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab6c:	4b19      	ldr	r3, [pc, #100]	; (800abd4 <xTaskPriorityInherit+0x100>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	409a      	lsls	r2, r3
 800ab7e:	4b17      	ldr	r3, [pc, #92]	; (800abdc <xTaskPriorityInherit+0x108>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	4a15      	ldr	r2, [pc, #84]	; (800abdc <xTaskPriorityInherit+0x108>)
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4a10      	ldr	r2, [pc, #64]	; (800abd8 <xTaskPriorityInherit+0x104>)
 800ab96:	441a      	add	r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f7fe f9f3 	bl	8008f8a <vListInsertEnd>
 800aba4:	e004      	b.n	800abb0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aba6:	4b0b      	ldr	r3, [pc, #44]	; (800abd4 <xTaskPriorityInherit+0x100>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abb0:	2301      	movs	r3, #1
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	e008      	b.n	800abc8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abba:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <xTaskPriorityInherit+0x100>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d201      	bcs.n	800abc8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abc4:	2301      	movs	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abc8:	68fb      	ldr	r3, [r7, #12]
	}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20000460 	.word	0x20000460
 800abd8:	20000464 	.word	0x20000464
 800abdc:	20000568 	.word	0x20000568

0800abe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d06c      	beq.n	800acd0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abf6:	4b39      	ldr	r3, [pc, #228]	; (800acdc <xTaskPriorityDisinherit+0xfc>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d009      	beq.n	800ac14 <xTaskPriorityDisinherit+0x34>
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	e7fe      	b.n	800ac12 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d109      	bne.n	800ac30 <xTaskPriorityDisinherit+0x50>
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	60bb      	str	r3, [r7, #8]
 800ac2e:	e7fe      	b.n	800ac2e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac34:	1e5a      	subs	r2, r3, #1
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d044      	beq.n	800acd0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d140      	bne.n	800acd0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	3304      	adds	r3, #4
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe f9f6 	bl	8009044 <uxListRemove>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d115      	bne.n	800ac8a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac62:	491f      	ldr	r1, [pc, #124]	; (800ace0 <xTaskPriorityDisinherit+0x100>)
 800ac64:	4613      	mov	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	440b      	add	r3, r1
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <xTaskPriorityDisinherit+0xaa>
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	2201      	movs	r2, #1
 800ac7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac7e:	43da      	mvns	r2, r3
 800ac80:	4b18      	ldr	r3, [pc, #96]	; (800ace4 <xTaskPriorityDisinherit+0x104>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4013      	ands	r3, r2
 800ac86:	4a17      	ldr	r2, [pc, #92]	; (800ace4 <xTaskPriorityDisinherit+0x104>)
 800ac88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac96:	f1c3 0207 	rsb	r2, r3, #7
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca2:	2201      	movs	r2, #1
 800aca4:	409a      	lsls	r2, r3
 800aca6:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <xTaskPriorityDisinherit+0x104>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4313      	orrs	r3, r2
 800acac:	4a0d      	ldr	r2, [pc, #52]	; (800ace4 <xTaskPriorityDisinherit+0x104>)
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb4:	4613      	mov	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4413      	add	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <xTaskPriorityDisinherit+0x100>)
 800acbe:	441a      	add	r2, r3
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	3304      	adds	r3, #4
 800acc4:	4619      	mov	r1, r3
 800acc6:	4610      	mov	r0, r2
 800acc8:	f7fe f95f 	bl	8008f8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acd0:	697b      	ldr	r3, [r7, #20]
	}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000460 	.word	0x20000460
 800ace0:	20000464 	.word	0x20000464
 800ace4:	20000568 	.word	0x20000568

0800ace8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800acf6:	2301      	movs	r3, #1
 800acf8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 8086 	beq.w	800ae0e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d109      	bne.n	800ad1e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	e7fe      	b.n	800ad1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d902      	bls.n	800ad2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	61fb      	str	r3, [r7, #28]
 800ad2c:	e002      	b.n	800ad34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	69fa      	ldr	r2, [r7, #28]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d067      	beq.n	800ae0e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d162      	bne.n	800ae0e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad48:	4b33      	ldr	r3, [pc, #204]	; (800ae18 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d109      	bne.n	800ad66 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	60bb      	str	r3, [r7, #8]
 800ad64:	e7fe      	b.n	800ad64 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	69fa      	ldr	r2, [r7, #28]
 800ad70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	db04      	blt.n	800ad84 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	f1c3 0207 	rsb	r2, r3, #7
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	6959      	ldr	r1, [r3, #20]
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4a22      	ldr	r2, [pc, #136]	; (800ae1c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ad94:	4413      	add	r3, r2
 800ad96:	4299      	cmp	r1, r3
 800ad98:	d101      	bne.n	800ad9e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e000      	b.n	800ada0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d034      	beq.n	800ae0e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fe f94b 	bl	8009044 <uxListRemove>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d115      	bne.n	800ade0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	4918      	ldr	r1, [pc, #96]	; (800ae1c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800adba:	4613      	mov	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	440b      	add	r3, r1
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adce:	2201      	movs	r2, #1
 800add0:	fa02 f303 	lsl.w	r3, r2, r3
 800add4:	43da      	mvns	r2, r3
 800add6:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4013      	ands	r3, r2
 800addc:	4a10      	ldr	r2, [pc, #64]	; (800ae20 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800adde:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	2201      	movs	r2, #1
 800ade6:	409a      	lsls	r2, r3
 800ade8:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4313      	orrs	r3, r2
 800adee:	4a0c      	ldr	r2, [pc, #48]	; (800ae20 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4a07      	ldr	r2, [pc, #28]	; (800ae1c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae00:	441a      	add	r2, r3
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	3304      	adds	r3, #4
 800ae06:	4619      	mov	r1, r3
 800ae08:	4610      	mov	r0, r2
 800ae0a:	f7fe f8be 	bl	8008f8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae0e:	bf00      	nop
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20000460 	.word	0x20000460
 800ae1c:	20000464 	.word	0x20000464
 800ae20:	20000568 	.word	0x20000568

0800ae24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae28:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d004      	beq.n	800ae3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae30:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae36:	3201      	adds	r2, #1
 800ae38:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae3a:	4b03      	ldr	r3, [pc, #12]	; (800ae48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
	}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	20000460 	.word	0x20000460

0800ae4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae56:	4b29      	ldr	r3, [pc, #164]	; (800aefc <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae5c:	4b28      	ldr	r3, [pc, #160]	; (800af00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3304      	adds	r3, #4
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe f8ee 	bl	8009044 <uxListRemove>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10b      	bne.n	800ae86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ae6e:	4b24      	ldr	r3, [pc, #144]	; (800af00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae74:	2201      	movs	r2, #1
 800ae76:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7a:	43da      	mvns	r2, r3
 800ae7c:	4b21      	ldr	r3, [pc, #132]	; (800af04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4013      	ands	r3, r2
 800ae82:	4a20      	ldr	r2, [pc, #128]	; (800af04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae8c:	d10a      	bne.n	800aea4 <prvAddCurrentTaskToDelayedList+0x58>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d007      	beq.n	800aea4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae94:	4b1a      	ldr	r3, [pc, #104]	; (800af00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	481a      	ldr	r0, [pc, #104]	; (800af08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae9e:	f7fe f874 	bl	8008f8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aea2:	e026      	b.n	800aef2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4413      	add	r3, r2
 800aeaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aeac:	4b14      	ldr	r3, [pc, #80]	; (800af00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d209      	bcs.n	800aed0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aebc:	4b13      	ldr	r3, [pc, #76]	; (800af0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	4b0f      	ldr	r3, [pc, #60]	; (800af00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3304      	adds	r3, #4
 800aec6:	4619      	mov	r1, r3
 800aec8:	4610      	mov	r0, r2
 800aeca:	f7fe f882 	bl	8008fd2 <vListInsert>
}
 800aece:	e010      	b.n	800aef2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aed0:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7fe f878 	bl	8008fd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d202      	bcs.n	800aef2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aeec:	4a09      	ldr	r2, [pc, #36]	; (800af14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	6013      	str	r3, [r2, #0]
}
 800aef2:	bf00      	nop
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20000564 	.word	0x20000564
 800af00:	20000460 	.word	0x20000460
 800af04:	20000568 	.word	0x20000568
 800af08:	2000054c 	.word	0x2000054c
 800af0c:	2000051c 	.word	0x2000051c
 800af10:	20000518 	.word	0x20000518
 800af14:	20000580 	.word	0x20000580

0800af18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3b04      	subs	r3, #4
 800af28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3b04      	subs	r3, #4
 800af36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f023 0201 	bic.w	r2, r3, #1
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	3b04      	subs	r3, #4
 800af46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af48:	4a0c      	ldr	r2, [pc, #48]	; (800af7c <pxPortInitialiseStack+0x64>)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3b14      	subs	r3, #20
 800af52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3b04      	subs	r3, #4
 800af5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f06f 0202 	mvn.w	r2, #2
 800af66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	3b20      	subs	r3, #32
 800af6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af6e:	68fb      	ldr	r3, [r7, #12]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	0800af81 	.word	0x0800af81

0800af80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af8a:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <prvTaskExitError+0x50>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af92:	d009      	beq.n	800afa8 <prvTaskExitError+0x28>
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	e7fe      	b.n	800afa6 <prvTaskExitError+0x26>
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800afba:	bf00      	nop
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0fc      	beq.n	800afbc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	20000118 	.word	0x20000118
	...

0800afe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800afe0:	4b07      	ldr	r3, [pc, #28]	; (800b000 <pxCurrentTCBConst2>)
 800afe2:	6819      	ldr	r1, [r3, #0]
 800afe4:	6808      	ldr	r0, [r1, #0]
 800afe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afea:	f380 8809 	msr	PSP, r0
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f04f 0000 	mov.w	r0, #0
 800aff6:	f380 8811 	msr	BASEPRI, r0
 800affa:	4770      	bx	lr
 800affc:	f3af 8000 	nop.w

0800b000 <pxCurrentTCBConst2>:
 800b000:	20000460 	.word	0x20000460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop

0800b008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b008:	4808      	ldr	r0, [pc, #32]	; (800b02c <prvPortStartFirstTask+0x24>)
 800b00a:	6800      	ldr	r0, [r0, #0]
 800b00c:	6800      	ldr	r0, [r0, #0]
 800b00e:	f380 8808 	msr	MSP, r0
 800b012:	f04f 0000 	mov.w	r0, #0
 800b016:	f380 8814 	msr	CONTROL, r0
 800b01a:	b662      	cpsie	i
 800b01c:	b661      	cpsie	f
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	df00      	svc	0
 800b028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b02a:	bf00      	nop
 800b02c:	e000ed08 	.word	0xe000ed08

0800b030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b036:	4b44      	ldr	r3, [pc, #272]	; (800b148 <xPortStartScheduler+0x118>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a44      	ldr	r2, [pc, #272]	; (800b14c <xPortStartScheduler+0x11c>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d109      	bne.n	800b054 <xPortStartScheduler+0x24>
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	613b      	str	r3, [r7, #16]
 800b052:	e7fe      	b.n	800b052 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b054:	4b3c      	ldr	r3, [pc, #240]	; (800b148 <xPortStartScheduler+0x118>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a3d      	ldr	r2, [pc, #244]	; (800b150 <xPortStartScheduler+0x120>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d109      	bne.n	800b072 <xPortStartScheduler+0x42>
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	e7fe      	b.n	800b070 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b072:	4b38      	ldr	r3, [pc, #224]	; (800b154 <xPortStartScheduler+0x124>)
 800b074:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	22ff      	movs	r2, #255	; 0xff
 800b082:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b08c:	78fb      	ldrb	r3, [r7, #3]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b094:	b2da      	uxtb	r2, r3
 800b096:	4b30      	ldr	r3, [pc, #192]	; (800b158 <xPortStartScheduler+0x128>)
 800b098:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b09a:	4b30      	ldr	r3, [pc, #192]	; (800b15c <xPortStartScheduler+0x12c>)
 800b09c:	2207      	movs	r2, #7
 800b09e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0a0:	e009      	b.n	800b0b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b0a2:	4b2e      	ldr	r3, [pc, #184]	; (800b15c <xPortStartScheduler+0x12c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	4a2c      	ldr	r2, [pc, #176]	; (800b15c <xPortStartScheduler+0x12c>)
 800b0aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	005b      	lsls	r3, r3, #1
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0b6:	78fb      	ldrb	r3, [r7, #3]
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0be:	2b80      	cmp	r3, #128	; 0x80
 800b0c0:	d0ef      	beq.n	800b0a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0c2:	4b26      	ldr	r3, [pc, #152]	; (800b15c <xPortStartScheduler+0x12c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f1c3 0307 	rsb	r3, r3, #7
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	d009      	beq.n	800b0e2 <xPortStartScheduler+0xb2>
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	60bb      	str	r3, [r7, #8]
 800b0e0:	e7fe      	b.n	800b0e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0e2:	4b1e      	ldr	r3, [pc, #120]	; (800b15c <xPortStartScheduler+0x12c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	021b      	lsls	r3, r3, #8
 800b0e8:	4a1c      	ldr	r2, [pc, #112]	; (800b15c <xPortStartScheduler+0x12c>)
 800b0ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	; (800b15c <xPortStartScheduler+0x12c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0f4:	4a19      	ldr	r2, [pc, #100]	; (800b15c <xPortStartScheduler+0x12c>)
 800b0f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b100:	4b17      	ldr	r3, [pc, #92]	; (800b160 <xPortStartScheduler+0x130>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a16      	ldr	r2, [pc, #88]	; (800b160 <xPortStartScheduler+0x130>)
 800b106:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b10a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b10c:	4b14      	ldr	r3, [pc, #80]	; (800b160 <xPortStartScheduler+0x130>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a13      	ldr	r2, [pc, #76]	; (800b160 <xPortStartScheduler+0x130>)
 800b112:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b116:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b118:	f000 f8d6 	bl	800b2c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b11c:	4b11      	ldr	r3, [pc, #68]	; (800b164 <xPortStartScheduler+0x134>)
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b122:	f000 f8f5 	bl	800b310 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b126:	4b10      	ldr	r3, [pc, #64]	; (800b168 <xPortStartScheduler+0x138>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a0f      	ldr	r2, [pc, #60]	; (800b168 <xPortStartScheduler+0x138>)
 800b12c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b130:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b132:	f7ff ff69 	bl	800b008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b136:	f7ff fa75 	bl	800a624 <vTaskSwitchContext>
	prvTaskExitError();
 800b13a:	f7ff ff21 	bl	800af80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	e000ed00 	.word	0xe000ed00
 800b14c:	410fc271 	.word	0x410fc271
 800b150:	410fc270 	.word	0x410fc270
 800b154:	e000e400 	.word	0xe000e400
 800b158:	2000058c 	.word	0x2000058c
 800b15c:	20000590 	.word	0x20000590
 800b160:	e000ed20 	.word	0xe000ed20
 800b164:	20000118 	.word	0x20000118
 800b168:	e000ef34 	.word	0xe000ef34

0800b16c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b184:	4b0e      	ldr	r3, [pc, #56]	; (800b1c0 <vPortEnterCritical+0x54>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3301      	adds	r3, #1
 800b18a:	4a0d      	ldr	r2, [pc, #52]	; (800b1c0 <vPortEnterCritical+0x54>)
 800b18c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b18e:	4b0c      	ldr	r3, [pc, #48]	; (800b1c0 <vPortEnterCritical+0x54>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b01      	cmp	r3, #1
 800b194:	d10e      	bne.n	800b1b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b196:	4b0b      	ldr	r3, [pc, #44]	; (800b1c4 <vPortEnterCritical+0x58>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d009      	beq.n	800b1b4 <vPortEnterCritical+0x48>
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	603b      	str	r3, [r7, #0]
 800b1b2:	e7fe      	b.n	800b1b2 <vPortEnterCritical+0x46>
	}
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	20000118 	.word	0x20000118
 800b1c4:	e000ed04 	.word	0xe000ed04

0800b1c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1ce:	4b11      	ldr	r3, [pc, #68]	; (800b214 <vPortExitCritical+0x4c>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d109      	bne.n	800b1ea <vPortExitCritical+0x22>
 800b1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	607b      	str	r3, [r7, #4]
 800b1e8:	e7fe      	b.n	800b1e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b1ea:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <vPortExitCritical+0x4c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	4a08      	ldr	r2, [pc, #32]	; (800b214 <vPortExitCritical+0x4c>)
 800b1f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1f4:	4b07      	ldr	r3, [pc, #28]	; (800b214 <vPortExitCritical+0x4c>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d104      	bne.n	800b206 <vPortExitCritical+0x3e>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b206:	bf00      	nop
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	20000118 	.word	0x20000118
	...

0800b220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b220:	f3ef 8009 	mrs	r0, PSP
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	4b15      	ldr	r3, [pc, #84]	; (800b280 <pxCurrentTCBConst>)
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	f01e 0f10 	tst.w	lr, #16
 800b230:	bf08      	it	eq
 800b232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23a:	6010      	str	r0, [r2, #0]
 800b23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b240:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b244:	f380 8811 	msr	BASEPRI, r0
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f7ff f9e8 	bl	800a624 <vTaskSwitchContext>
 800b254:	f04f 0000 	mov.w	r0, #0
 800b258:	f380 8811 	msr	BASEPRI, r0
 800b25c:	bc09      	pop	{r0, r3}
 800b25e:	6819      	ldr	r1, [r3, #0]
 800b260:	6808      	ldr	r0, [r1, #0]
 800b262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b266:	f01e 0f10 	tst.w	lr, #16
 800b26a:	bf08      	it	eq
 800b26c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b270:	f380 8809 	msr	PSP, r0
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	f3af 8000 	nop.w

0800b280 <pxCurrentTCBConst>:
 800b280:	20000460 	.word	0x20000460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b284:	bf00      	nop
 800b286:	bf00      	nop

0800b288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2a0:	f7ff f904 	bl	800a4ac <xTaskIncrementTick>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2aa:	4b06      	ldr	r3, [pc, #24]	; (800b2c4 <SysTick_Handler+0x3c>)
 800b2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	e000ed04 	.word	0xe000ed04

0800b2c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <vPortSetupTimerInterrupt+0x34>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2d2:	4b0b      	ldr	r3, [pc, #44]	; (800b300 <vPortSetupTimerInterrupt+0x38>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <vPortSetupTimerInterrupt+0x3c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a0a      	ldr	r2, [pc, #40]	; (800b308 <vPortSetupTimerInterrupt+0x40>)
 800b2de:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e2:	099b      	lsrs	r3, r3, #6
 800b2e4:	4a09      	ldr	r2, [pc, #36]	; (800b30c <vPortSetupTimerInterrupt+0x44>)
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ea:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <vPortSetupTimerInterrupt+0x34>)
 800b2ec:	2207      	movs	r2, #7
 800b2ee:	601a      	str	r2, [r3, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	e000e010 	.word	0xe000e010
 800b300:	e000e018 	.word	0xe000e018
 800b304:	20000000 	.word	0x20000000
 800b308:	10624dd3 	.word	0x10624dd3
 800b30c:	e000e014 	.word	0xe000e014

0800b310 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b310:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b320 <vPortEnableVFP+0x10>
 800b314:	6801      	ldr	r1, [r0, #0]
 800b316:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b31a:	6001      	str	r1, [r0, #0]
 800b31c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b31e:	bf00      	nop
 800b320:	e000ed88 	.word	0xe000ed88

0800b324 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b32a:	f3ef 8305 	mrs	r3, IPSR
 800b32e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2b0f      	cmp	r3, #15
 800b334:	d913      	bls.n	800b35e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b336:	4a16      	ldr	r2, [pc, #88]	; (800b390 <vPortValidateInterruptPriority+0x6c>)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4413      	add	r3, r2
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b340:	4b14      	ldr	r3, [pc, #80]	; (800b394 <vPortValidateInterruptPriority+0x70>)
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	7afa      	ldrb	r2, [r7, #11]
 800b346:	429a      	cmp	r2, r3
 800b348:	d209      	bcs.n	800b35e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	607b      	str	r3, [r7, #4]
 800b35c:	e7fe      	b.n	800b35c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b35e:	4b0e      	ldr	r3, [pc, #56]	; (800b398 <vPortValidateInterruptPriority+0x74>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b366:	4b0d      	ldr	r3, [pc, #52]	; (800b39c <vPortValidateInterruptPriority+0x78>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d909      	bls.n	800b382 <vPortValidateInterruptPriority+0x5e>
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	e7fe      	b.n	800b380 <vPortValidateInterruptPriority+0x5c>
	}
 800b382:	bf00      	nop
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	e000e3f0 	.word	0xe000e3f0
 800b394:	2000058c 	.word	0x2000058c
 800b398:	e000ed0c 	.word	0xe000ed0c
 800b39c:	20000590 	.word	0x20000590

0800b3a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3ac:	f7fe ffb2 	bl	800a314 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3b0:	4b57      	ldr	r3, [pc, #348]	; (800b510 <pvPortMalloc+0x170>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3b8:	f000 f90c 	bl	800b5d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3bc:	4b55      	ldr	r3, [pc, #340]	; (800b514 <pvPortMalloc+0x174>)
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f040 808c 	bne.w	800b4e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d01c      	beq.n	800b40a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b3d0:	2208      	movs	r2, #8
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f003 0307 	and.w	r3, r3, #7
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d013      	beq.n	800b40a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f023 0307 	bic.w	r3, r3, #7
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f003 0307 	and.w	r3, r3, #7
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d009      	beq.n	800b40a <pvPortMalloc+0x6a>
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	f383 8811 	msr	BASEPRI, r3
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	617b      	str	r3, [r7, #20]
 800b408:	e7fe      	b.n	800b408 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d068      	beq.n	800b4e2 <pvPortMalloc+0x142>
 800b410:	4b41      	ldr	r3, [pc, #260]	; (800b518 <pvPortMalloc+0x178>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	429a      	cmp	r2, r3
 800b418:	d863      	bhi.n	800b4e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b41a:	4b40      	ldr	r3, [pc, #256]	; (800b51c <pvPortMalloc+0x17c>)
 800b41c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b41e:	4b3f      	ldr	r3, [pc, #252]	; (800b51c <pvPortMalloc+0x17c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b424:	e004      	b.n	800b430 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	429a      	cmp	r2, r3
 800b438:	d903      	bls.n	800b442 <pvPortMalloc+0xa2>
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1f1      	bne.n	800b426 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b442:	4b33      	ldr	r3, [pc, #204]	; (800b510 <pvPortMalloc+0x170>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b448:	429a      	cmp	r2, r3
 800b44a:	d04a      	beq.n	800b4e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2208      	movs	r2, #8
 800b452:	4413      	add	r3, r2
 800b454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	685a      	ldr	r2, [r3, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	1ad2      	subs	r2, r2, r3
 800b466:	2308      	movs	r3, #8
 800b468:	005b      	lsls	r3, r3, #1
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d91e      	bls.n	800b4ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4413      	add	r3, r2
 800b474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d009      	beq.n	800b494 <pvPortMalloc+0xf4>
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	613b      	str	r3, [r7, #16]
 800b492:	e7fe      	b.n	800b492 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	1ad2      	subs	r2, r2, r3
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4a6:	69b8      	ldr	r0, [r7, #24]
 800b4a8:	f000 f8f6 	bl	800b698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4ac:	4b1a      	ldr	r3, [pc, #104]	; (800b518 <pvPortMalloc+0x178>)
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	4a18      	ldr	r2, [pc, #96]	; (800b518 <pvPortMalloc+0x178>)
 800b4b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4ba:	4b17      	ldr	r3, [pc, #92]	; (800b518 <pvPortMalloc+0x178>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4b18      	ldr	r3, [pc, #96]	; (800b520 <pvPortMalloc+0x180>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d203      	bcs.n	800b4ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4c6:	4b14      	ldr	r3, [pc, #80]	; (800b518 <pvPortMalloc+0x178>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a15      	ldr	r2, [pc, #84]	; (800b520 <pvPortMalloc+0x180>)
 800b4cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	4b10      	ldr	r3, [pc, #64]	; (800b514 <pvPortMalloc+0x174>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4e2:	f7fe ff25 	bl	800a330 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	f003 0307 	and.w	r3, r3, #7
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d009      	beq.n	800b504 <pvPortMalloc+0x164>
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	60fb      	str	r3, [r7, #12]
 800b502:	e7fe      	b.n	800b502 <pvPortMalloc+0x162>
	return pvReturn;
 800b504:	69fb      	ldr	r3, [r7, #28]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3728      	adds	r7, #40	; 0x28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	2000419c 	.word	0x2000419c
 800b514:	200041a8 	.word	0x200041a8
 800b518:	200041a0 	.word	0x200041a0
 800b51c:	20004194 	.word	0x20004194
 800b520:	200041a4 	.word	0x200041a4

0800b524 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d046      	beq.n	800b5c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b536:	2308      	movs	r3, #8
 800b538:	425b      	negs	r3, r3
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	4413      	add	r3, r2
 800b53e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	685a      	ldr	r2, [r3, #4]
 800b548:	4b20      	ldr	r3, [pc, #128]	; (800b5cc <vPortFree+0xa8>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4013      	ands	r3, r2
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d109      	bne.n	800b566 <vPortFree+0x42>
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	e7fe      	b.n	800b564 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d009      	beq.n	800b582 <vPortFree+0x5e>
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	60bb      	str	r3, [r7, #8]
 800b580:	e7fe      	b.n	800b580 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	4b11      	ldr	r3, [pc, #68]	; (800b5cc <vPortFree+0xa8>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4013      	ands	r3, r2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d019      	beq.n	800b5c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d115      	bne.n	800b5c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <vPortFree+0xa8>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	401a      	ands	r2, r3
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5a8:	f7fe feb4 	bl	800a314 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	685a      	ldr	r2, [r3, #4]
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <vPortFree+0xac>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	4a06      	ldr	r2, [pc, #24]	; (800b5d0 <vPortFree+0xac>)
 800b5b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5ba:	6938      	ldr	r0, [r7, #16]
 800b5bc:	f000 f86c 	bl	800b698 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b5c0:	f7fe feb6 	bl	800a330 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5c4:	bf00      	nop
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	200041a8 	.word	0x200041a8
 800b5d0:	200041a0 	.word	0x200041a0

0800b5d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b5de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5e0:	4b27      	ldr	r3, [pc, #156]	; (800b680 <prvHeapInit+0xac>)
 800b5e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f003 0307 	and.w	r3, r3, #7
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00c      	beq.n	800b608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3307      	adds	r3, #7
 800b5f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0307 	bic.w	r3, r3, #7
 800b5fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	4a1f      	ldr	r2, [pc, #124]	; (800b680 <prvHeapInit+0xac>)
 800b604:	4413      	add	r3, r2
 800b606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b60c:	4a1d      	ldr	r2, [pc, #116]	; (800b684 <prvHeapInit+0xb0>)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b612:	4b1c      	ldr	r3, [pc, #112]	; (800b684 <prvHeapInit+0xb0>)
 800b614:	2200      	movs	r2, #0
 800b616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4413      	add	r3, r2
 800b61e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b620:	2208      	movs	r2, #8
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	1a9b      	subs	r3, r3, r2
 800b626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f023 0307 	bic.w	r3, r3, #7
 800b62e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4a15      	ldr	r2, [pc, #84]	; (800b688 <prvHeapInit+0xb4>)
 800b634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b636:	4b14      	ldr	r3, [pc, #80]	; (800b688 <prvHeapInit+0xb4>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2200      	movs	r2, #0
 800b63c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b63e:	4b12      	ldr	r3, [pc, #72]	; (800b688 <prvHeapInit+0xb4>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2200      	movs	r2, #0
 800b644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	1ad2      	subs	r2, r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b654:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <prvHeapInit+0xb4>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	4a0a      	ldr	r2, [pc, #40]	; (800b68c <prvHeapInit+0xb8>)
 800b662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	4a09      	ldr	r2, [pc, #36]	; (800b690 <prvHeapInit+0xbc>)
 800b66a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b66c:	4b09      	ldr	r3, [pc, #36]	; (800b694 <prvHeapInit+0xc0>)
 800b66e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b672:	601a      	str	r2, [r3, #0]
}
 800b674:	bf00      	nop
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	20000594 	.word	0x20000594
 800b684:	20004194 	.word	0x20004194
 800b688:	2000419c 	.word	0x2000419c
 800b68c:	200041a4 	.word	0x200041a4
 800b690:	200041a0 	.word	0x200041a0
 800b694:	200041a8 	.word	0x200041a8

0800b698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6a0:	4b28      	ldr	r3, [pc, #160]	; (800b744 <prvInsertBlockIntoFreeList+0xac>)
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	e002      	b.n	800b6ac <prvInsertBlockIntoFreeList+0x14>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d8f7      	bhi.n	800b6a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d108      	bne.n	800b6da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	441a      	add	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	441a      	add	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d118      	bne.n	800b720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <prvInsertBlockIntoFreeList+0xb0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d00d      	beq.n	800b716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	441a      	add	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	e008      	b.n	800b728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b716:	4b0c      	ldr	r3, [pc, #48]	; (800b748 <prvInsertBlockIntoFreeList+0xb0>)
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	e003      	b.n	800b728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d002      	beq.n	800b736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	20004194 	.word	0x20004194
 800b748:	2000419c 	.word	0x2000419c

0800b74c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800b754:	4b29      	ldr	r3, [pc, #164]	; (800b7fc <tcpip_thread+0xb0>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d005      	beq.n	800b768 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800b75c:	4b27      	ldr	r3, [pc, #156]	; (800b7fc <tcpip_thread+0xb0>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a27      	ldr	r2, [pc, #156]	; (800b800 <tcpip_thread+0xb4>)
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	4610      	mov	r0, r2
 800b766:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800b768:	4826      	ldr	r0, [pc, #152]	; (800b804 <tcpip_thread+0xb8>)
 800b76a:	f008 fd1d 	bl	80141a8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800b76e:	4825      	ldr	r0, [pc, #148]	; (800b804 <tcpip_thread+0xb8>)
 800b770:	f008 fd29 	bl	80141c6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800b774:	f107 030c 	add.w	r3, r7, #12
 800b778:	4619      	mov	r1, r3
 800b77a:	4823      	ldr	r0, [pc, #140]	; (800b808 <tcpip_thread+0xbc>)
 800b77c:	f006 fa22 	bl	8011bc4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b780:	4820      	ldr	r0, [pc, #128]	; (800b804 <tcpip_thread+0xb8>)
 800b782:	f008 fd11 	bl	80141a8 <sys_mutex_lock>
    if (msg == NULL) {
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d106      	bne.n	800b79a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b78c:	4b1f      	ldr	r3, [pc, #124]	; (800b80c <tcpip_thread+0xc0>)
 800b78e:	2269      	movs	r2, #105	; 0x69
 800b790:	491f      	ldr	r1, [pc, #124]	; (800b810 <tcpip_thread+0xc4>)
 800b792:	4820      	ldr	r0, [pc, #128]	; (800b814 <tcpip_thread+0xc8>)
 800b794:	f009 fb40 	bl	8014e18 <iprintf>
      continue;
 800b798:	e02f      	b.n	800b7fa <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d011      	beq.n	800b7c6 <tcpip_thread+0x7a>
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d01b      	beq.n	800b7de <tcpip_thread+0x92>
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d120      	bne.n	800b7ec <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	6850      	ldr	r0, [r2, #4]
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	6892      	ldr	r2, [r2, #8]
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	2008      	movs	r0, #8
 800b7c0:	f000 fd62 	bl	800c288 <memp_free>
      break;
 800b7c4:	e019      	b.n	800b7fa <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	6892      	ldr	r2, [r2, #8]
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	2007      	movs	r0, #7
 800b7d8:	f000 fd56 	bl	800c288 <memp_free>
      break;
 800b7dc:	e00d      	b.n	800b7fa <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	6892      	ldr	r2, [r2, #8]
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	4798      	blx	r3
      break;
 800b7ea:	e006      	b.n	800b7fa <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b7ec:	4b07      	ldr	r3, [pc, #28]	; (800b80c <tcpip_thread+0xc0>)
 800b7ee:	229b      	movs	r2, #155	; 0x9b
 800b7f0:	4907      	ldr	r1, [pc, #28]	; (800b810 <tcpip_thread+0xc4>)
 800b7f2:	4808      	ldr	r0, [pc, #32]	; (800b814 <tcpip_thread+0xc8>)
 800b7f4:	f009 fb10 	bl	8014e18 <iprintf>
      break;
 800b7f8:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800b7fa:	e7b8      	b.n	800b76e <tcpip_thread+0x22>
 800b7fc:	200041ac 	.word	0x200041ac
 800b800:	200041b0 	.word	0x200041b0
 800b804:	200074c4 	.word	0x200074c4
 800b808:	200041b4 	.word	0x200041b4
 800b80c:	08015bd4 	.word	0x08015bd4
 800b810:	08015c04 	.word	0x08015c04
 800b814:	08015c24 	.word	0x08015c24

0800b818 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800b824:	481a      	ldr	r0, [pc, #104]	; (800b890 <tcpip_inpkt+0x78>)
 800b826:	f008 fc83 	bl	8014130 <sys_mbox_valid>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d105      	bne.n	800b83c <tcpip_inpkt+0x24>
 800b830:	4b18      	ldr	r3, [pc, #96]	; (800b894 <tcpip_inpkt+0x7c>)
 800b832:	22b5      	movs	r2, #181	; 0xb5
 800b834:	4918      	ldr	r1, [pc, #96]	; (800b898 <tcpip_inpkt+0x80>)
 800b836:	4819      	ldr	r0, [pc, #100]	; (800b89c <tcpip_inpkt+0x84>)
 800b838:	f009 faee 	bl	8014e18 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b83c:	2008      	movs	r0, #8
 800b83e:	f000 fcd1 	bl	800c1e4 <memp_malloc>
 800b842:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b84a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b84e:	e01a      	b.n	800b886 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2202      	movs	r2, #2
 800b854:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800b868:	6979      	ldr	r1, [r7, #20]
 800b86a:	4809      	ldr	r0, [pc, #36]	; (800b890 <tcpip_inpkt+0x78>)
 800b86c:	f008 fc07 	bl	801407e <sys_mbox_trypost>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d006      	beq.n	800b884 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b876:	6979      	ldr	r1, [r7, #20]
 800b878:	2008      	movs	r0, #8
 800b87a:	f000 fd05 	bl	800c288 <memp_free>
    return ERR_MEM;
 800b87e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b882:	e000      	b.n	800b886 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b884:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	200041b4 	.word	0x200041b4
 800b894:	08015bd4 	.word	0x08015bd4
 800b898:	08015c4c 	.word	0x08015c4c
 800b89c:	08015c24 	.word	0x08015c24

0800b8a0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b8b0:	f003 0318 	and.w	r3, r3, #24
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d006      	beq.n	800b8c6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b8b8:	4a08      	ldr	r2, [pc, #32]	; (800b8dc <tcpip_input+0x3c>)
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff ffab 	bl	800b818 <tcpip_inpkt>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	e005      	b.n	800b8d2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800b8c6:	4a06      	ldr	r2, [pc, #24]	; (800b8e0 <tcpip_input+0x40>)
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff ffa4 	bl	800b818 <tcpip_inpkt>
 800b8d0:	4603      	mov	r3, r0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	08013e59 	.word	0x08013e59
 800b8e0:	08012e2d 	.word	0x08012e2d

0800b8e4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800b8f2:	481d      	ldr	r0, [pc, #116]	; (800b968 <tcpip_callback_with_block+0x84>)
 800b8f4:	f008 fc1c 	bl	8014130 <sys_mbox_valid>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d105      	bne.n	800b90a <tcpip_callback_with_block+0x26>
 800b8fe:	4b1b      	ldr	r3, [pc, #108]	; (800b96c <tcpip_callback_with_block+0x88>)
 800b900:	22ee      	movs	r2, #238	; 0xee
 800b902:	491b      	ldr	r1, [pc, #108]	; (800b970 <tcpip_callback_with_block+0x8c>)
 800b904:	481b      	ldr	r0, [pc, #108]	; (800b974 <tcpip_callback_with_block+0x90>)
 800b906:	f009 fa87 	bl	8014e18 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b90a:	2007      	movs	r0, #7
 800b90c:	f000 fc6a 	bl	800c1e4 <memp_malloc>
 800b910:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800b918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b91c:	e01f      	b.n	800b95e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2203      	movs	r2, #3
 800b922:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	609a      	str	r2, [r3, #8]
  if (block) {
 800b930:	79fb      	ldrb	r3, [r7, #7]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800b936:	6979      	ldr	r1, [r7, #20]
 800b938:	480b      	ldr	r0, [pc, #44]	; (800b968 <tcpip_callback_with_block+0x84>)
 800b93a:	f008 fb8b 	bl	8014054 <sys_mbox_post>
 800b93e:	e00d      	b.n	800b95c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800b940:	6979      	ldr	r1, [r7, #20]
 800b942:	4809      	ldr	r0, [pc, #36]	; (800b968 <tcpip_callback_with_block+0x84>)
 800b944:	f008 fb9b 	bl	801407e <sys_mbox_trypost>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d006      	beq.n	800b95c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b94e:	6979      	ldr	r1, [r7, #20]
 800b950:	2007      	movs	r0, #7
 800b952:	f000 fc99 	bl	800c288 <memp_free>
      return ERR_MEM;
 800b956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b95a:	e000      	b.n	800b95e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3718      	adds	r7, #24
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	200041b4 	.word	0x200041b4
 800b96c:	08015bd4 	.word	0x08015bd4
 800b970:	08015c4c 	.word	0x08015c4c
 800b974:	08015c24 	.word	0x08015c24

0800b978 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b982:	f000 f86a 	bl	800ba5a <lwip_init>

  tcpip_init_done = initfunc;
 800b986:	4a17      	ldr	r2, [pc, #92]	; (800b9e4 <tcpip_init+0x6c>)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b98c:	4a16      	ldr	r2, [pc, #88]	; (800b9e8 <tcpip_init+0x70>)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b992:	2106      	movs	r1, #6
 800b994:	4815      	ldr	r0, [pc, #84]	; (800b9ec <tcpip_init+0x74>)
 800b996:	f008 fb3b 	bl	8014010 <sys_mbox_new>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d006      	beq.n	800b9ae <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b9a0:	4b13      	ldr	r3, [pc, #76]	; (800b9f0 <tcpip_init+0x78>)
 800b9a2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b9a6:	4913      	ldr	r1, [pc, #76]	; (800b9f4 <tcpip_init+0x7c>)
 800b9a8:	4813      	ldr	r0, [pc, #76]	; (800b9f8 <tcpip_init+0x80>)
 800b9aa:	f009 fa35 	bl	8014e18 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b9ae:	4813      	ldr	r0, [pc, #76]	; (800b9fc <tcpip_init+0x84>)
 800b9b0:	f008 fbde 	bl	8014170 <sys_mutex_new>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d006      	beq.n	800b9c8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b9ba:	4b0d      	ldr	r3, [pc, #52]	; (800b9f0 <tcpip_init+0x78>)
 800b9bc:	f240 12d9 	movw	r2, #473	; 0x1d9
 800b9c0:	490f      	ldr	r1, [pc, #60]	; (800ba00 <tcpip_init+0x88>)
 800b9c2:	480d      	ldr	r0, [pc, #52]	; (800b9f8 <tcpip_init+0x80>)
 800b9c4:	f009 fa28 	bl	8014e18 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	490c      	ldr	r1, [pc, #48]	; (800ba04 <tcpip_init+0x8c>)
 800b9d4:	480c      	ldr	r0, [pc, #48]	; (800ba08 <tcpip_init+0x90>)
 800b9d6:	f008 fc03 	bl	80141e0 <sys_thread_new>
}
 800b9da:	bf00      	nop
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	200041ac 	.word	0x200041ac
 800b9e8:	200041b0 	.word	0x200041b0
 800b9ec:	200041b4 	.word	0x200041b4
 800b9f0:	08015bd4 	.word	0x08015bd4
 800b9f4:	08015c5c 	.word	0x08015c5c
 800b9f8:	08015c24 	.word	0x08015c24
 800b9fc:	200074c4 	.word	0x200074c4
 800ba00:	08015c80 	.word	0x08015c80
 800ba04:	0800b74d 	.word	0x0800b74d
 800ba08:	08015ca4 	.word	0x08015ca4

0800ba0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800ba16:	88fb      	ldrh	r3, [r7, #6]
 800ba18:	ba5b      	rev16	r3, r3
 800ba1a:	b29b      	uxth	r3, r3
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	061a      	lsls	r2, r3, #24
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	021b      	lsls	r3, r3, #8
 800ba38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	0a1b      	lsrs	r3, r3, #8
 800ba42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba46:	431a      	orrs	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	0e1b      	lsrs	r3, r3, #24
 800ba4c:	4313      	orrs	r3, r2
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ba64:	f008 fb76 	bl	8014154 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ba68:	f000 f8a4 	bl	800bbb4 <mem_init>
  memp_init();
 800ba6c:	f000 fb6e 	bl	800c14c <memp_init>
  pbuf_init();
  netif_init();
 800ba70:	f000 fc34 	bl	800c2dc <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ba74:	f001 fbd0 	bl	800d218 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800ba78:	f005 ff60 	bl	801193c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ba8c:	4b40      	ldr	r3, [pc, #256]	; (800bb90 <plug_holes+0x10c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d206      	bcs.n	800baa4 <plug_holes+0x20>
 800ba96:	4b3f      	ldr	r3, [pc, #252]	; (800bb94 <plug_holes+0x110>)
 800ba98:	f240 125d 	movw	r2, #349	; 0x15d
 800ba9c:	493e      	ldr	r1, [pc, #248]	; (800bb98 <plug_holes+0x114>)
 800ba9e:	483f      	ldr	r0, [pc, #252]	; (800bb9c <plug_holes+0x118>)
 800baa0:	f009 f9ba 	bl	8014e18 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800baa4:	4b3e      	ldr	r3, [pc, #248]	; (800bba0 <plug_holes+0x11c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d306      	bcc.n	800babc <plug_holes+0x38>
 800baae:	4b39      	ldr	r3, [pc, #228]	; (800bb94 <plug_holes+0x110>)
 800bab0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bab4:	493b      	ldr	r1, [pc, #236]	; (800bba4 <plug_holes+0x120>)
 800bab6:	4839      	ldr	r0, [pc, #228]	; (800bb9c <plug_holes+0x118>)
 800bab8:	f009 f9ae 	bl	8014e18 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	791b      	ldrb	r3, [r3, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d006      	beq.n	800bad2 <plug_holes+0x4e>
 800bac4:	4b33      	ldr	r3, [pc, #204]	; (800bb94 <plug_holes+0x110>)
 800bac6:	f240 125f 	movw	r2, #351	; 0x15f
 800baca:	4937      	ldr	r1, [pc, #220]	; (800bba8 <plug_holes+0x124>)
 800bacc:	4833      	ldr	r0, [pc, #204]	; (800bb9c <plug_holes+0x118>)
 800bace:	f009 f9a3 	bl	8014e18 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bada:	d906      	bls.n	800baea <plug_holes+0x66>
 800badc:	4b2d      	ldr	r3, [pc, #180]	; (800bb94 <plug_holes+0x110>)
 800bade:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800bae2:	4932      	ldr	r1, [pc, #200]	; (800bbac <plug_holes+0x128>)
 800bae4:	482d      	ldr	r0, [pc, #180]	; (800bb9c <plug_holes+0x118>)
 800bae6:	f009 f997 	bl	8014e18 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800baea:	4b29      	ldr	r3, [pc, #164]	; (800bb90 <plug_holes+0x10c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	8812      	ldrh	r2, [r2, #0]
 800baf2:	4413      	add	r3, r2
 800baf4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d01f      	beq.n	800bb3e <plug_holes+0xba>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	791b      	ldrb	r3, [r3, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d11b      	bne.n	800bb3e <plug_holes+0xba>
 800bb06:	4b26      	ldr	r3, [pc, #152]	; (800bba0 <plug_holes+0x11c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d016      	beq.n	800bb3e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bb10:	4b27      	ldr	r3, [pc, #156]	; (800bbb0 <plug_holes+0x12c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d102      	bne.n	800bb20 <plug_holes+0x9c>
      lfree = mem;
 800bb1a:	4a25      	ldr	r2, [pc, #148]	; (800bbb0 <plug_holes+0x12c>)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	881a      	ldrh	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a19      	ldr	r2, [pc, #100]	; (800bb90 <plug_holes+0x10c>)
 800bb2c:	6812      	ldr	r2, [r2, #0]
 800bb2e:	1a99      	subs	r1, r3, r2
 800bb30:	4b17      	ldr	r3, [pc, #92]	; (800bb90 <plug_holes+0x10c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	8812      	ldrh	r2, [r2, #0]
 800bb38:	4413      	add	r3, r2
 800bb3a:	b28a      	uxth	r2, r1
 800bb3c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800bb3e:	4b14      	ldr	r3, [pc, #80]	; (800bb90 <plug_holes+0x10c>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	8852      	ldrh	r2, [r2, #2]
 800bb46:	4413      	add	r3, r2
 800bb48:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d01a      	beq.n	800bb88 <plug_holes+0x104>
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	791b      	ldrb	r3, [r3, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d116      	bne.n	800bb88 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bb5a:	4b15      	ldr	r3, [pc, #84]	; (800bbb0 <plug_holes+0x12c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d102      	bne.n	800bb6a <plug_holes+0xe6>
      lfree = pmem;
 800bb64:	4a12      	ldr	r2, [pc, #72]	; (800bbb0 <plug_holes+0x12c>)
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	881a      	ldrh	r2, [r3, #0]
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	4a06      	ldr	r2, [pc, #24]	; (800bb90 <plug_holes+0x10c>)
 800bb76:	6812      	ldr	r2, [r2, #0]
 800bb78:	1a99      	subs	r1, r3, r2
 800bb7a:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <plug_holes+0x10c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	8812      	ldrh	r2, [r2, #0]
 800bb82:	4413      	add	r3, r2
 800bb84:	b28a      	uxth	r2, r1
 800bb86:	805a      	strh	r2, [r3, #2]
  }
}
 800bb88:	bf00      	nop
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	200041b8 	.word	0x200041b8
 800bb94:	08015cb4 	.word	0x08015cb4
 800bb98:	08015ce4 	.word	0x08015ce4
 800bb9c:	08015cfc 	.word	0x08015cfc
 800bba0:	200041bc 	.word	0x200041bc
 800bba4:	08015d24 	.word	0x08015d24
 800bba8:	08015d40 	.word	0x08015d40
 800bbac:	08015d5c 	.word	0x08015d5c
 800bbb0:	200041c0 	.word	0x200041c0

0800bbb4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bbba:	4b1e      	ldr	r3, [pc, #120]	; (800bc34 <mem_init+0x80>)
 800bbbc:	3303      	adds	r3, #3
 800bbbe:	f023 0303 	bic.w	r3, r3, #3
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	4b1c      	ldr	r3, [pc, #112]	; (800bc38 <mem_init+0x84>)
 800bbc6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bbc8:	4b1b      	ldr	r3, [pc, #108]	; (800bc38 <mem_init+0x84>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bbd4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <mem_init+0x84>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800bbea:	4a14      	ldr	r2, [pc, #80]	; (800bc3c <mem_init+0x88>)
 800bbec:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bbee:	4b13      	ldr	r3, [pc, #76]	; (800bc3c <mem_init+0x88>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bbf6:	4b11      	ldr	r3, [pc, #68]	; (800bc3c <mem_init+0x88>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bbfe:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bc00:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <mem_init+0x88>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bc08:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bc0a:	4b0b      	ldr	r3, [pc, #44]	; (800bc38 <mem_init+0x84>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a0c      	ldr	r2, [pc, #48]	; (800bc40 <mem_init+0x8c>)
 800bc10:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bc12:	480c      	ldr	r0, [pc, #48]	; (800bc44 <mem_init+0x90>)
 800bc14:	f008 faac 	bl	8014170 <sys_mutex_new>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d006      	beq.n	800bc2c <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bc1e:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <mem_init+0x94>)
 800bc20:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bc24:	4909      	ldr	r1, [pc, #36]	; (800bc4c <mem_init+0x98>)
 800bc26:	480a      	ldr	r0, [pc, #40]	; (800bc50 <mem_init+0x9c>)
 800bc28:	f009 f8f6 	bl	8014e18 <iprintf>
  }
}
 800bc2c:	bf00      	nop
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	200074e0 	.word	0x200074e0
 800bc38:	200041b8 	.word	0x200041b8
 800bc3c:	200041bc 	.word	0x200041bc
 800bc40:	200041c0 	.word	0x200041c0
 800bc44:	200041c4 	.word	0x200041c4
 800bc48:	08015cb4 	.word	0x08015cb4
 800bc4c:	08015d88 	.word	0x08015d88
 800bc50:	08015cfc 	.word	0x08015cfc

0800bc54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d050      	beq.n	800bd04 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f003 0303 	and.w	r3, r3, #3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d006      	beq.n	800bc7a <mem_free+0x26>
 800bc6c:	4b27      	ldr	r3, [pc, #156]	; (800bd0c <mem_free+0xb8>)
 800bc6e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800bc72:	4927      	ldr	r1, [pc, #156]	; (800bd10 <mem_free+0xbc>)
 800bc74:	4827      	ldr	r0, [pc, #156]	; (800bd14 <mem_free+0xc0>)
 800bc76:	f009 f8cf 	bl	8014e18 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bc7a:	4b27      	ldr	r3, [pc, #156]	; (800bd18 <mem_free+0xc4>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d304      	bcc.n	800bc8e <mem_free+0x3a>
 800bc84:	4b25      	ldr	r3, [pc, #148]	; (800bd1c <mem_free+0xc8>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d306      	bcc.n	800bc9c <mem_free+0x48>
 800bc8e:	4b1f      	ldr	r3, [pc, #124]	; (800bd0c <mem_free+0xb8>)
 800bc90:	f240 12af 	movw	r2, #431	; 0x1af
 800bc94:	4922      	ldr	r1, [pc, #136]	; (800bd20 <mem_free+0xcc>)
 800bc96:	481f      	ldr	r0, [pc, #124]	; (800bd14 <mem_free+0xc0>)
 800bc98:	f009 f8be 	bl	8014e18 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bc9c:	4b1e      	ldr	r3, [pc, #120]	; (800bd18 <mem_free+0xc4>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d304      	bcc.n	800bcb0 <mem_free+0x5c>
 800bca6:	4b1d      	ldr	r3, [pc, #116]	; (800bd1c <mem_free+0xc8>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d306      	bcc.n	800bcbe <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800bcb0:	f008 fabc 	bl	801422c <sys_arch_protect>
 800bcb4:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800bcb6:	68b8      	ldr	r0, [r7, #8]
 800bcb8:	f008 fac6 	bl	8014248 <sys_arch_unprotect>
    return;
 800bcbc:	e023      	b.n	800bd06 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bcbe:	4819      	ldr	r0, [pc, #100]	; (800bd24 <mem_free+0xd0>)
 800bcc0:	f008 fa72 	bl	80141a8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3b08      	subs	r3, #8
 800bcc8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	791b      	ldrb	r3, [r3, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d106      	bne.n	800bce0 <mem_free+0x8c>
 800bcd2:	4b0e      	ldr	r3, [pc, #56]	; (800bd0c <mem_free+0xb8>)
 800bcd4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800bcd8:	4913      	ldr	r1, [pc, #76]	; (800bd28 <mem_free+0xd4>)
 800bcda:	480e      	ldr	r0, [pc, #56]	; (800bd14 <mem_free+0xc0>)
 800bcdc:	f009 f89c 	bl	8014e18 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bce6:	4b11      	ldr	r3, [pc, #68]	; (800bd2c <mem_free+0xd8>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d202      	bcs.n	800bcf6 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bcf0:	4a0e      	ldr	r2, [pc, #56]	; (800bd2c <mem_free+0xd8>)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f7ff fec4 	bl	800ba84 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bcfc:	4809      	ldr	r0, [pc, #36]	; (800bd24 <mem_free+0xd0>)
 800bcfe:	f008 fa62 	bl	80141c6 <sys_mutex_unlock>
 800bd02:	e000      	b.n	800bd06 <mem_free+0xb2>
    return;
 800bd04:	bf00      	nop
}
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	08015cb4 	.word	0x08015cb4
 800bd10:	08015da4 	.word	0x08015da4
 800bd14:	08015cfc 	.word	0x08015cfc
 800bd18:	200041b8 	.word	0x200041b8
 800bd1c:	200041bc 	.word	0x200041bc
 800bd20:	08015dc8 	.word	0x08015dc8
 800bd24:	200041c4 	.word	0x200041c4
 800bd28:	08015de0 	.word	0x08015de0
 800bd2c:	200041c0 	.word	0x200041c0

0800bd30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800bd3c:	887b      	ldrh	r3, [r7, #2]
 800bd3e:	3303      	adds	r3, #3
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	f023 0303 	bic.w	r3, r3, #3
 800bd46:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800bd48:	887b      	ldrh	r3, [r7, #2]
 800bd4a:	2b0b      	cmp	r3, #11
 800bd4c:	d801      	bhi.n	800bd52 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bd4e:	230c      	movs	r3, #12
 800bd50:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800bd52:	887b      	ldrh	r3, [r7, #2]
 800bd54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd58:	d901      	bls.n	800bd5e <mem_trim+0x2e>
    return NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	e0bd      	b.n	800beda <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bd5e:	4b61      	ldr	r3, [pc, #388]	; (800bee4 <mem_trim+0x1b4>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d304      	bcc.n	800bd72 <mem_trim+0x42>
 800bd68:	4b5f      	ldr	r3, [pc, #380]	; (800bee8 <mem_trim+0x1b8>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d306      	bcc.n	800bd80 <mem_trim+0x50>
 800bd72:	4b5e      	ldr	r3, [pc, #376]	; (800beec <mem_trim+0x1bc>)
 800bd74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bd78:	495d      	ldr	r1, [pc, #372]	; (800bef0 <mem_trim+0x1c0>)
 800bd7a:	485e      	ldr	r0, [pc, #376]	; (800bef4 <mem_trim+0x1c4>)
 800bd7c:	f009 f84c 	bl	8014e18 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bd80:	4b58      	ldr	r3, [pc, #352]	; (800bee4 <mem_trim+0x1b4>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d304      	bcc.n	800bd94 <mem_trim+0x64>
 800bd8a:	4b57      	ldr	r3, [pc, #348]	; (800bee8 <mem_trim+0x1b8>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d307      	bcc.n	800bda4 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800bd94:	f008 fa4a 	bl	801422c <sys_arch_protect>
 800bd98:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f008 fa54 	bl	8014248 <sys_arch_unprotect>
    return rmem;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	e09a      	b.n	800beda <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3b08      	subs	r3, #8
 800bda8:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	4a4d      	ldr	r2, [pc, #308]	; (800bee4 <mem_trim+0x1b4>)
 800bdae:	6812      	ldr	r2, [r2, #0]
 800bdb0:	1a9b      	subs	r3, r3, r2
 800bdb2:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	881a      	ldrh	r2, [r3, #0]
 800bdb8:	8b7b      	ldrh	r3, [r7, #26]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	3b08      	subs	r3, #8
 800bdc0:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bdc2:	887a      	ldrh	r2, [r7, #2]
 800bdc4:	8b3b      	ldrh	r3, [r7, #24]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d906      	bls.n	800bdd8 <mem_trim+0xa8>
 800bdca:	4b48      	ldr	r3, [pc, #288]	; (800beec <mem_trim+0x1bc>)
 800bdcc:	f240 2206 	movw	r2, #518	; 0x206
 800bdd0:	4949      	ldr	r1, [pc, #292]	; (800bef8 <mem_trim+0x1c8>)
 800bdd2:	4848      	ldr	r0, [pc, #288]	; (800bef4 <mem_trim+0x1c4>)
 800bdd4:	f009 f820 	bl	8014e18 <iprintf>
  if (newsize > size) {
 800bdd8:	887a      	ldrh	r2, [r7, #2]
 800bdda:	8b3b      	ldrh	r3, [r7, #24]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d901      	bls.n	800bde4 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800bde0:	2300      	movs	r3, #0
 800bde2:	e07a      	b.n	800beda <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800bde4:	887a      	ldrh	r2, [r7, #2]
 800bde6:	8b3b      	ldrh	r3, [r7, #24]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d101      	bne.n	800bdf0 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	e074      	b.n	800beda <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bdf0:	4842      	ldr	r0, [pc, #264]	; (800befc <mem_trim+0x1cc>)
 800bdf2:	f008 f9d9 	bl	80141a8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800bdf6:	4b3b      	ldr	r3, [pc, #236]	; (800bee4 <mem_trim+0x1b4>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	69fa      	ldr	r2, [r7, #28]
 800bdfc:	8812      	ldrh	r2, [r2, #0]
 800bdfe:	4413      	add	r3, r2
 800be00:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	791b      	ldrb	r3, [r3, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d131      	bne.n	800be6e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	881b      	ldrh	r3, [r3, #0]
 800be0e:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800be10:	8b7a      	ldrh	r2, [r7, #26]
 800be12:	887b      	ldrh	r3, [r7, #2]
 800be14:	4413      	add	r3, r2
 800be16:	b29b      	uxth	r3, r3
 800be18:	3308      	adds	r3, #8
 800be1a:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800be1c:	4b38      	ldr	r3, [pc, #224]	; (800bf00 <mem_trim+0x1d0>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	697a      	ldr	r2, [r7, #20]
 800be22:	429a      	cmp	r2, r3
 800be24:	d105      	bne.n	800be32 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800be26:	4b2f      	ldr	r3, [pc, #188]	; (800bee4 <mem_trim+0x1b4>)
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	8a7b      	ldrh	r3, [r7, #18]
 800be2c:	4413      	add	r3, r2
 800be2e:	4a34      	ldr	r2, [pc, #208]	; (800bf00 <mem_trim+0x1d0>)
 800be30:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800be32:	4b2c      	ldr	r3, [pc, #176]	; (800bee4 <mem_trim+0x1b4>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	8a7b      	ldrh	r3, [r7, #18]
 800be38:	4413      	add	r3, r2
 800be3a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2200      	movs	r2, #0
 800be40:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	8a3a      	ldrh	r2, [r7, #16]
 800be46:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	8b7a      	ldrh	r2, [r7, #26]
 800be4c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	8a7a      	ldrh	r2, [r7, #18]
 800be52:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	881b      	ldrh	r3, [r3, #0]
 800be58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be5c:	d039      	beq.n	800bed2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800be5e:	4b21      	ldr	r3, [pc, #132]	; (800bee4 <mem_trim+0x1b4>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	8812      	ldrh	r2, [r2, #0]
 800be66:	4413      	add	r3, r2
 800be68:	8a7a      	ldrh	r2, [r7, #18]
 800be6a:	805a      	strh	r2, [r3, #2]
 800be6c:	e031      	b.n	800bed2 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800be6e:	887b      	ldrh	r3, [r7, #2]
 800be70:	f103 0214 	add.w	r2, r3, #20
 800be74:	8b3b      	ldrh	r3, [r7, #24]
 800be76:	429a      	cmp	r2, r3
 800be78:	d82b      	bhi.n	800bed2 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800be7a:	8b7a      	ldrh	r2, [r7, #26]
 800be7c:	887b      	ldrh	r3, [r7, #2]
 800be7e:	4413      	add	r3, r2
 800be80:	b29b      	uxth	r3, r3
 800be82:	3308      	adds	r3, #8
 800be84:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800be86:	4b17      	ldr	r3, [pc, #92]	; (800bee4 <mem_trim+0x1b4>)
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	8a7b      	ldrh	r3, [r7, #18]
 800be8c:	4413      	add	r3, r2
 800be8e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800be90:	4b1b      	ldr	r3, [pc, #108]	; (800bf00 <mem_trim+0x1d0>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	429a      	cmp	r2, r3
 800be98:	d202      	bcs.n	800bea0 <mem_trim+0x170>
      lfree = mem2;
 800be9a:	4a19      	ldr	r2, [pc, #100]	; (800bf00 <mem_trim+0x1d0>)
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2200      	movs	r2, #0
 800bea4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	881a      	ldrh	r2, [r3, #0]
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	8b7a      	ldrh	r2, [r7, #26]
 800beb2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	8a7a      	ldrh	r2, [r7, #18]
 800beb8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bec2:	d006      	beq.n	800bed2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bec4:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <mem_trim+0x1b4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	8812      	ldrh	r2, [r2, #0]
 800becc:	4413      	add	r3, r2
 800bece:	8a7a      	ldrh	r2, [r7, #18]
 800bed0:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bed2:	480a      	ldr	r0, [pc, #40]	; (800befc <mem_trim+0x1cc>)
 800bed4:	f008 f977 	bl	80141c6 <sys_mutex_unlock>
  return rmem;
 800bed8:	687b      	ldr	r3, [r7, #4]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3720      	adds	r7, #32
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	200041b8 	.word	0x200041b8
 800bee8:	200041bc 	.word	0x200041bc
 800beec:	08015cb4 	.word	0x08015cb4
 800bef0:	08015df4 	.word	0x08015df4
 800bef4:	08015cfc 	.word	0x08015cfc
 800bef8:	08015e0c 	.word	0x08015e0c
 800befc:	200041c4 	.word	0x200041c4
 800bf00:	200041c0 	.word	0x200041c0

0800bf04 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800bf0e:	88fb      	ldrh	r3, [r7, #6]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <mem_malloc+0x14>
    return NULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	e0d1      	b.n	800c0bc <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800bf18:	88fb      	ldrh	r3, [r7, #6]
 800bf1a:	3303      	adds	r3, #3
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	f023 0303 	bic.w	r3, r3, #3
 800bf22:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800bf24:	88fb      	ldrh	r3, [r7, #6]
 800bf26:	2b0b      	cmp	r3, #11
 800bf28:	d801      	bhi.n	800bf2e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bf2a:	230c      	movs	r3, #12
 800bf2c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800bf2e:	88fb      	ldrh	r3, [r7, #6]
 800bf30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf34:	d901      	bls.n	800bf3a <mem_malloc+0x36>
    return NULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	e0c0      	b.n	800c0bc <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bf3a:	4862      	ldr	r0, [pc, #392]	; (800c0c4 <mem_malloc+0x1c0>)
 800bf3c:	f008 f934 	bl	80141a8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800bf40:	4b61      	ldr	r3, [pc, #388]	; (800c0c8 <mem_malloc+0x1c4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	461a      	mov	r2, r3
 800bf46:	4b61      	ldr	r3, [pc, #388]	; (800c0cc <mem_malloc+0x1c8>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	83fb      	strh	r3, [r7, #30]
 800bf4e:	e0aa      	b.n	800c0a6 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800bf50:	4b5e      	ldr	r3, [pc, #376]	; (800c0cc <mem_malloc+0x1c8>)
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	8bfb      	ldrh	r3, [r7, #30]
 800bf56:	4413      	add	r3, r2
 800bf58:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	791b      	ldrb	r3, [r3, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f040 809b 	bne.w	800c09a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	8bfb      	ldrh	r3, [r7, #30]
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	f1a3 0208 	sub.w	r2, r3, #8
 800bf72:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800bf74:	429a      	cmp	r2, r3
 800bf76:	f0c0 8090 	bcc.w	800c09a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	8bfb      	ldrh	r3, [r7, #30]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	f1a3 0208 	sub.w	r2, r3, #8
 800bf88:	88fb      	ldrh	r3, [r7, #6]
 800bf8a:	3314      	adds	r3, #20
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d327      	bcc.n	800bfe0 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800bf90:	8bfa      	ldrh	r2, [r7, #30]
 800bf92:	88fb      	ldrh	r3, [r7, #6]
 800bf94:	4413      	add	r3, r2
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	3308      	adds	r3, #8
 800bf9a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800bf9c:	4b4b      	ldr	r3, [pc, #300]	; (800c0cc <mem_malloc+0x1c8>)
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	8a7b      	ldrh	r3, [r7, #18]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	881a      	ldrh	r2, [r3, #0]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	8bfa      	ldrh	r2, [r7, #30]
 800bfb8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	8a7a      	ldrh	r2, [r7, #18]
 800bfbe:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfce:	d00a      	beq.n	800bfe6 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bfd0:	4b3e      	ldr	r3, [pc, #248]	; (800c0cc <mem_malloc+0x1c8>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	8812      	ldrh	r2, [r2, #0]
 800bfd8:	4413      	add	r3, r2
 800bfda:	8a7a      	ldrh	r2, [r7, #18]
 800bfdc:	805a      	strh	r2, [r3, #2]
 800bfde:	e002      	b.n	800bfe6 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bfe6:	4b38      	ldr	r3, [pc, #224]	; (800c0c8 <mem_malloc+0x1c4>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d127      	bne.n	800c040 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800bff0:	4b35      	ldr	r3, [pc, #212]	; (800c0c8 <mem_malloc+0x1c4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bff6:	e005      	b.n	800c004 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800bff8:	4b34      	ldr	r3, [pc, #208]	; (800c0cc <mem_malloc+0x1c8>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	69ba      	ldr	r2, [r7, #24]
 800bffe:	8812      	ldrh	r2, [r2, #0]
 800c000:	4413      	add	r3, r2
 800c002:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	791b      	ldrb	r3, [r3, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d004      	beq.n	800c016 <mem_malloc+0x112>
 800c00c:	4b30      	ldr	r3, [pc, #192]	; (800c0d0 <mem_malloc+0x1cc>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	69ba      	ldr	r2, [r7, #24]
 800c012:	429a      	cmp	r2, r3
 800c014:	d1f0      	bne.n	800bff8 <mem_malloc+0xf4>
          }
          lfree = cur;
 800c016:	4a2c      	ldr	r2, [pc, #176]	; (800c0c8 <mem_malloc+0x1c4>)
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c01c:	4b2a      	ldr	r3, [pc, #168]	; (800c0c8 <mem_malloc+0x1c4>)
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	4b2b      	ldr	r3, [pc, #172]	; (800c0d0 <mem_malloc+0x1cc>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d00b      	beq.n	800c040 <mem_malloc+0x13c>
 800c028:	4b27      	ldr	r3, [pc, #156]	; (800c0c8 <mem_malloc+0x1c4>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	791b      	ldrb	r3, [r3, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d006      	beq.n	800c040 <mem_malloc+0x13c>
 800c032:	4b28      	ldr	r3, [pc, #160]	; (800c0d4 <mem_malloc+0x1d0>)
 800c034:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c038:	4927      	ldr	r1, [pc, #156]	; (800c0d8 <mem_malloc+0x1d4>)
 800c03a:	4828      	ldr	r0, [pc, #160]	; (800c0dc <mem_malloc+0x1d8>)
 800c03c:	f008 feec 	bl	8014e18 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c040:	4820      	ldr	r0, [pc, #128]	; (800c0c4 <mem_malloc+0x1c0>)
 800c042:	f008 f8c0 	bl	80141c6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c046:	88fa      	ldrh	r2, [r7, #6]
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	4413      	add	r3, r2
 800c04c:	3308      	adds	r3, #8
 800c04e:	4a20      	ldr	r2, [pc, #128]	; (800c0d0 <mem_malloc+0x1cc>)
 800c050:	6812      	ldr	r2, [r2, #0]
 800c052:	4293      	cmp	r3, r2
 800c054:	d906      	bls.n	800c064 <mem_malloc+0x160>
 800c056:	4b1f      	ldr	r3, [pc, #124]	; (800c0d4 <mem_malloc+0x1d0>)
 800c058:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c05c:	4920      	ldr	r1, [pc, #128]	; (800c0e0 <mem_malloc+0x1dc>)
 800c05e:	481f      	ldr	r0, [pc, #124]	; (800c0dc <mem_malloc+0x1d8>)
 800c060:	f008 feda 	bl	8014e18 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f003 0303 	and.w	r3, r3, #3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d006      	beq.n	800c07c <mem_malloc+0x178>
 800c06e:	4b19      	ldr	r3, [pc, #100]	; (800c0d4 <mem_malloc+0x1d0>)
 800c070:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c074:	491b      	ldr	r1, [pc, #108]	; (800c0e4 <mem_malloc+0x1e0>)
 800c076:	4819      	ldr	r0, [pc, #100]	; (800c0dc <mem_malloc+0x1d8>)
 800c078:	f008 fece 	bl	8014e18 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f003 0303 	and.w	r3, r3, #3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d006      	beq.n	800c094 <mem_malloc+0x190>
 800c086:	4b13      	ldr	r3, [pc, #76]	; (800c0d4 <mem_malloc+0x1d0>)
 800c088:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800c08c:	4916      	ldr	r1, [pc, #88]	; (800c0e8 <mem_malloc+0x1e4>)
 800c08e:	4813      	ldr	r0, [pc, #76]	; (800c0dc <mem_malloc+0x1d8>)
 800c090:	f008 fec2 	bl	8014e18 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	3308      	adds	r3, #8
 800c098:	e010      	b.n	800c0bc <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800c09a:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <mem_malloc+0x1c8>)
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	8bfb      	ldrh	r3, [r7, #30]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c0a6:	8bfa      	ldrh	r2, [r7, #30]
 800c0a8:	88fb      	ldrh	r3, [r7, #6]
 800c0aa:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	f4ff af4e 	bcc.w	800bf50 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c0b4:	4803      	ldr	r0, [pc, #12]	; (800c0c4 <mem_malloc+0x1c0>)
 800c0b6:	f008 f886 	bl	80141c6 <sys_mutex_unlock>
  return NULL;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3720      	adds	r7, #32
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	200041c4 	.word	0x200041c4
 800c0c8:	200041c0 	.word	0x200041c0
 800c0cc:	200041b8 	.word	0x200041b8
 800c0d0:	200041bc 	.word	0x200041bc
 800c0d4:	08015cb4 	.word	0x08015cb4
 800c0d8:	08015e2c 	.word	0x08015e2c
 800c0dc:	08015cfc 	.word	0x08015cfc
 800c0e0:	08015e48 	.word	0x08015e48
 800c0e4:	08015e78 	.word	0x08015e78
 800c0e8:	08015ea8 	.word	0x08015ea8

0800c0ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	3303      	adds	r3, #3
 800c102:	f023 0303 	bic.w	r3, r3, #3
 800c106:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e011      	b.n	800c132 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	881b      	ldrh	r3, [r3, #0]
 800c124:	461a      	mov	r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	4413      	add	r3, r2
 800c12a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3301      	adds	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	885b      	ldrh	r3, [r3, #2]
 800c136:	461a      	mov	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4293      	cmp	r3, r2
 800c13c:	dbe7      	blt.n	800c10e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c13e:	bf00      	nop
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
	...

0800c14c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c152:	2300      	movs	r3, #0
 800c154:	80fb      	strh	r3, [r7, #6]
 800c156:	e009      	b.n	800c16c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c158:	88fb      	ldrh	r3, [r7, #6]
 800c15a:	4a08      	ldr	r2, [pc, #32]	; (800c17c <memp_init+0x30>)
 800c15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c160:	4618      	mov	r0, r3
 800c162:	f7ff ffc3 	bl	800c0ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c166:	88fb      	ldrh	r3, [r7, #6]
 800c168:	3301      	adds	r3, #1
 800c16a:	80fb      	strh	r3, [r7, #6]
 800c16c:	88fb      	ldrh	r3, [r7, #6]
 800c16e:	2b0b      	cmp	r3, #11
 800c170:	d9f2      	bls.n	800c158 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c172:	bf00      	nop
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	08017988 	.word	0x08017988

0800c180 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c188:	f008 f850 	bl	801422c <sys_arch_protect>
 800c18c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d015      	beq.n	800c1c8 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	6812      	ldr	r2, [r2, #0]
 800c1a4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	f003 0303 	and.w	r3, r3, #3
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d006      	beq.n	800c1be <do_memp_malloc_pool+0x3e>
 800c1b0:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <do_memp_malloc_pool+0x58>)
 800c1b2:	f240 1249 	movw	r2, #329	; 0x149
 800c1b6:	4909      	ldr	r1, [pc, #36]	; (800c1dc <do_memp_malloc_pool+0x5c>)
 800c1b8:	4809      	ldr	r0, [pc, #36]	; (800c1e0 <do_memp_malloc_pool+0x60>)
 800c1ba:	f008 fe2d 	bl	8014e18 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	f008 f842 	bl	8014248 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	e003      	b.n	800c1d0 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f008 f83d 	bl	8014248 <sys_arch_unprotect>
  return NULL;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	08015ecc 	.word	0x08015ecc
 800c1dc:	08015efc 	.word	0x08015efc
 800c1e0:	08015f20 	.word	0x08015f20

0800c1e4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c1ee:	79fb      	ldrb	r3, [r7, #7]
 800c1f0:	2b0b      	cmp	r3, #11
 800c1f2:	d908      	bls.n	800c206 <memp_malloc+0x22>
 800c1f4:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <memp_malloc+0x3c>)
 800c1f6:	f240 1287 	movw	r2, #391	; 0x187
 800c1fa:	490a      	ldr	r1, [pc, #40]	; (800c224 <memp_malloc+0x40>)
 800c1fc:	480a      	ldr	r0, [pc, #40]	; (800c228 <memp_malloc+0x44>)
 800c1fe:	f008 fe0b 	bl	8014e18 <iprintf>
 800c202:	2300      	movs	r3, #0
 800c204:	e008      	b.n	800c218 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c206:	79fb      	ldrb	r3, [r7, #7]
 800c208:	4a08      	ldr	r2, [pc, #32]	; (800c22c <memp_malloc+0x48>)
 800c20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff ffb6 	bl	800c180 <do_memp_malloc_pool>
 800c214:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c216:	68fb      	ldr	r3, [r7, #12]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	08015ecc 	.word	0x08015ecc
 800c224:	08015f5c 	.word	0x08015f5c
 800c228:	08015f20 	.word	0x08015f20
 800c22c:	08017988 	.word	0x08017988

0800c230 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	f003 0303 	and.w	r3, r3, #3
 800c240:	2b00      	cmp	r3, #0
 800c242:	d006      	beq.n	800c252 <do_memp_free_pool+0x22>
 800c244:	4b0d      	ldr	r3, [pc, #52]	; (800c27c <do_memp_free_pool+0x4c>)
 800c246:	f240 129d 	movw	r2, #413	; 0x19d
 800c24a:	490d      	ldr	r1, [pc, #52]	; (800c280 <do_memp_free_pool+0x50>)
 800c24c:	480d      	ldr	r0, [pc, #52]	; (800c284 <do_memp_free_pool+0x54>)
 800c24e:	f008 fde3 	bl	8014e18 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c256:	f007 ffe9 	bl	801422c <sys_arch_protect>
 800c25a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c26e:	68b8      	ldr	r0, [r7, #8]
 800c270:	f007 ffea 	bl	8014248 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c274:	bf00      	nop
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	08015ecc 	.word	0x08015ecc
 800c280:	08015f7c 	.word	0x08015f7c
 800c284:	08015f20 	.word	0x08015f20

0800c288 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	6039      	str	r1, [r7, #0]
 800c292:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c294:	79fb      	ldrb	r3, [r7, #7]
 800c296:	2b0b      	cmp	r3, #11
 800c298:	d907      	bls.n	800c2aa <memp_free+0x22>
 800c29a:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <memp_free+0x44>)
 800c29c:	f240 12db 	movw	r2, #475	; 0x1db
 800c2a0:	490b      	ldr	r1, [pc, #44]	; (800c2d0 <memp_free+0x48>)
 800c2a2:	480c      	ldr	r0, [pc, #48]	; (800c2d4 <memp_free+0x4c>)
 800c2a4:	f008 fdb8 	bl	8014e18 <iprintf>
 800c2a8:	e00c      	b.n	800c2c4 <memp_free+0x3c>

  if (mem == NULL) {
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d008      	beq.n	800c2c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	4a09      	ldr	r2, [pc, #36]	; (800c2d8 <memp_free+0x50>)
 800c2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7ff ffb8 	bl	800c230 <do_memp_free_pool>
 800c2c0:	e000      	b.n	800c2c4 <memp_free+0x3c>
    return;
 800c2c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	08015ecc 	.word	0x08015ecc
 800c2d0:	08015f9c 	.word	0x08015f9c
 800c2d4:	08015f20 	.word	0x08015f20
 800c2d8:	08017988 	.word	0x08017988

0800c2dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c2e0:	bf00      	nop
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
	...

0800c2ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d105      	bne.n	800c30c <netif_add+0x20>
 800c300:	4b1f      	ldr	r3, [pc, #124]	; (800c380 <netif_add+0x94>)
 800c302:	22fb      	movs	r2, #251	; 0xfb
 800c304:	491f      	ldr	r1, [pc, #124]	; (800c384 <netif_add+0x98>)
 800c306:	4820      	ldr	r0, [pc, #128]	; (800c388 <netif_add+0x9c>)
 800c308:	f008 fd86 	bl	8014e18 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2203      	movs	r2, #3
 800c32a:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	69ba      	ldr	r2, [r7, #24]
 800c332:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800c334:	4b15      	ldr	r3, [pc, #84]	; (800c38c <netif_add+0xa0>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	b2d1      	uxtb	r1, r2
 800c33c:	4a13      	ldr	r2, [pc, #76]	; (800c38c <netif_add+0xa0>)
 800c33e:	7011      	strb	r1, [r2, #0]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6a3a      	ldr	r2, [r7, #32]
 800c34a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f000 f81e 	bl	800c394 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	4798      	blx	r3
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <netif_add+0x7c>
    return NULL;
 800c364:	2300      	movs	r3, #0
 800c366:	e007      	b.n	800c378 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c368:	4b09      	ldr	r3, [pc, #36]	; (800c390 <netif_add+0xa4>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c370:	4a07      	ldr	r2, [pc, #28]	; (800c390 <netif_add+0xa4>)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800c376:	68fb      	ldr	r3, [r7, #12]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	08015fb8 	.word	0x08015fb8
 800c384:	08015fec 	.word	0x08015fec
 800c388:	08016004 	.word	0x08016004
 800c38c:	200041f8 	.word	0x200041f8
 800c390:	2000ab44 	.word	0x2000ab44

0800c394 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d003      	beq.n	800c3b0 <netif_set_addr+0x1c>
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10c      	bne.n	800c3ca <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800c3b0:	68b9      	ldr	r1, [r7, #8]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f000 f81a 	bl	800c3ec <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800c3b8:	6879      	ldr	r1, [r7, #4]
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f000 f85a 	bl	800c474 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f000 f842 	bl	800c44c <netif_set_gw>
 800c3c8:	e00b      	b.n	800c3e2 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800c3ca:	6879      	ldr	r1, [r7, #4]
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f000 f851 	bl	800c474 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 f839 	bl	800c44c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800c3da:	68b9      	ldr	r1, [r7, #8]
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 f805 	bl	800c3ec <netif_set_ipaddr>
  }
}
 800c3e2:	bf00      	nop
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d003      	beq.n	800c404 <netif_set_ipaddr+0x18>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	60fb      	str	r3, [r7, #12]
 800c402:	e002      	b.n	800c40a <netif_set_ipaddr+0x1e>
 800c404:	4b10      	ldr	r3, [pc, #64]	; (800c448 <netif_set_ipaddr+0x5c>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3304      	adds	r3, #4
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	429a      	cmp	r2, r3
 800c414:	d014      	beq.n	800c440 <netif_set_ipaddr+0x54>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	3304      	adds	r3, #4
 800c41a:	f107 020c 	add.w	r2, r7, #12
 800c41e:	4611      	mov	r1, r2
 800c420:	4618      	mov	r0, r3
 800c422:	f002 f887 	bl	800e534 <tcp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <netif_set_ipaddr+0x46>
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	e000      	b.n	800c434 <netif_set_ipaddr+0x48>
 800c432:	2300      	movs	r3, #0
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c438:	2101      	movs	r1, #1
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f861 	bl	800c502 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800c440:	bf00      	nop
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	080179f8 	.word	0x080179f8

0800c44c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <netif_set_gw+0x16>
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	e000      	b.n	800c464 <netif_set_gw+0x18>
 800c462:	2300      	movs	r3, #0
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800c468:	bf00      	nop
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d002      	beq.n	800c48a <netif_set_netmask+0x16>
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	e000      	b.n	800c48c <netif_set_netmask+0x18>
 800c48a:	2300      	movs	r3, #0
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c4a4:	4a04      	ldr	r2, [pc, #16]	; (800c4b8 <netif_set_default+0x1c>)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c4aa:	bf00      	nop
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	2000ab48 	.word	0x2000ab48

0800c4bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d113      	bne.n	800c4fa <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c4d8:	f043 0301 	orr.w	r3, r3, #1
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c4ea:	f003 0304 	and.w	r3, r3, #4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800c4f2:	2103      	movs	r1, #3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 f804 	bl	800c502 <netif_issue_reports>
    }
  }
}
 800c4fa:	bf00      	nop
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	460b      	mov	r3, r1
 800c50c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c50e:	78fb      	ldrb	r3, [r7, #3]
 800c510:	f003 0301 	and.w	r3, r3, #1
 800c514:	2b00      	cmp	r3, #0
 800c516:	d011      	beq.n	800c53c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3304      	adds	r3, #4
 800c51c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00c      	beq.n	800c53c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c528:	f003 0308 	and.w	r3, r3, #8
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d005      	beq.n	800c53c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3304      	adds	r3, #4
 800c534:	4619      	mov	r1, r3
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f006 fa6e 	bl	8012a18 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800c53c:	bf00      	nop
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	2b00      	cmp	r3, #0
 800c558:	d012      	beq.n	800c580 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c560:	f023 0301 	bic.w	r3, r3, #1
 800c564:	b2da      	uxtb	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c572:	f003 0308 	and.w	r3, r3, #8
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f005 fe12 	bl	80121a4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c58e:	f007 fe4d 	bl	801422c <sys_arch_protect>
 800c592:	6038      	str	r0, [r7, #0]
 800c594:	4b0f      	ldr	r3, [pc, #60]	; (800c5d4 <pbuf_free_ooseq+0x4c>)
 800c596:	2200      	movs	r2, #0
 800c598:	701a      	strb	r2, [r3, #0]
 800c59a:	6838      	ldr	r0, [r7, #0]
 800c59c:	f007 fe54 	bl	8014248 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c5a0:	4b0d      	ldr	r3, [pc, #52]	; (800c5d8 <pbuf_free_ooseq+0x50>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	607b      	str	r3, [r7, #4]
 800c5a6:	e00f      	b.n	800c5c8 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d008      	beq.n	800c5c2 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f001 fcf8 	bl	800dfaa <tcp_segs_free>
      pcb->ooseq = NULL;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800c5c0:	e005      	b.n	800c5ce <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	607b      	str	r3, [r7, #4]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1ec      	bne.n	800c5a8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	2000ab4c 	.word	0x2000ab4c
 800c5d8:	2000ab54 	.word	0x2000ab54

0800c5dc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c5e4:	f7ff ffd0 	bl	800c588 <pbuf_free_ooseq>
}
 800c5e8:	bf00      	nop
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c5f6:	f007 fe19 	bl	801422c <sys_arch_protect>
 800c5fa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c5fc:	4b10      	ldr	r3, [pc, #64]	; (800c640 <pbuf_pool_is_empty+0x50>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c602:	4b0f      	ldr	r3, [pc, #60]	; (800c640 <pbuf_pool_is_empty+0x50>)
 800c604:	2201      	movs	r2, #1
 800c606:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f007 fe1d 	bl	8014248 <sys_arch_unprotect>

  if (!queued) {
 800c60e:	78fb      	ldrb	r3, [r7, #3]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d110      	bne.n	800c636 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c614:	2200      	movs	r2, #0
 800c616:	2100      	movs	r1, #0
 800c618:	480a      	ldr	r0, [pc, #40]	; (800c644 <pbuf_pool_is_empty+0x54>)
 800c61a:	f7ff f963 	bl	800b8e4 <tcpip_callback_with_block>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d008      	beq.n	800c636 <pbuf_pool_is_empty+0x46>
 800c624:	f007 fe02 	bl	801422c <sys_arch_protect>
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <pbuf_pool_is_empty+0x50>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	701a      	strb	r2, [r3, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f007 fe09 	bl	8014248 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c636:	bf00      	nop
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	2000ab4c 	.word	0x2000ab4c
 800c644:	0800c5dd 	.word	0x0800c5dd

0800c648 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	71fb      	strb	r3, [r7, #7]
 800c652:	460b      	mov	r3, r1
 800c654:	80bb      	strh	r3, [r7, #4]
 800c656:	4613      	mov	r3, r2
 800c658:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800c65a:	79fb      	ldrb	r3, [r7, #7]
 800c65c:	2b04      	cmp	r3, #4
 800c65e:	d81c      	bhi.n	800c69a <pbuf_alloc+0x52>
 800c660:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <pbuf_alloc+0x20>)
 800c662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c666:	bf00      	nop
 800c668:	0800c67d 	.word	0x0800c67d
 800c66c:	0800c683 	.word	0x0800c683
 800c670:	0800c689 	.word	0x0800c689
 800c674:	0800c68f 	.word	0x0800c68f
 800c678:	0800c695 	.word	0x0800c695
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c67c:	2336      	movs	r3, #54	; 0x36
 800c67e:	82fb      	strh	r3, [r7, #22]
    break;
 800c680:	e014      	b.n	800c6ac <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c682:	2322      	movs	r3, #34	; 0x22
 800c684:	82fb      	strh	r3, [r7, #22]
    break;
 800c686:	e011      	b.n	800c6ac <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c688:	230e      	movs	r3, #14
 800c68a:	82fb      	strh	r3, [r7, #22]
    break;
 800c68c:	e00e      	b.n	800c6ac <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c68e:	2300      	movs	r3, #0
 800c690:	82fb      	strh	r3, [r7, #22]
    break;
 800c692:	e00b      	b.n	800c6ac <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	82fb      	strh	r3, [r7, #22]
    break;
 800c698:	e008      	b.n	800c6ac <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800c69a:	4ba5      	ldr	r3, [pc, #660]	; (800c930 <pbuf_alloc+0x2e8>)
 800c69c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800c6a0:	49a4      	ldr	r1, [pc, #656]	; (800c934 <pbuf_alloc+0x2ec>)
 800c6a2:	48a5      	ldr	r0, [pc, #660]	; (800c938 <pbuf_alloc+0x2f0>)
 800c6a4:	f008 fbb8 	bl	8014e18 <iprintf>
    return NULL;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	e15d      	b.n	800c968 <pbuf_alloc+0x320>
  }

  switch (type) {
 800c6ac:	79bb      	ldrb	r3, [r7, #6]
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	f200 8134 	bhi.w	800c91c <pbuf_alloc+0x2d4>
 800c6b4:	a201      	add	r2, pc, #4	; (adr r2, 800c6bc <pbuf_alloc+0x74>)
 800c6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ba:	bf00      	nop
 800c6bc:	0800c85d 	.word	0x0800c85d
 800c6c0:	0800c8e9 	.word	0x0800c8e9
 800c6c4:	0800c8e9 	.word	0x0800c8e9
 800c6c8:	0800c6cd 	.word	0x0800c6cd
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c6cc:	200b      	movs	r0, #11
 800c6ce:	f7ff fd89 	bl	800c1e4 <memp_malloc>
 800c6d2:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d103      	bne.n	800c6e2 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800c6da:	f7ff ff89 	bl	800c5f0 <pbuf_pool_is_empty>
      return NULL;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e142      	b.n	800c968 <pbuf_alloc+0x320>
    }
    p->type = type;
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	79ba      	ldrb	r2, [r7, #6]
 800c6e6:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800c6ee:	8afb      	ldrh	r3, [r7, #22]
 800c6f0:	3310      	adds	r3, #16
 800c6f2:	69fa      	ldr	r2, [r7, #28]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	3303      	adds	r3, #3
 800c6f8:	f023 0303 	bic.w	r3, r3, #3
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	f003 0303 	and.w	r3, r3, #3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d006      	beq.n	800c71c <pbuf_alloc+0xd4>
 800c70e:	4b88      	ldr	r3, [pc, #544]	; (800c930 <pbuf_alloc+0x2e8>)
 800c710:	f240 1229 	movw	r2, #297	; 0x129
 800c714:	4989      	ldr	r1, [pc, #548]	; (800c93c <pbuf_alloc+0x2f4>)
 800c716:	4888      	ldr	r0, [pc, #544]	; (800c938 <pbuf_alloc+0x2f0>)
 800c718:	f008 fb7e 	bl	8014e18 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	88ba      	ldrh	r2, [r7, #4]
 800c720:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800c722:	8afb      	ldrh	r3, [r7, #22]
 800c724:	3303      	adds	r3, #3
 800c726:	f023 0303 	bic.w	r3, r3, #3
 800c72a:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800c72e:	88bb      	ldrh	r3, [r7, #4]
 800c730:	4293      	cmp	r3, r2
 800c732:	bf28      	it	cs
 800c734:	4613      	movcs	r3, r2
 800c736:	b29a      	uxth	r2, r3
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	69fa      	ldr	r2, [r7, #28]
 800c742:	8952      	ldrh	r2, [r2, #10]
 800c744:	441a      	add	r2, r3
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d906      	bls.n	800c75e <pbuf_alloc+0x116>
 800c750:	4b77      	ldr	r3, [pc, #476]	; (800c930 <pbuf_alloc+0x2e8>)
 800c752:	f44f 7298 	mov.w	r2, #304	; 0x130
 800c756:	497a      	ldr	r1, [pc, #488]	; (800c940 <pbuf_alloc+0x2f8>)
 800c758:	4877      	ldr	r0, [pc, #476]	; (800c938 <pbuf_alloc+0x2f0>)
 800c75a:	f008 fb5d 	bl	8014e18 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c75e:	8afb      	ldrh	r3, [r7, #22]
 800c760:	3303      	adds	r3, #3
 800c762:	f023 0303 	bic.w	r3, r3, #3
 800c766:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c76a:	d106      	bne.n	800c77a <pbuf_alloc+0x132>
 800c76c:	4b70      	ldr	r3, [pc, #448]	; (800c930 <pbuf_alloc+0x2e8>)
 800c76e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c772:	4974      	ldr	r1, [pc, #464]	; (800c944 <pbuf_alloc+0x2fc>)
 800c774:	4870      	ldr	r0, [pc, #448]	; (800c938 <pbuf_alloc+0x2f0>)
 800c776:	f008 fb4f 	bl	8014e18 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	2201      	movs	r2, #1
 800c77e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800c784:	88bb      	ldrh	r3, [r7, #4]
 800c786:	69fa      	ldr	r2, [r7, #28]
 800c788:	8952      	ldrh	r2, [r2, #10]
 800c78a:	1a9b      	subs	r3, r3, r2
 800c78c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800c78e:	e061      	b.n	800c854 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c790:	200b      	movs	r0, #11
 800c792:	f7ff fd27 	bl	800c1e4 <memp_malloc>
 800c796:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d106      	bne.n	800c7ac <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800c79e:	f7ff ff27 	bl	800c5f0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800c7a2:	69f8      	ldr	r0, [r7, #28]
 800c7a4:	f000 fac2 	bl	800cd2c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e0dd      	b.n	800c968 <pbuf_alloc+0x320>
      }
      q->type = type;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	79ba      	ldrb	r2, [r7, #6]
 800c7b0:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	dd06      	ble.n	800c7dc <pbuf_alloc+0x194>
 800c7ce:	4b58      	ldr	r3, [pc, #352]	; (800c930 <pbuf_alloc+0x2e8>)
 800c7d0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800c7d4:	495c      	ldr	r1, [pc, #368]	; (800c948 <pbuf_alloc+0x300>)
 800c7d6:	4858      	ldr	r0, [pc, #352]	; (800c938 <pbuf_alloc+0x2f0>)
 800c7d8:	f008 fb1e 	bl	8014e18 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c7ec:	bf28      	it	cs
 800c7ee:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f103 0210 	add.w	r2, r3, #16
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	f003 0303 	and.w	r3, r3, #3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d006      	beq.n	800c81c <pbuf_alloc+0x1d4>
 800c80e:	4b48      	ldr	r3, [pc, #288]	; (800c930 <pbuf_alloc+0x2e8>)
 800c810:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800c814:	494d      	ldr	r1, [pc, #308]	; (800c94c <pbuf_alloc+0x304>)
 800c816:	4848      	ldr	r0, [pc, #288]	; (800c938 <pbuf_alloc+0x2f0>)
 800c818:	f008 fafe 	bl	8014e18 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	8952      	ldrh	r2, [r2, #10]
 800c824:	441a      	add	r2, r3
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d906      	bls.n	800c83e <pbuf_alloc+0x1f6>
 800c830:	4b3f      	ldr	r3, [pc, #252]	; (800c930 <pbuf_alloc+0x2e8>)
 800c832:	f240 1255 	movw	r2, #341	; 0x155
 800c836:	4942      	ldr	r1, [pc, #264]	; (800c940 <pbuf_alloc+0x2f8>)
 800c838:	483f      	ldr	r0, [pc, #252]	; (800c938 <pbuf_alloc+0x2f0>)
 800c83a:	f008 faed 	bl	8014e18 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2201      	movs	r2, #1
 800c842:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	895b      	ldrh	r3, [r3, #10]
 800c848:	461a      	mov	r2, r3
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	1a9b      	subs	r3, r3, r2
 800c84e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	2b00      	cmp	r3, #0
 800c858:	dc9a      	bgt.n	800c790 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800c85a:	e07e      	b.n	800c95a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800c85c:	8afb      	ldrh	r3, [r7, #22]
 800c85e:	3313      	adds	r3, #19
 800c860:	b29b      	uxth	r3, r3
 800c862:	f023 0303 	bic.w	r3, r3, #3
 800c866:	b29a      	uxth	r2, r3
 800c868:	88bb      	ldrh	r3, [r7, #4]
 800c86a:	3303      	adds	r3, #3
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	f023 0303 	bic.w	r3, r3, #3
 800c872:	b29b      	uxth	r3, r3
 800c874:	4413      	add	r3, r2
 800c876:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800c878:	897a      	ldrh	r2, [r7, #10]
 800c87a:	88bb      	ldrh	r3, [r7, #4]
 800c87c:	3303      	adds	r3, #3
 800c87e:	f023 0303 	bic.w	r3, r3, #3
 800c882:	429a      	cmp	r2, r3
 800c884:	d201      	bcs.n	800c88a <pbuf_alloc+0x242>
        return NULL;
 800c886:	2300      	movs	r3, #0
 800c888:	e06e      	b.n	800c968 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800c88a:	897b      	ldrh	r3, [r7, #10]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff fb39 	bl	800bf04 <mem_malloc>
 800c892:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <pbuf_alloc+0x256>
      return NULL;
 800c89a:	2300      	movs	r3, #0
 800c89c:	e064      	b.n	800c968 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800c89e:	8afb      	ldrh	r3, [r7, #22]
 800c8a0:	3310      	adds	r3, #16
 800c8a2:	69fa      	ldr	r2, [r7, #28]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	3303      	adds	r3, #3
 800c8a8:	f023 0303 	bic.w	r3, r3, #3
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	88ba      	ldrh	r2, [r7, #4]
 800c8b6:	811a      	strh	r2, [r3, #8]
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	891a      	ldrh	r2, [r3, #8]
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	79ba      	ldrb	r2, [r7, #6]
 800c8ca:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	f003 0303 	and.w	r3, r3, #3
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d03f      	beq.n	800c958 <pbuf_alloc+0x310>
 800c8d8:	4b15      	ldr	r3, [pc, #84]	; (800c930 <pbuf_alloc+0x2e8>)
 800c8da:	f240 1277 	movw	r2, #375	; 0x177
 800c8de:	491c      	ldr	r1, [pc, #112]	; (800c950 <pbuf_alloc+0x308>)
 800c8e0:	4815      	ldr	r0, [pc, #84]	; (800c938 <pbuf_alloc+0x2f0>)
 800c8e2:	f008 fa99 	bl	8014e18 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800c8e6:	e037      	b.n	800c958 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c8e8:	200a      	movs	r0, #10
 800c8ea:	f7ff fc7b 	bl	800c1e4 <memp_malloc>
 800c8ee:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e036      	b.n	800c968 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	88ba      	ldrh	r2, [r7, #4]
 800c904:	811a      	strh	r2, [r3, #8]
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	891a      	ldrh	r2, [r3, #8]
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	2200      	movs	r2, #0
 800c912:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	79ba      	ldrb	r2, [r7, #6]
 800c918:	731a      	strb	r2, [r3, #12]
    break;
 800c91a:	e01e      	b.n	800c95a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c91c:	4b04      	ldr	r3, [pc, #16]	; (800c930 <pbuf_alloc+0x2e8>)
 800c91e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800c922:	490c      	ldr	r1, [pc, #48]	; (800c954 <pbuf_alloc+0x30c>)
 800c924:	4804      	ldr	r0, [pc, #16]	; (800c938 <pbuf_alloc+0x2f0>)
 800c926:	f008 fa77 	bl	8014e18 <iprintf>
    return NULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	e01c      	b.n	800c968 <pbuf_alloc+0x320>
 800c92e:	bf00      	nop
 800c930:	0801602c 	.word	0x0801602c
 800c934:	0801605c 	.word	0x0801605c
 800c938:	08016078 	.word	0x08016078
 800c93c:	080160a0 	.word	0x080160a0
 800c940:	080160d0 	.word	0x080160d0
 800c944:	08016104 	.word	0x08016104
 800c948:	08016138 	.word	0x08016138
 800c94c:	0801614c 	.word	0x0801614c
 800c950:	0801617c 	.word	0x0801617c
 800c954:	080161a8 	.word	0x080161a8
    break;
 800c958:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	2201      	movs	r2, #1
 800c95e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	2200      	movs	r2, #0
 800c964:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c966:	69fb      	ldr	r3, [r7, #28]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3720      	adds	r7, #32
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	603b      	str	r3, [r7, #0]
 800c978:	4603      	mov	r3, r0
 800c97a:	71fb      	strb	r3, [r7, #7]
 800c97c:	460b      	mov	r3, r1
 800c97e:	80bb      	strh	r3, [r7, #4]
 800c980:	4613      	mov	r3, r2
 800c982:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	2b04      	cmp	r3, #4
 800c988:	d81b      	bhi.n	800c9c2 <pbuf_alloced_custom+0x52>
 800c98a:	a201      	add	r2, pc, #4	; (adr r2, 800c990 <pbuf_alloced_custom+0x20>)
 800c98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c990:	0800c9a5 	.word	0x0800c9a5
 800c994:	0800c9ab 	.word	0x0800c9ab
 800c998:	0800c9b1 	.word	0x0800c9b1
 800c99c:	0800c9b7 	.word	0x0800c9b7
 800c9a0:	0800c9bd 	.word	0x0800c9bd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c9a4:	2336      	movs	r3, #54	; 0x36
 800c9a6:	81fb      	strh	r3, [r7, #14]
    break;
 800c9a8:	e014      	b.n	800c9d4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c9aa:	2322      	movs	r3, #34	; 0x22
 800c9ac:	81fb      	strh	r3, [r7, #14]
    break;
 800c9ae:	e011      	b.n	800c9d4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c9b0:	230e      	movs	r3, #14
 800c9b2:	81fb      	strh	r3, [r7, #14]
    break;
 800c9b4:	e00e      	b.n	800c9d4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	81fb      	strh	r3, [r7, #14]
    break;
 800c9ba:	e00b      	b.n	800c9d4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	81fb      	strh	r3, [r7, #14]
    break;
 800c9c0:	e008      	b.n	800c9d4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800c9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ca38 <pbuf_alloced_custom+0xc8>)
 800c9c4:	f240 12c5 	movw	r2, #453	; 0x1c5
 800c9c8:	491c      	ldr	r1, [pc, #112]	; (800ca3c <pbuf_alloced_custom+0xcc>)
 800c9ca:	481d      	ldr	r0, [pc, #116]	; (800ca40 <pbuf_alloced_custom+0xd0>)
 800c9cc:	f008 fa24 	bl	8014e18 <iprintf>
    return NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e02d      	b.n	800ca30 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c9d4:	89fb      	ldrh	r3, [r7, #14]
 800c9d6:	3303      	adds	r3, #3
 800c9d8:	f023 0203 	bic.w	r2, r3, #3
 800c9dc:	88bb      	ldrh	r3, [r7, #4]
 800c9de:	441a      	add	r2, r3
 800c9e0:	8bbb      	ldrh	r3, [r7, #28]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d901      	bls.n	800c9ea <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e022      	b.n	800ca30 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d008      	beq.n	800ca08 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c9f6:	89fb      	ldrh	r3, [r7, #14]
 800c9f8:	3303      	adds	r3, #3
 800c9fa:	f023 0303 	bic.w	r3, r3, #3
 800c9fe:	69ba      	ldr	r2, [r7, #24]
 800ca00:	441a      	add	r2, r3
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	605a      	str	r2, [r3, #4]
 800ca06:	e002      	b.n	800ca0e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2202      	movs	r2, #2
 800ca12:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	88ba      	ldrh	r2, [r7, #4]
 800ca18:	811a      	strh	r2, [r3, #8]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	891a      	ldrh	r2, [r3, #8]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	79ba      	ldrb	r2, [r7, #6]
 800ca26:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800ca2e:	683b      	ldr	r3, [r7, #0]
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3710      	adds	r7, #16
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	0801602c 	.word	0x0801602c
 800ca3c:	080161c4 	.word	0x080161c4
 800ca40:	08016078 	.word	0x08016078

0800ca44 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <pbuf_realloc+0x20>
 800ca56:	4b4b      	ldr	r3, [pc, #300]	; (800cb84 <pbuf_realloc+0x140>)
 800ca58:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ca5c:	494a      	ldr	r1, [pc, #296]	; (800cb88 <pbuf_realloc+0x144>)
 800ca5e:	484b      	ldr	r0, [pc, #300]	; (800cb8c <pbuf_realloc+0x148>)
 800ca60:	f008 f9da 	bl	8014e18 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	7b1b      	ldrb	r3, [r3, #12]
 800ca68:	2b03      	cmp	r3, #3
 800ca6a:	d012      	beq.n	800ca92 <pbuf_realloc+0x4e>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7b1b      	ldrb	r3, [r3, #12]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d00e      	beq.n	800ca92 <pbuf_realloc+0x4e>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7b1b      	ldrb	r3, [r3, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00a      	beq.n	800ca92 <pbuf_realloc+0x4e>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	7b1b      	ldrb	r3, [r3, #12]
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d006      	beq.n	800ca92 <pbuf_realloc+0x4e>
 800ca84:	4b3f      	ldr	r3, [pc, #252]	; (800cb84 <pbuf_realloc+0x140>)
 800ca86:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ca8a:	4941      	ldr	r1, [pc, #260]	; (800cb90 <pbuf_realloc+0x14c>)
 800ca8c:	483f      	ldr	r0, [pc, #252]	; (800cb8c <pbuf_realloc+0x148>)
 800ca8e:	f008 f9c3 	bl	8014e18 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	891b      	ldrh	r3, [r3, #8]
 800ca96:	887a      	ldrh	r2, [r7, #2]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d26f      	bcs.n	800cb7c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800ca9c:	887b      	ldrh	r3, [r7, #2]
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	8912      	ldrh	r2, [r2, #8]
 800caa2:	1a9b      	subs	r3, r3, r2
 800caa4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800caa6:	887b      	ldrh	r3, [r7, #2]
 800caa8:	827b      	strh	r3, [r7, #18]
  q = p;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800caae:	e025      	b.n	800cafc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	895b      	ldrh	r3, [r3, #10]
 800cab4:	8a7a      	ldrh	r2, [r7, #18]
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cac0:	4293      	cmp	r3, r2
 800cac2:	dd06      	ble.n	800cad2 <pbuf_realloc+0x8e>
 800cac4:	4b2f      	ldr	r3, [pc, #188]	; (800cb84 <pbuf_realloc+0x140>)
 800cac6:	f240 220b 	movw	r2, #523	; 0x20b
 800caca:	4932      	ldr	r1, [pc, #200]	; (800cb94 <pbuf_realloc+0x150>)
 800cacc:	482f      	ldr	r0, [pc, #188]	; (800cb8c <pbuf_realloc+0x148>)
 800cace:	f008 f9a3 	bl	8014e18 <iprintf>
    q->tot_len += (u16_t)grow;
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	891a      	ldrh	r2, [r3, #8]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	b29b      	uxth	r3, r3
 800cada:	4413      	add	r3, r2
 800cadc:	b29a      	uxth	r2, r3
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d106      	bne.n	800cafc <pbuf_realloc+0xb8>
 800caee:	4b25      	ldr	r3, [pc, #148]	; (800cb84 <pbuf_realloc+0x140>)
 800caf0:	f240 220f 	movw	r2, #527	; 0x20f
 800caf4:	4928      	ldr	r1, [pc, #160]	; (800cb98 <pbuf_realloc+0x154>)
 800caf6:	4825      	ldr	r0, [pc, #148]	; (800cb8c <pbuf_realloc+0x148>)
 800caf8:	f008 f98e 	bl	8014e18 <iprintf>
  while (rem_len > q->len) {
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	895b      	ldrh	r3, [r3, #10]
 800cb00:	8a7a      	ldrh	r2, [r7, #18]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d8d4      	bhi.n	800cab0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	7b1b      	ldrb	r3, [r3, #12]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d122      	bne.n	800cb54 <pbuf_realloc+0x110>
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	895b      	ldrh	r3, [r3, #10]
 800cb12:	8a7a      	ldrh	r2, [r7, #18]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d01d      	beq.n	800cb54 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	7b5b      	ldrb	r3, [r3, #13]
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d117      	bne.n	800cb54 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	8a7b      	ldrh	r3, [r7, #18]
 800cb32:	4413      	add	r3, r2
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	4619      	mov	r1, r3
 800cb38:	6978      	ldr	r0, [r7, #20]
 800cb3a:	f7ff f8f9 	bl	800bd30 <mem_trim>
 800cb3e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d106      	bne.n	800cb54 <pbuf_realloc+0x110>
 800cb46:	4b0f      	ldr	r3, [pc, #60]	; (800cb84 <pbuf_realloc+0x140>)
 800cb48:	f240 221d 	movw	r2, #541	; 0x21d
 800cb4c:	4913      	ldr	r1, [pc, #76]	; (800cb9c <pbuf_realloc+0x158>)
 800cb4e:	480f      	ldr	r0, [pc, #60]	; (800cb8c <pbuf_realloc+0x148>)
 800cb50:	f008 f962 	bl	8014e18 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	8a7a      	ldrh	r2, [r7, #18]
 800cb58:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	895a      	ldrh	r2, [r3, #10]
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d004      	beq.n	800cb74 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 f8dc 	bl	800cd2c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	2200      	movs	r2, #0
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	e000      	b.n	800cb7e <pbuf_realloc+0x13a>
    return;
 800cb7c:	bf00      	nop

}
 800cb7e:	3718      	adds	r7, #24
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	0801602c 	.word	0x0801602c
 800cb88:	080161e8 	.word	0x080161e8
 800cb8c:	08016078 	.word	0x08016078
 800cb90:	08016200 	.word	0x08016200
 800cb94:	0801621c 	.word	0x0801621c
 800cb98:	08016230 	.word	0x08016230
 800cb9c:	08016248 	.word	0x08016248

0800cba0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	807b      	strh	r3, [r7, #2]
 800cbac:	4613      	mov	r3, r2
 800cbae:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d106      	bne.n	800cbc4 <pbuf_header_impl+0x24>
 800cbb6:	4b46      	ldr	r3, [pc, #280]	; (800ccd0 <pbuf_header_impl+0x130>)
 800cbb8:	f240 223f 	movw	r2, #575	; 0x23f
 800cbbc:	4945      	ldr	r1, [pc, #276]	; (800ccd4 <pbuf_header_impl+0x134>)
 800cbbe:	4846      	ldr	r0, [pc, #280]	; (800ccd8 <pbuf_header_impl+0x138>)
 800cbc0:	f008 f92a 	bl	8014e18 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800cbc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <pbuf_header_impl+0x32>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <pbuf_header_impl+0x36>
    return 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e078      	b.n	800ccc8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800cbd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	da10      	bge.n	800cc00 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800cbde:	887b      	ldrh	r3, [r7, #2]
 800cbe0:	425b      	negs	r3, r3
 800cbe2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	895b      	ldrh	r3, [r3, #10]
 800cbe8:	89fa      	ldrh	r2, [r7, #14]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d90a      	bls.n	800cc04 <pbuf_header_impl+0x64>
 800cbee:	4b38      	ldr	r3, [pc, #224]	; (800ccd0 <pbuf_header_impl+0x130>)
 800cbf0:	f240 2247 	movw	r2, #583	; 0x247
 800cbf4:	4939      	ldr	r1, [pc, #228]	; (800ccdc <pbuf_header_impl+0x13c>)
 800cbf6:	4838      	ldr	r0, [pc, #224]	; (800ccd8 <pbuf_header_impl+0x138>)
 800cbf8:	f008 f90e 	bl	8014e18 <iprintf>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e063      	b.n	800ccc8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800cc00:	887b      	ldrh	r3, [r7, #2]
 800cc02:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	7b1b      	ldrb	r3, [r3, #12]
 800cc08:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800cc10:	89bb      	ldrh	r3, [r7, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <pbuf_header_impl+0x7c>
 800cc16:	89bb      	ldrh	r3, [r7, #12]
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	d112      	bne.n	800cc42 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	685a      	ldr	r2, [r3, #4]
 800cc20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc24:	425b      	negs	r3, r3
 800cc26:	441a      	add	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685a      	ldr	r2, [r3, #4]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	3310      	adds	r3, #16
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d238      	bcs.n	800ccaa <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	68ba      	ldr	r2, [r7, #8]
 800cc3c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e042      	b.n	800ccc8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800cc42:	89bb      	ldrh	r3, [r7, #12]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d002      	beq.n	800cc4e <pbuf_header_impl+0xae>
 800cc48:	89bb      	ldrh	r3, [r7, #12]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d124      	bne.n	800cc98 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800cc4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	da0d      	bge.n	800cc72 <pbuf_header_impl+0xd2>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	895b      	ldrh	r3, [r3, #10]
 800cc5a:	89fa      	ldrh	r2, [r7, #14]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d808      	bhi.n	800cc72 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	685a      	ldr	r2, [r3, #4]
 800cc64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc68:	425b      	negs	r3, r3
 800cc6a:	441a      	add	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	605a      	str	r2, [r3, #4]
 800cc70:	e011      	b.n	800cc96 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800cc72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	dd0b      	ble.n	800cc92 <pbuf_header_impl+0xf2>
 800cc7a:	787b      	ldrb	r3, [r7, #1]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d008      	beq.n	800cc92 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc88:	425b      	negs	r3, r3
 800cc8a:	441a      	add	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	605a      	str	r2, [r3, #4]
 800cc90:	e001      	b.n	800cc96 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e018      	b.n	800ccc8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800cc96:	e008      	b.n	800ccaa <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800cc98:	4b0d      	ldr	r3, [pc, #52]	; (800ccd0 <pbuf_header_impl+0x130>)
 800cc9a:	f240 2277 	movw	r2, #631	; 0x277
 800cc9e:	4910      	ldr	r1, [pc, #64]	; (800cce0 <pbuf_header_impl+0x140>)
 800cca0:	480d      	ldr	r0, [pc, #52]	; (800ccd8 <pbuf_header_impl+0x138>)
 800cca2:	f008 f8b9 	bl	8014e18 <iprintf>
    return 1;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e00e      	b.n	800ccc8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	895a      	ldrh	r2, [r3, #10]
 800ccae:	887b      	ldrh	r3, [r7, #2]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	891a      	ldrh	r2, [r3, #8]
 800ccbc:	887b      	ldrh	r3, [r7, #2]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800ccc6:	2300      	movs	r3, #0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	0801602c 	.word	0x0801602c
 800ccd4:	08016264 	.word	0x08016264
 800ccd8:	08016078 	.word	0x08016078
 800ccdc:	08016270 	.word	0x08016270
 800cce0:	08016290 	.word	0x08016290

0800cce4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	460b      	mov	r3, r1
 800ccee:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800ccf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff ff51 	bl	800cba0 <pbuf_header_impl>
 800ccfe:	4603      	mov	r3, r0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	460b      	mov	r3, r1
 800cd12:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800cd14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7ff ff3f 	bl	800cba0 <pbuf_header_impl>
 800cd22:	4603      	mov	r3, r0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10b      	bne.n	800cd52 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <pbuf_free+0x22>
 800cd40:	4b41      	ldr	r3, [pc, #260]	; (800ce48 <pbuf_free+0x11c>)
 800cd42:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cd46:	4941      	ldr	r1, [pc, #260]	; (800ce4c <pbuf_free+0x120>)
 800cd48:	4841      	ldr	r0, [pc, #260]	; (800ce50 <pbuf_free+0x124>)
 800cd4a:	f008 f865 	bl	8014e18 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	e076      	b.n	800ce40 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7b1b      	ldrb	r3, [r3, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d012      	beq.n	800cd80 <pbuf_free+0x54>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	7b1b      	ldrb	r3, [r3, #12]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d00e      	beq.n	800cd80 <pbuf_free+0x54>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7b1b      	ldrb	r3, [r3, #12]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d00a      	beq.n	800cd80 <pbuf_free+0x54>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7b1b      	ldrb	r3, [r3, #12]
 800cd6e:	2b03      	cmp	r3, #3
 800cd70:	d006      	beq.n	800cd80 <pbuf_free+0x54>
 800cd72:	4b35      	ldr	r3, [pc, #212]	; (800ce48 <pbuf_free+0x11c>)
 800cd74:	f240 22de 	movw	r2, #734	; 0x2de
 800cd78:	4936      	ldr	r1, [pc, #216]	; (800ce54 <pbuf_free+0x128>)
 800cd7a:	4835      	ldr	r0, [pc, #212]	; (800ce50 <pbuf_free+0x124>)
 800cd7c:	f008 f84c 	bl	8014e18 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cd84:	e058      	b.n	800ce38 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cd86:	f007 fa51 	bl	801422c <sys_arch_protect>
 800cd8a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	89db      	ldrh	r3, [r3, #14]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d106      	bne.n	800cda2 <pbuf_free+0x76>
 800cd94:	4b2c      	ldr	r3, [pc, #176]	; (800ce48 <pbuf_free+0x11c>)
 800cd96:	f240 22eb 	movw	r2, #747	; 0x2eb
 800cd9a:	492f      	ldr	r1, [pc, #188]	; (800ce58 <pbuf_free+0x12c>)
 800cd9c:	482c      	ldr	r0, [pc, #176]	; (800ce50 <pbuf_free+0x124>)
 800cd9e:	f008 f83b 	bl	8014e18 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	89db      	ldrh	r3, [r3, #14]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	81da      	strh	r2, [r3, #14]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	89db      	ldrh	r3, [r3, #14]
 800cdb2:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800cdb4:	69b8      	ldr	r0, [r7, #24]
 800cdb6:	f007 fa47 	bl	8014248 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cdba:	8afb      	ldrh	r3, [r7, #22]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d139      	bne.n	800ce34 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7b1b      	ldrb	r3, [r3, #12]
 800cdca:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	7b5b      	ldrb	r3, [r3, #13]
 800cdd0:	f003 0302 	and.w	r3, r3, #2
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d011      	beq.n	800cdfc <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d106      	bne.n	800cdf2 <pbuf_free+0xc6>
 800cde4:	4b18      	ldr	r3, [pc, #96]	; (800ce48 <pbuf_free+0x11c>)
 800cde6:	f240 22f9 	movw	r2, #761	; 0x2f9
 800cdea:	491c      	ldr	r1, [pc, #112]	; (800ce5c <pbuf_free+0x130>)
 800cdec:	4818      	ldr	r0, [pc, #96]	; (800ce50 <pbuf_free+0x124>)
 800cdee:	f008 f813 	bl	8014e18 <iprintf>
        pc->custom_free_function(p);
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	4798      	blx	r3
 800cdfa:	e015      	b.n	800ce28 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800cdfc:	89fb      	ldrh	r3, [r7, #14]
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d104      	bne.n	800ce0c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	200b      	movs	r0, #11
 800ce06:	f7ff fa3f 	bl	800c288 <memp_free>
 800ce0a:	e00d      	b.n	800ce28 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800ce0c:	89fb      	ldrh	r3, [r7, #14]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d002      	beq.n	800ce18 <pbuf_free+0xec>
 800ce12:	89fb      	ldrh	r3, [r7, #14]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d104      	bne.n	800ce22 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	200a      	movs	r0, #10
 800ce1c:	f7ff fa34 	bl	800c288 <memp_free>
 800ce20:	e002      	b.n	800ce28 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7fe ff16 	bl	800bc54 <mem_free>
        }
      }
      count++;
 800ce28:	7ffb      	ldrb	r3, [r7, #31]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	607b      	str	r3, [r7, #4]
 800ce32:	e001      	b.n	800ce38 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800ce34:	2300      	movs	r3, #0
 800ce36:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1a3      	bne.n	800cd86 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ce3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3720      	adds	r7, #32
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	0801602c 	.word	0x0801602c
 800ce4c:	08016264 	.word	0x08016264
 800ce50:	08016078 	.word	0x08016078
 800ce54:	080162a0 	.word	0x080162a0
 800ce58:	080162b8 	.word	0x080162b8
 800ce5c:	080162d0 	.word	0x080162d0

0800ce60 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ce6c:	e005      	b.n	800ce7a <pbuf_clen+0x1a>
    ++len;
 800ce6e:	89fb      	ldrh	r3, [r7, #14]
 800ce70:	3301      	adds	r3, #1
 800ce72:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f6      	bne.n	800ce6e <pbuf_clen+0xe>
  }
  return len;
 800ce80:	89fb      	ldrh	r3, [r7, #14]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
	...

0800ce90 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d016      	beq.n	800cecc <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800ce9e:	f007 f9c5 	bl	801422c <sys_arch_protect>
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	89db      	ldrh	r3, [r3, #14]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	81da      	strh	r2, [r3, #14]
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f007 f9c9 	bl	8014248 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	89db      	ldrh	r3, [r3, #14]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d106      	bne.n	800cecc <pbuf_ref+0x3c>
 800cebe:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <pbuf_ref+0x44>)
 800cec0:	f240 3239 	movw	r2, #825	; 0x339
 800cec4:	4904      	ldr	r1, [pc, #16]	; (800ced8 <pbuf_ref+0x48>)
 800cec6:	4805      	ldr	r0, [pc, #20]	; (800cedc <pbuf_ref+0x4c>)
 800cec8:	f007 ffa6 	bl	8014e18 <iprintf>
  }
}
 800cecc:	bf00      	nop
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	0801602c 	.word	0x0801602c
 800ced8:	080162f4 	.word	0x080162f4
 800cedc:	08016078 	.word	0x08016078

0800cee0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <pbuf_cat+0x16>
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d107      	bne.n	800cf06 <pbuf_cat+0x26>
 800cef6:	4b20      	ldr	r3, [pc, #128]	; (800cf78 <pbuf_cat+0x98>)
 800cef8:	f240 324d 	movw	r2, #845	; 0x34d
 800cefc:	491f      	ldr	r1, [pc, #124]	; (800cf7c <pbuf_cat+0x9c>)
 800cefe:	4820      	ldr	r0, [pc, #128]	; (800cf80 <pbuf_cat+0xa0>)
 800cf00:	f007 ff8a 	bl	8014e18 <iprintf>
 800cf04:	e034      	b.n	800cf70 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	60fb      	str	r3, [r7, #12]
 800cf0a:	e00a      	b.n	800cf22 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	891a      	ldrh	r2, [r3, #8]
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	891b      	ldrh	r3, [r3, #8]
 800cf14:	4413      	add	r3, r2
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	60fb      	str	r3, [r7, #12]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1f0      	bne.n	800cf0c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	891a      	ldrh	r2, [r3, #8]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	895b      	ldrh	r3, [r3, #10]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d006      	beq.n	800cf44 <pbuf_cat+0x64>
 800cf36:	4b10      	ldr	r3, [pc, #64]	; (800cf78 <pbuf_cat+0x98>)
 800cf38:	f240 3255 	movw	r2, #853	; 0x355
 800cf3c:	4911      	ldr	r1, [pc, #68]	; (800cf84 <pbuf_cat+0xa4>)
 800cf3e:	4810      	ldr	r0, [pc, #64]	; (800cf80 <pbuf_cat+0xa0>)
 800cf40:	f007 ff6a 	bl	8014e18 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d006      	beq.n	800cf5a <pbuf_cat+0x7a>
 800cf4c:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <pbuf_cat+0x98>)
 800cf4e:	f240 3256 	movw	r2, #854	; 0x356
 800cf52:	490d      	ldr	r1, [pc, #52]	; (800cf88 <pbuf_cat+0xa8>)
 800cf54:	480a      	ldr	r0, [pc, #40]	; (800cf80 <pbuf_cat+0xa0>)
 800cf56:	f007 ff5f 	bl	8014e18 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	891a      	ldrh	r2, [r3, #8]
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	891b      	ldrh	r3, [r3, #8]
 800cf62:	4413      	add	r3, r2
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	683a      	ldr	r2, [r7, #0]
 800cf6e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	0801602c 	.word	0x0801602c
 800cf7c:	08016308 	.word	0x08016308
 800cf80:	08016078 	.word	0x08016078
 800cf84:	08016340 	.word	0x08016340
 800cf88:	08016370 	.word	0x08016370

0800cf8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800cf96:	2300      	movs	r3, #0
 800cf98:	81fb      	strh	r3, [r7, #14]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d008      	beq.n	800cfb6 <pbuf_copy+0x2a>
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d005      	beq.n	800cfb6 <pbuf_copy+0x2a>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	891a      	ldrh	r2, [r3, #8]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	891b      	ldrh	r3, [r3, #8]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d209      	bcs.n	800cfca <pbuf_copy+0x3e>
 800cfb6:	4b54      	ldr	r3, [pc, #336]	; (800d108 <pbuf_copy+0x17c>)
 800cfb8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cfbc:	4953      	ldr	r1, [pc, #332]	; (800d10c <pbuf_copy+0x180>)
 800cfbe:	4854      	ldr	r0, [pc, #336]	; (800d110 <pbuf_copy+0x184>)
 800cfc0:	f007 ff2a 	bl	8014e18 <iprintf>
 800cfc4:	f06f 030f 	mvn.w	r3, #15
 800cfc8:	e099      	b.n	800d0fe <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	895b      	ldrh	r3, [r3, #10]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	89fb      	ldrh	r3, [r7, #14]
 800cfd2:	1ad2      	subs	r2, r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	895b      	ldrh	r3, [r3, #10]
 800cfd8:	4619      	mov	r1, r3
 800cfda:	89bb      	ldrh	r3, [r7, #12]
 800cfdc:	1acb      	subs	r3, r1, r3
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	db05      	blt.n	800cfee <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	895a      	ldrh	r2, [r3, #10]
 800cfe6:	89bb      	ldrh	r3, [r7, #12]
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	817b      	strh	r3, [r7, #10]
 800cfec:	e004      	b.n	800cff8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	895a      	ldrh	r2, [r3, #10]
 800cff2:	89fb      	ldrh	r3, [r7, #14]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	89fb      	ldrh	r3, [r7, #14]
 800cffe:	18d0      	adds	r0, r2, r3
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	685a      	ldr	r2, [r3, #4]
 800d004:	89bb      	ldrh	r3, [r7, #12]
 800d006:	4413      	add	r3, r2
 800d008:	897a      	ldrh	r2, [r7, #10]
 800d00a:	4619      	mov	r1, r3
 800d00c:	f007 fe49 	bl	8014ca2 <memcpy>
    offset_to += len;
 800d010:	89fa      	ldrh	r2, [r7, #14]
 800d012:	897b      	ldrh	r3, [r7, #10]
 800d014:	4413      	add	r3, r2
 800d016:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800d018:	89ba      	ldrh	r2, [r7, #12]
 800d01a:	897b      	ldrh	r3, [r7, #10]
 800d01c:	4413      	add	r3, r2
 800d01e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	895b      	ldrh	r3, [r3, #10]
 800d024:	89fa      	ldrh	r2, [r7, #14]
 800d026:	429a      	cmp	r2, r3
 800d028:	d906      	bls.n	800d038 <pbuf_copy+0xac>
 800d02a:	4b37      	ldr	r3, [pc, #220]	; (800d108 <pbuf_copy+0x17c>)
 800d02c:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d030:	4938      	ldr	r1, [pc, #224]	; (800d114 <pbuf_copy+0x188>)
 800d032:	4837      	ldr	r0, [pc, #220]	; (800d110 <pbuf_copy+0x184>)
 800d034:	f007 fef0 	bl	8014e18 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	895b      	ldrh	r3, [r3, #10]
 800d03c:	89ba      	ldrh	r2, [r7, #12]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d906      	bls.n	800d050 <pbuf_copy+0xc4>
 800d042:	4b31      	ldr	r3, [pc, #196]	; (800d108 <pbuf_copy+0x17c>)
 800d044:	f240 32ce 	movw	r2, #974	; 0x3ce
 800d048:	4933      	ldr	r1, [pc, #204]	; (800d118 <pbuf_copy+0x18c>)
 800d04a:	4831      	ldr	r0, [pc, #196]	; (800d110 <pbuf_copy+0x184>)
 800d04c:	f007 fee4 	bl	8014e18 <iprintf>
    if (offset_from >= p_from->len) {
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	895b      	ldrh	r3, [r3, #10]
 800d054:	89ba      	ldrh	r2, [r7, #12]
 800d056:	429a      	cmp	r2, r3
 800d058:	d304      	bcc.n	800d064 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d05a:	2300      	movs	r3, #0
 800d05c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	895b      	ldrh	r3, [r3, #10]
 800d068:	89fa      	ldrh	r2, [r7, #14]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d114      	bne.n	800d098 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10c      	bne.n	800d098 <pbuf_copy+0x10c>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d009      	beq.n	800d098 <pbuf_copy+0x10c>
 800d084:	4b20      	ldr	r3, [pc, #128]	; (800d108 <pbuf_copy+0x17c>)
 800d086:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d08a:	4924      	ldr	r1, [pc, #144]	; (800d11c <pbuf_copy+0x190>)
 800d08c:	4820      	ldr	r0, [pc, #128]	; (800d110 <pbuf_copy+0x184>)
 800d08e:	f007 fec3 	bl	8014e18 <iprintf>
 800d092:	f06f 030f 	mvn.w	r3, #15
 800d096:	e032      	b.n	800d0fe <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d013      	beq.n	800d0c6 <pbuf_copy+0x13a>
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	895a      	ldrh	r2, [r3, #10]
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	891b      	ldrh	r3, [r3, #8]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d10d      	bne.n	800d0c6 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d009      	beq.n	800d0c6 <pbuf_copy+0x13a>
 800d0b2:	4b15      	ldr	r3, [pc, #84]	; (800d108 <pbuf_copy+0x17c>)
 800d0b4:	f240 32de 	movw	r2, #990	; 0x3de
 800d0b8:	4919      	ldr	r1, [pc, #100]	; (800d120 <pbuf_copy+0x194>)
 800d0ba:	4815      	ldr	r0, [pc, #84]	; (800d110 <pbuf_copy+0x184>)
 800d0bc:	f007 feac 	bl	8014e18 <iprintf>
 800d0c0:	f06f 0305 	mvn.w	r3, #5
 800d0c4:	e01b      	b.n	800d0fe <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d013      	beq.n	800d0f4 <pbuf_copy+0x168>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	895a      	ldrh	r2, [r3, #10]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	891b      	ldrh	r3, [r3, #8]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d10d      	bne.n	800d0f4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d009      	beq.n	800d0f4 <pbuf_copy+0x168>
 800d0e0:	4b09      	ldr	r3, [pc, #36]	; (800d108 <pbuf_copy+0x17c>)
 800d0e2:	f240 32e3 	movw	r2, #995	; 0x3e3
 800d0e6:	490e      	ldr	r1, [pc, #56]	; (800d120 <pbuf_copy+0x194>)
 800d0e8:	4809      	ldr	r0, [pc, #36]	; (800d110 <pbuf_copy+0x184>)
 800d0ea:	f007 fe95 	bl	8014e18 <iprintf>
 800d0ee:	f06f 0305 	mvn.w	r3, #5
 800d0f2:	e004      	b.n	800d0fe <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f47f af67 	bne.w	800cfca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	0801602c 	.word	0x0801602c
 800d10c:	080163bc 	.word	0x080163bc
 800d110:	08016078 	.word	0x08016078
 800d114:	080163ec 	.word	0x080163ec
 800d118:	08016404 	.word	0x08016404
 800d11c:	08016420 	.word	0x08016420
 800d120:	08016430 	.word	0x08016430

0800d124 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	4611      	mov	r1, r2
 800d130:	461a      	mov	r2, r3
 800d132:	460b      	mov	r3, r1
 800d134:	80fb      	strh	r3, [r7, #6]
 800d136:	4613      	mov	r3, r2
 800d138:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d108      	bne.n	800d156 <pbuf_copy_partial+0x32>
 800d144:	4b30      	ldr	r3, [pc, #192]	; (800d208 <pbuf_copy_partial+0xe4>)
 800d146:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d14a:	4930      	ldr	r1, [pc, #192]	; (800d20c <pbuf_copy_partial+0xe8>)
 800d14c:	4830      	ldr	r0, [pc, #192]	; (800d210 <pbuf_copy_partial+0xec>)
 800d14e:	f007 fe63 	bl	8014e18 <iprintf>
 800d152:	2300      	movs	r3, #0
 800d154:	e054      	b.n	800d200 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d108      	bne.n	800d16e <pbuf_copy_partial+0x4a>
 800d15c:	4b2a      	ldr	r3, [pc, #168]	; (800d208 <pbuf_copy_partial+0xe4>)
 800d15e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d162:	492c      	ldr	r1, [pc, #176]	; (800d214 <pbuf_copy_partial+0xf0>)
 800d164:	482a      	ldr	r0, [pc, #168]	; (800d210 <pbuf_copy_partial+0xec>)
 800d166:	f007 fe57 	bl	8014e18 <iprintf>
 800d16a:	2300      	movs	r3, #0
 800d16c:	e048      	b.n	800d200 <pbuf_copy_partial+0xdc>

  left = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <pbuf_copy_partial+0x5a>
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <pbuf_copy_partial+0x5e>
    return 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	e03e      	b.n	800d200 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	61fb      	str	r3, [r7, #28]
 800d186:	e034      	b.n	800d1f2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800d188:	88bb      	ldrh	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00a      	beq.n	800d1a4 <pbuf_copy_partial+0x80>
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	895b      	ldrh	r3, [r3, #10]
 800d192:	88ba      	ldrh	r2, [r7, #4]
 800d194:	429a      	cmp	r2, r3
 800d196:	d305      	bcc.n	800d1a4 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	895b      	ldrh	r3, [r3, #10]
 800d19c:	88ba      	ldrh	r2, [r7, #4]
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	80bb      	strh	r3, [r7, #4]
 800d1a2:	e023      	b.n	800d1ec <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	895a      	ldrh	r2, [r3, #10]
 800d1a8:	88bb      	ldrh	r3, [r7, #4]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d1ae:	8b3a      	ldrh	r2, [r7, #24]
 800d1b0:	88fb      	ldrh	r3, [r7, #6]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d901      	bls.n	800d1ba <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800d1b6:	88fb      	ldrh	r3, [r7, #6]
 800d1b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800d1ba:	8b7b      	ldrh	r3, [r7, #26]
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	18d0      	adds	r0, r2, r3
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	88bb      	ldrh	r3, [r7, #4]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	8b3a      	ldrh	r2, [r7, #24]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	f007 fd69 	bl	8014ca2 <memcpy>
      copied_total += buf_copy_len;
 800d1d0:	8afa      	ldrh	r2, [r7, #22]
 800d1d2:	8b3b      	ldrh	r3, [r7, #24]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800d1d8:	8b7a      	ldrh	r2, [r7, #26]
 800d1da:	8b3b      	ldrh	r3, [r7, #24]
 800d1dc:	4413      	add	r3, r2
 800d1de:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800d1e0:	88fa      	ldrh	r2, [r7, #6]
 800d1e2:	8b3b      	ldrh	r3, [r7, #24]
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	61fb      	str	r3, [r7, #28]
 800d1f2:	88fb      	ldrh	r3, [r7, #6]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <pbuf_copy_partial+0xda>
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1c4      	bne.n	800d188 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800d1fe:	8afb      	ldrh	r3, [r7, #22]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3720      	adds	r7, #32
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	0801602c 	.word	0x0801602c
 800d20c:	0801645c 	.word	0x0801645c
 800d210:	08016078 	.word	0x08016078
 800d214:	0801647c 	.word	0x0801647c

0800d218 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d218:	b480      	push	{r7}
 800d21a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d21c:	bf00      	nop
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
	...

0800d228 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d22c:	f000 fdf0 	bl	800de10 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d230:	4b07      	ldr	r3, [pc, #28]	; (800d250 <tcp_tmr+0x28>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	3301      	adds	r3, #1
 800d236:	b2da      	uxtb	r2, r3
 800d238:	4b05      	ldr	r3, [pc, #20]	; (800d250 <tcp_tmr+0x28>)
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	4b04      	ldr	r3, [pc, #16]	; (800d250 <tcp_tmr+0x28>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	2b00      	cmp	r3, #0
 800d246:	d001      	beq.n	800d24c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d248:	f000 fb22 	bl	800d890 <tcp_slowtmr>
  }
}
 800d24c:	bf00      	nop
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	200041f9 	.word	0x200041f9

0800d254 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	60fb      	str	r3, [r7, #12]
 800d262:	e00a      	b.n	800d27a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d102      	bne.n	800d274 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2200      	movs	r2, #0
 800d272:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	60fb      	str	r3, [r7, #12]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1f1      	bne.n	800d264 <tcp_remove_listener+0x10>
      }
   }
}
 800d280:	bf00      	nop
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d105      	bne.n	800d2a6 <tcp_listen_closed+0x1a>
 800d29a:	4b13      	ldr	r3, [pc, #76]	; (800d2e8 <tcp_listen_closed+0x5c>)
 800d29c:	22c0      	movs	r2, #192	; 0xc0
 800d29e:	4913      	ldr	r1, [pc, #76]	; (800d2ec <tcp_listen_closed+0x60>)
 800d2a0:	4813      	ldr	r0, [pc, #76]	; (800d2f0 <tcp_listen_closed+0x64>)
 800d2a2:	f007 fdb9 	bl	8014e18 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7d1b      	ldrb	r3, [r3, #20]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d005      	beq.n	800d2ba <tcp_listen_closed+0x2e>
 800d2ae:	4b0e      	ldr	r3, [pc, #56]	; (800d2e8 <tcp_listen_closed+0x5c>)
 800d2b0:	22c1      	movs	r2, #193	; 0xc1
 800d2b2:	4910      	ldr	r1, [pc, #64]	; (800d2f4 <tcp_listen_closed+0x68>)
 800d2b4:	480e      	ldr	r0, [pc, #56]	; (800d2f0 <tcp_listen_closed+0x64>)
 800d2b6:	f007 fdaf 	bl	8014e18 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	60fb      	str	r3, [r7, #12]
 800d2be:	e00b      	b.n	800d2d8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800d2c0:	4a0d      	ldr	r2, [pc, #52]	; (800d2f8 <tcp_listen_closed+0x6c>)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7ff ffc1 	bl	800d254 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d9f0      	bls.n	800d2c0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d2de:	bf00      	nop
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	080165b0 	.word	0x080165b0
 800d2ec:	080165e0 	.word	0x080165e0
 800d2f0:	080165ec 	.word	0x080165ec
 800d2f4:	08016614 	.word	0x08016614
 800d2f8:	080179d0 	.word	0x080179d0

0800d2fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d2fc:	b5b0      	push	{r4, r5, r7, lr}
 800d2fe:	b086      	sub	sp, #24
 800d300:	af02      	add	r7, sp, #8
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d308:	78fb      	ldrb	r3, [r7, #3]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d075      	beq.n	800d3fa <tcp_close_shutdown+0xfe>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	7d1b      	ldrb	r3, [r3, #20]
 800d312:	2b04      	cmp	r3, #4
 800d314:	d003      	beq.n	800d31e <tcp_close_shutdown+0x22>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	7d1b      	ldrb	r3, [r3, #20]
 800d31a:	2b07      	cmp	r3, #7
 800d31c:	d16d      	bne.n	800d3fa <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d322:	2b00      	cmp	r3, #0
 800d324:	d104      	bne.n	800d330 <tcp_close_shutdown+0x34>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d32a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d32e:	d064      	beq.n	800d3fa <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7e9b      	ldrb	r3, [r3, #26]
 800d334:	f003 0310 	and.w	r3, r3, #16
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <tcp_close_shutdown+0x4e>
 800d33c:	4b59      	ldr	r3, [pc, #356]	; (800d4a4 <tcp_close_shutdown+0x1a8>)
 800d33e:	f240 120f 	movw	r2, #271	; 0x10f
 800d342:	4959      	ldr	r1, [pc, #356]	; (800d4a8 <tcp_close_shutdown+0x1ac>)
 800d344:	4859      	ldr	r0, [pc, #356]	; (800d4ac <tcp_close_shutdown+0x1b0>)
 800d346:	f007 fd67 	bl	8014e18 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d352:	687c      	ldr	r4, [r7, #4]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	1d1d      	adds	r5, r3, #4
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	8adb      	ldrh	r3, [r3, #22]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	8b12      	ldrh	r2, [r2, #24]
 800d360:	9201      	str	r2, [sp, #4]
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	462b      	mov	r3, r5
 800d366:	4622      	mov	r2, r4
 800d368:	f004 f862 	bl	8011430 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 ffc5 	bl	800e2fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d372:	4b4f      	ldr	r3, [pc, #316]	; (800d4b0 <tcp_close_shutdown+0x1b4>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d105      	bne.n	800d388 <tcp_close_shutdown+0x8c>
 800d37c:	4b4c      	ldr	r3, [pc, #304]	; (800d4b0 <tcp_close_shutdown+0x1b4>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	4a4b      	ldr	r2, [pc, #300]	; (800d4b0 <tcp_close_shutdown+0x1b4>)
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	e013      	b.n	800d3b0 <tcp_close_shutdown+0xb4>
 800d388:	4b49      	ldr	r3, [pc, #292]	; (800d4b0 <tcp_close_shutdown+0x1b4>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	60fb      	str	r3, [r7, #12]
 800d38e:	e00c      	b.n	800d3aa <tcp_close_shutdown+0xae>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	429a      	cmp	r2, r3
 800d398:	d104      	bne.n	800d3a4 <tcp_close_shutdown+0xa8>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68da      	ldr	r2, [r3, #12]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	60da      	str	r2, [r3, #12]
 800d3a2:	e005      	b.n	800d3b0 <tcp_close_shutdown+0xb4>
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1ef      	bne.n	800d390 <tcp_close_shutdown+0x94>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	60da      	str	r2, [r3, #12]
 800d3b6:	4b3f      	ldr	r3, [pc, #252]	; (800d4b4 <tcp_close_shutdown+0x1b8>)
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	7d1b      	ldrb	r3, [r3, #20]
 800d3c0:	2b04      	cmp	r3, #4
 800d3c2:	d10c      	bne.n	800d3de <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	220a      	movs	r2, #10
 800d3c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d3ca:	4b3b      	ldr	r3, [pc, #236]	; (800d4b8 <tcp_close_shutdown+0x1bc>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	60da      	str	r2, [r3, #12]
 800d3d2:	4a39      	ldr	r2, [pc, #228]	; (800d4b8 <tcp_close_shutdown+0x1bc>)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6013      	str	r3, [r2, #0]
 800d3d8:	f004 fa7a 	bl	80118d0 <tcp_timer_needed>
 800d3dc:	e00b      	b.n	800d3f6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800d3de:	4b37      	ldr	r3, [pc, #220]	; (800d4bc <tcp_close_shutdown+0x1c0>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d102      	bne.n	800d3ee <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800d3e8:	f003 faec 	bl	80109c4 <tcp_trigger_input_pcb_close>
 800d3ec:	e003      	b.n	800d3f6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800d3ee:	6879      	ldr	r1, [r7, #4]
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	f7fe ff49 	bl	800c288 <memp_free>
        }
      }
      return ERR_OK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	e050      	b.n	800d49c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	7d1b      	ldrb	r3, [r3, #20]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d02e      	beq.n	800d460 <tcp_close_shutdown+0x164>
 800d402:	2b02      	cmp	r3, #2
 800d404:	d038      	beq.n	800d478 <tcp_close_shutdown+0x17c>
 800d406:	2b00      	cmp	r3, #0
 800d408:	d142      	bne.n	800d490 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	8adb      	ldrh	r3, [r3, #22]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d021      	beq.n	800d456 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d412:	4b2b      	ldr	r3, [pc, #172]	; (800d4c0 <tcp_close_shutdown+0x1c4>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d105      	bne.n	800d428 <tcp_close_shutdown+0x12c>
 800d41c:	4b28      	ldr	r3, [pc, #160]	; (800d4c0 <tcp_close_shutdown+0x1c4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	4a27      	ldr	r2, [pc, #156]	; (800d4c0 <tcp_close_shutdown+0x1c4>)
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	e013      	b.n	800d450 <tcp_close_shutdown+0x154>
 800d428:	4b25      	ldr	r3, [pc, #148]	; (800d4c0 <tcp_close_shutdown+0x1c4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	60bb      	str	r3, [r7, #8]
 800d42e:	e00c      	b.n	800d44a <tcp_close_shutdown+0x14e>
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	429a      	cmp	r2, r3
 800d438:	d104      	bne.n	800d444 <tcp_close_shutdown+0x148>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	68da      	ldr	r2, [r3, #12]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	60da      	str	r2, [r3, #12]
 800d442:	e005      	b.n	800d450 <tcp_close_shutdown+0x154>
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	60bb      	str	r3, [r7, #8]
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1ef      	bne.n	800d430 <tcp_close_shutdown+0x134>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800d456:	6879      	ldr	r1, [r7, #4]
 800d458:	2000      	movs	r0, #0
 800d45a:	f7fe ff15 	bl	800c288 <memp_free>
    break;
 800d45e:	e01c      	b.n	800d49a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff ff13 	bl	800d28c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d466:	6879      	ldr	r1, [r7, #4]
 800d468:	4816      	ldr	r0, [pc, #88]	; (800d4c4 <tcp_close_shutdown+0x1c8>)
 800d46a:	f000 ff89 	bl	800e380 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	2001      	movs	r0, #1
 800d472:	f7fe ff09 	bl	800c288 <memp_free>
    break;
 800d476:	e010      	b.n	800d49a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800d478:	6879      	ldr	r1, [r7, #4]
 800d47a:	480d      	ldr	r0, [pc, #52]	; (800d4b0 <tcp_close_shutdown+0x1b4>)
 800d47c:	f000 ff80 	bl	800e380 <tcp_pcb_remove>
 800d480:	4b0c      	ldr	r3, [pc, #48]	; (800d4b4 <tcp_close_shutdown+0x1b8>)
 800d482:	2201      	movs	r2, #1
 800d484:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	2000      	movs	r0, #0
 800d48a:	f7fe fefd 	bl	800c288 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800d48e:	e004      	b.n	800d49a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 f819 	bl	800d4c8 <tcp_close_shutdown_fin>
 800d496:	4603      	mov	r3, r0
 800d498:	e000      	b.n	800d49c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800d49a:	2300      	movs	r3, #0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bdb0      	pop	{r4, r5, r7, pc}
 800d4a4:	080165b0 	.word	0x080165b0
 800d4a8:	0801662c 	.word	0x0801662c
 800d4ac:	080165ec 	.word	0x080165ec
 800d4b0:	2000ab54 	.word	0x2000ab54
 800d4b4:	2000ab50 	.word	0x2000ab50
 800d4b8:	2000ab64 	.word	0x2000ab64
 800d4bc:	2000ab68 	.word	0x2000ab68
 800d4c0:	2000ab60 	.word	0x2000ab60
 800d4c4:	2000ab5c 	.word	0x2000ab5c

0800d4c8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d106      	bne.n	800d4e4 <tcp_close_shutdown_fin+0x1c>
 800d4d6:	4b2c      	ldr	r3, [pc, #176]	; (800d588 <tcp_close_shutdown_fin+0xc0>)
 800d4d8:	f240 124d 	movw	r2, #333	; 0x14d
 800d4dc:	492b      	ldr	r1, [pc, #172]	; (800d58c <tcp_close_shutdown_fin+0xc4>)
 800d4de:	482c      	ldr	r0, [pc, #176]	; (800d590 <tcp_close_shutdown_fin+0xc8>)
 800d4e0:	f007 fc9a 	bl	8014e18 <iprintf>

  switch (pcb->state) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	7d1b      	ldrb	r3, [r3, #20]
 800d4e8:	2b04      	cmp	r3, #4
 800d4ea:	d010      	beq.n	800d50e <tcp_close_shutdown_fin+0x46>
 800d4ec:	2b07      	cmp	r3, #7
 800d4ee:	d01b      	beq.n	800d528 <tcp_close_shutdown_fin+0x60>
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	d126      	bne.n	800d542 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f003 faf1 	bl	8010adc <tcp_send_fin>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d11f      	bne.n	800d546 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2205      	movs	r2, #5
 800d50a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d50c:	e01b      	b.n	800d546 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f003 fae4 	bl	8010adc <tcp_send_fin>
 800d514:	4603      	mov	r3, r0
 800d516:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d114      	bne.n	800d54a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2205      	movs	r2, #5
 800d524:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d526:	e010      	b.n	800d54a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f003 fad7 	bl	8010adc <tcp_send_fin>
 800d52e:	4603      	mov	r3, r0
 800d530:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d109      	bne.n	800d54e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2209      	movs	r2, #9
 800d53e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d540:	e005      	b.n	800d54e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	e01c      	b.n	800d580 <tcp_close_shutdown_fin+0xb8>
    break;
 800d546:	bf00      	nop
 800d548:	e002      	b.n	800d550 <tcp_close_shutdown_fin+0x88>
    break;
 800d54a:	bf00      	nop
 800d54c:	e000      	b.n	800d550 <tcp_close_shutdown_fin+0x88>
    break;
 800d54e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d103      	bne.n	800d560 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f003 fcdf 	bl	8010f1c <tcp_output>
 800d55e:	e00d      	b.n	800d57c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d568:	d108      	bne.n	800d57c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	7e9b      	ldrb	r3, [r3, #26]
 800d56e:	f043 0308 	orr.w	r3, r3, #8
 800d572:	b2da      	uxtb	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	e001      	b.n	800d580 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	080165b0 	.word	0x080165b0
 800d58c:	080165e0 	.word	0x080165e0
 800d590:	080165ec 	.word	0x080165ec

0800d594 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	7d1b      	ldrb	r3, [r3, #20]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d006      	beq.n	800d5b2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7e9b      	ldrb	r3, [r3, #26]
 800d5a8:	f043 0310 	orr.w	r3, r3, #16
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f7ff fea1 	bl	800d2fc <tcp_close_shutdown>
 800d5ba:	4603      	mov	r3, r0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08c      	sub	sp, #48	; 0x30
 800d5c8:	af02      	add	r7, sp, #8
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	7d1b      	ldrb	r3, [r3, #20]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d106      	bne.n	800d5e4 <tcp_abandon+0x20>
 800d5d6:	4b4d      	ldr	r3, [pc, #308]	; (800d70c <tcp_abandon+0x148>)
 800d5d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d5dc:	494c      	ldr	r1, [pc, #304]	; (800d710 <tcp_abandon+0x14c>)
 800d5de:	484d      	ldr	r0, [pc, #308]	; (800d714 <tcp_abandon+0x150>)
 800d5e0:	f007 fc1a 	bl	8014e18 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	7d1b      	ldrb	r3, [r3, #20]
 800d5e8:	2b0a      	cmp	r3, #10
 800d5ea:	d108      	bne.n	800d5fe <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d5ec:	6879      	ldr	r1, [r7, #4]
 800d5ee:	484a      	ldr	r0, [pc, #296]	; (800d718 <tcp_abandon+0x154>)
 800d5f0:	f000 fec6 	bl	800e380 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800d5f4:	6879      	ldr	r1, [r7, #4]
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	f7fe fe46 	bl	800c288 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800d5fc:	e081      	b.n	800d702 <tcp_abandon+0x13e>
    int send_rst = 0;
 800d5fe:	2300      	movs	r3, #0
 800d600:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d602:	2300      	movs	r3, #0
 800d604:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d60a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d610:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d618:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	7d1b      	ldrb	r3, [r3, #20]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d126      	bne.n	800d676 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	8adb      	ldrh	r3, [r3, #22]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d02e      	beq.n	800d68e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d630:	4b3a      	ldr	r3, [pc, #232]	; (800d71c <tcp_abandon+0x158>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	429a      	cmp	r2, r3
 800d638:	d105      	bne.n	800d646 <tcp_abandon+0x82>
 800d63a:	4b38      	ldr	r3, [pc, #224]	; (800d71c <tcp_abandon+0x158>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	4a36      	ldr	r2, [pc, #216]	; (800d71c <tcp_abandon+0x158>)
 800d642:	6013      	str	r3, [r2, #0]
 800d644:	e013      	b.n	800d66e <tcp_abandon+0xaa>
 800d646:	4b35      	ldr	r3, [pc, #212]	; (800d71c <tcp_abandon+0x158>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	61fb      	str	r3, [r7, #28]
 800d64c:	e00c      	b.n	800d668 <tcp_abandon+0xa4>
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	429a      	cmp	r2, r3
 800d656:	d104      	bne.n	800d662 <tcp_abandon+0x9e>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	68da      	ldr	r2, [r3, #12]
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	60da      	str	r2, [r3, #12]
 800d660:	e005      	b.n	800d66e <tcp_abandon+0xaa>
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	61fb      	str	r3, [r7, #28]
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1ef      	bne.n	800d64e <tcp_abandon+0x8a>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	60da      	str	r2, [r3, #12]
 800d674:	e00b      	b.n	800d68e <tcp_abandon+0xca>
      send_rst = reset;
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	8adb      	ldrh	r3, [r3, #22]
 800d67e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d680:	6879      	ldr	r1, [r7, #4]
 800d682:	4827      	ldr	r0, [pc, #156]	; (800d720 <tcp_abandon+0x15c>)
 800d684:	f000 fe7c 	bl	800e380 <tcp_pcb_remove>
 800d688:	4b26      	ldr	r3, [pc, #152]	; (800d724 <tcp_abandon+0x160>)
 800d68a:	2201      	movs	r2, #1
 800d68c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d692:	2b00      	cmp	r3, #0
 800d694:	d004      	beq.n	800d6a0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 fc85 	bl	800dfaa <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d004      	beq.n	800d6b2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 fc7c 	bl	800dfaa <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d004      	beq.n	800d6c4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 fc73 	bl	800dfaa <tcp_segs_free>
    if (send_rst) {
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00c      	beq.n	800d6e4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	1d19      	adds	r1, r3, #4
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	8b1b      	ldrh	r3, [r3, #24]
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	460b      	mov	r3, r1
 800d6dc:	6979      	ldr	r1, [r7, #20]
 800d6de:	69b8      	ldr	r0, [r7, #24]
 800d6e0:	f003 fea6 	bl	8011430 <tcp_rst>
    last_state = pcb->state;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7d1b      	ldrb	r3, [r3, #20]
 800d6e8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800d6ea:	6879      	ldr	r1, [r7, #4]
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	f7fe fdcb 	bl	800c288 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <tcp_abandon+0x13e>
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	f06f 010c 	mvn.w	r1, #12
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	4798      	blx	r3
}
 800d702:	bf00      	nop
 800d704:	3728      	adds	r7, #40	; 0x28
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	080165b0 	.word	0x080165b0
 800d710:	08016648 	.word	0x08016648
 800d714:	080165ec 	.word	0x080165ec
 800d718:	2000ab64 	.word	0x2000ab64
 800d71c:	2000ab60 	.word	0x2000ab60
 800d720:	2000ab54 	.word	0x2000ab54
 800d724:	2000ab50 	.word	0x2000ab50

0800d728 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d730:	2101      	movs	r1, #1
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7ff ff46 	bl	800d5c4 <tcp_abandon>
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d750:	4413      	add	r3, r2
 800d752:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d75c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d760:	bf28      	it	cs
 800d762:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d766:	b292      	uxth	r2, r2
 800d768:	4413      	add	r3, r2
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	2b00      	cmp	r3, #0
 800d770:	db08      	blt.n	800d784 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	e020      	b.n	800d7c6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	dd03      	ble.n	800d79a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d798:	e014      	b.n	800d7c4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7ac:	d306      	bcc.n	800d7bc <tcp_update_rcv_ann_wnd+0x7c>
 800d7ae:	4b08      	ldr	r3, [pc, #32]	; (800d7d0 <tcp_update_rcv_ann_wnd+0x90>)
 800d7b0:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d7b4:	4907      	ldr	r1, [pc, #28]	; (800d7d4 <tcp_update_rcv_ann_wnd+0x94>)
 800d7b6:	4808      	ldr	r0, [pc, #32]	; (800d7d8 <tcp_update_rcv_ann_wnd+0x98>)
 800d7b8:	f007 fb2e 	bl	8014e18 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d7c4:	2300      	movs	r3, #0
  }
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	080165b0 	.word	0x080165b0
 800d7d4:	080166c8 	.word	0x080166c8
 800d7d8:	080165ec 	.word	0x080165ec

0800d7dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7d1b      	ldrb	r3, [r3, #20]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d106      	bne.n	800d7fe <tcp_recved+0x22>
 800d7f0:	4b23      	ldr	r3, [pc, #140]	; (800d880 <tcp_recved+0xa4>)
 800d7f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d7f6:	4923      	ldr	r1, [pc, #140]	; (800d884 <tcp_recved+0xa8>)
 800d7f8:	4823      	ldr	r0, [pc, #140]	; (800d888 <tcp_recved+0xac>)
 800d7fa:	f007 fb0d 	bl	8014e18 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d802:	887b      	ldrh	r3, [r7, #2]
 800d804:	4413      	add	r3, r2
 800d806:	b29a      	uxth	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d810:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d814:	d904      	bls.n	800d820 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d81c:	851a      	strh	r2, [r3, #40]	; 0x28
 800d81e:	e017      	b.n	800d850 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d824:	2b00      	cmp	r3, #0
 800d826:	d113      	bne.n	800d850 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	7d1b      	ldrb	r3, [r3, #20]
 800d82c:	2b07      	cmp	r3, #7
 800d82e:	d003      	beq.n	800d838 <tcp_recved+0x5c>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	7d1b      	ldrb	r3, [r3, #20]
 800d834:	2b09      	cmp	r3, #9
 800d836:	d104      	bne.n	800d842 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d83e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d840:	e006      	b.n	800d850 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800d842:	4b0f      	ldr	r3, [pc, #60]	; (800d880 <tcp_recved+0xa4>)
 800d844:	f240 322d 	movw	r2, #813	; 0x32d
 800d848:	4910      	ldr	r1, [pc, #64]	; (800d88c <tcp_recved+0xb0>)
 800d84a:	480f      	ldr	r0, [pc, #60]	; (800d888 <tcp_recved+0xac>)
 800d84c:	f007 fae4 	bl	8014e18 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff ff75 	bl	800d740 <tcp_update_rcv_ann_wnd>
 800d856:	4603      	mov	r3, r0
 800d858:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d860:	db09      	blt.n	800d876 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	7e9b      	ldrb	r3, [r3, #26]
 800d866:	f043 0302 	orr.w	r3, r3, #2
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f003 fb53 	bl	8010f1c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d876:	bf00      	nop
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	080165b0 	.word	0x080165b0
 800d884:	080166e4 	.word	0x080166e4
 800d888:	080165ec 	.word	0x080165ec
 800d88c:	0801670c 	.word	0x0801670c

0800d890 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d890:	b5b0      	push	{r4, r5, r7, lr}
 800d892:	b08c      	sub	sp, #48	; 0x30
 800d894:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d896:	2300      	movs	r3, #0
 800d898:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d89a:	4b97      	ldr	r3, [pc, #604]	; (800daf8 <tcp_slowtmr+0x268>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	4a95      	ldr	r2, [pc, #596]	; (800daf8 <tcp_slowtmr+0x268>)
 800d8a2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d8a4:	4b95      	ldr	r3, [pc, #596]	; (800dafc <tcp_slowtmr+0x26c>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	4b93      	ldr	r3, [pc, #588]	; (800dafc <tcp_slowtmr+0x26c>)
 800d8ae:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d8b4:	4b92      	ldr	r3, [pc, #584]	; (800db00 <tcp_slowtmr+0x270>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d8ba:	e227      	b.n	800dd0c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	7d1b      	ldrb	r3, [r3, #20]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d106      	bne.n	800d8d2 <tcp_slowtmr+0x42>
 800d8c4:	4b8f      	ldr	r3, [pc, #572]	; (800db04 <tcp_slowtmr+0x274>)
 800d8c6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d8ca:	498f      	ldr	r1, [pc, #572]	; (800db08 <tcp_slowtmr+0x278>)
 800d8cc:	488f      	ldr	r0, [pc, #572]	; (800db0c <tcp_slowtmr+0x27c>)
 800d8ce:	f007 faa3 	bl	8014e18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	7d1b      	ldrb	r3, [r3, #20]
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d106      	bne.n	800d8e8 <tcp_slowtmr+0x58>
 800d8da:	4b8a      	ldr	r3, [pc, #552]	; (800db04 <tcp_slowtmr+0x274>)
 800d8dc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d8e0:	498b      	ldr	r1, [pc, #556]	; (800db10 <tcp_slowtmr+0x280>)
 800d8e2:	488a      	ldr	r0, [pc, #552]	; (800db0c <tcp_slowtmr+0x27c>)
 800d8e4:	f007 fa98 	bl	8014e18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ea:	7d1b      	ldrb	r3, [r3, #20]
 800d8ec:	2b0a      	cmp	r3, #10
 800d8ee:	d106      	bne.n	800d8fe <tcp_slowtmr+0x6e>
 800d8f0:	4b84      	ldr	r3, [pc, #528]	; (800db04 <tcp_slowtmr+0x274>)
 800d8f2:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800d8f6:	4987      	ldr	r1, [pc, #540]	; (800db14 <tcp_slowtmr+0x284>)
 800d8f8:	4884      	ldr	r0, [pc, #528]	; (800db0c <tcp_slowtmr+0x27c>)
 800d8fa:	f007 fa8d 	bl	8014e18 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	7f5a      	ldrb	r2, [r3, #29]
 800d902:	4b7e      	ldr	r3, [pc, #504]	; (800dafc <tcp_slowtmr+0x26c>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	429a      	cmp	r2, r3
 800d908:	d103      	bne.n	800d912 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d910:	e1fc      	b.n	800dd0c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d912:	4b7a      	ldr	r3, [pc, #488]	; (800dafc <tcp_slowtmr+0x26c>)
 800d914:	781a      	ldrb	r2, [r3, #0]
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d91e:	2300      	movs	r3, #0
 800d920:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	7d1b      	ldrb	r3, [r3, #20]
 800d926:	2b02      	cmp	r3, #2
 800d928:	d108      	bne.n	800d93c <tcp_slowtmr+0xac>
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d930:	2b05      	cmp	r3, #5
 800d932:	d903      	bls.n	800d93c <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d934:	7ffb      	ldrb	r3, [r7, #31]
 800d936:	3301      	adds	r3, #1
 800d938:	77fb      	strb	r3, [r7, #31]
 800d93a:	e0a2      	b.n	800da82 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d942:	2b0b      	cmp	r3, #11
 800d944:	d903      	bls.n	800d94e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d946:	7ffb      	ldrb	r3, [r7, #31]
 800d948:	3301      	adds	r3, #1
 800d94a:	77fb      	strb	r3, [r7, #31]
 800d94c:	e099      	b.n	800da82 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d954:	2b00      	cmp	r3, #0
 800d956:	d032      	beq.n	800d9be <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d95e:	3b01      	subs	r3, #1
 800d960:	4a6d      	ldr	r2, [pc, #436]	; (800db18 <tcp_slowtmr+0x288>)
 800d962:	5cd3      	ldrb	r3, [r2, r3]
 800d964:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800d966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d968:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d96c:	7cfa      	ldrb	r2, [r7, #19]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d907      	bls.n	800d982 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d974:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d978:	3301      	adds	r3, #1
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d984:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d988:	7cfa      	ldrb	r2, [r7, #19]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d879      	bhi.n	800da82 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d98e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d990:	f003 fede 	bl	8011750 <tcp_zero_window_probe>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d173      	bne.n	800da82 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d9a8:	2b06      	cmp	r3, #6
 800d9aa:	d86a      	bhi.n	800da82 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d9bc:	e061      	b.n	800da82 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	db08      	blt.n	800d9da <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	b21a      	sxth	r2, r3
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d04f      	beq.n	800da82 <tcp_slowtmr+0x1f2>
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	db47      	blt.n	800da82 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f4:	7d1b      	ldrb	r3, [r3, #20]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d018      	beq.n	800da2c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da00:	2b0c      	cmp	r3, #12
 800da02:	bf28      	it	cs
 800da04:	230c      	movcs	r3, #12
 800da06:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da0e:	10db      	asrs	r3, r3, #3
 800da10:	b21b      	sxth	r3, r3
 800da12:	461a      	mov	r2, r3
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da1a:	4413      	add	r3, r2
 800da1c:	7dfa      	ldrb	r2, [r7, #23]
 800da1e:	493f      	ldr	r1, [pc, #252]	; (800db1c <tcp_slowtmr+0x28c>)
 800da20:	5c8a      	ldrb	r2, [r1, r2]
 800da22:	4093      	lsls	r3, r2
 800da24:	b21a      	sxth	r2, r3
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2e:	2200      	movs	r2, #0
 800da30:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da3e:	4293      	cmp	r3, r2
 800da40:	bf28      	it	cs
 800da42:	4613      	movcs	r3, r2
 800da44:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800da46:	8abb      	ldrh	r3, [r7, #20]
 800da48:	085b      	lsrs	r3, r3, #1
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da54:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da5c:	005b      	lsls	r3, r3, #1
 800da5e:	b29b      	uxth	r3, r3
 800da60:	429a      	cmp	r2, r3
 800da62:	d206      	bcs.n	800da72 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da68:	005b      	lsls	r3, r3, #1
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800da7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da7e:	f003 fd4d 	bl	801151c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da84:	7d1b      	ldrb	r3, [r3, #20]
 800da86:	2b06      	cmp	r3, #6
 800da88:	d10f      	bne.n	800daaa <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800da8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8c:	7e9b      	ldrb	r3, [r3, #26]
 800da8e:	f003 0310 	and.w	r3, r3, #16
 800da92:	2b00      	cmp	r3, #0
 800da94:	d009      	beq.n	800daaa <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da96:	4b18      	ldr	r3, [pc, #96]	; (800daf8 <tcp_slowtmr+0x268>)
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	1ad3      	subs	r3, r2, r3
 800daa0:	2b28      	cmp	r3, #40	; 0x28
 800daa2:	d902      	bls.n	800daaa <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800daa4:	7ffb      	ldrb	r3, [r7, #31]
 800daa6:	3301      	adds	r3, #1
 800daa8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	7a1b      	ldrb	r3, [r3, #8]
 800daae:	f003 0308 	and.w	r3, r3, #8
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d05d      	beq.n	800db72 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800daba:	2b04      	cmp	r3, #4
 800dabc:	d003      	beq.n	800dac6 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800dac2:	2b07      	cmp	r3, #7
 800dac4:	d155      	bne.n	800db72 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dac6:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <tcp_slowtmr+0x268>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	6a1b      	ldr	r3, [r3, #32]
 800dace:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dad6:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800dada:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800dade:	4910      	ldr	r1, [pc, #64]	; (800db20 <tcp_slowtmr+0x290>)
 800dae0:	fba1 1303 	umull	r1, r3, r1, r3
 800dae4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d91c      	bls.n	800db24 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800daea:	7ffb      	ldrb	r3, [r7, #31]
 800daec:	3301      	adds	r3, #1
 800daee:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800daf0:	7fbb      	ldrb	r3, [r7, #30]
 800daf2:	3301      	adds	r3, #1
 800daf4:	77bb      	strb	r3, [r7, #30]
 800daf6:	e03c      	b.n	800db72 <tcp_slowtmr+0x2e2>
 800daf8:	2000ab58 	.word	0x2000ab58
 800dafc:	200041fa 	.word	0x200041fa
 800db00:	2000ab54 	.word	0x2000ab54
 800db04:	080165b0 	.word	0x080165b0
 800db08:	08016760 	.word	0x08016760
 800db0c:	080165ec 	.word	0x080165ec
 800db10:	0801678c 	.word	0x0801678c
 800db14:	080167b8 	.word	0x080167b8
 800db18:	080179c8 	.word	0x080179c8
 800db1c:	080179b8 	.word	0x080179b8
 800db20:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db24:	4b97      	ldr	r3, [pc, #604]	; (800dd84 <tcp_slowtmr+0x4f4>)
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	6a1b      	ldr	r3, [r3, #32]
 800db2c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800db34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db36:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800db3a:	4618      	mov	r0, r3
 800db3c:	4b92      	ldr	r3, [pc, #584]	; (800dd88 <tcp_slowtmr+0x4f8>)
 800db3e:	fb03 f300 	mul.w	r3, r3, r0
 800db42:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800db44:	4991      	ldr	r1, [pc, #580]	; (800dd8c <tcp_slowtmr+0x4fc>)
 800db46:	fba1 1303 	umull	r1, r3, r1, r3
 800db4a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d910      	bls.n	800db72 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800db50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db52:	f003 fdc0 	bl	80116d6 <tcp_keepalive>
 800db56:	4603      	mov	r3, r0
 800db58:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800db5a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d107      	bne.n	800db72 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800db68:	3301      	adds	r3, #1
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db76:	2b00      	cmp	r3, #0
 800db78:	d016      	beq.n	800dba8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800db7a:	4b82      	ldr	r3, [pc, #520]	; (800dd84 <tcp_slowtmr+0x4f4>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db80:	6a1b      	ldr	r3, [r3, #32]
 800db82:	1ad2      	subs	r2, r2, r3
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800db8a:	4619      	mov	r1, r3
 800db8c:	460b      	mov	r3, r1
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	440b      	add	r3, r1
 800db92:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800db94:	429a      	cmp	r2, r3
 800db96:	d307      	bcc.n	800dba8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9c:	4618      	mov	r0, r3
 800db9e:	f000 fa04 	bl	800dfaa <tcp_segs_free>
      pcb->ooseq = NULL;
 800dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba4:	2200      	movs	r2, #0
 800dba6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	7d1b      	ldrb	r3, [r3, #20]
 800dbac:	2b03      	cmp	r3, #3
 800dbae:	d109      	bne.n	800dbc4 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbb0:	4b74      	ldr	r3, [pc, #464]	; (800dd84 <tcp_slowtmr+0x4f4>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	6a1b      	ldr	r3, [r3, #32]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	2b28      	cmp	r3, #40	; 0x28
 800dbbc:	d902      	bls.n	800dbc4 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dbbe:	7ffb      	ldrb	r3, [r7, #31]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	7d1b      	ldrb	r3, [r3, #20]
 800dbc8:	2b09      	cmp	r3, #9
 800dbca:	d109      	bne.n	800dbe0 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dbcc:	4b6d      	ldr	r3, [pc, #436]	; (800dd84 <tcp_slowtmr+0x4f4>)
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	6a1b      	ldr	r3, [r3, #32]
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	2bf0      	cmp	r3, #240	; 0xf0
 800dbd8:	d902      	bls.n	800dbe0 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800dbda:	7ffb      	ldrb	r3, [r7, #31]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dbe0:	7ffb      	ldrb	r3, [r7, #31]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d05d      	beq.n	800dca2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800dbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dbee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbf0:	f000 fb84 	bl	800e2fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d010      	beq.n	800dc1c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dbfa:	4b65      	ldr	r3, [pc, #404]	; (800dd90 <tcp_slowtmr+0x500>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d106      	bne.n	800dc12 <tcp_slowtmr+0x382>
 800dc04:	4b63      	ldr	r3, [pc, #396]	; (800dd94 <tcp_slowtmr+0x504>)
 800dc06:	f240 4289 	movw	r2, #1161	; 0x489
 800dc0a:	4963      	ldr	r1, [pc, #396]	; (800dd98 <tcp_slowtmr+0x508>)
 800dc0c:	4863      	ldr	r0, [pc, #396]	; (800dd9c <tcp_slowtmr+0x50c>)
 800dc0e:	f007 f903 	bl	8014e18 <iprintf>
        prev->next = pcb->next;
 800dc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc14:	68da      	ldr	r2, [r3, #12]
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	60da      	str	r2, [r3, #12]
 800dc1a:	e00f      	b.n	800dc3c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dc1c:	4b5c      	ldr	r3, [pc, #368]	; (800dd90 <tcp_slowtmr+0x500>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d006      	beq.n	800dc34 <tcp_slowtmr+0x3a4>
 800dc26:	4b5b      	ldr	r3, [pc, #364]	; (800dd94 <tcp_slowtmr+0x504>)
 800dc28:	f240 428d 	movw	r2, #1165	; 0x48d
 800dc2c:	495c      	ldr	r1, [pc, #368]	; (800dda0 <tcp_slowtmr+0x510>)
 800dc2e:	485b      	ldr	r0, [pc, #364]	; (800dd9c <tcp_slowtmr+0x50c>)
 800dc30:	f007 f8f2 	bl	8014e18 <iprintf>
        tcp_active_pcbs = pcb->next;
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	4a55      	ldr	r2, [pc, #340]	; (800dd90 <tcp_slowtmr+0x500>)
 800dc3a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800dc3c:	7fbb      	ldrb	r3, [r7, #30]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d010      	beq.n	800dc64 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dc4a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	1d1d      	adds	r5, r3, #4
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	8adb      	ldrh	r3, [r3, #22]
 800dc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc56:	8b12      	ldrh	r2, [r2, #24]
 800dc58:	9201      	str	r2, [sp, #4]
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	462b      	mov	r3, r5
 800dc5e:	4622      	mov	r2, r4
 800dc60:	f003 fbe6 	bl	8011430 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	691b      	ldr	r3, [r3, #16]
 800dc68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6c:	7d1b      	ldrb	r3, [r3, #20]
 800dc6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800dc7a:	6839      	ldr	r1, [r7, #0]
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	f7fe fb03 	bl	800c288 <memp_free>

      tcp_active_pcbs_changed = 0;
 800dc82:	4b48      	ldr	r3, [pc, #288]	; (800dda4 <tcp_slowtmr+0x514>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d004      	beq.n	800dc98 <tcp_slowtmr+0x408>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f06f 010c 	mvn.w	r1, #12
 800dc94:	68b8      	ldr	r0, [r7, #8]
 800dc96:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dc98:	4b42      	ldr	r3, [pc, #264]	; (800dda4 <tcp_slowtmr+0x514>)
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d035      	beq.n	800dd0c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800dca0:	e606      	b.n	800d8b0 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dcac:	6a3b      	ldr	r3, [r7, #32]
 800dcae:	7edb      	ldrb	r3, [r3, #27]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800dcb8:	6a3b      	ldr	r3, [r7, #32]
 800dcba:	7eda      	ldrb	r2, [r3, #27]
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	7f1b      	ldrb	r3, [r3, #28]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d323      	bcc.n	800dd0c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800dcc4:	6a3b      	ldr	r3, [r7, #32]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800dcca:	4b36      	ldr	r3, [pc, #216]	; (800dda4 <tcp_slowtmr+0x514>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dcd0:	6a3b      	ldr	r3, [r7, #32]
 800dcd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00a      	beq.n	800dcf0 <tcp_slowtmr+0x460>
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dce0:	6a3a      	ldr	r2, [r7, #32]
 800dce2:	6912      	ldr	r2, [r2, #16]
 800dce4:	6a39      	ldr	r1, [r7, #32]
 800dce6:	4610      	mov	r0, r2
 800dce8:	4798      	blx	r3
 800dcea:	4603      	mov	r3, r0
 800dcec:	777b      	strb	r3, [r7, #29]
 800dcee:	e001      	b.n	800dcf4 <tcp_slowtmr+0x464>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800dcf4:	4b2b      	ldr	r3, [pc, #172]	; (800dda4 <tcp_slowtmr+0x514>)
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d000      	beq.n	800dcfe <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800dcfc:	e5d8      	b.n	800d8b0 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800dcfe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d102      	bne.n	800dd0c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800dd06:	6a38      	ldr	r0, [r7, #32]
 800dd08:	f003 f908 	bl	8010f1c <tcp_output>
  while (pcb != NULL) {
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f47f add4 	bne.w	800d8bc <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dd14:	2300      	movs	r3, #0
 800dd16:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800dd18:	4b23      	ldr	r3, [pc, #140]	; (800dda8 <tcp_slowtmr+0x518>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800dd1e:	e068      	b.n	800ddf2 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd22:	7d1b      	ldrb	r3, [r3, #20]
 800dd24:	2b0a      	cmp	r3, #10
 800dd26:	d006      	beq.n	800dd36 <tcp_slowtmr+0x4a6>
 800dd28:	4b1a      	ldr	r3, [pc, #104]	; (800dd94 <tcp_slowtmr+0x504>)
 800dd2a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800dd2e:	491f      	ldr	r1, [pc, #124]	; (800ddac <tcp_slowtmr+0x51c>)
 800dd30:	481a      	ldr	r0, [pc, #104]	; (800dd9c <tcp_slowtmr+0x50c>)
 800dd32:	f007 f871 	bl	8014e18 <iprintf>
    pcb_remove = 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dd3a:	4b12      	ldr	r3, [pc, #72]	; (800dd84 <tcp_slowtmr+0x4f4>)
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	2bf0      	cmp	r3, #240	; 0xf0
 800dd46:	d902      	bls.n	800dd4e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800dd48:	7ffb      	ldrb	r3, [r7, #31]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dd4e:	7ffb      	ldrb	r3, [r7, #31]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d049      	beq.n	800dde8 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dd54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd56:	f000 fad1 	bl	800e2fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dd5a:	6a3b      	ldr	r3, [r7, #32]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d029      	beq.n	800ddb4 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dd60:	4b11      	ldr	r3, [pc, #68]	; (800dda8 <tcp_slowtmr+0x518>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d106      	bne.n	800dd78 <tcp_slowtmr+0x4e8>
 800dd6a:	4b0a      	ldr	r3, [pc, #40]	; (800dd94 <tcp_slowtmr+0x504>)
 800dd6c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800dd70:	490f      	ldr	r1, [pc, #60]	; (800ddb0 <tcp_slowtmr+0x520>)
 800dd72:	480a      	ldr	r0, [pc, #40]	; (800dd9c <tcp_slowtmr+0x50c>)
 800dd74:	f007 f850 	bl	8014e18 <iprintf>
        prev->next = pcb->next;
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	68da      	ldr	r2, [r3, #12]
 800dd7c:	6a3b      	ldr	r3, [r7, #32]
 800dd7e:	60da      	str	r2, [r3, #12]
 800dd80:	e028      	b.n	800ddd4 <tcp_slowtmr+0x544>
 800dd82:	bf00      	nop
 800dd84:	2000ab58 	.word	0x2000ab58
 800dd88:	000124f8 	.word	0x000124f8
 800dd8c:	10624dd3 	.word	0x10624dd3
 800dd90:	2000ab54 	.word	0x2000ab54
 800dd94:	080165b0 	.word	0x080165b0
 800dd98:	080167e8 	.word	0x080167e8
 800dd9c:	080165ec 	.word	0x080165ec
 800dda0:	08016814 	.word	0x08016814
 800dda4:	2000ab50 	.word	0x2000ab50
 800dda8:	2000ab64 	.word	0x2000ab64
 800ddac:	08016840 	.word	0x08016840
 800ddb0:	08016870 	.word	0x08016870
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ddb4:	4b12      	ldr	r3, [pc, #72]	; (800de00 <tcp_slowtmr+0x570>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d006      	beq.n	800ddcc <tcp_slowtmr+0x53c>
 800ddbe:	4b11      	ldr	r3, [pc, #68]	; (800de04 <tcp_slowtmr+0x574>)
 800ddc0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800ddc4:	4910      	ldr	r1, [pc, #64]	; (800de08 <tcp_slowtmr+0x578>)
 800ddc6:	4811      	ldr	r0, [pc, #68]	; (800de0c <tcp_slowtmr+0x57c>)
 800ddc8:	f007 f826 	bl	8014e18 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	4a0b      	ldr	r2, [pc, #44]	; (800de00 <tcp_slowtmr+0x570>)
 800ddd2:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ddde:	69b9      	ldr	r1, [r7, #24]
 800dde0:	2000      	movs	r0, #0
 800dde2:	f7fe fa51 	bl	800c288 <memp_free>
 800dde6:	e004      	b.n	800ddf2 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d193      	bne.n	800dd20 <tcp_slowtmr+0x490>
    }
  }
}
 800ddf8:	bf00      	nop
 800ddfa:	3728      	adds	r7, #40	; 0x28
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bdb0      	pop	{r4, r5, r7, pc}
 800de00:	2000ab64 	.word	0x2000ab64
 800de04:	080165b0 	.word	0x080165b0
 800de08:	08016898 	.word	0x08016898
 800de0c:	080165ec 	.word	0x080165ec

0800de10 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800de16:	4b2d      	ldr	r3, [pc, #180]	; (800decc <tcp_fasttmr+0xbc>)
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	3301      	adds	r3, #1
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	4b2b      	ldr	r3, [pc, #172]	; (800decc <tcp_fasttmr+0xbc>)
 800de20:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800de22:	4b2b      	ldr	r3, [pc, #172]	; (800ded0 <tcp_fasttmr+0xc0>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800de28:	e048      	b.n	800debc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	7f5a      	ldrb	r2, [r3, #29]
 800de2e:	4b27      	ldr	r3, [pc, #156]	; (800decc <tcp_fasttmr+0xbc>)
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	429a      	cmp	r2, r3
 800de34:	d03f      	beq.n	800deb6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800de36:	4b25      	ldr	r3, [pc, #148]	; (800decc <tcp_fasttmr+0xbc>)
 800de38:	781a      	ldrb	r2, [r3, #0]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	7e9b      	ldrb	r3, [r3, #26]
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d010      	beq.n	800de6c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7e9b      	ldrb	r3, [r3, #26]
 800de4e:	f043 0302 	orr.w	r3, r3, #2
 800de52:	b2da      	uxtb	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f003 f85f 	bl	8010f1c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	7e9b      	ldrb	r3, [r3, #26]
 800de62:	f023 0303 	bic.w	r3, r3, #3
 800de66:	b2da      	uxtb	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7e9b      	ldrb	r3, [r3, #26]
 800de70:	f003 0308 	and.w	r3, r3, #8
 800de74:	2b00      	cmp	r3, #0
 800de76:	d009      	beq.n	800de8c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7e9b      	ldrb	r3, [r3, #26]
 800de7c:	f023 0308 	bic.w	r3, r3, #8
 800de80:	b2da      	uxtb	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7ff fb1e 	bl	800d4c8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00a      	beq.n	800deb0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800de9a:	4b0e      	ldr	r3, [pc, #56]	; (800ded4 <tcp_fasttmr+0xc4>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f819 	bl	800ded8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dea6:	4b0b      	ldr	r3, [pc, #44]	; (800ded4 <tcp_fasttmr+0xc4>)
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d000      	beq.n	800deb0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800deae:	e7b8      	b.n	800de22 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	607b      	str	r3, [r7, #4]
 800deb4:	e002      	b.n	800debc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1b3      	bne.n	800de2a <tcp_fasttmr+0x1a>
    }
  }
}
 800dec2:	bf00      	nop
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	200041fa 	.word	0x200041fa
 800ded0:	2000ab54 	.word	0x2000ab54
 800ded4:	2000ab50 	.word	0x2000ab50

0800ded8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ded8:	b590      	push	{r4, r7, lr}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dee4:	7b5b      	ldrb	r3, [r3, #13]
 800dee6:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deec:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00b      	beq.n	800df16 <tcp_process_refused_data+0x3e>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6918      	ldr	r0, [r3, #16]
 800df08:	2300      	movs	r3, #0
 800df0a:	68ba      	ldr	r2, [r7, #8]
 800df0c:	6879      	ldr	r1, [r7, #4]
 800df0e:	47a0      	blx	r4
 800df10:	4603      	mov	r3, r0
 800df12:	73fb      	strb	r3, [r7, #15]
 800df14:	e007      	b.n	800df26 <tcp_process_refused_data+0x4e>
 800df16:	2300      	movs	r3, #0
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	6879      	ldr	r1, [r7, #4]
 800df1c:	2000      	movs	r0, #0
 800df1e:	f000 f88c 	bl	800e03a <tcp_recv_null>
 800df22:	4603      	mov	r3, r0
 800df24:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800df26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d12a      	bne.n	800df84 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800df2e:	7bbb      	ldrb	r3, [r7, #14]
 800df30:	f003 0320 	and.w	r3, r3, #32
 800df34:	2b00      	cmp	r3, #0
 800df36:	d033      	beq.n	800dfa0 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df3c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800df40:	d005      	beq.n	800df4e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df46:	3301      	adds	r3, #1
 800df48:	b29a      	uxth	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00b      	beq.n	800df70 <tcp_process_refused_data+0x98>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6918      	ldr	r0, [r3, #16]
 800df62:	2300      	movs	r3, #0
 800df64:	2200      	movs	r2, #0
 800df66:	6879      	ldr	r1, [r7, #4]
 800df68:	47a0      	blx	r4
 800df6a:	4603      	mov	r3, r0
 800df6c:	73fb      	strb	r3, [r7, #15]
 800df6e:	e001      	b.n	800df74 <tcp_process_refused_data+0x9c>
 800df70:	2300      	movs	r3, #0
 800df72:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800df74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df78:	f113 0f0d 	cmn.w	r3, #13
 800df7c:	d110      	bne.n	800dfa0 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800df7e:	f06f 030c 	mvn.w	r3, #12
 800df82:	e00e      	b.n	800dfa2 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800df84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df88:	f113 0f0d 	cmn.w	r3, #13
 800df8c:	d102      	bne.n	800df94 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800df8e:	f06f 030c 	mvn.w	r3, #12
 800df92:	e006      	b.n	800dfa2 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800df9a:	f06f 0304 	mvn.w	r3, #4
 800df9e:	e000      	b.n	800dfa2 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd90      	pop	{r4, r7, pc}

0800dfaa <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dfb2:	e007      	b.n	800dfc4 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f809 	bl	800dfd2 <tcp_seg_free>
    seg = next;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1f4      	bne.n	800dfb4 <tcp_segs_free+0xa>
  }
}
 800dfca:	bf00      	nop
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00c      	beq.n	800dffa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d004      	beq.n	800dff2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fe fe9d 	bl	800cd2c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dff2:	6879      	ldr	r1, [r7, #4]
 800dff4:	2002      	movs	r0, #2
 800dff6:	f7fe f947 	bl	800c288 <memp_free>
  }
}
 800dffa:	bf00      	nop
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b084      	sub	sp, #16
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e00a:	2002      	movs	r0, #2
 800e00c:	f7fe f8ea 	bl	800c1e4 <memp_malloc>
 800e010:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d101      	bne.n	800e01c <tcp_seg_copy+0x1a>
    return NULL;
 800e018:	2300      	movs	r3, #0
 800e01a:	e00a      	b.n	800e032 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e01c:	2210      	movs	r2, #16
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f006 fe3e 	bl	8014ca2 <memcpy>
  pbuf_ref(cseg->p);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe ff30 	bl	800ce90 <pbuf_ref>
  return cseg;
 800e030:	68fb      	ldr	r3, [r7, #12]
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b084      	sub	sp, #16
 800e03e:	af00      	add	r7, sp, #0
 800e040:	60f8      	str	r0, [r7, #12]
 800e042:	60b9      	str	r1, [r7, #8]
 800e044:	607a      	str	r2, [r7, #4]
 800e046:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	891b      	ldrh	r3, [r3, #8]
 800e052:	4619      	mov	r1, r3
 800e054:	68b8      	ldr	r0, [r7, #8]
 800e056:	f7ff fbc1 	bl	800d7dc <tcp_recved>
    pbuf_free(p);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7fe fe66 	bl	800cd2c <pbuf_free>
 800e060:	e008      	b.n	800e074 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800e062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d104      	bne.n	800e074 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800e06a:	68b8      	ldr	r0, [r7, #8]
 800e06c:	f7ff fa92 	bl	800d594 <tcp_close>
 800e070:	4603      	mov	r3, r0
 800e072:	e000      	b.n	800e076 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
	...

0800e080 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e08a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	db01      	blt.n	800e096 <tcp_kill_prio+0x16>
 800e092:	79fb      	ldrb	r3, [r7, #7]
 800e094:	e000      	b.n	800e098 <tcp_kill_prio+0x18>
 800e096:	237f      	movs	r3, #127	; 0x7f
 800e098:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0a2:	4b16      	ldr	r3, [pc, #88]	; (800e0fc <tcp_kill_prio+0x7c>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	617b      	str	r3, [r7, #20]
 800e0a8:	e01a      	b.n	800e0e0 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	7d5b      	ldrb	r3, [r3, #21]
 800e0ae:	7afa      	ldrb	r2, [r7, #11]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d312      	bcc.n	800e0da <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e0b4:	4b12      	ldr	r3, [pc, #72]	; (800e100 <tcp_kill_prio+0x80>)
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	6a1b      	ldr	r3, [r3, #32]
 800e0bc:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d80a      	bhi.n	800e0da <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800e0c4:	4b0e      	ldr	r3, [pc, #56]	; (800e100 <tcp_kill_prio+0x80>)
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	6a1b      	ldr	r3, [r3, #32]
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	7d5b      	ldrb	r3, [r3, #21]
 800e0d8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1e1      	bne.n	800e0aa <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e0ec:	6938      	ldr	r0, [r7, #16]
 800e0ee:	f7ff fb1b 	bl	800d728 <tcp_abort>
  }
}
 800e0f2:	bf00      	nop
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	2000ab54 	.word	0x2000ab54
 800e100:	2000ab58 	.word	0x2000ab58

0800e104 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	4603      	mov	r3, r0
 800e10c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	2b08      	cmp	r3, #8
 800e112:	d009      	beq.n	800e128 <tcp_kill_state+0x24>
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	2b09      	cmp	r3, #9
 800e118:	d006      	beq.n	800e128 <tcp_kill_state+0x24>
 800e11a:	4b1a      	ldr	r3, [pc, #104]	; (800e184 <tcp_kill_state+0x80>)
 800e11c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e120:	4919      	ldr	r1, [pc, #100]	; (800e188 <tcp_kill_state+0x84>)
 800e122:	481a      	ldr	r0, [pc, #104]	; (800e18c <tcp_kill_state+0x88>)
 800e124:	f006 fe78 	bl	8014e18 <iprintf>

  inactivity = 0;
 800e128:	2300      	movs	r3, #0
 800e12a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e12c:	2300      	movs	r3, #0
 800e12e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e130:	4b17      	ldr	r3, [pc, #92]	; (800e190 <tcp_kill_state+0x8c>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	617b      	str	r3, [r7, #20]
 800e136:	e017      	b.n	800e168 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	7d1b      	ldrb	r3, [r3, #20]
 800e13c:	79fa      	ldrb	r2, [r7, #7]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d10f      	bne.n	800e162 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e142:	4b14      	ldr	r3, [pc, #80]	; (800e194 <tcp_kill_state+0x90>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	6a1b      	ldr	r3, [r3, #32]
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d807      	bhi.n	800e162 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e152:	4b10      	ldr	r3, [pc, #64]	; (800e194 <tcp_kill_state+0x90>)
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	6a1b      	ldr	r3, [r3, #32]
 800e15a:	1ad3      	subs	r3, r2, r3
 800e15c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1e4      	bne.n	800e138 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d003      	beq.n	800e17c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e174:	2100      	movs	r1, #0
 800e176:	6938      	ldr	r0, [r7, #16]
 800e178:	f7ff fa24 	bl	800d5c4 <tcp_abandon>
  }
}
 800e17c:	bf00      	nop
 800e17e:	3718      	adds	r7, #24
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	080165b0 	.word	0x080165b0
 800e188:	080168c0 	.word	0x080168c0
 800e18c:	080165ec 	.word	0x080165ec
 800e190:	2000ab54 	.word	0x2000ab54
 800e194:	2000ab58 	.word	0x2000ab58

0800e198 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1a6:	4b12      	ldr	r3, [pc, #72]	; (800e1f0 <tcp_kill_timewait+0x58>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	60fb      	str	r3, [r7, #12]
 800e1ac:	e012      	b.n	800e1d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e1ae:	4b11      	ldr	r3, [pc, #68]	; (800e1f4 <tcp_kill_timewait+0x5c>)
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6a1b      	ldr	r3, [r3, #32]
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d807      	bhi.n	800e1ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e1be:	4b0d      	ldr	r3, [pc, #52]	; (800e1f4 <tcp_kill_timewait+0x5c>)
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d1e9      	bne.n	800e1ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e1e0:	68b8      	ldr	r0, [r7, #8]
 800e1e2:	f7ff faa1 	bl	800d728 <tcp_abort>
  }
}
 800e1e6:	bf00      	nop
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	2000ab64 	.word	0x2000ab64
 800e1f4:	2000ab58 	.word	0x2000ab58

0800e1f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	4603      	mov	r3, r0
 800e200:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e202:	2000      	movs	r0, #0
 800e204:	f7fd ffee 	bl	800c1e4 <memp_malloc>
 800e208:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d124      	bne.n	800e25a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e210:	f7ff ffc2 	bl	800e198 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e214:	2000      	movs	r0, #0
 800e216:	f7fd ffe5 	bl	800c1e4 <memp_malloc>
 800e21a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d11b      	bne.n	800e25a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e222:	2009      	movs	r0, #9
 800e224:	f7ff ff6e 	bl	800e104 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e228:	2000      	movs	r0, #0
 800e22a:	f7fd ffdb 	bl	800c1e4 <memp_malloc>
 800e22e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d111      	bne.n	800e25a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e236:	2008      	movs	r0, #8
 800e238:	f7ff ff64 	bl	800e104 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e23c:	2000      	movs	r0, #0
 800e23e:	f7fd ffd1 	bl	800c1e4 <memp_malloc>
 800e242:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d107      	bne.n	800e25a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e24a:	79fb      	ldrb	r3, [r7, #7]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7ff ff17 	bl	800e080 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e252:	2000      	movs	r0, #0
 800e254:	f7fd ffc6 	bl	800c1e4 <memp_malloc>
 800e258:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d03f      	beq.n	800e2e0 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e260:	2298      	movs	r2, #152	; 0x98
 800e262:	2100      	movs	r1, #0
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f006 fd27 	bl	8014cb8 <memset>
    pcb->prio = prio;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	79fa      	ldrb	r2, [r7, #7]
 800e26e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e280:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	22ff      	movs	r2, #255	; 0xff
 800e28e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e296:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2206      	movs	r2, #6
 800e29c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2206      	movs	r2, #6
 800e2a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2ac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	; (800e2ec <tcp_alloc+0xf4>)
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e2be:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <tcp_alloc+0xf8>)
 800e2c0:	781a      	ldrb	r2, [r3, #0]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e2cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	4a08      	ldr	r2, [pc, #32]	; (800e2f4 <tcp_alloc+0xfc>)
 800e2d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	4a07      	ldr	r2, [pc, #28]	; (800e2f8 <tcp_alloc+0x100>)
 800e2dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	2000ab58 	.word	0x2000ab58
 800e2f0:	200041fa 	.word	0x200041fa
 800e2f4:	0800e03b 	.word	0x0800e03b
 800e2f8:	006ddd00 	.word	0x006ddd00

0800e2fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7d1b      	ldrb	r3, [r3, #20]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d034      	beq.n	800e376 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e310:	2b0a      	cmp	r3, #10
 800e312:	d030      	beq.n	800e376 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d02c      	beq.n	800e376 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e320:	2b00      	cmp	r3, #0
 800e322:	d007      	beq.n	800e334 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fe fcff 	bl	800cd2c <pbuf_free>
      pcb->refused_data = NULL;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff fe36 	bl	800dfaa <tcp_segs_free>
    pcb->ooseq = NULL;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e34a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e350:	4618      	mov	r0, r3
 800e352:	f7ff fe2a 	bl	800dfaa <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff fe25 	bl	800dfaa <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	669a      	str	r2, [r3, #104]	; 0x68
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2200      	movs	r2, #0
 800e372:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800e376:	bf00      	nop
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
	...

0800e380 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	429a      	cmp	r2, r3
 800e392:	d105      	bne.n	800e3a0 <tcp_pcb_remove+0x20>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	68da      	ldr	r2, [r3, #12]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	e013      	b.n	800e3c8 <tcp_pcb_remove+0x48>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	60fb      	str	r3, [r7, #12]
 800e3a6:	e00c      	b.n	800e3c2 <tcp_pcb_remove+0x42>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	683a      	ldr	r2, [r7, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d104      	bne.n	800e3bc <tcp_pcb_remove+0x3c>
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	68da      	ldr	r2, [r3, #12]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	60da      	str	r2, [r3, #12]
 800e3ba:	e005      	b.n	800e3c8 <tcp_pcb_remove+0x48>
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	60fb      	str	r3, [r7, #12]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1ef      	bne.n	800e3a8 <tcp_pcb_remove+0x28>
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e3ce:	6838      	ldr	r0, [r7, #0]
 800e3d0:	f7ff ff94 	bl	800e2fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	7d1b      	ldrb	r3, [r3, #20]
 800e3d8:	2b0a      	cmp	r3, #10
 800e3da:	d013      	beq.n	800e404 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d00f      	beq.n	800e404 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	7e9b      	ldrb	r3, [r3, #26]
 800e3e8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d009      	beq.n	800e404 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	7e9b      	ldrb	r3, [r3, #26]
 800e3f4:	f043 0302 	orr.w	r3, r3, #2
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e3fe:	6838      	ldr	r0, [r7, #0]
 800e400:	f002 fd8c 	bl	8010f1c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	7d1b      	ldrb	r3, [r3, #20]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d020      	beq.n	800e44e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e410:	2b00      	cmp	r3, #0
 800e412:	d006      	beq.n	800e422 <tcp_pcb_remove+0xa2>
 800e414:	4b13      	ldr	r3, [pc, #76]	; (800e464 <tcp_pcb_remove+0xe4>)
 800e416:	f240 7253 	movw	r2, #1875	; 0x753
 800e41a:	4913      	ldr	r1, [pc, #76]	; (800e468 <tcp_pcb_remove+0xe8>)
 800e41c:	4813      	ldr	r0, [pc, #76]	; (800e46c <tcp_pcb_remove+0xec>)
 800e41e:	f006 fcfb 	bl	8014e18 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e426:	2b00      	cmp	r3, #0
 800e428:	d006      	beq.n	800e438 <tcp_pcb_remove+0xb8>
 800e42a:	4b0e      	ldr	r3, [pc, #56]	; (800e464 <tcp_pcb_remove+0xe4>)
 800e42c:	f240 7254 	movw	r2, #1876	; 0x754
 800e430:	490f      	ldr	r1, [pc, #60]	; (800e470 <tcp_pcb_remove+0xf0>)
 800e432:	480e      	ldr	r0, [pc, #56]	; (800e46c <tcp_pcb_remove+0xec>)
 800e434:	f006 fcf0 	bl	8014e18 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d006      	beq.n	800e44e <tcp_pcb_remove+0xce>
 800e440:	4b08      	ldr	r3, [pc, #32]	; (800e464 <tcp_pcb_remove+0xe4>)
 800e442:	f240 7256 	movw	r2, #1878	; 0x756
 800e446:	490b      	ldr	r1, [pc, #44]	; (800e474 <tcp_pcb_remove+0xf4>)
 800e448:	4808      	ldr	r0, [pc, #32]	; (800e46c <tcp_pcb_remove+0xec>)
 800e44a:	f006 fce5 	bl	8014e18 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	2200      	movs	r2, #0
 800e452:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	2200      	movs	r2, #0
 800e458:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e45a:	bf00      	nop
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	080165b0 	.word	0x080165b0
 800e468:	08016968 	.word	0x08016968
 800e46c:	080165ec 	.word	0x080165ec
 800e470:	08016980 	.word	0x08016980
 800e474:	0801699c 	.word	0x0801699c

0800e478 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e480:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <tcp_next_iss+0x28>)
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	4b07      	ldr	r3, [pc, #28]	; (800e4a4 <tcp_next_iss+0x2c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4413      	add	r3, r2
 800e48a:	4a05      	ldr	r2, [pc, #20]	; (800e4a0 <tcp_next_iss+0x28>)
 800e48c:	6013      	str	r3, [r2, #0]
  return iss;
 800e48e:	4b04      	ldr	r3, [pc, #16]	; (800e4a0 <tcp_next_iss+0x28>)
 800e490:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e492:	4618      	mov	r0, r3
 800e494:	370c      	adds	r7, #12
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	2000011c 	.word	0x2000011c
 800e4a4:	2000ab58 	.word	0x2000ab58

0800e4a8 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	6039      	str	r1, [r7, #0]
 800e4b2:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800e4b4:	6838      	ldr	r0, [r7, #0]
 800e4b6:	f004 fc4f 	bl	8012d58 <ip4_route>
 800e4ba:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800e4c2:	88fb      	ldrh	r3, [r7, #6]
 800e4c4:	e010      	b.n	800e4e8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e4ca:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e4cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d008      	beq.n	800e4e6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e4d4:	897b      	ldrh	r3, [r7, #10]
 800e4d6:	3b28      	subs	r3, #40	; 0x28
 800e4d8:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e4da:	893a      	ldrh	r2, [r7, #8]
 800e4dc:	88fb      	ldrh	r3, [r7, #6]
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	bf28      	it	cs
 800e4e2:	4613      	movcs	r3, r2
 800e4e4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e4e6:	88fb      	ldrh	r3, [r7, #6]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e4fe:	e011      	b.n	800e524 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d108      	bne.n	800e51e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f7ff f908 	bl	800d728 <tcp_abort>
      pcb = next;
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	60fb      	str	r3, [r7, #12]
 800e51c:	e002      	b.n	800e524 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1ea      	bne.n	800e500 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e52a:	bf00      	nop
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
	...

0800e534 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d02c      	beq.n	800e59e <tcp_netif_ip_addr_changed+0x6a>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d028      	beq.n	800e59e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e54c:	4b16      	ldr	r3, [pc, #88]	; (800e5a8 <tcp_netif_ip_addr_changed+0x74>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4619      	mov	r1, r3
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff ffcc 	bl	800e4f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e558:	4b14      	ldr	r3, [pc, #80]	; (800e5ac <tcp_netif_ip_addr_changed+0x78>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4619      	mov	r1, r3
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7ff ffc6 	bl	800e4f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d019      	beq.n	800e59e <tcp_netif_ip_addr_changed+0x6a>
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d015      	beq.n	800e59e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e572:	4b0f      	ldr	r3, [pc, #60]	; (800e5b0 <tcp_netif_ip_addr_changed+0x7c>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	60fb      	str	r3, [r7, #12]
 800e578:	e00e      	b.n	800e598 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d103      	bne.n	800e594 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	60fb      	str	r3, [r7, #12]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1ed      	bne.n	800e57a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e59e:	bf00      	nop
 800e5a0:	3710      	adds	r7, #16
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	2000ab54 	.word	0x2000ab54
 800e5ac:	2000ab60 	.word	0x2000ab60
 800e5b0:	2000ab5c 	.word	0x2000ab5c

0800e5b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e5b4:	b590      	push	{r4, r7, lr}
 800e5b6:	b08b      	sub	sp, #44	; 0x2c
 800e5b8:	af02      	add	r7, sp, #8
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	4a82      	ldr	r2, [pc, #520]	; (800e7cc <tcp_input+0x218>)
 800e5c4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	895b      	ldrh	r3, [r3, #10]
 800e5ca:	2b13      	cmp	r3, #19
 800e5cc:	f240 838a 	bls.w	800ece4 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e5d0:	4b7f      	ldr	r3, [pc, #508]	; (800e7d0 <tcp_input+0x21c>)
 800e5d2:	695a      	ldr	r2, [r3, #20]
 800e5d4:	4b7e      	ldr	r3, [pc, #504]	; (800e7d0 <tcp_input+0x21c>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	4610      	mov	r0, r2
 800e5dc:	f004 fe2e 	bl	801323c <ip4_addr_isbroadcast_u32>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f040 8380 	bne.w	800ece8 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e5e8:	4b79      	ldr	r3, [pc, #484]	; (800e7d0 <tcp_input+0x21c>)
 800e5ea:	695b      	ldr	r3, [r3, #20]
 800e5ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e5f0:	2be0      	cmp	r3, #224	; 0xe0
 800e5f2:	f000 8379 	beq.w	800ece8 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e5f6:	4b75      	ldr	r3, [pc, #468]	; (800e7cc <tcp_input+0x218>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	899b      	ldrh	r3, [r3, #12]
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fd fa04 	bl	800ba0c <lwip_htons>
 800e604:	4603      	mov	r3, r0
 800e606:	0b1b      	lsrs	r3, r3, #12
 800e608:	b29b      	uxth	r3, r3
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e610:	7cbb      	ldrb	r3, [r7, #18]
 800e612:	2b13      	cmp	r3, #19
 800e614:	f240 8368 	bls.w	800ece8 <tcp_input+0x734>
 800e618:	7cbb      	ldrb	r3, [r7, #18]
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	891b      	ldrh	r3, [r3, #8]
 800e620:	429a      	cmp	r2, r3
 800e622:	f200 8361 	bhi.w	800ece8 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e626:	7cbb      	ldrb	r3, [r7, #18]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	3b14      	subs	r3, #20
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	4b69      	ldr	r3, [pc, #420]	; (800e7d4 <tcp_input+0x220>)
 800e630:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e632:	4b69      	ldr	r3, [pc, #420]	; (800e7d8 <tcp_input+0x224>)
 800e634:	2200      	movs	r2, #0
 800e636:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	895a      	ldrh	r2, [r3, #10]
 800e63c:	7cbb      	ldrb	r3, [r7, #18]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	429a      	cmp	r2, r3
 800e642:	d30d      	bcc.n	800e660 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e644:	4b63      	ldr	r3, [pc, #396]	; (800e7d4 <tcp_input+0x220>)
 800e646:	881a      	ldrh	r2, [r3, #0]
 800e648:	4b64      	ldr	r3, [pc, #400]	; (800e7dc <tcp_input+0x228>)
 800e64a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800e64c:	7cbb      	ldrb	r3, [r7, #18]
 800e64e:	b29b      	uxth	r3, r3
 800e650:	425b      	negs	r3, r3
 800e652:	b29b      	uxth	r3, r3
 800e654:	b21b      	sxth	r3, r3
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7fe fb43 	bl	800cce4 <pbuf_header>
 800e65e:	e055      	b.n	800e70c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d105      	bne.n	800e674 <tcp_input+0xc0>
 800e668:	4b5d      	ldr	r3, [pc, #372]	; (800e7e0 <tcp_input+0x22c>)
 800e66a:	22b2      	movs	r2, #178	; 0xb2
 800e66c:	495d      	ldr	r1, [pc, #372]	; (800e7e4 <tcp_input+0x230>)
 800e66e:	485e      	ldr	r0, [pc, #376]	; (800e7e8 <tcp_input+0x234>)
 800e670:	f006 fbd2 	bl	8014e18 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e674:	f06f 0113 	mvn.w	r1, #19
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7fe fb33 	bl	800cce4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	895a      	ldrh	r2, [r3, #10]
 800e682:	4b56      	ldr	r3, [pc, #344]	; (800e7dc <tcp_input+0x228>)
 800e684:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e686:	4b53      	ldr	r3, [pc, #332]	; (800e7d4 <tcp_input+0x220>)
 800e688:	881a      	ldrh	r2, [r3, #0]
 800e68a:	4b54      	ldr	r3, [pc, #336]	; (800e7dc <tcp_input+0x228>)
 800e68c:	881b      	ldrh	r3, [r3, #0]
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e692:	4b52      	ldr	r3, [pc, #328]	; (800e7dc <tcp_input+0x228>)
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	425b      	negs	r3, r3
 800e698:	b29b      	uxth	r3, r3
 800e69a:	b21b      	sxth	r3, r3
 800e69c:	4619      	mov	r1, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7fe fb20 	bl	800cce4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	895b      	ldrh	r3, [r3, #10]
 800e6aa:	8a3a      	ldrh	r2, [r7, #16]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	f200 831d 	bhi.w	800ecec <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	4a47      	ldr	r2, [pc, #284]	; (800e7d8 <tcp_input+0x224>)
 800e6ba:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	8a3b      	ldrh	r3, [r7, #16]
 800e6c2:	425b      	negs	r3, r3
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	b21b      	sxth	r3, r3
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	f7fe fb0a 	bl	800cce4 <pbuf_header>
    p->tot_len -= opt2len;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	891a      	ldrh	r2, [r3, #8]
 800e6d4:	8a3b      	ldrh	r3, [r7, #16]
 800e6d6:	1ad3      	subs	r3, r2, r3
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	895b      	ldrh	r3, [r3, #10]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d005      	beq.n	800e6f2 <tcp_input+0x13e>
 800e6e6:	4b3e      	ldr	r3, [pc, #248]	; (800e7e0 <tcp_input+0x22c>)
 800e6e8:	22cf      	movs	r2, #207	; 0xcf
 800e6ea:	4940      	ldr	r1, [pc, #256]	; (800e7ec <tcp_input+0x238>)
 800e6ec:	483e      	ldr	r0, [pc, #248]	; (800e7e8 <tcp_input+0x234>)
 800e6ee:	f006 fb93 	bl	8014e18 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	891a      	ldrh	r2, [r3, #8]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	891b      	ldrh	r3, [r3, #8]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d005      	beq.n	800e70c <tcp_input+0x158>
 800e700:	4b37      	ldr	r3, [pc, #220]	; (800e7e0 <tcp_input+0x22c>)
 800e702:	22d0      	movs	r2, #208	; 0xd0
 800e704:	493a      	ldr	r1, [pc, #232]	; (800e7f0 <tcp_input+0x23c>)
 800e706:	4838      	ldr	r0, [pc, #224]	; (800e7e8 <tcp_input+0x234>)
 800e708:	f006 fb86 	bl	8014e18 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e70c:	4b2f      	ldr	r3, [pc, #188]	; (800e7cc <tcp_input+0x218>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	b29a      	uxth	r2, r3
 800e714:	4b2d      	ldr	r3, [pc, #180]	; (800e7cc <tcp_input+0x218>)
 800e716:	681c      	ldr	r4, [r3, #0]
 800e718:	4610      	mov	r0, r2
 800e71a:	f7fd f977 	bl	800ba0c <lwip_htons>
 800e71e:	4603      	mov	r3, r0
 800e720:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e722:	4b2a      	ldr	r3, [pc, #168]	; (800e7cc <tcp_input+0x218>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	885b      	ldrh	r3, [r3, #2]
 800e728:	b29a      	uxth	r2, r3
 800e72a:	4b28      	ldr	r3, [pc, #160]	; (800e7cc <tcp_input+0x218>)
 800e72c:	681c      	ldr	r4, [r3, #0]
 800e72e:	4610      	mov	r0, r2
 800e730:	f7fd f96c 	bl	800ba0c <lwip_htons>
 800e734:	4603      	mov	r3, r0
 800e736:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e738:	4b24      	ldr	r3, [pc, #144]	; (800e7cc <tcp_input+0x218>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	4b23      	ldr	r3, [pc, #140]	; (800e7cc <tcp_input+0x218>)
 800e740:	681c      	ldr	r4, [r3, #0]
 800e742:	4610      	mov	r0, r2
 800e744:	f7fd f970 	bl	800ba28 <lwip_htonl>
 800e748:	4603      	mov	r3, r0
 800e74a:	6063      	str	r3, [r4, #4]
 800e74c:	6863      	ldr	r3, [r4, #4]
 800e74e:	4a29      	ldr	r2, [pc, #164]	; (800e7f4 <tcp_input+0x240>)
 800e750:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e752:	4b1e      	ldr	r3, [pc, #120]	; (800e7cc <tcp_input+0x218>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	689a      	ldr	r2, [r3, #8]
 800e758:	4b1c      	ldr	r3, [pc, #112]	; (800e7cc <tcp_input+0x218>)
 800e75a:	681c      	ldr	r4, [r3, #0]
 800e75c:	4610      	mov	r0, r2
 800e75e:	f7fd f963 	bl	800ba28 <lwip_htonl>
 800e762:	4603      	mov	r3, r0
 800e764:	60a3      	str	r3, [r4, #8]
 800e766:	68a3      	ldr	r3, [r4, #8]
 800e768:	4a23      	ldr	r2, [pc, #140]	; (800e7f8 <tcp_input+0x244>)
 800e76a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e76c:	4b17      	ldr	r3, [pc, #92]	; (800e7cc <tcp_input+0x218>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	89db      	ldrh	r3, [r3, #14]
 800e772:	b29a      	uxth	r2, r3
 800e774:	4b15      	ldr	r3, [pc, #84]	; (800e7cc <tcp_input+0x218>)
 800e776:	681c      	ldr	r4, [r3, #0]
 800e778:	4610      	mov	r0, r2
 800e77a:	f7fd f947 	bl	800ba0c <lwip_htons>
 800e77e:	4603      	mov	r3, r0
 800e780:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e782:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <tcp_input+0x218>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	899b      	ldrh	r3, [r3, #12]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fd f93e 	bl	800ba0c <lwip_htons>
 800e790:	4603      	mov	r3, r0
 800e792:	b2db      	uxtb	r3, r3
 800e794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e798:	b2da      	uxtb	r2, r3
 800e79a:	4b18      	ldr	r3, [pc, #96]	; (800e7fc <tcp_input+0x248>)
 800e79c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	891a      	ldrh	r2, [r3, #8]
 800e7a2:	4b16      	ldr	r3, [pc, #88]	; (800e7fc <tcp_input+0x248>)
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	f003 0303 	and.w	r3, r3, #3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bf14      	ite	ne
 800e7ae:	2301      	movne	r3, #1
 800e7b0:	2300      	moveq	r3, #0
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	4413      	add	r3, r2
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	4b11      	ldr	r3, [pc, #68]	; (800e800 <tcp_input+0x24c>)
 800e7bc:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7c2:	4b10      	ldr	r3, [pc, #64]	; (800e804 <tcp_input+0x250>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	61fb      	str	r3, [r7, #28]
 800e7c8:	e082      	b.n	800e8d0 <tcp_input+0x31c>
 800e7ca:	bf00      	nop
 800e7cc:	2000420c 	.word	0x2000420c
 800e7d0:	200074c8 	.word	0x200074c8
 800e7d4:	20004210 	.word	0x20004210
 800e7d8:	20004214 	.word	0x20004214
 800e7dc:	20004212 	.word	0x20004212
 800e7e0:	080169b4 	.word	0x080169b4
 800e7e4:	080169e8 	.word	0x080169e8
 800e7e8:	080169f8 	.word	0x080169f8
 800e7ec:	08016a20 	.word	0x08016a20
 800e7f0:	08016a2c 	.word	0x08016a2c
 800e7f4:	2000421c 	.word	0x2000421c
 800e7f8:	20004220 	.word	0x20004220
 800e7fc:	20004228 	.word	0x20004228
 800e800:	20004226 	.word	0x20004226
 800e804:	2000ab54 	.word	0x2000ab54
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	7d1b      	ldrb	r3, [r3, #20]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d105      	bne.n	800e81c <tcp_input+0x268>
 800e810:	4b8f      	ldr	r3, [pc, #572]	; (800ea50 <tcp_input+0x49c>)
 800e812:	22e2      	movs	r2, #226	; 0xe2
 800e814:	498f      	ldr	r1, [pc, #572]	; (800ea54 <tcp_input+0x4a0>)
 800e816:	4890      	ldr	r0, [pc, #576]	; (800ea58 <tcp_input+0x4a4>)
 800e818:	f006 fafe 	bl	8014e18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	7d1b      	ldrb	r3, [r3, #20]
 800e820:	2b0a      	cmp	r3, #10
 800e822:	d105      	bne.n	800e830 <tcp_input+0x27c>
 800e824:	4b8a      	ldr	r3, [pc, #552]	; (800ea50 <tcp_input+0x49c>)
 800e826:	22e3      	movs	r2, #227	; 0xe3
 800e828:	498c      	ldr	r1, [pc, #560]	; (800ea5c <tcp_input+0x4a8>)
 800e82a:	488b      	ldr	r0, [pc, #556]	; (800ea58 <tcp_input+0x4a4>)
 800e82c:	f006 faf4 	bl	8014e18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d105      	bne.n	800e844 <tcp_input+0x290>
 800e838:	4b85      	ldr	r3, [pc, #532]	; (800ea50 <tcp_input+0x49c>)
 800e83a:	22e4      	movs	r2, #228	; 0xe4
 800e83c:	4988      	ldr	r1, [pc, #544]	; (800ea60 <tcp_input+0x4ac>)
 800e83e:	4886      	ldr	r0, [pc, #536]	; (800ea58 <tcp_input+0x4a4>)
 800e840:	f006 faea 	bl	8014e18 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	8b1a      	ldrh	r2, [r3, #24]
 800e848:	4b86      	ldr	r3, [pc, #536]	; (800ea64 <tcp_input+0x4b0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	881b      	ldrh	r3, [r3, #0]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	429a      	cmp	r2, r3
 800e852:	d138      	bne.n	800e8c6 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	8ada      	ldrh	r2, [r3, #22]
 800e858:	4b82      	ldr	r3, [pc, #520]	; (800ea64 <tcp_input+0x4b0>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	885b      	ldrh	r3, [r3, #2]
 800e85e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e860:	429a      	cmp	r2, r3
 800e862:	d130      	bne.n	800e8c6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	4b7f      	ldr	r3, [pc, #508]	; (800ea68 <tcp_input+0x4b4>)
 800e86a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d12a      	bne.n	800e8c6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	4b7c      	ldr	r3, [pc, #496]	; (800ea68 <tcp_input+0x4b4>)
 800e876:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e878:	429a      	cmp	r2, r3
 800e87a:	d124      	bne.n	800e8c6 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	69fa      	ldr	r2, [r7, #28]
 800e882:	429a      	cmp	r2, r3
 800e884:	d105      	bne.n	800e892 <tcp_input+0x2de>
 800e886:	4b72      	ldr	r3, [pc, #456]	; (800ea50 <tcp_input+0x49c>)
 800e888:	22ec      	movs	r2, #236	; 0xec
 800e88a:	4978      	ldr	r1, [pc, #480]	; (800ea6c <tcp_input+0x4b8>)
 800e88c:	4872      	ldr	r0, [pc, #456]	; (800ea58 <tcp_input+0x4a4>)
 800e88e:	f006 fac3 	bl	8014e18 <iprintf>
      if (prev != NULL) {
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00a      	beq.n	800e8ae <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	68da      	ldr	r2, [r3, #12]
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e8a0:	4b73      	ldr	r3, [pc, #460]	; (800ea70 <tcp_input+0x4bc>)
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e8a8:	4a71      	ldr	r2, [pc, #452]	; (800ea70 <tcp_input+0x4bc>)
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	69fa      	ldr	r2, [r7, #28]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d10f      	bne.n	800e8d8 <tcp_input+0x324>
 800e8b8:	4b65      	ldr	r3, [pc, #404]	; (800ea50 <tcp_input+0x49c>)
 800e8ba:	22f4      	movs	r2, #244	; 0xf4
 800e8bc:	496d      	ldr	r1, [pc, #436]	; (800ea74 <tcp_input+0x4c0>)
 800e8be:	4866      	ldr	r0, [pc, #408]	; (800ea58 <tcp_input+0x4a4>)
 800e8c0:	f006 faaa 	bl	8014e18 <iprintf>
      break;
 800e8c4:	e008      	b.n	800e8d8 <tcp_input+0x324>
    }
    prev = pcb;
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d198      	bne.n	800e808 <tcp_input+0x254>
 800e8d6:	e000      	b.n	800e8da <tcp_input+0x326>
      break;
 800e8d8:	bf00      	nop
  }

  if (pcb == NULL) {
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d173      	bne.n	800e9c8 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8e0:	4b65      	ldr	r3, [pc, #404]	; (800ea78 <tcp_input+0x4c4>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	61fb      	str	r3, [r7, #28]
 800e8e6:	e02f      	b.n	800e948 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	7d1b      	ldrb	r3, [r3, #20]
 800e8ec:	2b0a      	cmp	r3, #10
 800e8ee:	d005      	beq.n	800e8fc <tcp_input+0x348>
 800e8f0:	4b57      	ldr	r3, [pc, #348]	; (800ea50 <tcp_input+0x49c>)
 800e8f2:	22fe      	movs	r2, #254	; 0xfe
 800e8f4:	4961      	ldr	r1, [pc, #388]	; (800ea7c <tcp_input+0x4c8>)
 800e8f6:	4858      	ldr	r0, [pc, #352]	; (800ea58 <tcp_input+0x4a4>)
 800e8f8:	f006 fa8e 	bl	8014e18 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	8b1a      	ldrh	r2, [r3, #24]
 800e900:	4b58      	ldr	r3, [pc, #352]	; (800ea64 <tcp_input+0x4b0>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	b29b      	uxth	r3, r3
 800e908:	429a      	cmp	r2, r3
 800e90a:	d11a      	bne.n	800e942 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	8ada      	ldrh	r2, [r3, #22]
 800e910:	4b54      	ldr	r3, [pc, #336]	; (800ea64 <tcp_input+0x4b0>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	885b      	ldrh	r3, [r3, #2]
 800e916:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e918:	429a      	cmp	r2, r3
 800e91a:	d112      	bne.n	800e942 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	4b51      	ldr	r3, [pc, #324]	; (800ea68 <tcp_input+0x4b4>)
 800e922:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e924:	429a      	cmp	r2, r3
 800e926:	d10c      	bne.n	800e942 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	4b4e      	ldr	r3, [pc, #312]	; (800ea68 <tcp_input+0x4b4>)
 800e92e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e930:	429a      	cmp	r2, r3
 800e932:	d106      	bne.n	800e942 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e934:	69f8      	ldr	r0, [r7, #28]
 800e936:	f000 fb15 	bl	800ef64 <tcp_timewait_input>
        pbuf_free(p);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7fe f9f6 	bl	800cd2c <pbuf_free>
        return;
 800e940:	e1da      	b.n	800ecf8 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	61fb      	str	r3, [r7, #28]
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d1cc      	bne.n	800e8e8 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e94e:	2300      	movs	r3, #0
 800e950:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e952:	4b4b      	ldr	r3, [pc, #300]	; (800ea80 <tcp_input+0x4cc>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	617b      	str	r3, [r7, #20]
 800e958:	e019      	b.n	800e98e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	8ada      	ldrh	r2, [r3, #22]
 800e95e:	4b41      	ldr	r3, [pc, #260]	; (800ea64 <tcp_input+0x4b0>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	885b      	ldrh	r3, [r3, #2]
 800e964:	b29b      	uxth	r3, r3
 800e966:	429a      	cmp	r2, r3
 800e968:	d10c      	bne.n	800e984 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	4b3e      	ldr	r3, [pc, #248]	; (800ea68 <tcp_input+0x4b4>)
 800e970:	695b      	ldr	r3, [r3, #20]
 800e972:	429a      	cmp	r2, r3
 800e974:	d00f      	beq.n	800e996 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00d      	beq.n	800e998 <tcp_input+0x3e4>
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d009      	beq.n	800e998 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	617b      	str	r3, [r7, #20]
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1e2      	bne.n	800e95a <tcp_input+0x3a6>
 800e994:	e000      	b.n	800e998 <tcp_input+0x3e4>
            break;
 800e996:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d014      	beq.n	800e9c8 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00a      	beq.n	800e9ba <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	68da      	ldr	r2, [r3, #12]
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e9ac:	4b34      	ldr	r3, [pc, #208]	; (800ea80 <tcp_input+0x4cc>)
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e9b4:	4a32      	ldr	r2, [pc, #200]	; (800ea80 <tcp_input+0x4cc>)
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e9ba:	6978      	ldr	r0, [r7, #20]
 800e9bc:	f000 f9f0 	bl	800eda0 <tcp_listen_input>
      pbuf_free(p);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7fe f9b3 	bl	800cd2c <pbuf_free>
      return;
 800e9c6:	e197      	b.n	800ecf8 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f000 8164 	beq.w	800ec98 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e9d0:	4b2c      	ldr	r3, [pc, #176]	; (800ea84 <tcp_input+0x4d0>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	891a      	ldrh	r2, [r3, #8]
 800e9da:	4b2a      	ldr	r3, [pc, #168]	; (800ea84 <tcp_input+0x4d0>)
 800e9dc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e9de:	4a29      	ldr	r2, [pc, #164]	; (800ea84 <tcp_input+0x4d0>)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e9e4:	4b1f      	ldr	r3, [pc, #124]	; (800ea64 <tcp_input+0x4b0>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a26      	ldr	r2, [pc, #152]	; (800ea84 <tcp_input+0x4d0>)
 800e9ea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e9ec:	4b26      	ldr	r3, [pc, #152]	; (800ea88 <tcp_input+0x4d4>)
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e9f2:	4b26      	ldr	r3, [pc, #152]	; (800ea8c <tcp_input+0x4d8>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e9f8:	4b25      	ldr	r3, [pc, #148]	; (800ea90 <tcp_input+0x4dc>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e9fe:	4b25      	ldr	r3, [pc, #148]	; (800ea94 <tcp_input+0x4e0>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	f003 0308 	and.w	r3, r3, #8
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d006      	beq.n	800ea18 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7b5b      	ldrb	r3, [r3, #13]
 800ea0e:	f043 0301 	orr.w	r3, r3, #1
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d03d      	beq.n	800ea9c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea20:	69f8      	ldr	r0, [r7, #28]
 800ea22:	f7ff fa59 	bl	800ded8 <tcp_process_refused_data>
 800ea26:	4603      	mov	r3, r0
 800ea28:	f113 0f0d 	cmn.w	r3, #13
 800ea2c:	d007      	beq.n	800ea3e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d032      	beq.n	800ea9c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea36:	4b18      	ldr	r3, [pc, #96]	; (800ea98 <tcp_input+0x4e4>)
 800ea38:	881b      	ldrh	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d02e      	beq.n	800ea9c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f040 8108 	bne.w	800ec58 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ea48:	69f8      	ldr	r0, [r7, #28]
 800ea4a:	f002 fa0b 	bl	8010e64 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ea4e:	e103      	b.n	800ec58 <tcp_input+0x6a4>
 800ea50:	080169b4 	.word	0x080169b4
 800ea54:	08016a4c 	.word	0x08016a4c
 800ea58:	080169f8 	.word	0x080169f8
 800ea5c:	08016a74 	.word	0x08016a74
 800ea60:	08016aa0 	.word	0x08016aa0
 800ea64:	2000420c 	.word	0x2000420c
 800ea68:	200074c8 	.word	0x200074c8
 800ea6c:	08016ac8 	.word	0x08016ac8
 800ea70:	2000ab54 	.word	0x2000ab54
 800ea74:	08016af4 	.word	0x08016af4
 800ea78:	2000ab64 	.word	0x2000ab64
 800ea7c:	08016b20 	.word	0x08016b20
 800ea80:	2000ab5c 	.word	0x2000ab5c
 800ea84:	200041fc 	.word	0x200041fc
 800ea88:	2000422c 	.word	0x2000422c
 800ea8c:	20004229 	.word	0x20004229
 800ea90:	20004224 	.word	0x20004224
 800ea94:	20004228 	.word	0x20004228
 800ea98:	20004226 	.word	0x20004226
      }
    }
    tcp_input_pcb = pcb;
 800ea9c:	4a98      	ldr	r2, [pc, #608]	; (800ed00 <tcp_input+0x74c>)
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eaa2:	69f8      	ldr	r0, [r7, #28]
 800eaa4:	f000 fac6 	bl	800f034 <tcp_process>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eaac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eab0:	f113 0f0d 	cmn.w	r3, #13
 800eab4:	f000 80d2 	beq.w	800ec5c <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800eab8:	4b92      	ldr	r3, [pc, #584]	; (800ed04 <tcp_input+0x750>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	f003 0308 	and.w	r3, r3, #8
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d016      	beq.n	800eaf2 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d008      	beq.n	800eae0 <tcp_input+0x52c>
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ead4:	69fa      	ldr	r2, [r7, #28]
 800ead6:	6912      	ldr	r2, [r2, #16]
 800ead8:	f06f 010d 	mvn.w	r1, #13
 800eadc:	4610      	mov	r0, r2
 800eade:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eae0:	69f9      	ldr	r1, [r7, #28]
 800eae2:	4889      	ldr	r0, [pc, #548]	; (800ed08 <tcp_input+0x754>)
 800eae4:	f7ff fc4c 	bl	800e380 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800eae8:	69f9      	ldr	r1, [r7, #28]
 800eaea:	2000      	movs	r0, #0
 800eaec:	f7fd fbcc 	bl	800c288 <memp_free>
 800eaf0:	e0bf      	b.n	800ec72 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eaf6:	4b85      	ldr	r3, [pc, #532]	; (800ed0c <tcp_input+0x758>)
 800eaf8:	881b      	ldrh	r3, [r3, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d01b      	beq.n	800eb36 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eafe:	4b83      	ldr	r3, [pc, #524]	; (800ed0c <tcp_input+0x758>)
 800eb00:	881b      	ldrh	r3, [r3, #0]
 800eb02:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d009      	beq.n	800eb20 <tcp_input+0x56c>
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb10:	69fa      	ldr	r2, [r7, #28]
 800eb12:	6910      	ldr	r0, [r2, #16]
 800eb14:	89fa      	ldrh	r2, [r7, #14]
 800eb16:	69f9      	ldr	r1, [r7, #28]
 800eb18:	4798      	blx	r3
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	74fb      	strb	r3, [r7, #19]
 800eb1e:	e001      	b.n	800eb24 <tcp_input+0x570>
 800eb20:	2300      	movs	r3, #0
 800eb22:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eb24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb28:	f113 0f0d 	cmn.w	r3, #13
 800eb2c:	f000 8098 	beq.w	800ec60 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800eb30:	4b76      	ldr	r3, [pc, #472]	; (800ed0c <tcp_input+0x758>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800eb36:	69f8      	ldr	r0, [r7, #28]
 800eb38:	f000 f900 	bl	800ed3c <tcp_input_delayed_close>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f040 8090 	bne.w	800ec64 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800eb44:	4b72      	ldr	r3, [pc, #456]	; (800ed10 <tcp_input+0x75c>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d041      	beq.n	800ebd0 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d006      	beq.n	800eb62 <tcp_input+0x5ae>
 800eb54:	4b6f      	ldr	r3, [pc, #444]	; (800ed14 <tcp_input+0x760>)
 800eb56:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800eb5a:	496f      	ldr	r1, [pc, #444]	; (800ed18 <tcp_input+0x764>)
 800eb5c:	486f      	ldr	r0, [pc, #444]	; (800ed1c <tcp_input+0x768>)
 800eb5e:	f006 f95b 	bl	8014e18 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	7e9b      	ldrb	r3, [r3, #26]
 800eb66:	f003 0310 	and.w	r3, r3, #16
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d008      	beq.n	800eb80 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800eb6e:	4b68      	ldr	r3, [pc, #416]	; (800ed10 <tcp_input+0x75c>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fe f8da 	bl	800cd2c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800eb78:	69f8      	ldr	r0, [r7, #28]
 800eb7a:	f7fe fdd5 	bl	800d728 <tcp_abort>
            goto aborted;
 800eb7e:	e078      	b.n	800ec72 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00c      	beq.n	800eba4 <tcp_input+0x5f0>
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	6918      	ldr	r0, [r3, #16]
 800eb94:	4b5e      	ldr	r3, [pc, #376]	; (800ed10 <tcp_input+0x75c>)
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	2300      	movs	r3, #0
 800eb9a:	69f9      	ldr	r1, [r7, #28]
 800eb9c:	47a0      	blx	r4
 800eb9e:	4603      	mov	r3, r0
 800eba0:	74fb      	strb	r3, [r7, #19]
 800eba2:	e008      	b.n	800ebb6 <tcp_input+0x602>
 800eba4:	4b5a      	ldr	r3, [pc, #360]	; (800ed10 <tcp_input+0x75c>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	69f9      	ldr	r1, [r7, #28]
 800ebac:	2000      	movs	r0, #0
 800ebae:	f7ff fa44 	bl	800e03a <tcp_recv_null>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ebb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebba:	f113 0f0d 	cmn.w	r3, #13
 800ebbe:	d053      	beq.n	800ec68 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ebc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d003      	beq.n	800ebd0 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ebc8:	4b51      	ldr	r3, [pc, #324]	; (800ed10 <tcp_input+0x75c>)
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ebd0:	4b4c      	ldr	r3, [pc, #304]	; (800ed04 <tcp_input+0x750>)
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	f003 0320 	and.w	r3, r3, #32
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d030      	beq.n	800ec3e <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d009      	beq.n	800ebf8 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebe8:	7b5a      	ldrb	r2, [r3, #13]
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebee:	f042 0220 	orr.w	r2, r2, #32
 800ebf2:	b2d2      	uxtb	r2, r2
 800ebf4:	735a      	strb	r2, [r3, #13]
 800ebf6:	e022      	b.n	800ec3e <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebfc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec00:	d005      	beq.n	800ec0e <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec06:	3301      	adds	r3, #1
 800ec08:	b29a      	uxth	r2, r3
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00b      	beq.n	800ec30 <tcp_input+0x67c>
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	6918      	ldr	r0, [r3, #16]
 800ec22:	2300      	movs	r3, #0
 800ec24:	2200      	movs	r2, #0
 800ec26:	69f9      	ldr	r1, [r7, #28]
 800ec28:	47a0      	blx	r4
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	74fb      	strb	r3, [r7, #19]
 800ec2e:	e001      	b.n	800ec34 <tcp_input+0x680>
 800ec30:	2300      	movs	r3, #0
 800ec32:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ec34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec38:	f113 0f0d 	cmn.w	r3, #13
 800ec3c:	d016      	beq.n	800ec6c <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ec3e:	4b30      	ldr	r3, [pc, #192]	; (800ed00 <tcp_input+0x74c>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ec44:	69f8      	ldr	r0, [r7, #28]
 800ec46:	f000 f879 	bl	800ed3c <tcp_input_delayed_close>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10f      	bne.n	800ec70 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ec50:	69f8      	ldr	r0, [r7, #28]
 800ec52:	f002 f963 	bl	8010f1c <tcp_output>
 800ec56:	e00c      	b.n	800ec72 <tcp_input+0x6be>
        goto aborted;
 800ec58:	bf00      	nop
 800ec5a:	e00a      	b.n	800ec72 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ec5c:	bf00      	nop
 800ec5e:	e008      	b.n	800ec72 <tcp_input+0x6be>
              goto aborted;
 800ec60:	bf00      	nop
 800ec62:	e006      	b.n	800ec72 <tcp_input+0x6be>
          goto aborted;
 800ec64:	bf00      	nop
 800ec66:	e004      	b.n	800ec72 <tcp_input+0x6be>
            goto aborted;
 800ec68:	bf00      	nop
 800ec6a:	e002      	b.n	800ec72 <tcp_input+0x6be>
              goto aborted;
 800ec6c:	bf00      	nop
 800ec6e:	e000      	b.n	800ec72 <tcp_input+0x6be>
          goto aborted;
 800ec70:	bf00      	nop
    tcp_input_pcb = NULL;
 800ec72:	4b23      	ldr	r3, [pc, #140]	; (800ed00 <tcp_input+0x74c>)
 800ec74:	2200      	movs	r2, #0
 800ec76:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ec78:	4b25      	ldr	r3, [pc, #148]	; (800ed10 <tcp_input+0x75c>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ec7e:	4b28      	ldr	r3, [pc, #160]	; (800ed20 <tcp_input+0x76c>)
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d037      	beq.n	800ecf6 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800ec86:	4b26      	ldr	r3, [pc, #152]	; (800ed20 <tcp_input+0x76c>)
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fe f84e 	bl	800cd2c <pbuf_free>
      inseg.p = NULL;
 800ec90:	4b23      	ldr	r3, [pc, #140]	; (800ed20 <tcp_input+0x76c>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ec96:	e02e      	b.n	800ecf6 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ec98:	4b22      	ldr	r3, [pc, #136]	; (800ed24 <tcp_input+0x770>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	899b      	ldrh	r3, [r3, #12]
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fc feb3 	bl	800ba0c <lwip_htons>
 800eca6:	4603      	mov	r3, r0
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d115      	bne.n	800ecdc <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecb0:	4b1d      	ldr	r3, [pc, #116]	; (800ed28 <tcp_input+0x774>)
 800ecb2:	6818      	ldr	r0, [r3, #0]
 800ecb4:	4b1d      	ldr	r3, [pc, #116]	; (800ed2c <tcp_input+0x778>)
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	4b1d      	ldr	r3, [pc, #116]	; (800ed30 <tcp_input+0x77c>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecc0:	4b18      	ldr	r3, [pc, #96]	; (800ed24 <tcp_input+0x770>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecc4:	885b      	ldrh	r3, [r3, #2]
 800ecc6:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecc8:	4a16      	ldr	r2, [pc, #88]	; (800ed24 <tcp_input+0x770>)
 800ecca:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eccc:	8812      	ldrh	r2, [r2, #0]
 800ecce:	b292      	uxth	r2, r2
 800ecd0:	9201      	str	r2, [sp, #4]
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	4b17      	ldr	r3, [pc, #92]	; (800ed34 <tcp_input+0x780>)
 800ecd6:	4a18      	ldr	r2, [pc, #96]	; (800ed38 <tcp_input+0x784>)
 800ecd8:	f002 fbaa 	bl	8011430 <tcp_rst>
    pbuf_free(p);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7fe f825 	bl	800cd2c <pbuf_free>
  return;
 800ece2:	e008      	b.n	800ecf6 <tcp_input+0x742>
    goto dropped;
 800ece4:	bf00      	nop
 800ece6:	e002      	b.n	800ecee <tcp_input+0x73a>
dropped:
 800ece8:	bf00      	nop
 800ecea:	e000      	b.n	800ecee <tcp_input+0x73a>
      goto dropped;
 800ecec:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7fe f81c 	bl	800cd2c <pbuf_free>
 800ecf4:	e000      	b.n	800ecf8 <tcp_input+0x744>
  return;
 800ecf6:	bf00      	nop
}
 800ecf8:	3724      	adds	r7, #36	; 0x24
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd90      	pop	{r4, r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	2000ab68 	.word	0x2000ab68
 800ed04:	20004229 	.word	0x20004229
 800ed08:	2000ab54 	.word	0x2000ab54
 800ed0c:	20004224 	.word	0x20004224
 800ed10:	2000422c 	.word	0x2000422c
 800ed14:	080169b4 	.word	0x080169b4
 800ed18:	08016b50 	.word	0x08016b50
 800ed1c:	080169f8 	.word	0x080169f8
 800ed20:	200041fc 	.word	0x200041fc
 800ed24:	2000420c 	.word	0x2000420c
 800ed28:	20004220 	.word	0x20004220
 800ed2c:	20004226 	.word	0x20004226
 800ed30:	2000421c 	.word	0x2000421c
 800ed34:	200074d8 	.word	0x200074d8
 800ed38:	200074dc 	.word	0x200074dc

0800ed3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800ed44:	4b14      	ldr	r3, [pc, #80]	; (800ed98 <tcp_input_delayed_close+0x5c>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	f003 0310 	and.w	r3, r3, #16
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d01d      	beq.n	800ed8c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	7e9b      	ldrb	r3, [r3, #26]
 800ed54:	f003 0310 	and.w	r3, r3, #16
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10d      	bne.n	800ed78 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d008      	beq.n	800ed78 <tcp_input_delayed_close+0x3c>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	6912      	ldr	r2, [r2, #16]
 800ed70:	f06f 010e 	mvn.w	r1, #14
 800ed74:	4610      	mov	r0, r2
 800ed76:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ed78:	6879      	ldr	r1, [r7, #4]
 800ed7a:	4808      	ldr	r0, [pc, #32]	; (800ed9c <tcp_input_delayed_close+0x60>)
 800ed7c:	f7ff fb00 	bl	800e380 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ed80:	6879      	ldr	r1, [r7, #4]
 800ed82:	2000      	movs	r0, #0
 800ed84:	f7fd fa80 	bl	800c288 <memp_free>
    return 1;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e000      	b.n	800ed8e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	20004229 	.word	0x20004229
 800ed9c:	2000ab54 	.word	0x2000ab54

0800eda0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b088      	sub	sp, #32
 800eda4:	af02      	add	r7, sp, #8
 800eda6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eda8:	4b64      	ldr	r3, [pc, #400]	; (800ef3c <tcp_listen_input+0x19c>)
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	f003 0304 	and.w	r3, r3, #4
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f040 80bc 	bne.w	800ef2e <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800edb6:	4b61      	ldr	r3, [pc, #388]	; (800ef3c <tcp_listen_input+0x19c>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	f003 0310 	and.w	r3, r3, #16
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d016      	beq.n	800edf0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800edc2:	4b5f      	ldr	r3, [pc, #380]	; (800ef40 <tcp_listen_input+0x1a0>)
 800edc4:	6818      	ldr	r0, [r3, #0]
 800edc6:	4b5f      	ldr	r3, [pc, #380]	; (800ef44 <tcp_listen_input+0x1a4>)
 800edc8:	881b      	ldrh	r3, [r3, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	4b5e      	ldr	r3, [pc, #376]	; (800ef48 <tcp_listen_input+0x1a8>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edd2:	4b5e      	ldr	r3, [pc, #376]	; (800ef4c <tcp_listen_input+0x1ac>)
 800edd4:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800edd6:	885b      	ldrh	r3, [r3, #2]
 800edd8:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edda:	4a5c      	ldr	r2, [pc, #368]	; (800ef4c <tcp_listen_input+0x1ac>)
 800eddc:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800edde:	8812      	ldrh	r2, [r2, #0]
 800ede0:	b292      	uxth	r2, r2
 800ede2:	9201      	str	r2, [sp, #4]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	4b5a      	ldr	r3, [pc, #360]	; (800ef50 <tcp_listen_input+0x1b0>)
 800ede8:	4a5a      	ldr	r2, [pc, #360]	; (800ef54 <tcp_listen_input+0x1b4>)
 800edea:	f002 fb21 	bl	8011430 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800edee:	e0a0      	b.n	800ef32 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800edf0:	4b52      	ldr	r3, [pc, #328]	; (800ef3c <tcp_listen_input+0x19c>)
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	f003 0302 	and.w	r3, r3, #2
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 809a 	beq.w	800ef32 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	7d5b      	ldrb	r3, [r3, #21]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7ff f9f8 	bl	800e1f8 <tcp_alloc>
 800ee08:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d111      	bne.n	800ee34 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	699b      	ldr	r3, [r3, #24]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00a      	beq.n	800ee2e <tcp_listen_input+0x8e>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	699b      	ldr	r3, [r3, #24]
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	6910      	ldr	r0, [r2, #16]
 800ee20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee24:	2100      	movs	r1, #0
 800ee26:	4798      	blx	r3
 800ee28:	4603      	mov	r3, r0
 800ee2a:	73bb      	strb	r3, [r7, #14]
      return;
 800ee2c:	e082      	b.n	800ef34 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee2e:	23f0      	movs	r3, #240	; 0xf0
 800ee30:	73bb      	strb	r3, [r7, #14]
      return;
 800ee32:	e07f      	b.n	800ef34 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ee34:	4b48      	ldr	r3, [pc, #288]	; (800ef58 <tcp_listen_input+0x1b8>)
 800ee36:	695a      	ldr	r2, [r3, #20]
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ee3c:	4b46      	ldr	r3, [pc, #280]	; (800ef58 <tcp_listen_input+0x1b8>)
 800ee3e:	691a      	ldr	r2, [r3, #16]
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	8ada      	ldrh	r2, [r3, #22]
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ee4c:	4b3f      	ldr	r3, [pc, #252]	; (800ef4c <tcp_listen_input+0x1ac>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	881b      	ldrh	r3, [r3, #0]
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	2203      	movs	r2, #3
 800ee5c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ee5e:	4b3a      	ldr	r3, [pc, #232]	; (800ef48 <tcp_listen_input+0x1a8>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	1c5a      	adds	r2, r3, #1
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ee70:	6978      	ldr	r0, [r7, #20]
 800ee72:	f7ff fb01 	bl	800e478 <tcp_next_iss>
 800ee76:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	693a      	ldr	r2, [r7, #16]
 800ee7c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	693a      	ldr	r2, [r7, #16]
 800ee88:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	693a      	ldr	r2, [r7, #16]
 800ee8e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ee90:	4b2d      	ldr	r3, [pc, #180]	; (800ef48 <tcp_listen_input+0x1a8>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	1e5a      	subs	r2, r3, #1
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	691a      	ldr	r2, [r3, #16]
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	7a1b      	ldrb	r3, [r3, #8]
 800eeac:	f003 030c 	and.w	r3, r3, #12
 800eeb0:	b2da      	uxtb	r2, r3
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800eeb6:	4b29      	ldr	r3, [pc, #164]	; (800ef5c <tcp_listen_input+0x1bc>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	60da      	str	r2, [r3, #12]
 800eebe:	4a27      	ldr	r2, [pc, #156]	; (800ef5c <tcp_listen_input+0x1bc>)
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	f002 fd04 	bl	80118d0 <tcp_timer_needed>
 800eec8:	4b25      	ldr	r3, [pc, #148]	; (800ef60 <tcp_listen_input+0x1c0>)
 800eeca:	2201      	movs	r2, #1
 800eecc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800eece:	6978      	ldr	r0, [r7, #20]
 800eed0:	f001 fd14 	bl	80108fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800eed4:	4b1d      	ldr	r3, [pc, #116]	; (800ef4c <tcp_listen_input+0x1ac>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	89db      	ldrh	r3, [r3, #14]
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	3304      	adds	r3, #4
 800eef6:	4619      	mov	r1, r3
 800eef8:	4610      	mov	r0, r2
 800eefa:	f7ff fad5 	bl	800e4a8 <tcp_eff_send_mss_impl>
 800eefe:	4603      	mov	r3, r0
 800ef00:	461a      	mov	r2, r3
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ef06:	2112      	movs	r1, #18
 800ef08:	6978      	ldr	r0, [r7, #20]
 800ef0a:	f001 feaf 	bl	8010c6c <tcp_enqueue_flags>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ef12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d004      	beq.n	800ef24 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	6978      	ldr	r0, [r7, #20]
 800ef1e:	f7fe fb51 	bl	800d5c4 <tcp_abandon>
      return;
 800ef22:	e007      	b.n	800ef34 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800ef24:	6978      	ldr	r0, [r7, #20]
 800ef26:	f001 fff9 	bl	8010f1c <tcp_output>
  return;
 800ef2a:	bf00      	nop
 800ef2c:	e001      	b.n	800ef32 <tcp_listen_input+0x192>
    return;
 800ef2e:	bf00      	nop
 800ef30:	e000      	b.n	800ef34 <tcp_listen_input+0x194>
  return;
 800ef32:	bf00      	nop
}
 800ef34:	3718      	adds	r7, #24
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	20004228 	.word	0x20004228
 800ef40:	20004220 	.word	0x20004220
 800ef44:	20004226 	.word	0x20004226
 800ef48:	2000421c 	.word	0x2000421c
 800ef4c:	2000420c 	.word	0x2000420c
 800ef50:	200074d8 	.word	0x200074d8
 800ef54:	200074dc 	.word	0x200074dc
 800ef58:	200074c8 	.word	0x200074c8
 800ef5c:	2000ab54 	.word	0x2000ab54
 800ef60:	2000ab50 	.word	0x2000ab50

0800ef64 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af02      	add	r7, sp, #8
 800ef6a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ef6c:	4b29      	ldr	r3, [pc, #164]	; (800f014 <tcp_timewait_input+0xb0>)
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	f003 0304 	and.w	r3, r3, #4
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d147      	bne.n	800f008 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ef78:	4b26      	ldr	r3, [pc, #152]	; (800f014 <tcp_timewait_input+0xb0>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	f003 0302 	and.w	r3, r3, #2
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d027      	beq.n	800efd4 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ef84:	4b24      	ldr	r3, [pc, #144]	; (800f018 <tcp_timewait_input+0xb4>)
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8c:	1ad3      	subs	r3, r2, r3
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	db2a      	blt.n	800efe8 <tcp_timewait_input+0x84>
 800ef92:	4b21      	ldr	r3, [pc, #132]	; (800f018 <tcp_timewait_input+0xb4>)
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9a:	6879      	ldr	r1, [r7, #4]
 800ef9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef9e:	440b      	add	r3, r1
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	dc20      	bgt.n	800efe8 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800efa6:	4b1d      	ldr	r3, [pc, #116]	; (800f01c <tcp_timewait_input+0xb8>)
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	4b1d      	ldr	r3, [pc, #116]	; (800f020 <tcp_timewait_input+0xbc>)
 800efac:	881b      	ldrh	r3, [r3, #0]
 800efae:	461a      	mov	r2, r3
 800efb0:	4b19      	ldr	r3, [pc, #100]	; (800f018 <tcp_timewait_input+0xb4>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efb6:	4b1b      	ldr	r3, [pc, #108]	; (800f024 <tcp_timewait_input+0xc0>)
 800efb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800efba:	885b      	ldrh	r3, [r3, #2]
 800efbc:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efbe:	4a19      	ldr	r2, [pc, #100]	; (800f024 <tcp_timewait_input+0xc0>)
 800efc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800efc2:	8812      	ldrh	r2, [r2, #0]
 800efc4:	b292      	uxth	r2, r2
 800efc6:	9201      	str	r2, [sp, #4]
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	4b17      	ldr	r3, [pc, #92]	; (800f028 <tcp_timewait_input+0xc4>)
 800efcc:	4a17      	ldr	r2, [pc, #92]	; (800f02c <tcp_timewait_input+0xc8>)
 800efce:	f002 fa2f 	bl	8011430 <tcp_rst>
      return;
 800efd2:	e01c      	b.n	800f00e <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800efd4:	4b0f      	ldr	r3, [pc, #60]	; (800f014 <tcp_timewait_input+0xb0>)
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d003      	beq.n	800efe8 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800efe0:	4b13      	ldr	r3, [pc, #76]	; (800f030 <tcp_timewait_input+0xcc>)
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800efe8:	4b0d      	ldr	r3, [pc, #52]	; (800f020 <tcp_timewait_input+0xbc>)
 800efea:	881b      	ldrh	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00d      	beq.n	800f00c <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	7e9b      	ldrb	r3, [r3, #26]
 800eff4:	f043 0302 	orr.w	r3, r3, #2
 800eff8:	b2da      	uxtb	r2, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f001 ff8c 	bl	8010f1c <tcp_output>
  }
  return;
 800f004:	bf00      	nop
 800f006:	e001      	b.n	800f00c <tcp_timewait_input+0xa8>
    return;
 800f008:	bf00      	nop
 800f00a:	e000      	b.n	800f00e <tcp_timewait_input+0xaa>
  return;
 800f00c:	bf00      	nop
}
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	20004228 	.word	0x20004228
 800f018:	2000421c 	.word	0x2000421c
 800f01c:	20004220 	.word	0x20004220
 800f020:	20004226 	.word	0x20004226
 800f024:	2000420c 	.word	0x2000420c
 800f028:	200074d8 	.word	0x200074d8
 800f02c:	200074dc 	.word	0x200074dc
 800f030:	2000ab58 	.word	0x2000ab58

0800f034 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b08a      	sub	sp, #40	; 0x28
 800f038:	af02      	add	r7, sp, #8
 800f03a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f03c:	2300      	movs	r3, #0
 800f03e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f040:	2300      	movs	r3, #0
 800f042:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f044:	4ba4      	ldr	r3, [pc, #656]	; (800f2d8 <tcp_process+0x2a4>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f003 0304 	and.w	r3, r3, #4
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d04e      	beq.n	800f0ee <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	7d1b      	ldrb	r3, [r3, #20]
 800f054:	2b02      	cmp	r3, #2
 800f056:	d108      	bne.n	800f06a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f05c:	4b9f      	ldr	r3, [pc, #636]	; (800f2dc <tcp_process+0x2a8>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	429a      	cmp	r2, r3
 800f062:	d123      	bne.n	800f0ac <tcp_process+0x78>
        acceptable = 1;
 800f064:	2301      	movs	r3, #1
 800f066:	76fb      	strb	r3, [r7, #27]
 800f068:	e020      	b.n	800f0ac <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f06e:	4b9c      	ldr	r3, [pc, #624]	; (800f2e0 <tcp_process+0x2ac>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	429a      	cmp	r2, r3
 800f074:	d102      	bne.n	800f07c <tcp_process+0x48>
        acceptable = 1;
 800f076:	2301      	movs	r3, #1
 800f078:	76fb      	strb	r3, [r7, #27]
 800f07a:	e017      	b.n	800f0ac <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f07c:	4b98      	ldr	r3, [pc, #608]	; (800f2e0 <tcp_process+0x2ac>)
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	2b00      	cmp	r3, #0
 800f088:	db10      	blt.n	800f0ac <tcp_process+0x78>
 800f08a:	4b95      	ldr	r3, [pc, #596]	; (800f2e0 <tcp_process+0x2ac>)
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f092:	6879      	ldr	r1, [r7, #4]
 800f094:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f096:	440b      	add	r3, r1
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	dc06      	bgt.n	800f0ac <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	7e9b      	ldrb	r3, [r3, #26]
 800f0a2:	f043 0302 	orr.w	r3, r3, #2
 800f0a6:	b2da      	uxtb	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f0ac:	7efb      	ldrb	r3, [r7, #27]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d01b      	beq.n	800f0ea <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	7d1b      	ldrb	r3, [r3, #20]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d106      	bne.n	800f0c8 <tcp_process+0x94>
 800f0ba:	4b8a      	ldr	r3, [pc, #552]	; (800f2e4 <tcp_process+0x2b0>)
 800f0bc:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f0c0:	4989      	ldr	r1, [pc, #548]	; (800f2e8 <tcp_process+0x2b4>)
 800f0c2:	488a      	ldr	r0, [pc, #552]	; (800f2ec <tcp_process+0x2b8>)
 800f0c4:	f005 fea8 	bl	8014e18 <iprintf>
      recv_flags |= TF_RESET;
 800f0c8:	4b89      	ldr	r3, [pc, #548]	; (800f2f0 <tcp_process+0x2bc>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	f043 0308 	orr.w	r3, r3, #8
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	4b87      	ldr	r3, [pc, #540]	; (800f2f0 <tcp_process+0x2bc>)
 800f0d4:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	7e9b      	ldrb	r3, [r3, #26]
 800f0da:	f023 0301 	bic.w	r3, r3, #1
 800f0de:	b2da      	uxtb	r2, r3
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800f0e4:	f06f 030d 	mvn.w	r3, #13
 800f0e8:	e34d      	b.n	800f786 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	e34b      	b.n	800f786 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f0ee:	4b7a      	ldr	r3, [pc, #488]	; (800f2d8 <tcp_process+0x2a4>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	f003 0302 	and.w	r3, r3, #2
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d010      	beq.n	800f11c <tcp_process+0xe8>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	7d1b      	ldrb	r3, [r3, #20]
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d00c      	beq.n	800f11c <tcp_process+0xe8>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	7d1b      	ldrb	r3, [r3, #20]
 800f106:	2b03      	cmp	r3, #3
 800f108:	d008      	beq.n	800f11c <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	7e9b      	ldrb	r3, [r3, #26]
 800f10e:	f043 0302 	orr.w	r3, r3, #2
 800f112:	b2da      	uxtb	r2, r3
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800f118:	2300      	movs	r3, #0
 800f11a:	e334      	b.n	800f786 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	7e9b      	ldrb	r3, [r3, #26]
 800f120:	f003 0310 	and.w	r3, r3, #16
 800f124:	2b00      	cmp	r3, #0
 800f126:	d103      	bne.n	800f130 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f128:	4b72      	ldr	r3, [pc, #456]	; (800f2f4 <tcp_process+0x2c0>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f001 fbdf 	bl	80108fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	7d1b      	ldrb	r3, [r3, #20]
 800f142:	3b02      	subs	r3, #2
 800f144:	2b07      	cmp	r3, #7
 800f146:	f200 830e 	bhi.w	800f766 <tcp_process+0x732>
 800f14a:	a201      	add	r2, pc, #4	; (adr r2, 800f150 <tcp_process+0x11c>)
 800f14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f150:	0800f171 	.word	0x0800f171
 800f154:	0800f369 	.word	0x0800f369
 800f158:	0800f4c1 	.word	0x0800f4c1
 800f15c:	0800f4eb 	.word	0x0800f4eb
 800f160:	0800f615 	.word	0x0800f615
 800f164:	0800f4c1 	.word	0x0800f4c1
 800f168:	0800f6a1 	.word	0x0800f6a1
 800f16c:	0800f731 	.word	0x0800f731
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f170:	4b59      	ldr	r3, [pc, #356]	; (800f2d8 <tcp_process+0x2a4>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	f003 0310 	and.w	r3, r3, #16
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f000 80cb 	beq.w	800f314 <tcp_process+0x2e0>
 800f17e:	4b56      	ldr	r3, [pc, #344]	; (800f2d8 <tcp_process+0x2a4>)
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	f003 0302 	and.w	r3, r3, #2
 800f186:	2b00      	cmp	r3, #0
 800f188:	f000 80c4 	beq.w	800f314 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f190:	1c5a      	adds	r2, r3, #1
 800f192:	4b52      	ldr	r3, [pc, #328]	; (800f2dc <tcp_process+0x2a8>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	429a      	cmp	r2, r3
 800f198:	f040 80bc 	bne.w	800f314 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800f19c:	4b50      	ldr	r3, [pc, #320]	; (800f2e0 <tcp_process+0x2ac>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	1c5a      	adds	r2, r3, #1
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800f1ae:	4b4b      	ldr	r3, [pc, #300]	; (800f2dc <tcp_process+0x2a8>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800f1b6:	4b50      	ldr	r3, [pc, #320]	; (800f2f8 <tcp_process+0x2c4>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	89db      	ldrh	r3, [r3, #14]
 800f1bc:	b29a      	uxth	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f1d0:	4b43      	ldr	r3, [pc, #268]	; (800f2e0 <tcp_process+0x2ac>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	1e5a      	subs	r2, r3, #1
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2204      	movs	r2, #4
 800f1de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	4610      	mov	r0, r2
 800f1ec:	f7ff f95c 	bl	800e4a8 <tcp_eff_send_mss_impl>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	f241 121c 	movw	r2, #4380	; 0x111c
 800f202:	429a      	cmp	r2, r3
 800f204:	bf38      	it	cc
 800f206:	461a      	movcc	r2, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4293      	cmp	r3, r2
 800f210:	bf28      	it	cs
 800f212:	4613      	movcs	r3, r2
 800f214:	b29a      	uxth	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <tcp_process+0x200>
 800f226:	4b2f      	ldr	r3, [pc, #188]	; (800f2e4 <tcp_process+0x2b0>)
 800f228:	f240 321a 	movw	r2, #794	; 0x31a
 800f22c:	4933      	ldr	r1, [pc, #204]	; (800f2fc <tcp_process+0x2c8>)
 800f22e:	482f      	ldr	r0, [pc, #188]	; (800f2ec <tcp_process+0x2b8>)
 800f230:	f005 fdf2 	bl	8014e18 <iprintf>
      --pcb->snd_queuelen;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f23a:	3b01      	subs	r3, #1
 800f23c:	b29a      	uxth	r2, r3
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f248:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d111      	bne.n	800f274 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f254:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d106      	bne.n	800f26a <tcp_process+0x236>
 800f25c:	4b21      	ldr	r3, [pc, #132]	; (800f2e4 <tcp_process+0x2b0>)
 800f25e:	f240 3222 	movw	r2, #802	; 0x322
 800f262:	4927      	ldr	r1, [pc, #156]	; (800f300 <tcp_process+0x2cc>)
 800f264:	4821      	ldr	r0, [pc, #132]	; (800f2ec <tcp_process+0x2b8>)
 800f266:	f005 fdd7 	bl	8014e18 <iprintf>
        pcb->unsent = rseg->next;
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	669a      	str	r2, [r3, #104]	; 0x68
 800f272:	e003      	b.n	800f27c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800f27c:	69f8      	ldr	r0, [r7, #28]
 800f27e:	f7fe fea8 	bl	800dfd2 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f286:	2b00      	cmp	r3, #0
 800f288:	d104      	bne.n	800f294 <tcp_process+0x260>
        pcb->rtime = -1;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f290:	861a      	strh	r2, [r3, #48]	; 0x30
 800f292:	e006      	b.n	800f2a2 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00a      	beq.n	800f2c2 <tcp_process+0x28e>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	6910      	ldr	r0, [r2, #16]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	6879      	ldr	r1, [r7, #4]
 800f2ba:	4798      	blx	r3
 800f2bc:	4603      	mov	r3, r0
 800f2be:	76bb      	strb	r3, [r7, #26]
 800f2c0:	e001      	b.n	800f2c6 <tcp_process+0x292>
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800f2c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f2ca:	f113 0f0d 	cmn.w	r3, #13
 800f2ce:	d119      	bne.n	800f304 <tcp_process+0x2d0>
        return ERR_ABRT;
 800f2d0:	f06f 030c 	mvn.w	r3, #12
 800f2d4:	e257      	b.n	800f786 <tcp_process+0x752>
 800f2d6:	bf00      	nop
 800f2d8:	20004228 	.word	0x20004228
 800f2dc:	20004220 	.word	0x20004220
 800f2e0:	2000421c 	.word	0x2000421c
 800f2e4:	080169b4 	.word	0x080169b4
 800f2e8:	08016b6c 	.word	0x08016b6c
 800f2ec:	080169f8 	.word	0x080169f8
 800f2f0:	20004229 	.word	0x20004229
 800f2f4:	2000ab58 	.word	0x2000ab58
 800f2f8:	2000420c 	.word	0x2000420c
 800f2fc:	08016b8c 	.word	0x08016b8c
 800f300:	08016ba4 	.word	0x08016ba4
      }
      tcp_ack_now(pcb);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	7e9b      	ldrb	r3, [r3, #26]
 800f308:	f043 0302 	orr.w	r3, r3, #2
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800f312:	e22a      	b.n	800f76a <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800f314:	4b9f      	ldr	r3, [pc, #636]	; (800f594 <tcp_process+0x560>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f003 0310 	and.w	r3, r3, #16
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 8224 	beq.w	800f76a <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f322:	4b9d      	ldr	r3, [pc, #628]	; (800f598 <tcp_process+0x564>)
 800f324:	6818      	ldr	r0, [r3, #0]
 800f326:	4b9d      	ldr	r3, [pc, #628]	; (800f59c <tcp_process+0x568>)
 800f328:	881b      	ldrh	r3, [r3, #0]
 800f32a:	461a      	mov	r2, r3
 800f32c:	4b9c      	ldr	r3, [pc, #624]	; (800f5a0 <tcp_process+0x56c>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f332:	4b9c      	ldr	r3, [pc, #624]	; (800f5a4 <tcp_process+0x570>)
 800f334:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f336:	885b      	ldrh	r3, [r3, #2]
 800f338:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f33a:	4a9a      	ldr	r2, [pc, #616]	; (800f5a4 <tcp_process+0x570>)
 800f33c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f33e:	8812      	ldrh	r2, [r2, #0]
 800f340:	b292      	uxth	r2, r2
 800f342:	9201      	str	r2, [sp, #4]
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	4b98      	ldr	r3, [pc, #608]	; (800f5a8 <tcp_process+0x574>)
 800f348:	4a98      	ldr	r2, [pc, #608]	; (800f5ac <tcp_process+0x578>)
 800f34a:	f002 f871 	bl	8011430 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f354:	2b05      	cmp	r3, #5
 800f356:	f200 8208 	bhi.w	800f76a <tcp_process+0x736>
        pcb->rtime = 0;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2200      	movs	r2, #0
 800f35e:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f002 f8db 	bl	801151c <tcp_rexmit_rto>
    break;
 800f366:	e200      	b.n	800f76a <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800f368:	4b8a      	ldr	r3, [pc, #552]	; (800f594 <tcp_process+0x560>)
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	f003 0310 	and.w	r3, r3, #16
 800f370:	2b00      	cmp	r3, #0
 800f372:	f000 8091 	beq.w	800f498 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f376:	4b88      	ldr	r3, [pc, #544]	; (800f598 <tcp_process+0x564>)
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f37e:	1ad3      	subs	r3, r2, r3
 800f380:	3b01      	subs	r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	db71      	blt.n	800f46a <tcp_process+0x436>
 800f386:	4b84      	ldr	r3, [pc, #528]	; (800f598 <tcp_process+0x564>)
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	dc6a      	bgt.n	800f46a <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2204      	movs	r2, #4
 800f398:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00b      	beq.n	800f3ba <tcp_process+0x386>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3a6:	699b      	ldr	r3, [r3, #24]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d106      	bne.n	800f3ba <tcp_process+0x386>
 800f3ac:	4b80      	ldr	r3, [pc, #512]	; (800f5b0 <tcp_process+0x57c>)
 800f3ae:	f240 3251 	movw	r2, #849	; 0x351
 800f3b2:	4980      	ldr	r1, [pc, #512]	; (800f5b4 <tcp_process+0x580>)
 800f3b4:	4880      	ldr	r0, [pc, #512]	; (800f5b8 <tcp_process+0x584>)
 800f3b6:	f005 fd2f 	bl	8014e18 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d102      	bne.n	800f3c8 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800f3c2:	23fa      	movs	r3, #250	; 0xfa
 800f3c4:	76bb      	strb	r3, [r7, #26]
 800f3c6:	e011      	b.n	800f3ec <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3cc:	699b      	ldr	r3, [r3, #24]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00a      	beq.n	800f3e8 <tcp_process+0x3b4>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3d6:	699b      	ldr	r3, [r3, #24]
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	6910      	ldr	r0, [r2, #16]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	6879      	ldr	r1, [r7, #4]
 800f3e0:	4798      	blx	r3
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	76bb      	strb	r3, [r7, #26]
 800f3e6:	e001      	b.n	800f3ec <tcp_process+0x3b8>
 800f3e8:	23f0      	movs	r3, #240	; 0xf0
 800f3ea:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800f3ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00a      	beq.n	800f40a <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800f3f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f3f8:	f113 0f0d 	cmn.w	r3, #13
 800f3fc:	d002      	beq.n	800f404 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7fe f992 	bl	800d728 <tcp_abort>
          }
          return ERR_ABRT;
 800f404:	f06f 030c 	mvn.w	r3, #12
 800f408:	e1bd      	b.n	800f786 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 fa42 	bl	800f894 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800f410:	4b6a      	ldr	r3, [pc, #424]	; (800f5bc <tcp_process+0x588>)
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d005      	beq.n	800f424 <tcp_process+0x3f0>
          recv_acked--;
 800f418:	4b68      	ldr	r3, [pc, #416]	; (800f5bc <tcp_process+0x588>)
 800f41a:	881b      	ldrh	r3, [r3, #0]
 800f41c:	3b01      	subs	r3, #1
 800f41e:	b29a      	uxth	r2, r3
 800f420:	4b66      	ldr	r3, [pc, #408]	; (800f5bc <tcp_process+0x588>)
 800f422:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f428:	005b      	lsls	r3, r3, #1
 800f42a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f42e:	429a      	cmp	r2, r3
 800f430:	bf38      	it	cc
 800f432:	461a      	movcc	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	4293      	cmp	r3, r2
 800f43c:	bf28      	it	cs
 800f43e:	4613      	movcs	r3, r2
 800f440:	b29a      	uxth	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800f448:	4b5d      	ldr	r3, [pc, #372]	; (800f5c0 <tcp_process+0x58c>)
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	f003 0320 	and.w	r3, r3, #32
 800f450:	2b00      	cmp	r3, #0
 800f452:	d034      	beq.n	800f4be <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	7e9b      	ldrb	r3, [r3, #26]
 800f458:	f043 0302 	orr.w	r3, r3, #2
 800f45c:	b2da      	uxtb	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2207      	movs	r2, #7
 800f466:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800f468:	e029      	b.n	800f4be <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f46a:	4b4b      	ldr	r3, [pc, #300]	; (800f598 <tcp_process+0x564>)
 800f46c:	6818      	ldr	r0, [r3, #0]
 800f46e:	4b4b      	ldr	r3, [pc, #300]	; (800f59c <tcp_process+0x568>)
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	461a      	mov	r2, r3
 800f474:	4b4a      	ldr	r3, [pc, #296]	; (800f5a0 <tcp_process+0x56c>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f47a:	4b4a      	ldr	r3, [pc, #296]	; (800f5a4 <tcp_process+0x570>)
 800f47c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f47e:	885b      	ldrh	r3, [r3, #2]
 800f480:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f482:	4a48      	ldr	r2, [pc, #288]	; (800f5a4 <tcp_process+0x570>)
 800f484:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f486:	8812      	ldrh	r2, [r2, #0]
 800f488:	b292      	uxth	r2, r2
 800f48a:	9201      	str	r2, [sp, #4]
 800f48c:	9300      	str	r3, [sp, #0]
 800f48e:	4b46      	ldr	r3, [pc, #280]	; (800f5a8 <tcp_process+0x574>)
 800f490:	4a46      	ldr	r2, [pc, #280]	; (800f5ac <tcp_process+0x578>)
 800f492:	f001 ffcd 	bl	8011430 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800f496:	e16a      	b.n	800f76e <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f498:	4b3e      	ldr	r3, [pc, #248]	; (800f594 <tcp_process+0x560>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	f003 0302 	and.w	r3, r3, #2
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f000 8164 	beq.w	800f76e <tcp_process+0x73a>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4aa:	1e5a      	subs	r2, r3, #1
 800f4ac:	4b3c      	ldr	r3, [pc, #240]	; (800f5a0 <tcp_process+0x56c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	f040 815c 	bne.w	800f76e <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f002 f866 	bl	8011588 <tcp_rexmit>
    break;
 800f4bc:	e157      	b.n	800f76e <tcp_process+0x73a>
 800f4be:	e156      	b.n	800f76e <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f9e7 	bl	800f894 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f4c6:	4b3e      	ldr	r3, [pc, #248]	; (800f5c0 <tcp_process+0x58c>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	f003 0320 	and.w	r3, r3, #32
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f000 814f 	beq.w	800f772 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	7e9b      	ldrb	r3, [r3, #26]
 800f4d8:	f043 0302 	orr.w	r3, r3, #2
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2207      	movs	r2, #7
 800f4e6:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f4e8:	e143      	b.n	800f772 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 f9d2 	bl	800f894 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f4f0:	4b33      	ldr	r3, [pc, #204]	; (800f5c0 <tcp_process+0x58c>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	f003 0320 	and.w	r3, r3, #32
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d074      	beq.n	800f5e6 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4fc:	4b25      	ldr	r3, [pc, #148]	; (800f594 <tcp_process+0x560>)
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	f003 0310 	and.w	r3, r3, #16
 800f504:	2b00      	cmp	r3, #0
 800f506:	d063      	beq.n	800f5d0 <tcp_process+0x59c>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f50c:	4b22      	ldr	r3, [pc, #136]	; (800f598 <tcp_process+0x564>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	429a      	cmp	r2, r3
 800f512:	d15d      	bne.n	800f5d0 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d159      	bne.n	800f5d0 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	7e9b      	ldrb	r3, [r3, #26]
 800f520:	f043 0302 	orr.w	r3, r3, #2
 800f524:	b2da      	uxtb	r2, r3
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7fe fee6 	bl	800e2fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f530:	4b24      	ldr	r3, [pc, #144]	; (800f5c4 <tcp_process+0x590>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	429a      	cmp	r2, r3
 800f538:	d105      	bne.n	800f546 <tcp_process+0x512>
 800f53a:	4b22      	ldr	r3, [pc, #136]	; (800f5c4 <tcp_process+0x590>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	4a20      	ldr	r2, [pc, #128]	; (800f5c4 <tcp_process+0x590>)
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	e013      	b.n	800f56e <tcp_process+0x53a>
 800f546:	4b1f      	ldr	r3, [pc, #124]	; (800f5c4 <tcp_process+0x590>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	617b      	str	r3, [r7, #20]
 800f54c:	e00c      	b.n	800f568 <tcp_process+0x534>
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	429a      	cmp	r2, r3
 800f556:	d104      	bne.n	800f562 <tcp_process+0x52e>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	68da      	ldr	r2, [r3, #12]
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	60da      	str	r2, [r3, #12]
 800f560:	e005      	b.n	800f56e <tcp_process+0x53a>
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	617b      	str	r3, [r7, #20]
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1ef      	bne.n	800f54e <tcp_process+0x51a>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	60da      	str	r2, [r3, #12]
 800f574:	4b14      	ldr	r3, [pc, #80]	; (800f5c8 <tcp_process+0x594>)
 800f576:	2201      	movs	r2, #1
 800f578:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	220a      	movs	r2, #10
 800f57e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f580:	4b12      	ldr	r3, [pc, #72]	; (800f5cc <tcp_process+0x598>)
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	60da      	str	r2, [r3, #12]
 800f588:	4a10      	ldr	r2, [pc, #64]	; (800f5cc <tcp_process+0x598>)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6013      	str	r3, [r2, #0]
 800f58e:	f002 f99f 	bl	80118d0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f592:	e0f0      	b.n	800f776 <tcp_process+0x742>
 800f594:	20004228 	.word	0x20004228
 800f598:	20004220 	.word	0x20004220
 800f59c:	20004226 	.word	0x20004226
 800f5a0:	2000421c 	.word	0x2000421c
 800f5a4:	2000420c 	.word	0x2000420c
 800f5a8:	200074d8 	.word	0x200074d8
 800f5ac:	200074dc 	.word	0x200074dc
 800f5b0:	080169b4 	.word	0x080169b4
 800f5b4:	08016bb8 	.word	0x08016bb8
 800f5b8:	080169f8 	.word	0x080169f8
 800f5bc:	20004224 	.word	0x20004224
 800f5c0:	20004229 	.word	0x20004229
 800f5c4:	2000ab54 	.word	0x2000ab54
 800f5c8:	2000ab50 	.word	0x2000ab50
 800f5cc:	2000ab64 	.word	0x2000ab64
        tcp_ack_now(pcb);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	7e9b      	ldrb	r3, [r3, #26]
 800f5d4:	f043 0302 	orr.w	r3, r3, #2
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2208      	movs	r2, #8
 800f5e2:	751a      	strb	r2, [r3, #20]
    break;
 800f5e4:	e0c7      	b.n	800f776 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5e6:	4b6a      	ldr	r3, [pc, #424]	; (800f790 <tcp_process+0x75c>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	f003 0310 	and.w	r3, r3, #16
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	f000 80c1 	beq.w	800f776 <tcp_process+0x742>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5f8:	4b66      	ldr	r3, [pc, #408]	; (800f794 <tcp_process+0x760>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	f040 80ba 	bne.w	800f776 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f606:	2b00      	cmp	r3, #0
 800f608:	f040 80b5 	bne.w	800f776 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2206      	movs	r2, #6
 800f610:	751a      	strb	r2, [r3, #20]
    break;
 800f612:	e0b0      	b.n	800f776 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 f93d 	bl	800f894 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f61a:	4b5f      	ldr	r3, [pc, #380]	; (800f798 <tcp_process+0x764>)
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	f003 0320 	and.w	r3, r3, #32
 800f622:	2b00      	cmp	r3, #0
 800f624:	f000 80a9 	beq.w	800f77a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	7e9b      	ldrb	r3, [r3, #26]
 800f62c:	f043 0302 	orr.w	r3, r3, #2
 800f630:	b2da      	uxtb	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f7fe fe60 	bl	800e2fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f63c:	4b57      	ldr	r3, [pc, #348]	; (800f79c <tcp_process+0x768>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	429a      	cmp	r2, r3
 800f644:	d105      	bne.n	800f652 <tcp_process+0x61e>
 800f646:	4b55      	ldr	r3, [pc, #340]	; (800f79c <tcp_process+0x768>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	4a53      	ldr	r2, [pc, #332]	; (800f79c <tcp_process+0x768>)
 800f64e:	6013      	str	r3, [r2, #0]
 800f650:	e013      	b.n	800f67a <tcp_process+0x646>
 800f652:	4b52      	ldr	r3, [pc, #328]	; (800f79c <tcp_process+0x768>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	613b      	str	r3, [r7, #16]
 800f658:	e00c      	b.n	800f674 <tcp_process+0x640>
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	429a      	cmp	r2, r3
 800f662:	d104      	bne.n	800f66e <tcp_process+0x63a>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	68da      	ldr	r2, [r3, #12]
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	60da      	str	r2, [r3, #12]
 800f66c:	e005      	b.n	800f67a <tcp_process+0x646>
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	613b      	str	r3, [r7, #16]
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1ef      	bne.n	800f65a <tcp_process+0x626>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	60da      	str	r2, [r3, #12]
 800f680:	4b47      	ldr	r3, [pc, #284]	; (800f7a0 <tcp_process+0x76c>)
 800f682:	2201      	movs	r2, #1
 800f684:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	220a      	movs	r2, #10
 800f68a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f68c:	4b45      	ldr	r3, [pc, #276]	; (800f7a4 <tcp_process+0x770>)
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	60da      	str	r2, [r3, #12]
 800f694:	4a43      	ldr	r2, [pc, #268]	; (800f7a4 <tcp_process+0x770>)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6013      	str	r3, [r2, #0]
 800f69a:	f002 f919 	bl	80118d0 <tcp_timer_needed>
    }
    break;
 800f69e:	e06c      	b.n	800f77a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f8f7 	bl	800f894 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6a6:	4b3a      	ldr	r3, [pc, #232]	; (800f790 <tcp_process+0x75c>)
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	f003 0310 	and.w	r3, r3, #16
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d065      	beq.n	800f77e <tcp_process+0x74a>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6b6:	4b37      	ldr	r3, [pc, #220]	; (800f794 <tcp_process+0x760>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d15f      	bne.n	800f77e <tcp_process+0x74a>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d15b      	bne.n	800f77e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7fe fe18 	bl	800e2fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f6cc:	4b33      	ldr	r3, [pc, #204]	; (800f79c <tcp_process+0x768>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d105      	bne.n	800f6e2 <tcp_process+0x6ae>
 800f6d6:	4b31      	ldr	r3, [pc, #196]	; (800f79c <tcp_process+0x768>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	4a2f      	ldr	r2, [pc, #188]	; (800f79c <tcp_process+0x768>)
 800f6de:	6013      	str	r3, [r2, #0]
 800f6e0:	e013      	b.n	800f70a <tcp_process+0x6d6>
 800f6e2:	4b2e      	ldr	r3, [pc, #184]	; (800f79c <tcp_process+0x768>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	60fb      	str	r3, [r7, #12]
 800f6e8:	e00c      	b.n	800f704 <tcp_process+0x6d0>
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d104      	bne.n	800f6fe <tcp_process+0x6ca>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	68da      	ldr	r2, [r3, #12]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	60da      	str	r2, [r3, #12]
 800f6fc:	e005      	b.n	800f70a <tcp_process+0x6d6>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	68db      	ldr	r3, [r3, #12]
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1ef      	bne.n	800f6ea <tcp_process+0x6b6>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	60da      	str	r2, [r3, #12]
 800f710:	4b23      	ldr	r3, [pc, #140]	; (800f7a0 <tcp_process+0x76c>)
 800f712:	2201      	movs	r2, #1
 800f714:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	220a      	movs	r2, #10
 800f71a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f71c:	4b21      	ldr	r3, [pc, #132]	; (800f7a4 <tcp_process+0x770>)
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	60da      	str	r2, [r3, #12]
 800f724:	4a1f      	ldr	r2, [pc, #124]	; (800f7a4 <tcp_process+0x770>)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6013      	str	r3, [r2, #0]
 800f72a:	f002 f8d1 	bl	80118d0 <tcp_timer_needed>
    }
    break;
 800f72e:	e026      	b.n	800f77e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 f8af 	bl	800f894 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f736:	4b16      	ldr	r3, [pc, #88]	; (800f790 <tcp_process+0x75c>)
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	f003 0310 	and.w	r3, r3, #16
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d01f      	beq.n	800f782 <tcp_process+0x74e>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f746:	4b13      	ldr	r3, [pc, #76]	; (800f794 <tcp_process+0x760>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d119      	bne.n	800f782 <tcp_process+0x74e>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f752:	2b00      	cmp	r3, #0
 800f754:	d115      	bne.n	800f782 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f756:	4b10      	ldr	r3, [pc, #64]	; (800f798 <tcp_process+0x764>)
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	f043 0310 	orr.w	r3, r3, #16
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	4b0d      	ldr	r3, [pc, #52]	; (800f798 <tcp_process+0x764>)
 800f762:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f764:	e00d      	b.n	800f782 <tcp_process+0x74e>
  default:
    break;
 800f766:	bf00      	nop
 800f768:	e00c      	b.n	800f784 <tcp_process+0x750>
    break;
 800f76a:	bf00      	nop
 800f76c:	e00a      	b.n	800f784 <tcp_process+0x750>
    break;
 800f76e:	bf00      	nop
 800f770:	e008      	b.n	800f784 <tcp_process+0x750>
    break;
 800f772:	bf00      	nop
 800f774:	e006      	b.n	800f784 <tcp_process+0x750>
    break;
 800f776:	bf00      	nop
 800f778:	e004      	b.n	800f784 <tcp_process+0x750>
    break;
 800f77a:	bf00      	nop
 800f77c:	e002      	b.n	800f784 <tcp_process+0x750>
    break;
 800f77e:	bf00      	nop
 800f780:	e000      	b.n	800f784 <tcp_process+0x750>
    break;
 800f782:	bf00      	nop
  }
  return ERR_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3720      	adds	r7, #32
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	20004228 	.word	0x20004228
 800f794:	20004220 	.word	0x20004220
 800f798:	20004229 	.word	0x20004229
 800f79c:	2000ab54 	.word	0x2000ab54
 800f7a0:	2000ab50 	.word	0x2000ab50
 800f7a4:	2000ab64 	.word	0x2000ab64

0800f7a8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f7a8:	b590      	push	{r4, r7, lr}
 800f7aa:	b085      	sub	sp, #20
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	899b      	ldrh	r3, [r3, #12]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fc f926 	bl	800ba0c <lwip_htons>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	f003 0301 	and.w	r3, r3, #1
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d027      	beq.n	800f81a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f7ca:	6838      	ldr	r0, [r7, #0]
 800f7cc:	f7fe fbed 	bl	800dfaa <tcp_segs_free>
    next = NULL;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	603b      	str	r3, [r7, #0]
 800f7d4:	e055      	b.n	800f882 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	899b      	ldrh	r3, [r3, #12]
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fc f914 	bl	800ba0c <lwip_htons>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	f003 0301 	and.w	r3, r3, #1
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00d      	beq.n	800f80a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	899b      	ldrh	r3, [r3, #12]
 800f7f4:	b29c      	uxth	r4, r3
 800f7f6:	2001      	movs	r0, #1
 800f7f8:	f7fc f908 	bl	800ba0c <lwip_htons>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	461a      	mov	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	4322      	orrs	r2, r4
 800f806:	b292      	uxth	r2, r2
 800f808:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f814:	68f8      	ldr	r0, [r7, #12]
 800f816:	f7fe fbdc 	bl	800dfd2 <tcp_seg_free>
    while (next &&
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00e      	beq.n	800f83e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	891b      	ldrh	r3, [r3, #8]
 800f824:	461a      	mov	r2, r3
 800f826:	4b1a      	ldr	r3, [pc, #104]	; (800f890 <tcp_oos_insert_segment+0xe8>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	441a      	add	r2, r3
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	6839      	ldr	r1, [r7, #0]
 800f834:	8909      	ldrh	r1, [r1, #8]
 800f836:	440b      	add	r3, r1
 800f838:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	dacb      	bge.n	800f7d6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d01e      	beq.n	800f882 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	891b      	ldrh	r3, [r3, #8]
 800f848:	461a      	mov	r2, r3
 800f84a:	4b11      	ldr	r3, [pc, #68]	; (800f890 <tcp_oos_insert_segment+0xe8>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	441a      	add	r2, r3
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dd12      	ble.n	800f882 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	b29a      	uxth	r2, r3
 800f864:	4b0a      	ldr	r3, [pc, #40]	; (800f890 <tcp_oos_insert_segment+0xe8>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	b29b      	uxth	r3, r3
 800f86a:	1ad3      	subs	r3, r2, r3
 800f86c:	b29a      	uxth	r2, r3
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	685a      	ldr	r2, [r3, #4]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	891b      	ldrh	r3, [r3, #8]
 800f87a:	4619      	mov	r1, r3
 800f87c:	4610      	mov	r0, r2
 800f87e:	f7fd f8e1 	bl	800ca44 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	601a      	str	r2, [r3, #0]
}
 800f888:	bf00      	nop
 800f88a:	3714      	adds	r7, #20
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd90      	pop	{r4, r7, pc}
 800f890:	2000421c 	.word	0x2000421c

0800f894 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f896:	b08d      	sub	sp, #52	; 0x34
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	7d1b      	ldrb	r3, [r3, #20]
 800f8a4:	2b03      	cmp	r3, #3
 800f8a6:	d806      	bhi.n	800f8b6 <tcp_receive+0x22>
 800f8a8:	4ba6      	ldr	r3, [pc, #664]	; (800fb44 <tcp_receive+0x2b0>)
 800f8aa:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f8ae:	49a6      	ldr	r1, [pc, #664]	; (800fb48 <tcp_receive+0x2b4>)
 800f8b0:	48a6      	ldr	r0, [pc, #664]	; (800fb4c <tcp_receive+0x2b8>)
 800f8b2:	f005 fab1 	bl	8014e18 <iprintf>

  if (flags & TCP_ACK) {
 800f8b6:	4ba6      	ldr	r3, [pc, #664]	; (800fb50 <tcp_receive+0x2bc>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	f003 0310 	and.w	r3, r3, #16
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 82bf 	beq.w	800fe42 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8d0:	4413      	add	r3, r2
 800f8d2:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8d8:	4b9e      	ldr	r3, [pc, #632]	; (800fb54 <tcp_receive+0x2c0>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	1ad3      	subs	r3, r2, r3
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	db1b      	blt.n	800f91a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8e6:	4b9b      	ldr	r3, [pc, #620]	; (800fb54 <tcp_receive+0x2c0>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d106      	bne.n	800f8fc <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8f2:	4b99      	ldr	r3, [pc, #612]	; (800fb58 <tcp_receive+0x2c4>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	db0e      	blt.n	800f91a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f900:	4b95      	ldr	r3, [pc, #596]	; (800fb58 <tcp_receive+0x2c4>)
 800f902:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f904:	429a      	cmp	r2, r3
 800f906:	d141      	bne.n	800f98c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f908:	4b94      	ldr	r3, [pc, #592]	; (800fb5c <tcp_receive+0x2c8>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	89db      	ldrh	r3, [r3, #14]
 800f90e:	b29a      	uxth	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f916:	429a      	cmp	r2, r3
 800f918:	d938      	bls.n	800f98c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f91a:	4b90      	ldr	r3, [pc, #576]	; (800fb5c <tcp_receive+0x2c8>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	89db      	ldrh	r3, [r3, #14]
 800f920:	b29a      	uxth	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f934:	429a      	cmp	r2, r3
 800f936:	d205      	bcs.n	800f944 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f944:	4b83      	ldr	r3, [pc, #524]	; (800fb54 <tcp_receive+0x2c0>)
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f94c:	4b82      	ldr	r3, [pc, #520]	; (800fb58 <tcp_receive+0x2c4>)
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d10d      	bne.n	800f97a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f964:	2b00      	cmp	r3, #0
 800f966:	d111      	bne.n	800f98c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f978:	e008      	b.n	800f98c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f980:	2b00      	cmp	r3, #0
 800f982:	d003      	beq.n	800f98c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2200      	movs	r2, #0
 800f988:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f98c:	4b72      	ldr	r3, [pc, #456]	; (800fb58 <tcp_receive+0x2c4>)
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	dc53      	bgt.n	800fa42 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f99a:	4b71      	ldr	r3, [pc, #452]	; (800fb60 <tcp_receive+0x2cc>)
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d146      	bne.n	800fa30 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f9ac:	4413      	add	r3, r2
 800f9ae:	697a      	ldr	r2, [r7, #20]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d13d      	bne.n	800fa30 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	db38      	blt.n	800fa30 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9c2:	4b65      	ldr	r3, [pc, #404]	; (800fb58 <tcp_receive+0x2c4>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d132      	bne.n	800fa30 <tcp_receive+0x19c>
              found_dupack = 1;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9d4:	2bff      	cmp	r3, #255	; 0xff
 800f9d6:	d007      	beq.n	800f9e8 <tcp_receive+0x154>
                ++pcb->dupacks;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9de:	3301      	adds	r3, #1
 800f9e0:	b2da      	uxtb	r2, r3
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9ee:	2b03      	cmp	r3, #3
 800f9f0:	d916      	bls.n	800fa20 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9fc:	4413      	add	r3, r2
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d912      	bls.n	800fa30 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa14:	4413      	add	r3, r2
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa1e:	e007      	b.n	800fa30 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa26:	2b03      	cmp	r3, #3
 800fa28:	d102      	bne.n	800fa30 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f001 fdfc 	bl	8011628 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	f040 8169 	bne.w	800fd0a <tcp_receive+0x476>
        pcb->dupacks = 0;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa40:	e163      	b.n	800fd0a <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800fa42:	4b45      	ldr	r3, [pc, #276]	; (800fb58 <tcp_receive+0x2c4>)
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f2c0 8107 	blt.w	800fc62 <tcp_receive+0x3ce>
 800fa54:	4b40      	ldr	r3, [pc, #256]	; (800fb58 <tcp_receive+0x2c4>)
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa5c:	1ad3      	subs	r3, r2, r3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f300 80ff 	bgt.w	800fc62 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	7e9b      	ldrb	r3, [r3, #26]
 800fa68:	f003 0304 	and.w	r3, r3, #4
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d00c      	beq.n	800fa8a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	7e9b      	ldrb	r3, [r3, #26]
 800fa74:	f023 0304 	bic.w	r3, r3, #4
 800fa78:	b2da      	uxtb	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa98:	10db      	asrs	r3, r3, #3
 800fa9a:	b21b      	sxth	r3, r3
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	4413      	add	r3, r2
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	b21a      	sxth	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800faba:	4b27      	ldr	r3, [pc, #156]	; (800fb58 <tcp_receive+0x2c4>)
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	7d1b      	ldrb	r3, [r3, #20]
 800fac6:	2b03      	cmp	r3, #3
 800fac8:	f240 8094 	bls.w	800fbf4 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fad8:	429a      	cmp	r2, r3
 800fada:	d216      	bcs.n	800fb0a <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fae6:	4413      	add	r3, r2
 800fae8:	b29a      	uxth	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d97f      	bls.n	800fbf4 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fafe:	4413      	add	r3, r2
 800fb00:	b29a      	uxth	r2, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb08:	e074      	b.n	800fbf4 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb14:	4619      	mov	r1, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb1a:	fb03 f301 	mul.w	r3, r3, r1
 800fb1e:	6879      	ldr	r1, [r7, #4]
 800fb20:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800fb24:	fb93 f3f1 	sdiv	r3, r3, r1
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	4413      	add	r3, r2
 800fb2c:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb34:	8a7a      	ldrh	r2, [r7, #18]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d95c      	bls.n	800fbf4 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	8a7a      	ldrh	r2, [r7, #18]
 800fb3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800fb42:	e057      	b.n	800fbf4 <tcp_receive+0x360>
 800fb44:	080169b4 	.word	0x080169b4
 800fb48:	08016bd8 	.word	0x08016bd8
 800fb4c:	080169f8 	.word	0x080169f8
 800fb50:	20004228 	.word	0x20004228
 800fb54:	2000421c 	.word	0x2000421c
 800fb58:	20004220 	.word	0x20004220
 800fb5c:	2000420c 	.word	0x2000420c
 800fb60:	20004226 	.word	0x20004226
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb68:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fd f96e 	bl	800ce60 <pbuf_clen>
 800fb84:	4603      	mov	r3, r0
 800fb86:	429c      	cmp	r4, r3
 800fb88:	d206      	bcs.n	800fb98 <tcp_receive+0x304>
 800fb8a:	4b70      	ldr	r3, [pc, #448]	; (800fd4c <tcp_receive+0x4b8>)
 800fb8c:	f240 429e 	movw	r2, #1182	; 0x49e
 800fb90:	496f      	ldr	r1, [pc, #444]	; (800fd50 <tcp_receive+0x4bc>)
 800fb92:	4870      	ldr	r0, [pc, #448]	; (800fd54 <tcp_receive+0x4c0>)
 800fb94:	f005 f940 	bl	8014e18 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fd f95f 	bl	800ce60 <pbuf_clen>
 800fba2:	4603      	mov	r3, r0
 800fba4:	461a      	mov	r2, r3
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbac:	1a9b      	subs	r3, r3, r2
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	891a      	ldrh	r2, [r3, #8]
 800fbba:	4b67      	ldr	r3, [pc, #412]	; (800fd58 <tcp_receive+0x4c4>)
 800fbbc:	881b      	ldrh	r3, [r3, #0]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	4b65      	ldr	r3, [pc, #404]	; (800fd58 <tcp_receive+0x4c4>)
 800fbc4:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800fbc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbc8:	f7fe fa03 	bl	800dfd2 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d00e      	beq.n	800fbf4 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d10a      	bne.n	800fbf4 <tcp_receive+0x360>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d106      	bne.n	800fbf4 <tcp_receive+0x360>
 800fbe6:	4b59      	ldr	r3, [pc, #356]	; (800fd4c <tcp_receive+0x4b8>)
 800fbe8:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800fbec:	495b      	ldr	r1, [pc, #364]	; (800fd5c <tcp_receive+0x4c8>)
 800fbee:	4859      	ldr	r0, [pc, #356]	; (800fd54 <tcp_receive+0x4c0>)
 800fbf0:	f005 f912 	bl	8014e18 <iprintf>
      while (pcb->unacked != NULL &&
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d022      	beq.n	800fc42 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fb ff0f 	bl	800ba28 <lwip_htonl>
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc10:	891b      	ldrh	r3, [r3, #8]
 800fc12:	461d      	mov	r5, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	899b      	ldrh	r3, [r3, #12]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fb fef4 	bl	800ba0c <lwip_htons>
 800fc24:	4603      	mov	r3, r0
 800fc26:	f003 0303 	and.w	r3, r3, #3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d001      	beq.n	800fc32 <tcp_receive+0x39e>
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e000      	b.n	800fc34 <tcp_receive+0x3a0>
 800fc32:	2300      	movs	r3, #0
 800fc34:	442b      	add	r3, r5
 800fc36:	18e2      	adds	r2, r4, r3
 800fc38:	4b49      	ldr	r3, [pc, #292]	; (800fd60 <tcp_receive+0x4cc>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	dd90      	ble.n	800fb64 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d104      	bne.n	800fc54 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc50:	861a      	strh	r2, [r3, #48]	; 0x30
 800fc52:	e002      	b.n	800fc5a <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2200      	movs	r2, #0
 800fc58:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	76da      	strb	r2, [r3, #27]
 800fc60:	e002      	b.n	800fc68 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f001 f8fe 	bl	8010e64 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800fc68:	e04f      	b.n	800fd0a <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d103      	bne.n	800fc8a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fd f8e3 	bl	800ce60 <pbuf_clen>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	429c      	cmp	r4, r3
 800fc9e:	d206      	bcs.n	800fcae <tcp_receive+0x41a>
 800fca0:	4b2a      	ldr	r3, [pc, #168]	; (800fd4c <tcp_receive+0x4b8>)
 800fca2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fca6:	492a      	ldr	r1, [pc, #168]	; (800fd50 <tcp_receive+0x4bc>)
 800fca8:	482a      	ldr	r0, [pc, #168]	; (800fd54 <tcp_receive+0x4c0>)
 800fcaa:	f005 f8b5 	bl	8014e18 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800fcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fd f8d4 	bl	800ce60 <pbuf_clen>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	461a      	mov	r2, r3
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcc2:	1a9b      	subs	r3, r3, r2
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800fccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcce:	891a      	ldrh	r2, [r3, #8]
 800fcd0:	4b21      	ldr	r3, [pc, #132]	; (800fd58 <tcp_receive+0x4c4>)
 800fcd2:	881b      	ldrh	r3, [r3, #0]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	4b1f      	ldr	r3, [pc, #124]	; (800fd58 <tcp_receive+0x4c4>)
 800fcda:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800fcdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcde:	f7fe f978 	bl	800dfd2 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00e      	beq.n	800fd0a <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d10a      	bne.n	800fd0a <tcp_receive+0x476>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d106      	bne.n	800fd0a <tcp_receive+0x476>
 800fcfc:	4b13      	ldr	r3, [pc, #76]	; (800fd4c <tcp_receive+0x4b8>)
 800fcfe:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800fd02:	4916      	ldr	r1, [pc, #88]	; (800fd5c <tcp_receive+0x4c8>)
 800fd04:	4813      	ldr	r0, [pc, #76]	; (800fd54 <tcp_receive+0x4c0>)
 800fd06:	f005 f887 	bl	8014e18 <iprintf>
    while (pcb->unsent != NULL &&
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d036      	beq.n	800fd80 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fd12:	4b13      	ldr	r3, [pc, #76]	; (800fd60 <tcp_receive+0x4cc>)
 800fd14:	681c      	ldr	r4, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fb fe82 	bl	800ba28 <lwip_htonl>
 800fd24:	4605      	mov	r5, r0
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd2a:	891b      	ldrh	r3, [r3, #8]
 800fd2c:	461e      	mov	r6, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	899b      	ldrh	r3, [r3, #12]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fb fe67 	bl	800ba0c <lwip_htons>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	f003 0303 	and.w	r3, r3, #3
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00d      	beq.n	800fd64 <tcp_receive+0x4d0>
 800fd48:	2301      	movs	r3, #1
 800fd4a:	e00c      	b.n	800fd66 <tcp_receive+0x4d2>
 800fd4c:	080169b4 	.word	0x080169b4
 800fd50:	08016bf4 	.word	0x08016bf4
 800fd54:	080169f8 	.word	0x080169f8
 800fd58:	20004224 	.word	0x20004224
 800fd5c:	08016c1c 	.word	0x08016c1c
 800fd60:	20004220 	.word	0x20004220
 800fd64:	2300      	movs	r3, #0
 800fd66:	4433      	add	r3, r6
 800fd68:	442b      	add	r3, r5
 800fd6a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	db07      	blt.n	800fd80 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fd70:	4b8d      	ldr	r3, [pc, #564]	; (800ffa8 <tcp_receive+0x714>)
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd78:	1ad3      	subs	r3, r2, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f77f af75 	ble.w	800fc6a <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd86:	4b89      	ldr	r3, [pc, #548]	; (800ffac <tcp_receive+0x718>)
 800fd88:	881b      	ldrh	r3, [r3, #0]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d052      	beq.n	800fe42 <tcp_receive+0x5ae>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fda0:	4b81      	ldr	r3, [pc, #516]	; (800ffa8 <tcp_receive+0x714>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	da4b      	bge.n	800fe42 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fdaa:	4b81      	ldr	r3, [pc, #516]	; (800ffb0 <tcp_receive+0x71c>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800fdbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdc4:	10db      	asrs	r3, r3, #3
 800fdc6:	b21b      	sxth	r3, r3
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	1ad3      	subs	r3, r2, r3
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdda:	4413      	add	r3, r2
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	b21a      	sxth	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fde4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	da03      	bge.n	800fdf4 <tcp_receive+0x560>
        m = -m;
 800fdec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdee:	425b      	negs	r3, r3
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800fdf4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fdfc:	109b      	asrs	r3, r3, #2
 800fdfe:	b21b      	sxth	r3, r3
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	1ad3      	subs	r3, r2, r3
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe0e:	b29a      	uxth	r2, r3
 800fe10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe12:	4413      	add	r3, r2
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	b21a      	sxth	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe22:	10db      	asrs	r3, r3, #3
 800fe24:	b21b      	sxth	r3, r3
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	4413      	add	r3, r2
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	b21a      	sxth	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fe42:	4b5c      	ldr	r3, [pc, #368]	; (800ffb4 <tcp_receive+0x720>)
 800fe44:	881b      	ldrh	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	f000 84f1 	beq.w	801082e <tcp_receive+0xf9a>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	7d1b      	ldrb	r3, [r3, #20]
 800fe50:	2b06      	cmp	r3, #6
 800fe52:	f200 84ec 	bhi.w	801082e <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe5a:	4b57      	ldr	r3, [pc, #348]	; (800ffb8 <tcp_receive+0x724>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	1ad3      	subs	r3, r2, r3
 800fe60:	3b01      	subs	r3, #1
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f2c0 80b8 	blt.w	800ffd8 <tcp_receive+0x744>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe6c:	4b51      	ldr	r3, [pc, #324]	; (800ffb4 <tcp_receive+0x720>)
 800fe6e:	881b      	ldrh	r3, [r3, #0]
 800fe70:	4619      	mov	r1, r3
 800fe72:	4b51      	ldr	r3, [pc, #324]	; (800ffb8 <tcp_receive+0x724>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	440b      	add	r3, r1
 800fe78:	1ad3      	subs	r3, r2, r3
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	f300 80ab 	bgt.w	800ffd8 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fe82:	4b4e      	ldr	r3, [pc, #312]	; (800ffbc <tcp_receive+0x728>)
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe8c:	4b4a      	ldr	r3, [pc, #296]	; (800ffb8 <tcp_receive+0x724>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fe94:	4b49      	ldr	r3, [pc, #292]	; (800ffbc <tcp_receive+0x728>)
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d106      	bne.n	800feaa <tcp_receive+0x616>
 800fe9c:	4b48      	ldr	r3, [pc, #288]	; (800ffc0 <tcp_receive+0x72c>)
 800fe9e:	f240 523c 	movw	r2, #1340	; 0x53c
 800fea2:	4948      	ldr	r1, [pc, #288]	; (800ffc4 <tcp_receive+0x730>)
 800fea4:	4848      	ldr	r0, [pc, #288]	; (800ffc8 <tcp_receive+0x734>)
 800fea6:	f004 ffb7 	bl	8014e18 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800feb0:	4293      	cmp	r3, r2
 800feb2:	dd06      	ble.n	800fec2 <tcp_receive+0x62e>
 800feb4:	4b42      	ldr	r3, [pc, #264]	; (800ffc0 <tcp_receive+0x72c>)
 800feb6:	f240 523d 	movw	r2, #1341	; 0x53d
 800feba:	4944      	ldr	r1, [pc, #272]	; (800ffcc <tcp_receive+0x738>)
 800febc:	4842      	ldr	r0, [pc, #264]	; (800ffc8 <tcp_receive+0x734>)
 800febe:	f004 ffab 	bl	8014e18 <iprintf>
      if (inseg.p->len < off) {
 800fec2:	4b3e      	ldr	r3, [pc, #248]	; (800ffbc <tcp_receive+0x728>)
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	895b      	ldrh	r3, [r3, #10]
 800fec8:	461a      	mov	r2, r3
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	4293      	cmp	r3, r2
 800fece:	dd3e      	ble.n	800ff4e <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fed0:	4b3a      	ldr	r3, [pc, #232]	; (800ffbc <tcp_receive+0x728>)
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	891b      	ldrh	r3, [r3, #8]
 800fed6:	461a      	mov	r2, r3
 800fed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feda:	4293      	cmp	r3, r2
 800fedc:	dd06      	ble.n	800feec <tcp_receive+0x658>
 800fede:	4b38      	ldr	r3, [pc, #224]	; (800ffc0 <tcp_receive+0x72c>)
 800fee0:	f240 523f 	movw	r2, #1343	; 0x53f
 800fee4:	493a      	ldr	r1, [pc, #232]	; (800ffd0 <tcp_receive+0x73c>)
 800fee6:	4838      	ldr	r0, [pc, #224]	; (800ffc8 <tcp_receive+0x734>)
 800fee8:	f004 ff96 	bl	8014e18 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800feec:	4b33      	ldr	r3, [pc, #204]	; (800ffbc <tcp_receive+0x728>)
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	891a      	ldrh	r2, [r3, #8]
 800fef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800fefa:	e00e      	b.n	800ff1a <tcp_receive+0x686>
          off -= p->len;
 800fefc:	69bb      	ldr	r3, [r7, #24]
 800fefe:	895b      	ldrh	r3, [r3, #10]
 800ff00:	461a      	mov	r2, r3
 800ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff04:	1a9b      	subs	r3, r3, r2
 800ff06:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	8a3a      	ldrh	r2, [r7, #16]
 800ff0c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	2200      	movs	r2, #0
 800ff12:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800ff14:	69bb      	ldr	r3, [r7, #24]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	895b      	ldrh	r3, [r3, #10]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff22:	4293      	cmp	r3, r2
 800ff24:	dcea      	bgt.n	800fefc <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800ff26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	425b      	negs	r3, r3
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	b21b      	sxth	r3, r3
 800ff30:	4619      	mov	r1, r3
 800ff32:	69b8      	ldr	r0, [r7, #24]
 800ff34:	f7fc fed6 	bl	800cce4 <pbuf_header>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d01c      	beq.n	800ff78 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ff3e:	4b20      	ldr	r3, [pc, #128]	; (800ffc0 <tcp_receive+0x72c>)
 800ff40:	f240 524c 	movw	r2, #1356	; 0x54c
 800ff44:	4923      	ldr	r1, [pc, #140]	; (800ffd4 <tcp_receive+0x740>)
 800ff46:	4820      	ldr	r0, [pc, #128]	; (800ffc8 <tcp_receive+0x734>)
 800ff48:	f004 ff66 	bl	8014e18 <iprintf>
 800ff4c:	e014      	b.n	800ff78 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800ff4e:	4b1b      	ldr	r3, [pc, #108]	; (800ffbc <tcp_receive+0x728>)
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff54:	b292      	uxth	r2, r2
 800ff56:	4252      	negs	r2, r2
 800ff58:	b292      	uxth	r2, r2
 800ff5a:	b212      	sxth	r2, r2
 800ff5c:	4611      	mov	r1, r2
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fc fec0 	bl	800cce4 <pbuf_header>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d006      	beq.n	800ff78 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ff6a:	4b15      	ldr	r3, [pc, #84]	; (800ffc0 <tcp_receive+0x72c>)
 800ff6c:	f240 5251 	movw	r2, #1361	; 0x551
 800ff70:	4918      	ldr	r1, [pc, #96]	; (800ffd4 <tcp_receive+0x740>)
 800ff72:	4815      	ldr	r0, [pc, #84]	; (800ffc8 <tcp_receive+0x734>)
 800ff74:	f004 ff50 	bl	8014e18 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800ff78:	4b10      	ldr	r3, [pc, #64]	; (800ffbc <tcp_receive+0x728>)
 800ff7a:	891a      	ldrh	r2, [r3, #8]
 800ff7c:	4b0e      	ldr	r3, [pc, #56]	; (800ffb8 <tcp_receive+0x724>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	b299      	uxth	r1, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	1acb      	subs	r3, r1, r3
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4413      	add	r3, r2
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	4b0a      	ldr	r3, [pc, #40]	; (800ffbc <tcp_receive+0x728>)
 800ff92:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff98:	4a07      	ldr	r2, [pc, #28]	; (800ffb8 <tcp_receive+0x724>)
 800ff9a:	6013      	str	r3, [r2, #0]
 800ff9c:	4b07      	ldr	r3, [pc, #28]	; (800ffbc <tcp_receive+0x728>)
 800ff9e:	68db      	ldr	r3, [r3, #12]
 800ffa0:	4a05      	ldr	r2, [pc, #20]	; (800ffb8 <tcp_receive+0x724>)
 800ffa2:	6812      	ldr	r2, [r2, #0]
 800ffa4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ffa6:	e025      	b.n	800fff4 <tcp_receive+0x760>
 800ffa8:	20004220 	.word	0x20004220
 800ffac:	20004224 	.word	0x20004224
 800ffb0:	2000ab58 	.word	0x2000ab58
 800ffb4:	20004226 	.word	0x20004226
 800ffb8:	2000421c 	.word	0x2000421c
 800ffbc:	200041fc 	.word	0x200041fc
 800ffc0:	080169b4 	.word	0x080169b4
 800ffc4:	08016c3c 	.word	0x08016c3c
 800ffc8:	080169f8 	.word	0x080169f8
 800ffcc:	08016c4c 	.word	0x08016c4c
 800ffd0:	08016c5c 	.word	0x08016c5c
 800ffd4:	08016c6c 	.word	0x08016c6c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ffd8:	4b87      	ldr	r3, [pc, #540]	; (80101f8 <tcp_receive+0x964>)
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	da06      	bge.n	800fff4 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	7e9b      	ldrb	r3, [r3, #26]
 800ffea:	f043 0302 	orr.w	r3, r3, #2
 800ffee:	b2da      	uxtb	r2, r3
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fff4:	4b80      	ldr	r3, [pc, #512]	; (80101f8 <tcp_receive+0x964>)
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f2c0 8410 	blt.w	8010824 <tcp_receive+0xf90>
 8010004:	4b7c      	ldr	r3, [pc, #496]	; (80101f8 <tcp_receive+0x964>)
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010010:	440b      	add	r3, r1
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	3301      	adds	r3, #1
 8010016:	2b00      	cmp	r3, #0
 8010018:	f300 8404 	bgt.w	8010824 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010020:	4b75      	ldr	r3, [pc, #468]	; (80101f8 <tcp_receive+0x964>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	429a      	cmp	r2, r3
 8010026:	f040 8287 	bne.w	8010538 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801002a:	4b74      	ldr	r3, [pc, #464]	; (80101fc <tcp_receive+0x968>)
 801002c:	891c      	ldrh	r4, [r3, #8]
 801002e:	4b73      	ldr	r3, [pc, #460]	; (80101fc <tcp_receive+0x968>)
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	899b      	ldrh	r3, [r3, #12]
 8010034:	b29b      	uxth	r3, r3
 8010036:	4618      	mov	r0, r3
 8010038:	f7fb fce8 	bl	800ba0c <lwip_htons>
 801003c:	4603      	mov	r3, r0
 801003e:	f003 0303 	and.w	r3, r3, #3
 8010042:	2b00      	cmp	r3, #0
 8010044:	d001      	beq.n	801004a <tcp_receive+0x7b6>
 8010046:	2301      	movs	r3, #1
 8010048:	e000      	b.n	801004c <tcp_receive+0x7b8>
 801004a:	2300      	movs	r3, #0
 801004c:	4423      	add	r3, r4
 801004e:	b29a      	uxth	r2, r3
 8010050:	4b6b      	ldr	r3, [pc, #428]	; (8010200 <tcp_receive+0x96c>)
 8010052:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010058:	4b69      	ldr	r3, [pc, #420]	; (8010200 <tcp_receive+0x96c>)
 801005a:	881b      	ldrh	r3, [r3, #0]
 801005c:	429a      	cmp	r2, r3
 801005e:	d26e      	bcs.n	801013e <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010060:	4b66      	ldr	r3, [pc, #408]	; (80101fc <tcp_receive+0x968>)
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	899b      	ldrh	r3, [r3, #12]
 8010066:	b29b      	uxth	r3, r3
 8010068:	4618      	mov	r0, r3
 801006a:	f7fb fccf 	bl	800ba0c <lwip_htons>
 801006e:	4603      	mov	r3, r0
 8010070:	f003 0301 	and.w	r3, r3, #1
 8010074:	2b00      	cmp	r3, #0
 8010076:	d01b      	beq.n	80100b0 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010078:	4b60      	ldr	r3, [pc, #384]	; (80101fc <tcp_receive+0x968>)
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	899b      	ldrh	r3, [r3, #12]
 801007e:	b29b      	uxth	r3, r3
 8010080:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010084:	b29c      	uxth	r4, r3
 8010086:	4b5d      	ldr	r3, [pc, #372]	; (80101fc <tcp_receive+0x968>)
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	899b      	ldrh	r3, [r3, #12]
 801008c:	b29b      	uxth	r3, r3
 801008e:	4618      	mov	r0, r3
 8010090:	f7fb fcbc 	bl	800ba0c <lwip_htons>
 8010094:	4603      	mov	r3, r0
 8010096:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801009a:	b29b      	uxth	r3, r3
 801009c:	4618      	mov	r0, r3
 801009e:	f7fb fcb5 	bl	800ba0c <lwip_htons>
 80100a2:	4603      	mov	r3, r0
 80100a4:	461a      	mov	r2, r3
 80100a6:	4b55      	ldr	r3, [pc, #340]	; (80101fc <tcp_receive+0x968>)
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	4322      	orrs	r2, r4
 80100ac:	b292      	uxth	r2, r2
 80100ae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100b4:	4b51      	ldr	r3, [pc, #324]	; (80101fc <tcp_receive+0x968>)
 80100b6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80100b8:	4b50      	ldr	r3, [pc, #320]	; (80101fc <tcp_receive+0x968>)
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	899b      	ldrh	r3, [r3, #12]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fb fca3 	bl	800ba0c <lwip_htons>
 80100c6:	4603      	mov	r3, r0
 80100c8:	f003 0302 	and.w	r3, r3, #2
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d005      	beq.n	80100dc <tcp_receive+0x848>
            inseg.len -= 1;
 80100d0:	4b4a      	ldr	r3, [pc, #296]	; (80101fc <tcp_receive+0x968>)
 80100d2:	891b      	ldrh	r3, [r3, #8]
 80100d4:	3b01      	subs	r3, #1
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	4b48      	ldr	r3, [pc, #288]	; (80101fc <tcp_receive+0x968>)
 80100da:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80100dc:	4b47      	ldr	r3, [pc, #284]	; (80101fc <tcp_receive+0x968>)
 80100de:	685a      	ldr	r2, [r3, #4]
 80100e0:	4b46      	ldr	r3, [pc, #280]	; (80101fc <tcp_receive+0x968>)
 80100e2:	891b      	ldrh	r3, [r3, #8]
 80100e4:	4619      	mov	r1, r3
 80100e6:	4610      	mov	r0, r2
 80100e8:	f7fc fcac 	bl	800ca44 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80100ec:	4b43      	ldr	r3, [pc, #268]	; (80101fc <tcp_receive+0x968>)
 80100ee:	891c      	ldrh	r4, [r3, #8]
 80100f0:	4b42      	ldr	r3, [pc, #264]	; (80101fc <tcp_receive+0x968>)
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	899b      	ldrh	r3, [r3, #12]
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7fb fc87 	bl	800ba0c <lwip_htons>
 80100fe:	4603      	mov	r3, r0
 8010100:	f003 0303 	and.w	r3, r3, #3
 8010104:	2b00      	cmp	r3, #0
 8010106:	d001      	beq.n	801010c <tcp_receive+0x878>
 8010108:	2301      	movs	r3, #1
 801010a:	e000      	b.n	801010e <tcp_receive+0x87a>
 801010c:	2300      	movs	r3, #0
 801010e:	4423      	add	r3, r4
 8010110:	b29a      	uxth	r2, r3
 8010112:	4b3b      	ldr	r3, [pc, #236]	; (8010200 <tcp_receive+0x96c>)
 8010114:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010116:	4b3a      	ldr	r3, [pc, #232]	; (8010200 <tcp_receive+0x96c>)
 8010118:	881b      	ldrh	r3, [r3, #0]
 801011a:	461a      	mov	r2, r3
 801011c:	4b36      	ldr	r3, [pc, #216]	; (80101f8 <tcp_receive+0x964>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	441a      	add	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010126:	6879      	ldr	r1, [r7, #4]
 8010128:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801012a:	440b      	add	r3, r1
 801012c:	429a      	cmp	r2, r3
 801012e:	d006      	beq.n	801013e <tcp_receive+0x8aa>
 8010130:	4b34      	ldr	r3, [pc, #208]	; (8010204 <tcp_receive+0x970>)
 8010132:	f240 527f 	movw	r2, #1407	; 0x57f
 8010136:	4934      	ldr	r1, [pc, #208]	; (8010208 <tcp_receive+0x974>)
 8010138:	4834      	ldr	r0, [pc, #208]	; (801020c <tcp_receive+0x978>)
 801013a:	f004 fe6d 	bl	8014e18 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010142:	2b00      	cmp	r3, #0
 8010144:	f000 80e1 	beq.w	801030a <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010148:	4b2c      	ldr	r3, [pc, #176]	; (80101fc <tcp_receive+0x968>)
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	899b      	ldrh	r3, [r3, #12]
 801014e:	b29b      	uxth	r3, r3
 8010150:	4618      	mov	r0, r3
 8010152:	f7fb fc5b 	bl	800ba0c <lwip_htons>
 8010156:	4603      	mov	r3, r0
 8010158:	f003 0301 	and.w	r3, r3, #1
 801015c:	2b00      	cmp	r3, #0
 801015e:	d010      	beq.n	8010182 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010160:	e00a      	b.n	8010178 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010166:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8010172:	68b8      	ldr	r0, [r7, #8]
 8010174:	f7fd ff2d 	bl	800dfd2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1f0      	bne.n	8010162 <tcp_receive+0x8ce>
 8010180:	e0c3      	b.n	801030a <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010186:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010188:	e04f      	b.n	801022a <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801018a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	899b      	ldrh	r3, [r3, #12]
 8010190:	b29b      	uxth	r3, r3
 8010192:	4618      	mov	r0, r3
 8010194:	f7fb fc3a 	bl	800ba0c <lwip_htons>
 8010198:	4603      	mov	r3, r0
 801019a:	f003 0301 	and.w	r3, r3, #1
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d03b      	beq.n	801021a <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80101a2:	4b16      	ldr	r3, [pc, #88]	; (80101fc <tcp_receive+0x968>)
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	899b      	ldrh	r3, [r3, #12]
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fb fc2e 	bl	800ba0c <lwip_htons>
 80101b0:	4603      	mov	r3, r0
 80101b2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d12f      	bne.n	801021a <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80101ba:	4b10      	ldr	r3, [pc, #64]	; (80101fc <tcp_receive+0x968>)
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	899b      	ldrh	r3, [r3, #12]
 80101c0:	b29c      	uxth	r4, r3
 80101c2:	2001      	movs	r0, #1
 80101c4:	f7fb fc22 	bl	800ba0c <lwip_htons>
 80101c8:	4603      	mov	r3, r0
 80101ca:	461a      	mov	r2, r3
 80101cc:	4b0b      	ldr	r3, [pc, #44]	; (80101fc <tcp_receive+0x968>)
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	4322      	orrs	r2, r4
 80101d2:	b292      	uxth	r2, r2
 80101d4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80101d6:	4b09      	ldr	r3, [pc, #36]	; (80101fc <tcp_receive+0x968>)
 80101d8:	891c      	ldrh	r4, [r3, #8]
 80101da:	4b08      	ldr	r3, [pc, #32]	; (80101fc <tcp_receive+0x968>)
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	899b      	ldrh	r3, [r3, #12]
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fb fc12 	bl	800ba0c <lwip_htons>
 80101e8:	4603      	mov	r3, r0
 80101ea:	f003 0303 	and.w	r3, r3, #3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00e      	beq.n	8010210 <tcp_receive+0x97c>
 80101f2:	2301      	movs	r3, #1
 80101f4:	e00d      	b.n	8010212 <tcp_receive+0x97e>
 80101f6:	bf00      	nop
 80101f8:	2000421c 	.word	0x2000421c
 80101fc:	200041fc 	.word	0x200041fc
 8010200:	20004226 	.word	0x20004226
 8010204:	080169b4 	.word	0x080169b4
 8010208:	08016c80 	.word	0x08016c80
 801020c:	080169f8 	.word	0x080169f8
 8010210:	2300      	movs	r3, #0
 8010212:	4423      	add	r3, r4
 8010214:	b29a      	uxth	r2, r3
 8010216:	4b95      	ldr	r3, [pc, #596]	; (801046c <tcp_receive+0xbd8>)
 8010218:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 801021e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8010224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010226:	f7fd fed4 	bl	800dfd2 <tcp_seg_free>
            while (next &&
 801022a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00e      	beq.n	801024e <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010230:	4b8e      	ldr	r3, [pc, #568]	; (801046c <tcp_receive+0xbd8>)
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	461a      	mov	r2, r3
 8010236:	4b8e      	ldr	r3, [pc, #568]	; (8010470 <tcp_receive+0xbdc>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	441a      	add	r2, r3
 801023c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010244:	8909      	ldrh	r1, [r1, #8]
 8010246:	440b      	add	r3, r1
 8010248:	1ad3      	subs	r3, r2, r3
            while (next &&
 801024a:	2b00      	cmp	r3, #0
 801024c:	da9d      	bge.n	801018a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801024e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010250:	2b00      	cmp	r3, #0
 8010252:	d057      	beq.n	8010304 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8010254:	4b85      	ldr	r3, [pc, #532]	; (801046c <tcp_receive+0xbd8>)
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	461a      	mov	r2, r3
 801025a:	4b85      	ldr	r3, [pc, #532]	; (8010470 <tcp_receive+0xbdc>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	441a      	add	r2, r3
 8010260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010268:	2b00      	cmp	r3, #0
 801026a:	dd4b      	ble.n	8010304 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	b29a      	uxth	r2, r3
 8010274:	4b7e      	ldr	r3, [pc, #504]	; (8010470 <tcp_receive+0xbdc>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	b29b      	uxth	r3, r3
 801027a:	1ad3      	subs	r3, r2, r3
 801027c:	b29a      	uxth	r2, r3
 801027e:	4b7d      	ldr	r3, [pc, #500]	; (8010474 <tcp_receive+0xbe0>)
 8010280:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010282:	4b7c      	ldr	r3, [pc, #496]	; (8010474 <tcp_receive+0xbe0>)
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	899b      	ldrh	r3, [r3, #12]
 8010288:	b29b      	uxth	r3, r3
 801028a:	4618      	mov	r0, r3
 801028c:	f7fb fbbe 	bl	800ba0c <lwip_htons>
 8010290:	4603      	mov	r3, r0
 8010292:	f003 0302 	and.w	r3, r3, #2
 8010296:	2b00      	cmp	r3, #0
 8010298:	d005      	beq.n	80102a6 <tcp_receive+0xa12>
                inseg.len -= 1;
 801029a:	4b76      	ldr	r3, [pc, #472]	; (8010474 <tcp_receive+0xbe0>)
 801029c:	891b      	ldrh	r3, [r3, #8]
 801029e:	3b01      	subs	r3, #1
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	4b74      	ldr	r3, [pc, #464]	; (8010474 <tcp_receive+0xbe0>)
 80102a4:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80102a6:	4b73      	ldr	r3, [pc, #460]	; (8010474 <tcp_receive+0xbe0>)
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	4b72      	ldr	r3, [pc, #456]	; (8010474 <tcp_receive+0xbe0>)
 80102ac:	891b      	ldrh	r3, [r3, #8]
 80102ae:	4619      	mov	r1, r3
 80102b0:	4610      	mov	r0, r2
 80102b2:	f7fc fbc7 	bl	800ca44 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80102b6:	4b6f      	ldr	r3, [pc, #444]	; (8010474 <tcp_receive+0xbe0>)
 80102b8:	891c      	ldrh	r4, [r3, #8]
 80102ba:	4b6e      	ldr	r3, [pc, #440]	; (8010474 <tcp_receive+0xbe0>)
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	899b      	ldrh	r3, [r3, #12]
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fb fba2 	bl	800ba0c <lwip_htons>
 80102c8:	4603      	mov	r3, r0
 80102ca:	f003 0303 	and.w	r3, r3, #3
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d001      	beq.n	80102d6 <tcp_receive+0xa42>
 80102d2:	2301      	movs	r3, #1
 80102d4:	e000      	b.n	80102d8 <tcp_receive+0xa44>
 80102d6:	2300      	movs	r3, #0
 80102d8:	4423      	add	r3, r4
 80102da:	b29a      	uxth	r2, r3
 80102dc:	4b63      	ldr	r3, [pc, #396]	; (801046c <tcp_receive+0xbd8>)
 80102de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80102e0:	4b62      	ldr	r3, [pc, #392]	; (801046c <tcp_receive+0xbd8>)
 80102e2:	881b      	ldrh	r3, [r3, #0]
 80102e4:	461a      	mov	r2, r3
 80102e6:	4b62      	ldr	r3, [pc, #392]	; (8010470 <tcp_receive+0xbdc>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	441a      	add	r2, r3
 80102ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d006      	beq.n	8010304 <tcp_receive+0xa70>
 80102f6:	4b60      	ldr	r3, [pc, #384]	; (8010478 <tcp_receive+0xbe4>)
 80102f8:	f240 52af 	movw	r2, #1455	; 0x5af
 80102fc:	495f      	ldr	r1, [pc, #380]	; (801047c <tcp_receive+0xbe8>)
 80102fe:	4860      	ldr	r0, [pc, #384]	; (8010480 <tcp_receive+0xbec>)
 8010300:	f004 fd8a 	bl	8014e18 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010308:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801030a:	4b58      	ldr	r3, [pc, #352]	; (801046c <tcp_receive+0xbd8>)
 801030c:	881b      	ldrh	r3, [r3, #0]
 801030e:	461a      	mov	r2, r3
 8010310:	4b57      	ldr	r3, [pc, #348]	; (8010470 <tcp_receive+0xbdc>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	441a      	add	r2, r3
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801031e:	4b53      	ldr	r3, [pc, #332]	; (801046c <tcp_receive+0xbd8>)
 8010320:	881b      	ldrh	r3, [r3, #0]
 8010322:	429a      	cmp	r2, r3
 8010324:	d206      	bcs.n	8010334 <tcp_receive+0xaa0>
 8010326:	4b54      	ldr	r3, [pc, #336]	; (8010478 <tcp_receive+0xbe4>)
 8010328:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801032c:	4955      	ldr	r1, [pc, #340]	; (8010484 <tcp_receive+0xbf0>)
 801032e:	4854      	ldr	r0, [pc, #336]	; (8010480 <tcp_receive+0xbec>)
 8010330:	f004 fd72 	bl	8014e18 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010338:	4b4c      	ldr	r3, [pc, #304]	; (801046c <tcp_receive+0xbd8>)
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	1ad3      	subs	r3, r2, r3
 801033e:	b29a      	uxth	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f7fd f9fb 	bl	800d740 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801034a:	4b4a      	ldr	r3, [pc, #296]	; (8010474 <tcp_receive+0xbe0>)
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	891b      	ldrh	r3, [r3, #8]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d006      	beq.n	8010362 <tcp_receive+0xace>
          recv_data = inseg.p;
 8010354:	4b47      	ldr	r3, [pc, #284]	; (8010474 <tcp_receive+0xbe0>)
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	4a4b      	ldr	r2, [pc, #300]	; (8010488 <tcp_receive+0xbf4>)
 801035a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801035c:	4b45      	ldr	r3, [pc, #276]	; (8010474 <tcp_receive+0xbe0>)
 801035e:	2200      	movs	r2, #0
 8010360:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010362:	4b44      	ldr	r3, [pc, #272]	; (8010474 <tcp_receive+0xbe0>)
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	899b      	ldrh	r3, [r3, #12]
 8010368:	b29b      	uxth	r3, r3
 801036a:	4618      	mov	r0, r3
 801036c:	f7fb fb4e 	bl	800ba0c <lwip_htons>
 8010370:	4603      	mov	r3, r0
 8010372:	f003 0301 	and.w	r3, r3, #1
 8010376:	2b00      	cmp	r3, #0
 8010378:	f000 80b4 	beq.w	80104e4 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801037c:	4b43      	ldr	r3, [pc, #268]	; (801048c <tcp_receive+0xbf8>)
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	f043 0320 	orr.w	r3, r3, #32
 8010384:	b2da      	uxtb	r2, r3
 8010386:	4b41      	ldr	r3, [pc, #260]	; (801048c <tcp_receive+0xbf8>)
 8010388:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801038a:	e0ab      	b.n	80104e4 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010390:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	4a35      	ldr	r2, [pc, #212]	; (8010470 <tcp_receive+0xbdc>)
 801039c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	891b      	ldrh	r3, [r3, #8]
 80103a2:	461c      	mov	r4, r3
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	899b      	ldrh	r3, [r3, #12]
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7fb fb2d 	bl	800ba0c <lwip_htons>
 80103b2:	4603      	mov	r3, r0
 80103b4:	f003 0303 	and.w	r3, r3, #3
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d001      	beq.n	80103c0 <tcp_receive+0xb2c>
 80103bc:	2301      	movs	r3, #1
 80103be:	e000      	b.n	80103c2 <tcp_receive+0xb2e>
 80103c0:	2300      	movs	r3, #0
 80103c2:	191a      	adds	r2, r3, r4
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c8:	441a      	add	r2, r3
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103d2:	461c      	mov	r4, r3
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	891b      	ldrh	r3, [r3, #8]
 80103d8:	461d      	mov	r5, r3
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	899b      	ldrh	r3, [r3, #12]
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fb fb12 	bl	800ba0c <lwip_htons>
 80103e8:	4603      	mov	r3, r0
 80103ea:	f003 0303 	and.w	r3, r3, #3
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d001      	beq.n	80103f6 <tcp_receive+0xb62>
 80103f2:	2301      	movs	r3, #1
 80103f4:	e000      	b.n	80103f8 <tcp_receive+0xb64>
 80103f6:	2300      	movs	r3, #0
 80103f8:	442b      	add	r3, r5
 80103fa:	429c      	cmp	r4, r3
 80103fc:	d206      	bcs.n	801040c <tcp_receive+0xb78>
 80103fe:	4b1e      	ldr	r3, [pc, #120]	; (8010478 <tcp_receive+0xbe4>)
 8010400:	f240 52de 	movw	r2, #1502	; 0x5de
 8010404:	4922      	ldr	r1, [pc, #136]	; (8010490 <tcp_receive+0xbfc>)
 8010406:	481e      	ldr	r0, [pc, #120]	; (8010480 <tcp_receive+0xbec>)
 8010408:	f004 fd06 	bl	8014e18 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	891b      	ldrh	r3, [r3, #8]
 8010410:	461c      	mov	r4, r3
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	899b      	ldrh	r3, [r3, #12]
 8010418:	b29b      	uxth	r3, r3
 801041a:	4618      	mov	r0, r3
 801041c:	f7fb faf6 	bl	800ba0c <lwip_htons>
 8010420:	4603      	mov	r3, r0
 8010422:	f003 0303 	and.w	r3, r3, #3
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <tcp_receive+0xb9a>
 801042a:	2301      	movs	r3, #1
 801042c:	e000      	b.n	8010430 <tcp_receive+0xb9c>
 801042e:	2300      	movs	r3, #0
 8010430:	1919      	adds	r1, r3, r4
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010436:	b28b      	uxth	r3, r1
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	b29a      	uxth	r2, r3
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f7fd f97d 	bl	800d740 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	891b      	ldrh	r3, [r3, #8]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d028      	beq.n	80104a2 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010450:	4b0d      	ldr	r3, [pc, #52]	; (8010488 <tcp_receive+0xbf4>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d01d      	beq.n	8010494 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8010458:	4b0b      	ldr	r3, [pc, #44]	; (8010488 <tcp_receive+0xbf4>)
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	4619      	mov	r1, r3
 8010462:	4610      	mov	r0, r2
 8010464:	f7fc fd3c 	bl	800cee0 <pbuf_cat>
 8010468:	e018      	b.n	801049c <tcp_receive+0xc08>
 801046a:	bf00      	nop
 801046c:	20004226 	.word	0x20004226
 8010470:	2000421c 	.word	0x2000421c
 8010474:	200041fc 	.word	0x200041fc
 8010478:	080169b4 	.word	0x080169b4
 801047c:	08016cb8 	.word	0x08016cb8
 8010480:	080169f8 	.word	0x080169f8
 8010484:	08016cf4 	.word	0x08016cf4
 8010488:	2000422c 	.word	0x2000422c
 801048c:	20004229 	.word	0x20004229
 8010490:	08016d14 	.word	0x08016d14
            } else {
              recv_data = cseg->p;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	4a71      	ldr	r2, [pc, #452]	; (8010660 <tcp_receive+0xdcc>)
 801049a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2200      	movs	r2, #0
 80104a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	899b      	ldrh	r3, [r3, #12]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7fb faae 	bl	800ba0c <lwip_htons>
 80104b0:	4603      	mov	r3, r0
 80104b2:	f003 0301 	and.w	r3, r3, #1
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00d      	beq.n	80104d6 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80104ba:	4b6a      	ldr	r3, [pc, #424]	; (8010664 <tcp_receive+0xdd0>)
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	f043 0320 	orr.w	r3, r3, #32
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	4b67      	ldr	r3, [pc, #412]	; (8010664 <tcp_receive+0xdd0>)
 80104c6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	7d1b      	ldrb	r3, [r3, #20]
 80104cc:	2b04      	cmp	r3, #4
 80104ce:	d102      	bne.n	80104d6 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2207      	movs	r2, #7
 80104d4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7fd fd77 	bl	800dfd2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d008      	beq.n	80104fe <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	685a      	ldr	r2, [r3, #4]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80104f8:	429a      	cmp	r2, r3
 80104fa:	f43f af47 	beq.w	801038c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	7e9b      	ldrb	r3, [r3, #26]
 8010502:	f003 0301 	and.w	r3, r3, #1
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00e      	beq.n	8010528 <tcp_receive+0xc94>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	7e9b      	ldrb	r3, [r3, #26]
 801050e:	f023 0301 	bic.w	r3, r3, #1
 8010512:	b2da      	uxtb	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	769a      	strb	r2, [r3, #26]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	7e9b      	ldrb	r3, [r3, #26]
 801051c:	f043 0302 	orr.w	r3, r3, #2
 8010520:	b2da      	uxtb	r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010526:	e181      	b.n	801082c <tcp_receive+0xf98>
        tcp_ack(pcb);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	7e9b      	ldrb	r3, [r3, #26]
 801052c:	f043 0301 	orr.w	r3, r3, #1
 8010530:	b2da      	uxtb	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010536:	e179      	b.n	801082c <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fc93 	bl	8010e64 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010542:	2b00      	cmp	r3, #0
 8010544:	d106      	bne.n	8010554 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010546:	4848      	ldr	r0, [pc, #288]	; (8010668 <tcp_receive+0xdd4>)
 8010548:	f7fd fd5b 	bl	800e002 <tcp_seg_copy>
 801054c:	4602      	mov	r2, r0
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8010552:	e16b      	b.n	801082c <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8010554:	2300      	movs	r3, #0
 8010556:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801055c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801055e:	e150      	b.n	8010802 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8010560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	685a      	ldr	r2, [r3, #4]
 8010566:	4b41      	ldr	r3, [pc, #260]	; (801066c <tcp_receive+0xdd8>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	429a      	cmp	r2, r3
 801056c:	d11d      	bne.n	80105aa <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801056e:	4b3e      	ldr	r3, [pc, #248]	; (8010668 <tcp_receive+0xdd4>)
 8010570:	891a      	ldrh	r2, [r3, #8]
 8010572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010574:	891b      	ldrh	r3, [r3, #8]
 8010576:	429a      	cmp	r2, r3
 8010578:	f240 8148 	bls.w	801080c <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801057c:	483a      	ldr	r0, [pc, #232]	; (8010668 <tcp_receive+0xdd4>)
 801057e:	f7fd fd40 	bl	800e002 <tcp_seg_copy>
 8010582:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 8142 	beq.w	8010810 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 801058c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058e:	2b00      	cmp	r3, #0
 8010590:	d003      	beq.n	801059a <tcp_receive+0xd06>
                    prev->next = cseg;
 8010592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010594:	68fa      	ldr	r2, [r7, #12]
 8010596:	601a      	str	r2, [r3, #0]
 8010598:	e002      	b.n	80105a0 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	68fa      	ldr	r2, [r7, #12]
 801059e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80105a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	f7ff f900 	bl	800f7a8 <tcp_oos_insert_segment>
                }
                break;
 80105a8:	e132      	b.n	8010810 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80105aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d117      	bne.n	80105e0 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80105b0:	4b2e      	ldr	r3, [pc, #184]	; (801066c <tcp_receive+0xdd8>)
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	1ad3      	subs	r3, r2, r3
 80105bc:	2b00      	cmp	r3, #0
 80105be:	da57      	bge.n	8010670 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80105c0:	4829      	ldr	r0, [pc, #164]	; (8010668 <tcp_receive+0xdd4>)
 80105c2:	f7fd fd1e 	bl	800e002 <tcp_seg_copy>
 80105c6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	f000 8122 	beq.w	8010814 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	68fa      	ldr	r2, [r7, #12]
 80105d4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80105d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	f7ff f8e5 	bl	800f7a8 <tcp_oos_insert_segment>
                  }
                  break;
 80105de:	e119      	b.n	8010814 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80105e0:	4b22      	ldr	r3, [pc, #136]	; (801066c <tcp_receive+0xdd8>)
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	3b01      	subs	r3, #1
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	db3e      	blt.n	8010670 <tcp_receive+0xddc>
 80105f2:	4b1e      	ldr	r3, [pc, #120]	; (801066c <tcp_receive+0xdd8>)
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	3301      	adds	r3, #1
 8010600:	2b00      	cmp	r3, #0
 8010602:	dc35      	bgt.n	8010670 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8010604:	4818      	ldr	r0, [pc, #96]	; (8010668 <tcp_receive+0xdd4>)
 8010606:	f7fd fcfc 	bl	800e002 <tcp_seg_copy>
 801060a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2b00      	cmp	r3, #0
 8010610:	f000 8102 	beq.w	8010818 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801061c:	8912      	ldrh	r2, [r2, #8]
 801061e:	441a      	add	r2, r3
 8010620:	4b12      	ldr	r3, [pc, #72]	; (801066c <tcp_receive+0xdd8>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	1ad3      	subs	r3, r2, r3
 8010626:	2b00      	cmp	r3, #0
 8010628:	dd12      	ble.n	8010650 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801062a:	4b10      	ldr	r3, [pc, #64]	; (801066c <tcp_receive+0xdd8>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	b29a      	uxth	r2, r3
 8010630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	b29b      	uxth	r3, r3
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	b29a      	uxth	r2, r3
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010646:	891b      	ldrh	r3, [r3, #8]
 8010648:	4619      	mov	r1, r3
 801064a:	4610      	mov	r0, r2
 801064c:	f7fc f9fa 	bl	800ca44 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010652:	68fa      	ldr	r2, [r7, #12]
 8010654:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010658:	68f8      	ldr	r0, [r7, #12]
 801065a:	f7ff f8a5 	bl	800f7a8 <tcp_oos_insert_segment>
                  }
                  break;
 801065e:	e0db      	b.n	8010818 <tcp_receive+0xf84>
 8010660:	2000422c 	.word	0x2000422c
 8010664:	20004229 	.word	0x20004229
 8010668:	200041fc 	.word	0x200041fc
 801066c:	2000421c 	.word	0x2000421c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	f040 80bf 	bne.w	80107f8 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801067a:	4b7c      	ldr	r3, [pc, #496]	; (801086c <tcp_receive+0xfd8>)
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010686:	2b00      	cmp	r3, #0
 8010688:	f340 80b6 	ble.w	80107f8 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	899b      	ldrh	r3, [r3, #12]
 8010692:	b29b      	uxth	r3, r3
 8010694:	4618      	mov	r0, r3
 8010696:	f7fb f9b9 	bl	800ba0c <lwip_htons>
 801069a:	4603      	mov	r3, r0
 801069c:	f003 0301 	and.w	r3, r3, #1
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f040 80bb 	bne.w	801081c <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80106a6:	4872      	ldr	r0, [pc, #456]	; (8010870 <tcp_receive+0xfdc>)
 80106a8:	f7fd fcab 	bl	800e002 <tcp_seg_copy>
 80106ac:	4602      	mov	r2, r0
 80106ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b0:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80106b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	f000 80b2 	beq.w	8010820 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80106bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106c4:	8912      	ldrh	r2, [r2, #8]
 80106c6:	441a      	add	r2, r3
 80106c8:	4b68      	ldr	r3, [pc, #416]	; (801086c <tcp_receive+0xfd8>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	1ad3      	subs	r3, r2, r3
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	dd12      	ble.n	80106f8 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80106d2:	4b66      	ldr	r3, [pc, #408]	; (801086c <tcp_receive+0xfd8>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	b29b      	uxth	r3, r3
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80106e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ea:	685a      	ldr	r2, [r3, #4]
 80106ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ee:	891b      	ldrh	r3, [r3, #8]
 80106f0:	4619      	mov	r1, r3
 80106f2:	4610      	mov	r0, r2
 80106f4:	f7fc f9a6 	bl	800ca44 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80106f8:	4b5e      	ldr	r3, [pc, #376]	; (8010874 <tcp_receive+0xfe0>)
 80106fa:	881b      	ldrh	r3, [r3, #0]
 80106fc:	461a      	mov	r2, r3
 80106fe:	4b5b      	ldr	r3, [pc, #364]	; (801086c <tcp_receive+0xfd8>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	441a      	add	r2, r3
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010708:	6879      	ldr	r1, [r7, #4]
 801070a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801070c:	440b      	add	r3, r1
 801070e:	1ad3      	subs	r3, r2, r3
 8010710:	2b00      	cmp	r3, #0
 8010712:	f340 8085 	ble.w	8010820 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	899b      	ldrh	r3, [r3, #12]
 801071e:	b29b      	uxth	r3, r3
 8010720:	4618      	mov	r0, r3
 8010722:	f7fb f973 	bl	800ba0c <lwip_htons>
 8010726:	4603      	mov	r3, r0
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	d01e      	beq.n	801076e <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	899b      	ldrh	r3, [r3, #12]
 8010738:	b29b      	uxth	r3, r3
 801073a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801073e:	b29c      	uxth	r4, r3
 8010740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	899b      	ldrh	r3, [r3, #12]
 8010748:	b29b      	uxth	r3, r3
 801074a:	4618      	mov	r0, r3
 801074c:	f7fb f95e 	bl	800ba0c <lwip_htons>
 8010750:	4603      	mov	r3, r0
 8010752:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010756:	b29b      	uxth	r3, r3
 8010758:	4618      	mov	r0, r3
 801075a:	f7fb f957 	bl	800ba0c <lwip_htons>
 801075e:	4603      	mov	r3, r0
 8010760:	461a      	mov	r2, r3
 8010762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	4322      	orrs	r2, r4
 801076a:	b292      	uxth	r2, r2
 801076c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010772:	b29a      	uxth	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010778:	4413      	add	r3, r2
 801077a:	b299      	uxth	r1, r3
 801077c:	4b3b      	ldr	r3, [pc, #236]	; (801086c <tcp_receive+0xfd8>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	b29a      	uxth	r2, r3
 8010782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	1a8a      	subs	r2, r1, r2
 8010788:	b292      	uxth	r2, r2
 801078a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	685a      	ldr	r2, [r3, #4]
 8010792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	891b      	ldrh	r3, [r3, #8]
 8010798:	4619      	mov	r1, r3
 801079a:	4610      	mov	r0, r2
 801079c:	f7fc f952 	bl	800ca44 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80107a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	891c      	ldrh	r4, [r3, #8]
 80107a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	899b      	ldrh	r3, [r3, #12]
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fb f92b 	bl	800ba0c <lwip_htons>
 80107b6:	4603      	mov	r3, r0
 80107b8:	f003 0303 	and.w	r3, r3, #3
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d001      	beq.n	80107c4 <tcp_receive+0xf30>
 80107c0:	2301      	movs	r3, #1
 80107c2:	e000      	b.n	80107c6 <tcp_receive+0xf32>
 80107c4:	2300      	movs	r3, #0
 80107c6:	4423      	add	r3, r4
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	4b2a      	ldr	r3, [pc, #168]	; (8010874 <tcp_receive+0xfe0>)
 80107cc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107ce:	4b29      	ldr	r3, [pc, #164]	; (8010874 <tcp_receive+0xfe0>)
 80107d0:	881b      	ldrh	r3, [r3, #0]
 80107d2:	461a      	mov	r2, r3
 80107d4:	4b25      	ldr	r3, [pc, #148]	; (801086c <tcp_receive+0xfd8>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	441a      	add	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107de:	6879      	ldr	r1, [r7, #4]
 80107e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107e2:	440b      	add	r3, r1
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d01b      	beq.n	8010820 <tcp_receive+0xf8c>
 80107e8:	4b23      	ldr	r3, [pc, #140]	; (8010878 <tcp_receive+0xfe4>)
 80107ea:	f240 627b 	movw	r2, #1659	; 0x67b
 80107ee:	4923      	ldr	r1, [pc, #140]	; (801087c <tcp_receive+0xfe8>)
 80107f0:	4823      	ldr	r0, [pc, #140]	; (8010880 <tcp_receive+0xfec>)
 80107f2:	f004 fb11 	bl	8014e18 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80107f6:	e013      	b.n	8010820 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80107fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010804:	2b00      	cmp	r3, #0
 8010806:	f47f aeab 	bne.w	8010560 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 801080a:	e00f      	b.n	801082c <tcp_receive+0xf98>
                break;
 801080c:	bf00      	nop
 801080e:	e00d      	b.n	801082c <tcp_receive+0xf98>
                break;
 8010810:	bf00      	nop
 8010812:	e00b      	b.n	801082c <tcp_receive+0xf98>
                  break;
 8010814:	bf00      	nop
 8010816:	e009      	b.n	801082c <tcp_receive+0xf98>
                  break;
 8010818:	bf00      	nop
 801081a:	e007      	b.n	801082c <tcp_receive+0xf98>
                  break;
 801081c:	bf00      	nop
 801081e:	e005      	b.n	801082c <tcp_receive+0xf98>
                break;
 8010820:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8010822:	e003      	b.n	801082c <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fb1d 	bl	8010e64 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801082a:	e01a      	b.n	8010862 <tcp_receive+0xfce>
 801082c:	e019      	b.n	8010862 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801082e:	4b0f      	ldr	r3, [pc, #60]	; (801086c <tcp_receive+0xfd8>)
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	2b00      	cmp	r3, #0
 801083a:	db0a      	blt.n	8010852 <tcp_receive+0xfbe>
 801083c:	4b0b      	ldr	r3, [pc, #44]	; (801086c <tcp_receive+0xfd8>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010844:	6879      	ldr	r1, [r7, #4]
 8010846:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010848:	440b      	add	r3, r1
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	3301      	adds	r3, #1
 801084e:	2b00      	cmp	r3, #0
 8010850:	dd07      	ble.n	8010862 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	7e9b      	ldrb	r3, [r3, #26]
 8010856:	f043 0302 	orr.w	r3, r3, #2
 801085a:	b2da      	uxtb	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8010860:	e7ff      	b.n	8010862 <tcp_receive+0xfce>
 8010862:	bf00      	nop
 8010864:	3734      	adds	r7, #52	; 0x34
 8010866:	46bd      	mov	sp, r7
 8010868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801086a:	bf00      	nop
 801086c:	2000421c 	.word	0x2000421c
 8010870:	200041fc 	.word	0x200041fc
 8010874:	20004226 	.word	0x20004226
 8010878:	080169b4 	.word	0x080169b4
 801087c:	08016c80 	.word	0x08016c80
 8010880:	080169f8 	.word	0x080169f8

08010884 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801088a:	4b18      	ldr	r3, [pc, #96]	; (80108ec <tcp_getoptbyte+0x68>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d005      	beq.n	801089e <tcp_getoptbyte+0x1a>
 8010892:	4b17      	ldr	r3, [pc, #92]	; (80108f0 <tcp_getoptbyte+0x6c>)
 8010894:	881a      	ldrh	r2, [r3, #0]
 8010896:	4b17      	ldr	r3, [pc, #92]	; (80108f4 <tcp_getoptbyte+0x70>)
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	429a      	cmp	r2, r3
 801089c:	d20e      	bcs.n	80108bc <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801089e:	4b16      	ldr	r3, [pc, #88]	; (80108f8 <tcp_getoptbyte+0x74>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	3314      	adds	r3, #20
 80108a4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80108a6:	4b12      	ldr	r3, [pc, #72]	; (80108f0 <tcp_getoptbyte+0x6c>)
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	1c5a      	adds	r2, r3, #1
 80108ac:	b291      	uxth	r1, r2
 80108ae:	4a10      	ldr	r2, [pc, #64]	; (80108f0 <tcp_getoptbyte+0x6c>)
 80108b0:	8011      	strh	r1, [r2, #0]
 80108b2:	461a      	mov	r2, r3
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	4413      	add	r3, r2
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	e010      	b.n	80108de <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80108bc:	4b0c      	ldr	r3, [pc, #48]	; (80108f0 <tcp_getoptbyte+0x6c>)
 80108be:	881b      	ldrh	r3, [r3, #0]
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	b291      	uxth	r1, r2
 80108c4:	4a0a      	ldr	r2, [pc, #40]	; (80108f0 <tcp_getoptbyte+0x6c>)
 80108c6:	8011      	strh	r1, [r2, #0]
 80108c8:	b2da      	uxtb	r2, r3
 80108ca:	4b0a      	ldr	r3, [pc, #40]	; (80108f4 <tcp_getoptbyte+0x70>)
 80108cc:	881b      	ldrh	r3, [r3, #0]
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80108d4:	4b05      	ldr	r3, [pc, #20]	; (80108ec <tcp_getoptbyte+0x68>)
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	79fb      	ldrb	r3, [r7, #7]
 80108da:	4413      	add	r3, r2
 80108dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80108de:	4618      	mov	r0, r3
 80108e0:	370c      	adds	r7, #12
 80108e2:	46bd      	mov	sp, r7
 80108e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e8:	4770      	bx	lr
 80108ea:	bf00      	nop
 80108ec:	20004214 	.word	0x20004214
 80108f0:	20004218 	.word	0x20004218
 80108f4:	20004212 	.word	0x20004212
 80108f8:	2000420c 	.word	0x2000420c

080108fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010904:	4b2d      	ldr	r3, [pc, #180]	; (80109bc <tcp_parseopt+0xc0>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d053      	beq.n	80109b4 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801090c:	4b2c      	ldr	r3, [pc, #176]	; (80109c0 <tcp_parseopt+0xc4>)
 801090e:	2200      	movs	r2, #0
 8010910:	801a      	strh	r2, [r3, #0]
 8010912:	e043      	b.n	801099c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8010914:	f7ff ffb6 	bl	8010884 <tcp_getoptbyte>
 8010918:	4603      	mov	r3, r0
 801091a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801091c:	7bfb      	ldrb	r3, [r7, #15]
 801091e:	2b01      	cmp	r3, #1
 8010920:	d03c      	beq.n	801099c <tcp_parseopt+0xa0>
 8010922:	2b02      	cmp	r3, #2
 8010924:	d002      	beq.n	801092c <tcp_parseopt+0x30>
 8010926:	2b00      	cmp	r3, #0
 8010928:	d03f      	beq.n	80109aa <tcp_parseopt+0xae>
 801092a:	e026      	b.n	801097a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801092c:	f7ff ffaa 	bl	8010884 <tcp_getoptbyte>
 8010930:	4603      	mov	r3, r0
 8010932:	2b04      	cmp	r3, #4
 8010934:	d13b      	bne.n	80109ae <tcp_parseopt+0xb2>
 8010936:	4b22      	ldr	r3, [pc, #136]	; (80109c0 <tcp_parseopt+0xc4>)
 8010938:	881b      	ldrh	r3, [r3, #0]
 801093a:	3302      	adds	r3, #2
 801093c:	4a1f      	ldr	r2, [pc, #124]	; (80109bc <tcp_parseopt+0xc0>)
 801093e:	8812      	ldrh	r2, [r2, #0]
 8010940:	4293      	cmp	r3, r2
 8010942:	dc34      	bgt.n	80109ae <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8010944:	f7ff ff9e 	bl	8010884 <tcp_getoptbyte>
 8010948:	4603      	mov	r3, r0
 801094a:	b29b      	uxth	r3, r3
 801094c:	021b      	lsls	r3, r3, #8
 801094e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8010950:	f7ff ff98 	bl	8010884 <tcp_getoptbyte>
 8010954:	4603      	mov	r3, r0
 8010956:	b29a      	uxth	r2, r3
 8010958:	89bb      	ldrh	r3, [r7, #12]
 801095a:	4313      	orrs	r3, r2
 801095c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801095e:	89bb      	ldrh	r3, [r7, #12]
 8010960:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010964:	d804      	bhi.n	8010970 <tcp_parseopt+0x74>
 8010966:	89bb      	ldrh	r3, [r7, #12]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d001      	beq.n	8010970 <tcp_parseopt+0x74>
 801096c:	89ba      	ldrh	r2, [r7, #12]
 801096e:	e001      	b.n	8010974 <tcp_parseopt+0x78>
 8010970:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8010978:	e010      	b.n	801099c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801097a:	f7ff ff83 	bl	8010884 <tcp_getoptbyte>
 801097e:	4603      	mov	r3, r0
 8010980:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8010982:	7afb      	ldrb	r3, [r7, #11]
 8010984:	2b01      	cmp	r3, #1
 8010986:	d914      	bls.n	80109b2 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010988:	7afb      	ldrb	r3, [r7, #11]
 801098a:	b29a      	uxth	r2, r3
 801098c:	4b0c      	ldr	r3, [pc, #48]	; (80109c0 <tcp_parseopt+0xc4>)
 801098e:	881b      	ldrh	r3, [r3, #0]
 8010990:	4413      	add	r3, r2
 8010992:	b29b      	uxth	r3, r3
 8010994:	3b02      	subs	r3, #2
 8010996:	b29a      	uxth	r2, r3
 8010998:	4b09      	ldr	r3, [pc, #36]	; (80109c0 <tcp_parseopt+0xc4>)
 801099a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801099c:	4b08      	ldr	r3, [pc, #32]	; (80109c0 <tcp_parseopt+0xc4>)
 801099e:	881a      	ldrh	r2, [r3, #0]
 80109a0:	4b06      	ldr	r3, [pc, #24]	; (80109bc <tcp_parseopt+0xc0>)
 80109a2:	881b      	ldrh	r3, [r3, #0]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d3b5      	bcc.n	8010914 <tcp_parseopt+0x18>
 80109a8:	e004      	b.n	80109b4 <tcp_parseopt+0xb8>
        return;
 80109aa:	bf00      	nop
 80109ac:	e002      	b.n	80109b4 <tcp_parseopt+0xb8>
          return;
 80109ae:	bf00      	nop
 80109b0:	e000      	b.n	80109b4 <tcp_parseopt+0xb8>
          return;
 80109b2:	bf00      	nop
      }
    }
  }
}
 80109b4:	3710      	adds	r7, #16
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	20004210 	.word	0x20004210
 80109c0:	20004218 	.word	0x20004218

080109c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80109c4:	b480      	push	{r7}
 80109c6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80109c8:	4b05      	ldr	r3, [pc, #20]	; (80109e0 <tcp_trigger_input_pcb_close+0x1c>)
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	f043 0310 	orr.w	r3, r3, #16
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	4b03      	ldr	r3, [pc, #12]	; (80109e0 <tcp_trigger_input_pcb_close+0x1c>)
 80109d4:	701a      	strb	r2, [r3, #0]
}
 80109d6:	bf00      	nop
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr
 80109e0:	20004229 	.word	0x20004229

080109e4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b086      	sub	sp, #24
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	607b      	str	r3, [r7, #4]
 80109ee:	460b      	mov	r3, r1
 80109f0:	817b      	strh	r3, [r7, #10]
 80109f2:	4613      	mov	r3, r2
 80109f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80109f6:	897a      	ldrh	r2, [r7, #10]
 80109f8:	893b      	ldrh	r3, [r7, #8]
 80109fa:	4413      	add	r3, r2
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	3314      	adds	r3, #20
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	2200      	movs	r2, #0
 8010a04:	4619      	mov	r1, r3
 8010a06:	2001      	movs	r0, #1
 8010a08:	f7fb fe1e 	bl	800c648 <pbuf_alloc>
 8010a0c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d057      	beq.n	8010ac4 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	895b      	ldrh	r3, [r3, #10]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	897b      	ldrh	r3, [r7, #10]
 8010a1c:	3314      	adds	r3, #20
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	da05      	bge.n	8010a2e <tcp_output_alloc_header+0x4a>
 8010a22:	4b2b      	ldr	r3, [pc, #172]	; (8010ad0 <tcp_output_alloc_header+0xec>)
 8010a24:	2273      	movs	r2, #115	; 0x73
 8010a26:	492b      	ldr	r1, [pc, #172]	; (8010ad4 <tcp_output_alloc_header+0xf0>)
 8010a28:	482b      	ldr	r0, [pc, #172]	; (8010ad8 <tcp_output_alloc_header+0xf4>)
 8010a2a:	f004 f9f5 	bl	8014e18 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	8adb      	ldrh	r3, [r3, #22]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7fa ffe7 	bl	800ba0c <lwip_htons>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	461a      	mov	r2, r3
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	8b1b      	ldrh	r3, [r3, #24]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fa ffde 	bl	800ba0c <lwip_htons>
 8010a50:	4603      	mov	r3, r0
 8010a52:	461a      	mov	r2, r3
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fa ffe0 	bl	800ba28 <lwip_htonl>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8010a6e:	897b      	ldrh	r3, [r7, #10]
 8010a70:	089b      	lsrs	r3, r3, #2
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	3305      	adds	r3, #5
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	031b      	lsls	r3, r3, #12
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	f043 0310 	orr.w	r3, r3, #16
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fa ffc2 	bl	800ba0c <lwip_htons>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fa ffb9 	bl	800ba0c <lwip_htons>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	741a      	strb	r2, [r3, #16]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	749a      	strb	r2, [r3, #18]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010abe:	441a      	add	r2, r3
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010ac4:	697b      	ldr	r3, [r7, #20]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3718      	adds	r7, #24
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	08016d3c 	.word	0x08016d3c
 8010ad4:	08016d70 	.word	0x08016d70
 8010ad8:	08016da0 	.word	0x08016da0

08010adc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010adc:	b590      	push	{r4, r7, lr}
 8010ade:	b085      	sub	sp, #20
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d02d      	beq.n	8010b48 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010af0:	60fb      	str	r3, [r7, #12]
 8010af2:	e002      	b.n	8010afa <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1f8      	bne.n	8010af4 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	899b      	ldrh	r3, [r3, #12]
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fa ff7e 	bl	800ba0c <lwip_htons>
 8010b10:	4603      	mov	r3, r0
 8010b12:	f003 0307 	and.w	r3, r3, #7
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d116      	bne.n	8010b48 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	68db      	ldr	r3, [r3, #12]
 8010b1e:	899b      	ldrh	r3, [r3, #12]
 8010b20:	b29c      	uxth	r4, r3
 8010b22:	2001      	movs	r0, #1
 8010b24:	f7fa ff72 	bl	800ba0c <lwip_htons>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	4322      	orrs	r2, r4
 8010b32:	b292      	uxth	r2, r2
 8010b34:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	7e9b      	ldrb	r3, [r3, #26]
 8010b3a:	f043 0320 	orr.w	r3, r3, #32
 8010b3e:	b2da      	uxtb	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8010b44:	2300      	movs	r3, #0
 8010b46:	e004      	b.n	8010b52 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010b48:	2101      	movs	r1, #1
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f000 f88e 	bl	8010c6c <tcp_enqueue_flags>
 8010b50:	4603      	mov	r3, r0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd90      	pop	{r4, r7, pc}
	...

08010b5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8010b5c:	b590      	push	{r4, r7, lr}
 8010b5e:	b087      	sub	sp, #28
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	603b      	str	r3, [r7, #0]
 8010b68:	4613      	mov	r3, r2
 8010b6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	f003 0304 	and.w	r3, r3, #4
 8010b78:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010b7a:	2002      	movs	r0, #2
 8010b7c:	f7fb fb32 	bl	800c1e4 <memp_malloc>
 8010b80:	6138      	str	r0, [r7, #16]
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d104      	bne.n	8010b92 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010b88:	68b8      	ldr	r0, [r7, #8]
 8010b8a:	f7fc f8cf 	bl	800cd2c <pbuf_free>
    return NULL;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	e061      	b.n	8010c56 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010b98:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	68ba      	ldr	r2, [r7, #8]
 8010ba4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	891a      	ldrh	r2, [r3, #8]
 8010baa:	7dfb      	ldrb	r3, [r7, #23]
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d205      	bcs.n	8010bbe <tcp_create_segment+0x62>
 8010bb2:	4b2b      	ldr	r3, [pc, #172]	; (8010c60 <tcp_create_segment+0x104>)
 8010bb4:	22ba      	movs	r2, #186	; 0xba
 8010bb6:	492b      	ldr	r1, [pc, #172]	; (8010c64 <tcp_create_segment+0x108>)
 8010bb8:	482b      	ldr	r0, [pc, #172]	; (8010c68 <tcp_create_segment+0x10c>)
 8010bba:	f004 f92d 	bl	8014e18 <iprintf>
  seg->len = p->tot_len - optlen;
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	891a      	ldrh	r2, [r3, #8]
 8010bc2:	7dfb      	ldrb	r3, [r7, #23]
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	1ad3      	subs	r3, r2, r3
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8010bce:	2114      	movs	r1, #20
 8010bd0:	68b8      	ldr	r0, [r7, #8]
 8010bd2:	f7fc f887 	bl	800cce4 <pbuf_header>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d004      	beq.n	8010be6 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010bdc:	6938      	ldr	r0, [r7, #16]
 8010bde:	f7fd f9f8 	bl	800dfd2 <tcp_seg_free>
    return NULL;
 8010be2:	2300      	movs	r3, #0
 8010be4:	e037      	b.n	8010c56 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	8ada      	ldrh	r2, [r3, #22]
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	68dc      	ldr	r4, [r3, #12]
 8010bf8:	4610      	mov	r0, r2
 8010bfa:	f7fa ff07 	bl	800ba0c <lwip_htons>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	8b1a      	ldrh	r2, [r3, #24]
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	68dc      	ldr	r4, [r3, #12]
 8010c0a:	4610      	mov	r0, r2
 8010c0c:	f7fa fefe 	bl	800ba0c <lwip_htons>
 8010c10:	4603      	mov	r3, r0
 8010c12:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	68dc      	ldr	r4, [r3, #12]
 8010c18:	6838      	ldr	r0, [r7, #0]
 8010c1a:	f7fa ff05 	bl	800ba28 <lwip_htonl>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8010c22:	7dfb      	ldrb	r3, [r7, #23]
 8010c24:	089b      	lsrs	r3, r3, #2
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	3305      	adds	r3, #5
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	031b      	lsls	r3, r3, #12
 8010c30:	b29a      	uxth	r2, r3
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	4313      	orrs	r3, r2
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	68dc      	ldr	r4, [r3, #12]
 8010c3e:	4610      	mov	r0, r2
 8010c40:	f7fa fee4 	bl	800ba0c <lwip_htons>
 8010c44:	4603      	mov	r3, r0
 8010c46:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	749a      	strb	r2, [r3, #18]
 8010c50:	2200      	movs	r2, #0
 8010c52:	74da      	strb	r2, [r3, #19]
  return seg;
 8010c54:	693b      	ldr	r3, [r7, #16]
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	371c      	adds	r7, #28
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd90      	pop	{r4, r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	08016d3c 	.word	0x08016d3c
 8010c64:	08016dc8 	.word	0x08016dc8
 8010c68:	08016da0 	.word	0x08016da0

08010c6c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b08a      	sub	sp, #40	; 0x28
 8010c70:	af02      	add	r7, sp, #8
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	460b      	mov	r3, r1
 8010c76:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010c80:	78fb      	ldrb	r3, [r7, #3]
 8010c82:	f003 0303 	and.w	r3, r3, #3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <tcp_enqueue_flags+0x2c>
 8010c8a:	4b6f      	ldr	r3, [pc, #444]	; (8010e48 <tcp_enqueue_flags+0x1dc>)
 8010c8c:	f240 321b 	movw	r2, #795	; 0x31b
 8010c90:	496e      	ldr	r1, [pc, #440]	; (8010e4c <tcp_enqueue_flags+0x1e0>)
 8010c92:	486f      	ldr	r0, [pc, #444]	; (8010e50 <tcp_enqueue_flags+0x1e4>)
 8010c94:	f004 f8c0 	bl	8014e18 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c9e:	2b08      	cmp	r3, #8
 8010ca0:	d806      	bhi.n	8010cb0 <tcp_enqueue_flags+0x44>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ca8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d90e      	bls.n	8010cce <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8010cb0:	78fb      	ldrb	r3, [r7, #3]
 8010cb2:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d109      	bne.n	8010cce <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	7e9b      	ldrb	r3, [r3, #26]
 8010cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010cc2:	b2da      	uxtb	r2, r3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ccc:	e0b7      	b.n	8010e3e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8010cce:	78fb      	ldrb	r3, [r7, #3]
 8010cd0:	f003 0302 	and.w	r3, r3, #2
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d001      	beq.n	8010cdc <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8010cd8:	2301      	movs	r3, #1
 8010cda:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010cdc:	7ffb      	ldrb	r3, [r7, #31]
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	f003 0304 	and.w	r3, r3, #4
 8010ce6:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ce8:	7dfb      	ldrb	r3, [r7, #23]
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	2200      	movs	r2, #0
 8010cee:	4619      	mov	r1, r3
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	f7fb fca9 	bl	800c648 <pbuf_alloc>
 8010cf6:	6138      	str	r0, [r7, #16]
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d109      	bne.n	8010d12 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	7e9b      	ldrb	r3, [r3, #26]
 8010d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d06:	b2da      	uxtb	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d10:	e095      	b.n	8010e3e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	895a      	ldrh	r2, [r3, #10]
 8010d16:	7dfb      	ldrb	r3, [r7, #23]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d206      	bcs.n	8010d2c <tcp_enqueue_flags+0xc0>
 8010d1e:	4b4a      	ldr	r3, [pc, #296]	; (8010e48 <tcp_enqueue_flags+0x1dc>)
 8010d20:	f240 3241 	movw	r2, #833	; 0x341
 8010d24:	494b      	ldr	r1, [pc, #300]	; (8010e54 <tcp_enqueue_flags+0x1e8>)
 8010d26:	484a      	ldr	r0, [pc, #296]	; (8010e50 <tcp_enqueue_flags+0x1e4>)
 8010d28:	f004 f876 	bl	8014e18 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010d30:	78fa      	ldrb	r2, [r7, #3]
 8010d32:	7ffb      	ldrb	r3, [r7, #31]
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	460b      	mov	r3, r1
 8010d38:	6939      	ldr	r1, [r7, #16]
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7ff ff0e 	bl	8010b5c <tcp_create_segment>
 8010d40:	60f8      	str	r0, [r7, #12]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d109      	bne.n	8010d5c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	7e9b      	ldrb	r3, [r3, #26]
 8010d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d5a:	e070      	b.n	8010e3e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	f003 0303 	and.w	r3, r3, #3
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d006      	beq.n	8010d76 <tcp_enqueue_flags+0x10a>
 8010d68:	4b37      	ldr	r3, [pc, #220]	; (8010e48 <tcp_enqueue_flags+0x1dc>)
 8010d6a:	f240 3249 	movw	r2, #841	; 0x349
 8010d6e:	493a      	ldr	r1, [pc, #232]	; (8010e58 <tcp_enqueue_flags+0x1ec>)
 8010d70:	4837      	ldr	r0, [pc, #220]	; (8010e50 <tcp_enqueue_flags+0x1e4>)
 8010d72:	f004 f851 	bl	8014e18 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	891b      	ldrh	r3, [r3, #8]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d006      	beq.n	8010d8c <tcp_enqueue_flags+0x120>
 8010d7e:	4b32      	ldr	r3, [pc, #200]	; (8010e48 <tcp_enqueue_flags+0x1dc>)
 8010d80:	f240 324a 	movw	r2, #842	; 0x34a
 8010d84:	4935      	ldr	r1, [pc, #212]	; (8010e5c <tcp_enqueue_flags+0x1f0>)
 8010d86:	4832      	ldr	r0, [pc, #200]	; (8010e50 <tcp_enqueue_flags+0x1e4>)
 8010d88:	f004 f846 	bl	8014e18 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d103      	bne.n	8010d9c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	669a      	str	r2, [r3, #104]	; 0x68
 8010d9a:	e00d      	b.n	8010db8 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010da0:	61bb      	str	r3, [r7, #24]
 8010da2:	e002      	b.n	8010daa <tcp_enqueue_flags+0x13e>
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	61bb      	str	r3, [r7, #24]
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d1f8      	bne.n	8010da4 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	68fa      	ldr	r2, [r7, #12]
 8010db6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010dc0:	78fb      	ldrb	r3, [r7, #3]
 8010dc2:	f003 0302 	and.w	r3, r3, #2
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d104      	bne.n	8010dd4 <tcp_enqueue_flags+0x168>
 8010dca:	78fb      	ldrb	r3, [r7, #3]
 8010dcc:	f003 0301 	and.w	r3, r3, #1
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d004      	beq.n	8010dde <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dd8:	1c5a      	adds	r2, r3, #1
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010dde:	78fb      	ldrb	r3, [r7, #3]
 8010de0:	f003 0301 	and.w	r3, r3, #1
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d006      	beq.n	8010df6 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	7e9b      	ldrb	r3, [r3, #26]
 8010dec:	f043 0320 	orr.w	r3, r3, #32
 8010df0:	b2da      	uxtb	r2, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fc f830 	bl	800ce60 <pbuf_clen>
 8010e00:	4603      	mov	r3, r0
 8010e02:	461a      	mov	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e0a:	4413      	add	r3, r2
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00e      	beq.n	8010e3c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d10a      	bne.n	8010e3c <tcp_enqueue_flags+0x1d0>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d106      	bne.n	8010e3c <tcp_enqueue_flags+0x1d0>
 8010e2e:	4b06      	ldr	r3, [pc, #24]	; (8010e48 <tcp_enqueue_flags+0x1dc>)
 8010e30:	f240 326d 	movw	r2, #877	; 0x36d
 8010e34:	490a      	ldr	r1, [pc, #40]	; (8010e60 <tcp_enqueue_flags+0x1f4>)
 8010e36:	4806      	ldr	r0, [pc, #24]	; (8010e50 <tcp_enqueue_flags+0x1e4>)
 8010e38:	f003 ffee 	bl	8014e18 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010e3c:	2300      	movs	r3, #0
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3720      	adds	r7, #32
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	08016d3c 	.word	0x08016d3c
 8010e4c:	08017040 	.word	0x08017040
 8010e50:	08016da0 	.word	0x08016da0
 8010e54:	08017098 	.word	0x08017098
 8010e58:	080170d4 	.word	0x080170d4
 8010e5c:	080170ec 	.word	0x080170ec
 8010e60:	08017118 	.word	0x08017118

08010e64 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010e64:	b590      	push	{r4, r7, lr}
 8010e66:	b08b      	sub	sp, #44	; 0x2c
 8010e68:	af04      	add	r7, sp, #16
 8010e6a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010e70:	7dbb      	ldrb	r3, [r7, #22]
 8010e72:	b29c      	uxth	r4, r3
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fa fdd5 	bl	800ba28 <lwip_htonl>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2200      	movs	r2, #0
 8010e82:	4621      	mov	r1, r4
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f7ff fdad 	bl	80109e4 <tcp_output_alloc_header>
 8010e8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d109      	bne.n	8010ea6 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	7e9b      	ldrb	r3, [r3, #26]
 8010e96:	f043 0303 	orr.w	r3, r3, #3
 8010e9a:	b2da      	uxtb	r2, r3
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010ea0:	f06f 0301 	mvn.w	r3, #1
 8010ea4:	e036      	b.n	8010f14 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	3304      	adds	r3, #4
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f001 ff54 	bl	8012d58 <ip4_route>
 8010eb0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d102      	bne.n	8010ebe <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8010eb8:	23fc      	movs	r3, #252	; 0xfc
 8010eba:	75fb      	strb	r3, [r7, #23]
 8010ebc:	e012      	b.n	8010ee4 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8010ebe:	6879      	ldr	r1, [r7, #4]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	1d18      	adds	r0, r3, #4
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	7a9c      	ldrb	r4, [r3, #10]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	7a5b      	ldrb	r3, [r3, #9]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	9202      	str	r2, [sp, #8]
 8010ed0:	2206      	movs	r2, #6
 8010ed2:	9201      	str	r2, [sp, #4]
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	4623      	mov	r3, r4
 8010ed8:	4602      	mov	r2, r0
 8010eda:	6938      	ldr	r0, [r7, #16]
 8010edc:	f002 f8dc 	bl	8013098 <ip4_output_if>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8010ee4:	6938      	ldr	r0, [r7, #16]
 8010ee6:	f7fb ff21 	bl	800cd2c <pbuf_free>

  if (err != ERR_OK) {
 8010eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d007      	beq.n	8010f02 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	7e9b      	ldrb	r3, [r3, #26]
 8010ef6:	f043 0303 	orr.w	r3, r3, #3
 8010efa:	b2da      	uxtb	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	769a      	strb	r2, [r3, #26]
 8010f00:	e006      	b.n	8010f10 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	7e9b      	ldrb	r3, [r3, #26]
 8010f06:	f023 0303 	bic.w	r3, r3, #3
 8010f0a:	b2da      	uxtb	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8010f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	371c      	adds	r7, #28
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd90      	pop	{r4, r7, pc}

08010f1c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010f1c:	b5b0      	push	{r4, r5, r7, lr}
 8010f1e:	b08a      	sub	sp, #40	; 0x28
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	7d1b      	ldrb	r3, [r3, #20]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d106      	bne.n	8010f3a <tcp_output+0x1e>
 8010f2c:	4b9b      	ldr	r3, [pc, #620]	; (801119c <tcp_output+0x280>)
 8010f2e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8010f32:	499b      	ldr	r1, [pc, #620]	; (80111a0 <tcp_output+0x284>)
 8010f34:	489b      	ldr	r0, [pc, #620]	; (80111a4 <tcp_output+0x288>)
 8010f36:	f003 ff6f 	bl	8014e18 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010f3a:	4b9b      	ldr	r3, [pc, #620]	; (80111a8 <tcp_output+0x28c>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d101      	bne.n	8010f48 <tcp_output+0x2c>
    return ERR_OK;
 8010f44:	2300      	movs	r3, #0
 8010f46:	e1cf      	b.n	80112e8 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d203      	bcs.n	8010f60 <tcp_output+0x44>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f5e:	e002      	b.n	8010f66 <tcp_output+0x4a>
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f66:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f6c:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	7e9b      	ldrb	r3, [r3, #26]
 8010f72:	f003 0302 	and.w	r3, r3, #2
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d017      	beq.n	8010faa <tcp_output+0x8e>
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00f      	beq.n	8010fa0 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7fa fd4e 	bl	800ba28 <lwip_htonl>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f92:	1ad3      	subs	r3, r2, r3
 8010f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f96:	8912      	ldrh	r2, [r2, #8]
 8010f98:	4413      	add	r3, r2
     (seg == NULL ||
 8010f9a:	69ba      	ldr	r2, [r7, #24]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d204      	bcs.n	8010faa <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f7ff ff5f 	bl	8010e64 <tcp_send_empty_ack>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	e19e      	b.n	80112e8 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fae:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010fb0:	6a3b      	ldr	r3, [r7, #32]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d007      	beq.n	8010fc6 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8010fb6:	e002      	b.n	8010fbe <tcp_output+0xa2>
 8010fb8:	6a3b      	ldr	r3, [r7, #32]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	623b      	str	r3, [r7, #32]
 8010fbe:	6a3b      	ldr	r3, [r7, #32]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1f8      	bne.n	8010fb8 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	3304      	adds	r3, #4
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f001 fec4 	bl	8012d58 <ip4_route>
 8010fd0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d102      	bne.n	8010fde <tcp_output+0xc2>
    return ERR_RTE;
 8010fd8:	f06f 0303 	mvn.w	r3, #3
 8010fdc:	e184      	b.n	80112e8 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d003      	beq.n	8010fec <tcp_output+0xd0>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d111      	bne.n	8011010 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d002      	beq.n	8010ff8 <tcp_output+0xdc>
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	3304      	adds	r3, #4
 8010ff6:	e000      	b.n	8010ffa <tcp_output+0xde>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d102      	bne.n	8011008 <tcp_output+0xec>
      return ERR_RTE;
 8011002:	f06f 0303 	mvn.w	r3, #3
 8011006:	e16f      	b.n	80112e8 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011012:	2b00      	cmp	r3, #0
 8011014:	f000 813e 	beq.w	8011294 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	4618      	mov	r0, r3
 8011020:	f7fa fd02 	bl	800ba28 <lwip_htonl>
 8011024:	4602      	mov	r2, r0
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801102e:	8912      	ldrh	r2, [r2, #8]
 8011030:	4413      	add	r3, r2
  if (seg != NULL &&
 8011032:	69ba      	ldr	r2, [r7, #24]
 8011034:	429a      	cmp	r2, r3
 8011036:	f080 812d 	bcs.w	8011294 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801103a:	69bb      	ldr	r3, [r7, #24]
 801103c:	2b00      	cmp	r3, #0
 801103e:	f000 8129 	beq.w	8011294 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011048:	461a      	mov	r2, r3
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	4293      	cmp	r3, r2
 801104e:	f040 8121 	bne.w	8011294 <tcp_output+0x378>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011056:	2b00      	cmp	r3, #0
 8011058:	f040 811c 	bne.w	8011294 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011062:	2b00      	cmp	r3, #0
 8011064:	f040 812b 	bne.w	80112be <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2201      	movs	r2, #1
 8011074:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011078:	e121      	b.n	80112be <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	899b      	ldrh	r3, [r3, #12]
 8011080:	b29b      	uxth	r3, r3
 8011082:	4618      	mov	r0, r3
 8011084:	f7fa fcc2 	bl	800ba0c <lwip_htons>
 8011088:	4603      	mov	r3, r0
 801108a:	f003 0304 	and.w	r3, r3, #4
 801108e:	2b00      	cmp	r3, #0
 8011090:	d006      	beq.n	80110a0 <tcp_output+0x184>
 8011092:	4b42      	ldr	r3, [pc, #264]	; (801119c <tcp_output+0x280>)
 8011094:	f240 4246 	movw	r2, #1094	; 0x446
 8011098:	4944      	ldr	r1, [pc, #272]	; (80111ac <tcp_output+0x290>)
 801109a:	4842      	ldr	r0, [pc, #264]	; (80111a4 <tcp_output+0x288>)
 801109c:	f003 febc 	bl	8014e18 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d01f      	beq.n	80110e8 <tcp_output+0x1cc>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	7e9b      	ldrb	r3, [r3, #26]
 80110ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d119      	bne.n	80110e8 <tcp_output+0x1cc>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d00b      	beq.n	80110d4 <tcp_output+0x1b8>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d110      	bne.n	80110e8 <tcp_output+0x1cc>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110ca:	891a      	ldrh	r2, [r3, #8]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d209      	bcs.n	80110e8 <tcp_output+0x1cc>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d004      	beq.n	80110e8 <tcp_output+0x1cc>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80110e4:	2b08      	cmp	r3, #8
 80110e6:	d901      	bls.n	80110ec <tcp_output+0x1d0>
 80110e8:	2301      	movs	r3, #1
 80110ea:	e000      	b.n	80110ee <tcp_output+0x1d2>
 80110ec:	2300      	movs	r3, #0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d106      	bne.n	8011100 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	7e9b      	ldrb	r3, [r3, #26]
 80110f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f000 80e1 	beq.w	80112c2 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	7d1b      	ldrb	r3, [r3, #20]
 8011104:	2b02      	cmp	r3, #2
 8011106:	d00d      	beq.n	8011124 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	899b      	ldrh	r3, [r3, #12]
 801110e:	b29c      	uxth	r4, r3
 8011110:	2010      	movs	r0, #16
 8011112:	f7fa fc7b 	bl	800ba0c <lwip_htons>
 8011116:	4603      	mov	r3, r0
 8011118:	461a      	mov	r2, r3
 801111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	4322      	orrs	r2, r4
 8011120:	b292      	uxth	r2, r2
 8011122:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8011124:	697a      	ldr	r2, [r7, #20]
 8011126:	6879      	ldr	r1, [r7, #4]
 8011128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801112a:	f000 f8e1 	bl	80112f0 <tcp_output_segment>
 801112e:	4603      	mov	r3, r0
 8011130:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d009      	beq.n	801114e <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	7e9b      	ldrb	r3, [r3, #26]
 801113e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011142:	b2da      	uxtb	r2, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	769a      	strb	r2, [r3, #26]
      return err;
 8011148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801114c:	e0cc      	b.n	80112e8 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 801114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	7d1b      	ldrb	r3, [r3, #20]
 801115a:	2b02      	cmp	r3, #2
 801115c:	d006      	beq.n	801116c <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	7e9b      	ldrb	r3, [r3, #26]
 8011162:	f023 0303 	bic.w	r3, r3, #3
 8011166:	b2da      	uxtb	r2, r3
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	4618      	mov	r0, r3
 8011174:	f7fa fc58 	bl	800ba28 <lwip_htonl>
 8011178:	4604      	mov	r4, r0
 801117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117c:	891b      	ldrh	r3, [r3, #8]
 801117e:	461d      	mov	r5, r3
 8011180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	899b      	ldrh	r3, [r3, #12]
 8011186:	b29b      	uxth	r3, r3
 8011188:	4618      	mov	r0, r3
 801118a:	f7fa fc3f 	bl	800ba0c <lwip_htons>
 801118e:	4603      	mov	r3, r0
 8011190:	f003 0303 	and.w	r3, r3, #3
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00b      	beq.n	80111b0 <tcp_output+0x294>
 8011198:	2301      	movs	r3, #1
 801119a:	e00a      	b.n	80111b2 <tcp_output+0x296>
 801119c:	08016d3c 	.word	0x08016d3c
 80111a0:	08017140 	.word	0x08017140
 80111a4:	08016da0 	.word	0x08016da0
 80111a8:	2000ab68 	.word	0x2000ab68
 80111ac:	08017168 	.word	0x08017168
 80111b0:	2300      	movs	r3, #0
 80111b2:	442b      	add	r3, r5
 80111b4:	4423      	add	r3, r4
 80111b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	da02      	bge.n	80111ca <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	68ba      	ldr	r2, [r7, #8]
 80111c8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80111ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111cc:	891b      	ldrh	r3, [r3, #8]
 80111ce:	461c      	mov	r4, r3
 80111d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	899b      	ldrh	r3, [r3, #12]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	4618      	mov	r0, r3
 80111da:	f7fa fc17 	bl	800ba0c <lwip_htons>
 80111de:	4603      	mov	r3, r0
 80111e0:	f003 0303 	and.w	r3, r3, #3
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <tcp_output+0x2d0>
 80111e8:	2301      	movs	r3, #1
 80111ea:	e000      	b.n	80111ee <tcp_output+0x2d2>
 80111ec:	2300      	movs	r3, #0
 80111ee:	4423      	add	r3, r4
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d049      	beq.n	8011288 <tcp_output+0x36c>
      seg->next = NULL;
 80111f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f6:	2200      	movs	r2, #0
 80111f8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d105      	bne.n	801120e <tcp_output+0x2f2>
        pcb->unacked = seg;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011206:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	623b      	str	r3, [r7, #32]
 801120c:	e03f      	b.n	801128e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	f7fa fc07 	bl	800ba28 <lwip_htonl>
 801121a:	4604      	mov	r4, r0
 801121c:	6a3b      	ldr	r3, [r7, #32]
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	4618      	mov	r0, r3
 8011224:	f7fa fc00 	bl	800ba28 <lwip_htonl>
 8011228:	4603      	mov	r3, r0
 801122a:	1ae3      	subs	r3, r4, r3
 801122c:	2b00      	cmp	r3, #0
 801122e:	da24      	bge.n	801127a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	336c      	adds	r3, #108	; 0x6c
 8011234:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011236:	e002      	b.n	801123e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011238:	69fb      	ldr	r3, [r7, #28]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d011      	beq.n	801126a <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	4618      	mov	r0, r3
 8011250:	f7fa fbea 	bl	800ba28 <lwip_htonl>
 8011254:	4604      	mov	r4, r0
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	f7fa fbe3 	bl	800ba28 <lwip_htonl>
 8011262:	4603      	mov	r3, r0
 8011264:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011266:	2b00      	cmp	r3, #0
 8011268:	dbe6      	blt.n	8011238 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011270:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011276:	601a      	str	r2, [r3, #0]
 8011278:	e009      	b.n	801128e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801127a:	6a3b      	ldr	r3, [r7, #32]
 801127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801127e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011280:	6a3b      	ldr	r3, [r7, #32]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	623b      	str	r3, [r7, #32]
 8011286:	e002      	b.n	801128e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801128a:	f7fc fea2 	bl	800dfd2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011292:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011296:	2b00      	cmp	r3, #0
 8011298:	d015      	beq.n	80112c6 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	68db      	ldr	r3, [r3, #12]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7fa fbc1 	bl	800ba28 <lwip_htonl>
 80112a6:	4602      	mov	r2, r0
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112b0:	8912      	ldrh	r2, [r2, #8]
 80112b2:	4413      	add	r3, r2
  while (seg != NULL &&
 80112b4:	69ba      	ldr	r2, [r7, #24]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	f4bf aedf 	bcs.w	801107a <tcp_output+0x15e>
  }
output_done:
 80112bc:	e003      	b.n	80112c6 <tcp_output+0x3aa>
    goto output_done;
 80112be:	bf00      	nop
 80112c0:	e002      	b.n	80112c8 <tcp_output+0x3ac>
      break;
 80112c2:	bf00      	nop
 80112c4:	e000      	b.n	80112c8 <tcp_output+0x3ac>
output_done:
 80112c6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d103      	bne.n	80112d8 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	7e9b      	ldrb	r3, [r3, #26]
 80112dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112e0:	b2da      	uxtb	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80112e6:	2300      	movs	r3, #0
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3728      	adds	r7, #40	; 0x28
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bdb0      	pop	{r4, r5, r7, pc}

080112f0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80112f0:	b5b0      	push	{r4, r5, r7, lr}
 80112f2:	b08c      	sub	sp, #48	; 0x30
 80112f4:	af04      	add	r7, sp, #16
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	89db      	ldrh	r3, [r3, #14]
 8011302:	2b01      	cmp	r3, #1
 8011304:	d001      	beq.n	801130a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011306:	2300      	movs	r3, #0
 8011308:	e08b      	b.n	8011422 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	68dc      	ldr	r4, [r3, #12]
 8011312:	4610      	mov	r0, r2
 8011314:	f7fa fb88 	bl	800ba28 <lwip_htonl>
 8011318:	4603      	mov	r3, r0
 801131a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	68dc      	ldr	r4, [r3, #12]
 8011324:	4610      	mov	r0, r2
 8011326:	f7fa fb71 	bl	800ba0c <lwip_htons>
 801132a:	4603      	mov	r3, r0
 801132c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011336:	441a      	add	r2, r3
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	3314      	adds	r3, #20
 8011342:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	7a9b      	ldrb	r3, [r3, #10]
 8011348:	f003 0301 	and.w	r3, r3, #1
 801134c:	2b00      	cmp	r3, #0
 801134e:	d014      	beq.n	801137a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	3304      	adds	r3, #4
 8011354:	4619      	mov	r1, r3
 8011356:	f44f 7006 	mov.w	r0, #536	; 0x218
 801135a:	f7fd f8a5 	bl	800e4a8 <tcp_eff_send_mss_impl>
 801135e:	4603      	mov	r3, r0
 8011360:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011362:	8b7b      	ldrh	r3, [r7, #26]
 8011364:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011368:	4618      	mov	r0, r3
 801136a:	f7fa fb5d 	bl	800ba28 <lwip_htonl>
 801136e:	4602      	mov	r2, r0
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	3304      	adds	r3, #4
 8011378:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011380:	2b00      	cmp	r3, #0
 8011382:	da02      	bge.n	801138a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2200      	movs	r2, #0
 8011388:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801138e:	2b00      	cmp	r3, #0
 8011390:	d10c      	bne.n	80113ac <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8011392:	4b26      	ldr	r3, [pc, #152]	; (801142c <tcp_output_segment+0x13c>)
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fa fb41 	bl	800ba28 <lwip_htonl>
 80113a6:	4602      	mov	r2, r0
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	461a      	mov	r2, r3
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	1ad3      	subs	r3, r2, r3
 80113ba:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	8959      	ldrh	r1, [r3, #10]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	8b3a      	ldrh	r2, [r7, #24]
 80113c8:	1a8a      	subs	r2, r1, r2
 80113ca:	b292      	uxth	r2, r2
 80113cc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	8919      	ldrh	r1, [r3, #8]
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	8b3a      	ldrh	r2, [r7, #24]
 80113da:	1a8a      	subs	r2, r1, r2
 80113dc:	b292      	uxth	r2, r2
 80113de:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	68fa      	ldr	r2, [r7, #12]
 80113e6:	68d2      	ldr	r2, [r2, #12]
 80113e8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	2200      	movs	r2, #0
 80113f0:	741a      	strb	r2, [r3, #16]
 80113f2:	2200      	movs	r2, #0
 80113f4:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	6858      	ldr	r0, [r3, #4]
 80113fa:	68b9      	ldr	r1, [r7, #8]
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	1d1c      	adds	r4, r3, #4
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	7a9d      	ldrb	r5, [r3, #10]
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	7a5b      	ldrb	r3, [r3, #9]
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	9202      	str	r2, [sp, #8]
 801140c:	2206      	movs	r2, #6
 801140e:	9201      	str	r2, [sp, #4]
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	462b      	mov	r3, r5
 8011414:	4622      	mov	r2, r4
 8011416:	f001 fe3f 	bl	8013098 <ip4_output_if>
 801141a:	4603      	mov	r3, r0
 801141c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801141e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011422:	4618      	mov	r0, r3
 8011424:	3720      	adds	r7, #32
 8011426:	46bd      	mov	sp, r7
 8011428:	bdb0      	pop	{r4, r5, r7, pc}
 801142a:	bf00      	nop
 801142c:	2000ab58 	.word	0x2000ab58

08011430 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b08c      	sub	sp, #48	; 0x30
 8011434:	af04      	add	r7, sp, #16
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
 801143c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801143e:	2200      	movs	r2, #0
 8011440:	2114      	movs	r1, #20
 8011442:	2001      	movs	r0, #1
 8011444:	f7fb f900 	bl	800c648 <pbuf_alloc>
 8011448:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d05b      	beq.n	8011508 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	895b      	ldrh	r3, [r3, #10]
 8011454:	2b13      	cmp	r3, #19
 8011456:	d806      	bhi.n	8011466 <tcp_rst+0x36>
 8011458:	4b2d      	ldr	r3, [pc, #180]	; (8011510 <tcp_rst+0xe0>)
 801145a:	f240 524d 	movw	r2, #1357	; 0x54d
 801145e:	492d      	ldr	r1, [pc, #180]	; (8011514 <tcp_rst+0xe4>)
 8011460:	482d      	ldr	r0, [pc, #180]	; (8011518 <tcp_rst+0xe8>)
 8011462:	f003 fcd9 	bl	8014e18 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 801146c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801146e:	4618      	mov	r0, r3
 8011470:	f7fa facc 	bl	800ba0c <lwip_htons>
 8011474:	4603      	mov	r3, r0
 8011476:	461a      	mov	r2, r3
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801147c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801147e:	4618      	mov	r0, r3
 8011480:	f7fa fac4 	bl	800ba0c <lwip_htons>
 8011484:	4603      	mov	r3, r0
 8011486:	461a      	mov	r2, r3
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f7fa facb 	bl	800ba28 <lwip_htonl>
 8011492:	4602      	mov	r2, r0
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011498:	68b8      	ldr	r0, [r7, #8]
 801149a:	f7fa fac5 	bl	800ba28 <lwip_htonl>
 801149e:	4602      	mov	r2, r0
 80114a0:	69bb      	ldr	r3, [r7, #24]
 80114a2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80114a4:	f245 0014 	movw	r0, #20500	; 0x5014
 80114a8:	f7fa fab0 	bl	800ba0c <lwip_htons>
 80114ac:	4603      	mov	r3, r0
 80114ae:	461a      	mov	r2, r3
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80114b4:	69bb      	ldr	r3, [r7, #24]
 80114b6:	2200      	movs	r2, #0
 80114b8:	f042 0208 	orr.w	r2, r2, #8
 80114bc:	739a      	strb	r2, [r3, #14]
 80114be:	2200      	movs	r2, #0
 80114c0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80114c4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	2200      	movs	r2, #0
 80114ca:	741a      	strb	r2, [r3, #16]
 80114cc:	2200      	movs	r2, #0
 80114ce:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	2200      	movs	r2, #0
 80114d4:	749a      	strb	r2, [r3, #18]
 80114d6:	2200      	movs	r2, #0
 80114d8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80114da:	6838      	ldr	r0, [r7, #0]
 80114dc:	f001 fc3c 	bl	8012d58 <ip4_route>
 80114e0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d00b      	beq.n	8011500 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	9302      	str	r3, [sp, #8]
 80114ec:	2306      	movs	r3, #6
 80114ee:	9301      	str	r3, [sp, #4]
 80114f0:	2300      	movs	r3, #0
 80114f2:	9300      	str	r3, [sp, #0]
 80114f4:	23ff      	movs	r3, #255	; 0xff
 80114f6:	683a      	ldr	r2, [r7, #0]
 80114f8:	6879      	ldr	r1, [r7, #4]
 80114fa:	69f8      	ldr	r0, [r7, #28]
 80114fc:	f001 fdcc 	bl	8013098 <ip4_output_if>
  }
  pbuf_free(p);
 8011500:	69f8      	ldr	r0, [r7, #28]
 8011502:	f7fb fc13 	bl	800cd2c <pbuf_free>
 8011506:	e000      	b.n	801150a <tcp_rst+0xda>
    return;
 8011508:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801150a:	3720      	adds	r7, #32
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	08016d3c 	.word	0x08016d3c
 8011514:	08016d70 	.word	0x08016d70
 8011518:	08016da0 	.word	0x08016da0

0801151c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011528:	2b00      	cmp	r3, #0
 801152a:	d029      	beq.n	8011580 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011530:	60fb      	str	r3, [r7, #12]
 8011532:	e002      	b.n	801153a <tcp_rexmit_rto+0x1e>
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	60fb      	str	r3, [r7, #12]
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1f8      	bne.n	8011534 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2200      	movs	r2, #0
 8011556:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801155e:	2bff      	cmp	r3, #255	; 0xff
 8011560:	d007      	beq.n	8011572 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011568:	3301      	adds	r3, #1
 801156a:	b2da      	uxtb	r2, r3
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7ff fccf 	bl	8010f1c <tcp_output>
 801157e:	e000      	b.n	8011582 <tcp_rexmit_rto+0x66>
    return;
 8011580:	bf00      	nop
}
 8011582:	3710      	adds	r7, #16
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}

08011588 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011588:	b590      	push	{r4, r7, lr}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011594:	2b00      	cmp	r3, #0
 8011596:	d043      	beq.n	8011620 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801159c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	3368      	adds	r3, #104	; 0x68
 80115aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115ac:	e002      	b.n	80115b4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d011      	beq.n	80115e0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7fa fa2f 	bl	800ba28 <lwip_htonl>
 80115ca:	4604      	mov	r4, r0
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fa fa28 	bl	800ba28 <lwip_htonl>
 80115d8:	4603      	mov	r3, r0
 80115da:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80115dc:	2b00      	cmp	r3, #0
 80115de:	dbe6      	blt.n	80115ae <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	68ba      	ldr	r2, [r7, #8]
 80115ec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d103      	bne.n	80115fe <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2200      	movs	r2, #0
 80115fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011604:	2bff      	cmp	r3, #255	; 0xff
 8011606:	d007      	beq.n	8011618 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801160e:	3301      	adds	r3, #1
 8011610:	b2da      	uxtb	r2, r3
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	635a      	str	r2, [r3, #52]	; 0x34
 801161e:	e000      	b.n	8011622 <tcp_rexmit+0x9a>
    return;
 8011620:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	bd90      	pop	{r4, r7, pc}

08011628 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011634:	2b00      	cmp	r3, #0
 8011636:	d04a      	beq.n	80116ce <tcp_rexmit_fast+0xa6>
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	7e9b      	ldrb	r3, [r3, #26]
 801163c:	f003 0304 	and.w	r3, r3, #4
 8011640:	2b00      	cmp	r3, #0
 8011642:	d144      	bne.n	80116ce <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7ff ff9f 	bl	8011588 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011656:	429a      	cmp	r2, r3
 8011658:	d207      	bcs.n	801166a <tcp_rexmit_fast+0x42>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011660:	0fda      	lsrs	r2, r3, #31
 8011662:	4413      	add	r3, r2
 8011664:	105b      	asrs	r3, r3, #1
 8011666:	b29b      	uxth	r3, r3
 8011668:	e006      	b.n	8011678 <tcp_rexmit_fast+0x50>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011670:	0fda      	lsrs	r2, r3, #31
 8011672:	4413      	add	r3, r2
 8011674:	105b      	asrs	r3, r3, #1
 8011676:	b29b      	uxth	r3, r3
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011684:	461a      	mov	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801168a:	005b      	lsls	r3, r3, #1
 801168c:	429a      	cmp	r2, r3
 801168e:	d206      	bcs.n	801169e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	b29a      	uxth	r2, r3
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116a8:	4619      	mov	r1, r3
 80116aa:	0049      	lsls	r1, r1, #1
 80116ac:	440b      	add	r3, r1
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	4413      	add	r3, r2
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	7e9b      	ldrb	r3, [r3, #26]
 80116be:	f043 0304 	orr.w	r3, r3, #4
 80116c2:	b2da      	uxtb	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80116ce:	bf00      	nop
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b08a      	sub	sp, #40	; 0x28
 80116da:	af04      	add	r7, sp, #16
 80116dc:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116e2:	3b01      	subs	r3, #1
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7fa f99f 	bl	800ba28 <lwip_htonl>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2200      	movs	r2, #0
 80116ee:	2100      	movs	r1, #0
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f7ff f977 	bl	80109e4 <tcp_output_alloc_header>
 80116f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d102      	bne.n	8011704 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80116fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011702:	e021      	b.n	8011748 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	3304      	adds	r3, #4
 8011708:	4618      	mov	r0, r3
 801170a:	f001 fb25 	bl	8012d58 <ip4_route>
 801170e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d102      	bne.n	801171c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011716:	23fc      	movs	r3, #252	; 0xfc
 8011718:	75fb      	strb	r3, [r7, #23]
 801171a:	e010      	b.n	801173e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801171c:	6879      	ldr	r1, [r7, #4]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	1d1a      	adds	r2, r3, #4
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	7a98      	ldrb	r0, [r3, #10]
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	9302      	str	r3, [sp, #8]
 801172a:	2306      	movs	r3, #6
 801172c:	9301      	str	r3, [sp, #4]
 801172e:	2300      	movs	r3, #0
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	4603      	mov	r3, r0
 8011734:	6938      	ldr	r0, [r7, #16]
 8011736:	f001 fcaf 	bl	8013098 <ip4_output_if>
 801173a:	4603      	mov	r3, r0
 801173c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801173e:	6938      	ldr	r0, [r7, #16]
 8011740:	f7fb faf4 	bl	800cd2c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011744:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3718      	adds	r7, #24
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011750:	b590      	push	{r4, r7, lr}
 8011752:	b08f      	sub	sp, #60	; 0x3c
 8011754:	af04      	add	r7, sp, #16
 8011756:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801175c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801175e:	6a3b      	ldr	r3, [r7, #32]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d102      	bne.n	801176a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011768:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801176a:	6a3b      	ldr	r3, [r7, #32]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d101      	bne.n	8011774 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8011770:	2300      	movs	r3, #0
 8011772:	e085      	b.n	8011880 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011774:	6a3b      	ldr	r3, [r7, #32]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	899b      	ldrh	r3, [r3, #12]
 801177a:	b29b      	uxth	r3, r3
 801177c:	4618      	mov	r0, r3
 801177e:	f7fa f945 	bl	800ba0c <lwip_htons>
 8011782:	4603      	mov	r3, r0
 8011784:	f003 0301 	and.w	r3, r3, #1
 8011788:	2b00      	cmp	r3, #0
 801178a:	d005      	beq.n	8011798 <tcp_zero_window_probe+0x48>
 801178c:	6a3b      	ldr	r3, [r7, #32]
 801178e:	891b      	ldrh	r3, [r3, #8]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d101      	bne.n	8011798 <tcp_zero_window_probe+0x48>
 8011794:	2301      	movs	r3, #1
 8011796:	e000      	b.n	801179a <tcp_zero_window_probe+0x4a>
 8011798:	2300      	movs	r3, #0
 801179a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801179c:	7ffb      	ldrb	r3, [r7, #31]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	bf0c      	ite	eq
 80117a2:	2301      	moveq	r3, #1
 80117a4:	2300      	movne	r3, #0
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80117aa:	6a3b      	ldr	r3, [r7, #32]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	8bba      	ldrh	r2, [r7, #28]
 80117b2:	2100      	movs	r1, #0
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7ff f915 	bl	80109e4 <tcp_output_alloc_header>
 80117ba:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d102      	bne.n	80117c8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80117c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117c6:	e05b      	b.n	8011880 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80117ce:	7ffb      	ldrb	r3, [r7, #31]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d00e      	beq.n	80117f2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	899b      	ldrh	r3, [r3, #12]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80117de:	b29c      	uxth	r4, r3
 80117e0:	2011      	movs	r0, #17
 80117e2:	f7fa f913 	bl	800ba0c <lwip_htons>
 80117e6:	4603      	mov	r3, r0
 80117e8:	4323      	orrs	r3, r4
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	819a      	strh	r2, [r3, #12]
 80117f0:	e010      	b.n	8011814 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	3314      	adds	r3, #20
 80117f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80117fa:	6a3b      	ldr	r3, [r7, #32]
 80117fc:	6858      	ldr	r0, [r3, #4]
 80117fe:	6a3b      	ldr	r3, [r7, #32]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	891a      	ldrh	r2, [r3, #8]
 8011804:	6a3b      	ldr	r3, [r7, #32]
 8011806:	891b      	ldrh	r3, [r3, #8]
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	b29b      	uxth	r3, r3
 801180c:	2201      	movs	r2, #1
 801180e:	6939      	ldr	r1, [r7, #16]
 8011810:	f7fb fc88 	bl	800d124 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011814:	6a3b      	ldr	r3, [r7, #32]
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	4618      	mov	r0, r3
 801181c:	f7fa f904 	bl	800ba28 <lwip_htonl>
 8011820:	4603      	mov	r3, r0
 8011822:	3301      	adds	r3, #1
 8011824:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	2b00      	cmp	r3, #0
 8011830:	da02      	bge.n	8011838 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	3304      	adds	r3, #4
 801183c:	4618      	mov	r0, r3
 801183e:	f001 fa8b 	bl	8012d58 <ip4_route>
 8011842:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d103      	bne.n	8011852 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801184a:	23fc      	movs	r3, #252	; 0xfc
 801184c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011850:	e011      	b.n	8011876 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011852:	6879      	ldr	r1, [r7, #4]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	1d1a      	adds	r2, r3, #4
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	7a98      	ldrb	r0, [r3, #10]
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	9302      	str	r3, [sp, #8]
 8011860:	2306      	movs	r3, #6
 8011862:	9301      	str	r3, [sp, #4]
 8011864:	2300      	movs	r3, #0
 8011866:	9300      	str	r3, [sp, #0]
 8011868:	4603      	mov	r3, r0
 801186a:	69b8      	ldr	r0, [r7, #24]
 801186c:	f001 fc14 	bl	8013098 <ip4_output_if>
 8011870:	4603      	mov	r3, r0
 8011872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8011876:	69b8      	ldr	r0, [r7, #24]
 8011878:	f7fb fa58 	bl	800cd2c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801187c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011880:	4618      	mov	r0, r3
 8011882:	372c      	adds	r7, #44	; 0x2c
 8011884:	46bd      	mov	sp, r7
 8011886:	bd90      	pop	{r4, r7, pc}

08011888 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011890:	f7fb fcca 	bl	800d228 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011894:	4b0a      	ldr	r3, [pc, #40]	; (80118c0 <tcpip_tcp_timer+0x38>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d103      	bne.n	80118a4 <tcpip_tcp_timer+0x1c>
 801189c:	4b09      	ldr	r3, [pc, #36]	; (80118c4 <tcpip_tcp_timer+0x3c>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d005      	beq.n	80118b0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80118a4:	2200      	movs	r2, #0
 80118a6:	4908      	ldr	r1, [pc, #32]	; (80118c8 <tcpip_tcp_timer+0x40>)
 80118a8:	20fa      	movs	r0, #250	; 0xfa
 80118aa:	f000 f86f 	bl	801198c <sys_timeout>
 80118ae:	e002      	b.n	80118b6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80118b0:	4b06      	ldr	r3, [pc, #24]	; (80118cc <tcpip_tcp_timer+0x44>)
 80118b2:	2200      	movs	r2, #0
 80118b4:	601a      	str	r2, [r3, #0]
  }
}
 80118b6:	bf00      	nop
 80118b8:	3708      	adds	r7, #8
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	2000ab54 	.word	0x2000ab54
 80118c4:	2000ab64 	.word	0x2000ab64
 80118c8:	08011889 	.word	0x08011889
 80118cc:	20004238 	.word	0x20004238

080118d0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80118d4:	4b0a      	ldr	r3, [pc, #40]	; (8011900 <tcp_timer_needed+0x30>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d10f      	bne.n	80118fc <tcp_timer_needed+0x2c>
 80118dc:	4b09      	ldr	r3, [pc, #36]	; (8011904 <tcp_timer_needed+0x34>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d103      	bne.n	80118ec <tcp_timer_needed+0x1c>
 80118e4:	4b08      	ldr	r3, [pc, #32]	; (8011908 <tcp_timer_needed+0x38>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d007      	beq.n	80118fc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80118ec:	4b04      	ldr	r3, [pc, #16]	; (8011900 <tcp_timer_needed+0x30>)
 80118ee:	2201      	movs	r2, #1
 80118f0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80118f2:	2200      	movs	r2, #0
 80118f4:	4905      	ldr	r1, [pc, #20]	; (801190c <tcp_timer_needed+0x3c>)
 80118f6:	20fa      	movs	r0, #250	; 0xfa
 80118f8:	f000 f848 	bl	801198c <sys_timeout>
  }
}
 80118fc:	bf00      	nop
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	20004238 	.word	0x20004238
 8011904:	2000ab54 	.word	0x2000ab54
 8011908:	2000ab64 	.word	0x2000ab64
 801190c:	08011889 	.word	0x08011889

08011910 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	4903      	ldr	r1, [pc, #12]	; (8011938 <cyclic_timer+0x28>)
 801192a:	4618      	mov	r0, r3
 801192c:	f000 f82e 	bl	801198c <sys_timeout>
}
 8011930:	bf00      	nop
 8011932:	3710      	adds	r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	08011911 	.word	0x08011911

0801193c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011942:	2301      	movs	r3, #1
 8011944:	607b      	str	r3, [r7, #4]
 8011946:	e00e      	b.n	8011966 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011948:	4a0d      	ldr	r2, [pc, #52]	; (8011980 <sys_timeouts_init+0x44>)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	00db      	lsls	r3, r3, #3
 8011954:	4a0a      	ldr	r2, [pc, #40]	; (8011980 <sys_timeouts_init+0x44>)
 8011956:	4413      	add	r3, r2
 8011958:	461a      	mov	r2, r3
 801195a:	490a      	ldr	r1, [pc, #40]	; (8011984 <sys_timeouts_init+0x48>)
 801195c:	f000 f816 	bl	801198c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	3301      	adds	r3, #1
 8011964:	607b      	str	r3, [r7, #4]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2b02      	cmp	r3, #2
 801196a:	d9ed      	bls.n	8011948 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 801196c:	f7f5 fd02 	bl	8007374 <sys_now>
 8011970:	4602      	mov	r2, r0
 8011972:	4b05      	ldr	r3, [pc, #20]	; (8011988 <sys_timeouts_init+0x4c>)
 8011974:	601a      	str	r2, [r3, #0]
}
 8011976:	bf00      	nop
 8011978:	3708      	adds	r7, #8
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	080179e0 	.word	0x080179e0
 8011984:	08011911 	.word	0x08011911
 8011988:	20004234 	.word	0x20004234

0801198c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b088      	sub	sp, #32
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	60b9      	str	r1, [r7, #8]
 8011996:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011998:	2009      	movs	r0, #9
 801199a:	f7fa fc23 	bl	800c1e4 <memp_malloc>
 801199e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d10a      	bne.n	80119bc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f040 8084 	bne.w	8011ab6 <sys_timeout+0x12a>
 80119ae:	4b44      	ldr	r3, [pc, #272]	; (8011ac0 <sys_timeout+0x134>)
 80119b0:	22d4      	movs	r2, #212	; 0xd4
 80119b2:	4944      	ldr	r1, [pc, #272]	; (8011ac4 <sys_timeout+0x138>)
 80119b4:	4844      	ldr	r0, [pc, #272]	; (8011ac8 <sys_timeout+0x13c>)
 80119b6:	f003 fa2f 	bl	8014e18 <iprintf>
    return;
 80119ba:	e07c      	b.n	8011ab6 <sys_timeout+0x12a>
  }

  now = sys_now();
 80119bc:	f7f5 fcda 	bl	8007374 <sys_now>
 80119c0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 80119c2:	4b42      	ldr	r3, [pc, #264]	; (8011acc <sys_timeout+0x140>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d105      	bne.n	80119d6 <sys_timeout+0x4a>
    diff = 0;
 80119ca:	2300      	movs	r3, #0
 80119cc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 80119ce:	4a40      	ldr	r2, [pc, #256]	; (8011ad0 <sys_timeout+0x144>)
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	6013      	str	r3, [r2, #0]
 80119d4:	e004      	b.n	80119e0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 80119d6:	4b3e      	ldr	r3, [pc, #248]	; (8011ad0 <sys_timeout+0x144>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	693a      	ldr	r2, [r7, #16]
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	2200      	movs	r2, #0
 80119e4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	68ba      	ldr	r2, [r7, #8]
 80119ea:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	441a      	add	r2, r3
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80119fc:	4b33      	ldr	r3, [pc, #204]	; (8011acc <sys_timeout+0x140>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d103      	bne.n	8011a0c <sys_timeout+0x80>
    next_timeout = timeout;
 8011a04:	4a31      	ldr	r2, [pc, #196]	; (8011acc <sys_timeout+0x140>)
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	6013      	str	r3, [r2, #0]
    return;
 8011a0a:	e055      	b.n	8011ab8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8011a0c:	4b2f      	ldr	r3, [pc, #188]	; (8011acc <sys_timeout+0x140>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	68fa      	ldr	r2, [r7, #12]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d20f      	bcs.n	8011a38 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011a18:	4b2c      	ldr	r3, [pc, #176]	; (8011acc <sys_timeout+0x140>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	6859      	ldr	r1, [r3, #4]
 8011a1e:	4b2b      	ldr	r3, [pc, #172]	; (8011acc <sys_timeout+0x140>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	1a8a      	subs	r2, r1, r2
 8011a26:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011a28:	4b28      	ldr	r3, [pc, #160]	; (8011acc <sys_timeout+0x140>)
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011a30:	4a26      	ldr	r2, [pc, #152]	; (8011acc <sys_timeout+0x140>)
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	6013      	str	r3, [r2, #0]
 8011a36:	e03f      	b.n	8011ab8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a38:	4b24      	ldr	r3, [pc, #144]	; (8011acc <sys_timeout+0x140>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	61fb      	str	r3, [r7, #28]
 8011a3e:	e036      	b.n	8011aae <sys_timeout+0x122>
      timeout->time -= t->time;
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	685a      	ldr	r2, [r3, #4]
 8011a44:	69fb      	ldr	r3, [r7, #28]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	1ad2      	subs	r2, r2, r3
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8011a4e:	69fb      	ldr	r3, [r7, #28]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d006      	beq.n	8011a64 <sys_timeout+0xd8>
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	685a      	ldr	r2, [r3, #4]
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d921      	bls.n	8011aa8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d009      	beq.n	8011a80 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	6859      	ldr	r1, [r3, #4]
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	685a      	ldr	r2, [r3, #4]
 8011a76:	69fb      	ldr	r3, [r7, #28]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	1a8a      	subs	r2, r1, r2
 8011a7c:	605a      	str	r2, [r3, #4]
 8011a7e:	e00b      	b.n	8011a98 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d206      	bcs.n	8011a98 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8011a8a:	4b10      	ldr	r3, [pc, #64]	; (8011acc <sys_timeout+0x140>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	685a      	ldr	r2, [r3, #4]
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	441a      	add	r2, r3
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	697a      	ldr	r2, [r7, #20]
 8011aa4:	601a      	str	r2, [r3, #0]
        break;
 8011aa6:	e007      	b.n	8011ab8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	61fb      	str	r3, [r7, #28]
 8011aae:	69fb      	ldr	r3, [r7, #28]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d1c5      	bne.n	8011a40 <sys_timeout+0xb4>
 8011ab4:	e000      	b.n	8011ab8 <sys_timeout+0x12c>
    return;
 8011ab6:	bf00      	nop
      }
    }
  }
}
 8011ab8:	3720      	adds	r7, #32
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	08017180 	.word	0x08017180
 8011ac4:	080171b4 	.word	0x080171b4
 8011ac8:	080171f4 	.word	0x080171f4
 8011acc:	20004230 	.word	0x20004230
 8011ad0:	20004234 	.word	0x20004234

08011ad4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8011ada:	4b24      	ldr	r3, [pc, #144]	; (8011b6c <sys_check_timeouts+0x98>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d03f      	beq.n	8011b62 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011ae2:	f7f5 fc47 	bl	8007374 <sys_now>
 8011ae6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011ae8:	4b21      	ldr	r3, [pc, #132]	; (8011b70 <sys_check_timeouts+0x9c>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011af2:	2300      	movs	r3, #0
 8011af4:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011af6:	4b1d      	ldr	r3, [pc, #116]	; (8011b6c <sys_check_timeouts+0x98>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d02c      	beq.n	8011b5c <sys_check_timeouts+0x88>
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	697a      	ldr	r2, [r7, #20]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d327      	bcc.n	8011b5c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	685a      	ldr	r2, [r3, #4]
 8011b14:	4b16      	ldr	r3, [pc, #88]	; (8011b70 <sys_check_timeouts+0x9c>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4413      	add	r3, r2
 8011b1a:	4a15      	ldr	r2, [pc, #84]	; (8011b70 <sys_check_timeouts+0x9c>)
 8011b1c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	697a      	ldr	r2, [r7, #20]
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	4a0f      	ldr	r2, [pc, #60]	; (8011b6c <sys_check_timeouts+0x98>)
 8011b2e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011b3c:	68b9      	ldr	r1, [r7, #8]
 8011b3e:	2009      	movs	r0, #9
 8011b40:	f7fa fba2 	bl	800c288 <memp_free>
        if (handler != NULL) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d008      	beq.n	8011b5c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8011b4a:	480a      	ldr	r0, [pc, #40]	; (8011b74 <sys_check_timeouts+0xa0>)
 8011b4c:	f002 fb2c 	bl	80141a8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6838      	ldr	r0, [r7, #0]
 8011b54:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8011b56:	4807      	ldr	r0, [pc, #28]	; (8011b74 <sys_check_timeouts+0xa0>)
 8011b58:	f002 fb35 	bl	80141c6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8011b5c:	7cfb      	ldrb	r3, [r7, #19]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1c7      	bne.n	8011af2 <sys_check_timeouts+0x1e>
  }
}
 8011b62:	bf00      	nop
 8011b64:	3718      	adds	r7, #24
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	20004230 	.word	0x20004230
 8011b70:	20004234 	.word	0x20004234
 8011b74:	200074c4 	.word	0x200074c4

08011b78 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8011b7e:	4b0f      	ldr	r3, [pc, #60]	; (8011bbc <sys_timeouts_sleeptime+0x44>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d102      	bne.n	8011b8c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8011b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b8a:	e013      	b.n	8011bb4 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8011b8c:	f7f5 fbf2 	bl	8007374 <sys_now>
 8011b90:	4602      	mov	r2, r0
 8011b92:	4b0b      	ldr	r3, [pc, #44]	; (8011bc0 <sys_timeouts_sleeptime+0x48>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8011b9a:	4b08      	ldr	r3, [pc, #32]	; (8011bbc <sys_timeouts_sleeptime+0x44>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d901      	bls.n	8011baa <sys_timeouts_sleeptime+0x32>
    return 0;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	e004      	b.n	8011bb4 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8011baa:	4b04      	ldr	r3, [pc, #16]	; (8011bbc <sys_timeouts_sleeptime+0x44>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	685a      	ldr	r2, [r3, #4]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	1ad3      	subs	r3, r2, r3
  }
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3708      	adds	r7, #8
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	20004230 	.word	0x20004230
 8011bc0:	20004234 	.word	0x20004234

08011bc4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8011bce:	4b0f      	ldr	r3, [pc, #60]	; (8011c0c <sys_timeouts_mbox_fetch+0x48>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d105      	bne.n	8011be2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	6839      	ldr	r1, [r7, #0]
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f002 fa69 	bl	80140b2 <sys_arch_mbox_fetch>
    return;
 8011be0:	e011      	b.n	8011c06 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011be2:	f7ff ffc9 	bl	8011b78 <sys_timeouts_sleeptime>
 8011be6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d008      	beq.n	8011c00 <sys_timeouts_mbox_fetch+0x3c>
 8011bee:	68fa      	ldr	r2, [r7, #12]
 8011bf0:	6839      	ldr	r1, [r7, #0]
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f002 fa5d 	bl	80140b2 <sys_arch_mbox_fetch>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bfe:	d102      	bne.n	8011c06 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011c00:	f7ff ff68 	bl	8011ad4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011c04:	e7e3      	b.n	8011bce <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011c06:	3710      	adds	r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	20004230 	.word	0x20004230

08011c10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011c18:	4915      	ldr	r1, [pc, #84]	; (8011c70 <etharp_free_entry+0x60>)
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	005b      	lsls	r3, r3, #1
 8011c20:	4413      	add	r3, r2
 8011c22:	00db      	lsls	r3, r3, #3
 8011c24:	440b      	add	r3, r1
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d013      	beq.n	8011c54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011c2c:	4910      	ldr	r1, [pc, #64]	; (8011c70 <etharp_free_entry+0x60>)
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	4613      	mov	r3, r2
 8011c32:	005b      	lsls	r3, r3, #1
 8011c34:	4413      	add	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	440b      	add	r3, r1
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fb f875 	bl	800cd2c <pbuf_free>
    arp_table[i].q = NULL;
 8011c42:	490b      	ldr	r1, [pc, #44]	; (8011c70 <etharp_free_entry+0x60>)
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	4613      	mov	r3, r2
 8011c48:	005b      	lsls	r3, r3, #1
 8011c4a:	4413      	add	r3, r2
 8011c4c:	00db      	lsls	r3, r3, #3
 8011c4e:	440b      	add	r3, r1
 8011c50:	2200      	movs	r2, #0
 8011c52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011c54:	4906      	ldr	r1, [pc, #24]	; (8011c70 <etharp_free_entry+0x60>)
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	4613      	mov	r3, r2
 8011c5a:	005b      	lsls	r3, r3, #1
 8011c5c:	4413      	add	r3, r2
 8011c5e:	00db      	lsls	r3, r3, #3
 8011c60:	440b      	add	r3, r1
 8011c62:	3314      	adds	r3, #20
 8011c64:	2200      	movs	r2, #0
 8011c66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011c68:	bf00      	nop
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	2000423c 	.word	0x2000423c

08011c74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	71fb      	strb	r3, [r7, #7]
 8011c7e:	e096      	b.n	8011dae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011c80:	79fa      	ldrb	r2, [r7, #7]
 8011c82:	494f      	ldr	r1, [pc, #316]	; (8011dc0 <etharp_tmr+0x14c>)
 8011c84:	4613      	mov	r3, r2
 8011c86:	005b      	lsls	r3, r3, #1
 8011c88:	4413      	add	r3, r2
 8011c8a:	00db      	lsls	r3, r3, #3
 8011c8c:	440b      	add	r3, r1
 8011c8e:	3314      	adds	r3, #20
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8011c94:	79bb      	ldrb	r3, [r7, #6]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f000 8086 	beq.w	8011da8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8011c9c:	79fa      	ldrb	r2, [r7, #7]
 8011c9e:	4948      	ldr	r1, [pc, #288]	; (8011dc0 <etharp_tmr+0x14c>)
 8011ca0:	4613      	mov	r3, r2
 8011ca2:	005b      	lsls	r3, r3, #1
 8011ca4:	4413      	add	r3, r2
 8011ca6:	00db      	lsls	r3, r3, #3
 8011ca8:	440b      	add	r3, r1
 8011caa:	3312      	adds	r3, #18
 8011cac:	881b      	ldrh	r3, [r3, #0]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	b298      	uxth	r0, r3
 8011cb2:	4943      	ldr	r1, [pc, #268]	; (8011dc0 <etharp_tmr+0x14c>)
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	005b      	lsls	r3, r3, #1
 8011cb8:	4413      	add	r3, r2
 8011cba:	00db      	lsls	r3, r3, #3
 8011cbc:	440b      	add	r3, r1
 8011cbe:	3312      	adds	r3, #18
 8011cc0:	4602      	mov	r2, r0
 8011cc2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011cc4:	79fa      	ldrb	r2, [r7, #7]
 8011cc6:	493e      	ldr	r1, [pc, #248]	; (8011dc0 <etharp_tmr+0x14c>)
 8011cc8:	4613      	mov	r3, r2
 8011cca:	005b      	lsls	r3, r3, #1
 8011ccc:	4413      	add	r3, r2
 8011cce:	00db      	lsls	r3, r3, #3
 8011cd0:	440b      	add	r3, r1
 8011cd2:	3312      	adds	r3, #18
 8011cd4:	881b      	ldrh	r3, [r3, #0]
 8011cd6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011cda:	d215      	bcs.n	8011d08 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011cdc:	79fa      	ldrb	r2, [r7, #7]
 8011cde:	4938      	ldr	r1, [pc, #224]	; (8011dc0 <etharp_tmr+0x14c>)
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	005b      	lsls	r3, r3, #1
 8011ce4:	4413      	add	r3, r2
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	440b      	add	r3, r1
 8011cea:	3314      	adds	r3, #20
 8011cec:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d10f      	bne.n	8011d12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011cf2:	79fa      	ldrb	r2, [r7, #7]
 8011cf4:	4932      	ldr	r1, [pc, #200]	; (8011dc0 <etharp_tmr+0x14c>)
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	4413      	add	r3, r2
 8011cfc:	00db      	lsls	r3, r3, #3
 8011cfe:	440b      	add	r3, r1
 8011d00:	3312      	adds	r3, #18
 8011d02:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011d04:	2b04      	cmp	r3, #4
 8011d06:	d904      	bls.n	8011d12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011d08:	79fb      	ldrb	r3, [r7, #7]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7ff ff80 	bl	8011c10 <etharp_free_entry>
 8011d10:	e04a      	b.n	8011da8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011d12:	79fa      	ldrb	r2, [r7, #7]
 8011d14:	492a      	ldr	r1, [pc, #168]	; (8011dc0 <etharp_tmr+0x14c>)
 8011d16:	4613      	mov	r3, r2
 8011d18:	005b      	lsls	r3, r3, #1
 8011d1a:	4413      	add	r3, r2
 8011d1c:	00db      	lsls	r3, r3, #3
 8011d1e:	440b      	add	r3, r1
 8011d20:	3314      	adds	r3, #20
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	2b03      	cmp	r3, #3
 8011d26:	d10a      	bne.n	8011d3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011d28:	79fa      	ldrb	r2, [r7, #7]
 8011d2a:	4925      	ldr	r1, [pc, #148]	; (8011dc0 <etharp_tmr+0x14c>)
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	005b      	lsls	r3, r3, #1
 8011d30:	4413      	add	r3, r2
 8011d32:	00db      	lsls	r3, r3, #3
 8011d34:	440b      	add	r3, r1
 8011d36:	3314      	adds	r3, #20
 8011d38:	2204      	movs	r2, #4
 8011d3a:	701a      	strb	r2, [r3, #0]
 8011d3c:	e034      	b.n	8011da8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011d3e:	79fa      	ldrb	r2, [r7, #7]
 8011d40:	491f      	ldr	r1, [pc, #124]	; (8011dc0 <etharp_tmr+0x14c>)
 8011d42:	4613      	mov	r3, r2
 8011d44:	005b      	lsls	r3, r3, #1
 8011d46:	4413      	add	r3, r2
 8011d48:	00db      	lsls	r3, r3, #3
 8011d4a:	440b      	add	r3, r1
 8011d4c:	3314      	adds	r3, #20
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	2b04      	cmp	r3, #4
 8011d52:	d10a      	bne.n	8011d6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011d54:	79fa      	ldrb	r2, [r7, #7]
 8011d56:	491a      	ldr	r1, [pc, #104]	; (8011dc0 <etharp_tmr+0x14c>)
 8011d58:	4613      	mov	r3, r2
 8011d5a:	005b      	lsls	r3, r3, #1
 8011d5c:	4413      	add	r3, r2
 8011d5e:	00db      	lsls	r3, r3, #3
 8011d60:	440b      	add	r3, r1
 8011d62:	3314      	adds	r3, #20
 8011d64:	2202      	movs	r2, #2
 8011d66:	701a      	strb	r2, [r3, #0]
 8011d68:	e01e      	b.n	8011da8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011d6a:	79fa      	ldrb	r2, [r7, #7]
 8011d6c:	4914      	ldr	r1, [pc, #80]	; (8011dc0 <etharp_tmr+0x14c>)
 8011d6e:	4613      	mov	r3, r2
 8011d70:	005b      	lsls	r3, r3, #1
 8011d72:	4413      	add	r3, r2
 8011d74:	00db      	lsls	r3, r3, #3
 8011d76:	440b      	add	r3, r1
 8011d78:	3314      	adds	r3, #20
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d113      	bne.n	8011da8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011d80:	79fa      	ldrb	r2, [r7, #7]
 8011d82:	490f      	ldr	r1, [pc, #60]	; (8011dc0 <etharp_tmr+0x14c>)
 8011d84:	4613      	mov	r3, r2
 8011d86:	005b      	lsls	r3, r3, #1
 8011d88:	4413      	add	r3, r2
 8011d8a:	00db      	lsls	r3, r3, #3
 8011d8c:	440b      	add	r3, r1
 8011d8e:	3308      	adds	r3, #8
 8011d90:	6818      	ldr	r0, [r3, #0]
 8011d92:	79fa      	ldrb	r2, [r7, #7]
 8011d94:	4613      	mov	r3, r2
 8011d96:	005b      	lsls	r3, r3, #1
 8011d98:	4413      	add	r3, r2
 8011d9a:	00db      	lsls	r3, r3, #3
 8011d9c:	4a08      	ldr	r2, [pc, #32]	; (8011dc0 <etharp_tmr+0x14c>)
 8011d9e:	4413      	add	r3, r2
 8011da0:	3304      	adds	r3, #4
 8011da2:	4619      	mov	r1, r3
 8011da4:	f000 fe38 	bl	8012a18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011da8:	79fb      	ldrb	r3, [r7, #7]
 8011daa:	3301      	adds	r3, #1
 8011dac:	71fb      	strb	r3, [r7, #7]
 8011dae:	79fb      	ldrb	r3, [r7, #7]
 8011db0:	2b09      	cmp	r3, #9
 8011db2:	f67f af65 	bls.w	8011c80 <etharp_tmr+0xc>
      }
    }
  }
}
 8011db6:	bf00      	nop
 8011db8:	3708      	adds	r7, #8
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	2000423c 	.word	0x2000423c

08011dc4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b088      	sub	sp, #32
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	460b      	mov	r3, r1
 8011dce:	607a      	str	r2, [r7, #4]
 8011dd0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011dd2:	230a      	movs	r3, #10
 8011dd4:	77fb      	strb	r3, [r7, #31]
 8011dd6:	230a      	movs	r3, #10
 8011dd8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8011dda:	230a      	movs	r3, #10
 8011ddc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8011dde:	2300      	movs	r3, #0
 8011de0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8011de2:	230a      	movs	r3, #10
 8011de4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011de6:	2300      	movs	r3, #0
 8011de8:	833b      	strh	r3, [r7, #24]
 8011dea:	2300      	movs	r3, #0
 8011dec:	82fb      	strh	r3, [r7, #22]
 8011dee:	2300      	movs	r3, #0
 8011df0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011df2:	2300      	movs	r3, #0
 8011df4:	773b      	strb	r3, [r7, #28]
 8011df6:	e093      	b.n	8011f20 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8011df8:	7f3a      	ldrb	r2, [r7, #28]
 8011dfa:	4990      	ldr	r1, [pc, #576]	; (801203c <etharp_find_entry+0x278>)
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	4413      	add	r3, r2
 8011e02:	00db      	lsls	r3, r3, #3
 8011e04:	440b      	add	r3, r1
 8011e06:	3314      	adds	r3, #20
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011e0c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011e10:	2b0a      	cmp	r3, #10
 8011e12:	d105      	bne.n	8011e20 <etharp_find_entry+0x5c>
 8011e14:	7cfb      	ldrb	r3, [r7, #19]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d102      	bne.n	8011e20 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8011e1a:	7f3b      	ldrb	r3, [r7, #28]
 8011e1c:	777b      	strb	r3, [r7, #29]
 8011e1e:	e07c      	b.n	8011f1a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011e20:	7cfb      	ldrb	r3, [r7, #19]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d079      	beq.n	8011f1a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011e26:	7cfb      	ldrb	r3, [r7, #19]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d009      	beq.n	8011e40 <etharp_find_entry+0x7c>
 8011e2c:	7cfb      	ldrb	r3, [r7, #19]
 8011e2e:	2b01      	cmp	r3, #1
 8011e30:	d806      	bhi.n	8011e40 <etharp_find_entry+0x7c>
 8011e32:	4b83      	ldr	r3, [pc, #524]	; (8012040 <etharp_find_entry+0x27c>)
 8011e34:	f44f 7293 	mov.w	r2, #294	; 0x126
 8011e38:	4982      	ldr	r1, [pc, #520]	; (8012044 <etharp_find_entry+0x280>)
 8011e3a:	4883      	ldr	r0, [pc, #524]	; (8012048 <etharp_find_entry+0x284>)
 8011e3c:	f002 ffec 	bl	8014e18 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00f      	beq.n	8011e66 <etharp_find_entry+0xa2>
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	6819      	ldr	r1, [r3, #0]
 8011e4a:	7f3a      	ldrb	r2, [r7, #28]
 8011e4c:	487b      	ldr	r0, [pc, #492]	; (801203c <etharp_find_entry+0x278>)
 8011e4e:	4613      	mov	r3, r2
 8011e50:	005b      	lsls	r3, r3, #1
 8011e52:	4413      	add	r3, r2
 8011e54:	00db      	lsls	r3, r3, #3
 8011e56:	4403      	add	r3, r0
 8011e58:	3304      	adds	r3, #4
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	4299      	cmp	r1, r3
 8011e5e:	d102      	bne.n	8011e66 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011e60:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011e64:	e0e5      	b.n	8012032 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011e66:	7cfb      	ldrb	r3, [r7, #19]
 8011e68:	2b01      	cmp	r3, #1
 8011e6a:	d13b      	bne.n	8011ee4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011e6c:	7f3a      	ldrb	r2, [r7, #28]
 8011e6e:	4973      	ldr	r1, [pc, #460]	; (801203c <etharp_find_entry+0x278>)
 8011e70:	4613      	mov	r3, r2
 8011e72:	005b      	lsls	r3, r3, #1
 8011e74:	4413      	add	r3, r2
 8011e76:	00db      	lsls	r3, r3, #3
 8011e78:	440b      	add	r3, r1
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d018      	beq.n	8011eb2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8011e80:	7f3a      	ldrb	r2, [r7, #28]
 8011e82:	496e      	ldr	r1, [pc, #440]	; (801203c <etharp_find_entry+0x278>)
 8011e84:	4613      	mov	r3, r2
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	4413      	add	r3, r2
 8011e8a:	00db      	lsls	r3, r3, #3
 8011e8c:	440b      	add	r3, r1
 8011e8e:	3312      	adds	r3, #18
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	8b3a      	ldrh	r2, [r7, #24]
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d840      	bhi.n	8011f1a <etharp_find_entry+0x156>
            old_queue = i;
 8011e98:	7f3b      	ldrb	r3, [r7, #28]
 8011e9a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8011e9c:	7f3a      	ldrb	r2, [r7, #28]
 8011e9e:	4967      	ldr	r1, [pc, #412]	; (801203c <etharp_find_entry+0x278>)
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	005b      	lsls	r3, r3, #1
 8011ea4:	4413      	add	r3, r2
 8011ea6:	00db      	lsls	r3, r3, #3
 8011ea8:	440b      	add	r3, r1
 8011eaa:	3312      	adds	r3, #18
 8011eac:	881b      	ldrh	r3, [r3, #0]
 8011eae:	833b      	strh	r3, [r7, #24]
 8011eb0:	e033      	b.n	8011f1a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011eb2:	7f3a      	ldrb	r2, [r7, #28]
 8011eb4:	4961      	ldr	r1, [pc, #388]	; (801203c <etharp_find_entry+0x278>)
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	005b      	lsls	r3, r3, #1
 8011eba:	4413      	add	r3, r2
 8011ebc:	00db      	lsls	r3, r3, #3
 8011ebe:	440b      	add	r3, r1
 8011ec0:	3312      	adds	r3, #18
 8011ec2:	881b      	ldrh	r3, [r3, #0]
 8011ec4:	8afa      	ldrh	r2, [r7, #22]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d827      	bhi.n	8011f1a <etharp_find_entry+0x156>
            old_pending = i;
 8011eca:	7f3b      	ldrb	r3, [r7, #28]
 8011ecc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8011ece:	7f3a      	ldrb	r2, [r7, #28]
 8011ed0:	495a      	ldr	r1, [pc, #360]	; (801203c <etharp_find_entry+0x278>)
 8011ed2:	4613      	mov	r3, r2
 8011ed4:	005b      	lsls	r3, r3, #1
 8011ed6:	4413      	add	r3, r2
 8011ed8:	00db      	lsls	r3, r3, #3
 8011eda:	440b      	add	r3, r1
 8011edc:	3312      	adds	r3, #18
 8011ede:	881b      	ldrh	r3, [r3, #0]
 8011ee0:	82fb      	strh	r3, [r7, #22]
 8011ee2:	e01a      	b.n	8011f1a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011ee4:	7cfb      	ldrb	r3, [r7, #19]
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d917      	bls.n	8011f1a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011eea:	7f3a      	ldrb	r2, [r7, #28]
 8011eec:	4953      	ldr	r1, [pc, #332]	; (801203c <etharp_find_entry+0x278>)
 8011eee:	4613      	mov	r3, r2
 8011ef0:	005b      	lsls	r3, r3, #1
 8011ef2:	4413      	add	r3, r2
 8011ef4:	00db      	lsls	r3, r3, #3
 8011ef6:	440b      	add	r3, r1
 8011ef8:	3312      	adds	r3, #18
 8011efa:	881b      	ldrh	r3, [r3, #0]
 8011efc:	8aba      	ldrh	r2, [r7, #20]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d80b      	bhi.n	8011f1a <etharp_find_entry+0x156>
            old_stable = i;
 8011f02:	7f3b      	ldrb	r3, [r7, #28]
 8011f04:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8011f06:	7f3a      	ldrb	r2, [r7, #28]
 8011f08:	494c      	ldr	r1, [pc, #304]	; (801203c <etharp_find_entry+0x278>)
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	005b      	lsls	r3, r3, #1
 8011f0e:	4413      	add	r3, r2
 8011f10:	00db      	lsls	r3, r3, #3
 8011f12:	440b      	add	r3, r1
 8011f14:	3312      	adds	r3, #18
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f1a:	7f3b      	ldrb	r3, [r7, #28]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	773b      	strb	r3, [r7, #28]
 8011f20:	7f3b      	ldrb	r3, [r7, #28]
 8011f22:	2b09      	cmp	r3, #9
 8011f24:	f67f af68 	bls.w	8011df8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011f28:	7afb      	ldrb	r3, [r7, #11]
 8011f2a:	f003 0302 	and.w	r3, r3, #2
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d108      	bne.n	8011f44 <etharp_find_entry+0x180>
 8011f32:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011f36:	2b0a      	cmp	r3, #10
 8011f38:	d107      	bne.n	8011f4a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011f3a:	7afb      	ldrb	r3, [r7, #11]
 8011f3c:	f003 0301 	and.w	r3, r3, #1
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d102      	bne.n	8011f4a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8011f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f48:	e073      	b.n	8012032 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011f4a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011f4e:	2b09      	cmp	r3, #9
 8011f50:	dc02      	bgt.n	8011f58 <etharp_find_entry+0x194>
    i = empty;
 8011f52:	7f7b      	ldrb	r3, [r7, #29]
 8011f54:	773b      	strb	r3, [r7, #28]
 8011f56:	e036      	b.n	8011fc6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011f58:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011f5c:	2b09      	cmp	r3, #9
 8011f5e:	dc13      	bgt.n	8011f88 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8011f60:	7fbb      	ldrb	r3, [r7, #30]
 8011f62:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011f64:	7f3a      	ldrb	r2, [r7, #28]
 8011f66:	4935      	ldr	r1, [pc, #212]	; (801203c <etharp_find_entry+0x278>)
 8011f68:	4613      	mov	r3, r2
 8011f6a:	005b      	lsls	r3, r3, #1
 8011f6c:	4413      	add	r3, r2
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	440b      	add	r3, r1
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d018      	beq.n	8011faa <etharp_find_entry+0x1e6>
 8011f78:	4b31      	ldr	r3, [pc, #196]	; (8012040 <etharp_find_entry+0x27c>)
 8011f7a:	f240 126f 	movw	r2, #367	; 0x16f
 8011f7e:	4933      	ldr	r1, [pc, #204]	; (801204c <etharp_find_entry+0x288>)
 8011f80:	4831      	ldr	r0, [pc, #196]	; (8012048 <etharp_find_entry+0x284>)
 8011f82:	f002 ff49 	bl	8014e18 <iprintf>
 8011f86:	e010      	b.n	8011faa <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011f88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011f8c:	2b09      	cmp	r3, #9
 8011f8e:	dc02      	bgt.n	8011f96 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8011f90:	7ffb      	ldrb	r3, [r7, #31]
 8011f92:	773b      	strb	r3, [r7, #28]
 8011f94:	e009      	b.n	8011faa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011f96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011f9a:	2b09      	cmp	r3, #9
 8011f9c:	dc02      	bgt.n	8011fa4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011f9e:	7efb      	ldrb	r3, [r7, #27]
 8011fa0:	773b      	strb	r3, [r7, #28]
 8011fa2:	e002      	b.n	8011faa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8011fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fa8:	e043      	b.n	8012032 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011faa:	7f3b      	ldrb	r3, [r7, #28]
 8011fac:	2b09      	cmp	r3, #9
 8011fae:	d906      	bls.n	8011fbe <etharp_find_entry+0x1fa>
 8011fb0:	4b23      	ldr	r3, [pc, #140]	; (8012040 <etharp_find_entry+0x27c>)
 8011fb2:	f240 1281 	movw	r2, #385	; 0x181
 8011fb6:	4926      	ldr	r1, [pc, #152]	; (8012050 <etharp_find_entry+0x28c>)
 8011fb8:	4823      	ldr	r0, [pc, #140]	; (8012048 <etharp_find_entry+0x284>)
 8011fba:	f002 ff2d 	bl	8014e18 <iprintf>
    etharp_free_entry(i);
 8011fbe:	7f3b      	ldrb	r3, [r7, #28]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7ff fe25 	bl	8011c10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011fc6:	7f3b      	ldrb	r3, [r7, #28]
 8011fc8:	2b09      	cmp	r3, #9
 8011fca:	d906      	bls.n	8011fda <etharp_find_entry+0x216>
 8011fcc:	4b1c      	ldr	r3, [pc, #112]	; (8012040 <etharp_find_entry+0x27c>)
 8011fce:	f240 1285 	movw	r2, #389	; 0x185
 8011fd2:	491f      	ldr	r1, [pc, #124]	; (8012050 <etharp_find_entry+0x28c>)
 8011fd4:	481c      	ldr	r0, [pc, #112]	; (8012048 <etharp_find_entry+0x284>)
 8011fd6:	f002 ff1f 	bl	8014e18 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011fda:	7f3a      	ldrb	r2, [r7, #28]
 8011fdc:	4917      	ldr	r1, [pc, #92]	; (801203c <etharp_find_entry+0x278>)
 8011fde:	4613      	mov	r3, r2
 8011fe0:	005b      	lsls	r3, r3, #1
 8011fe2:	4413      	add	r3, r2
 8011fe4:	00db      	lsls	r3, r3, #3
 8011fe6:	440b      	add	r3, r1
 8011fe8:	3314      	adds	r3, #20
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d006      	beq.n	8011ffe <etharp_find_entry+0x23a>
 8011ff0:	4b13      	ldr	r3, [pc, #76]	; (8012040 <etharp_find_entry+0x27c>)
 8011ff2:	f240 1287 	movw	r2, #391	; 0x187
 8011ff6:	4917      	ldr	r1, [pc, #92]	; (8012054 <etharp_find_entry+0x290>)
 8011ff8:	4813      	ldr	r0, [pc, #76]	; (8012048 <etharp_find_entry+0x284>)
 8011ffa:	f002 ff0d 	bl	8014e18 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d00a      	beq.n	801201a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012004:	7f3a      	ldrb	r2, [r7, #28]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6819      	ldr	r1, [r3, #0]
 801200a:	480c      	ldr	r0, [pc, #48]	; (801203c <etharp_find_entry+0x278>)
 801200c:	4613      	mov	r3, r2
 801200e:	005b      	lsls	r3, r3, #1
 8012010:	4413      	add	r3, r2
 8012012:	00db      	lsls	r3, r3, #3
 8012014:	4403      	add	r3, r0
 8012016:	3304      	adds	r3, #4
 8012018:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801201a:	7f3a      	ldrb	r2, [r7, #28]
 801201c:	4907      	ldr	r1, [pc, #28]	; (801203c <etharp_find_entry+0x278>)
 801201e:	4613      	mov	r3, r2
 8012020:	005b      	lsls	r3, r3, #1
 8012022:	4413      	add	r3, r2
 8012024:	00db      	lsls	r3, r3, #3
 8012026:	440b      	add	r3, r1
 8012028:	3312      	adds	r3, #18
 801202a:	2200      	movs	r2, #0
 801202c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801202e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8012032:	4618      	mov	r0, r3
 8012034:	3720      	adds	r7, #32
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	2000423c 	.word	0x2000423c
 8012040:	0801721c 	.word	0x0801721c
 8012044:	08017254 	.word	0x08017254
 8012048:	08017294 	.word	0x08017294
 801204c:	080172bc 	.word	0x080172bc
 8012050:	080172d4 	.word	0x080172d4
 8012054:	080172e8 	.word	0x080172e8

08012058 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b088      	sub	sp, #32
 801205c:	af02      	add	r7, sp, #8
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
 8012064:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801206c:	2b06      	cmp	r3, #6
 801206e:	d006      	beq.n	801207e <etharp_update_arp_entry+0x26>
 8012070:	4b48      	ldr	r3, [pc, #288]	; (8012194 <etharp_update_arp_entry+0x13c>)
 8012072:	f240 12ab 	movw	r2, #427	; 0x1ab
 8012076:	4948      	ldr	r1, [pc, #288]	; (8012198 <etharp_update_arp_entry+0x140>)
 8012078:	4848      	ldr	r0, [pc, #288]	; (801219c <etharp_update_arp_entry+0x144>)
 801207a:	f002 fecd 	bl	8014e18 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d012      	beq.n	80120aa <etharp_update_arp_entry+0x52>
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d00e      	beq.n	80120aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	68f9      	ldr	r1, [r7, #12]
 8012092:	4618      	mov	r0, r3
 8012094:	f001 f8d2 	bl	801323c <ip4_addr_isbroadcast_u32>
 8012098:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801209a:	2b00      	cmp	r3, #0
 801209c:	d105      	bne.n	80120aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80120a6:	2be0      	cmp	r3, #224	; 0xe0
 80120a8:	d102      	bne.n	80120b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80120aa:	f06f 030f 	mvn.w	r3, #15
 80120ae:	e06c      	b.n	801218a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80120b0:	78fb      	ldrb	r3, [r7, #3]
 80120b2:	68fa      	ldr	r2, [r7, #12]
 80120b4:	4619      	mov	r1, r3
 80120b6:	68b8      	ldr	r0, [r7, #8]
 80120b8:	f7ff fe84 	bl	8011dc4 <etharp_find_entry>
 80120bc:	4603      	mov	r3, r0
 80120be:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80120c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	da02      	bge.n	80120ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80120c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120cc:	e05d      	b.n	801218a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80120ce:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80120d2:	4933      	ldr	r1, [pc, #204]	; (80121a0 <etharp_update_arp_entry+0x148>)
 80120d4:	4613      	mov	r3, r2
 80120d6:	005b      	lsls	r3, r3, #1
 80120d8:	4413      	add	r3, r2
 80120da:	00db      	lsls	r3, r3, #3
 80120dc:	440b      	add	r3, r1
 80120de:	3314      	adds	r3, #20
 80120e0:	2202      	movs	r2, #2
 80120e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80120e4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80120e8:	492d      	ldr	r1, [pc, #180]	; (80121a0 <etharp_update_arp_entry+0x148>)
 80120ea:	4613      	mov	r3, r2
 80120ec:	005b      	lsls	r3, r3, #1
 80120ee:	4413      	add	r3, r2
 80120f0:	00db      	lsls	r3, r3, #3
 80120f2:	440b      	add	r3, r1
 80120f4:	3308      	adds	r3, #8
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80120fa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80120fe:	4613      	mov	r3, r2
 8012100:	005b      	lsls	r3, r3, #1
 8012102:	4413      	add	r3, r2
 8012104:	00db      	lsls	r3, r3, #3
 8012106:	3308      	adds	r3, #8
 8012108:	4a25      	ldr	r2, [pc, #148]	; (80121a0 <etharp_update_arp_entry+0x148>)
 801210a:	4413      	add	r3, r2
 801210c:	3304      	adds	r3, #4
 801210e:	2206      	movs	r2, #6
 8012110:	6879      	ldr	r1, [r7, #4]
 8012112:	4618      	mov	r0, r3
 8012114:	f002 fdc5 	bl	8014ca2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012118:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801211c:	4920      	ldr	r1, [pc, #128]	; (80121a0 <etharp_update_arp_entry+0x148>)
 801211e:	4613      	mov	r3, r2
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	4413      	add	r3, r2
 8012124:	00db      	lsls	r3, r3, #3
 8012126:	440b      	add	r3, r1
 8012128:	3312      	adds	r3, #18
 801212a:	2200      	movs	r2, #0
 801212c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801212e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012132:	491b      	ldr	r1, [pc, #108]	; (80121a0 <etharp_update_arp_entry+0x148>)
 8012134:	4613      	mov	r3, r2
 8012136:	005b      	lsls	r3, r3, #1
 8012138:	4413      	add	r3, r2
 801213a:	00db      	lsls	r3, r3, #3
 801213c:	440b      	add	r3, r1
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d021      	beq.n	8012188 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012144:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012148:	4915      	ldr	r1, [pc, #84]	; (80121a0 <etharp_update_arp_entry+0x148>)
 801214a:	4613      	mov	r3, r2
 801214c:	005b      	lsls	r3, r3, #1
 801214e:	4413      	add	r3, r2
 8012150:	00db      	lsls	r3, r3, #3
 8012152:	440b      	add	r3, r1
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012158:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801215c:	4910      	ldr	r1, [pc, #64]	; (80121a0 <etharp_update_arp_entry+0x148>)
 801215e:	4613      	mov	r3, r2
 8012160:	005b      	lsls	r3, r3, #1
 8012162:	4413      	add	r3, r2
 8012164:	00db      	lsls	r3, r3, #3
 8012166:	440b      	add	r3, r1
 8012168:	2200      	movs	r2, #0
 801216a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8012172:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012176:	9300      	str	r3, [sp, #0]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6939      	ldr	r1, [r7, #16]
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f001 feff 	bl	8013f80 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012182:	6938      	ldr	r0, [r7, #16]
 8012184:	f7fa fdd2 	bl	800cd2c <pbuf_free>
  }
  return ERR_OK;
 8012188:	2300      	movs	r3, #0
}
 801218a:	4618      	mov	r0, r3
 801218c:	3718      	adds	r7, #24
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	0801721c 	.word	0x0801721c
 8012198:	08017314 	.word	0x08017314
 801219c:	08017294 	.word	0x08017294
 80121a0:	2000423c 	.word	0x2000423c

080121a4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121ac:	2300      	movs	r3, #0
 80121ae:	73fb      	strb	r3, [r7, #15]
 80121b0:	e01f      	b.n	80121f2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80121b2:	7bfa      	ldrb	r2, [r7, #15]
 80121b4:	4912      	ldr	r1, [pc, #72]	; (8012200 <etharp_cleanup_netif+0x5c>)
 80121b6:	4613      	mov	r3, r2
 80121b8:	005b      	lsls	r3, r3, #1
 80121ba:	4413      	add	r3, r2
 80121bc:	00db      	lsls	r3, r3, #3
 80121be:	440b      	add	r3, r1
 80121c0:	3314      	adds	r3, #20
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80121c6:	7bbb      	ldrb	r3, [r7, #14]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00f      	beq.n	80121ec <etharp_cleanup_netif+0x48>
 80121cc:	7bfa      	ldrb	r2, [r7, #15]
 80121ce:	490c      	ldr	r1, [pc, #48]	; (8012200 <etharp_cleanup_netif+0x5c>)
 80121d0:	4613      	mov	r3, r2
 80121d2:	005b      	lsls	r3, r3, #1
 80121d4:	4413      	add	r3, r2
 80121d6:	00db      	lsls	r3, r3, #3
 80121d8:	440b      	add	r3, r1
 80121da:	3308      	adds	r3, #8
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d103      	bne.n	80121ec <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7ff fd12 	bl	8011c10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121ec:	7bfb      	ldrb	r3, [r7, #15]
 80121ee:	3301      	adds	r3, #1
 80121f0:	73fb      	strb	r3, [r7, #15]
 80121f2:	7bfb      	ldrb	r3, [r7, #15]
 80121f4:	2b09      	cmp	r3, #9
 80121f6:	d9dc      	bls.n	80121b2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80121f8:	bf00      	nop
 80121fa:	3710      	adds	r7, #16
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	2000423c 	.word	0x2000423c

08012204 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012204:	b5b0      	push	{r4, r5, r7, lr}
 8012206:	b08a      	sub	sp, #40	; 0x28
 8012208:	af04      	add	r7, sp, #16
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d107      	bne.n	8012224 <etharp_input+0x20>
 8012214:	4b3d      	ldr	r3, [pc, #244]	; (801230c <etharp_input+0x108>)
 8012216:	f44f 7222 	mov.w	r2, #648	; 0x288
 801221a:	493d      	ldr	r1, [pc, #244]	; (8012310 <etharp_input+0x10c>)
 801221c:	483d      	ldr	r0, [pc, #244]	; (8012314 <etharp_input+0x110>)
 801221e:	f002 fdfb 	bl	8014e18 <iprintf>
 8012222:	e06f      	b.n	8012304 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	881b      	ldrh	r3, [r3, #0]
 801222e:	b29b      	uxth	r3, r3
 8012230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012234:	d10c      	bne.n	8012250 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801223a:	2b06      	cmp	r3, #6
 801223c:	d108      	bne.n	8012250 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012242:	2b04      	cmp	r3, #4
 8012244:	d104      	bne.n	8012250 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	885b      	ldrh	r3, [r3, #2]
 801224a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801224c:	2b08      	cmp	r3, #8
 801224e:	d003      	beq.n	8012258 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7fa fd6b 	bl	800cd2c <pbuf_free>
    return;
 8012256:	e055      	b.n	8012304 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	330e      	adds	r3, #14
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	3318      	adds	r3, #24
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	3304      	adds	r3, #4
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d102      	bne.n	8012278 <etharp_input+0x74>
    for_us = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	75fb      	strb	r3, [r7, #23]
 8012276:	e009      	b.n	801228c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012278:	68ba      	ldr	r2, [r7, #8]
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	3304      	adds	r3, #4
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	429a      	cmp	r2, r3
 8012282:	bf0c      	ite	eq
 8012284:	2301      	moveq	r3, #1
 8012286:	2300      	movne	r3, #0
 8012288:	b2db      	uxtb	r3, r3
 801228a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	f103 0208 	add.w	r2, r3, #8
 8012292:	7dfb      	ldrb	r3, [r7, #23]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d001      	beq.n	801229c <etharp_input+0x98>
 8012298:	2301      	movs	r3, #1
 801229a:	e000      	b.n	801229e <etharp_input+0x9a>
 801229c:	2302      	movs	r3, #2
 801229e:	f107 010c 	add.w	r1, r7, #12
 80122a2:	6838      	ldr	r0, [r7, #0]
 80122a4:	f7ff fed8 	bl	8012058 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	88db      	ldrh	r3, [r3, #6]
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122b2:	d003      	beq.n	80122bc <etharp_input+0xb8>
 80122b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122b8:	d01e      	beq.n	80122f8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80122ba:	e020      	b.n	80122fe <etharp_input+0xfa>
    if (for_us) {
 80122bc:	7dfb      	ldrb	r3, [r7, #23]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d01c      	beq.n	80122fc <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	f103 0525 	add.w	r5, r3, #37	; 0x25
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80122d8:	693a      	ldr	r2, [r7, #16]
 80122da:	3208      	adds	r2, #8
      etharp_raw(netif,
 80122dc:	2102      	movs	r1, #2
 80122de:	9103      	str	r1, [sp, #12]
 80122e0:	f107 010c 	add.w	r1, r7, #12
 80122e4:	9102      	str	r1, [sp, #8]
 80122e6:	9201      	str	r2, [sp, #4]
 80122e8:	9300      	str	r3, [sp, #0]
 80122ea:	462b      	mov	r3, r5
 80122ec:	4622      	mov	r2, r4
 80122ee:	4601      	mov	r1, r0
 80122f0:	6838      	ldr	r0, [r7, #0]
 80122f2:	f000 fae3 	bl	80128bc <etharp_raw>
    break;
 80122f6:	e001      	b.n	80122fc <etharp_input+0xf8>
    break;
 80122f8:	bf00      	nop
 80122fa:	e000      	b.n	80122fe <etharp_input+0xfa>
    break;
 80122fc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7fa fd14 	bl	800cd2c <pbuf_free>
}
 8012304:	3718      	adds	r7, #24
 8012306:	46bd      	mov	sp, r7
 8012308:	bdb0      	pop	{r4, r5, r7, pc}
 801230a:	bf00      	nop
 801230c:	0801721c 	.word	0x0801721c
 8012310:	0801736c 	.word	0x0801736c
 8012314:	08017294 	.word	0x08017294

08012318 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af02      	add	r7, sp, #8
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	4613      	mov	r3, r2
 8012324:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012326:	79fa      	ldrb	r2, [r7, #7]
 8012328:	4944      	ldr	r1, [pc, #272]	; (801243c <etharp_output_to_arp_index+0x124>)
 801232a:	4613      	mov	r3, r2
 801232c:	005b      	lsls	r3, r3, #1
 801232e:	4413      	add	r3, r2
 8012330:	00db      	lsls	r3, r3, #3
 8012332:	440b      	add	r3, r1
 8012334:	3314      	adds	r3, #20
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	2b01      	cmp	r3, #1
 801233a:	d806      	bhi.n	801234a <etharp_output_to_arp_index+0x32>
 801233c:	4b40      	ldr	r3, [pc, #256]	; (8012440 <etharp_output_to_arp_index+0x128>)
 801233e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8012342:	4940      	ldr	r1, [pc, #256]	; (8012444 <etharp_output_to_arp_index+0x12c>)
 8012344:	4840      	ldr	r0, [pc, #256]	; (8012448 <etharp_output_to_arp_index+0x130>)
 8012346:	f002 fd67 	bl	8014e18 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801234a:	79fa      	ldrb	r2, [r7, #7]
 801234c:	493b      	ldr	r1, [pc, #236]	; (801243c <etharp_output_to_arp_index+0x124>)
 801234e:	4613      	mov	r3, r2
 8012350:	005b      	lsls	r3, r3, #1
 8012352:	4413      	add	r3, r2
 8012354:	00db      	lsls	r3, r3, #3
 8012356:	440b      	add	r3, r1
 8012358:	3314      	adds	r3, #20
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	2b02      	cmp	r3, #2
 801235e:	d153      	bne.n	8012408 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012360:	79fa      	ldrb	r2, [r7, #7]
 8012362:	4936      	ldr	r1, [pc, #216]	; (801243c <etharp_output_to_arp_index+0x124>)
 8012364:	4613      	mov	r3, r2
 8012366:	005b      	lsls	r3, r3, #1
 8012368:	4413      	add	r3, r2
 801236a:	00db      	lsls	r3, r3, #3
 801236c:	440b      	add	r3, r1
 801236e:	3312      	adds	r3, #18
 8012370:	881b      	ldrh	r3, [r3, #0]
 8012372:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012376:	d919      	bls.n	80123ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012378:	79fa      	ldrb	r2, [r7, #7]
 801237a:	4613      	mov	r3, r2
 801237c:	005b      	lsls	r3, r3, #1
 801237e:	4413      	add	r3, r2
 8012380:	00db      	lsls	r3, r3, #3
 8012382:	4a2e      	ldr	r2, [pc, #184]	; (801243c <etharp_output_to_arp_index+0x124>)
 8012384:	4413      	add	r3, r2
 8012386:	3304      	adds	r3, #4
 8012388:	4619      	mov	r1, r3
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f000 fb44 	bl	8012a18 <etharp_request>
 8012390:	4603      	mov	r3, r0
 8012392:	2b00      	cmp	r3, #0
 8012394:	d138      	bne.n	8012408 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012396:	79fa      	ldrb	r2, [r7, #7]
 8012398:	4928      	ldr	r1, [pc, #160]	; (801243c <etharp_output_to_arp_index+0x124>)
 801239a:	4613      	mov	r3, r2
 801239c:	005b      	lsls	r3, r3, #1
 801239e:	4413      	add	r3, r2
 80123a0:	00db      	lsls	r3, r3, #3
 80123a2:	440b      	add	r3, r1
 80123a4:	3314      	adds	r3, #20
 80123a6:	2203      	movs	r2, #3
 80123a8:	701a      	strb	r2, [r3, #0]
 80123aa:	e02d      	b.n	8012408 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80123ac:	79fa      	ldrb	r2, [r7, #7]
 80123ae:	4923      	ldr	r1, [pc, #140]	; (801243c <etharp_output_to_arp_index+0x124>)
 80123b0:	4613      	mov	r3, r2
 80123b2:	005b      	lsls	r3, r3, #1
 80123b4:	4413      	add	r3, r2
 80123b6:	00db      	lsls	r3, r3, #3
 80123b8:	440b      	add	r3, r1
 80123ba:	3312      	adds	r3, #18
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80123c2:	d321      	bcc.n	8012408 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80123c4:	79fa      	ldrb	r2, [r7, #7]
 80123c6:	4613      	mov	r3, r2
 80123c8:	005b      	lsls	r3, r3, #1
 80123ca:	4413      	add	r3, r2
 80123cc:	00db      	lsls	r3, r3, #3
 80123ce:	4a1b      	ldr	r2, [pc, #108]	; (801243c <etharp_output_to_arp_index+0x124>)
 80123d0:	4413      	add	r3, r2
 80123d2:	1d19      	adds	r1, r3, #4
 80123d4:	79fa      	ldrb	r2, [r7, #7]
 80123d6:	4613      	mov	r3, r2
 80123d8:	005b      	lsls	r3, r3, #1
 80123da:	4413      	add	r3, r2
 80123dc:	00db      	lsls	r3, r3, #3
 80123de:	3308      	adds	r3, #8
 80123e0:	4a16      	ldr	r2, [pc, #88]	; (801243c <etharp_output_to_arp_index+0x124>)
 80123e2:	4413      	add	r3, r2
 80123e4:	3304      	adds	r3, #4
 80123e6:	461a      	mov	r2, r3
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f000 faf3 	bl	80129d4 <etharp_request_dst>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d109      	bne.n	8012408 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80123f4:	79fa      	ldrb	r2, [r7, #7]
 80123f6:	4911      	ldr	r1, [pc, #68]	; (801243c <etharp_output_to_arp_index+0x124>)
 80123f8:	4613      	mov	r3, r2
 80123fa:	005b      	lsls	r3, r3, #1
 80123fc:	4413      	add	r3, r2
 80123fe:	00db      	lsls	r3, r3, #3
 8012400:	440b      	add	r3, r1
 8012402:	3314      	adds	r3, #20
 8012404:	2203      	movs	r2, #3
 8012406:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f103 0125 	add.w	r1, r3, #37	; 0x25
 801240e:	79fa      	ldrb	r2, [r7, #7]
 8012410:	4613      	mov	r3, r2
 8012412:	005b      	lsls	r3, r3, #1
 8012414:	4413      	add	r3, r2
 8012416:	00db      	lsls	r3, r3, #3
 8012418:	3308      	adds	r3, #8
 801241a:	4a08      	ldr	r2, [pc, #32]	; (801243c <etharp_output_to_arp_index+0x124>)
 801241c:	4413      	add	r3, r2
 801241e:	1d1a      	adds	r2, r3, #4
 8012420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	4613      	mov	r3, r2
 8012428:	460a      	mov	r2, r1
 801242a:	68b9      	ldr	r1, [r7, #8]
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f001 fda7 	bl	8013f80 <ethernet_output>
 8012432:	4603      	mov	r3, r0
}
 8012434:	4618      	mov	r0, r3
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	2000423c 	.word	0x2000423c
 8012440:	0801721c 	.word	0x0801721c
 8012444:	0801738c 	.word	0x0801738c
 8012448:	08017294 	.word	0x08017294

0801244c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b08a      	sub	sp, #40	; 0x28
 8012450:	af02      	add	r7, sp, #8
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d106      	bne.n	8012470 <etharp_output+0x24>
 8012462:	4b69      	ldr	r3, [pc, #420]	; (8012608 <etharp_output+0x1bc>)
 8012464:	f240 321b 	movw	r2, #795	; 0x31b
 8012468:	4968      	ldr	r1, [pc, #416]	; (801260c <etharp_output+0x1c0>)
 801246a:	4869      	ldr	r0, [pc, #420]	; (8012610 <etharp_output+0x1c4>)
 801246c:	f002 fcd4 	bl	8014e18 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d106      	bne.n	8012484 <etharp_output+0x38>
 8012476:	4b64      	ldr	r3, [pc, #400]	; (8012608 <etharp_output+0x1bc>)
 8012478:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801247c:	4965      	ldr	r1, [pc, #404]	; (8012614 <etharp_output+0x1c8>)
 801247e:	4864      	ldr	r0, [pc, #400]	; (8012610 <etharp_output+0x1c4>)
 8012480:	f002 fcca 	bl	8014e18 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d106      	bne.n	8012498 <etharp_output+0x4c>
 801248a:	4b5f      	ldr	r3, [pc, #380]	; (8012608 <etharp_output+0x1bc>)
 801248c:	f240 321d 	movw	r2, #797	; 0x31d
 8012490:	4961      	ldr	r1, [pc, #388]	; (8012618 <etharp_output+0x1cc>)
 8012492:	485f      	ldr	r0, [pc, #380]	; (8012610 <etharp_output+0x1c4>)
 8012494:	f002 fcc0 	bl	8014e18 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	68f9      	ldr	r1, [r7, #12]
 801249e:	4618      	mov	r0, r3
 80124a0:	f000 fecc 	bl	801323c <ip4_addr_isbroadcast_u32>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d002      	beq.n	80124b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80124aa:	4b5c      	ldr	r3, [pc, #368]	; (801261c <etharp_output+0x1d0>)
 80124ac:	61fb      	str	r3, [r7, #28]
 80124ae:	e09b      	b.n	80125e8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80124b8:	2be0      	cmp	r3, #224	; 0xe0
 80124ba:	d118      	bne.n	80124ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80124bc:	2301      	movs	r3, #1
 80124be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80124c0:	2300      	movs	r3, #0
 80124c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80124c4:	235e      	movs	r3, #94	; 0x5e
 80124c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	3301      	adds	r3, #1
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	3302      	adds	r3, #2
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	3303      	adds	r3, #3
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80124e6:	f107 0310 	add.w	r3, r7, #16
 80124ea:	61fb      	str	r3, [r7, #28]
 80124ec:	e07c      	b.n	80125e8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681a      	ldr	r2, [r3, #0]
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	3304      	adds	r3, #4
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	405a      	eors	r2, r3
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	3308      	adds	r3, #8
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4013      	ands	r3, r2
 8012502:	2b00      	cmp	r3, #0
 8012504:	d012      	beq.n	801252c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801250c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012510:	4293      	cmp	r3, r2
 8012512:	d00b      	beq.n	801252c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	330c      	adds	r3, #12
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d003      	beq.n	8012526 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	330c      	adds	r3, #12
 8012522:	61bb      	str	r3, [r7, #24]
 8012524:	e002      	b.n	801252c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012526:	f06f 0303 	mvn.w	r3, #3
 801252a:	e069      	b.n	8012600 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801252c:	4b3c      	ldr	r3, [pc, #240]	; (8012620 <etharp_output+0x1d4>)
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	4619      	mov	r1, r3
 8012532:	4a3c      	ldr	r2, [pc, #240]	; (8012624 <etharp_output+0x1d8>)
 8012534:	460b      	mov	r3, r1
 8012536:	005b      	lsls	r3, r3, #1
 8012538:	440b      	add	r3, r1
 801253a:	00db      	lsls	r3, r3, #3
 801253c:	4413      	add	r3, r2
 801253e:	3314      	adds	r3, #20
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	2b01      	cmp	r3, #1
 8012544:	d917      	bls.n	8012576 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	4b35      	ldr	r3, [pc, #212]	; (8012620 <etharp_output+0x1d4>)
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	4618      	mov	r0, r3
 8012550:	4934      	ldr	r1, [pc, #208]	; (8012624 <etharp_output+0x1d8>)
 8012552:	4603      	mov	r3, r0
 8012554:	005b      	lsls	r3, r3, #1
 8012556:	4403      	add	r3, r0
 8012558:	00db      	lsls	r3, r3, #3
 801255a:	440b      	add	r3, r1
 801255c:	3304      	adds	r3, #4
 801255e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012560:	429a      	cmp	r2, r3
 8012562:	d108      	bne.n	8012576 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012564:	4b2e      	ldr	r3, [pc, #184]	; (8012620 <etharp_output+0x1d4>)
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	461a      	mov	r2, r3
 801256a:	68b9      	ldr	r1, [r7, #8]
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f7ff fed3 	bl	8012318 <etharp_output_to_arp_index>
 8012572:	4603      	mov	r3, r0
 8012574:	e044      	b.n	8012600 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012576:	2300      	movs	r3, #0
 8012578:	75fb      	strb	r3, [r7, #23]
 801257a:	e02a      	b.n	80125d2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801257c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012580:	4928      	ldr	r1, [pc, #160]	; (8012624 <etharp_output+0x1d8>)
 8012582:	4613      	mov	r3, r2
 8012584:	005b      	lsls	r3, r3, #1
 8012586:	4413      	add	r3, r2
 8012588:	00db      	lsls	r3, r3, #3
 801258a:	440b      	add	r3, r1
 801258c:	3314      	adds	r3, #20
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	2b01      	cmp	r3, #1
 8012592:	d918      	bls.n	80125c6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012594:	69bb      	ldr	r3, [r7, #24]
 8012596:	6819      	ldr	r1, [r3, #0]
 8012598:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801259c:	4821      	ldr	r0, [pc, #132]	; (8012624 <etharp_output+0x1d8>)
 801259e:	4613      	mov	r3, r2
 80125a0:	005b      	lsls	r3, r3, #1
 80125a2:	4413      	add	r3, r2
 80125a4:	00db      	lsls	r3, r3, #3
 80125a6:	4403      	add	r3, r0
 80125a8:	3304      	adds	r3, #4
 80125aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80125ac:	4299      	cmp	r1, r3
 80125ae:	d10a      	bne.n	80125c6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80125b0:	7dfa      	ldrb	r2, [r7, #23]
 80125b2:	4b1b      	ldr	r3, [pc, #108]	; (8012620 <etharp_output+0x1d4>)
 80125b4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80125b6:	7dfb      	ldrb	r3, [r7, #23]
 80125b8:	461a      	mov	r2, r3
 80125ba:	68b9      	ldr	r1, [r7, #8]
 80125bc:	68f8      	ldr	r0, [r7, #12]
 80125be:	f7ff feab 	bl	8012318 <etharp_output_to_arp_index>
 80125c2:	4603      	mov	r3, r0
 80125c4:	e01c      	b.n	8012600 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80125c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	3301      	adds	r3, #1
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	75fb      	strb	r3, [r7, #23]
 80125d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125d6:	2b09      	cmp	r3, #9
 80125d8:	ddd0      	ble.n	801257c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80125da:	68ba      	ldr	r2, [r7, #8]
 80125dc:	69b9      	ldr	r1, [r7, #24]
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f000 f822 	bl	8012628 <etharp_query>
 80125e4:	4603      	mov	r3, r0
 80125e6:	e00b      	b.n	8012600 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80125ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	69fb      	ldr	r3, [r7, #28]
 80125f6:	68b9      	ldr	r1, [r7, #8]
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f001 fcc1 	bl	8013f80 <ethernet_output>
 80125fe:	4603      	mov	r3, r0
}
 8012600:	4618      	mov	r0, r3
 8012602:	3720      	adds	r7, #32
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	0801721c 	.word	0x0801721c
 801260c:	0801736c 	.word	0x0801736c
 8012610:	08017294 	.word	0x08017294
 8012614:	080173bc 	.word	0x080173bc
 8012618:	0801735c 	.word	0x0801735c
 801261c:	080179fc 	.word	0x080179fc
 8012620:	2000432c 	.word	0x2000432c
 8012624:	2000423c 	.word	0x2000423c

08012628 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b08c      	sub	sp, #48	; 0x30
 801262c:	af02      	add	r7, sp, #8
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	3325      	adds	r3, #37	; 0x25
 8012638:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801263a:	23ff      	movs	r3, #255	; 0xff
 801263c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012640:	2300      	movs	r3, #0
 8012642:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	68f9      	ldr	r1, [r7, #12]
 801264a:	4618      	mov	r0, r3
 801264c:	f000 fdf6 	bl	801323c <ip4_addr_isbroadcast_u32>
 8012650:	4603      	mov	r3, r0
 8012652:	2b00      	cmp	r3, #0
 8012654:	d10c      	bne.n	8012670 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801265e:	2be0      	cmp	r3, #224	; 0xe0
 8012660:	d006      	beq.n	8012670 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d003      	beq.n	8012670 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d102      	bne.n	8012676 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012670:	f06f 030f 	mvn.w	r3, #15
 8012674:	e10f      	b.n	8012896 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	2101      	movs	r1, #1
 801267a:	68b8      	ldr	r0, [r7, #8]
 801267c:	f7ff fba2 	bl	8011dc4 <etharp_find_entry>
 8012680:	4603      	mov	r3, r0
 8012682:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8012684:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012688:	2b00      	cmp	r3, #0
 801268a:	da02      	bge.n	8012692 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 801268c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012690:	e101      	b.n	8012896 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012692:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012696:	4982      	ldr	r1, [pc, #520]	; (80128a0 <etharp_query+0x278>)
 8012698:	4613      	mov	r3, r2
 801269a:	005b      	lsls	r3, r3, #1
 801269c:	4413      	add	r3, r2
 801269e:	00db      	lsls	r3, r3, #3
 80126a0:	440b      	add	r3, r1
 80126a2:	3314      	adds	r3, #20
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d117      	bne.n	80126da <etharp_query+0xb2>
    is_new_entry = 1;
 80126aa:	2301      	movs	r3, #1
 80126ac:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80126ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80126b2:	497b      	ldr	r1, [pc, #492]	; (80128a0 <etharp_query+0x278>)
 80126b4:	4613      	mov	r3, r2
 80126b6:	005b      	lsls	r3, r3, #1
 80126b8:	4413      	add	r3, r2
 80126ba:	00db      	lsls	r3, r3, #3
 80126bc:	440b      	add	r3, r1
 80126be:	3314      	adds	r3, #20
 80126c0:	2201      	movs	r2, #1
 80126c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80126c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80126c8:	4975      	ldr	r1, [pc, #468]	; (80128a0 <etharp_query+0x278>)
 80126ca:	4613      	mov	r3, r2
 80126cc:	005b      	lsls	r3, r3, #1
 80126ce:	4413      	add	r3, r2
 80126d0:	00db      	lsls	r3, r3, #3
 80126d2:	440b      	add	r3, r1
 80126d4:	3308      	adds	r3, #8
 80126d6:	68fa      	ldr	r2, [r7, #12]
 80126d8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80126da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80126de:	4970      	ldr	r1, [pc, #448]	; (80128a0 <etharp_query+0x278>)
 80126e0:	4613      	mov	r3, r2
 80126e2:	005b      	lsls	r3, r3, #1
 80126e4:	4413      	add	r3, r2
 80126e6:	00db      	lsls	r3, r3, #3
 80126e8:	440b      	add	r3, r1
 80126ea:	3314      	adds	r3, #20
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d012      	beq.n	8012718 <etharp_query+0xf0>
 80126f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80126f6:	496a      	ldr	r1, [pc, #424]	; (80128a0 <etharp_query+0x278>)
 80126f8:	4613      	mov	r3, r2
 80126fa:	005b      	lsls	r3, r3, #1
 80126fc:	4413      	add	r3, r2
 80126fe:	00db      	lsls	r3, r3, #3
 8012700:	440b      	add	r3, r1
 8012702:	3314      	adds	r3, #20
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	2b01      	cmp	r3, #1
 8012708:	d806      	bhi.n	8012718 <etharp_query+0xf0>
 801270a:	4b66      	ldr	r3, [pc, #408]	; (80128a4 <etharp_query+0x27c>)
 801270c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012710:	4965      	ldr	r1, [pc, #404]	; (80128a8 <etharp_query+0x280>)
 8012712:	4866      	ldr	r0, [pc, #408]	; (80128ac <etharp_query+0x284>)
 8012714:	f002 fb80 	bl	8014e18 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012718:	6a3b      	ldr	r3, [r7, #32]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d102      	bne.n	8012724 <etharp_query+0xfc>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d10c      	bne.n	801273e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012724:	68b9      	ldr	r1, [r7, #8]
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	f000 f976 	bl	8012a18 <etharp_request>
 801272c:	4603      	mov	r3, r0
 801272e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d102      	bne.n	801273e <etharp_query+0x116>
      return result;
 8012738:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801273c:	e0ab      	b.n	8012896 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d106      	bne.n	8012752 <etharp_query+0x12a>
 8012744:	4b57      	ldr	r3, [pc, #348]	; (80128a4 <etharp_query+0x27c>)
 8012746:	f240 32db 	movw	r2, #987	; 0x3db
 801274a:	4959      	ldr	r1, [pc, #356]	; (80128b0 <etharp_query+0x288>)
 801274c:	4857      	ldr	r0, [pc, #348]	; (80128ac <etharp_query+0x284>)
 801274e:	f002 fb63 	bl	8014e18 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012752:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012756:	4952      	ldr	r1, [pc, #328]	; (80128a0 <etharp_query+0x278>)
 8012758:	4613      	mov	r3, r2
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	4413      	add	r3, r2
 801275e:	00db      	lsls	r3, r3, #3
 8012760:	440b      	add	r3, r1
 8012762:	3314      	adds	r3, #20
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	2b01      	cmp	r3, #1
 8012768:	d919      	bls.n	801279e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801276a:	7cfa      	ldrb	r2, [r7, #19]
 801276c:	4b51      	ldr	r3, [pc, #324]	; (80128b4 <etharp_query+0x28c>)
 801276e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012770:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012774:	4613      	mov	r3, r2
 8012776:	005b      	lsls	r3, r3, #1
 8012778:	4413      	add	r3, r2
 801277a:	00db      	lsls	r3, r3, #3
 801277c:	3308      	adds	r3, #8
 801277e:	4a48      	ldr	r2, [pc, #288]	; (80128a0 <etharp_query+0x278>)
 8012780:	4413      	add	r3, r2
 8012782:	1d1a      	adds	r2, r3, #4
 8012784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	4613      	mov	r3, r2
 801278c:	697a      	ldr	r2, [r7, #20]
 801278e:	6879      	ldr	r1, [r7, #4]
 8012790:	68f8      	ldr	r0, [r7, #12]
 8012792:	f001 fbf5 	bl	8013f80 <ethernet_output>
 8012796:	4603      	mov	r3, r0
 8012798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801279c:	e079      	b.n	8012892 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801279e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80127a2:	493f      	ldr	r1, [pc, #252]	; (80128a0 <etharp_query+0x278>)
 80127a4:	4613      	mov	r3, r2
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	4413      	add	r3, r2
 80127aa:	00db      	lsls	r3, r3, #3
 80127ac:	440b      	add	r3, r1
 80127ae:	3314      	adds	r3, #20
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	2b01      	cmp	r3, #1
 80127b4:	d16d      	bne.n	8012892 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80127b6:	2300      	movs	r3, #0
 80127b8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	61fb      	str	r3, [r7, #28]
    while (p) {
 80127be:	e01a      	b.n	80127f6 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	895a      	ldrh	r2, [r3, #10]
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	891b      	ldrh	r3, [r3, #8]
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d10a      	bne.n	80127e2 <etharp_query+0x1ba>
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d006      	beq.n	80127e2 <etharp_query+0x1ba>
 80127d4:	4b33      	ldr	r3, [pc, #204]	; (80128a4 <etharp_query+0x27c>)
 80127d6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80127da:	4937      	ldr	r1, [pc, #220]	; (80128b8 <etharp_query+0x290>)
 80127dc:	4833      	ldr	r0, [pc, #204]	; (80128ac <etharp_query+0x284>)
 80127de:	f002 fb1b 	bl	8014e18 <iprintf>
      if (p->type != PBUF_ROM) {
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	7b1b      	ldrb	r3, [r3, #12]
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d002      	beq.n	80127f0 <etharp_query+0x1c8>
        copy_needed = 1;
 80127ea:	2301      	movs	r3, #1
 80127ec:	61bb      	str	r3, [r7, #24]
        break;
 80127ee:	e005      	b.n	80127fc <etharp_query+0x1d4>
      }
      p = p->next;
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d1e1      	bne.n	80127c0 <etharp_query+0x198>
    }
    if (copy_needed) {
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d017      	beq.n	8012832 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	891b      	ldrh	r3, [r3, #8]
 8012806:	2200      	movs	r2, #0
 8012808:	4619      	mov	r1, r3
 801280a:	2002      	movs	r0, #2
 801280c:	f7f9 ff1c 	bl	800c648 <pbuf_alloc>
 8012810:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8012812:	69fb      	ldr	r3, [r7, #28]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d011      	beq.n	801283c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8012818:	6879      	ldr	r1, [r7, #4]
 801281a:	69f8      	ldr	r0, [r7, #28]
 801281c:	f7fa fbb6 	bl	800cf8c <pbuf_copy>
 8012820:	4603      	mov	r3, r0
 8012822:	2b00      	cmp	r3, #0
 8012824:	d00a      	beq.n	801283c <etharp_query+0x214>
          pbuf_free(p);
 8012826:	69f8      	ldr	r0, [r7, #28]
 8012828:	f7fa fa80 	bl	800cd2c <pbuf_free>
          p = NULL;
 801282c:	2300      	movs	r3, #0
 801282e:	61fb      	str	r3, [r7, #28]
 8012830:	e004      	b.n	801283c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012836:	69f8      	ldr	r0, [r7, #28]
 8012838:	f7fa fb2a 	bl	800ce90 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d024      	beq.n	801288c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012842:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012846:	4916      	ldr	r1, [pc, #88]	; (80128a0 <etharp_query+0x278>)
 8012848:	4613      	mov	r3, r2
 801284a:	005b      	lsls	r3, r3, #1
 801284c:	4413      	add	r3, r2
 801284e:	00db      	lsls	r3, r3, #3
 8012850:	440b      	add	r3, r1
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d00b      	beq.n	8012870 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8012858:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801285c:	4910      	ldr	r1, [pc, #64]	; (80128a0 <etharp_query+0x278>)
 801285e:	4613      	mov	r3, r2
 8012860:	005b      	lsls	r3, r3, #1
 8012862:	4413      	add	r3, r2
 8012864:	00db      	lsls	r3, r3, #3
 8012866:	440b      	add	r3, r1
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4618      	mov	r0, r3
 801286c:	f7fa fa5e 	bl	800cd2c <pbuf_free>
      }
      arp_table[i].q = p;
 8012870:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012874:	490a      	ldr	r1, [pc, #40]	; (80128a0 <etharp_query+0x278>)
 8012876:	4613      	mov	r3, r2
 8012878:	005b      	lsls	r3, r3, #1
 801287a:	4413      	add	r3, r2
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	440b      	add	r3, r1
 8012880:	69fa      	ldr	r2, [r7, #28]
 8012882:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012884:	2300      	movs	r3, #0
 8012886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801288a:	e002      	b.n	8012892 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801288c:	23ff      	movs	r3, #255	; 0xff
 801288e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012892:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012896:	4618      	mov	r0, r3
 8012898:	3728      	adds	r7, #40	; 0x28
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	2000423c 	.word	0x2000423c
 80128a4:	0801721c 	.word	0x0801721c
 80128a8:	080173c8 	.word	0x080173c8
 80128ac:	08017294 	.word	0x08017294
 80128b0:	080173bc 	.word	0x080173bc
 80128b4:	2000432c 	.word	0x2000432c
 80128b8:	080173f0 	.word	0x080173f0

080128bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b08a      	sub	sp, #40	; 0x28
 80128c0:	af02      	add	r7, sp, #8
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
 80128c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80128ca:	2300      	movs	r3, #0
 80128cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d106      	bne.n	80128e2 <etharp_raw+0x26>
 80128d4:	4b3a      	ldr	r3, [pc, #232]	; (80129c0 <etharp_raw+0x104>)
 80128d6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80128da:	493a      	ldr	r1, [pc, #232]	; (80129c4 <etharp_raw+0x108>)
 80128dc:	483a      	ldr	r0, [pc, #232]	; (80129c8 <etharp_raw+0x10c>)
 80128de:	f002 fa9b 	bl	8014e18 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80128e2:	2200      	movs	r2, #0
 80128e4:	211c      	movs	r1, #28
 80128e6:	2002      	movs	r0, #2
 80128e8:	f7f9 feae 	bl	800c648 <pbuf_alloc>
 80128ec:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d102      	bne.n	80128fa <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80128f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128f8:	e05d      	b.n	80129b6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	895b      	ldrh	r3, [r3, #10]
 80128fe:	2b1b      	cmp	r3, #27
 8012900:	d806      	bhi.n	8012910 <etharp_raw+0x54>
 8012902:	4b2f      	ldr	r3, [pc, #188]	; (80129c0 <etharp_raw+0x104>)
 8012904:	f240 4264 	movw	r2, #1124	; 0x464
 8012908:	4930      	ldr	r1, [pc, #192]	; (80129cc <etharp_raw+0x110>)
 801290a:	482f      	ldr	r0, [pc, #188]	; (80129c8 <etharp_raw+0x10c>)
 801290c:	f002 fa84 	bl	8014e18 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012910:	69bb      	ldr	r3, [r7, #24]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012916:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012918:	4618      	mov	r0, r3
 801291a:	f7f9 f877 	bl	800ba0c <lwip_htons>
 801291e:	4603      	mov	r3, r0
 8012920:	461a      	mov	r2, r3
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801292c:	2b06      	cmp	r3, #6
 801292e:	d006      	beq.n	801293e <etharp_raw+0x82>
 8012930:	4b23      	ldr	r3, [pc, #140]	; (80129c0 <etharp_raw+0x104>)
 8012932:	f240 426b 	movw	r2, #1131	; 0x46b
 8012936:	4926      	ldr	r1, [pc, #152]	; (80129d0 <etharp_raw+0x114>)
 8012938:	4823      	ldr	r0, [pc, #140]	; (80129c8 <etharp_raw+0x10c>)
 801293a:	f002 fa6d 	bl	8014e18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	3308      	adds	r3, #8
 8012942:	2206      	movs	r2, #6
 8012944:	6839      	ldr	r1, [r7, #0]
 8012946:	4618      	mov	r0, r3
 8012948:	f002 f9ab 	bl	8014ca2 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	3312      	adds	r3, #18
 8012950:	2206      	movs	r2, #6
 8012952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012954:	4618      	mov	r0, r3
 8012956:	f002 f9a4 	bl	8014ca2 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	330e      	adds	r3, #14
 801295e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012960:	6812      	ldr	r2, [r2, #0]
 8012962:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	3318      	adds	r3, #24
 8012968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801296a:	6812      	ldr	r2, [r2, #0]
 801296c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	2200      	movs	r2, #0
 8012972:	701a      	strb	r2, [r3, #0]
 8012974:	2200      	movs	r2, #0
 8012976:	f042 0201 	orr.w	r2, r2, #1
 801297a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	2200      	movs	r2, #0
 8012980:	f042 0208 	orr.w	r2, r2, #8
 8012984:	709a      	strb	r2, [r3, #2]
 8012986:	2200      	movs	r2, #0
 8012988:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	2206      	movs	r2, #6
 801298e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	2204      	movs	r2, #4
 8012994:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012996:	f640 0306 	movw	r3, #2054	; 0x806
 801299a:	9300      	str	r3, [sp, #0]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	68ba      	ldr	r2, [r7, #8]
 80129a0:	69b9      	ldr	r1, [r7, #24]
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f001 faec 	bl	8013f80 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80129a8:	69b8      	ldr	r0, [r7, #24]
 80129aa:	f7fa f9bf 	bl	800cd2c <pbuf_free>
  p = NULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80129b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3720      	adds	r7, #32
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	0801721c 	.word	0x0801721c
 80129c4:	0801736c 	.word	0x0801736c
 80129c8:	08017294 	.word	0x08017294
 80129cc:	0801740c 	.word	0x0801740c
 80129d0:	08017440 	.word	0x08017440

080129d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b088      	sub	sp, #32
 80129d8:	af04      	add	r7, sp, #16
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80129f0:	2201      	movs	r2, #1
 80129f2:	9203      	str	r2, [sp, #12]
 80129f4:	68ba      	ldr	r2, [r7, #8]
 80129f6:	9202      	str	r2, [sp, #8]
 80129f8:	4a06      	ldr	r2, [pc, #24]	; (8012a14 <etharp_request_dst+0x40>)
 80129fa:	9201      	str	r2, [sp, #4]
 80129fc:	9300      	str	r3, [sp, #0]
 80129fe:	4603      	mov	r3, r0
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f7ff ff5a 	bl	80128bc <etharp_raw>
 8012a08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	08017a04 	.word	0x08017a04

08012a18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012a22:	4a05      	ldr	r2, [pc, #20]	; (8012a38 <etharp_request+0x20>)
 8012a24:	6839      	ldr	r1, [r7, #0]
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f7ff ffd4 	bl	80129d4 <etharp_request_dst>
 8012a2c:	4603      	mov	r3, r0
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3708      	adds	r7, #8
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	080179fc 	.word	0x080179fc

08012a3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b08e      	sub	sp, #56	; 0x38
 8012a40:	af04      	add	r7, sp, #16
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012a46:	4b7a      	ldr	r3, [pc, #488]	; (8012c30 <icmp_input+0x1f4>)
 8012a48:	689b      	ldr	r3, [r3, #8]
 8012a4a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	f003 030f 	and.w	r3, r3, #15
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012a5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a5e:	2b13      	cmp	r3, #19
 8012a60:	f240 80d1 	bls.w	8012c06 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	895b      	ldrh	r3, [r3, #10]
 8012a68:	2b03      	cmp	r3, #3
 8012a6a:	f240 80ce 	bls.w	8012c0a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012a78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f000 80bb 	beq.w	8012bf8 <icmp_input+0x1bc>
 8012a82:	2b08      	cmp	r3, #8
 8012a84:	f040 80bb 	bne.w	8012bfe <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8012a88:	4b6a      	ldr	r3, [pc, #424]	; (8012c34 <icmp_input+0x1f8>)
 8012a8a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012a8c:	4b68      	ldr	r3, [pc, #416]	; (8012c30 <icmp_input+0x1f4>)
 8012a8e:	695b      	ldr	r3, [r3, #20]
 8012a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a94:	2be0      	cmp	r3, #224	; 0xe0
 8012a96:	f000 80bf 	beq.w	8012c18 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012a9a:	4b65      	ldr	r3, [pc, #404]	; (8012c30 <icmp_input+0x1f4>)
 8012a9c:	695a      	ldr	r2, [r3, #20]
 8012a9e:	4b64      	ldr	r3, [pc, #400]	; (8012c30 <icmp_input+0x1f4>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	4610      	mov	r0, r2
 8012aa6:	f000 fbc9 	bl	801323c <ip4_addr_isbroadcast_u32>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f040 80b5 	bne.w	8012c1c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	891b      	ldrh	r3, [r3, #8]
 8012ab6:	2b07      	cmp	r3, #7
 8012ab8:	f240 80a9 	bls.w	8012c0e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8012abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012abe:	330e      	adds	r3, #14
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	b21b      	sxth	r3, r3
 8012ac4:	4619      	mov	r1, r3
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7fa f90c 	bl	800cce4 <pbuf_header>
 8012acc:	4603      	mov	r3, r0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d046      	beq.n	8012b60 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	891a      	ldrh	r2, [r3, #8]
 8012ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ad8:	4413      	add	r3, r2
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	2200      	movs	r2, #0
 8012ade:	4619      	mov	r1, r3
 8012ae0:	2002      	movs	r0, #2
 8012ae2:	f7f9 fdb1 	bl	800c648 <pbuf_alloc>
 8012ae6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	f000 8098 	beq.w	8012c20 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012af0:	69bb      	ldr	r3, [r7, #24]
 8012af2:	895b      	ldrh	r3, [r3, #10]
 8012af4:	461a      	mov	r2, r3
 8012af6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012af8:	3308      	adds	r3, #8
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d203      	bcs.n	8012b06 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8012afe:	69b8      	ldr	r0, [r7, #24]
 8012b00:	f7fa f914 	bl	800cd2c <pbuf_free>
        goto icmperr;
 8012b04:	e08d      	b.n	8012c22 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8012b06:	69bb      	ldr	r3, [r7, #24]
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f002 f8c7 	bl	8014ca2 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8012b14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b16:	425b      	negs	r3, r3
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	b21b      	sxth	r3, r3
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	69b8      	ldr	r0, [r7, #24]
 8012b20:	f7fa f8e0 	bl	800cce4 <pbuf_header>
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d009      	beq.n	8012b3e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012b2a:	4b43      	ldr	r3, [pc, #268]	; (8012c38 <icmp_input+0x1fc>)
 8012b2c:	22af      	movs	r2, #175	; 0xaf
 8012b2e:	4943      	ldr	r1, [pc, #268]	; (8012c3c <icmp_input+0x200>)
 8012b30:	4843      	ldr	r0, [pc, #268]	; (8012c40 <icmp_input+0x204>)
 8012b32:	f002 f971 	bl	8014e18 <iprintf>
        pbuf_free(r);
 8012b36:	69b8      	ldr	r0, [r7, #24]
 8012b38:	f7fa f8f8 	bl	800cd2c <pbuf_free>
        goto icmperr;
 8012b3c:	e071      	b.n	8012c22 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8012b3e:	6879      	ldr	r1, [r7, #4]
 8012b40:	69b8      	ldr	r0, [r7, #24]
 8012b42:	f7fa fa23 	bl	800cf8c <pbuf_copy>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d003      	beq.n	8012b54 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8012b4c:	69b8      	ldr	r0, [r7, #24]
 8012b4e:	f7fa f8ed 	bl	800cd2c <pbuf_free>
        goto icmperr;
 8012b52:	e066      	b.n	8012c22 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7fa f8e9 	bl	800cd2c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	607b      	str	r3, [r7, #4]
 8012b5e:	e015      	b.n	8012b8c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8012b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b62:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8012b66:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8012b6a:	33f2      	adds	r3, #242	; 0xf2
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	b21b      	sxth	r3, r3
 8012b70:	4619      	mov	r1, r3
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f7fa f8b6 	bl	800cce4 <pbuf_header>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d006      	beq.n	8012b8c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012b7e:	4b2e      	ldr	r3, [pc, #184]	; (8012c38 <icmp_input+0x1fc>)
 8012b80:	22c0      	movs	r2, #192	; 0xc0
 8012b82:	4930      	ldr	r1, [pc, #192]	; (8012c44 <icmp_input+0x208>)
 8012b84:	482e      	ldr	r0, [pc, #184]	; (8012c40 <icmp_input+0x204>)
 8012b86:	f002 f947 	bl	8014e18 <iprintf>
        goto icmperr;
 8012b8a:	e04a      	b.n	8012c22 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8012b92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b96:	4619      	mov	r1, r3
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7fa f8a3 	bl	800cce4 <pbuf_header>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d12b      	bne.n	8012bfc <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012bb2:	4b1f      	ldr	r3, [pc, #124]	; (8012c30 <icmp_input+0x1f4>)
 8012bb4:	691a      	ldr	r2, [r3, #16]
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	709a      	strb	r2, [r3, #2]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	22ff      	movs	r2, #255	; 0xff
 8012bce:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	729a      	strb	r2, [r3, #10]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	9302      	str	r3, [sp, #8]
 8012bde:	2301      	movs	r3, #1
 8012be0:	9301      	str	r3, [sp, #4]
 8012be2:	2300      	movs	r3, #0
 8012be4:	9300      	str	r3, [sp, #0]
 8012be6:	23ff      	movs	r3, #255	; 0xff
 8012be8:	2200      	movs	r2, #0
 8012bea:	69f9      	ldr	r1, [r7, #28]
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 fa53 	bl	8013098 <ip4_output_if>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8012bf6:	e001      	b.n	8012bfc <icmp_input+0x1c0>
    break;
 8012bf8:	bf00      	nop
 8012bfa:	e000      	b.n	8012bfe <icmp_input+0x1c2>
    break;
 8012bfc:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f7fa f894 	bl	800cd2c <pbuf_free>
  return;
 8012c04:	e011      	b.n	8012c2a <icmp_input+0x1ee>
    goto lenerr;
 8012c06:	bf00      	nop
 8012c08:	e002      	b.n	8012c10 <icmp_input+0x1d4>
    goto lenerr;
 8012c0a:	bf00      	nop
 8012c0c:	e000      	b.n	8012c10 <icmp_input+0x1d4>
      goto lenerr;
 8012c0e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f7fa f88b 	bl	800cd2c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012c16:	e008      	b.n	8012c2a <icmp_input+0x1ee>
      goto icmperr;
 8012c18:	bf00      	nop
 8012c1a:	e002      	b.n	8012c22 <icmp_input+0x1e6>
      goto icmperr;
 8012c1c:	bf00      	nop
 8012c1e:	e000      	b.n	8012c22 <icmp_input+0x1e6>
        goto icmperr;
 8012c20:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7fa f882 	bl	800cd2c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012c28:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012c2a:	3728      	adds	r7, #40	; 0x28
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	200074c8 	.word	0x200074c8
 8012c34:	200074dc 	.word	0x200074dc
 8012c38:	08017484 	.word	0x08017484
 8012c3c:	080174bc 	.word	0x080174bc
 8012c40:	080174f4 	.word	0x080174f4
 8012c44:	0801751c 	.word	0x0801751c

08012c48 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	460b      	mov	r3, r1
 8012c52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012c54:	78fb      	ldrb	r3, [r7, #3]
 8012c56:	461a      	mov	r2, r3
 8012c58:	2103      	movs	r1, #3
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f000 f814 	bl	8012c88 <icmp_send_response>
}
 8012c60:	bf00      	nop
 8012c62:	3708      	adds	r7, #8
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	460b      	mov	r3, r1
 8012c72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012c74:	78fb      	ldrb	r3, [r7, #3]
 8012c76:	461a      	mov	r2, r3
 8012c78:	210b      	movs	r1, #11
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f000 f804 	bl	8012c88 <icmp_send_response>
}
 8012c80:	bf00      	nop
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b08c      	sub	sp, #48	; 0x30
 8012c8c:	af04      	add	r7, sp, #16
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	460b      	mov	r3, r1
 8012c92:	70fb      	strb	r3, [r7, #3]
 8012c94:	4613      	mov	r3, r2
 8012c96:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012c98:	2200      	movs	r2, #0
 8012c9a:	2124      	movs	r1, #36	; 0x24
 8012c9c:	2001      	movs	r0, #1
 8012c9e:	f7f9 fcd3 	bl	800c648 <pbuf_alloc>
 8012ca2:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d04c      	beq.n	8012d44 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	895b      	ldrh	r3, [r3, #10]
 8012cae:	2b23      	cmp	r3, #35	; 0x23
 8012cb0:	d806      	bhi.n	8012cc0 <icmp_send_response+0x38>
 8012cb2:	4b26      	ldr	r3, [pc, #152]	; (8012d4c <icmp_send_response+0xc4>)
 8012cb4:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8012cb8:	4925      	ldr	r1, [pc, #148]	; (8012d50 <icmp_send_response+0xc8>)
 8012cba:	4826      	ldr	r0, [pc, #152]	; (8012d54 <icmp_send_response+0xcc>)
 8012cbc:	f002 f8ac 	bl	8014e18 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	78fa      	ldrb	r2, [r7, #3]
 8012cd0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	78ba      	ldrb	r2, [r7, #2]
 8012cd6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	711a      	strb	r2, [r3, #4]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	719a      	strb	r2, [r3, #6]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	f103 0008 	add.w	r0, r3, #8
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	221c      	movs	r2, #28
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	f001 ffd1 	bl	8014ca2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012d06:	f107 030c 	add.w	r3, r7, #12
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f000 f824 	bl	8012d58 <ip4_route>
 8012d10:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012d12:	693b      	ldr	r3, [r7, #16]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d011      	beq.n	8012d3c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	709a      	strb	r2, [r3, #2]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012d22:	f107 020c 	add.w	r2, r7, #12
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	9302      	str	r3, [sp, #8]
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	9301      	str	r3, [sp, #4]
 8012d2e:	2300      	movs	r3, #0
 8012d30:	9300      	str	r3, [sp, #0]
 8012d32:	23ff      	movs	r3, #255	; 0xff
 8012d34:	2100      	movs	r1, #0
 8012d36:	69f8      	ldr	r0, [r7, #28]
 8012d38:	f000 f9ae 	bl	8013098 <ip4_output_if>
  }
  pbuf_free(q);
 8012d3c:	69f8      	ldr	r0, [r7, #28]
 8012d3e:	f7f9 fff5 	bl	800cd2c <pbuf_free>
 8012d42:	e000      	b.n	8012d46 <icmp_send_response+0xbe>
    return;
 8012d44:	bf00      	nop
}
 8012d46:	3720      	adds	r7, #32
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}
 8012d4c:	08017484 	.word	0x08017484
 8012d50:	08017550 	.word	0x08017550
 8012d54:	080174f4 	.word	0x080174f4

08012d58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b085      	sub	sp, #20
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8012d60:	4b30      	ldr	r3, [pc, #192]	; (8012e24 <ip4_route+0xcc>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	60fb      	str	r3, [r7, #12]
 8012d66:	e036      	b.n	8012dd6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012d6e:	f003 0301 	and.w	r3, r3, #1
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d02b      	beq.n	8012dd0 <ip4_route+0x78>
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012d7e:	089b      	lsrs	r3, r3, #2
 8012d80:	f003 0301 	and.w	r3, r3, #1
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d022      	beq.n	8012dd0 <ip4_route+0x78>
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	3304      	adds	r3, #4
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d01d      	beq.n	8012dd0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681a      	ldr	r2, [r3, #0]
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	3304      	adds	r3, #4
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	405a      	eors	r2, r3
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	3308      	adds	r3, #8
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	4013      	ands	r3, r2
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d101      	bne.n	8012db0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	e033      	b.n	8012e18 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012db6:	f003 0302 	and.w	r3, r3, #2
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d108      	bne.n	8012dd0 <ip4_route+0x78>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	330c      	adds	r3, #12
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d101      	bne.n	8012dd0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	e023      	b.n	8012e18 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	60fb      	str	r3, [r7, #12]
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d1c5      	bne.n	8012d68 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012ddc:	4b12      	ldr	r3, [pc, #72]	; (8012e28 <ip4_route+0xd0>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d015      	beq.n	8012e10 <ip4_route+0xb8>
 8012de4:	4b10      	ldr	r3, [pc, #64]	; (8012e28 <ip4_route+0xd0>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012dec:	f003 0301 	and.w	r3, r3, #1
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d00d      	beq.n	8012e10 <ip4_route+0xb8>
 8012df4:	4b0c      	ldr	r3, [pc, #48]	; (8012e28 <ip4_route+0xd0>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012dfc:	f003 0304 	and.w	r3, r3, #4
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d005      	beq.n	8012e10 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8012e04:	4b08      	ldr	r3, [pc, #32]	; (8012e28 <ip4_route+0xd0>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	3304      	adds	r3, #4
 8012e0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d101      	bne.n	8012e14 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012e10:	2300      	movs	r3, #0
 8012e12:	e001      	b.n	8012e18 <ip4_route+0xc0>
  }

  return netif_default;
 8012e14:	4b04      	ldr	r3, [pc, #16]	; (8012e28 <ip4_route+0xd0>)
 8012e16:	681b      	ldr	r3, [r3, #0]
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3714      	adds	r7, #20
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr
 8012e24:	2000ab44 	.word	0x2000ab44
 8012e28:	2000ab48 	.word	0x2000ab48

08012e2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b086      	sub	sp, #24
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	091b      	lsrs	r3, r3, #4
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	2b04      	cmp	r3, #4
 8012e46:	d004      	beq.n	8012e52 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f7f9 ff6f 	bl	800cd2c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	e11a      	b.n	8013088 <ip4_input+0x25c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	f003 030f 	and.w	r3, r3, #15
 8012e5c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8012e5e:	897b      	ldrh	r3, [r7, #10]
 8012e60:	009b      	lsls	r3, r3, #2
 8012e62:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	885b      	ldrh	r3, [r3, #2]
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7f8 fdce 	bl	800ba0c <lwip_htons>
 8012e70:	4603      	mov	r3, r0
 8012e72:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	891b      	ldrh	r3, [r3, #8]
 8012e78:	893a      	ldrh	r2, [r7, #8]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d204      	bcs.n	8012e88 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8012e7e:	893b      	ldrh	r3, [r7, #8]
 8012e80:	4619      	mov	r1, r3
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f7f9 fdde 	bl	800ca44 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	895b      	ldrh	r3, [r3, #10]
 8012e8c:	897a      	ldrh	r2, [r7, #10]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d807      	bhi.n	8012ea2 <ip4_input+0x76>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	891b      	ldrh	r3, [r3, #8]
 8012e96:	893a      	ldrh	r2, [r7, #8]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d802      	bhi.n	8012ea2 <ip4_input+0x76>
 8012e9c:	897b      	ldrh	r3, [r7, #10]
 8012e9e:	2b13      	cmp	r3, #19
 8012ea0:	d804      	bhi.n	8012eac <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7f9 ff42 	bl	800cd2c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	e0ed      	b.n	8013088 <ip4_input+0x25c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	691b      	ldr	r3, [r3, #16]
 8012eb0:	4a77      	ldr	r2, [pc, #476]	; (8013090 <ip4_input+0x264>)
 8012eb2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	68db      	ldr	r3, [r3, #12]
 8012eb8:	4a75      	ldr	r2, [pc, #468]	; (8013090 <ip4_input+0x264>)
 8012eba:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012ebc:	4b74      	ldr	r3, [pc, #464]	; (8013090 <ip4_input+0x264>)
 8012ebe:	695b      	ldr	r3, [r3, #20]
 8012ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ec4:	2be0      	cmp	r3, #224	; 0xe0
 8012ec6:	d112      	bne.n	8012eee <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012ece:	f003 0301 	and.w	r3, r3, #1
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d007      	beq.n	8012ee8 <ip4_input+0xbc>
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	3304      	adds	r3, #4
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d002      	beq.n	8012ee8 <ip4_input+0xbc>
      netif = inp;
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	613b      	str	r3, [r7, #16]
 8012ee6:	e041      	b.n	8012f6c <ip4_input+0x140>
    } else {
      netif = NULL;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	613b      	str	r3, [r7, #16]
 8012eec:	e03e      	b.n	8012f6c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8012eee:	2301      	movs	r3, #1
 8012ef0:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012efc:	f003 0301 	and.w	r3, r3, #1
 8012f00:	b2db      	uxtb	r3, r3
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d014      	beq.n	8012f30 <ip4_input+0x104>
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	3304      	adds	r3, #4
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d00f      	beq.n	8012f30 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012f10:	4b5f      	ldr	r3, [pc, #380]	; (8013090 <ip4_input+0x264>)
 8012f12:	695a      	ldr	r2, [r3, #20]
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	3304      	adds	r3, #4
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d026      	beq.n	8012f6c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012f1e:	4b5c      	ldr	r3, [pc, #368]	; (8013090 <ip4_input+0x264>)
 8012f20:	695b      	ldr	r3, [r3, #20]
 8012f22:	6939      	ldr	r1, [r7, #16]
 8012f24:	4618      	mov	r0, r3
 8012f26:	f000 f989 	bl	801323c <ip4_addr_isbroadcast_u32>
 8012f2a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d11d      	bne.n	8012f6c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d00d      	beq.n	8012f52 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8012f36:	4b56      	ldr	r3, [pc, #344]	; (8013090 <ip4_input+0x264>)
 8012f38:	695b      	ldr	r3, [r3, #20]
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8012f3e:	d102      	bne.n	8012f46 <ip4_input+0x11a>
          netif = NULL;
 8012f40:	2300      	movs	r3, #0
 8012f42:	613b      	str	r3, [r7, #16]
          break;
 8012f44:	e012      	b.n	8012f6c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8012f46:	2300      	movs	r3, #0
 8012f48:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8012f4a:	4b52      	ldr	r3, [pc, #328]	; (8013094 <ip4_input+0x268>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	613b      	str	r3, [r7, #16]
 8012f50:	e002      	b.n	8012f58 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8012f58:	693a      	ldr	r2, [r7, #16]
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d102      	bne.n	8012f66 <ip4_input+0x13a>
        netif = netif->next;
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d1c4      	bne.n	8012ef6 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012f6c:	4b48      	ldr	r3, [pc, #288]	; (8013090 <ip4_input+0x264>)
 8012f6e:	691b      	ldr	r3, [r3, #16]
 8012f70:	6839      	ldr	r1, [r7, #0]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f000 f962 	bl	801323c <ip4_addr_isbroadcast_u32>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d105      	bne.n	8012f8a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012f7e:	4b44      	ldr	r3, [pc, #272]	; (8013090 <ip4_input+0x264>)
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012f86:	2be0      	cmp	r3, #224	; 0xe0
 8012f88:	d104      	bne.n	8012f94 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7f9 fece 	bl	800cd2c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012f90:	2300      	movs	r3, #0
 8012f92:	e079      	b.n	8013088 <ip4_input+0x25c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d104      	bne.n	8012fa4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f7f9 fec6 	bl	800cd2c <pbuf_free>
    return ERR_OK;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	e071      	b.n	8013088 <ip4_input+0x25c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	88db      	ldrh	r3, [r3, #6]
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	461a      	mov	r2, r3
 8012fac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012fb0:	4013      	ands	r3, r2
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d00b      	beq.n	8012fce <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 fc86 	bl	80138c8 <ip4_reass>
 8012fbc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d101      	bne.n	8012fc8 <ip4_input+0x19c>
      return ERR_OK;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	e05f      	b.n	8013088 <ip4_input+0x25c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012fce:	4a30      	ldr	r2, [pc, #192]	; (8013090 <ip4_input+0x264>)
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012fd4:	4a2e      	ldr	r2, [pc, #184]	; (8013090 <ip4_input+0x264>)
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012fda:	4a2d      	ldr	r2, [pc, #180]	; (8013090 <ip4_input+0x264>)
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	f003 030f 	and.w	r3, r3, #15
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	009b      	lsls	r3, r3, #2
 8012fee:	b29a      	uxth	r2, r3
 8012ff0:	4b27      	ldr	r3, [pc, #156]	; (8013090 <ip4_input+0x264>)
 8012ff2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8012ff4:	897b      	ldrh	r3, [r7, #10]
 8012ff6:	425b      	negs	r3, r3
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	b21b      	sxth	r3, r3
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7f9 fe70 	bl	800cce4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	7a5b      	ldrb	r3, [r3, #9]
 8013008:	2b01      	cmp	r3, #1
 801300a:	d006      	beq.n	801301a <ip4_input+0x1ee>
 801300c:	2b06      	cmp	r3, #6
 801300e:	d109      	bne.n	8013024 <ip4_input+0x1f8>
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8013010:	6839      	ldr	r1, [r7, #0]
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f7fb face 	bl	800e5b4 <tcp_input>
      break;
 8013018:	e023      	b.n	8013062 <ip4_input+0x236>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801301a:	6839      	ldr	r1, [r7, #0]
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f7ff fd0d 	bl	8012a3c <icmp_input>
      break;
 8013022:	e01e      	b.n	8013062 <ip4_input+0x236>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013024:	4b1a      	ldr	r3, [pc, #104]	; (8013090 <ip4_input+0x264>)
 8013026:	695b      	ldr	r3, [r3, #20]
 8013028:	6939      	ldr	r1, [r7, #16]
 801302a:	4618      	mov	r0, r3
 801302c:	f000 f906 	bl	801323c <ip4_addr_isbroadcast_u32>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d112      	bne.n	801305c <ip4_input+0x230>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013036:	4b16      	ldr	r3, [pc, #88]	; (8013090 <ip4_input+0x264>)
 8013038:	695b      	ldr	r3, [r3, #20]
 801303a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801303e:	2be0      	cmp	r3, #224	; 0xe0
 8013040:	d00c      	beq.n	801305c <ip4_input+0x230>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8013042:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013046:	4619      	mov	r1, r3
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7f9 fe5d 	bl	800cd08 <pbuf_header_force>
        p->payload = iphdr;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	697a      	ldr	r2, [r7, #20]
 8013052:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013054:	2102      	movs	r1, #2
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f7ff fdf6 	bl	8012c48 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7f9 fe65 	bl	800cd2c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013062:	4b0b      	ldr	r3, [pc, #44]	; (8013090 <ip4_input+0x264>)
 8013064:	2200      	movs	r2, #0
 8013066:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013068:	4b09      	ldr	r3, [pc, #36]	; (8013090 <ip4_input+0x264>)
 801306a:	2200      	movs	r2, #0
 801306c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801306e:	4b08      	ldr	r3, [pc, #32]	; (8013090 <ip4_input+0x264>)
 8013070:	2200      	movs	r2, #0
 8013072:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013074:	4b06      	ldr	r3, [pc, #24]	; (8013090 <ip4_input+0x264>)
 8013076:	2200      	movs	r2, #0
 8013078:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801307a:	4b05      	ldr	r3, [pc, #20]	; (8013090 <ip4_input+0x264>)
 801307c:	2200      	movs	r2, #0
 801307e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013080:	4b03      	ldr	r3, [pc, #12]	; (8013090 <ip4_input+0x264>)
 8013082:	2200      	movs	r2, #0
 8013084:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013086:	2300      	movs	r3, #0
}
 8013088:	4618      	mov	r0, r3
 801308a:	3718      	adds	r7, #24
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}
 8013090:	200074c8 	.word	0x200074c8
 8013094:	2000ab44 	.word	0x2000ab44

08013098 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b08a      	sub	sp, #40	; 0x28
 801309c:	af04      	add	r7, sp, #16
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
 80130a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d009      	beq.n	80130c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d003      	beq.n	80130be <ip4_output_if+0x26>
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d102      	bne.n	80130c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80130be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c0:	3304      	adds	r3, #4
 80130c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80130c4:	78fa      	ldrb	r2, [r7, #3]
 80130c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c8:	9302      	str	r3, [sp, #8]
 80130ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80130ce:	9301      	str	r3, [sp, #4]
 80130d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80130d4:	9300      	str	r3, [sp, #0]
 80130d6:	4613      	mov	r3, r2
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	6979      	ldr	r1, [r7, #20]
 80130dc:	68f8      	ldr	r0, [r7, #12]
 80130de:	f000 f805 	bl	80130ec <ip4_output_if_src>
 80130e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3718      	adds	r7, #24
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b088      	sub	sp, #32
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
 80130f8:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	89db      	ldrh	r3, [r3, #14]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d006      	beq.n	8013110 <ip4_output_if_src+0x24>
 8013102:	4b48      	ldr	r3, [pc, #288]	; (8013224 <ip4_output_if_src+0x138>)
 8013104:	f240 3233 	movw	r2, #819	; 0x333
 8013108:	4947      	ldr	r1, [pc, #284]	; (8013228 <ip4_output_if_src+0x13c>)
 801310a:	4848      	ldr	r0, [pc, #288]	; (801322c <ip4_output_if_src+0x140>)
 801310c:	f001 fe84 	bl	8014e18 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d060      	beq.n	80131d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013116:	2314      	movs	r3, #20
 8013118:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801311a:	2114      	movs	r1, #20
 801311c:	68f8      	ldr	r0, [r7, #12]
 801311e:	f7f9 fde1 	bl	800cce4 <pbuf_header>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d002      	beq.n	801312e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013128:	f06f 0301 	mvn.w	r3, #1
 801312c:	e075      	b.n	801321a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	895b      	ldrh	r3, [r3, #10]
 8013138:	2b13      	cmp	r3, #19
 801313a:	d806      	bhi.n	801314a <ip4_output_if_src+0x5e>
 801313c:	4b39      	ldr	r3, [pc, #228]	; (8013224 <ip4_output_if_src+0x138>)
 801313e:	f240 3261 	movw	r2, #865	; 0x361
 8013142:	493b      	ldr	r1, [pc, #236]	; (8013230 <ip4_output_if_src+0x144>)
 8013144:	4839      	ldr	r0, [pc, #228]	; (801322c <ip4_output_if_src+0x140>)
 8013146:	f001 fe67 	bl	8014e18 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	78fa      	ldrb	r2, [r7, #3]
 801314e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013156:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013160:	8b7b      	ldrh	r3, [r7, #26]
 8013162:	089b      	lsrs	r3, r3, #2
 8013164:	b29b      	uxth	r3, r3
 8013166:	b2db      	uxtb	r3, r3
 8013168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801316c:	b2da      	uxtb	r2, r3
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013172:	69fb      	ldr	r3, [r7, #28]
 8013174:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013178:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	891b      	ldrh	r3, [r3, #8]
 801317e:	4618      	mov	r0, r3
 8013180:	f7f8 fc44 	bl	800ba0c <lwip_htons>
 8013184:	4603      	mov	r3, r0
 8013186:	461a      	mov	r2, r3
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	2200      	movs	r2, #0
 8013190:	719a      	strb	r2, [r3, #6]
 8013192:	2200      	movs	r2, #0
 8013194:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013196:	4b27      	ldr	r3, [pc, #156]	; (8013234 <ip4_output_if_src+0x148>)
 8013198:	881b      	ldrh	r3, [r3, #0]
 801319a:	4618      	mov	r0, r3
 801319c:	f7f8 fc36 	bl	800ba0c <lwip_htons>
 80131a0:	4603      	mov	r3, r0
 80131a2:	461a      	mov	r2, r3
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80131a8:	4b22      	ldr	r3, [pc, #136]	; (8013234 <ip4_output_if_src+0x148>)
 80131aa:	881b      	ldrh	r3, [r3, #0]
 80131ac:	3301      	adds	r3, #1
 80131ae:	b29a      	uxth	r2, r3
 80131b0:	4b20      	ldr	r3, [pc, #128]	; (8013234 <ip4_output_if_src+0x148>)
 80131b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d104      	bne.n	80131c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80131ba:	4b1f      	ldr	r3, [pc, #124]	; (8013238 <ip4_output_if_src+0x14c>)
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	60da      	str	r2, [r3, #12]
 80131c2:	e003      	b.n	80131cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	2200      	movs	r2, #0
 80131d0:	729a      	strb	r2, [r3, #10]
 80131d2:	2200      	movs	r2, #0
 80131d4:	72da      	strb	r2, [r3, #11]
 80131d6:	e008      	b.n	80131ea <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	691b      	ldr	r3, [r3, #16]
 80131e2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80131e4:	f107 0314 	add.w	r3, r7, #20
 80131e8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80131ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d00c      	beq.n	801320c <ip4_output_if_src+0x120>
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	891a      	ldrh	r2, [r3, #8]
 80131f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80131fa:	429a      	cmp	r2, r3
 80131fc:	d906      	bls.n	801320c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013202:	68f8      	ldr	r0, [r7, #12]
 8013204:	f000 fd0a 	bl	8013c1c <ip4_frag>
 8013208:	4603      	mov	r3, r0
 801320a:	e006      	b.n	801321a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320e:	695b      	ldr	r3, [r3, #20]
 8013210:	687a      	ldr	r2, [r7, #4]
 8013212:	68f9      	ldr	r1, [r7, #12]
 8013214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013216:	4798      	blx	r3
 8013218:	4603      	mov	r3, r0
}
 801321a:	4618      	mov	r0, r3
 801321c:	3720      	adds	r7, #32
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}
 8013222:	bf00      	nop
 8013224:	0801757c 	.word	0x0801757c
 8013228:	080175b0 	.word	0x080175b0
 801322c:	080175bc 	.word	0x080175bc
 8013230:	080175e4 	.word	0x080175e4
 8013234:	2000432e 	.word	0x2000432e
 8013238:	080179f8 	.word	0x080179f8

0801323c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801323c:	b480      	push	{r7}
 801323e:	b085      	sub	sp, #20
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013250:	d002      	beq.n	8013258 <ip4_addr_isbroadcast_u32+0x1c>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d101      	bne.n	801325c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013258:	2301      	movs	r3, #1
 801325a:	e02a      	b.n	80132b2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013262:	f003 0302 	and.w	r3, r3, #2
 8013266:	2b00      	cmp	r3, #0
 8013268:	d101      	bne.n	801326e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801326a:	2300      	movs	r3, #0
 801326c:	e021      	b.n	80132b2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	3304      	adds	r3, #4
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	429a      	cmp	r2, r3
 8013278:	d101      	bne.n	801327e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801327a:	2300      	movs	r3, #0
 801327c:	e019      	b.n	80132b2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	3304      	adds	r3, #4
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	405a      	eors	r2, r3
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	3308      	adds	r3, #8
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4013      	ands	r3, r2
 8013290:	2b00      	cmp	r3, #0
 8013292:	d10d      	bne.n	80132b0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	3308      	adds	r3, #8
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	43da      	mvns	r2, r3
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	3308      	adds	r3, #8
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d101      	bne.n	80132b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80132ac:	2301      	movs	r3, #1
 80132ae:	e000      	b.n	80132b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80132b0:	2300      	movs	r3, #0
  }
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3714      	adds	r7, #20
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
	...

080132c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80132c6:	2300      	movs	r3, #0
 80132c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80132ca:	4b12      	ldr	r3, [pc, #72]	; (8013314 <ip_reass_tmr+0x54>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80132d0:	e018      	b.n	8013304 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	7fdb      	ldrb	r3, [r3, #31]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d00b      	beq.n	80132f2 <ip_reass_tmr+0x32>
      r->timer--;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	7fdb      	ldrb	r3, [r3, #31]
 80132de:	3b01      	subs	r3, #1
 80132e0:	b2da      	uxtb	r2, r3
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	60fb      	str	r3, [r7, #12]
 80132f0:	e008      	b.n	8013304 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80132fc:	68b9      	ldr	r1, [r7, #8]
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 f80a 	bl	8013318 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d1e3      	bne.n	80132d2 <ip_reass_tmr+0x12>
     }
   }
}
 801330a:	bf00      	nop
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	20004330 	.word	0x20004330

08013318 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b088      	sub	sp, #32
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013322:	2300      	movs	r3, #0
 8013324:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013326:	683a      	ldr	r2, [r7, #0]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	429a      	cmp	r2, r3
 801332c:	d105      	bne.n	801333a <ip_reass_free_complete_datagram+0x22>
 801332e:	4b45      	ldr	r3, [pc, #276]	; (8013444 <ip_reass_free_complete_datagram+0x12c>)
 8013330:	22ab      	movs	r2, #171	; 0xab
 8013332:	4945      	ldr	r1, [pc, #276]	; (8013448 <ip_reass_free_complete_datagram+0x130>)
 8013334:	4845      	ldr	r0, [pc, #276]	; (801344c <ip_reass_free_complete_datagram+0x134>)
 8013336:	f001 fd6f 	bl	8014e18 <iprintf>
  if (prev != NULL) {
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d00a      	beq.n	8013356 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	429a      	cmp	r2, r3
 8013348:	d005      	beq.n	8013356 <ip_reass_free_complete_datagram+0x3e>
 801334a:	4b3e      	ldr	r3, [pc, #248]	; (8013444 <ip_reass_free_complete_datagram+0x12c>)
 801334c:	22ad      	movs	r2, #173	; 0xad
 801334e:	4940      	ldr	r1, [pc, #256]	; (8013450 <ip_reass_free_complete_datagram+0x138>)
 8013350:	483e      	ldr	r0, [pc, #248]	; (801344c <ip_reass_free_complete_datagram+0x134>)
 8013352:	f001 fd61 	bl	8014e18 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	685b      	ldr	r3, [r3, #4]
 801335c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	889b      	ldrh	r3, [r3, #4]
 8013362:	b29b      	uxth	r3, r3
 8013364:	2b00      	cmp	r3, #0
 8013366:	d12a      	bne.n	80133be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013376:	69bb      	ldr	r3, [r7, #24]
 8013378:	6858      	ldr	r0, [r3, #4]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	3308      	adds	r3, #8
 801337e:	2214      	movs	r2, #20
 8013380:	4619      	mov	r1, r3
 8013382:	f001 fc8e 	bl	8014ca2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013386:	2101      	movs	r1, #1
 8013388:	69b8      	ldr	r0, [r7, #24]
 801338a:	f7ff fc6d 	bl	8012c68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801338e:	69b8      	ldr	r0, [r7, #24]
 8013390:	f7f9 fd66 	bl	800ce60 <pbuf_clen>
 8013394:	4603      	mov	r3, r0
 8013396:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013398:	8bfa      	ldrh	r2, [r7, #30]
 801339a:	8a7b      	ldrh	r3, [r7, #18]
 801339c:	4413      	add	r3, r2
 801339e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133a2:	db05      	blt.n	80133b0 <ip_reass_free_complete_datagram+0x98>
 80133a4:	4b27      	ldr	r3, [pc, #156]	; (8013444 <ip_reass_free_complete_datagram+0x12c>)
 80133a6:	22bc      	movs	r2, #188	; 0xbc
 80133a8:	492a      	ldr	r1, [pc, #168]	; (8013454 <ip_reass_free_complete_datagram+0x13c>)
 80133aa:	4828      	ldr	r0, [pc, #160]	; (801344c <ip_reass_free_complete_datagram+0x134>)
 80133ac:	f001 fd34 	bl	8014e18 <iprintf>
    pbufs_freed += clen;
 80133b0:	8bfa      	ldrh	r2, [r7, #30]
 80133b2:	8a7b      	ldrh	r3, [r7, #18]
 80133b4:	4413      	add	r3, r2
 80133b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80133b8:	69b8      	ldr	r0, [r7, #24]
 80133ba:	f7f9 fcb7 	bl	800cd2c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80133c4:	e01f      	b.n	8013406 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80133c6:	69bb      	ldr	r3, [r7, #24]
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80133cc:	69bb      	ldr	r3, [r7, #24]
 80133ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80133d6:	68f8      	ldr	r0, [r7, #12]
 80133d8:	f7f9 fd42 	bl	800ce60 <pbuf_clen>
 80133dc:	4603      	mov	r3, r0
 80133de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80133e0:	8bfa      	ldrh	r2, [r7, #30]
 80133e2:	8a7b      	ldrh	r3, [r7, #18]
 80133e4:	4413      	add	r3, r2
 80133e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133ea:	db05      	blt.n	80133f8 <ip_reass_free_complete_datagram+0xe0>
 80133ec:	4b15      	ldr	r3, [pc, #84]	; (8013444 <ip_reass_free_complete_datagram+0x12c>)
 80133ee:	22cc      	movs	r2, #204	; 0xcc
 80133f0:	4918      	ldr	r1, [pc, #96]	; (8013454 <ip_reass_free_complete_datagram+0x13c>)
 80133f2:	4816      	ldr	r0, [pc, #88]	; (801344c <ip_reass_free_complete_datagram+0x134>)
 80133f4:	f001 fd10 	bl	8014e18 <iprintf>
    pbufs_freed += clen;
 80133f8:	8bfa      	ldrh	r2, [r7, #30]
 80133fa:	8a7b      	ldrh	r3, [r7, #18]
 80133fc:	4413      	add	r3, r2
 80133fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013400:	68f8      	ldr	r0, [r7, #12]
 8013402:	f7f9 fc93 	bl	800cd2c <pbuf_free>
  while (p != NULL) {
 8013406:	69bb      	ldr	r3, [r7, #24]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d1dc      	bne.n	80133c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801340c:	6839      	ldr	r1, [r7, #0]
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f000 f8c2 	bl	8013598 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8013414:	4b10      	ldr	r3, [pc, #64]	; (8013458 <ip_reass_free_complete_datagram+0x140>)
 8013416:	881b      	ldrh	r3, [r3, #0]
 8013418:	8bfa      	ldrh	r2, [r7, #30]
 801341a:	429a      	cmp	r2, r3
 801341c:	d905      	bls.n	801342a <ip_reass_free_complete_datagram+0x112>
 801341e:	4b09      	ldr	r3, [pc, #36]	; (8013444 <ip_reass_free_complete_datagram+0x12c>)
 8013420:	22d2      	movs	r2, #210	; 0xd2
 8013422:	490e      	ldr	r1, [pc, #56]	; (801345c <ip_reass_free_complete_datagram+0x144>)
 8013424:	4809      	ldr	r0, [pc, #36]	; (801344c <ip_reass_free_complete_datagram+0x134>)
 8013426:	f001 fcf7 	bl	8014e18 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801342a:	4b0b      	ldr	r3, [pc, #44]	; (8013458 <ip_reass_free_complete_datagram+0x140>)
 801342c:	881a      	ldrh	r2, [r3, #0]
 801342e:	8bfb      	ldrh	r3, [r7, #30]
 8013430:	1ad3      	subs	r3, r2, r3
 8013432:	b29a      	uxth	r2, r3
 8013434:	4b08      	ldr	r3, [pc, #32]	; (8013458 <ip_reass_free_complete_datagram+0x140>)
 8013436:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013438:	8bfb      	ldrh	r3, [r7, #30]
}
 801343a:	4618      	mov	r0, r3
 801343c:	3720      	adds	r7, #32
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	08017614 	.word	0x08017614
 8013448:	08017650 	.word	0x08017650
 801344c:	0801765c 	.word	0x0801765c
 8013450:	08017684 	.word	0x08017684
 8013454:	08017698 	.word	0x08017698
 8013458:	20004334 	.word	0x20004334
 801345c:	080176b8 	.word	0x080176b8

08013460 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b08a      	sub	sp, #40	; 0x28
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
 8013468:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801346a:	2300      	movs	r3, #0
 801346c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801346e:	2300      	movs	r3, #0
 8013470:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013472:	2300      	movs	r3, #0
 8013474:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013476:	2300      	movs	r3, #0
 8013478:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801347a:	2300      	movs	r3, #0
 801347c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801347e:	4b28      	ldr	r3, [pc, #160]	; (8013520 <ip_reass_remove_oldest_datagram+0xc0>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013484:	e030      	b.n	80134e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013488:	695a      	ldr	r2, [r3, #20]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	429a      	cmp	r2, r3
 8013490:	d10c      	bne.n	80134ac <ip_reass_remove_oldest_datagram+0x4c>
 8013492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013494:	699a      	ldr	r2, [r3, #24]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	691b      	ldr	r3, [r3, #16]
 801349a:	429a      	cmp	r2, r3
 801349c:	d106      	bne.n	80134ac <ip_reass_remove_oldest_datagram+0x4c>
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	899a      	ldrh	r2, [r3, #12]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	889b      	ldrh	r3, [r3, #4]
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d014      	beq.n	80134d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	3301      	adds	r3, #1
 80134b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d104      	bne.n	80134c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80134b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	61bb      	str	r3, [r7, #24]
 80134c0:	e009      	b.n	80134d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80134c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c4:	7fda      	ldrb	r2, [r3, #31]
 80134c6:	6a3b      	ldr	r3, [r7, #32]
 80134c8:	7fdb      	ldrb	r3, [r3, #31]
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d803      	bhi.n	80134d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80134ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80134d2:	69fb      	ldr	r3, [r7, #28]
 80134d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80134d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d001      	beq.n	80134e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80134de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80134e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d1cb      	bne.n	8013486 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80134ee:	6a3b      	ldr	r3, [r7, #32]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d008      	beq.n	8013506 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80134f4:	69b9      	ldr	r1, [r7, #24]
 80134f6:	6a38      	ldr	r0, [r7, #32]
 80134f8:	f7ff ff0e 	bl	8013318 <ip_reass_free_complete_datagram>
 80134fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80134fe:	697a      	ldr	r2, [r7, #20]
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	4413      	add	r3, r2
 8013504:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013506:	697a      	ldr	r2, [r7, #20]
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	429a      	cmp	r2, r3
 801350c:	da02      	bge.n	8013514 <ip_reass_remove_oldest_datagram+0xb4>
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	2b01      	cmp	r3, #1
 8013512:	dcac      	bgt.n	801346e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013514:	697b      	ldr	r3, [r7, #20]
}
 8013516:	4618      	mov	r0, r3
 8013518:	3728      	adds	r7, #40	; 0x28
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	20004330 	.word	0x20004330

08013524 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801352e:	2003      	movs	r0, #3
 8013530:	f7f8 fe58 	bl	800c1e4 <memp_malloc>
 8013534:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d110      	bne.n	801355e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801353c:	6839      	ldr	r1, [r7, #0]
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f7ff ff8e 	bl	8013460 <ip_reass_remove_oldest_datagram>
 8013544:	4602      	mov	r2, r0
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	4293      	cmp	r3, r2
 801354a:	dc03      	bgt.n	8013554 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801354c:	2003      	movs	r0, #3
 801354e:	f7f8 fe49 	bl	800c1e4 <memp_malloc>
 8013552:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d101      	bne.n	801355e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801355a:	2300      	movs	r3, #0
 801355c:	e016      	b.n	801358c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801355e:	2220      	movs	r2, #32
 8013560:	2100      	movs	r1, #0
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f001 fba8 	bl	8014cb8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	2203      	movs	r2, #3
 801356c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801356e:	4b09      	ldr	r3, [pc, #36]	; (8013594 <ip_reass_enqueue_new_datagram+0x70>)
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013576:	4a07      	ldr	r2, [pc, #28]	; (8013594 <ip_reass_enqueue_new_datagram+0x70>)
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	3308      	adds	r3, #8
 8013580:	2214      	movs	r2, #20
 8013582:	6879      	ldr	r1, [r7, #4]
 8013584:	4618      	mov	r0, r3
 8013586:	f001 fb8c 	bl	8014ca2 <memcpy>
  return ipr;
 801358a:	68fb      	ldr	r3, [r7, #12]
}
 801358c:	4618      	mov	r0, r3
 801358e:	3710      	adds	r7, #16
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	20004330 	.word	0x20004330

08013598 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80135a2:	4b10      	ldr	r3, [pc, #64]	; (80135e4 <ip_reass_dequeue_datagram+0x4c>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d104      	bne.n	80135b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4a0c      	ldr	r2, [pc, #48]	; (80135e4 <ip_reass_dequeue_datagram+0x4c>)
 80135b2:	6013      	str	r3, [r2, #0]
 80135b4:	e00d      	b.n	80135d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d106      	bne.n	80135ca <ip_reass_dequeue_datagram+0x32>
 80135bc:	4b0a      	ldr	r3, [pc, #40]	; (80135e8 <ip_reass_dequeue_datagram+0x50>)
 80135be:	f240 1245 	movw	r2, #325	; 0x145
 80135c2:	490a      	ldr	r1, [pc, #40]	; (80135ec <ip_reass_dequeue_datagram+0x54>)
 80135c4:	480a      	ldr	r0, [pc, #40]	; (80135f0 <ip_reass_dequeue_datagram+0x58>)
 80135c6:	f001 fc27 	bl	8014e18 <iprintf>
    prev->next = ipr->next;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681a      	ldr	r2, [r3, #0]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80135d2:	6879      	ldr	r1, [r7, #4]
 80135d4:	2003      	movs	r0, #3
 80135d6:	f7f8 fe57 	bl	800c288 <memp_free>
}
 80135da:	bf00      	nop
 80135dc:	3708      	adds	r7, #8
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	20004330 	.word	0x20004330
 80135e8:	08017614 	.word	0x08017614
 80135ec:	080176d4 	.word	0x080176d4
 80135f0:	0801765c 	.word	0x0801765c

080135f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b08c      	sub	sp, #48	; 0x30
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	60f8      	str	r0, [r7, #12]
 80135fc:	60b9      	str	r1, [r7, #8]
 80135fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8013600:	2300      	movs	r3, #0
 8013602:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013604:	2301      	movs	r3, #1
 8013606:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801360e:	69fb      	ldr	r3, [r7, #28]
 8013610:	885b      	ldrh	r3, [r3, #2]
 8013612:	b29b      	uxth	r3, r3
 8013614:	4618      	mov	r0, r3
 8013616:	f7f8 f9f9 	bl	800ba0c <lwip_htons>
 801361a:	4603      	mov	r3, r0
 801361c:	461a      	mov	r2, r3
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	781b      	ldrb	r3, [r3, #0]
 8013622:	b29b      	uxth	r3, r3
 8013624:	f003 030f 	and.w	r3, r3, #15
 8013628:	b29b      	uxth	r3, r3
 801362a:	009b      	lsls	r3, r3, #2
 801362c:	b29b      	uxth	r3, r3
 801362e:	1ad3      	subs	r3, r2, r3
 8013630:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8013632:	69fb      	ldr	r3, [r7, #28]
 8013634:	88db      	ldrh	r3, [r3, #6]
 8013636:	b29b      	uxth	r3, r3
 8013638:	4618      	mov	r0, r3
 801363a:	f7f8 f9e7 	bl	800ba0c <lwip_htons>
 801363e:	4603      	mov	r3, r0
 8013640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013644:	b29b      	uxth	r3, r3
 8013646:	00db      	lsls	r3, r3, #3
 8013648:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	685b      	ldr	r3, [r3, #4]
 801364e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013652:	2200      	movs	r2, #0
 8013654:	701a      	strb	r2, [r3, #0]
 8013656:	2200      	movs	r2, #0
 8013658:	705a      	strb	r2, [r3, #1]
 801365a:	2200      	movs	r2, #0
 801365c:	709a      	strb	r2, [r3, #2]
 801365e:	2200      	movs	r2, #0
 8013660:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013664:	8b3a      	ldrh	r2, [r7, #24]
 8013666:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8013668:	8b3a      	ldrh	r2, [r7, #24]
 801366a:	8b7b      	ldrh	r3, [r7, #26]
 801366c:	4413      	add	r3, r2
 801366e:	b29a      	uxth	r2, r3
 8013670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013672:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	627b      	str	r3, [r7, #36]	; 0x24
 801367a:	e061      	b.n	8013740 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801367e:	685b      	ldr	r3, [r3, #4]
 8013680:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8013682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013684:	889b      	ldrh	r3, [r3, #4]
 8013686:	b29a      	uxth	r2, r3
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	889b      	ldrh	r3, [r3, #4]
 801368c:	b29b      	uxth	r3, r3
 801368e:	429a      	cmp	r2, r3
 8013690:	d232      	bcs.n	80136f8 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013696:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369a:	2b00      	cmp	r3, #0
 801369c:	d01f      	beq.n	80136de <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a0:	889b      	ldrh	r3, [r3, #4]
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	88db      	ldrh	r3, [r3, #6]
 80136a8:	b29b      	uxth	r3, r3
 80136aa:	429a      	cmp	r2, r3
 80136ac:	f0c0 80e3 	bcc.w	8013876 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80136b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b2:	88db      	ldrh	r3, [r3, #6]
 80136b4:	b29a      	uxth	r2, r3
 80136b6:	697b      	ldr	r3, [r7, #20]
 80136b8:	889b      	ldrh	r3, [r3, #4]
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	429a      	cmp	r2, r3
 80136be:	f200 80da 	bhi.w	8013876 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80136c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c4:	68ba      	ldr	r2, [r7, #8]
 80136c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80136c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ca:	88db      	ldrh	r3, [r3, #6]
 80136cc:	b29a      	uxth	r2, r3
 80136ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d0:	889b      	ldrh	r3, [r3, #4]
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d037      	beq.n	8013748 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80136dc:	e034      	b.n	8013748 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e0:	88db      	ldrh	r3, [r3, #6]
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	889b      	ldrh	r3, [r3, #4]
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	429a      	cmp	r2, r3
 80136ec:	f200 80c5 	bhi.w	801387a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	68ba      	ldr	r2, [r7, #8]
 80136f4:	605a      	str	r2, [r3, #4]
      break;
 80136f6:	e027      	b.n	8013748 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80136f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fa:	889b      	ldrh	r3, [r3, #4]
 80136fc:	b29a      	uxth	r2, r3
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	889b      	ldrh	r3, [r3, #4]
 8013702:	b29b      	uxth	r3, r3
 8013704:	429a      	cmp	r2, r3
 8013706:	f000 80ba 	beq.w	801387e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370c:	889b      	ldrh	r3, [r3, #4]
 801370e:	b29a      	uxth	r2, r3
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	88db      	ldrh	r3, [r3, #6]
 8013714:	b29b      	uxth	r3, r3
 8013716:	429a      	cmp	r2, r3
 8013718:	f0c0 80b3 	bcc.w	8013882 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371e:	2b00      	cmp	r3, #0
 8013720:	d009      	beq.n	8013736 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8013722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013724:	88db      	ldrh	r3, [r3, #6]
 8013726:	b29a      	uxth	r2, r3
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	889b      	ldrh	r3, [r3, #4]
 801372c:	b29b      	uxth	r3, r3
 801372e:	429a      	cmp	r2, r3
 8013730:	d001      	beq.n	8013736 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013732:	2300      	movs	r3, #0
 8013734:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013742:	2b00      	cmp	r3, #0
 8013744:	d19a      	bne.n	801367c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8013746:	e000      	b.n	801374a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8013748:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374c:	2b00      	cmp	r3, #0
 801374e:	d12d      	bne.n	80137ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8013750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013752:	2b00      	cmp	r3, #0
 8013754:	d01c      	beq.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013758:	88db      	ldrh	r3, [r3, #6]
 801375a:	b29a      	uxth	r2, r3
 801375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801375e:	889b      	ldrh	r3, [r3, #4]
 8013760:	b29b      	uxth	r3, r3
 8013762:	429a      	cmp	r2, r3
 8013764:	d906      	bls.n	8013774 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8013766:	4b51      	ldr	r3, [pc, #324]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013768:	f240 12ab 	movw	r2, #427	; 0x1ab
 801376c:	4950      	ldr	r1, [pc, #320]	; (80138b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801376e:	4851      	ldr	r0, [pc, #324]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013770:	f001 fb52 	bl	8014e18 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013776:	68ba      	ldr	r2, [r7, #8]
 8013778:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377c:	88db      	ldrh	r3, [r3, #6]
 801377e:	b29a      	uxth	r2, r3
 8013780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013782:	889b      	ldrh	r3, [r3, #4]
 8013784:	b29b      	uxth	r3, r3
 8013786:	429a      	cmp	r2, r3
 8013788:	d010      	beq.n	80137ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801378a:	2300      	movs	r3, #0
 801378c:	623b      	str	r3, [r7, #32]
 801378e:	e00d      	b.n	80137ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d006      	beq.n	80137a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8013798:	4b44      	ldr	r3, [pc, #272]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801379a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801379e:	4946      	ldr	r1, [pc, #280]	; (80138b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80137a0:	4844      	ldr	r0, [pc, #272]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80137a2:	f001 fb39 	bl	8014e18 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	68ba      	ldr	r2, [r7, #8]
 80137aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d105      	bne.n	80137be <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	7f9b      	ldrb	r3, [r3, #30]
 80137b6:	f003 0301 	and.w	r3, r3, #1
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d059      	beq.n	8013872 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80137be:	6a3b      	ldr	r3, [r7, #32]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d04f      	beq.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d006      	beq.n	80137da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	889b      	ldrh	r3, [r3, #4]
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d002      	beq.n	80137e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80137da:	2300      	movs	r3, #0
 80137dc:	623b      	str	r3, [r7, #32]
 80137de:	e041      	b.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80137e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80137e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80137ea:	e012      	b.n	8013812 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80137ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80137f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f4:	88db      	ldrh	r3, [r3, #6]
 80137f6:	b29a      	uxth	r2, r3
 80137f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fa:	889b      	ldrh	r3, [r3, #4]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	429a      	cmp	r2, r3
 8013800:	d002      	beq.n	8013808 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8013802:	2300      	movs	r3, #0
 8013804:	623b      	str	r3, [r7, #32]
            break;
 8013806:	e007      	b.n	8013818 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8013808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013814:	2b00      	cmp	r3, #0
 8013816:	d1e9      	bne.n	80137ec <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013818:	6a3b      	ldr	r3, [r7, #32]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d022      	beq.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d106      	bne.n	8013834 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8013826:	4b21      	ldr	r3, [pc, #132]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013828:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801382c:	4923      	ldr	r1, [pc, #140]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801382e:	4821      	ldr	r0, [pc, #132]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013830:	f001 faf2 	bl	8014e18 <iprintf>
          LWIP_ASSERT("sanity check",
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801383c:	429a      	cmp	r2, r3
 801383e:	d106      	bne.n	801384e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8013840:	4b1a      	ldr	r3, [pc, #104]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013842:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8013846:	491d      	ldr	r1, [pc, #116]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013848:	481a      	ldr	r0, [pc, #104]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801384a:	f001 fae5 	bl	8014e18 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d006      	beq.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8013856:	4b15      	ldr	r3, [pc, #84]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013858:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801385c:	4918      	ldr	r1, [pc, #96]	; (80138c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801385e:	4815      	ldr	r0, [pc, #84]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013860:	f001 fada 	bl	8014e18 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013864:	6a3b      	ldr	r3, [r7, #32]
 8013866:	2b00      	cmp	r3, #0
 8013868:	bf14      	ite	ne
 801386a:	2301      	movne	r3, #1
 801386c:	2300      	moveq	r3, #0
 801386e:	b2db      	uxtb	r3, r3
 8013870:	e018      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013872:	2300      	movs	r3, #0
 8013874:	e016      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8013876:	bf00      	nop
 8013878:	e004      	b.n	8013884 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801387a:	bf00      	nop
 801387c:	e002      	b.n	8013884 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801387e:	bf00      	nop
 8013880:	e000      	b.n	8013884 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013882:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8013884:	68b8      	ldr	r0, [r7, #8]
 8013886:	f7f9 faeb 	bl	800ce60 <pbuf_clen>
 801388a:	4603      	mov	r3, r0
 801388c:	461a      	mov	r2, r3
 801388e:	4b0d      	ldr	r3, [pc, #52]	; (80138c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013890:	881b      	ldrh	r3, [r3, #0]
 8013892:	1a9b      	subs	r3, r3, r2
 8013894:	b29a      	uxth	r2, r3
 8013896:	4b0b      	ldr	r3, [pc, #44]	; (80138c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013898:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801389a:	68b8      	ldr	r0, [r7, #8]
 801389c:	f7f9 fa46 	bl	800cd2c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3730      	adds	r7, #48	; 0x30
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	08017614 	.word	0x08017614
 80138b0:	080176f0 	.word	0x080176f0
 80138b4:	0801765c 	.word	0x0801765c
 80138b8:	08017710 	.word	0x08017710
 80138bc:	08017748 	.word	0x08017748
 80138c0:	08017758 	.word	0x08017758
 80138c4:	20004334 	.word	0x20004334

080138c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b08e      	sub	sp, #56	; 0x38
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80138d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d8:	781b      	ldrb	r3, [r3, #0]
 80138da:	f003 030f 	and.w	r3, r3, #15
 80138de:	009b      	lsls	r3, r3, #2
 80138e0:	2b14      	cmp	r3, #20
 80138e2:	f040 8131 	bne.w	8013b48 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80138e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e8:	88db      	ldrh	r3, [r3, #6]
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7f8 f88d 	bl	800ba0c <lwip_htons>
 80138f2:	4603      	mov	r3, r0
 80138f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	00db      	lsls	r3, r3, #3
 80138fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80138fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013900:	885b      	ldrh	r3, [r3, #2]
 8013902:	b29b      	uxth	r3, r3
 8013904:	4618      	mov	r0, r3
 8013906:	f7f8 f881 	bl	800ba0c <lwip_htons>
 801390a:	4603      	mov	r3, r0
 801390c:	461a      	mov	r2, r3
 801390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	b29b      	uxth	r3, r3
 8013914:	f003 030f 	and.w	r3, r3, #15
 8013918:	b29b      	uxth	r3, r3
 801391a:	009b      	lsls	r3, r3, #2
 801391c:	b29b      	uxth	r3, r3
 801391e:	1ad3      	subs	r3, r2, r3
 8013920:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f7f9 fa9c 	bl	800ce60 <pbuf_clen>
 8013928:	4603      	mov	r3, r0
 801392a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801392c:	4b8d      	ldr	r3, [pc, #564]	; (8013b64 <ip4_reass+0x29c>)
 801392e:	881b      	ldrh	r3, [r3, #0]
 8013930:	461a      	mov	r2, r3
 8013932:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013934:	4413      	add	r3, r2
 8013936:	2b0a      	cmp	r3, #10
 8013938:	dd10      	ble.n	801395c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801393a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801393c:	4619      	mov	r1, r3
 801393e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013940:	f7ff fd8e 	bl	8013460 <ip_reass_remove_oldest_datagram>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	f000 8100 	beq.w	8013b4c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801394c:	4b85      	ldr	r3, [pc, #532]	; (8013b64 <ip4_reass+0x29c>)
 801394e:	881b      	ldrh	r3, [r3, #0]
 8013950:	461a      	mov	r2, r3
 8013952:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013954:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013956:	2b0a      	cmp	r3, #10
 8013958:	f300 80f8 	bgt.w	8013b4c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801395c:	4b82      	ldr	r3, [pc, #520]	; (8013b68 <ip4_reass+0x2a0>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	633b      	str	r3, [r7, #48]	; 0x30
 8013962:	e015      	b.n	8013990 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013966:	695a      	ldr	r2, [r3, #20]
 8013968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	429a      	cmp	r2, r3
 801396e:	d10c      	bne.n	801398a <ip4_reass+0xc2>
 8013970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013972:	699a      	ldr	r2, [r3, #24]
 8013974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013976:	691b      	ldr	r3, [r3, #16]
 8013978:	429a      	cmp	r2, r3
 801397a:	d106      	bne.n	801398a <ip4_reass+0xc2>
 801397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397e:	899a      	ldrh	r2, [r3, #12]
 8013980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013982:	889b      	ldrh	r3, [r3, #4]
 8013984:	b29b      	uxth	r3, r3
 8013986:	429a      	cmp	r2, r3
 8013988:	d006      	beq.n	8013998 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	633b      	str	r3, [r7, #48]	; 0x30
 8013990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013992:	2b00      	cmp	r3, #0
 8013994:	d1e6      	bne.n	8013964 <ip4_reass+0x9c>
 8013996:	e000      	b.n	801399a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013998:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399c:	2b00      	cmp	r3, #0
 801399e:	d109      	bne.n	80139b4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80139a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139a2:	4619      	mov	r1, r3
 80139a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139a6:	f7ff fdbd 	bl	8013524 <ip_reass_enqueue_new_datagram>
 80139aa:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80139ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d11c      	bne.n	80139ec <ip4_reass+0x124>
      goto nullreturn;
 80139b2:	e0ce      	b.n	8013b52 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80139b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b6:	88db      	ldrh	r3, [r3, #6]
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7f8 f826 	bl	800ba0c <lwip_htons>
 80139c0:	4603      	mov	r3, r0
 80139c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d110      	bne.n	80139ec <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80139ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139cc:	89db      	ldrh	r3, [r3, #14]
 80139ce:	4618      	mov	r0, r3
 80139d0:	f7f8 f81c 	bl	800ba0c <lwip_htons>
 80139d4:	4603      	mov	r3, r0
 80139d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d006      	beq.n	80139ec <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80139de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e0:	3308      	adds	r3, #8
 80139e2:	2214      	movs	r2, #20
 80139e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139e6:	4618      	mov	r0, r3
 80139e8:	f001 f95b 	bl	8014ca2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80139ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ee:	88db      	ldrh	r3, [r3, #6]
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	f003 0320 	and.w	r3, r3, #32
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	bf0c      	ite	eq
 80139fa:	2301      	moveq	r3, #1
 80139fc:	2300      	movne	r3, #0
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d00e      	beq.n	8013a26 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a0c:	4413      	add	r3, r2
 8013a0e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013a10:	8b7a      	ldrh	r2, [r7, #26]
 8013a12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a14:	429a      	cmp	r2, r3
 8013a16:	f0c0 8099 	bcc.w	8013b4c <ip4_reass+0x284>
 8013a1a:	8b7b      	ldrh	r3, [r7, #26]
 8013a1c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013a20:	4293      	cmp	r3, r2
 8013a22:	f200 8093 	bhi.w	8013b4c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013a26:	69fa      	ldr	r2, [r7, #28]
 8013a28:	6879      	ldr	r1, [r7, #4]
 8013a2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a2c:	f7ff fde2 	bl	80135f4 <ip_reass_chain_frag_into_datagram_and_validate>
 8013a30:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a38:	f000 808a 	beq.w	8013b50 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013a3c:	4b49      	ldr	r3, [pc, #292]	; (8013b64 <ip4_reass+0x29c>)
 8013a3e:	881a      	ldrh	r2, [r3, #0]
 8013a40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a42:	4413      	add	r3, r2
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	4b47      	ldr	r3, [pc, #284]	; (8013b64 <ip4_reass+0x29c>)
 8013a48:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013a4a:	69fb      	ldr	r3, [r7, #28]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d00d      	beq.n	8013a6c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a54:	4413      	add	r3, r2
 8013a56:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a5a:	8a7a      	ldrh	r2, [r7, #18]
 8013a5c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a60:	7f9b      	ldrb	r3, [r3, #30]
 8013a62:	f043 0301 	orr.w	r3, r3, #1
 8013a66:	b2da      	uxtb	r2, r3
 8013a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a6a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d168      	bne.n	8013b44 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8013a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a74:	8b9b      	ldrh	r3, [r3, #28]
 8013a76:	3314      	adds	r3, #20
 8013a78:	b29a      	uxth	r2, r3
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8013a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a92:	3308      	adds	r3, #8
 8013a94:	2214      	movs	r2, #20
 8013a96:	4619      	mov	r1, r3
 8013a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a9a:	f001 f902 	bl	8014ca2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8013a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa0:	8b9b      	ldrh	r3, [r3, #28]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7f7 ffb2 	bl	800ba0c <lwip_htons>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	461a      	mov	r2, r3
 8013aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	719a      	strb	r2, [r3, #6]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	2200      	movs	r2, #0
 8013abe:	729a      	strb	r2, [r3, #10]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013aca:	e00e      	b.n	8013aea <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8013acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8013ad2:	f06f 0113 	mvn.w	r1, #19
 8013ad6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ad8:	f7f9 f904 	bl	800cce4 <pbuf_header>
      pbuf_cat(p, r);
 8013adc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f7f9 f9fe 	bl	800cee0 <pbuf_cat>
      r = iprh->next_pbuf;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d1ed      	bne.n	8013acc <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013af0:	4b1d      	ldr	r3, [pc, #116]	; (8013b68 <ip4_reass+0x2a0>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d102      	bne.n	8013b00 <ip4_reass+0x238>
      ipr_prev = NULL;
 8013afa:	2300      	movs	r3, #0
 8013afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013afe:	e010      	b.n	8013b22 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013b00:	4b19      	ldr	r3, [pc, #100]	; (8013b68 <ip4_reass+0x2a0>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b06:	e007      	b.n	8013b18 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8013b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d006      	beq.n	8013b20 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d1f4      	bne.n	8013b08 <ip4_reass+0x240>
 8013b1e:	e000      	b.n	8013b22 <ip4_reass+0x25a>
          break;
 8013b20:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b26:	f7ff fd37 	bl	8013598 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7f9 f998 	bl	800ce60 <pbuf_clen>
 8013b30:	4603      	mov	r3, r0
 8013b32:	461a      	mov	r2, r3
 8013b34:	4b0b      	ldr	r3, [pc, #44]	; (8013b64 <ip4_reass+0x29c>)
 8013b36:	881b      	ldrh	r3, [r3, #0]
 8013b38:	1a9b      	subs	r3, r3, r2
 8013b3a:	b29a      	uxth	r2, r3
 8013b3c:	4b09      	ldr	r3, [pc, #36]	; (8013b64 <ip4_reass+0x29c>)
 8013b3e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	e00a      	b.n	8013b5a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013b44:	2300      	movs	r3, #0
 8013b46:	e008      	b.n	8013b5a <ip4_reass+0x292>
    goto nullreturn;
 8013b48:	bf00      	nop
 8013b4a:	e002      	b.n	8013b52 <ip4_reass+0x28a>

nullreturn:
 8013b4c:	bf00      	nop
 8013b4e:	e000      	b.n	8013b52 <ip4_reass+0x28a>
    goto nullreturn;
 8013b50:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f7f9 f8ea 	bl	800cd2c <pbuf_free>
  return NULL;
 8013b58:	2300      	movs	r3, #0
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3738      	adds	r7, #56	; 0x38
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	20004334 	.word	0x20004334
 8013b68:	20004330 	.word	0x20004330

08013b6c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8013b70:	2004      	movs	r0, #4
 8013b72:	f7f8 fb37 	bl	800c1e4 <memp_malloc>
 8013b76:	4603      	mov	r3, r0
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d106      	bne.n	8013b98 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013b8a:	4b07      	ldr	r3, [pc, #28]	; (8013ba8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013b8c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8013b90:	4906      	ldr	r1, [pc, #24]	; (8013bac <ip_frag_free_pbuf_custom_ref+0x30>)
 8013b92:	4807      	ldr	r0, [pc, #28]	; (8013bb0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013b94:	f001 f940 	bl	8014e18 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013b98:	6879      	ldr	r1, [r7, #4]
 8013b9a:	2004      	movs	r0, #4
 8013b9c:	f7f8 fb74 	bl	800c288 <memp_free>
}
 8013ba0:	bf00      	nop
 8013ba2:	3708      	adds	r7, #8
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	08017614 	.word	0x08017614
 8013bac:	0801777c 	.word	0x0801777c
 8013bb0:	0801765c 	.word	0x0801765c

08013bb4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b084      	sub	sp, #16
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d106      	bne.n	8013bd4 <ipfrag_free_pbuf_custom+0x20>
 8013bc6:	4b11      	ldr	r3, [pc, #68]	; (8013c0c <ipfrag_free_pbuf_custom+0x58>)
 8013bc8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8013bcc:	4910      	ldr	r1, [pc, #64]	; (8013c10 <ipfrag_free_pbuf_custom+0x5c>)
 8013bce:	4811      	ldr	r0, [pc, #68]	; (8013c14 <ipfrag_free_pbuf_custom+0x60>)
 8013bd0:	f001 f922 	bl	8014e18 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8013bd4:	68fa      	ldr	r2, [r7, #12]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d006      	beq.n	8013bea <ipfrag_free_pbuf_custom+0x36>
 8013bdc:	4b0b      	ldr	r3, [pc, #44]	; (8013c0c <ipfrag_free_pbuf_custom+0x58>)
 8013bde:	f240 22b9 	movw	r2, #697	; 0x2b9
 8013be2:	490d      	ldr	r1, [pc, #52]	; (8013c18 <ipfrag_free_pbuf_custom+0x64>)
 8013be4:	480b      	ldr	r0, [pc, #44]	; (8013c14 <ipfrag_free_pbuf_custom+0x60>)
 8013be6:	f001 f917 	bl	8014e18 <iprintf>
  if (pcr->original != NULL) {
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	695b      	ldr	r3, [r3, #20]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d004      	beq.n	8013bfc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	695b      	ldr	r3, [r3, #20]
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7f9 f898 	bl	800cd2c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013bfc:	68f8      	ldr	r0, [r7, #12]
 8013bfe:	f7ff ffbd 	bl	8013b7c <ip_frag_free_pbuf_custom_ref>
}
 8013c02:	bf00      	nop
 8013c04:	3710      	adds	r7, #16
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	08017614 	.word	0x08017614
 8013c10:	08017788 	.word	0x08017788
 8013c14:	0801765c 	.word	0x0801765c
 8013c18:	08017794 	.word	0x08017794

08013c1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b092      	sub	sp, #72	; 0x48
 8013c20:	af02      	add	r7, sp, #8
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013c30:	3b14      	subs	r3, #20
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	da00      	bge.n	8013c38 <ip4_frag+0x1c>
 8013c36:	3307      	adds	r3, #7
 8013c38:	10db      	asrs	r3, r3, #3
 8013c3a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013c3c:	2314      	movs	r3, #20
 8013c3e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8013c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c48:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8013c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	f003 030f 	and.w	r3, r3, #15
 8013c52:	009b      	lsls	r3, r3, #2
 8013c54:	2b14      	cmp	r3, #20
 8013c56:	d009      	beq.n	8013c6c <ip4_frag+0x50>
 8013c58:	4b79      	ldr	r3, [pc, #484]	; (8013e40 <ip4_frag+0x224>)
 8013c5a:	f240 22e1 	movw	r2, #737	; 0x2e1
 8013c5e:	4979      	ldr	r1, [pc, #484]	; (8013e44 <ip4_frag+0x228>)
 8013c60:	4879      	ldr	r0, [pc, #484]	; (8013e48 <ip4_frag+0x22c>)
 8013c62:	f001 f8d9 	bl	8014e18 <iprintf>
 8013c66:	f06f 0305 	mvn.w	r3, #5
 8013c6a:	e0e5      	b.n	8013e38 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6e:	88db      	ldrh	r3, [r3, #6]
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f7 feca 	bl	800ba0c <lwip_htons>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8013c7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013c7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c82:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8013c84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d009      	beq.n	8013ca2 <ip4_frag+0x86>
 8013c8e:	4b6c      	ldr	r3, [pc, #432]	; (8013e40 <ip4_frag+0x224>)
 8013c90:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013c94:	496d      	ldr	r1, [pc, #436]	; (8013e4c <ip4_frag+0x230>)
 8013c96:	486c      	ldr	r0, [pc, #432]	; (8013e48 <ip4_frag+0x22c>)
 8013c98:	f001 f8be 	bl	8014e18 <iprintf>
 8013c9c:	f06f 0305 	mvn.w	r3, #5
 8013ca0:	e0ca      	b.n	8013e38 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	891b      	ldrh	r3, [r3, #8]
 8013ca6:	3b14      	subs	r3, #20
 8013ca8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8013caa:	e0bc      	b.n	8013e26 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8013cac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013cae:	00da      	lsls	r2, r3, #3
 8013cb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013cb2:	4293      	cmp	r3, r2
 8013cb4:	bfa8      	it	ge
 8013cb6:	4613      	movge	r3, r2
 8013cb8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013cba:	2200      	movs	r2, #0
 8013cbc:	2114      	movs	r1, #20
 8013cbe:	2002      	movs	r0, #2
 8013cc0:	f7f8 fcc2 	bl	800c648 <pbuf_alloc>
 8013cc4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8013cc6:	6a3b      	ldr	r3, [r7, #32]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f000 80b2 	beq.w	8013e32 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	895b      	ldrh	r3, [r3, #10]
 8013cd2:	2b13      	cmp	r3, #19
 8013cd4:	d806      	bhi.n	8013ce4 <ip4_frag+0xc8>
 8013cd6:	4b5a      	ldr	r3, [pc, #360]	; (8013e40 <ip4_frag+0x224>)
 8013cd8:	f240 3209 	movw	r2, #777	; 0x309
 8013cdc:	495c      	ldr	r1, [pc, #368]	; (8013e50 <ip4_frag+0x234>)
 8013cde:	485a      	ldr	r0, [pc, #360]	; (8013e48 <ip4_frag+0x22c>)
 8013ce0:	f001 f89a 	bl	8014e18 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013ce4:	6a3b      	ldr	r3, [r7, #32]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	2214      	movs	r2, #20
 8013cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013cec:	4618      	mov	r0, r3
 8013cee:	f000 ffd8 	bl	8014ca2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013cf2:	6a3b      	ldr	r3, [r7, #32]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8013cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013cfa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8013cfc:	e04f      	b.n	8013d9e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	895a      	ldrh	r2, [r3, #10]
 8013d02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013d04:	1ad3      	subs	r3, r2, r3
 8013d06:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013d08:	8b7a      	ldrh	r2, [r7, #26]
 8013d0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	bf28      	it	cs
 8013d10:	4613      	movcs	r3, r2
 8013d12:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d105      	bne.n	8013d26 <ip4_frag+0x10a>
        poff = 0;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	60fb      	str	r3, [r7, #12]
        continue;
 8013d24:	e03b      	b.n	8013d9e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013d26:	f7ff ff21 	bl	8013b6c <ip_frag_alloc_pbuf_custom_ref>
 8013d2a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d103      	bne.n	8013d3a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8013d32:	6a38      	ldr	r0, [r7, #32]
 8013d34:	f7f8 fffa 	bl	800cd2c <pbuf_free>
        goto memerr;
 8013d38:	e07c      	b.n	8013e34 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013d3a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013d40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013d42:	4413      	add	r3, r2
 8013d44:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8013d46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013d48:	9201      	str	r2, [sp, #4]
 8013d4a:	9300      	str	r3, [sp, #0]
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	2202      	movs	r2, #2
 8013d50:	2004      	movs	r0, #4
 8013d52:	f7f8 fe0d 	bl	800c970 <pbuf_alloced_custom>
 8013d56:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d106      	bne.n	8013d6c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013d5e:	6978      	ldr	r0, [r7, #20]
 8013d60:	f7ff ff0c 	bl	8013b7c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013d64:	6a38      	ldr	r0, [r7, #32]
 8013d66:	f7f8 ffe1 	bl	800cd2c <pbuf_free>
        goto memerr;
 8013d6a:	e063      	b.n	8013e34 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	f7f9 f88f 	bl	800ce90 <pbuf_ref>
      pcr->original = p;
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	68fa      	ldr	r2, [r7, #12]
 8013d76:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	4a36      	ldr	r2, [pc, #216]	; (8013e54 <ip4_frag+0x238>)
 8013d7c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013d7e:	6939      	ldr	r1, [r7, #16]
 8013d80:	6a38      	ldr	r0, [r7, #32]
 8013d82:	f7f9 f8ad 	bl	800cee0 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8013d86:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8013d88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d8a:	1ad3      	subs	r3, r2, r3
 8013d8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8013d8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d004      	beq.n	8013d9e <ip4_frag+0x182>
        poff = 0;
 8013d94:	2300      	movs	r3, #0
 8013d96:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013d9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d1ac      	bne.n	8013cfe <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8013da4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013da6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013da8:	4413      	add	r3, r2
 8013daa:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013dac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013db2:	3b14      	subs	r3, #20
 8013db4:	429a      	cmp	r2, r3
 8013db6:	bfd4      	ite	le
 8013db8:	2301      	movle	r3, #1
 8013dba:	2300      	movgt	r3, #0
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013dc0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013dc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013dc6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d103      	bne.n	8013dd6 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8013dce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013dd4:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013dd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7f7 fe17 	bl	800ba0c <lwip_htons>
 8013dde:	4603      	mov	r3, r0
 8013de0:	461a      	mov	r2, r3
 8013de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013de4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8013de6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013de8:	3314      	adds	r3, #20
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7f7 fe0d 	bl	800ba0c <lwip_htons>
 8013df2:	4603      	mov	r3, r0
 8013df4:	461a      	mov	r2, r3
 8013df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	729a      	strb	r2, [r3, #10]
 8013e00:	2200      	movs	r2, #0
 8013e02:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	695b      	ldr	r3, [r3, #20]
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	6a39      	ldr	r1, [r7, #32]
 8013e0c:	68b8      	ldr	r0, [r7, #8]
 8013e0e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013e10:	6a38      	ldr	r0, [r7, #32]
 8013e12:	f7f8 ff8b 	bl	800cd2c <pbuf_free>
    left -= fragsize;
 8013e16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e1a:	1ad3      	subs	r3, r2, r3
 8013e1c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8013e1e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013e20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013e22:	4413      	add	r3, r2
 8013e24:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8013e26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f47f af3f 	bne.w	8013cac <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	e002      	b.n	8013e38 <ip4_frag+0x21c>
      goto memerr;
 8013e32:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3740      	adds	r7, #64	; 0x40
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	08017614 	.word	0x08017614
 8013e44:	080177a0 	.word	0x080177a0
 8013e48:	0801765c 	.word	0x0801765c
 8013e4c:	080177c8 	.word	0x080177c8
 8013e50:	080177e4 	.word	0x080177e4
 8013e54:	08013bb5 	.word	0x08013bb5

08013e58 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b086      	sub	sp, #24
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8013e62:	230e      	movs	r3, #14
 8013e64:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	895b      	ldrh	r3, [r3, #10]
 8013e6a:	2b0e      	cmp	r3, #14
 8013e6c:	d977      	bls.n	8013f5e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013e74:	693b      	ldr	r3, [r7, #16]
 8013e76:	7b1a      	ldrb	r2, [r3, #12]
 8013e78:	7b5b      	ldrb	r3, [r3, #13]
 8013e7a:	021b      	lsls	r3, r3, #8
 8013e7c:	4313      	orrs	r3, r2
 8013e7e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013e80:	693b      	ldr	r3, [r7, #16]
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	f003 0301 	and.w	r3, r3, #1
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d023      	beq.n	8013ed4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	2b01      	cmp	r3, #1
 8013e92:	d10f      	bne.n	8013eb4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	785b      	ldrb	r3, [r3, #1]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d11b      	bne.n	8013ed4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013ea0:	2b5e      	cmp	r3, #94	; 0x5e
 8013ea2:	d117      	bne.n	8013ed4 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	7b5b      	ldrb	r3, [r3, #13]
 8013ea8:	f043 0310 	orr.w	r3, r3, #16
 8013eac:	b2da      	uxtb	r2, r3
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	735a      	strb	r2, [r3, #13]
 8013eb2:	e00f      	b.n	8013ed4 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	2206      	movs	r2, #6
 8013eb8:	4930      	ldr	r1, [pc, #192]	; (8013f7c <ethernet_input+0x124>)
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f000 fee2 	bl	8014c84 <memcmp>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d106      	bne.n	8013ed4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	7b5b      	ldrb	r3, [r3, #13]
 8013eca:	f043 0308 	orr.w	r3, r3, #8
 8013ece:	b2da      	uxtb	r2, r3
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013ed4:	89fb      	ldrh	r3, [r7, #14]
 8013ed6:	2b08      	cmp	r3, #8
 8013ed8:	d003      	beq.n	8013ee2 <ethernet_input+0x8a>
 8013eda:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013ede:	d01e      	beq.n	8013f1e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013ee0:	e044      	b.n	8013f6c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013ee8:	f003 0308 	and.w	r3, r3, #8
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d038      	beq.n	8013f62 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	895b      	ldrh	r3, [r3, #10]
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013efa:	429a      	cmp	r2, r3
 8013efc:	db33      	blt.n	8013f66 <ethernet_input+0x10e>
 8013efe:	8afb      	ldrh	r3, [r7, #22]
 8013f00:	425b      	negs	r3, r3
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	b21b      	sxth	r3, r3
 8013f06:	4619      	mov	r1, r3
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f7f8 feeb 	bl	800cce4 <pbuf_header>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d128      	bne.n	8013f66 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8013f14:	6839      	ldr	r1, [r7, #0]
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f7fe ff88 	bl	8012e2c <ip4_input>
      break;
 8013f1c:	e01d      	b.n	8013f5a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013f24:	f003 0308 	and.w	r3, r3, #8
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d01e      	beq.n	8013f6a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	895b      	ldrh	r3, [r3, #10]
 8013f30:	461a      	mov	r2, r3
 8013f32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f36:	429a      	cmp	r2, r3
 8013f38:	db15      	blt.n	8013f66 <ethernet_input+0x10e>
 8013f3a:	8afb      	ldrh	r3, [r7, #22]
 8013f3c:	425b      	negs	r3, r3
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	b21b      	sxth	r3, r3
 8013f42:	4619      	mov	r1, r3
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f7f8 fecd 	bl	800cce4 <pbuf_header>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d10a      	bne.n	8013f66 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8013f50:	6839      	ldr	r1, [r7, #0]
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f7fe f956 	bl	8012204 <etharp_input>
      break;
 8013f58:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	e00a      	b.n	8013f74 <ethernet_input+0x11c>
    goto free_and_return;
 8013f5e:	bf00      	nop
 8013f60:	e004      	b.n	8013f6c <ethernet_input+0x114>
        goto free_and_return;
 8013f62:	bf00      	nop
 8013f64:	e002      	b.n	8013f6c <ethernet_input+0x114>

free_and_return:
 8013f66:	bf00      	nop
 8013f68:	e000      	b.n	8013f6c <ethernet_input+0x114>
        goto free_and_return;
 8013f6a:	bf00      	nop
  pbuf_free(p);
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f7f8 fedd 	bl	800cd2c <pbuf_free>
  return ERR_OK;
 8013f72:	2300      	movs	r3, #0
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	3718      	adds	r7, #24
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	080179fc 	.word	0x080179fc

08013f80 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b086      	sub	sp, #24
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
 8013f8c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013f8e:	8c3b      	ldrh	r3, [r7, #32]
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7f7 fd3b 	bl	800ba0c <lwip_htons>
 8013f96:	4603      	mov	r3, r0
 8013f98:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8013f9a:	210e      	movs	r1, #14
 8013f9c:	68b8      	ldr	r0, [r7, #8]
 8013f9e:	f7f8 fea1 	bl	800cce4 <pbuf_header>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d125      	bne.n	8013ff4 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	8afa      	ldrh	r2, [r7, #22]
 8013fb2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	2206      	movs	r2, #6
 8013fb8:	6839      	ldr	r1, [r7, #0]
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f000 fe71 	bl	8014ca2 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	3306      	adds	r3, #6
 8013fc4:	2206      	movs	r2, #6
 8013fc6:	6879      	ldr	r1, [r7, #4]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f000 fe6a 	bl	8014ca2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013fd4:	2b06      	cmp	r3, #6
 8013fd6:	d006      	beq.n	8013fe6 <ethernet_output+0x66>
 8013fd8:	4b0a      	ldr	r3, [pc, #40]	; (8014004 <ethernet_output+0x84>)
 8013fda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013fde:	490a      	ldr	r1, [pc, #40]	; (8014008 <ethernet_output+0x88>)
 8013fe0:	480a      	ldr	r0, [pc, #40]	; (801400c <ethernet_output+0x8c>)
 8013fe2:	f000 ff19 	bl	8014e18 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	699b      	ldr	r3, [r3, #24]
 8013fea:	68b9      	ldr	r1, [r7, #8]
 8013fec:	68f8      	ldr	r0, [r7, #12]
 8013fee:	4798      	blx	r3
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	e002      	b.n	8013ffa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013ff4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013ff6:	f06f 0301 	mvn.w	r3, #1
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3718      	adds	r7, #24
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
 8014002:	bf00      	nop
 8014004:	08017804 	.word	0x08017804
 8014008:	0801783c 	.word	0x0801783c
 801400c:	08017870 	.word	0x08017870

08014010 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b086      	sub	sp, #24
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	60bb      	str	r3, [r7, #8]
 801401e:	2304      	movs	r3, #4
 8014020:	60fb      	str	r3, [r7, #12]
 8014022:	2300      	movs	r3, #0
 8014024:	613b      	str	r3, [r7, #16]
 8014026:	2300      	movs	r3, #0
 8014028:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801402a:	f107 0308 	add.w	r3, r7, #8
 801402e:	2100      	movs	r1, #0
 8014030:	4618      	mov	r0, r3
 8014032:	f7f4 fe9f 	bl	8008d74 <osMessageCreate>
 8014036:	4602      	mov	r2, r0
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d102      	bne.n	801404a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014048:	e000      	b.n	801404c <sys_mbox_new+0x3c>

  return ERR_OK;
 801404a:	2300      	movs	r3, #0
}
 801404c:	4618      	mov	r0, r3
 801404e:	3718      	adds	r7, #24
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}

08014054 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b082      	sub	sp, #8
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801405e:	bf00      	nop
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	6839      	ldr	r1, [r7, #0]
 8014066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801406a:	4618      	mov	r0, r3
 801406c:	f7f4 feac 	bl	8008dc8 <osMessagePut>
 8014070:	4603      	mov	r3, r0
 8014072:	2b00      	cmp	r3, #0
 8014074:	d1f4      	bne.n	8014060 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8014076:	bf00      	nop
 8014078:	3708      	adds	r7, #8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}

0801407e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801407e:	b580      	push	{r7, lr}
 8014080:	b084      	sub	sp, #16
 8014082:	af00      	add	r7, sp, #0
 8014084:	6078      	str	r0, [r7, #4]
 8014086:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	2200      	movs	r2, #0
 8014090:	4618      	mov	r0, r3
 8014092:	f7f4 fe99 	bl	8008dc8 <osMessagePut>
 8014096:	4603      	mov	r3, r0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d102      	bne.n	80140a2 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801409c:	2300      	movs	r3, #0
 801409e:	73fb      	strb	r3, [r7, #15]
 80140a0:	e001      	b.n	80140a6 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80140a2:	23ff      	movs	r3, #255	; 0xff
 80140a4:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80140a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3710      	adds	r7, #16
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}

080140b2 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80140b2:	b580      	push	{r7, lr}
 80140b4:	b08c      	sub	sp, #48	; 0x30
 80140b6:	af00      	add	r7, sp, #0
 80140b8:	61f8      	str	r0, [r7, #28]
 80140ba:	61b9      	str	r1, [r7, #24]
 80140bc:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80140be:	f7f4 fc94 	bl	80089ea <osKernelSysTick>
 80140c2:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d017      	beq.n	80140fa <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	6819      	ldr	r1, [r3, #0]
 80140ce:	f107 0320 	add.w	r3, r7, #32
 80140d2:	697a      	ldr	r2, [r7, #20]
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7f4 feb7 	bl	8008e48 <osMessageGet>

    if(event.status == osEventMessage)
 80140da:	6a3b      	ldr	r3, [r7, #32]
 80140dc:	2b10      	cmp	r3, #16
 80140de:	d109      	bne.n	80140f4 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80140e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e2:	461a      	mov	r2, r3
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80140e8:	f7f4 fc7f 	bl	80089ea <osKernelSysTick>
 80140ec:	4602      	mov	r2, r0
 80140ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f0:	1ad3      	subs	r3, r2, r3
 80140f2:	e019      	b.n	8014128 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80140f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140f8:	e016      	b.n	8014128 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	6819      	ldr	r1, [r3, #0]
 80140fe:	463b      	mov	r3, r7
 8014100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014104:	4618      	mov	r0, r3
 8014106:	f7f4 fe9f 	bl	8008e48 <osMessageGet>
 801410a:	f107 0320 	add.w	r3, r7, #32
 801410e:	463a      	mov	r2, r7
 8014110:	ca07      	ldmia	r2, {r0, r1, r2}
 8014112:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014118:	461a      	mov	r2, r3
 801411a:	69bb      	ldr	r3, [r7, #24]
 801411c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801411e:	f7f4 fc64 	bl	80089ea <osKernelSysTick>
 8014122:	4602      	mov	r2, r0
 8014124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014126:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014128:	4618      	mov	r0, r3
 801412a:	3730      	adds	r7, #48	; 0x30
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014130:	b480      	push	{r7}
 8014132:	b083      	sub	sp, #12
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d101      	bne.n	8014144 <sys_mbox_valid+0x14>
    return 0;
 8014140:	2300      	movs	r3, #0
 8014142:	e000      	b.n	8014146 <sys_mbox_valid+0x16>
  else
    return 1;
 8014144:	2301      	movs	r3, #1
}
 8014146:	4618      	mov	r0, r3
 8014148:	370c      	adds	r7, #12
 801414a:	46bd      	mov	sp, r7
 801414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014150:	4770      	bx	lr
	...

08014154 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014158:	4803      	ldr	r0, [pc, #12]	; (8014168 <sys_init+0x14>)
 801415a:	f7f4 fcb6 	bl	8008aca <osMutexCreate>
 801415e:	4602      	mov	r2, r0
 8014160:	4b02      	ldr	r3, [pc, #8]	; (801416c <sys_init+0x18>)
 8014162:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014164:	bf00      	nop
 8014166:	bd80      	pop	{r7, pc}
 8014168:	08017a0c 	.word	0x08017a0c
 801416c:	2000ab70 	.word	0x2000ab70

08014170 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014170:	b580      	push	{r7, lr}
 8014172:	b084      	sub	sp, #16
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014178:	2300      	movs	r3, #0
 801417a:	60bb      	str	r3, [r7, #8]
 801417c:	2300      	movs	r3, #0
 801417e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014180:	f107 0308 	add.w	r3, r7, #8
 8014184:	4618      	mov	r0, r3
 8014186:	f7f4 fca0 	bl	8008aca <osMutexCreate>
 801418a:	4602      	mov	r2, r0
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d102      	bne.n	801419e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801419c:	e000      	b.n	80141a0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801419e:	2300      	movs	r3, #0
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	3710      	adds	r7, #16
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}

080141a8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7f4 fc9f 	bl	8008afc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80141be:	bf00      	nop
 80141c0:	3708      	adds	r7, #8
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}

080141c6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80141c6:	b580      	push	{r7, lr}
 80141c8:	b082      	sub	sp, #8
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7f4 fce0 	bl	8008b98 <osMutexRelease>
}
 80141d8:	bf00      	nop
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b08c      	sub	sp, #48	; 0x30
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	607a      	str	r2, [r7, #4]
 80141ec:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80141ee:	f107 0314 	add.w	r3, r7, #20
 80141f2:	2200      	movs	r2, #0
 80141f4:	601a      	str	r2, [r3, #0]
 80141f6:	605a      	str	r2, [r3, #4]
 80141f8:	609a      	str	r2, [r3, #8]
 80141fa:	60da      	str	r2, [r3, #12]
 80141fc:	611a      	str	r2, [r3, #16]
 80141fe:	615a      	str	r2, [r3, #20]
 8014200:	619a      	str	r2, [r3, #24]
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	617b      	str	r3, [r7, #20]
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	61bb      	str	r3, [r7, #24]
 801420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420c:	b21b      	sxth	r3, r3
 801420e:	83bb      	strh	r3, [r7, #28]
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014214:	f107 0314 	add.w	r3, r7, #20
 8014218:	6879      	ldr	r1, [r7, #4]
 801421a:	4618      	mov	r0, r3
 801421c:	f7f4 fbf5 	bl	8008a0a <osThreadCreate>
 8014220:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014222:	4618      	mov	r0, r3
 8014224:	3730      	adds	r7, #48	; 0x30
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}
	...

0801422c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014230:	4b04      	ldr	r3, [pc, #16]	; (8014244 <sys_arch_protect+0x18>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014238:	4618      	mov	r0, r3
 801423a:	f7f4 fc5f 	bl	8008afc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801423e:	2301      	movs	r3, #1
}
 8014240:	4618      	mov	r0, r3
 8014242:	bd80      	pop	{r7, pc}
 8014244:	2000ab70 	.word	0x2000ab70

08014248 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014250:	4b04      	ldr	r3, [pc, #16]	; (8014264 <sys_arch_unprotect+0x1c>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	4618      	mov	r0, r3
 8014256:	f7f4 fc9f 	bl	8008b98 <osMutexRelease>
}
 801425a:	bf00      	nop
 801425c:	3708      	adds	r7, #8
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	2000ab70 	.word	0x2000ab70

08014268 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801426c:	2200      	movs	r2, #0
 801426e:	4912      	ldr	r1, [pc, #72]	; (80142b8 <MX_USB_DEVICE_Init+0x50>)
 8014270:	4812      	ldr	r0, [pc, #72]	; (80142bc <MX_USB_DEVICE_Init+0x54>)
 8014272:	f7f3 fb2e 	bl	80078d2 <USBD_Init>
 8014276:	4603      	mov	r3, r0
 8014278:	2b00      	cmp	r3, #0
 801427a:	d001      	beq.n	8014280 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801427c:	f7ec fe06 	bl	8000e8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014280:	490f      	ldr	r1, [pc, #60]	; (80142c0 <MX_USB_DEVICE_Init+0x58>)
 8014282:	480e      	ldr	r0, [pc, #56]	; (80142bc <MX_USB_DEVICE_Init+0x54>)
 8014284:	f7f3 fb50 	bl	8007928 <USBD_RegisterClass>
 8014288:	4603      	mov	r3, r0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d001      	beq.n	8014292 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801428e:	f7ec fdfd 	bl	8000e8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014292:	490c      	ldr	r1, [pc, #48]	; (80142c4 <MX_USB_DEVICE_Init+0x5c>)
 8014294:	4809      	ldr	r0, [pc, #36]	; (80142bc <MX_USB_DEVICE_Init+0x54>)
 8014296:	f7f3 faad 	bl	80077f4 <USBD_CDC_RegisterInterface>
 801429a:	4603      	mov	r3, r0
 801429c:	2b00      	cmp	r3, #0
 801429e:	d001      	beq.n	80142a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80142a0:	f7ec fdf4 	bl	8000e8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80142a4:	4805      	ldr	r0, [pc, #20]	; (80142bc <MX_USB_DEVICE_Init+0x54>)
 80142a6:	f7f3 fb59 	bl	800795c <USBD_Start>
 80142aa:	4603      	mov	r3, r0
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d001      	beq.n	80142b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80142b0:	f7ec fdec 	bl	8000e8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80142b4:	bf00      	nop
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	20000130 	.word	0x20000130
 80142bc:	2000ab74 	.word	0x2000ab74
 80142c0:	20000014 	.word	0x20000014
 80142c4:	20000120 	.word	0x20000120

080142c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80142cc:	2200      	movs	r2, #0
 80142ce:	4905      	ldr	r1, [pc, #20]	; (80142e4 <CDC_Init_FS+0x1c>)
 80142d0:	4805      	ldr	r0, [pc, #20]	; (80142e8 <CDC_Init_FS+0x20>)
 80142d2:	f7f3 faa6 	bl	8007822 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80142d6:	4905      	ldr	r1, [pc, #20]	; (80142ec <CDC_Init_FS+0x24>)
 80142d8:	4803      	ldr	r0, [pc, #12]	; (80142e8 <CDC_Init_FS+0x20>)
 80142da:	f7f3 fabc 	bl	8007856 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80142de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	2000b610 	.word	0x2000b610
 80142e8:	2000ab74 	.word	0x2000ab74
 80142ec:	2000ae10 	.word	0x2000ae10

080142f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80142f0:	b480      	push	{r7}
 80142f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80142f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr

08014300 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
 8014306:	4603      	mov	r3, r0
 8014308:	6039      	str	r1, [r7, #0]
 801430a:	71fb      	strb	r3, [r7, #7]
 801430c:	4613      	mov	r3, r2
 801430e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014310:	79fb      	ldrb	r3, [r7, #7]
 8014312:	2b23      	cmp	r3, #35	; 0x23
 8014314:	d84a      	bhi.n	80143ac <CDC_Control_FS+0xac>
 8014316:	a201      	add	r2, pc, #4	; (adr r2, 801431c <CDC_Control_FS+0x1c>)
 8014318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801431c:	080143ad 	.word	0x080143ad
 8014320:	080143ad 	.word	0x080143ad
 8014324:	080143ad 	.word	0x080143ad
 8014328:	080143ad 	.word	0x080143ad
 801432c:	080143ad 	.word	0x080143ad
 8014330:	080143ad 	.word	0x080143ad
 8014334:	080143ad 	.word	0x080143ad
 8014338:	080143ad 	.word	0x080143ad
 801433c:	080143ad 	.word	0x080143ad
 8014340:	080143ad 	.word	0x080143ad
 8014344:	080143ad 	.word	0x080143ad
 8014348:	080143ad 	.word	0x080143ad
 801434c:	080143ad 	.word	0x080143ad
 8014350:	080143ad 	.word	0x080143ad
 8014354:	080143ad 	.word	0x080143ad
 8014358:	080143ad 	.word	0x080143ad
 801435c:	080143ad 	.word	0x080143ad
 8014360:	080143ad 	.word	0x080143ad
 8014364:	080143ad 	.word	0x080143ad
 8014368:	080143ad 	.word	0x080143ad
 801436c:	080143ad 	.word	0x080143ad
 8014370:	080143ad 	.word	0x080143ad
 8014374:	080143ad 	.word	0x080143ad
 8014378:	080143ad 	.word	0x080143ad
 801437c:	080143ad 	.word	0x080143ad
 8014380:	080143ad 	.word	0x080143ad
 8014384:	080143ad 	.word	0x080143ad
 8014388:	080143ad 	.word	0x080143ad
 801438c:	080143ad 	.word	0x080143ad
 8014390:	080143ad 	.word	0x080143ad
 8014394:	080143ad 	.word	0x080143ad
 8014398:	080143ad 	.word	0x080143ad
 801439c:	080143ad 	.word	0x080143ad
 80143a0:	080143ad 	.word	0x080143ad
 80143a4:	080143ad 	.word	0x080143ad
 80143a8:	080143ad 	.word	0x080143ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80143ac:	bf00      	nop
  }

  return (USBD_OK);
 80143ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	370c      	adds	r7, #12
 80143b4:	46bd      	mov	sp, r7
 80143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ba:	4770      	bx	lr

080143bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b082      	sub	sp, #8
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
 80143c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80143c6:	6879      	ldr	r1, [r7, #4]
 80143c8:	4805      	ldr	r0, [pc, #20]	; (80143e0 <CDC_Receive_FS+0x24>)
 80143ca:	f7f3 fa44 	bl	8007856 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80143ce:	4804      	ldr	r0, [pc, #16]	; (80143e0 <CDC_Receive_FS+0x24>)
 80143d0:	f7f3 fa55 	bl	800787e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80143d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	2000ab74 	.word	0x2000ab74

080143e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143e4:	b480      	push	{r7}
 80143e6:	b083      	sub	sp, #12
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	4603      	mov	r3, r0
 80143ec:	6039      	str	r1, [r7, #0]
 80143ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	2212      	movs	r2, #18
 80143f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80143f6:	4b03      	ldr	r3, [pc, #12]	; (8014404 <USBD_FS_DeviceDescriptor+0x20>)
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	370c      	adds	r7, #12
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr
 8014404:	2000014c 	.word	0x2000014c

08014408 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014408:	b480      	push	{r7}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
 801440e:	4603      	mov	r3, r0
 8014410:	6039      	str	r1, [r7, #0]
 8014412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	2204      	movs	r2, #4
 8014418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801441a:	4b03      	ldr	r3, [pc, #12]	; (8014428 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801441c:	4618      	mov	r0, r3
 801441e:	370c      	adds	r7, #12
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr
 8014428:	20000160 	.word	0x20000160

0801442c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	4603      	mov	r3, r0
 8014434:	6039      	str	r1, [r7, #0]
 8014436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014438:	79fb      	ldrb	r3, [r7, #7]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d105      	bne.n	801444a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801443e:	683a      	ldr	r2, [r7, #0]
 8014440:	4907      	ldr	r1, [pc, #28]	; (8014460 <USBD_FS_ProductStrDescriptor+0x34>)
 8014442:	4808      	ldr	r0, [pc, #32]	; (8014464 <USBD_FS_ProductStrDescriptor+0x38>)
 8014444:	f7f4 f9c2 	bl	80087cc <USBD_GetString>
 8014448:	e004      	b.n	8014454 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801444a:	683a      	ldr	r2, [r7, #0]
 801444c:	4904      	ldr	r1, [pc, #16]	; (8014460 <USBD_FS_ProductStrDescriptor+0x34>)
 801444e:	4805      	ldr	r0, [pc, #20]	; (8014464 <USBD_FS_ProductStrDescriptor+0x38>)
 8014450:	f7f4 f9bc 	bl	80087cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8014454:	4b02      	ldr	r3, [pc, #8]	; (8014460 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014456:	4618      	mov	r0, r3
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	2000be10 	.word	0x2000be10
 8014464:	08017898 	.word	0x08017898

08014468 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b082      	sub	sp, #8
 801446c:	af00      	add	r7, sp, #0
 801446e:	4603      	mov	r3, r0
 8014470:	6039      	str	r1, [r7, #0]
 8014472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014474:	683a      	ldr	r2, [r7, #0]
 8014476:	4904      	ldr	r1, [pc, #16]	; (8014488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014478:	4804      	ldr	r0, [pc, #16]	; (801448c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801447a:	f7f4 f9a7 	bl	80087cc <USBD_GetString>
  return USBD_StrDesc;
 801447e:	4b02      	ldr	r3, [pc, #8]	; (8014488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014480:	4618      	mov	r0, r3
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	2000be10 	.word	0x2000be10
 801448c:	080178b0 	.word	0x080178b0

08014490 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	4603      	mov	r3, r0
 8014498:	6039      	str	r1, [r7, #0]
 801449a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	221a      	movs	r2, #26
 80144a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80144a2:	f000 f843 	bl	801452c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80144a6:	4b02      	ldr	r3, [pc, #8]	; (80144b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3708      	adds	r7, #8
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	20000164 	.word	0x20000164

080144b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	4603      	mov	r3, r0
 80144bc:	6039      	str	r1, [r7, #0]
 80144be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80144c0:	79fb      	ldrb	r3, [r7, #7]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d105      	bne.n	80144d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80144c6:	683a      	ldr	r2, [r7, #0]
 80144c8:	4907      	ldr	r1, [pc, #28]	; (80144e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80144ca:	4808      	ldr	r0, [pc, #32]	; (80144ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80144cc:	f7f4 f97e 	bl	80087cc <USBD_GetString>
 80144d0:	e004      	b.n	80144dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80144d2:	683a      	ldr	r2, [r7, #0]
 80144d4:	4904      	ldr	r1, [pc, #16]	; (80144e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80144d6:	4805      	ldr	r0, [pc, #20]	; (80144ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80144d8:	f7f4 f978 	bl	80087cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80144dc:	4b02      	ldr	r3, [pc, #8]	; (80144e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3708      	adds	r7, #8
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	2000be10 	.word	0x2000be10
 80144ec:	080178c4 	.word	0x080178c4

080144f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	4603      	mov	r3, r0
 80144f8:	6039      	str	r1, [r7, #0]
 80144fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80144fc:	79fb      	ldrb	r3, [r7, #7]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d105      	bne.n	801450e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014502:	683a      	ldr	r2, [r7, #0]
 8014504:	4907      	ldr	r1, [pc, #28]	; (8014524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014506:	4808      	ldr	r0, [pc, #32]	; (8014528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014508:	f7f4 f960 	bl	80087cc <USBD_GetString>
 801450c:	e004      	b.n	8014518 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801450e:	683a      	ldr	r2, [r7, #0]
 8014510:	4904      	ldr	r1, [pc, #16]	; (8014524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014512:	4805      	ldr	r0, [pc, #20]	; (8014528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014514:	f7f4 f95a 	bl	80087cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8014518:	4b02      	ldr	r3, [pc, #8]	; (8014524 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801451a:	4618      	mov	r0, r3
 801451c:	3708      	adds	r7, #8
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	2000be10 	.word	0x2000be10
 8014528:	080178d0 	.word	0x080178d0

0801452c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014532:	4b0f      	ldr	r3, [pc, #60]	; (8014570 <Get_SerialNum+0x44>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014538:	4b0e      	ldr	r3, [pc, #56]	; (8014574 <Get_SerialNum+0x48>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801453e:	4b0e      	ldr	r3, [pc, #56]	; (8014578 <Get_SerialNum+0x4c>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014544:	68fa      	ldr	r2, [r7, #12]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	4413      	add	r3, r2
 801454a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d009      	beq.n	8014566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014552:	2208      	movs	r2, #8
 8014554:	4909      	ldr	r1, [pc, #36]	; (801457c <Get_SerialNum+0x50>)
 8014556:	68f8      	ldr	r0, [r7, #12]
 8014558:	f000 f814 	bl	8014584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801455c:	2204      	movs	r2, #4
 801455e:	4908      	ldr	r1, [pc, #32]	; (8014580 <Get_SerialNum+0x54>)
 8014560:	68b8      	ldr	r0, [r7, #8]
 8014562:	f000 f80f 	bl	8014584 <IntToUnicode>
  }
}
 8014566:	bf00      	nop
 8014568:	3710      	adds	r7, #16
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	1fff7a10 	.word	0x1fff7a10
 8014574:	1fff7a14 	.word	0x1fff7a14
 8014578:	1fff7a18 	.word	0x1fff7a18
 801457c:	20000166 	.word	0x20000166
 8014580:	20000176 	.word	0x20000176

08014584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014584:	b480      	push	{r7}
 8014586:	b087      	sub	sp, #28
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	4613      	mov	r3, r2
 8014590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014592:	2300      	movs	r3, #0
 8014594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014596:	2300      	movs	r3, #0
 8014598:	75fb      	strb	r3, [r7, #23]
 801459a:	e027      	b.n	80145ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	0f1b      	lsrs	r3, r3, #28
 80145a0:	2b09      	cmp	r3, #9
 80145a2:	d80b      	bhi.n	80145bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	0f1b      	lsrs	r3, r3, #28
 80145a8:	b2da      	uxtb	r2, r3
 80145aa:	7dfb      	ldrb	r3, [r7, #23]
 80145ac:	005b      	lsls	r3, r3, #1
 80145ae:	4619      	mov	r1, r3
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	440b      	add	r3, r1
 80145b4:	3230      	adds	r2, #48	; 0x30
 80145b6:	b2d2      	uxtb	r2, r2
 80145b8:	701a      	strb	r2, [r3, #0]
 80145ba:	e00a      	b.n	80145d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	0f1b      	lsrs	r3, r3, #28
 80145c0:	b2da      	uxtb	r2, r3
 80145c2:	7dfb      	ldrb	r3, [r7, #23]
 80145c4:	005b      	lsls	r3, r3, #1
 80145c6:	4619      	mov	r1, r3
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	440b      	add	r3, r1
 80145cc:	3237      	adds	r2, #55	; 0x37
 80145ce:	b2d2      	uxtb	r2, r2
 80145d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	011b      	lsls	r3, r3, #4
 80145d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80145d8:	7dfb      	ldrb	r3, [r7, #23]
 80145da:	005b      	lsls	r3, r3, #1
 80145dc:	3301      	adds	r3, #1
 80145de:	68ba      	ldr	r2, [r7, #8]
 80145e0:	4413      	add	r3, r2
 80145e2:	2200      	movs	r2, #0
 80145e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80145e6:	7dfb      	ldrb	r3, [r7, #23]
 80145e8:	3301      	adds	r3, #1
 80145ea:	75fb      	strb	r3, [r7, #23]
 80145ec:	7dfa      	ldrb	r2, [r7, #23]
 80145ee:	79fb      	ldrb	r3, [r7, #7]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d3d3      	bcc.n	801459c <IntToUnicode+0x18>
  }
}
 80145f4:	bf00      	nop
 80145f6:	371c      	adds	r7, #28
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr

08014600 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b08a      	sub	sp, #40	; 0x28
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014608:	f107 0314 	add.w	r3, r7, #20
 801460c:	2200      	movs	r2, #0
 801460e:	601a      	str	r2, [r3, #0]
 8014610:	605a      	str	r2, [r3, #4]
 8014612:	609a      	str	r2, [r3, #8]
 8014614:	60da      	str	r2, [r3, #12]
 8014616:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014620:	d147      	bne.n	80146b2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014622:	2300      	movs	r3, #0
 8014624:	613b      	str	r3, [r7, #16]
 8014626:	4b25      	ldr	r3, [pc, #148]	; (80146bc <HAL_PCD_MspInit+0xbc>)
 8014628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801462a:	4a24      	ldr	r2, [pc, #144]	; (80146bc <HAL_PCD_MspInit+0xbc>)
 801462c:	f043 0301 	orr.w	r3, r3, #1
 8014630:	6313      	str	r3, [r2, #48]	; 0x30
 8014632:	4b22      	ldr	r3, [pc, #136]	; (80146bc <HAL_PCD_MspInit+0xbc>)
 8014634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014636:	f003 0301 	and.w	r3, r3, #1
 801463a:	613b      	str	r3, [r7, #16]
 801463c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801463e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8014642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014644:	2302      	movs	r3, #2
 8014646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014648:	2300      	movs	r3, #0
 801464a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801464c:	2303      	movs	r3, #3
 801464e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014650:	230a      	movs	r3, #10
 8014652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014654:	f107 0314 	add.w	r3, r7, #20
 8014658:	4619      	mov	r1, r3
 801465a:	4819      	ldr	r0, [pc, #100]	; (80146c0 <HAL_PCD_MspInit+0xc0>)
 801465c:	f7ed ffd8 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8014660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014666:	2300      	movs	r3, #0
 8014668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801466a:	2300      	movs	r3, #0
 801466c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801466e:	f107 0314 	add.w	r3, r7, #20
 8014672:	4619      	mov	r1, r3
 8014674:	4812      	ldr	r0, [pc, #72]	; (80146c0 <HAL_PCD_MspInit+0xc0>)
 8014676:	f7ed ffcb 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801467a:	4b10      	ldr	r3, [pc, #64]	; (80146bc <HAL_PCD_MspInit+0xbc>)
 801467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801467e:	4a0f      	ldr	r2, [pc, #60]	; (80146bc <HAL_PCD_MspInit+0xbc>)
 8014680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014684:	6353      	str	r3, [r2, #52]	; 0x34
 8014686:	2300      	movs	r3, #0
 8014688:	60fb      	str	r3, [r7, #12]
 801468a:	4b0c      	ldr	r3, [pc, #48]	; (80146bc <HAL_PCD_MspInit+0xbc>)
 801468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801468e:	4a0b      	ldr	r2, [pc, #44]	; (80146bc <HAL_PCD_MspInit+0xbc>)
 8014690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014694:	6453      	str	r3, [r2, #68]	; 0x44
 8014696:	4b09      	ldr	r3, [pc, #36]	; (80146bc <HAL_PCD_MspInit+0xbc>)
 8014698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801469a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801469e:	60fb      	str	r3, [r7, #12]
 80146a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80146a2:	2200      	movs	r2, #0
 80146a4:	2105      	movs	r1, #5
 80146a6:	2043      	movs	r0, #67	; 0x43
 80146a8:	f7ec ff76 	bl	8001598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80146ac:	2043      	movs	r0, #67	; 0x43
 80146ae:	f7ec ff8f 	bl	80015d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80146b2:	bf00      	nop
 80146b4:	3728      	adds	r7, #40	; 0x28
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	40023800 	.word	0x40023800
 80146c0:	40020000 	.word	0x40020000

080146c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80146d8:	4619      	mov	r1, r3
 80146da:	4610      	mov	r0, r2
 80146dc:	f7f3 f987 	bl	80079ee <USBD_LL_SetupStage>
}
 80146e0:	bf00      	nop
 80146e2:	3708      	adds	r7, #8
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}

080146e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	460b      	mov	r3, r1
 80146f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80146fa:	78fa      	ldrb	r2, [r7, #3]
 80146fc:	6879      	ldr	r1, [r7, #4]
 80146fe:	4613      	mov	r3, r2
 8014700:	00db      	lsls	r3, r3, #3
 8014702:	1a9b      	subs	r3, r3, r2
 8014704:	009b      	lsls	r3, r3, #2
 8014706:	440b      	add	r3, r1
 8014708:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801470c:	681a      	ldr	r2, [r3, #0]
 801470e:	78fb      	ldrb	r3, [r7, #3]
 8014710:	4619      	mov	r1, r3
 8014712:	f7f3 f9b7 	bl	8007a84 <USBD_LL_DataOutStage>
}
 8014716:	bf00      	nop
 8014718:	3708      	adds	r7, #8
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801471e:	b580      	push	{r7, lr}
 8014720:	b082      	sub	sp, #8
 8014722:	af00      	add	r7, sp, #0
 8014724:	6078      	str	r0, [r7, #4]
 8014726:	460b      	mov	r3, r1
 8014728:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014730:	78fa      	ldrb	r2, [r7, #3]
 8014732:	6879      	ldr	r1, [r7, #4]
 8014734:	4613      	mov	r3, r2
 8014736:	00db      	lsls	r3, r3, #3
 8014738:	1a9b      	subs	r3, r3, r2
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	440b      	add	r3, r1
 801473e:	3348      	adds	r3, #72	; 0x48
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	78fb      	ldrb	r3, [r7, #3]
 8014744:	4619      	mov	r1, r3
 8014746:	f7f3 fa0e 	bl	8007b66 <USBD_LL_DataInStage>
}
 801474a:	bf00      	nop
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014752:	b580      	push	{r7, lr}
 8014754:	b082      	sub	sp, #8
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014760:	4618      	mov	r0, r3
 8014762:	f7f3 fb1c 	bl	8007d9e <USBD_LL_SOF>
}
 8014766:	bf00      	nop
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}

0801476e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801476e:	b580      	push	{r7, lr}
 8014770:	b084      	sub	sp, #16
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014776:	2301      	movs	r3, #1
 8014778:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	68db      	ldr	r3, [r3, #12]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d102      	bne.n	8014788 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014782:	2300      	movs	r3, #0
 8014784:	73fb      	strb	r3, [r7, #15]
 8014786:	e008      	b.n	801479a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	2b02      	cmp	r3, #2
 801478e:	d102      	bne.n	8014796 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014790:	2301      	movs	r3, #1
 8014792:	73fb      	strb	r3, [r7, #15]
 8014794:	e001      	b.n	801479a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014796:	f7ec fb79 	bl	8000e8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80147a0:	7bfa      	ldrb	r2, [r7, #15]
 80147a2:	4611      	mov	r1, r2
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7f3 fac4 	bl	8007d32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7f3 fa7d 	bl	8007cb0 <USBD_LL_Reset>
}
 80147b6:	bf00      	nop
 80147b8:	3710      	adds	r7, #16
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}
	...

080147c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b082      	sub	sp, #8
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7f3 fabf 	bl	8007d52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	687a      	ldr	r2, [r7, #4]
 80147e0:	6812      	ldr	r2, [r2, #0]
 80147e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80147e6:	f043 0301 	orr.w	r3, r3, #1
 80147ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6a1b      	ldr	r3, [r3, #32]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d005      	beq.n	8014800 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80147f4:	4b04      	ldr	r3, [pc, #16]	; (8014808 <HAL_PCD_SuspendCallback+0x48>)
 80147f6:	691b      	ldr	r3, [r3, #16]
 80147f8:	4a03      	ldr	r2, [pc, #12]	; (8014808 <HAL_PCD_SuspendCallback+0x48>)
 80147fa:	f043 0306 	orr.w	r3, r3, #6
 80147fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014800:	bf00      	nop
 8014802:	3708      	adds	r7, #8
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}
 8014808:	e000ed00 	.word	0xe000ed00

0801480c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801481a:	4618      	mov	r0, r3
 801481c:	f7f3 faae 	bl	8007d7c <USBD_LL_Resume>
}
 8014820:	bf00      	nop
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	460b      	mov	r3, r1
 8014832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801483a:	78fa      	ldrb	r2, [r7, #3]
 801483c:	4611      	mov	r1, r2
 801483e:	4618      	mov	r0, r3
 8014840:	f7f3 fad4 	bl	8007dec <USBD_LL_IsoOUTIncomplete>
}
 8014844:	bf00      	nop
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	460b      	mov	r3, r1
 8014856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801485e:	78fa      	ldrb	r2, [r7, #3]
 8014860:	4611      	mov	r1, r2
 8014862:	4618      	mov	r0, r3
 8014864:	f7f3 fab5 	bl	8007dd2 <USBD_LL_IsoINIncomplete>
}
 8014868:	bf00      	nop
 801486a:	3708      	adds	r7, #8
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}

08014870 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801487e:	4618      	mov	r0, r3
 8014880:	f7f3 fac1 	bl	8007e06 <USBD_LL_DevConnected>
}
 8014884:	bf00      	nop
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}

0801488c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801489a:	4618      	mov	r0, r3
 801489c:	f7f3 fabe 	bl	8007e1c <USBD_LL_DevDisconnected>
}
 80148a0:	bf00      	nop
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d13c      	bne.n	8014932 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80148b8:	4a20      	ldr	r2, [pc, #128]	; (801493c <USBD_LL_Init+0x94>)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	4a1e      	ldr	r2, [pc, #120]	; (801493c <USBD_LL_Init+0x94>)
 80148c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80148c8:	4b1c      	ldr	r3, [pc, #112]	; (801493c <USBD_LL_Init+0x94>)
 80148ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80148ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80148d0:	4b1a      	ldr	r3, [pc, #104]	; (801493c <USBD_LL_Init+0x94>)
 80148d2:	2204      	movs	r2, #4
 80148d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80148d6:	4b19      	ldr	r3, [pc, #100]	; (801493c <USBD_LL_Init+0x94>)
 80148d8:	2202      	movs	r2, #2
 80148da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80148dc:	4b17      	ldr	r3, [pc, #92]	; (801493c <USBD_LL_Init+0x94>)
 80148de:	2200      	movs	r2, #0
 80148e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80148e2:	4b16      	ldr	r3, [pc, #88]	; (801493c <USBD_LL_Init+0x94>)
 80148e4:	2202      	movs	r2, #2
 80148e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80148e8:	4b14      	ldr	r3, [pc, #80]	; (801493c <USBD_LL_Init+0x94>)
 80148ea:	2201      	movs	r2, #1
 80148ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80148ee:	4b13      	ldr	r3, [pc, #76]	; (801493c <USBD_LL_Init+0x94>)
 80148f0:	2200      	movs	r2, #0
 80148f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80148f4:	4b11      	ldr	r3, [pc, #68]	; (801493c <USBD_LL_Init+0x94>)
 80148f6:	2200      	movs	r2, #0
 80148f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80148fa:	4b10      	ldr	r3, [pc, #64]	; (801493c <USBD_LL_Init+0x94>)
 80148fc:	2201      	movs	r2, #1
 80148fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014900:	4b0e      	ldr	r3, [pc, #56]	; (801493c <USBD_LL_Init+0x94>)
 8014902:	2200      	movs	r2, #0
 8014904:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014906:	480d      	ldr	r0, [pc, #52]	; (801493c <USBD_LL_Init+0x94>)
 8014908:	f7ee f845 	bl	8002996 <HAL_PCD_Init>
 801490c:	4603      	mov	r3, r0
 801490e:	2b00      	cmp	r3, #0
 8014910:	d001      	beq.n	8014916 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014912:	f7ec fabb 	bl	8000e8c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014916:	2180      	movs	r1, #128	; 0x80
 8014918:	4808      	ldr	r0, [pc, #32]	; (801493c <USBD_LL_Init+0x94>)
 801491a:	f7ef f9aa 	bl	8003c72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801491e:	2240      	movs	r2, #64	; 0x40
 8014920:	2100      	movs	r1, #0
 8014922:	4806      	ldr	r0, [pc, #24]	; (801493c <USBD_LL_Init+0x94>)
 8014924:	f7ef f95e 	bl	8003be4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014928:	2280      	movs	r2, #128	; 0x80
 801492a:	2101      	movs	r1, #1
 801492c:	4803      	ldr	r0, [pc, #12]	; (801493c <USBD_LL_Init+0x94>)
 801492e:	f7ef f959 	bl	8003be4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014932:	2300      	movs	r3, #0
}
 8014934:	4618      	mov	r0, r3
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	2000c010 	.word	0x2000c010

08014940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014948:	2300      	movs	r3, #0
 801494a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801494c:	2300      	movs	r3, #0
 801494e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014956:	4618      	mov	r0, r3
 8014958:	f7ee f93a 	bl	8002bd0 <HAL_PCD_Start>
 801495c:	4603      	mov	r3, r0
 801495e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8014960:	7bfb      	ldrb	r3, [r7, #15]
 8014962:	4618      	mov	r0, r3
 8014964:	f000 f92e 	bl	8014bc4 <USBD_Get_USB_Status>
 8014968:	4603      	mov	r3, r0
 801496a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801496c:	7bbb      	ldrb	r3, [r7, #14]
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014976:	b580      	push	{r7, lr}
 8014978:	b084      	sub	sp, #16
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	4608      	mov	r0, r1
 8014980:	4611      	mov	r1, r2
 8014982:	461a      	mov	r2, r3
 8014984:	4603      	mov	r3, r0
 8014986:	70fb      	strb	r3, [r7, #3]
 8014988:	460b      	mov	r3, r1
 801498a:	70bb      	strb	r3, [r7, #2]
 801498c:	4613      	mov	r3, r2
 801498e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014990:	2300      	movs	r3, #0
 8014992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014994:	2300      	movs	r3, #0
 8014996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801499e:	78bb      	ldrb	r3, [r7, #2]
 80149a0:	883a      	ldrh	r2, [r7, #0]
 80149a2:	78f9      	ldrb	r1, [r7, #3]
 80149a4:	f7ee fd0f 	bl	80033c6 <HAL_PCD_EP_Open>
 80149a8:	4603      	mov	r3, r0
 80149aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80149ac:	7bfb      	ldrb	r3, [r7, #15]
 80149ae:	4618      	mov	r0, r3
 80149b0:	f000 f908 	bl	8014bc4 <USBD_Get_USB_Status>
 80149b4:	4603      	mov	r3, r0
 80149b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80149b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3710      	adds	r7, #16
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b084      	sub	sp, #16
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
 80149ca:	460b      	mov	r3, r1
 80149cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149ce:	2300      	movs	r3, #0
 80149d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149d2:	2300      	movs	r3, #0
 80149d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80149dc:	78fa      	ldrb	r2, [r7, #3]
 80149de:	4611      	mov	r1, r2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7ee fd58 	bl	8003496 <HAL_PCD_EP_Close>
 80149e6:	4603      	mov	r3, r0
 80149e8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80149ea:	7bfb      	ldrb	r3, [r7, #15]
 80149ec:	4618      	mov	r0, r3
 80149ee:	f000 f8e9 	bl	8014bc4 <USBD_Get_USB_Status>
 80149f2:	4603      	mov	r3, r0
 80149f4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80149f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3710      	adds	r7, #16
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b084      	sub	sp, #16
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	460b      	mov	r3, r1
 8014a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a10:	2300      	movs	r3, #0
 8014a12:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014a1a:	78fa      	ldrb	r2, [r7, #3]
 8014a1c:	4611      	mov	r1, r2
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7ee fe30 	bl	8003684 <HAL_PCD_EP_SetStall>
 8014a24:	4603      	mov	r3, r0
 8014a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a28:	7bfb      	ldrb	r3, [r7, #15]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f000 f8ca 	bl	8014bc4 <USBD_Get_USB_Status>
 8014a30:	4603      	mov	r3, r0
 8014a32:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}

08014a3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a3e:	b580      	push	{r7, lr}
 8014a40:	b084      	sub	sp, #16
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	6078      	str	r0, [r7, #4]
 8014a46:	460b      	mov	r3, r1
 8014a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014a58:	78fa      	ldrb	r2, [r7, #3]
 8014a5a:	4611      	mov	r1, r2
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7ee fe75 	bl	800374c <HAL_PCD_EP_ClrStall>
 8014a62:	4603      	mov	r3, r0
 8014a64:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8014a66:	7bfb      	ldrb	r3, [r7, #15]
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f000 f8ab 	bl	8014bc4 <USBD_Get_USB_Status>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8014a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3710      	adds	r7, #16
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}

08014a7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b085      	sub	sp, #20
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	460b      	mov	r3, r1
 8014a86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014a8e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8014a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	da0b      	bge.n	8014ab0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8014a98:	78fb      	ldrb	r3, [r7, #3]
 8014a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014a9e:	68f9      	ldr	r1, [r7, #12]
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	00db      	lsls	r3, r3, #3
 8014aa4:	1a9b      	subs	r3, r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	440b      	add	r3, r1
 8014aaa:	333e      	adds	r3, #62	; 0x3e
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	e00b      	b.n	8014ac8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8014ab0:	78fb      	ldrb	r3, [r7, #3]
 8014ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ab6:	68f9      	ldr	r1, [r7, #12]
 8014ab8:	4613      	mov	r3, r2
 8014aba:	00db      	lsls	r3, r3, #3
 8014abc:	1a9b      	subs	r3, r3, r2
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	440b      	add	r3, r1
 8014ac2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014ac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3714      	adds	r7, #20
 8014acc:	46bd      	mov	sp, r7
 8014ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad2:	4770      	bx	lr

08014ad4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b084      	sub	sp, #16
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	460b      	mov	r3, r1
 8014ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014aee:	78fa      	ldrb	r2, [r7, #3]
 8014af0:	4611      	mov	r1, r2
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7ee fc42 	bl	800337c <HAL_PCD_SetAddress>
 8014af8:	4603      	mov	r3, r0
 8014afa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8014afc:	7bfb      	ldrb	r3, [r7, #15]
 8014afe:	4618      	mov	r0, r3
 8014b00:	f000 f860 	bl	8014bc4 <USBD_Get_USB_Status>
 8014b04:	4603      	mov	r3, r0
 8014b06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}

08014b12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014b12:	b580      	push	{r7, lr}
 8014b14:	b086      	sub	sp, #24
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	60f8      	str	r0, [r7, #12]
 8014b1a:	607a      	str	r2, [r7, #4]
 8014b1c:	461a      	mov	r2, r3
 8014b1e:	460b      	mov	r3, r1
 8014b20:	72fb      	strb	r3, [r7, #11]
 8014b22:	4613      	mov	r3, r2
 8014b24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b26:	2300      	movs	r3, #0
 8014b28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014b34:	893b      	ldrh	r3, [r7, #8]
 8014b36:	7af9      	ldrb	r1, [r7, #11]
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	f7ee fd59 	bl	80035f0 <HAL_PCD_EP_Transmit>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8014b42:	7dfb      	ldrb	r3, [r7, #23]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f000 f83d 	bl	8014bc4 <USBD_Get_USB_Status>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8014b4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3718      	adds	r7, #24
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}

08014b58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b086      	sub	sp, #24
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	607a      	str	r2, [r7, #4]
 8014b62:	461a      	mov	r2, r3
 8014b64:	460b      	mov	r3, r1
 8014b66:	72fb      	strb	r3, [r7, #11]
 8014b68:	4613      	mov	r3, r2
 8014b6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b70:	2300      	movs	r3, #0
 8014b72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014b7a:	893b      	ldrh	r3, [r7, #8]
 8014b7c:	7af9      	ldrb	r1, [r7, #11]
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	f7ee fcd3 	bl	800352a <HAL_PCD_EP_Receive>
 8014b84:	4603      	mov	r3, r0
 8014b86:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8014b88:	7dfb      	ldrb	r3, [r7, #23]
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f000 f81a 	bl	8014bc4 <USBD_Get_USB_Status>
 8014b90:	4603      	mov	r3, r0
 8014b92:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8014b94:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3718      	adds	r7, #24
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b082      	sub	sp, #8
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	6078      	str	r0, [r7, #4]
 8014ba6:	460b      	mov	r3, r1
 8014ba8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014bb0:	78fa      	ldrb	r2, [r7, #3]
 8014bb2:	4611      	mov	r1, r2
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7ee fd03 	bl	80035c0 <HAL_PCD_EP_GetRxCount>
 8014bba:	4603      	mov	r3, r0
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3708      	adds	r7, #8
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}

08014bc4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b085      	sub	sp, #20
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	4603      	mov	r3, r0
 8014bcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bce:	2300      	movs	r3, #0
 8014bd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014bd2:	79fb      	ldrb	r3, [r7, #7]
 8014bd4:	2b03      	cmp	r3, #3
 8014bd6:	d817      	bhi.n	8014c08 <USBD_Get_USB_Status+0x44>
 8014bd8:	a201      	add	r2, pc, #4	; (adr r2, 8014be0 <USBD_Get_USB_Status+0x1c>)
 8014bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bde:	bf00      	nop
 8014be0:	08014bf1 	.word	0x08014bf1
 8014be4:	08014bf7 	.word	0x08014bf7
 8014be8:	08014bfd 	.word	0x08014bfd
 8014bec:	08014c03 	.word	0x08014c03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8014bf4:	e00b      	b.n	8014c0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014bf6:	2302      	movs	r3, #2
 8014bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8014bfa:	e008      	b.n	8014c0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014bfc:	2301      	movs	r3, #1
 8014bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8014c00:	e005      	b.n	8014c0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014c02:	2302      	movs	r3, #2
 8014c04:	73fb      	strb	r3, [r7, #15]
    break;
 8014c06:	e002      	b.n	8014c0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014c08:	2302      	movs	r3, #2
 8014c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8014c0c:	bf00      	nop
  }
  return usb_status;
 8014c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3714      	adds	r7, #20
 8014c14:	46bd      	mov	sp, r7
 8014c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1a:	4770      	bx	lr

08014c1c <__libc_init_array>:
 8014c1c:	b570      	push	{r4, r5, r6, lr}
 8014c1e:	4e0d      	ldr	r6, [pc, #52]	; (8014c54 <__libc_init_array+0x38>)
 8014c20:	4c0d      	ldr	r4, [pc, #52]	; (8014c58 <__libc_init_array+0x3c>)
 8014c22:	1ba4      	subs	r4, r4, r6
 8014c24:	10a4      	asrs	r4, r4, #2
 8014c26:	2500      	movs	r5, #0
 8014c28:	42a5      	cmp	r5, r4
 8014c2a:	d109      	bne.n	8014c40 <__libc_init_array+0x24>
 8014c2c:	4e0b      	ldr	r6, [pc, #44]	; (8014c5c <__libc_init_array+0x40>)
 8014c2e:	4c0c      	ldr	r4, [pc, #48]	; (8014c60 <__libc_init_array+0x44>)
 8014c30:	f000 ff2e 	bl	8015a90 <_init>
 8014c34:	1ba4      	subs	r4, r4, r6
 8014c36:	10a4      	asrs	r4, r4, #2
 8014c38:	2500      	movs	r5, #0
 8014c3a:	42a5      	cmp	r5, r4
 8014c3c:	d105      	bne.n	8014c4a <__libc_init_array+0x2e>
 8014c3e:	bd70      	pop	{r4, r5, r6, pc}
 8014c40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014c44:	4798      	blx	r3
 8014c46:	3501      	adds	r5, #1
 8014c48:	e7ee      	b.n	8014c28 <__libc_init_array+0xc>
 8014c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014c4e:	4798      	blx	r3
 8014c50:	3501      	adds	r5, #1
 8014c52:	e7f2      	b.n	8014c3a <__libc_init_array+0x1e>
 8014c54:	08017ab4 	.word	0x08017ab4
 8014c58:	08017ab4 	.word	0x08017ab4
 8014c5c:	08017ab4 	.word	0x08017ab4
 8014c60:	08017ab8 	.word	0x08017ab8

08014c64 <malloc>:
 8014c64:	4b02      	ldr	r3, [pc, #8]	; (8014c70 <malloc+0xc>)
 8014c66:	4601      	mov	r1, r0
 8014c68:	6818      	ldr	r0, [r3, #0]
 8014c6a:	f000 b87b 	b.w	8014d64 <_malloc_r>
 8014c6e:	bf00      	nop
 8014c70:	20000180 	.word	0x20000180

08014c74 <free>:
 8014c74:	4b02      	ldr	r3, [pc, #8]	; (8014c80 <free+0xc>)
 8014c76:	4601      	mov	r1, r0
 8014c78:	6818      	ldr	r0, [r3, #0]
 8014c7a:	f000 b825 	b.w	8014cc8 <_free_r>
 8014c7e:	bf00      	nop
 8014c80:	20000180 	.word	0x20000180

08014c84 <memcmp>:
 8014c84:	b530      	push	{r4, r5, lr}
 8014c86:	2400      	movs	r4, #0
 8014c88:	42a2      	cmp	r2, r4
 8014c8a:	d101      	bne.n	8014c90 <memcmp+0xc>
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	e007      	b.n	8014ca0 <memcmp+0x1c>
 8014c90:	5d03      	ldrb	r3, [r0, r4]
 8014c92:	3401      	adds	r4, #1
 8014c94:	190d      	adds	r5, r1, r4
 8014c96:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014c9a:	42ab      	cmp	r3, r5
 8014c9c:	d0f4      	beq.n	8014c88 <memcmp+0x4>
 8014c9e:	1b58      	subs	r0, r3, r5
 8014ca0:	bd30      	pop	{r4, r5, pc}

08014ca2 <memcpy>:
 8014ca2:	b510      	push	{r4, lr}
 8014ca4:	1e43      	subs	r3, r0, #1
 8014ca6:	440a      	add	r2, r1
 8014ca8:	4291      	cmp	r1, r2
 8014caa:	d100      	bne.n	8014cae <memcpy+0xc>
 8014cac:	bd10      	pop	{r4, pc}
 8014cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014cb6:	e7f7      	b.n	8014ca8 <memcpy+0x6>

08014cb8 <memset>:
 8014cb8:	4402      	add	r2, r0
 8014cba:	4603      	mov	r3, r0
 8014cbc:	4293      	cmp	r3, r2
 8014cbe:	d100      	bne.n	8014cc2 <memset+0xa>
 8014cc0:	4770      	bx	lr
 8014cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8014cc6:	e7f9      	b.n	8014cbc <memset+0x4>

08014cc8 <_free_r>:
 8014cc8:	b538      	push	{r3, r4, r5, lr}
 8014cca:	4605      	mov	r5, r0
 8014ccc:	2900      	cmp	r1, #0
 8014cce:	d045      	beq.n	8014d5c <_free_r+0x94>
 8014cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cd4:	1f0c      	subs	r4, r1, #4
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	bfb8      	it	lt
 8014cda:	18e4      	addlt	r4, r4, r3
 8014cdc:	f000 f98e 	bl	8014ffc <__malloc_lock>
 8014ce0:	4a1f      	ldr	r2, [pc, #124]	; (8014d60 <_free_r+0x98>)
 8014ce2:	6813      	ldr	r3, [r2, #0]
 8014ce4:	4610      	mov	r0, r2
 8014ce6:	b933      	cbnz	r3, 8014cf6 <_free_r+0x2e>
 8014ce8:	6063      	str	r3, [r4, #4]
 8014cea:	6014      	str	r4, [r2, #0]
 8014cec:	4628      	mov	r0, r5
 8014cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cf2:	f000 b984 	b.w	8014ffe <__malloc_unlock>
 8014cf6:	42a3      	cmp	r3, r4
 8014cf8:	d90c      	bls.n	8014d14 <_free_r+0x4c>
 8014cfa:	6821      	ldr	r1, [r4, #0]
 8014cfc:	1862      	adds	r2, r4, r1
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	bf04      	itt	eq
 8014d02:	681a      	ldreq	r2, [r3, #0]
 8014d04:	685b      	ldreq	r3, [r3, #4]
 8014d06:	6063      	str	r3, [r4, #4]
 8014d08:	bf04      	itt	eq
 8014d0a:	1852      	addeq	r2, r2, r1
 8014d0c:	6022      	streq	r2, [r4, #0]
 8014d0e:	6004      	str	r4, [r0, #0]
 8014d10:	e7ec      	b.n	8014cec <_free_r+0x24>
 8014d12:	4613      	mov	r3, r2
 8014d14:	685a      	ldr	r2, [r3, #4]
 8014d16:	b10a      	cbz	r2, 8014d1c <_free_r+0x54>
 8014d18:	42a2      	cmp	r2, r4
 8014d1a:	d9fa      	bls.n	8014d12 <_free_r+0x4a>
 8014d1c:	6819      	ldr	r1, [r3, #0]
 8014d1e:	1858      	adds	r0, r3, r1
 8014d20:	42a0      	cmp	r0, r4
 8014d22:	d10b      	bne.n	8014d3c <_free_r+0x74>
 8014d24:	6820      	ldr	r0, [r4, #0]
 8014d26:	4401      	add	r1, r0
 8014d28:	1858      	adds	r0, r3, r1
 8014d2a:	4282      	cmp	r2, r0
 8014d2c:	6019      	str	r1, [r3, #0]
 8014d2e:	d1dd      	bne.n	8014cec <_free_r+0x24>
 8014d30:	6810      	ldr	r0, [r2, #0]
 8014d32:	6852      	ldr	r2, [r2, #4]
 8014d34:	605a      	str	r2, [r3, #4]
 8014d36:	4401      	add	r1, r0
 8014d38:	6019      	str	r1, [r3, #0]
 8014d3a:	e7d7      	b.n	8014cec <_free_r+0x24>
 8014d3c:	d902      	bls.n	8014d44 <_free_r+0x7c>
 8014d3e:	230c      	movs	r3, #12
 8014d40:	602b      	str	r3, [r5, #0]
 8014d42:	e7d3      	b.n	8014cec <_free_r+0x24>
 8014d44:	6820      	ldr	r0, [r4, #0]
 8014d46:	1821      	adds	r1, r4, r0
 8014d48:	428a      	cmp	r2, r1
 8014d4a:	bf04      	itt	eq
 8014d4c:	6811      	ldreq	r1, [r2, #0]
 8014d4e:	6852      	ldreq	r2, [r2, #4]
 8014d50:	6062      	str	r2, [r4, #4]
 8014d52:	bf04      	itt	eq
 8014d54:	1809      	addeq	r1, r1, r0
 8014d56:	6021      	streq	r1, [r4, #0]
 8014d58:	605c      	str	r4, [r3, #4]
 8014d5a:	e7c7      	b.n	8014cec <_free_r+0x24>
 8014d5c:	bd38      	pop	{r3, r4, r5, pc}
 8014d5e:	bf00      	nop
 8014d60:	20004338 	.word	0x20004338

08014d64 <_malloc_r>:
 8014d64:	b570      	push	{r4, r5, r6, lr}
 8014d66:	1ccd      	adds	r5, r1, #3
 8014d68:	f025 0503 	bic.w	r5, r5, #3
 8014d6c:	3508      	adds	r5, #8
 8014d6e:	2d0c      	cmp	r5, #12
 8014d70:	bf38      	it	cc
 8014d72:	250c      	movcc	r5, #12
 8014d74:	2d00      	cmp	r5, #0
 8014d76:	4606      	mov	r6, r0
 8014d78:	db01      	blt.n	8014d7e <_malloc_r+0x1a>
 8014d7a:	42a9      	cmp	r1, r5
 8014d7c:	d903      	bls.n	8014d86 <_malloc_r+0x22>
 8014d7e:	230c      	movs	r3, #12
 8014d80:	6033      	str	r3, [r6, #0]
 8014d82:	2000      	movs	r0, #0
 8014d84:	bd70      	pop	{r4, r5, r6, pc}
 8014d86:	f000 f939 	bl	8014ffc <__malloc_lock>
 8014d8a:	4a21      	ldr	r2, [pc, #132]	; (8014e10 <_malloc_r+0xac>)
 8014d8c:	6814      	ldr	r4, [r2, #0]
 8014d8e:	4621      	mov	r1, r4
 8014d90:	b991      	cbnz	r1, 8014db8 <_malloc_r+0x54>
 8014d92:	4c20      	ldr	r4, [pc, #128]	; (8014e14 <_malloc_r+0xb0>)
 8014d94:	6823      	ldr	r3, [r4, #0]
 8014d96:	b91b      	cbnz	r3, 8014da0 <_malloc_r+0x3c>
 8014d98:	4630      	mov	r0, r6
 8014d9a:	f000 f855 	bl	8014e48 <_sbrk_r>
 8014d9e:	6020      	str	r0, [r4, #0]
 8014da0:	4629      	mov	r1, r5
 8014da2:	4630      	mov	r0, r6
 8014da4:	f000 f850 	bl	8014e48 <_sbrk_r>
 8014da8:	1c43      	adds	r3, r0, #1
 8014daa:	d124      	bne.n	8014df6 <_malloc_r+0x92>
 8014dac:	230c      	movs	r3, #12
 8014dae:	6033      	str	r3, [r6, #0]
 8014db0:	4630      	mov	r0, r6
 8014db2:	f000 f924 	bl	8014ffe <__malloc_unlock>
 8014db6:	e7e4      	b.n	8014d82 <_malloc_r+0x1e>
 8014db8:	680b      	ldr	r3, [r1, #0]
 8014dba:	1b5b      	subs	r3, r3, r5
 8014dbc:	d418      	bmi.n	8014df0 <_malloc_r+0x8c>
 8014dbe:	2b0b      	cmp	r3, #11
 8014dc0:	d90f      	bls.n	8014de2 <_malloc_r+0x7e>
 8014dc2:	600b      	str	r3, [r1, #0]
 8014dc4:	50cd      	str	r5, [r1, r3]
 8014dc6:	18cc      	adds	r4, r1, r3
 8014dc8:	4630      	mov	r0, r6
 8014dca:	f000 f918 	bl	8014ffe <__malloc_unlock>
 8014dce:	f104 000b 	add.w	r0, r4, #11
 8014dd2:	1d23      	adds	r3, r4, #4
 8014dd4:	f020 0007 	bic.w	r0, r0, #7
 8014dd8:	1ac3      	subs	r3, r0, r3
 8014dda:	d0d3      	beq.n	8014d84 <_malloc_r+0x20>
 8014ddc:	425a      	negs	r2, r3
 8014dde:	50e2      	str	r2, [r4, r3]
 8014de0:	e7d0      	b.n	8014d84 <_malloc_r+0x20>
 8014de2:	428c      	cmp	r4, r1
 8014de4:	684b      	ldr	r3, [r1, #4]
 8014de6:	bf16      	itet	ne
 8014de8:	6063      	strne	r3, [r4, #4]
 8014dea:	6013      	streq	r3, [r2, #0]
 8014dec:	460c      	movne	r4, r1
 8014dee:	e7eb      	b.n	8014dc8 <_malloc_r+0x64>
 8014df0:	460c      	mov	r4, r1
 8014df2:	6849      	ldr	r1, [r1, #4]
 8014df4:	e7cc      	b.n	8014d90 <_malloc_r+0x2c>
 8014df6:	1cc4      	adds	r4, r0, #3
 8014df8:	f024 0403 	bic.w	r4, r4, #3
 8014dfc:	42a0      	cmp	r0, r4
 8014dfe:	d005      	beq.n	8014e0c <_malloc_r+0xa8>
 8014e00:	1a21      	subs	r1, r4, r0
 8014e02:	4630      	mov	r0, r6
 8014e04:	f000 f820 	bl	8014e48 <_sbrk_r>
 8014e08:	3001      	adds	r0, #1
 8014e0a:	d0cf      	beq.n	8014dac <_malloc_r+0x48>
 8014e0c:	6025      	str	r5, [r4, #0]
 8014e0e:	e7db      	b.n	8014dc8 <_malloc_r+0x64>
 8014e10:	20004338 	.word	0x20004338
 8014e14:	2000433c 	.word	0x2000433c

08014e18 <iprintf>:
 8014e18:	b40f      	push	{r0, r1, r2, r3}
 8014e1a:	4b0a      	ldr	r3, [pc, #40]	; (8014e44 <iprintf+0x2c>)
 8014e1c:	b513      	push	{r0, r1, r4, lr}
 8014e1e:	681c      	ldr	r4, [r3, #0]
 8014e20:	b124      	cbz	r4, 8014e2c <iprintf+0x14>
 8014e22:	69a3      	ldr	r3, [r4, #24]
 8014e24:	b913      	cbnz	r3, 8014e2c <iprintf+0x14>
 8014e26:	4620      	mov	r0, r4
 8014e28:	f000 f85e 	bl	8014ee8 <__sinit>
 8014e2c:	ab05      	add	r3, sp, #20
 8014e2e:	9a04      	ldr	r2, [sp, #16]
 8014e30:	68a1      	ldr	r1, [r4, #8]
 8014e32:	9301      	str	r3, [sp, #4]
 8014e34:	4620      	mov	r0, r4
 8014e36:	f000 f90d 	bl	8015054 <_vfiprintf_r>
 8014e3a:	b002      	add	sp, #8
 8014e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e40:	b004      	add	sp, #16
 8014e42:	4770      	bx	lr
 8014e44:	20000180 	.word	0x20000180

08014e48 <_sbrk_r>:
 8014e48:	b538      	push	{r3, r4, r5, lr}
 8014e4a:	4c06      	ldr	r4, [pc, #24]	; (8014e64 <_sbrk_r+0x1c>)
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	4605      	mov	r5, r0
 8014e50:	4608      	mov	r0, r1
 8014e52:	6023      	str	r3, [r4, #0]
 8014e54:	f7ec f94e 	bl	80010f4 <_sbrk>
 8014e58:	1c43      	adds	r3, r0, #1
 8014e5a:	d102      	bne.n	8014e62 <_sbrk_r+0x1a>
 8014e5c:	6823      	ldr	r3, [r4, #0]
 8014e5e:	b103      	cbz	r3, 8014e62 <_sbrk_r+0x1a>
 8014e60:	602b      	str	r3, [r5, #0]
 8014e62:	bd38      	pop	{r3, r4, r5, pc}
 8014e64:	2000ab6c 	.word	0x2000ab6c

08014e68 <std>:
 8014e68:	2300      	movs	r3, #0
 8014e6a:	b510      	push	{r4, lr}
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8014e72:	6083      	str	r3, [r0, #8]
 8014e74:	8181      	strh	r1, [r0, #12]
 8014e76:	6643      	str	r3, [r0, #100]	; 0x64
 8014e78:	81c2      	strh	r2, [r0, #14]
 8014e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e7e:	6183      	str	r3, [r0, #24]
 8014e80:	4619      	mov	r1, r3
 8014e82:	2208      	movs	r2, #8
 8014e84:	305c      	adds	r0, #92	; 0x5c
 8014e86:	f7ff ff17 	bl	8014cb8 <memset>
 8014e8a:	4b05      	ldr	r3, [pc, #20]	; (8014ea0 <std+0x38>)
 8014e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8014e8e:	4b05      	ldr	r3, [pc, #20]	; (8014ea4 <std+0x3c>)
 8014e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e92:	4b05      	ldr	r3, [pc, #20]	; (8014ea8 <std+0x40>)
 8014e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e96:	4b05      	ldr	r3, [pc, #20]	; (8014eac <std+0x44>)
 8014e98:	6224      	str	r4, [r4, #32]
 8014e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8014e9c:	bd10      	pop	{r4, pc}
 8014e9e:	bf00      	nop
 8014ea0:	08015591 	.word	0x08015591
 8014ea4:	080155b3 	.word	0x080155b3
 8014ea8:	080155eb 	.word	0x080155eb
 8014eac:	0801560f 	.word	0x0801560f

08014eb0 <_cleanup_r>:
 8014eb0:	4901      	ldr	r1, [pc, #4]	; (8014eb8 <_cleanup_r+0x8>)
 8014eb2:	f000 b885 	b.w	8014fc0 <_fwalk_reent>
 8014eb6:	bf00      	nop
 8014eb8:	080158e9 	.word	0x080158e9

08014ebc <__sfmoreglue>:
 8014ebc:	b570      	push	{r4, r5, r6, lr}
 8014ebe:	1e4a      	subs	r2, r1, #1
 8014ec0:	2568      	movs	r5, #104	; 0x68
 8014ec2:	4355      	muls	r5, r2
 8014ec4:	460e      	mov	r6, r1
 8014ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014eca:	f7ff ff4b 	bl	8014d64 <_malloc_r>
 8014ece:	4604      	mov	r4, r0
 8014ed0:	b140      	cbz	r0, 8014ee4 <__sfmoreglue+0x28>
 8014ed2:	2100      	movs	r1, #0
 8014ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8014ed8:	300c      	adds	r0, #12
 8014eda:	60a0      	str	r0, [r4, #8]
 8014edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014ee0:	f7ff feea 	bl	8014cb8 <memset>
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	bd70      	pop	{r4, r5, r6, pc}

08014ee8 <__sinit>:
 8014ee8:	6983      	ldr	r3, [r0, #24]
 8014eea:	b510      	push	{r4, lr}
 8014eec:	4604      	mov	r4, r0
 8014eee:	bb33      	cbnz	r3, 8014f3e <__sinit+0x56>
 8014ef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014ef4:	6503      	str	r3, [r0, #80]	; 0x50
 8014ef6:	4b12      	ldr	r3, [pc, #72]	; (8014f40 <__sinit+0x58>)
 8014ef8:	4a12      	ldr	r2, [pc, #72]	; (8014f44 <__sinit+0x5c>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	6282      	str	r2, [r0, #40]	; 0x28
 8014efe:	4298      	cmp	r0, r3
 8014f00:	bf04      	itt	eq
 8014f02:	2301      	moveq	r3, #1
 8014f04:	6183      	streq	r3, [r0, #24]
 8014f06:	f000 f81f 	bl	8014f48 <__sfp>
 8014f0a:	6060      	str	r0, [r4, #4]
 8014f0c:	4620      	mov	r0, r4
 8014f0e:	f000 f81b 	bl	8014f48 <__sfp>
 8014f12:	60a0      	str	r0, [r4, #8]
 8014f14:	4620      	mov	r0, r4
 8014f16:	f000 f817 	bl	8014f48 <__sfp>
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	60e0      	str	r0, [r4, #12]
 8014f1e:	2104      	movs	r1, #4
 8014f20:	6860      	ldr	r0, [r4, #4]
 8014f22:	f7ff ffa1 	bl	8014e68 <std>
 8014f26:	2201      	movs	r2, #1
 8014f28:	2109      	movs	r1, #9
 8014f2a:	68a0      	ldr	r0, [r4, #8]
 8014f2c:	f7ff ff9c 	bl	8014e68 <std>
 8014f30:	2202      	movs	r2, #2
 8014f32:	2112      	movs	r1, #18
 8014f34:	68e0      	ldr	r0, [r4, #12]
 8014f36:	f7ff ff97 	bl	8014e68 <std>
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	61a3      	str	r3, [r4, #24]
 8014f3e:	bd10      	pop	{r4, pc}
 8014f40:	08017a14 	.word	0x08017a14
 8014f44:	08014eb1 	.word	0x08014eb1

08014f48 <__sfp>:
 8014f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f4a:	4b1b      	ldr	r3, [pc, #108]	; (8014fb8 <__sfp+0x70>)
 8014f4c:	681e      	ldr	r6, [r3, #0]
 8014f4e:	69b3      	ldr	r3, [r6, #24]
 8014f50:	4607      	mov	r7, r0
 8014f52:	b913      	cbnz	r3, 8014f5a <__sfp+0x12>
 8014f54:	4630      	mov	r0, r6
 8014f56:	f7ff ffc7 	bl	8014ee8 <__sinit>
 8014f5a:	3648      	adds	r6, #72	; 0x48
 8014f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	d503      	bpl.n	8014f6c <__sfp+0x24>
 8014f64:	6833      	ldr	r3, [r6, #0]
 8014f66:	b133      	cbz	r3, 8014f76 <__sfp+0x2e>
 8014f68:	6836      	ldr	r6, [r6, #0]
 8014f6a:	e7f7      	b.n	8014f5c <__sfp+0x14>
 8014f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f70:	b16d      	cbz	r5, 8014f8e <__sfp+0x46>
 8014f72:	3468      	adds	r4, #104	; 0x68
 8014f74:	e7f4      	b.n	8014f60 <__sfp+0x18>
 8014f76:	2104      	movs	r1, #4
 8014f78:	4638      	mov	r0, r7
 8014f7a:	f7ff ff9f 	bl	8014ebc <__sfmoreglue>
 8014f7e:	6030      	str	r0, [r6, #0]
 8014f80:	2800      	cmp	r0, #0
 8014f82:	d1f1      	bne.n	8014f68 <__sfp+0x20>
 8014f84:	230c      	movs	r3, #12
 8014f86:	603b      	str	r3, [r7, #0]
 8014f88:	4604      	mov	r4, r0
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f8e:	4b0b      	ldr	r3, [pc, #44]	; (8014fbc <__sfp+0x74>)
 8014f90:	6665      	str	r5, [r4, #100]	; 0x64
 8014f92:	e9c4 5500 	strd	r5, r5, [r4]
 8014f96:	60a5      	str	r5, [r4, #8]
 8014f98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014f9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014fa0:	2208      	movs	r2, #8
 8014fa2:	4629      	mov	r1, r5
 8014fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014fa8:	f7ff fe86 	bl	8014cb8 <memset>
 8014fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014fb4:	e7e9      	b.n	8014f8a <__sfp+0x42>
 8014fb6:	bf00      	nop
 8014fb8:	08017a14 	.word	0x08017a14
 8014fbc:	ffff0001 	.word	0xffff0001

08014fc0 <_fwalk_reent>:
 8014fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fc4:	4680      	mov	r8, r0
 8014fc6:	4689      	mov	r9, r1
 8014fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014fcc:	2600      	movs	r6, #0
 8014fce:	b914      	cbnz	r4, 8014fd6 <_fwalk_reent+0x16>
 8014fd0:	4630      	mov	r0, r6
 8014fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014fda:	3f01      	subs	r7, #1
 8014fdc:	d501      	bpl.n	8014fe2 <_fwalk_reent+0x22>
 8014fde:	6824      	ldr	r4, [r4, #0]
 8014fe0:	e7f5      	b.n	8014fce <_fwalk_reent+0xe>
 8014fe2:	89ab      	ldrh	r3, [r5, #12]
 8014fe4:	2b01      	cmp	r3, #1
 8014fe6:	d907      	bls.n	8014ff8 <_fwalk_reent+0x38>
 8014fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014fec:	3301      	adds	r3, #1
 8014fee:	d003      	beq.n	8014ff8 <_fwalk_reent+0x38>
 8014ff0:	4629      	mov	r1, r5
 8014ff2:	4640      	mov	r0, r8
 8014ff4:	47c8      	blx	r9
 8014ff6:	4306      	orrs	r6, r0
 8014ff8:	3568      	adds	r5, #104	; 0x68
 8014ffa:	e7ee      	b.n	8014fda <_fwalk_reent+0x1a>

08014ffc <__malloc_lock>:
 8014ffc:	4770      	bx	lr

08014ffe <__malloc_unlock>:
 8014ffe:	4770      	bx	lr

08015000 <__sfputc_r>:
 8015000:	6893      	ldr	r3, [r2, #8]
 8015002:	3b01      	subs	r3, #1
 8015004:	2b00      	cmp	r3, #0
 8015006:	b410      	push	{r4}
 8015008:	6093      	str	r3, [r2, #8]
 801500a:	da08      	bge.n	801501e <__sfputc_r+0x1e>
 801500c:	6994      	ldr	r4, [r2, #24]
 801500e:	42a3      	cmp	r3, r4
 8015010:	db01      	blt.n	8015016 <__sfputc_r+0x16>
 8015012:	290a      	cmp	r1, #10
 8015014:	d103      	bne.n	801501e <__sfputc_r+0x1e>
 8015016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801501a:	f000 bafd 	b.w	8015618 <__swbuf_r>
 801501e:	6813      	ldr	r3, [r2, #0]
 8015020:	1c58      	adds	r0, r3, #1
 8015022:	6010      	str	r0, [r2, #0]
 8015024:	7019      	strb	r1, [r3, #0]
 8015026:	4608      	mov	r0, r1
 8015028:	f85d 4b04 	ldr.w	r4, [sp], #4
 801502c:	4770      	bx	lr

0801502e <__sfputs_r>:
 801502e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015030:	4606      	mov	r6, r0
 8015032:	460f      	mov	r7, r1
 8015034:	4614      	mov	r4, r2
 8015036:	18d5      	adds	r5, r2, r3
 8015038:	42ac      	cmp	r4, r5
 801503a:	d101      	bne.n	8015040 <__sfputs_r+0x12>
 801503c:	2000      	movs	r0, #0
 801503e:	e007      	b.n	8015050 <__sfputs_r+0x22>
 8015040:	463a      	mov	r2, r7
 8015042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015046:	4630      	mov	r0, r6
 8015048:	f7ff ffda 	bl	8015000 <__sfputc_r>
 801504c:	1c43      	adds	r3, r0, #1
 801504e:	d1f3      	bne.n	8015038 <__sfputs_r+0xa>
 8015050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015054 <_vfiprintf_r>:
 8015054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015058:	460c      	mov	r4, r1
 801505a:	b09d      	sub	sp, #116	; 0x74
 801505c:	4617      	mov	r7, r2
 801505e:	461d      	mov	r5, r3
 8015060:	4606      	mov	r6, r0
 8015062:	b118      	cbz	r0, 801506c <_vfiprintf_r+0x18>
 8015064:	6983      	ldr	r3, [r0, #24]
 8015066:	b90b      	cbnz	r3, 801506c <_vfiprintf_r+0x18>
 8015068:	f7ff ff3e 	bl	8014ee8 <__sinit>
 801506c:	4b7c      	ldr	r3, [pc, #496]	; (8015260 <_vfiprintf_r+0x20c>)
 801506e:	429c      	cmp	r4, r3
 8015070:	d158      	bne.n	8015124 <_vfiprintf_r+0xd0>
 8015072:	6874      	ldr	r4, [r6, #4]
 8015074:	89a3      	ldrh	r3, [r4, #12]
 8015076:	0718      	lsls	r0, r3, #28
 8015078:	d55e      	bpl.n	8015138 <_vfiprintf_r+0xe4>
 801507a:	6923      	ldr	r3, [r4, #16]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d05b      	beq.n	8015138 <_vfiprintf_r+0xe4>
 8015080:	2300      	movs	r3, #0
 8015082:	9309      	str	r3, [sp, #36]	; 0x24
 8015084:	2320      	movs	r3, #32
 8015086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801508a:	2330      	movs	r3, #48	; 0x30
 801508c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015090:	9503      	str	r5, [sp, #12]
 8015092:	f04f 0b01 	mov.w	fp, #1
 8015096:	46b8      	mov	r8, r7
 8015098:	4645      	mov	r5, r8
 801509a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801509e:	b10b      	cbz	r3, 80150a4 <_vfiprintf_r+0x50>
 80150a0:	2b25      	cmp	r3, #37	; 0x25
 80150a2:	d154      	bne.n	801514e <_vfiprintf_r+0xfa>
 80150a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80150a8:	d00b      	beq.n	80150c2 <_vfiprintf_r+0x6e>
 80150aa:	4653      	mov	r3, sl
 80150ac:	463a      	mov	r2, r7
 80150ae:	4621      	mov	r1, r4
 80150b0:	4630      	mov	r0, r6
 80150b2:	f7ff ffbc 	bl	801502e <__sfputs_r>
 80150b6:	3001      	adds	r0, #1
 80150b8:	f000 80c2 	beq.w	8015240 <_vfiprintf_r+0x1ec>
 80150bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150be:	4453      	add	r3, sl
 80150c0:	9309      	str	r3, [sp, #36]	; 0x24
 80150c2:	f898 3000 	ldrb.w	r3, [r8]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	f000 80ba 	beq.w	8015240 <_vfiprintf_r+0x1ec>
 80150cc:	2300      	movs	r3, #0
 80150ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80150d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150d6:	9304      	str	r3, [sp, #16]
 80150d8:	9307      	str	r3, [sp, #28]
 80150da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80150de:	931a      	str	r3, [sp, #104]	; 0x68
 80150e0:	46a8      	mov	r8, r5
 80150e2:	2205      	movs	r2, #5
 80150e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80150e8:	485e      	ldr	r0, [pc, #376]	; (8015264 <_vfiprintf_r+0x210>)
 80150ea:	f7eb f881 	bl	80001f0 <memchr>
 80150ee:	9b04      	ldr	r3, [sp, #16]
 80150f0:	bb78      	cbnz	r0, 8015152 <_vfiprintf_r+0xfe>
 80150f2:	06d9      	lsls	r1, r3, #27
 80150f4:	bf44      	itt	mi
 80150f6:	2220      	movmi	r2, #32
 80150f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80150fc:	071a      	lsls	r2, r3, #28
 80150fe:	bf44      	itt	mi
 8015100:	222b      	movmi	r2, #43	; 0x2b
 8015102:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015106:	782a      	ldrb	r2, [r5, #0]
 8015108:	2a2a      	cmp	r2, #42	; 0x2a
 801510a:	d02a      	beq.n	8015162 <_vfiprintf_r+0x10e>
 801510c:	9a07      	ldr	r2, [sp, #28]
 801510e:	46a8      	mov	r8, r5
 8015110:	2000      	movs	r0, #0
 8015112:	250a      	movs	r5, #10
 8015114:	4641      	mov	r1, r8
 8015116:	f811 3b01 	ldrb.w	r3, [r1], #1
 801511a:	3b30      	subs	r3, #48	; 0x30
 801511c:	2b09      	cmp	r3, #9
 801511e:	d969      	bls.n	80151f4 <_vfiprintf_r+0x1a0>
 8015120:	b360      	cbz	r0, 801517c <_vfiprintf_r+0x128>
 8015122:	e024      	b.n	801516e <_vfiprintf_r+0x11a>
 8015124:	4b50      	ldr	r3, [pc, #320]	; (8015268 <_vfiprintf_r+0x214>)
 8015126:	429c      	cmp	r4, r3
 8015128:	d101      	bne.n	801512e <_vfiprintf_r+0xda>
 801512a:	68b4      	ldr	r4, [r6, #8]
 801512c:	e7a2      	b.n	8015074 <_vfiprintf_r+0x20>
 801512e:	4b4f      	ldr	r3, [pc, #316]	; (801526c <_vfiprintf_r+0x218>)
 8015130:	429c      	cmp	r4, r3
 8015132:	bf08      	it	eq
 8015134:	68f4      	ldreq	r4, [r6, #12]
 8015136:	e79d      	b.n	8015074 <_vfiprintf_r+0x20>
 8015138:	4621      	mov	r1, r4
 801513a:	4630      	mov	r0, r6
 801513c:	f000 fad0 	bl	80156e0 <__swsetup_r>
 8015140:	2800      	cmp	r0, #0
 8015142:	d09d      	beq.n	8015080 <_vfiprintf_r+0x2c>
 8015144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015148:	b01d      	add	sp, #116	; 0x74
 801514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801514e:	46a8      	mov	r8, r5
 8015150:	e7a2      	b.n	8015098 <_vfiprintf_r+0x44>
 8015152:	4a44      	ldr	r2, [pc, #272]	; (8015264 <_vfiprintf_r+0x210>)
 8015154:	1a80      	subs	r0, r0, r2
 8015156:	fa0b f000 	lsl.w	r0, fp, r0
 801515a:	4318      	orrs	r0, r3
 801515c:	9004      	str	r0, [sp, #16]
 801515e:	4645      	mov	r5, r8
 8015160:	e7be      	b.n	80150e0 <_vfiprintf_r+0x8c>
 8015162:	9a03      	ldr	r2, [sp, #12]
 8015164:	1d11      	adds	r1, r2, #4
 8015166:	6812      	ldr	r2, [r2, #0]
 8015168:	9103      	str	r1, [sp, #12]
 801516a:	2a00      	cmp	r2, #0
 801516c:	db01      	blt.n	8015172 <_vfiprintf_r+0x11e>
 801516e:	9207      	str	r2, [sp, #28]
 8015170:	e004      	b.n	801517c <_vfiprintf_r+0x128>
 8015172:	4252      	negs	r2, r2
 8015174:	f043 0302 	orr.w	r3, r3, #2
 8015178:	9207      	str	r2, [sp, #28]
 801517a:	9304      	str	r3, [sp, #16]
 801517c:	f898 3000 	ldrb.w	r3, [r8]
 8015180:	2b2e      	cmp	r3, #46	; 0x2e
 8015182:	d10e      	bne.n	80151a2 <_vfiprintf_r+0x14e>
 8015184:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015188:	2b2a      	cmp	r3, #42	; 0x2a
 801518a:	d138      	bne.n	80151fe <_vfiprintf_r+0x1aa>
 801518c:	9b03      	ldr	r3, [sp, #12]
 801518e:	1d1a      	adds	r2, r3, #4
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	9203      	str	r2, [sp, #12]
 8015194:	2b00      	cmp	r3, #0
 8015196:	bfb8      	it	lt
 8015198:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801519c:	f108 0802 	add.w	r8, r8, #2
 80151a0:	9305      	str	r3, [sp, #20]
 80151a2:	4d33      	ldr	r5, [pc, #204]	; (8015270 <_vfiprintf_r+0x21c>)
 80151a4:	f898 1000 	ldrb.w	r1, [r8]
 80151a8:	2203      	movs	r2, #3
 80151aa:	4628      	mov	r0, r5
 80151ac:	f7eb f820 	bl	80001f0 <memchr>
 80151b0:	b140      	cbz	r0, 80151c4 <_vfiprintf_r+0x170>
 80151b2:	2340      	movs	r3, #64	; 0x40
 80151b4:	1b40      	subs	r0, r0, r5
 80151b6:	fa03 f000 	lsl.w	r0, r3, r0
 80151ba:	9b04      	ldr	r3, [sp, #16]
 80151bc:	4303      	orrs	r3, r0
 80151be:	f108 0801 	add.w	r8, r8, #1
 80151c2:	9304      	str	r3, [sp, #16]
 80151c4:	f898 1000 	ldrb.w	r1, [r8]
 80151c8:	482a      	ldr	r0, [pc, #168]	; (8015274 <_vfiprintf_r+0x220>)
 80151ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151ce:	2206      	movs	r2, #6
 80151d0:	f108 0701 	add.w	r7, r8, #1
 80151d4:	f7eb f80c 	bl	80001f0 <memchr>
 80151d8:	2800      	cmp	r0, #0
 80151da:	d037      	beq.n	801524c <_vfiprintf_r+0x1f8>
 80151dc:	4b26      	ldr	r3, [pc, #152]	; (8015278 <_vfiprintf_r+0x224>)
 80151de:	bb1b      	cbnz	r3, 8015228 <_vfiprintf_r+0x1d4>
 80151e0:	9b03      	ldr	r3, [sp, #12]
 80151e2:	3307      	adds	r3, #7
 80151e4:	f023 0307 	bic.w	r3, r3, #7
 80151e8:	3308      	adds	r3, #8
 80151ea:	9303      	str	r3, [sp, #12]
 80151ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151ee:	444b      	add	r3, r9
 80151f0:	9309      	str	r3, [sp, #36]	; 0x24
 80151f2:	e750      	b.n	8015096 <_vfiprintf_r+0x42>
 80151f4:	fb05 3202 	mla	r2, r5, r2, r3
 80151f8:	2001      	movs	r0, #1
 80151fa:	4688      	mov	r8, r1
 80151fc:	e78a      	b.n	8015114 <_vfiprintf_r+0xc0>
 80151fe:	2300      	movs	r3, #0
 8015200:	f108 0801 	add.w	r8, r8, #1
 8015204:	9305      	str	r3, [sp, #20]
 8015206:	4619      	mov	r1, r3
 8015208:	250a      	movs	r5, #10
 801520a:	4640      	mov	r0, r8
 801520c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015210:	3a30      	subs	r2, #48	; 0x30
 8015212:	2a09      	cmp	r2, #9
 8015214:	d903      	bls.n	801521e <_vfiprintf_r+0x1ca>
 8015216:	2b00      	cmp	r3, #0
 8015218:	d0c3      	beq.n	80151a2 <_vfiprintf_r+0x14e>
 801521a:	9105      	str	r1, [sp, #20]
 801521c:	e7c1      	b.n	80151a2 <_vfiprintf_r+0x14e>
 801521e:	fb05 2101 	mla	r1, r5, r1, r2
 8015222:	2301      	movs	r3, #1
 8015224:	4680      	mov	r8, r0
 8015226:	e7f0      	b.n	801520a <_vfiprintf_r+0x1b6>
 8015228:	ab03      	add	r3, sp, #12
 801522a:	9300      	str	r3, [sp, #0]
 801522c:	4622      	mov	r2, r4
 801522e:	4b13      	ldr	r3, [pc, #76]	; (801527c <_vfiprintf_r+0x228>)
 8015230:	a904      	add	r1, sp, #16
 8015232:	4630      	mov	r0, r6
 8015234:	f3af 8000 	nop.w
 8015238:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801523c:	4681      	mov	r9, r0
 801523e:	d1d5      	bne.n	80151ec <_vfiprintf_r+0x198>
 8015240:	89a3      	ldrh	r3, [r4, #12]
 8015242:	065b      	lsls	r3, r3, #25
 8015244:	f53f af7e 	bmi.w	8015144 <_vfiprintf_r+0xf0>
 8015248:	9809      	ldr	r0, [sp, #36]	; 0x24
 801524a:	e77d      	b.n	8015148 <_vfiprintf_r+0xf4>
 801524c:	ab03      	add	r3, sp, #12
 801524e:	9300      	str	r3, [sp, #0]
 8015250:	4622      	mov	r2, r4
 8015252:	4b0a      	ldr	r3, [pc, #40]	; (801527c <_vfiprintf_r+0x228>)
 8015254:	a904      	add	r1, sp, #16
 8015256:	4630      	mov	r0, r6
 8015258:	f000 f888 	bl	801536c <_printf_i>
 801525c:	e7ec      	b.n	8015238 <_vfiprintf_r+0x1e4>
 801525e:	bf00      	nop
 8015260:	08017a38 	.word	0x08017a38
 8015264:	08017a78 	.word	0x08017a78
 8015268:	08017a58 	.word	0x08017a58
 801526c:	08017a18 	.word	0x08017a18
 8015270:	08017a7e 	.word	0x08017a7e
 8015274:	08017a82 	.word	0x08017a82
 8015278:	00000000 	.word	0x00000000
 801527c:	0801502f 	.word	0x0801502f

08015280 <_printf_common>:
 8015280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015284:	4691      	mov	r9, r2
 8015286:	461f      	mov	r7, r3
 8015288:	688a      	ldr	r2, [r1, #8]
 801528a:	690b      	ldr	r3, [r1, #16]
 801528c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015290:	4293      	cmp	r3, r2
 8015292:	bfb8      	it	lt
 8015294:	4613      	movlt	r3, r2
 8015296:	f8c9 3000 	str.w	r3, [r9]
 801529a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801529e:	4606      	mov	r6, r0
 80152a0:	460c      	mov	r4, r1
 80152a2:	b112      	cbz	r2, 80152aa <_printf_common+0x2a>
 80152a4:	3301      	adds	r3, #1
 80152a6:	f8c9 3000 	str.w	r3, [r9]
 80152aa:	6823      	ldr	r3, [r4, #0]
 80152ac:	0699      	lsls	r1, r3, #26
 80152ae:	bf42      	ittt	mi
 80152b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80152b4:	3302      	addmi	r3, #2
 80152b6:	f8c9 3000 	strmi.w	r3, [r9]
 80152ba:	6825      	ldr	r5, [r4, #0]
 80152bc:	f015 0506 	ands.w	r5, r5, #6
 80152c0:	d107      	bne.n	80152d2 <_printf_common+0x52>
 80152c2:	f104 0a19 	add.w	sl, r4, #25
 80152c6:	68e3      	ldr	r3, [r4, #12]
 80152c8:	f8d9 2000 	ldr.w	r2, [r9]
 80152cc:	1a9b      	subs	r3, r3, r2
 80152ce:	42ab      	cmp	r3, r5
 80152d0:	dc28      	bgt.n	8015324 <_printf_common+0xa4>
 80152d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80152d6:	6822      	ldr	r2, [r4, #0]
 80152d8:	3300      	adds	r3, #0
 80152da:	bf18      	it	ne
 80152dc:	2301      	movne	r3, #1
 80152de:	0692      	lsls	r2, r2, #26
 80152e0:	d42d      	bmi.n	801533e <_printf_common+0xbe>
 80152e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80152e6:	4639      	mov	r1, r7
 80152e8:	4630      	mov	r0, r6
 80152ea:	47c0      	blx	r8
 80152ec:	3001      	adds	r0, #1
 80152ee:	d020      	beq.n	8015332 <_printf_common+0xb2>
 80152f0:	6823      	ldr	r3, [r4, #0]
 80152f2:	68e5      	ldr	r5, [r4, #12]
 80152f4:	f8d9 2000 	ldr.w	r2, [r9]
 80152f8:	f003 0306 	and.w	r3, r3, #6
 80152fc:	2b04      	cmp	r3, #4
 80152fe:	bf08      	it	eq
 8015300:	1aad      	subeq	r5, r5, r2
 8015302:	68a3      	ldr	r3, [r4, #8]
 8015304:	6922      	ldr	r2, [r4, #16]
 8015306:	bf0c      	ite	eq
 8015308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801530c:	2500      	movne	r5, #0
 801530e:	4293      	cmp	r3, r2
 8015310:	bfc4      	itt	gt
 8015312:	1a9b      	subgt	r3, r3, r2
 8015314:	18ed      	addgt	r5, r5, r3
 8015316:	f04f 0900 	mov.w	r9, #0
 801531a:	341a      	adds	r4, #26
 801531c:	454d      	cmp	r5, r9
 801531e:	d11a      	bne.n	8015356 <_printf_common+0xd6>
 8015320:	2000      	movs	r0, #0
 8015322:	e008      	b.n	8015336 <_printf_common+0xb6>
 8015324:	2301      	movs	r3, #1
 8015326:	4652      	mov	r2, sl
 8015328:	4639      	mov	r1, r7
 801532a:	4630      	mov	r0, r6
 801532c:	47c0      	blx	r8
 801532e:	3001      	adds	r0, #1
 8015330:	d103      	bne.n	801533a <_printf_common+0xba>
 8015332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801533a:	3501      	adds	r5, #1
 801533c:	e7c3      	b.n	80152c6 <_printf_common+0x46>
 801533e:	18e1      	adds	r1, r4, r3
 8015340:	1c5a      	adds	r2, r3, #1
 8015342:	2030      	movs	r0, #48	; 0x30
 8015344:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015348:	4422      	add	r2, r4
 801534a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801534e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015352:	3302      	adds	r3, #2
 8015354:	e7c5      	b.n	80152e2 <_printf_common+0x62>
 8015356:	2301      	movs	r3, #1
 8015358:	4622      	mov	r2, r4
 801535a:	4639      	mov	r1, r7
 801535c:	4630      	mov	r0, r6
 801535e:	47c0      	blx	r8
 8015360:	3001      	adds	r0, #1
 8015362:	d0e6      	beq.n	8015332 <_printf_common+0xb2>
 8015364:	f109 0901 	add.w	r9, r9, #1
 8015368:	e7d8      	b.n	801531c <_printf_common+0x9c>
	...

0801536c <_printf_i>:
 801536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015370:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015374:	460c      	mov	r4, r1
 8015376:	7e09      	ldrb	r1, [r1, #24]
 8015378:	b085      	sub	sp, #20
 801537a:	296e      	cmp	r1, #110	; 0x6e
 801537c:	4617      	mov	r7, r2
 801537e:	4606      	mov	r6, r0
 8015380:	4698      	mov	r8, r3
 8015382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015384:	f000 80b3 	beq.w	80154ee <_printf_i+0x182>
 8015388:	d822      	bhi.n	80153d0 <_printf_i+0x64>
 801538a:	2963      	cmp	r1, #99	; 0x63
 801538c:	d036      	beq.n	80153fc <_printf_i+0x90>
 801538e:	d80a      	bhi.n	80153a6 <_printf_i+0x3a>
 8015390:	2900      	cmp	r1, #0
 8015392:	f000 80b9 	beq.w	8015508 <_printf_i+0x19c>
 8015396:	2958      	cmp	r1, #88	; 0x58
 8015398:	f000 8083 	beq.w	80154a2 <_printf_i+0x136>
 801539c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80153a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80153a4:	e032      	b.n	801540c <_printf_i+0xa0>
 80153a6:	2964      	cmp	r1, #100	; 0x64
 80153a8:	d001      	beq.n	80153ae <_printf_i+0x42>
 80153aa:	2969      	cmp	r1, #105	; 0x69
 80153ac:	d1f6      	bne.n	801539c <_printf_i+0x30>
 80153ae:	6820      	ldr	r0, [r4, #0]
 80153b0:	6813      	ldr	r3, [r2, #0]
 80153b2:	0605      	lsls	r5, r0, #24
 80153b4:	f103 0104 	add.w	r1, r3, #4
 80153b8:	d52a      	bpl.n	8015410 <_printf_i+0xa4>
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	6011      	str	r1, [r2, #0]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	da03      	bge.n	80153ca <_printf_i+0x5e>
 80153c2:	222d      	movs	r2, #45	; 0x2d
 80153c4:	425b      	negs	r3, r3
 80153c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80153ca:	486f      	ldr	r0, [pc, #444]	; (8015588 <_printf_i+0x21c>)
 80153cc:	220a      	movs	r2, #10
 80153ce:	e039      	b.n	8015444 <_printf_i+0xd8>
 80153d0:	2973      	cmp	r1, #115	; 0x73
 80153d2:	f000 809d 	beq.w	8015510 <_printf_i+0x1a4>
 80153d6:	d808      	bhi.n	80153ea <_printf_i+0x7e>
 80153d8:	296f      	cmp	r1, #111	; 0x6f
 80153da:	d020      	beq.n	801541e <_printf_i+0xb2>
 80153dc:	2970      	cmp	r1, #112	; 0x70
 80153de:	d1dd      	bne.n	801539c <_printf_i+0x30>
 80153e0:	6823      	ldr	r3, [r4, #0]
 80153e2:	f043 0320 	orr.w	r3, r3, #32
 80153e6:	6023      	str	r3, [r4, #0]
 80153e8:	e003      	b.n	80153f2 <_printf_i+0x86>
 80153ea:	2975      	cmp	r1, #117	; 0x75
 80153ec:	d017      	beq.n	801541e <_printf_i+0xb2>
 80153ee:	2978      	cmp	r1, #120	; 0x78
 80153f0:	d1d4      	bne.n	801539c <_printf_i+0x30>
 80153f2:	2378      	movs	r3, #120	; 0x78
 80153f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80153f8:	4864      	ldr	r0, [pc, #400]	; (801558c <_printf_i+0x220>)
 80153fa:	e055      	b.n	80154a8 <_printf_i+0x13c>
 80153fc:	6813      	ldr	r3, [r2, #0]
 80153fe:	1d19      	adds	r1, r3, #4
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	6011      	str	r1, [r2, #0]
 8015404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801540c:	2301      	movs	r3, #1
 801540e:	e08c      	b.n	801552a <_printf_i+0x1be>
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	6011      	str	r1, [r2, #0]
 8015414:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015418:	bf18      	it	ne
 801541a:	b21b      	sxthne	r3, r3
 801541c:	e7cf      	b.n	80153be <_printf_i+0x52>
 801541e:	6813      	ldr	r3, [r2, #0]
 8015420:	6825      	ldr	r5, [r4, #0]
 8015422:	1d18      	adds	r0, r3, #4
 8015424:	6010      	str	r0, [r2, #0]
 8015426:	0628      	lsls	r0, r5, #24
 8015428:	d501      	bpl.n	801542e <_printf_i+0xc2>
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	e002      	b.n	8015434 <_printf_i+0xc8>
 801542e:	0668      	lsls	r0, r5, #25
 8015430:	d5fb      	bpl.n	801542a <_printf_i+0xbe>
 8015432:	881b      	ldrh	r3, [r3, #0]
 8015434:	4854      	ldr	r0, [pc, #336]	; (8015588 <_printf_i+0x21c>)
 8015436:	296f      	cmp	r1, #111	; 0x6f
 8015438:	bf14      	ite	ne
 801543a:	220a      	movne	r2, #10
 801543c:	2208      	moveq	r2, #8
 801543e:	2100      	movs	r1, #0
 8015440:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015444:	6865      	ldr	r5, [r4, #4]
 8015446:	60a5      	str	r5, [r4, #8]
 8015448:	2d00      	cmp	r5, #0
 801544a:	f2c0 8095 	blt.w	8015578 <_printf_i+0x20c>
 801544e:	6821      	ldr	r1, [r4, #0]
 8015450:	f021 0104 	bic.w	r1, r1, #4
 8015454:	6021      	str	r1, [r4, #0]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d13d      	bne.n	80154d6 <_printf_i+0x16a>
 801545a:	2d00      	cmp	r5, #0
 801545c:	f040 808e 	bne.w	801557c <_printf_i+0x210>
 8015460:	4665      	mov	r5, ip
 8015462:	2a08      	cmp	r2, #8
 8015464:	d10b      	bne.n	801547e <_printf_i+0x112>
 8015466:	6823      	ldr	r3, [r4, #0]
 8015468:	07db      	lsls	r3, r3, #31
 801546a:	d508      	bpl.n	801547e <_printf_i+0x112>
 801546c:	6923      	ldr	r3, [r4, #16]
 801546e:	6862      	ldr	r2, [r4, #4]
 8015470:	429a      	cmp	r2, r3
 8015472:	bfde      	ittt	le
 8015474:	2330      	movle	r3, #48	; 0x30
 8015476:	f805 3c01 	strble.w	r3, [r5, #-1]
 801547a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801547e:	ebac 0305 	sub.w	r3, ip, r5
 8015482:	6123      	str	r3, [r4, #16]
 8015484:	f8cd 8000 	str.w	r8, [sp]
 8015488:	463b      	mov	r3, r7
 801548a:	aa03      	add	r2, sp, #12
 801548c:	4621      	mov	r1, r4
 801548e:	4630      	mov	r0, r6
 8015490:	f7ff fef6 	bl	8015280 <_printf_common>
 8015494:	3001      	adds	r0, #1
 8015496:	d14d      	bne.n	8015534 <_printf_i+0x1c8>
 8015498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801549c:	b005      	add	sp, #20
 801549e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154a2:	4839      	ldr	r0, [pc, #228]	; (8015588 <_printf_i+0x21c>)
 80154a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80154a8:	6813      	ldr	r3, [r2, #0]
 80154aa:	6821      	ldr	r1, [r4, #0]
 80154ac:	1d1d      	adds	r5, r3, #4
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	6015      	str	r5, [r2, #0]
 80154b2:	060a      	lsls	r2, r1, #24
 80154b4:	d50b      	bpl.n	80154ce <_printf_i+0x162>
 80154b6:	07ca      	lsls	r2, r1, #31
 80154b8:	bf44      	itt	mi
 80154ba:	f041 0120 	orrmi.w	r1, r1, #32
 80154be:	6021      	strmi	r1, [r4, #0]
 80154c0:	b91b      	cbnz	r3, 80154ca <_printf_i+0x15e>
 80154c2:	6822      	ldr	r2, [r4, #0]
 80154c4:	f022 0220 	bic.w	r2, r2, #32
 80154c8:	6022      	str	r2, [r4, #0]
 80154ca:	2210      	movs	r2, #16
 80154cc:	e7b7      	b.n	801543e <_printf_i+0xd2>
 80154ce:	064d      	lsls	r5, r1, #25
 80154d0:	bf48      	it	mi
 80154d2:	b29b      	uxthmi	r3, r3
 80154d4:	e7ef      	b.n	80154b6 <_printf_i+0x14a>
 80154d6:	4665      	mov	r5, ip
 80154d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80154dc:	fb02 3311 	mls	r3, r2, r1, r3
 80154e0:	5cc3      	ldrb	r3, [r0, r3]
 80154e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80154e6:	460b      	mov	r3, r1
 80154e8:	2900      	cmp	r1, #0
 80154ea:	d1f5      	bne.n	80154d8 <_printf_i+0x16c>
 80154ec:	e7b9      	b.n	8015462 <_printf_i+0xf6>
 80154ee:	6813      	ldr	r3, [r2, #0]
 80154f0:	6825      	ldr	r5, [r4, #0]
 80154f2:	6961      	ldr	r1, [r4, #20]
 80154f4:	1d18      	adds	r0, r3, #4
 80154f6:	6010      	str	r0, [r2, #0]
 80154f8:	0628      	lsls	r0, r5, #24
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	d501      	bpl.n	8015502 <_printf_i+0x196>
 80154fe:	6019      	str	r1, [r3, #0]
 8015500:	e002      	b.n	8015508 <_printf_i+0x19c>
 8015502:	066a      	lsls	r2, r5, #25
 8015504:	d5fb      	bpl.n	80154fe <_printf_i+0x192>
 8015506:	8019      	strh	r1, [r3, #0]
 8015508:	2300      	movs	r3, #0
 801550a:	6123      	str	r3, [r4, #16]
 801550c:	4665      	mov	r5, ip
 801550e:	e7b9      	b.n	8015484 <_printf_i+0x118>
 8015510:	6813      	ldr	r3, [r2, #0]
 8015512:	1d19      	adds	r1, r3, #4
 8015514:	6011      	str	r1, [r2, #0]
 8015516:	681d      	ldr	r5, [r3, #0]
 8015518:	6862      	ldr	r2, [r4, #4]
 801551a:	2100      	movs	r1, #0
 801551c:	4628      	mov	r0, r5
 801551e:	f7ea fe67 	bl	80001f0 <memchr>
 8015522:	b108      	cbz	r0, 8015528 <_printf_i+0x1bc>
 8015524:	1b40      	subs	r0, r0, r5
 8015526:	6060      	str	r0, [r4, #4]
 8015528:	6863      	ldr	r3, [r4, #4]
 801552a:	6123      	str	r3, [r4, #16]
 801552c:	2300      	movs	r3, #0
 801552e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015532:	e7a7      	b.n	8015484 <_printf_i+0x118>
 8015534:	6923      	ldr	r3, [r4, #16]
 8015536:	462a      	mov	r2, r5
 8015538:	4639      	mov	r1, r7
 801553a:	4630      	mov	r0, r6
 801553c:	47c0      	blx	r8
 801553e:	3001      	adds	r0, #1
 8015540:	d0aa      	beq.n	8015498 <_printf_i+0x12c>
 8015542:	6823      	ldr	r3, [r4, #0]
 8015544:	079b      	lsls	r3, r3, #30
 8015546:	d413      	bmi.n	8015570 <_printf_i+0x204>
 8015548:	68e0      	ldr	r0, [r4, #12]
 801554a:	9b03      	ldr	r3, [sp, #12]
 801554c:	4298      	cmp	r0, r3
 801554e:	bfb8      	it	lt
 8015550:	4618      	movlt	r0, r3
 8015552:	e7a3      	b.n	801549c <_printf_i+0x130>
 8015554:	2301      	movs	r3, #1
 8015556:	464a      	mov	r2, r9
 8015558:	4639      	mov	r1, r7
 801555a:	4630      	mov	r0, r6
 801555c:	47c0      	blx	r8
 801555e:	3001      	adds	r0, #1
 8015560:	d09a      	beq.n	8015498 <_printf_i+0x12c>
 8015562:	3501      	adds	r5, #1
 8015564:	68e3      	ldr	r3, [r4, #12]
 8015566:	9a03      	ldr	r2, [sp, #12]
 8015568:	1a9b      	subs	r3, r3, r2
 801556a:	42ab      	cmp	r3, r5
 801556c:	dcf2      	bgt.n	8015554 <_printf_i+0x1e8>
 801556e:	e7eb      	b.n	8015548 <_printf_i+0x1dc>
 8015570:	2500      	movs	r5, #0
 8015572:	f104 0919 	add.w	r9, r4, #25
 8015576:	e7f5      	b.n	8015564 <_printf_i+0x1f8>
 8015578:	2b00      	cmp	r3, #0
 801557a:	d1ac      	bne.n	80154d6 <_printf_i+0x16a>
 801557c:	7803      	ldrb	r3, [r0, #0]
 801557e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015582:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015586:	e76c      	b.n	8015462 <_printf_i+0xf6>
 8015588:	08017a89 	.word	0x08017a89
 801558c:	08017a9a 	.word	0x08017a9a

08015590 <__sread>:
 8015590:	b510      	push	{r4, lr}
 8015592:	460c      	mov	r4, r1
 8015594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015598:	f000 fa46 	bl	8015a28 <_read_r>
 801559c:	2800      	cmp	r0, #0
 801559e:	bfab      	itete	ge
 80155a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80155a2:	89a3      	ldrhlt	r3, [r4, #12]
 80155a4:	181b      	addge	r3, r3, r0
 80155a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80155aa:	bfac      	ite	ge
 80155ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80155ae:	81a3      	strhlt	r3, [r4, #12]
 80155b0:	bd10      	pop	{r4, pc}

080155b2 <__swrite>:
 80155b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155b6:	461f      	mov	r7, r3
 80155b8:	898b      	ldrh	r3, [r1, #12]
 80155ba:	05db      	lsls	r3, r3, #23
 80155bc:	4605      	mov	r5, r0
 80155be:	460c      	mov	r4, r1
 80155c0:	4616      	mov	r6, r2
 80155c2:	d505      	bpl.n	80155d0 <__swrite+0x1e>
 80155c4:	2302      	movs	r3, #2
 80155c6:	2200      	movs	r2, #0
 80155c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155cc:	f000 f9b6 	bl	801593c <_lseek_r>
 80155d0:	89a3      	ldrh	r3, [r4, #12]
 80155d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80155da:	81a3      	strh	r3, [r4, #12]
 80155dc:	4632      	mov	r2, r6
 80155de:	463b      	mov	r3, r7
 80155e0:	4628      	mov	r0, r5
 80155e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155e6:	f000 b869 	b.w	80156bc <_write_r>

080155ea <__sseek>:
 80155ea:	b510      	push	{r4, lr}
 80155ec:	460c      	mov	r4, r1
 80155ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155f2:	f000 f9a3 	bl	801593c <_lseek_r>
 80155f6:	1c43      	adds	r3, r0, #1
 80155f8:	89a3      	ldrh	r3, [r4, #12]
 80155fa:	bf15      	itete	ne
 80155fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80155fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015606:	81a3      	strheq	r3, [r4, #12]
 8015608:	bf18      	it	ne
 801560a:	81a3      	strhne	r3, [r4, #12]
 801560c:	bd10      	pop	{r4, pc}

0801560e <__sclose>:
 801560e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015612:	f000 b8d3 	b.w	80157bc <_close_r>
	...

08015618 <__swbuf_r>:
 8015618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801561a:	460e      	mov	r6, r1
 801561c:	4614      	mov	r4, r2
 801561e:	4605      	mov	r5, r0
 8015620:	b118      	cbz	r0, 801562a <__swbuf_r+0x12>
 8015622:	6983      	ldr	r3, [r0, #24]
 8015624:	b90b      	cbnz	r3, 801562a <__swbuf_r+0x12>
 8015626:	f7ff fc5f 	bl	8014ee8 <__sinit>
 801562a:	4b21      	ldr	r3, [pc, #132]	; (80156b0 <__swbuf_r+0x98>)
 801562c:	429c      	cmp	r4, r3
 801562e:	d12a      	bne.n	8015686 <__swbuf_r+0x6e>
 8015630:	686c      	ldr	r4, [r5, #4]
 8015632:	69a3      	ldr	r3, [r4, #24]
 8015634:	60a3      	str	r3, [r4, #8]
 8015636:	89a3      	ldrh	r3, [r4, #12]
 8015638:	071a      	lsls	r2, r3, #28
 801563a:	d52e      	bpl.n	801569a <__swbuf_r+0x82>
 801563c:	6923      	ldr	r3, [r4, #16]
 801563e:	b363      	cbz	r3, 801569a <__swbuf_r+0x82>
 8015640:	6923      	ldr	r3, [r4, #16]
 8015642:	6820      	ldr	r0, [r4, #0]
 8015644:	1ac0      	subs	r0, r0, r3
 8015646:	6963      	ldr	r3, [r4, #20]
 8015648:	b2f6      	uxtb	r6, r6
 801564a:	4283      	cmp	r3, r0
 801564c:	4637      	mov	r7, r6
 801564e:	dc04      	bgt.n	801565a <__swbuf_r+0x42>
 8015650:	4621      	mov	r1, r4
 8015652:	4628      	mov	r0, r5
 8015654:	f000 f948 	bl	80158e8 <_fflush_r>
 8015658:	bb28      	cbnz	r0, 80156a6 <__swbuf_r+0x8e>
 801565a:	68a3      	ldr	r3, [r4, #8]
 801565c:	3b01      	subs	r3, #1
 801565e:	60a3      	str	r3, [r4, #8]
 8015660:	6823      	ldr	r3, [r4, #0]
 8015662:	1c5a      	adds	r2, r3, #1
 8015664:	6022      	str	r2, [r4, #0]
 8015666:	701e      	strb	r6, [r3, #0]
 8015668:	6963      	ldr	r3, [r4, #20]
 801566a:	3001      	adds	r0, #1
 801566c:	4283      	cmp	r3, r0
 801566e:	d004      	beq.n	801567a <__swbuf_r+0x62>
 8015670:	89a3      	ldrh	r3, [r4, #12]
 8015672:	07db      	lsls	r3, r3, #31
 8015674:	d519      	bpl.n	80156aa <__swbuf_r+0x92>
 8015676:	2e0a      	cmp	r6, #10
 8015678:	d117      	bne.n	80156aa <__swbuf_r+0x92>
 801567a:	4621      	mov	r1, r4
 801567c:	4628      	mov	r0, r5
 801567e:	f000 f933 	bl	80158e8 <_fflush_r>
 8015682:	b190      	cbz	r0, 80156aa <__swbuf_r+0x92>
 8015684:	e00f      	b.n	80156a6 <__swbuf_r+0x8e>
 8015686:	4b0b      	ldr	r3, [pc, #44]	; (80156b4 <__swbuf_r+0x9c>)
 8015688:	429c      	cmp	r4, r3
 801568a:	d101      	bne.n	8015690 <__swbuf_r+0x78>
 801568c:	68ac      	ldr	r4, [r5, #8]
 801568e:	e7d0      	b.n	8015632 <__swbuf_r+0x1a>
 8015690:	4b09      	ldr	r3, [pc, #36]	; (80156b8 <__swbuf_r+0xa0>)
 8015692:	429c      	cmp	r4, r3
 8015694:	bf08      	it	eq
 8015696:	68ec      	ldreq	r4, [r5, #12]
 8015698:	e7cb      	b.n	8015632 <__swbuf_r+0x1a>
 801569a:	4621      	mov	r1, r4
 801569c:	4628      	mov	r0, r5
 801569e:	f000 f81f 	bl	80156e0 <__swsetup_r>
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d0cc      	beq.n	8015640 <__swbuf_r+0x28>
 80156a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80156aa:	4638      	mov	r0, r7
 80156ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156ae:	bf00      	nop
 80156b0:	08017a38 	.word	0x08017a38
 80156b4:	08017a58 	.word	0x08017a58
 80156b8:	08017a18 	.word	0x08017a18

080156bc <_write_r>:
 80156bc:	b538      	push	{r3, r4, r5, lr}
 80156be:	4c07      	ldr	r4, [pc, #28]	; (80156dc <_write_r+0x20>)
 80156c0:	4605      	mov	r5, r0
 80156c2:	4608      	mov	r0, r1
 80156c4:	4611      	mov	r1, r2
 80156c6:	2200      	movs	r2, #0
 80156c8:	6022      	str	r2, [r4, #0]
 80156ca:	461a      	mov	r2, r3
 80156cc:	f7eb fcc1 	bl	8001052 <_write>
 80156d0:	1c43      	adds	r3, r0, #1
 80156d2:	d102      	bne.n	80156da <_write_r+0x1e>
 80156d4:	6823      	ldr	r3, [r4, #0]
 80156d6:	b103      	cbz	r3, 80156da <_write_r+0x1e>
 80156d8:	602b      	str	r3, [r5, #0]
 80156da:	bd38      	pop	{r3, r4, r5, pc}
 80156dc:	2000ab6c 	.word	0x2000ab6c

080156e0 <__swsetup_r>:
 80156e0:	4b32      	ldr	r3, [pc, #200]	; (80157ac <__swsetup_r+0xcc>)
 80156e2:	b570      	push	{r4, r5, r6, lr}
 80156e4:	681d      	ldr	r5, [r3, #0]
 80156e6:	4606      	mov	r6, r0
 80156e8:	460c      	mov	r4, r1
 80156ea:	b125      	cbz	r5, 80156f6 <__swsetup_r+0x16>
 80156ec:	69ab      	ldr	r3, [r5, #24]
 80156ee:	b913      	cbnz	r3, 80156f6 <__swsetup_r+0x16>
 80156f0:	4628      	mov	r0, r5
 80156f2:	f7ff fbf9 	bl	8014ee8 <__sinit>
 80156f6:	4b2e      	ldr	r3, [pc, #184]	; (80157b0 <__swsetup_r+0xd0>)
 80156f8:	429c      	cmp	r4, r3
 80156fa:	d10f      	bne.n	801571c <__swsetup_r+0x3c>
 80156fc:	686c      	ldr	r4, [r5, #4]
 80156fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015702:	b29a      	uxth	r2, r3
 8015704:	0715      	lsls	r5, r2, #28
 8015706:	d42c      	bmi.n	8015762 <__swsetup_r+0x82>
 8015708:	06d0      	lsls	r0, r2, #27
 801570a:	d411      	bmi.n	8015730 <__swsetup_r+0x50>
 801570c:	2209      	movs	r2, #9
 801570e:	6032      	str	r2, [r6, #0]
 8015710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015714:	81a3      	strh	r3, [r4, #12]
 8015716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801571a:	e03e      	b.n	801579a <__swsetup_r+0xba>
 801571c:	4b25      	ldr	r3, [pc, #148]	; (80157b4 <__swsetup_r+0xd4>)
 801571e:	429c      	cmp	r4, r3
 8015720:	d101      	bne.n	8015726 <__swsetup_r+0x46>
 8015722:	68ac      	ldr	r4, [r5, #8]
 8015724:	e7eb      	b.n	80156fe <__swsetup_r+0x1e>
 8015726:	4b24      	ldr	r3, [pc, #144]	; (80157b8 <__swsetup_r+0xd8>)
 8015728:	429c      	cmp	r4, r3
 801572a:	bf08      	it	eq
 801572c:	68ec      	ldreq	r4, [r5, #12]
 801572e:	e7e6      	b.n	80156fe <__swsetup_r+0x1e>
 8015730:	0751      	lsls	r1, r2, #29
 8015732:	d512      	bpl.n	801575a <__swsetup_r+0x7a>
 8015734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015736:	b141      	cbz	r1, 801574a <__swsetup_r+0x6a>
 8015738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801573c:	4299      	cmp	r1, r3
 801573e:	d002      	beq.n	8015746 <__swsetup_r+0x66>
 8015740:	4630      	mov	r0, r6
 8015742:	f7ff fac1 	bl	8014cc8 <_free_r>
 8015746:	2300      	movs	r3, #0
 8015748:	6363      	str	r3, [r4, #52]	; 0x34
 801574a:	89a3      	ldrh	r3, [r4, #12]
 801574c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015750:	81a3      	strh	r3, [r4, #12]
 8015752:	2300      	movs	r3, #0
 8015754:	6063      	str	r3, [r4, #4]
 8015756:	6923      	ldr	r3, [r4, #16]
 8015758:	6023      	str	r3, [r4, #0]
 801575a:	89a3      	ldrh	r3, [r4, #12]
 801575c:	f043 0308 	orr.w	r3, r3, #8
 8015760:	81a3      	strh	r3, [r4, #12]
 8015762:	6923      	ldr	r3, [r4, #16]
 8015764:	b94b      	cbnz	r3, 801577a <__swsetup_r+0x9a>
 8015766:	89a3      	ldrh	r3, [r4, #12]
 8015768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015770:	d003      	beq.n	801577a <__swsetup_r+0x9a>
 8015772:	4621      	mov	r1, r4
 8015774:	4630      	mov	r0, r6
 8015776:	f000 f917 	bl	80159a8 <__smakebuf_r>
 801577a:	89a2      	ldrh	r2, [r4, #12]
 801577c:	f012 0301 	ands.w	r3, r2, #1
 8015780:	d00c      	beq.n	801579c <__swsetup_r+0xbc>
 8015782:	2300      	movs	r3, #0
 8015784:	60a3      	str	r3, [r4, #8]
 8015786:	6963      	ldr	r3, [r4, #20]
 8015788:	425b      	negs	r3, r3
 801578a:	61a3      	str	r3, [r4, #24]
 801578c:	6923      	ldr	r3, [r4, #16]
 801578e:	b953      	cbnz	r3, 80157a6 <__swsetup_r+0xc6>
 8015790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015794:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015798:	d1ba      	bne.n	8015710 <__swsetup_r+0x30>
 801579a:	bd70      	pop	{r4, r5, r6, pc}
 801579c:	0792      	lsls	r2, r2, #30
 801579e:	bf58      	it	pl
 80157a0:	6963      	ldrpl	r3, [r4, #20]
 80157a2:	60a3      	str	r3, [r4, #8]
 80157a4:	e7f2      	b.n	801578c <__swsetup_r+0xac>
 80157a6:	2000      	movs	r0, #0
 80157a8:	e7f7      	b.n	801579a <__swsetup_r+0xba>
 80157aa:	bf00      	nop
 80157ac:	20000180 	.word	0x20000180
 80157b0:	08017a38 	.word	0x08017a38
 80157b4:	08017a58 	.word	0x08017a58
 80157b8:	08017a18 	.word	0x08017a18

080157bc <_close_r>:
 80157bc:	b538      	push	{r3, r4, r5, lr}
 80157be:	4c06      	ldr	r4, [pc, #24]	; (80157d8 <_close_r+0x1c>)
 80157c0:	2300      	movs	r3, #0
 80157c2:	4605      	mov	r5, r0
 80157c4:	4608      	mov	r0, r1
 80157c6:	6023      	str	r3, [r4, #0]
 80157c8:	f7eb fc5f 	bl	800108a <_close>
 80157cc:	1c43      	adds	r3, r0, #1
 80157ce:	d102      	bne.n	80157d6 <_close_r+0x1a>
 80157d0:	6823      	ldr	r3, [r4, #0]
 80157d2:	b103      	cbz	r3, 80157d6 <_close_r+0x1a>
 80157d4:	602b      	str	r3, [r5, #0]
 80157d6:	bd38      	pop	{r3, r4, r5, pc}
 80157d8:	2000ab6c 	.word	0x2000ab6c

080157dc <__sflush_r>:
 80157dc:	898a      	ldrh	r2, [r1, #12]
 80157de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157e2:	4605      	mov	r5, r0
 80157e4:	0710      	lsls	r0, r2, #28
 80157e6:	460c      	mov	r4, r1
 80157e8:	d458      	bmi.n	801589c <__sflush_r+0xc0>
 80157ea:	684b      	ldr	r3, [r1, #4]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	dc05      	bgt.n	80157fc <__sflush_r+0x20>
 80157f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	dc02      	bgt.n	80157fc <__sflush_r+0x20>
 80157f6:	2000      	movs	r0, #0
 80157f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80157fe:	2e00      	cmp	r6, #0
 8015800:	d0f9      	beq.n	80157f6 <__sflush_r+0x1a>
 8015802:	2300      	movs	r3, #0
 8015804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015808:	682f      	ldr	r7, [r5, #0]
 801580a:	6a21      	ldr	r1, [r4, #32]
 801580c:	602b      	str	r3, [r5, #0]
 801580e:	d032      	beq.n	8015876 <__sflush_r+0x9a>
 8015810:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015812:	89a3      	ldrh	r3, [r4, #12]
 8015814:	075a      	lsls	r2, r3, #29
 8015816:	d505      	bpl.n	8015824 <__sflush_r+0x48>
 8015818:	6863      	ldr	r3, [r4, #4]
 801581a:	1ac0      	subs	r0, r0, r3
 801581c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801581e:	b10b      	cbz	r3, 8015824 <__sflush_r+0x48>
 8015820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015822:	1ac0      	subs	r0, r0, r3
 8015824:	2300      	movs	r3, #0
 8015826:	4602      	mov	r2, r0
 8015828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801582a:	6a21      	ldr	r1, [r4, #32]
 801582c:	4628      	mov	r0, r5
 801582e:	47b0      	blx	r6
 8015830:	1c43      	adds	r3, r0, #1
 8015832:	89a3      	ldrh	r3, [r4, #12]
 8015834:	d106      	bne.n	8015844 <__sflush_r+0x68>
 8015836:	6829      	ldr	r1, [r5, #0]
 8015838:	291d      	cmp	r1, #29
 801583a:	d848      	bhi.n	80158ce <__sflush_r+0xf2>
 801583c:	4a29      	ldr	r2, [pc, #164]	; (80158e4 <__sflush_r+0x108>)
 801583e:	40ca      	lsrs	r2, r1
 8015840:	07d6      	lsls	r6, r2, #31
 8015842:	d544      	bpl.n	80158ce <__sflush_r+0xf2>
 8015844:	2200      	movs	r2, #0
 8015846:	6062      	str	r2, [r4, #4]
 8015848:	04d9      	lsls	r1, r3, #19
 801584a:	6922      	ldr	r2, [r4, #16]
 801584c:	6022      	str	r2, [r4, #0]
 801584e:	d504      	bpl.n	801585a <__sflush_r+0x7e>
 8015850:	1c42      	adds	r2, r0, #1
 8015852:	d101      	bne.n	8015858 <__sflush_r+0x7c>
 8015854:	682b      	ldr	r3, [r5, #0]
 8015856:	b903      	cbnz	r3, 801585a <__sflush_r+0x7e>
 8015858:	6560      	str	r0, [r4, #84]	; 0x54
 801585a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801585c:	602f      	str	r7, [r5, #0]
 801585e:	2900      	cmp	r1, #0
 8015860:	d0c9      	beq.n	80157f6 <__sflush_r+0x1a>
 8015862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015866:	4299      	cmp	r1, r3
 8015868:	d002      	beq.n	8015870 <__sflush_r+0x94>
 801586a:	4628      	mov	r0, r5
 801586c:	f7ff fa2c 	bl	8014cc8 <_free_r>
 8015870:	2000      	movs	r0, #0
 8015872:	6360      	str	r0, [r4, #52]	; 0x34
 8015874:	e7c0      	b.n	80157f8 <__sflush_r+0x1c>
 8015876:	2301      	movs	r3, #1
 8015878:	4628      	mov	r0, r5
 801587a:	47b0      	blx	r6
 801587c:	1c41      	adds	r1, r0, #1
 801587e:	d1c8      	bne.n	8015812 <__sflush_r+0x36>
 8015880:	682b      	ldr	r3, [r5, #0]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d0c5      	beq.n	8015812 <__sflush_r+0x36>
 8015886:	2b1d      	cmp	r3, #29
 8015888:	d001      	beq.n	801588e <__sflush_r+0xb2>
 801588a:	2b16      	cmp	r3, #22
 801588c:	d101      	bne.n	8015892 <__sflush_r+0xb6>
 801588e:	602f      	str	r7, [r5, #0]
 8015890:	e7b1      	b.n	80157f6 <__sflush_r+0x1a>
 8015892:	89a3      	ldrh	r3, [r4, #12]
 8015894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015898:	81a3      	strh	r3, [r4, #12]
 801589a:	e7ad      	b.n	80157f8 <__sflush_r+0x1c>
 801589c:	690f      	ldr	r7, [r1, #16]
 801589e:	2f00      	cmp	r7, #0
 80158a0:	d0a9      	beq.n	80157f6 <__sflush_r+0x1a>
 80158a2:	0793      	lsls	r3, r2, #30
 80158a4:	680e      	ldr	r6, [r1, #0]
 80158a6:	bf08      	it	eq
 80158a8:	694b      	ldreq	r3, [r1, #20]
 80158aa:	600f      	str	r7, [r1, #0]
 80158ac:	bf18      	it	ne
 80158ae:	2300      	movne	r3, #0
 80158b0:	eba6 0807 	sub.w	r8, r6, r7
 80158b4:	608b      	str	r3, [r1, #8]
 80158b6:	f1b8 0f00 	cmp.w	r8, #0
 80158ba:	dd9c      	ble.n	80157f6 <__sflush_r+0x1a>
 80158bc:	4643      	mov	r3, r8
 80158be:	463a      	mov	r2, r7
 80158c0:	6a21      	ldr	r1, [r4, #32]
 80158c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80158c4:	4628      	mov	r0, r5
 80158c6:	47b0      	blx	r6
 80158c8:	2800      	cmp	r0, #0
 80158ca:	dc06      	bgt.n	80158da <__sflush_r+0xfe>
 80158cc:	89a3      	ldrh	r3, [r4, #12]
 80158ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158d2:	81a3      	strh	r3, [r4, #12]
 80158d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158d8:	e78e      	b.n	80157f8 <__sflush_r+0x1c>
 80158da:	4407      	add	r7, r0
 80158dc:	eba8 0800 	sub.w	r8, r8, r0
 80158e0:	e7e9      	b.n	80158b6 <__sflush_r+0xda>
 80158e2:	bf00      	nop
 80158e4:	20400001 	.word	0x20400001

080158e8 <_fflush_r>:
 80158e8:	b538      	push	{r3, r4, r5, lr}
 80158ea:	690b      	ldr	r3, [r1, #16]
 80158ec:	4605      	mov	r5, r0
 80158ee:	460c      	mov	r4, r1
 80158f0:	b1db      	cbz	r3, 801592a <_fflush_r+0x42>
 80158f2:	b118      	cbz	r0, 80158fc <_fflush_r+0x14>
 80158f4:	6983      	ldr	r3, [r0, #24]
 80158f6:	b90b      	cbnz	r3, 80158fc <_fflush_r+0x14>
 80158f8:	f7ff faf6 	bl	8014ee8 <__sinit>
 80158fc:	4b0c      	ldr	r3, [pc, #48]	; (8015930 <_fflush_r+0x48>)
 80158fe:	429c      	cmp	r4, r3
 8015900:	d109      	bne.n	8015916 <_fflush_r+0x2e>
 8015902:	686c      	ldr	r4, [r5, #4]
 8015904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015908:	b17b      	cbz	r3, 801592a <_fflush_r+0x42>
 801590a:	4621      	mov	r1, r4
 801590c:	4628      	mov	r0, r5
 801590e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015912:	f7ff bf63 	b.w	80157dc <__sflush_r>
 8015916:	4b07      	ldr	r3, [pc, #28]	; (8015934 <_fflush_r+0x4c>)
 8015918:	429c      	cmp	r4, r3
 801591a:	d101      	bne.n	8015920 <_fflush_r+0x38>
 801591c:	68ac      	ldr	r4, [r5, #8]
 801591e:	e7f1      	b.n	8015904 <_fflush_r+0x1c>
 8015920:	4b05      	ldr	r3, [pc, #20]	; (8015938 <_fflush_r+0x50>)
 8015922:	429c      	cmp	r4, r3
 8015924:	bf08      	it	eq
 8015926:	68ec      	ldreq	r4, [r5, #12]
 8015928:	e7ec      	b.n	8015904 <_fflush_r+0x1c>
 801592a:	2000      	movs	r0, #0
 801592c:	bd38      	pop	{r3, r4, r5, pc}
 801592e:	bf00      	nop
 8015930:	08017a38 	.word	0x08017a38
 8015934:	08017a58 	.word	0x08017a58
 8015938:	08017a18 	.word	0x08017a18

0801593c <_lseek_r>:
 801593c:	b538      	push	{r3, r4, r5, lr}
 801593e:	4c07      	ldr	r4, [pc, #28]	; (801595c <_lseek_r+0x20>)
 8015940:	4605      	mov	r5, r0
 8015942:	4608      	mov	r0, r1
 8015944:	4611      	mov	r1, r2
 8015946:	2200      	movs	r2, #0
 8015948:	6022      	str	r2, [r4, #0]
 801594a:	461a      	mov	r2, r3
 801594c:	f7eb fbc4 	bl	80010d8 <_lseek>
 8015950:	1c43      	adds	r3, r0, #1
 8015952:	d102      	bne.n	801595a <_lseek_r+0x1e>
 8015954:	6823      	ldr	r3, [r4, #0]
 8015956:	b103      	cbz	r3, 801595a <_lseek_r+0x1e>
 8015958:	602b      	str	r3, [r5, #0]
 801595a:	bd38      	pop	{r3, r4, r5, pc}
 801595c:	2000ab6c 	.word	0x2000ab6c

08015960 <__swhatbuf_r>:
 8015960:	b570      	push	{r4, r5, r6, lr}
 8015962:	460e      	mov	r6, r1
 8015964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015968:	2900      	cmp	r1, #0
 801596a:	b096      	sub	sp, #88	; 0x58
 801596c:	4614      	mov	r4, r2
 801596e:	461d      	mov	r5, r3
 8015970:	da07      	bge.n	8015982 <__swhatbuf_r+0x22>
 8015972:	2300      	movs	r3, #0
 8015974:	602b      	str	r3, [r5, #0]
 8015976:	89b3      	ldrh	r3, [r6, #12]
 8015978:	061a      	lsls	r2, r3, #24
 801597a:	d410      	bmi.n	801599e <__swhatbuf_r+0x3e>
 801597c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015980:	e00e      	b.n	80159a0 <__swhatbuf_r+0x40>
 8015982:	466a      	mov	r2, sp
 8015984:	f000 f862 	bl	8015a4c <_fstat_r>
 8015988:	2800      	cmp	r0, #0
 801598a:	dbf2      	blt.n	8015972 <__swhatbuf_r+0x12>
 801598c:	9a01      	ldr	r2, [sp, #4]
 801598e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015992:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015996:	425a      	negs	r2, r3
 8015998:	415a      	adcs	r2, r3
 801599a:	602a      	str	r2, [r5, #0]
 801599c:	e7ee      	b.n	801597c <__swhatbuf_r+0x1c>
 801599e:	2340      	movs	r3, #64	; 0x40
 80159a0:	2000      	movs	r0, #0
 80159a2:	6023      	str	r3, [r4, #0]
 80159a4:	b016      	add	sp, #88	; 0x58
 80159a6:	bd70      	pop	{r4, r5, r6, pc}

080159a8 <__smakebuf_r>:
 80159a8:	898b      	ldrh	r3, [r1, #12]
 80159aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80159ac:	079d      	lsls	r5, r3, #30
 80159ae:	4606      	mov	r6, r0
 80159b0:	460c      	mov	r4, r1
 80159b2:	d507      	bpl.n	80159c4 <__smakebuf_r+0x1c>
 80159b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80159b8:	6023      	str	r3, [r4, #0]
 80159ba:	6123      	str	r3, [r4, #16]
 80159bc:	2301      	movs	r3, #1
 80159be:	6163      	str	r3, [r4, #20]
 80159c0:	b002      	add	sp, #8
 80159c2:	bd70      	pop	{r4, r5, r6, pc}
 80159c4:	ab01      	add	r3, sp, #4
 80159c6:	466a      	mov	r2, sp
 80159c8:	f7ff ffca 	bl	8015960 <__swhatbuf_r>
 80159cc:	9900      	ldr	r1, [sp, #0]
 80159ce:	4605      	mov	r5, r0
 80159d0:	4630      	mov	r0, r6
 80159d2:	f7ff f9c7 	bl	8014d64 <_malloc_r>
 80159d6:	b948      	cbnz	r0, 80159ec <__smakebuf_r+0x44>
 80159d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159dc:	059a      	lsls	r2, r3, #22
 80159de:	d4ef      	bmi.n	80159c0 <__smakebuf_r+0x18>
 80159e0:	f023 0303 	bic.w	r3, r3, #3
 80159e4:	f043 0302 	orr.w	r3, r3, #2
 80159e8:	81a3      	strh	r3, [r4, #12]
 80159ea:	e7e3      	b.n	80159b4 <__smakebuf_r+0xc>
 80159ec:	4b0d      	ldr	r3, [pc, #52]	; (8015a24 <__smakebuf_r+0x7c>)
 80159ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80159f0:	89a3      	ldrh	r3, [r4, #12]
 80159f2:	6020      	str	r0, [r4, #0]
 80159f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159f8:	81a3      	strh	r3, [r4, #12]
 80159fa:	9b00      	ldr	r3, [sp, #0]
 80159fc:	6163      	str	r3, [r4, #20]
 80159fe:	9b01      	ldr	r3, [sp, #4]
 8015a00:	6120      	str	r0, [r4, #16]
 8015a02:	b15b      	cbz	r3, 8015a1c <__smakebuf_r+0x74>
 8015a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a08:	4630      	mov	r0, r6
 8015a0a:	f000 f831 	bl	8015a70 <_isatty_r>
 8015a0e:	b128      	cbz	r0, 8015a1c <__smakebuf_r+0x74>
 8015a10:	89a3      	ldrh	r3, [r4, #12]
 8015a12:	f023 0303 	bic.w	r3, r3, #3
 8015a16:	f043 0301 	orr.w	r3, r3, #1
 8015a1a:	81a3      	strh	r3, [r4, #12]
 8015a1c:	89a3      	ldrh	r3, [r4, #12]
 8015a1e:	431d      	orrs	r5, r3
 8015a20:	81a5      	strh	r5, [r4, #12]
 8015a22:	e7cd      	b.n	80159c0 <__smakebuf_r+0x18>
 8015a24:	08014eb1 	.word	0x08014eb1

08015a28 <_read_r>:
 8015a28:	b538      	push	{r3, r4, r5, lr}
 8015a2a:	4c07      	ldr	r4, [pc, #28]	; (8015a48 <_read_r+0x20>)
 8015a2c:	4605      	mov	r5, r0
 8015a2e:	4608      	mov	r0, r1
 8015a30:	4611      	mov	r1, r2
 8015a32:	2200      	movs	r2, #0
 8015a34:	6022      	str	r2, [r4, #0]
 8015a36:	461a      	mov	r2, r3
 8015a38:	f7eb faee 	bl	8001018 <_read>
 8015a3c:	1c43      	adds	r3, r0, #1
 8015a3e:	d102      	bne.n	8015a46 <_read_r+0x1e>
 8015a40:	6823      	ldr	r3, [r4, #0]
 8015a42:	b103      	cbz	r3, 8015a46 <_read_r+0x1e>
 8015a44:	602b      	str	r3, [r5, #0]
 8015a46:	bd38      	pop	{r3, r4, r5, pc}
 8015a48:	2000ab6c 	.word	0x2000ab6c

08015a4c <_fstat_r>:
 8015a4c:	b538      	push	{r3, r4, r5, lr}
 8015a4e:	4c07      	ldr	r4, [pc, #28]	; (8015a6c <_fstat_r+0x20>)
 8015a50:	2300      	movs	r3, #0
 8015a52:	4605      	mov	r5, r0
 8015a54:	4608      	mov	r0, r1
 8015a56:	4611      	mov	r1, r2
 8015a58:	6023      	str	r3, [r4, #0]
 8015a5a:	f7eb fb22 	bl	80010a2 <_fstat>
 8015a5e:	1c43      	adds	r3, r0, #1
 8015a60:	d102      	bne.n	8015a68 <_fstat_r+0x1c>
 8015a62:	6823      	ldr	r3, [r4, #0]
 8015a64:	b103      	cbz	r3, 8015a68 <_fstat_r+0x1c>
 8015a66:	602b      	str	r3, [r5, #0]
 8015a68:	bd38      	pop	{r3, r4, r5, pc}
 8015a6a:	bf00      	nop
 8015a6c:	2000ab6c 	.word	0x2000ab6c

08015a70 <_isatty_r>:
 8015a70:	b538      	push	{r3, r4, r5, lr}
 8015a72:	4c06      	ldr	r4, [pc, #24]	; (8015a8c <_isatty_r+0x1c>)
 8015a74:	2300      	movs	r3, #0
 8015a76:	4605      	mov	r5, r0
 8015a78:	4608      	mov	r0, r1
 8015a7a:	6023      	str	r3, [r4, #0]
 8015a7c:	f7eb fb21 	bl	80010c2 <_isatty>
 8015a80:	1c43      	adds	r3, r0, #1
 8015a82:	d102      	bne.n	8015a8a <_isatty_r+0x1a>
 8015a84:	6823      	ldr	r3, [r4, #0]
 8015a86:	b103      	cbz	r3, 8015a8a <_isatty_r+0x1a>
 8015a88:	602b      	str	r3, [r5, #0]
 8015a8a:	bd38      	pop	{r3, r4, r5, pc}
 8015a8c:	2000ab6c 	.word	0x2000ab6c

08015a90 <_init>:
 8015a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a92:	bf00      	nop
 8015a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a96:	bc08      	pop	{r3}
 8015a98:	469e      	mov	lr, r3
 8015a9a:	4770      	bx	lr

08015a9c <_fini>:
 8015a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a9e:	bf00      	nop
 8015aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aa2:	bc08      	pop	{r3}
 8015aa4:	469e      	mov	lr, r3
 8015aa6:	4770      	bx	lr
