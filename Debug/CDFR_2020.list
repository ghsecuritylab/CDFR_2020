
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015688  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002004  08015838  08015838  00025838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801783c  0801783c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801783c  0801783c  0002783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017844  08017844  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017844  08017844  00027844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017848  08017848  00027848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801784c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c234  200001e4  08017a30  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c418  08017a30  0003c418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000427b9  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008962  00000000  00000000  000729cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024d0  00000000  00000000  0007b330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021d8  00000000  00000000  0007d800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038f54  00000000  00000000  0007f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030689  00000000  00000000  000b892c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010a49a  00000000  00000000  000e8fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f344f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a5c  00000000  00000000  001f34cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015820 	.word	0x08015820

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	08015820 	.word	0x08015820

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000200 	.word	0x20000200
 80005c0:	20000254 	.word	0x20000254

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b09c      	sub	sp, #112	; 0x70
 80005c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_FREERTOS_Init+0xa4>)
 80005cc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f008 f8dc 	bl	80087a2 <osThreadCreate>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_FREERTOS_Init+0xa8>)
 80005ee:	601a      	str	r2, [r3, #0]

  /* definition and creation of SpeedRegTask */
  osThreadDef(SpeedRegTask, StartSpeedRegTask, osPriorityRealtime, 0, 128);
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_FREERTOS_Init+0xac>)
 80005f2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SpeedRegTaskHandle = osThreadCreate(osThread(SpeedRegTask), NULL);
 8000604:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 f8c9 	bl	80087a2 <osThreadCreate>
 8000610:	4602      	mov	r2, r0
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_FREERTOS_Init+0xb0>)
 8000614:	601a      	str	r2, [r3, #0]

  /* definition and creation of PositionRegTask */
  osThreadDef(PositionRegTask, StartPositionRegTask, osPriorityRealtime, 0, 128);
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_FREERTOS_Init+0xb4>)
 8000618:	f107 041c 	add.w	r4, r7, #28
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000626:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PositionRegTaskHandle = osThreadCreate(osThread(PositionRegTask), NULL);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f008 f8b6 	bl	80087a2 <osThreadCreate>
 8000636:	4602      	mov	r2, r0
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_FREERTOS_Init+0xb8>)
 800063a:	601a      	str	r2, [r3, #0]

  /* definition and creation of TimerGameTask */
  osThreadDef(TimerGameTask, StartTimerGameTask, osPriorityNormal, 0, 128);
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_FREERTOS_Init+0xbc>)
 800063e:	463c      	mov	r4, r7
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimerGameTaskHandle = osThreadCreate(osThread(TimerGameTask), NULL);
 800064e:	463b      	mov	r3, r7
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f008 f8a5 	bl	80087a2 <osThreadCreate>
 8000658:	4602      	mov	r2, r0
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_FREERTOS_Init+0xc0>)
 800065c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800065e:	bf00      	nop
 8000660:	3770      	adds	r7, #112	; 0x70
 8000662:	46bd      	mov	sp, r7
 8000664:	bdb0      	pop	{r4, r5, r7, pc}
 8000666:	bf00      	nop
 8000668:	08015844 	.word	0x08015844
 800066c:	20004340 	.word	0x20004340
 8000670:	08015870 	.word	0x08015870
 8000674:	20004344 	.word	0x20004344
 8000678:	0801589c 	.word	0x0801589c
 800067c:	2000434c 	.word	0x2000434c
 8000680:	080158c8 	.word	0x080158c8
 8000684:	20004348 	.word	0x20004348

08000688 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000690:	f006 f8ba 	bl	8006808 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000694:	f013 fcb0 	bl	8013ff8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f008 f8ce 	bl	800883a <osDelay>
 800069e:	e7fb      	b.n	8000698 <StartDefaultTask+0x10>

080006a0 <StartSpeedRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSpeedRegTask */
void StartSpeedRegTask(void const * argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSpeedRegTask */
  /* Infinite loop */
  for(;;)
  {
	F_GPIO_ToogleLedRed();
 80006a8:	f000 f8e8 	bl	800087c <F_GPIO_ToogleLedRed>
    osDelay(1000);
 80006ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b0:	f008 f8c3 	bl	800883a <osDelay>
	F_GPIO_ToogleLedRed();
 80006b4:	e7f8      	b.n	80006a8 <StartSpeedRegTask+0x8>

080006b6 <StartPositionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPositionRegTask */
void StartPositionRegTask(void const * argument)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPositionRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(20);
 80006be:	2014      	movs	r0, #20
 80006c0:	f008 f8bb 	bl	800883a <osDelay>
 80006c4:	e7fb      	b.n	80006be <StartPositionRegTask+0x8>

080006c6 <StartTimerGameTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimerGameTask */
void StartTimerGameTask(void const * argument)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimerGameTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f008 f8b2 	bl	800883a <osDelay>
 80006d6:	e7fa      	b.n	80006ce <StartTimerGameTask+0x8>

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	4b5c      	ldr	r3, [pc, #368]	; (8000864 <MX_GPIO_Init+0x18c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a5b      	ldr	r2, [pc, #364]	; (8000864 <MX_GPIO_Init+0x18c>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b59      	ldr	r3, [pc, #356]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	61bb      	str	r3, [r7, #24]
 8000708:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	4b55      	ldr	r3, [pc, #340]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a54      	ldr	r2, [pc, #336]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000714:	f043 0320 	orr.w	r3, r3, #32
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b52      	ldr	r3, [pc, #328]	; (8000864 <MX_GPIO_Init+0x18c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0320 	and.w	r3, r3, #32
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <MX_GPIO_Init+0x18c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a4d      	ldr	r2, [pc, #308]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b47      	ldr	r3, [pc, #284]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a46      	ldr	r2, [pc, #280]	; (8000864 <MX_GPIO_Init+0x18c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b40      	ldr	r3, [pc, #256]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a3f      	ldr	r2, [pc, #252]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a38      	ldr	r2, [pc, #224]	; (8000864 <MX_GPIO_Init+0x18c>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b36      	ldr	r3, [pc, #216]	; (8000864 <MX_GPIO_Init+0x18c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0x18c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <MX_GPIO_Init+0x18c>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <MX_GPIO_Init+0x18c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	213c      	movs	r1, #60	; 0x3c
 80007b6:	482c      	ldr	r0, [pc, #176]	; (8000868 <MX_GPIO_Init+0x190>)
 80007b8:	f001 ffa0 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c2:	482a      	ldr	r0, [pc, #168]	; (800086c <MX_GPIO_Init+0x194>)
 80007c4:	f001 ff9a 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2140      	movs	r1, #64	; 0x40
 80007cc:	4828      	ldr	r0, [pc, #160]	; (8000870 <MX_GPIO_Init+0x198>)
 80007ce:	f001 ff95 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_GPIO_Init+0x19c>)
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4824      	ldr	r0, [pc, #144]	; (8000878 <MX_GPIO_Init+0x1a0>)
 80007e8:	f001 fdde 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin;
 80007ec:	233c      	movs	r3, #60	; 0x3c
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4819      	ldr	r0, [pc, #100]	; (8000868 <MX_GPIO_Init+0x190>)
 8000804:	f001 fdd0 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000808:	f244 0381 	movw	r3, #16513	; 0x4081
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_GPIO_Init+0x194>)
 8000822:	f001 fdc1 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000826:	2340      	movs	r3, #64	; 0x40
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_GPIO_Init+0x198>)
 800083e:	f001 fdb3 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_GPIO_Init+0x198>)
 8000856:	f001 fda7 	bl	80023a8 <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3730      	adds	r7, #48	; 0x30
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40021400 	.word	0x40021400
 800086c:	40020400 	.word	0x40020400
 8000870:	40021800 	.word	0x40021800
 8000874:	10110000 	.word	0x10110000
 8000878:	40020800 	.word	0x40020800

0800087c <F_GPIO_ToogleLedRed>:

/* USER CODE BEGIN 2 */
void F_GPIO_ToogleLedRed(void){
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	if((GPIOB->ODR & LED_Red) > 0){
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <F_GPIO_ToogleLedRed+0x34>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d006      	beq.n	800089a <F_GPIO_ToogleLedRed+0x1e>
		GPIOB->ODR &= ~LED_Red;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <F_GPIO_ToogleLedRed+0x34>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <F_GPIO_ToogleLedRed+0x34>)
 8000892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000896:	6153      	str	r3, [r2, #20]
	}else{
		GPIOB->ODR |= LED_Red;
	}
}
 8000898:	e005      	b.n	80008a6 <F_GPIO_ToogleLedRed+0x2a>
		GPIOB->ODR |= LED_Red;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <F_GPIO_ToogleLedRed+0x34>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <F_GPIO_ToogleLedRed+0x34>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6153      	str	r3, [r2, #20]
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40020400 	.word	0x40020400

080008b4 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	431a      	orrs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60da      	str	r2, [r3, #12]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	f023 0201 	bic.w	r2, r3, #1
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60da      	str	r2, [r3, #12]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4313      	orrs	r3, r2
 800094e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4013      	ands	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40023800 	.word	0x40023800

0800096c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <LL_APB1_GRP1_EnableClock+0x2c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800

0800099c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	2220      	movs	r2, #32
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f014 f84c 	bl	8014a48 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80009c0:	2002      	movs	r0, #2
 80009c2:	f7ff ffbb 	bl	800093c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80009c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009cc:	2302      	movs	r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80009d4:	2301      	movs	r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80009d8:	2301      	movs	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80009dc:	2304      	movs	r3, #4
 80009de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	4817      	ldr	r0, [pc, #92]	; (8000a44 <MX_I2C1_Init+0xa8>)
 80009e6:	f003 ffbe 	bl	8004966 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80009ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009ee:	f7ff ffbd 	bl	800096c <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_I2C1_Init+0xac>)
 80009f4:	f7ff ff91 	bl	800091a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MX_I2C1_Init+0xac>)
 80009fa:	f7ff ff6b 	bl	80008d4 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <MX_I2C1_Init+0xac>)
 8000a00:	f7ff ff58 	bl	80008b4 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_I2C1_Init+0xb0>)
 8000a0a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_I2C1_Init+0xac>)
 8000a30:	f004 f91a 	bl	8004c68 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000a34:	2100      	movs	r1, #0
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_I2C1_Init+0xac>)
 8000a38:	f7ff ff5c 	bl	80008f4 <LL_I2C_SetOwnAddress2>

}
 8000a3c:	bf00      	nop
 8000a3e:	3738      	adds	r7, #56	; 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	000186a0 	.word	0x000186a0

08000a50 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000a56:	f107 0318 	add.w	r3, r7, #24
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f013 fff2 	bl	8014a48 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
 8000a72:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000a74:	2020      	movs	r0, #32
 8000a76:	f7ff ff61 	bl	800093c <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000a86:	2301      	movs	r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_I2C2_Init+0xa8>)
 8000a98:	f003 ff65 	bl	8004966 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8000a9c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000aa0:	f7ff ff64 	bl	800096c <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8000aa4:	4815      	ldr	r0, [pc, #84]	; (8000afc <MX_I2C2_Init+0xac>)
 8000aa6:	f7ff ff38 	bl	800091a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <MX_I2C2_Init+0xac>)
 8000aac:	f7ff ff12 	bl	80008d4 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <MX_I2C2_Init+0xac>)
 8000ab2:	f7ff feff 	bl	80008b4 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C2_Init+0xb0>)
 8000abc:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_I2C2_Init+0xac>)
 8000ae2:	f004 f8c1 	bl	8004c68 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_I2C2_Init+0xac>)
 8000aea:	f7ff ff03 	bl	80008f4 <LL_I2C_SetOwnAddress2>

}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021400 	.word	0x40021400
 8000afc:	40005800 	.word	0x40005800
 8000b00:	000186a0 	.word	0x000186a0

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 faf6 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f80e 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f7ff fde2 	bl	80006d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b14:	f000 fa74 	bl	8001000 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000b18:	f7ff ff40 	bl	800099c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b1c:	f7ff ff98 	bl	8000a50 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000b20:	f7ff fd50 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b24:	f007 fe26 	bl	8008774 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <main+0x24>
	...

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b094      	sub	sp, #80	; 0x50
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	2230      	movs	r2, #48	; 0x30
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f013 ff84 	bl	8014a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <SystemClock_Config+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <SystemClock_Config+0xd0>)
 8000b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <SystemClock_Config+0xd0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b92:	2302      	movs	r3, #2
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ba0:	23a8      	movs	r3, #168	; 0xa8
 8000ba2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 ff47 	bl	8003a44 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bbc:	f000 f832 	bl	8000c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2105      	movs	r1, #5
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 f972 	bl	8003ec8 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bea:	f000 f81b 	bl	8000c24 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d101      	bne.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c12:	f000 fa93 	bl	800113c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40014400 	.word	0x40014400

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_MspInit+0x54>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <HAL_MspInit+0x54>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x54>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_MspInit+0x54>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_MspInit+0x54>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_MspInit+0x54>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	210f      	movs	r1, #15
 8000c76:	f06f 0001 	mvn.w	r0, #1
 8000c7a:	f000 fb59 	bl	8001330 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2019      	movs	r0, #25
 8000ca2:	f000 fb45 	bl	8001330 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000ca6:	2019      	movs	r0, #25
 8000ca8:	f000 fb5e 	bl	8001368 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cba:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc8:	f107 0210 	add.w	r2, r7, #16
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fad2 	bl	800427c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cd8:	f003 fabc 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <HAL_InitTick+0xa8>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0c9b      	lsrs	r3, r3, #18
 8000cec:	3b01      	subs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_InitTick+0xac>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <HAL_InitTick+0xb0>)
 8000cf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_InitTick+0xac>)
 8000cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_InitTick+0xac>)
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_InitTick+0xac>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_InitTick+0xac>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <HAL_InitTick+0xac>)
 8000d12:	f003 fae5 	bl	80042e0 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d104      	bne.n	8000d26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000d1c:	4806      	ldr	r0, [pc, #24]	; (8000d38 <HAL_InitTick+0xac>)
 8000d1e:	f003 fb14 	bl	800434a <HAL_TIM_Base_Start_IT>
 8000d22:	4603      	mov	r3, r0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3730      	adds	r7, #48	; 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	431bde83 	.word	0x431bde83
 8000d38:	20004350 	.word	0x20004350
 8000d3c:	40014400 	.word	0x40014400

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d7a:	f003 fb0a 	bl	8004392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20004350 	.word	0x20004350

08000d88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <ETH_IRQHandler+0x10>)
 8000d8e:	f000 fedf 	bl	8001b50 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20005cac 	.word	0x20005cac

08000d9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <OTG_FS_IRQHandler+0x10>)
 8000da2:	f001 fe14 	bl	80029ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000c010 	.word	0x2000c010

08000db0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
	}

return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
	}
	return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x50>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x16>
		heap_end = &end;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <_sbrk+0x50>)
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <_sbrk+0x54>)
 8000ea0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <_sbrk+0x50>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <_sbrk+0x50>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	466a      	mov	r2, sp
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d905      	bls.n	8000ec2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <_sbrk+0x58>)
 8000eb8:	220c      	movs	r2, #12
 8000eba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec0:	e006      	b.n	8000ed0 <_sbrk+0x44>
	}

	heap_end += incr;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <_sbrk+0x50>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <_sbrk+0x50>)
 8000ecc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	20000454 	.word	0x20000454
 8000ee0:	2000c418 	.word	0x2000c418
 8000ee4:	2000ab6c 	.word	0x2000ab6c

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <SystemInit+0x60>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <SystemInit+0x60>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <SystemInit+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <SystemInit+0x64>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <SystemInit+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <SystemInit+0x64>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <SystemInit+0x64>)
 8000f14:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <SystemInit+0x64>)
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <SystemInit+0x68>)
 8000f22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <SystemInit+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <SystemInit+0x64>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SystemInit+0x60>)
 8000f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3c:	609a      	str	r2, [r3, #8]
#endif
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	24003010 	.word	0x24003010

08000f54 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	615a      	str	r2, [r3, #20]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_AHB1_GRP1_EnableClock>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <LL_APB1_GRP1_EnableClock>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023800 	.word	0x40023800

08001000 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800102a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800102e:	f7ff ffcf 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001032:	2008      	movs	r0, #8
 8001034:	f7ff ffb4 	bl	8000fa0 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001038:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800103e:	2302      	movs	r3, #2
 8001040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800104a:	2301      	movs	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800104e:	2307      	movs	r3, #7
 8001050:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_USART3_UART_Init+0x9c>)
 8001058:	f003 fc85 	bl	8004966 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 800105c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001060:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800106e:	230c      	movs	r3, #12
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001076:	2300      	movs	r3, #0
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <MX_USART3_UART_Init+0xa0>)
 8001082:	f004 f853 	bl	800512c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_USART3_UART_Init+0xa0>)
 8001088:	f7ff ff74 	bl	8000f74 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_USART3_UART_Init+0xa0>)
 800108e:	f7ff ff61 	bl	8000f54 <LL_USART_Enable>

}
 8001092:	bf00      	nop
 8001094:	3738      	adds	r7, #56	; 0x38
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40004800 	.word	0x40004800

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010aa:	e003      	b.n	80010b4 <LoopCopyDataInit>

080010ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010b2:	3104      	adds	r1, #4

080010b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010bc:	d3f6      	bcc.n	80010ac <CopyDataInit>
  ldr  r2, =_sbss
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010c0:	e002      	b.n	80010c8 <LoopFillZerobss>

080010c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010c4:	f842 3b04 	str.w	r3, [r2], #4

080010c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010cc:	d3f9      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ce:	f7ff ff0b 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f013 fc6b 	bl	80149ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fd15 	bl	8000b04 <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010dc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80010e0:	0801784c 	.word	0x0801784c
  ldr  r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010e8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80010ec:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80010f0:	2000c418 	.word	0x2000c418

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f8fa 	bl	800131a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fdb0 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fd82 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000004 	.word	0x20000004
 8001160:	20004390 	.word	0x20004390

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20004390 	.word	0x20004390

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff ffee 	bl	8001164 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_Delay+0x40>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffde 	bl	8001164 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000004 	.word	0x20000004

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff4c 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001342:	f7ff ff61 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001346:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ffb1 	bl	80012b4 <NVIC_EncodePriority>
 8001352:	4602      	mov	r2, r0
 8001354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff80 	bl	8001260 <__NVIC_SetPriority>
}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff54 	bl	8001224 <__NVIC_EnableIRQ>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001394:	4baa      	ldr	r3, [pc, #680]	; (8001640 <HAL_ETH_Init+0x2bc>)
 8001396:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e185      	b.n	80016b6 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f005 fb50 	bl	8006a64 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b9e      	ldr	r3, [pc, #632]	; (8001644 <HAL_ETH_Init+0x2c0>)
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	4a9d      	ldr	r2, [pc, #628]	; (8001644 <HAL_ETH_Init+0x2c0>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d2:	6453      	str	r3, [r2, #68]	; 0x44
 80013d4:	4b9b      	ldr	r3, [pc, #620]	; (8001644 <HAL_ETH_Init+0x2c0>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013e0:	4b99      	ldr	r3, [pc, #612]	; (8001648 <HAL_ETH_Init+0x2c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a98      	ldr	r2, [pc, #608]	; (8001648 <HAL_ETH_Init+0x2c4>)
 80013e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013ea:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013ec:	4b96      	ldr	r3, [pc, #600]	; (8001648 <HAL_ETH_Init+0x2c4>)
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4994      	ldr	r1, [pc, #592]	; (8001648 <HAL_ETH_Init+0x2c4>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0201 	orr.w	r2, r2, #1
 800140c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001410:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001412:	f7ff fea7 	bl	8001164 <HAL_GetTick>
 8001416:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001418:	e011      	b.n	800143e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800141a:	f7ff fea3 	bl	8001164 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001428:	d909      	bls.n	800143e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2203      	movs	r2, #3
 800142e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e13b      	b.n	80016b6 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e4      	bne.n	800141a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f023 031c 	bic.w	r3, r3, #28
 800145e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001460:	f002 feec 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8001464:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4a78      	ldr	r2, [pc, #480]	; (800164c <HAL_ETH_Init+0x2c8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d908      	bls.n	8001480 <HAL_ETH_Init+0xfc>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4a77      	ldr	r2, [pc, #476]	; (8001650 <HAL_ETH_Init+0x2cc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d804      	bhi.n	8001480 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e027      	b.n	80014d0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	4a73      	ldr	r2, [pc, #460]	; (8001650 <HAL_ETH_Init+0x2cc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d908      	bls.n	800149a <HAL_ETH_Init+0x116>
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	4a72      	ldr	r2, [pc, #456]	; (8001654 <HAL_ETH_Init+0x2d0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d804      	bhi.n	800149a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f043 030c 	orr.w	r3, r3, #12
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	e01a      	b.n	80014d0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4a6d      	ldr	r2, [pc, #436]	; (8001654 <HAL_ETH_Init+0x2d0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d903      	bls.n	80014aa <HAL_ETH_Init+0x126>
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4a6c      	ldr	r2, [pc, #432]	; (8001658 <HAL_ETH_Init+0x2d4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d911      	bls.n	80014ce <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	4a6a      	ldr	r2, [pc, #424]	; (8001658 <HAL_ETH_Init+0x2d4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d908      	bls.n	80014c4 <HAL_ETH_Init+0x140>
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4a69      	ldr	r2, [pc, #420]	; (800165c <HAL_ETH_Init+0x2d8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d804      	bhi.n	80014c4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e005      	b.n	80014d0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	e000      	b.n	80014d0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014ce:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014dc:	2100      	movs	r1, #0
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fc19 	bl	8001d16 <HAL_ETH_WritePHYRegister>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014ee:	6939      	ldr	r1, [r7, #16]
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fca5 	bl	8001e40 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0d9      	b.n	80016b6 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001502:	20ff      	movs	r0, #255	; 0xff
 8001504:	f7ff fe3a 	bl	800117c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a7 	beq.w	8001660 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001512:	f7ff fe27 	bl	8001164 <HAL_GetTick>
 8001516:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	461a      	mov	r2, r3
 800151e:	2101      	movs	r1, #1
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fb90 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001526:	f7ff fe1d 	bl	8001164 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	; 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d90f      	bls.n	8001558 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800153c:	6939      	ldr	r1, [r7, #16]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fc7e 	bl	8001e40 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0ae      	b.n	80016b6 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0da      	beq.n	8001518 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fbd4 	bl	8001d16 <HAL_ETH_WritePHYRegister>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fc60 	bl	8001e40 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001588:	2301      	movs	r3, #1
 800158a:	e094      	b.n	80016b6 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff fdea 	bl	8001164 <HAL_GetTick>
 8001590:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	461a      	mov	r2, r3
 8001598:	2101      	movs	r1, #1
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fb53 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015a0:	f7ff fde0 	bl	8001164 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d90f      	bls.n	80015d2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fc41 	bl	8001e40 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e071      	b.n	80016b6 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0da      	beq.n	8001592 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	461a      	mov	r2, r3
 80015e2:	211f      	movs	r1, #31
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fb2e 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015f4:	6939      	ldr	r1, [r7, #16]
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fc22 	bl	8001e40 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001604:	2301      	movs	r3, #1
 8001606:	e056      	b.n	80016b6 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	e002      	b.n	8001622 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	e037      	b.n	80016a4 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e032      	b.n	80016a4 <HAL_ETH_Init+0x320>
 800163e:	bf00      	nop
 8001640:	03938700 	.word	0x03938700
 8001644:	40023800 	.word	0x40023800
 8001648:	40013800 	.word	0x40013800
 800164c:	01312cff 	.word	0x01312cff
 8001650:	02160ebf 	.word	0x02160ebf
 8001654:	039386ff 	.word	0x039386ff
 8001658:	05f5e0ff 	.word	0x05f5e0ff
 800165c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	085b      	lsrs	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001670:	4313      	orrs	r3, r2
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	2100      	movs	r1, #0
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fb4c 	bl	8001d16 <HAL_ETH_WritePHYRegister>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fbd8 	bl	8001e40 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e00c      	b.n	80016b6 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800169c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016a0:	f7ff fd6c 	bl	800117c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016a4:	6939      	ldr	r1, [r7, #16]
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fbca 	bl	8001e40 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop

080016c0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_ETH_DMATxDescListInit+0x20>
 80016dc:	2302      	movs	r3, #2
 80016de:	e052      	b.n	8001786 <HAL_ETH_DMATxDescListInit+0xc6>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e030      	b.n	800175e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	015b      	lsls	r3, r3, #5
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	4413      	add	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800170c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	461a      	mov	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	d208      	bcs.n	8001752 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4413      	add	r3, r2
 800174a:	461a      	mov	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	e002      	b.n	8001758 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d3ca      	bcc.n	80016fc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	3310      	adds	r3, #16
 8001772:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_ETH_DMARxDescListInit+0x20>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e056      	b.n	8001860 <HAL_ETH_DMARxDescListInit+0xce>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e034      	b.n	8001838 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	015b      	lsls	r3, r3, #5
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4413      	add	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017de:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017e6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	461a      	mov	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	429a      	cmp	r2, r3
 8001818:	d208      	bcs.n	800182c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	015b      	lsls	r3, r3, #5
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	4413      	add	r3, r2
 8001824:	461a      	mov	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	e002      	b.n	8001832 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3c6      	bcc.n	80017ce <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184a:	330c      	adds	r3, #12
 800184c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ETH_TransmitFrame+0x24>
 800188c:	2302      	movs	r3, #2
 800188e:	e0cd      	b.n	8001a2c <HAL_ETH_TransmitFrame+0x1c0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0b8      	b.n	8001a2c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da09      	bge.n	80018d8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2212      	movs	r2, #18
 80018c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0a9      	b.n	8001a2c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018de:	4293      	cmp	r3, r2
 80018e0:	d915      	bls.n	800190e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	4a54      	ldr	r2, [pc, #336]	; (8001a38 <HAL_ETH_TransmitFrame+0x1cc>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0a9b      	lsrs	r3, r3, #10
 80018ec:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <HAL_ETH_TransmitFrame+0x1cc>)
 80018f2:	fba3 1302 	umull	r1, r3, r3, r2
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e001      	b.n	8001912 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d11c      	bne.n	8001952 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001926:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001932:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001942:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001950:	e04b      	b.n	80019ea <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e044      	b.n	80019e2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001966:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d107      	bne.n	800197e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001986:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3b01      	subs	r3, #1
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	429a      	cmp	r2, r3
 8001990:	d116      	bne.n	80019c0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019a0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_ETH_TransmitFrame+0x1d0>)
 80019a6:	fb02 f203 	mul.w	r2, r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019b2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019be:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019ce:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3301      	adds	r3, #1
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d3b6      	bcc.n	8001958 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f2:	3314      	adds	r3, #20
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00d      	beq.n	8001a1a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a06:	3314      	adds	r3, #20
 8001a08:	2204      	movs	r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a14:	3304      	adds	r3, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	ac02b00b 	.word	0xac02b00b
 8001a3c:	fffffa0c 	.word	0xfffffa0c

08001a40 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e074      	b.n	8001b44 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2202      	movs	r2, #2
 8001a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a6a:	e05a      	b.n	8001b22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	d10d      	bne.n	8001a9e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	461a      	mov	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a9c:	e041      	b.n	8001b22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ac2:	e02e      	b.n	8001b22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d103      	bne.n	8001ae6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001af2:	1f1a      	subs	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e010      	b.n	8001b44 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db02      	blt.n	8001b32 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d99c      	bls.n	8001a6c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b60:	3314      	adds	r3, #20
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b68:	2b40      	cmp	r3, #64	; 0x40
 8001b6a:	d112      	bne.n	8001b92 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f005 f847 	bl	8006c00 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7a:	3314      	adds	r3, #20
 8001b7c:	2240      	movs	r2, #64	; 0x40
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b90:	e01b      	b.n	8001bca <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9a:	3314      	adds	r3, #20
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d111      	bne.n	8001bca <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f839 	bl	8001c1e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	3314      	adds	r3, #20
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	3314      	adds	r3, #20
 8001bd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bd8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	3314      	adds	r3, #20
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bee:	d112      	bne.n	8001c16 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f81e 	bl	8001c32 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfe:	3314      	adds	r3, #20
 8001c00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c04:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b82      	cmp	r3, #130	; 0x82
 8001c66:	d101      	bne.n	8001c6c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e050      	b.n	8001d0e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2282      	movs	r2, #130	; 0x82
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 031c 	and.w	r3, r3, #28
 8001c82:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8a1b      	ldrh	r3, [r3, #16]
 8001c88:	02db      	lsls	r3, r3, #11
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c92:	897b      	ldrh	r3, [r7, #10]
 8001c94:	019b      	lsls	r3, r3, #6
 8001c96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f023 0302 	bic.w	r3, r3, #2
 8001ca6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb8:	f7ff fa54 	bl	8001164 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cbe:	e015      	b.n	8001cec <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001cc0:	f7ff fa50 	bl	8001164 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cce:	d309      	bcc.n	8001ce4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e014      	b.n	8001d0e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1e4      	bne.n	8001cc0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b42      	cmp	r3, #66	; 0x42
 8001d36:	d101      	bne.n	8001d3c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e04e      	b.n	8001dda <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2242      	movs	r2, #66	; 0x42
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 031c 	and.w	r3, r3, #28
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8a1b      	ldrh	r3, [r3, #16]
 8001d58:	02db      	lsls	r3, r3, #11
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d92:	f7ff f9e7 	bl	8001164 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d98:	e015      	b.n	8001dc6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d9a:	f7ff f9e3 	bl	8001164 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d309      	bcc.n	8001dbe <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e00d      	b.n	8001dda <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1e4      	bne.n	8001d9a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_ETH_Start+0x16>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e01f      	b.n	8001e38 <HAL_ETH_Start+0x56>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fa1b 	bl	8002244 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fa35 	bl	800227e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fa7f 	bl	8002318 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa4c 	bl	80022b8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fa61 	bl	80022e8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0b0      	sub	sp, #192	; 0xc0
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e5c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e64:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e8c:	e001      	b.n	8001e92 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e96:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001eac:	2340      	movs	r3, #64	; 0x40
 8001eae:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f18:	4bac      	ldr	r3, [pc, #688]	; (80021cc <ETH_MACDMAConfig+0x38c>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f24:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f28:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f2c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f32:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f36:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f3a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f40:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f44:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f48:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f4c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f50:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f54:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f68:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7ff f901 	bl	800117c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f82:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f88:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f8c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f92:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f98:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f9e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001fa8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001fb0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fb2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff f8dc 	bl	800117c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fcc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fd6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fe0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ffe:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002004:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800200a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800200c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002010:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002016:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002018:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800201c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800201e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002030:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff f89d 	bl	800117c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800204a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800204c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002050:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff f888 	bl	800117c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002074:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002084:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002088:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800209a:	2304      	movs	r3, #4
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800209e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80020a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020be:	2300      	movs	r3, #0
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	3318      	adds	r3, #24
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d6:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <ETH_MACDMAConfig+0x390>)
 80020d8:	4013      	ands	r3, r2
 80020da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020de:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020e0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020e2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020e4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020e6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020e8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020ea:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020ec:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020ee:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020f0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020f2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020f4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020f6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020fa:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020fe:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002100:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002112:	3318      	adds	r3, #24
 8002114:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002118:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002122:	3318      	adds	r3, #24
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800212a:	2001      	movs	r0, #1
 800212c:	f7ff f826 	bl	800117c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002138:	3318      	adds	r3, #24
 800213a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800213e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002144:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002148:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800214c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002150:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002154:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002156:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800215a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002168:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002178:	2001      	movs	r0, #1
 800217a:	f7fe ffff 	bl	800117c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002186:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800218a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d10f      	bne.n	80021b4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219c:	331c      	adds	r3, #28
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b0:	331c      	adds	r3, #28
 80021b2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	461a      	mov	r2, r3
 80021ba:	2100      	movs	r1, #0
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f809 	bl	80021d4 <ETH_MACAddressConfig>
}
 80021c2:	bf00      	nop
 80021c4:	37c0      	adds	r7, #192	; 0xc0
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	ff20810f 	.word	0xff20810f
 80021d0:	f8de3f23 	.word	0xf8de3f23

080021d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3305      	adds	r3, #5
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	3204      	adds	r2, #4
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <ETH_MACAddressConfig+0x68>)
 80021f6:	4413      	add	r3, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3303      	adds	r3, #3
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	061a      	lsls	r2, r3, #24
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3302      	adds	r3, #2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3301      	adds	r3, #1
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	4313      	orrs	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <ETH_MACAddressConfig+0x6c>)
 8002226:	4413      	add	r3, r2
 8002228:	461a      	mov	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	6013      	str	r3, [r2, #0]
}
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40028040 	.word	0x40028040
 8002240:	40028044 	.word	0x40028044

08002244 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0208 	orr.w	r2, r2, #8
 800225e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002268:	2001      	movs	r0, #1
 800226a:	f000 f87f 	bl	800236c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	601a      	str	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0204 	orr.w	r2, r2, #4
 8002298:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f000 f862 	bl	800236c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c8:	3318      	adds	r3, #24
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d8:	3318      	adds	r3, #24
 80022da:	601a      	str	r2, [r3, #0]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	3318      	adds	r3, #24
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0202 	orr.w	r2, r2, #2
 8002304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002308:	3318      	adds	r3, #24
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232c:	3318      	adds	r3, #24
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233c:	3318      	adds	r3, #24
 800233e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	3318      	adds	r3, #24
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800234e:	2001      	movs	r0, #1
 8002350:	f000 f80c 	bl	800236c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235e:	3318      	adds	r3, #24
 8002360:	601a      	str	r2, [r3, #0]
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <ETH_Delay+0x34>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <ETH_Delay+0x38>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0a5b      	lsrs	r3, r3, #9
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002388:	bf00      	nop
  } 
  while (Delay --);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	60fa      	str	r2, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f9      	bne.n	8002388 <ETH_Delay+0x1c>
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	20000000 	.word	0x20000000
 80023a4:	10624dd3 	.word	0x10624dd3

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	e177      	b.n	80026b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c4:	2201      	movs	r2, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	429a      	cmp	r2, r3
 80023de:	f040 8166 	bne.w	80026ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x4a>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b12      	cmp	r3, #18
 80023f0:	d123      	bne.n	800243a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	69b9      	ldr	r1, [r7, #24]
 8002436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0203 	and.w	r2, r3, #3
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d00b      	beq.n	800248e <HAL_GPIO_Init+0xe6>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002482:	2b11      	cmp	r3, #17
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b12      	cmp	r3, #18
 800248c:	d130      	bne.n	80024f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80c0 	beq.w	80026ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a64      	ldr	r2, [pc, #400]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254a:	4a60      	ldr	r2, [pc, #384]	; (80026cc <HAL_GPIO_Init+0x324>)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	3302      	adds	r3, #2
 8002552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a57      	ldr	r2, [pc, #348]	; (80026d0 <HAL_GPIO_Init+0x328>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d037      	beq.n	80025e6 <HAL_GPIO_Init+0x23e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a56      	ldr	r2, [pc, #344]	; (80026d4 <HAL_GPIO_Init+0x32c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d031      	beq.n	80025e2 <HAL_GPIO_Init+0x23a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a55      	ldr	r2, [pc, #340]	; (80026d8 <HAL_GPIO_Init+0x330>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02b      	beq.n	80025de <HAL_GPIO_Init+0x236>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a54      	ldr	r2, [pc, #336]	; (80026dc <HAL_GPIO_Init+0x334>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d025      	beq.n	80025da <HAL_GPIO_Init+0x232>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <HAL_GPIO_Init+0x338>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01f      	beq.n	80025d6 <HAL_GPIO_Init+0x22e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_GPIO_Init+0x33c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x22a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <HAL_GPIO_Init+0x340>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x226>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_GPIO_Init+0x344>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x222>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4f      	ldr	r2, [pc, #316]	; (80026f0 <HAL_GPIO_Init+0x348>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x21e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4e      	ldr	r2, [pc, #312]	; (80026f4 <HAL_GPIO_Init+0x34c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x21a>
 80025be:	2309      	movs	r3, #9
 80025c0:	e012      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025c2:	230a      	movs	r3, #10
 80025c4:	e010      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025c6:	2308      	movs	r3, #8
 80025c8:	e00e      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e00c      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e00a      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025d2:	2305      	movs	r3, #5
 80025d4:	e008      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025da:	2303      	movs	r3, #3
 80025dc:	e004      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025de:	2302      	movs	r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025e6:	2300      	movs	r3, #0
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f002 0203 	and.w	r2, r2, #3
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	4093      	lsls	r3, r2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f8:	4934      	ldr	r1, [pc, #208]	; (80026cc <HAL_GPIO_Init+0x324>)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262a:	4a33      	ldr	r2, [pc, #204]	; (80026f8 <HAL_GPIO_Init+0x350>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265a:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_GPIO_Init+0x350>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <HAL_GPIO_Init+0x350>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	f67f ae84 	bls.w	80023c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026bc:	bf00      	nop
 80026be:	3724      	adds	r7, #36	; 0x24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40013800 	.word	0x40013800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020400 	.word	0x40020400
 80026d8:	40020800 	.word	0x40020800
 80026dc:	40020c00 	.word	0x40020c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40021400 	.word	0x40021400
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40021c00 	.word	0x40021c00
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40022400 	.word	0x40022400
 80026f8:	40013c00 	.word	0x40013c00

080026fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800270c:	787b      	ldrb	r3, [r7, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002718:	e003      	b.n	8002722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800272e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002730:	b08f      	sub	sp, #60	; 0x3c
 8002732:	af0a      	add	r7, sp, #40	; 0x28
 8002734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e10f      	b.n	8002960 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f011 fe18 	bl	8014390 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2203      	movs	r2, #3
 8002764:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fe7b 	bl	800547a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	687e      	ldr	r6, [r7, #4]
 800278c:	466d      	mov	r5, sp
 800278e:	f106 0410 	add.w	r4, r6, #16
 8002792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800279e:	e885 0003 	stmia.w	r5, {r0, r1}
 80027a2:	1d33      	adds	r3, r6, #4
 80027a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	f002 fd52 	bl	8005250 <USB_CoreInit>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0d0      	b.n	8002960 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 fe69 	bl	800549c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e04a      	b.n	8002866 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	333d      	adds	r3, #61	; 0x3d
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	333c      	adds	r3, #60	; 0x3c
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	b298      	uxth	r0, r3
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3342      	adds	r3, #66	; 0x42
 800280c:	4602      	mov	r2, r0
 800280e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	333f      	adds	r3, #63	; 0x3f
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3344      	adds	r3, #68	; 0x44
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3348      	adds	r3, #72	; 0x48
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3350      	adds	r3, #80	; 0x50
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	3301      	adds	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d3af      	bcc.n	80027d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002870:	2300      	movs	r3, #0
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e044      	b.n	8002900 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	3301      	adds	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d3b5      	bcc.n	8002876 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	687e      	ldr	r6, [r7, #4]
 8002912:	466d      	mov	r5, sp
 8002914:	f106 0410 	add.w	r4, r6, #16
 8002918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002924:	e885 0003 	stmia.w	r5, {r0, r1}
 8002928:	1d33      	adds	r3, r6, #4
 800292a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292c:	6838      	ldr	r0, [r7, #0]
 800292e:	f002 fddf 	bl	80054f0 <USB_DevInit>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e00d      	b.n	8002960 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f003 fdd4 	bl	8006506 <USB_DevDisconnect>

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002968 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_PCD_Start+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e020      	b.n	80029c6 <HAL_PCD_Start+0x5e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	2b01      	cmp	r3, #1
 8002992:	d109      	bne.n	80029a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002998:	2b01      	cmp	r3, #1
 800299a:	d005      	beq.n	80029a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fd92 	bl	80064d6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 fd4e 	bl	8005458 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029ce:	b590      	push	{r4, r7, lr}
 80029d0:	b08d      	sub	sp, #52	; 0x34
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 fe39 	bl	800665c <USB_GetMode>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 838e 	bne.w	800310e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fd9d 	bl	8006536 <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8384 	beq.w	800310c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fd94 	bl	8006536 <USB_ReadInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d107      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f002 0202 	and.w	r2, r2, #2
 8002a26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 fd82 	bl	8006536 <USB_ReadInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a3c:	d17b      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fd88 	bl	800655c <USB_ReadDevAllOutEpInterrupt>
 8002a4c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a4e:	e06f      	b.n	8002b30 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d064      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 fdad 	bl	80065c4 <USB_ReadDevOutEPInterrupt>
 8002a6a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a82:	461a      	mov	r2, r3
 8002a84:	2301      	movs	r3, #1
 8002a86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fe0e 	bl	80036ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 ff0d 	bl	80038bc <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aca:	461a      	mov	r2, r3
 8002acc:	2310      	movs	r3, #16
 8002ace:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d108      	bne.n	8002af4 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aec:	461a      	mov	r2, r3
 8002aee:	2101      	movs	r1, #1
 8002af0:	f003 fdf8 	bl	80066e4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b00:	461a      	mov	r2, r3
 8002b02:	2320      	movs	r3, #32
 8002b04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b22:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	3301      	adds	r3, #1
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d18c      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fcfb 	bl	8006536 <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b4a:	f040 80c4 	bne.w	8002cd6 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 fd1c 	bl	8006590 <USB_ReadDevAllInEpInterrupt>
 8002b58:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b5e:	e0b6      	b.n	8002cce <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80ab 	beq.w	8002cc2 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fd42 	bl	8006600 <USB_ReadDevInEPInterrupt>
 8002b7c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05b      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	2201      	movs	r2, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69f9      	ldr	r1, [r7, #28]
 8002ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ba8:	4013      	ands	r3, r2
 8002baa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2301      	movs	r3, #1
 8002bbc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d11b      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3348      	adds	r3, #72	; 0x48
 8002bd6:	6819      	ldr	r1, [r3, #0]
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4403      	add	r3, r0
 8002be6:	3344      	adds	r3, #68	; 0x44
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4419      	add	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4403      	add	r3, r0
 8002bfa:	3348      	adds	r3, #72	; 0x48
 8002bfc:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4619      	mov	r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f011 fc52 	bl	80144ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d116      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x272>
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3350      	adds	r3, #80	; 0x50
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d108      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	f003 fd52 	bl	80066e4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c56:	461a      	mov	r2, r3
 8002c58:	2308      	movs	r3, #8
 8002c5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c72:	461a      	mov	r2, r3
 8002c74:	2310      	movs	r3, #16
 8002c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2340      	movs	r3, #64	; 0x40
 8002c92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002caa:	461a      	mov	r2, r3
 8002cac:	2302      	movs	r3, #2
 8002cae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fc67 	bl	8003590 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f47f af45 	bne.w	8002b60 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fc2b 	bl	8006536 <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cea:	d122      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d108      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d12:	2100      	movs	r1, #0
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fe89 	bl	8003a2c <HAL_PCDEx_LPM_Callback>
 8002d1a:	e002      	b.n	8002d22 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f011 fc3d 	bl	801459c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fbfd 	bl	8006536 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d46:	d112      	bne.n	8002d6e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d102      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f011 fbf9 	bl	8014550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d6c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 fbdf 	bl	8006536 <USB_ReadInterrupts>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	f040 80a7 	bne.w	8002ed4 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2110      	movs	r1, #16
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fd17 	bl	80057d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002daa:	e036      	b.n	8002e1a <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db8:	461a      	mov	r2, r3
 8002dba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dbe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd0:	0151      	lsls	r1, r2, #5
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	440a      	add	r2, r1
 8002dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dec:	461a      	mov	r2, r3
 8002dee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002df2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e04:	0151      	lsls	r1, r2, #5
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	440a      	add	r2, r1
 8002e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e12:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	3301      	adds	r3, #1
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d3c3      	bcc.n	8002dac <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e32:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e36:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d016      	beq.n	8002e6e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e50:	f043 030b 	orr.w	r3, r3, #11
 8002e54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e66:	f043 030b 	orr.w	r3, r3, #11
 8002e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6c:	e015      	b.n	8002e9a <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e80:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e84:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e94:	f043 030b 	orr.w	r3, r3, #11
 8002e98:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002eac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f003 fc10 	bl	80066e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 fb2c 	bl	8006536 <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee8:	d124      	bne.n	8002f34 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 fbc2 	bl	8006678 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 fccc 	bl	8005896 <USB_GetDevSpeed>
 8002efe:	4603      	mov	r3, r0
 8002f00:	461a      	mov	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681c      	ldr	r4, [r3, #0]
 8002f0a:	f001 f997 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8002f0e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f002 f9fb 	bl	8005314 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f011 faed 	bl	80144fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 fafc 	bl	8006536 <USB_ReadInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d161      	bne.n	800300c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0210 	bic.w	r2, r2, #16
 8002f56:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f003 020f 	and.w	r2, r3, #15
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	0c5b      	lsrs	r3, r3, #17
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d124      	bne.n	8002fce <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d035      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6a38      	ldr	r0, [r7, #32]
 8002fa4:	f003 f974 	bl	8006290 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	619a      	str	r2, [r3, #24]
 8002fcc:	e016      	b.n	8002ffc <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	0c5b      	lsrs	r3, r3, #17
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d110      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6a38      	ldr	r0, [r7, #32]
 8002fe6:	f003 f953 	bl	8006290 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff6:	441a      	add	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0210 	orr.w	r2, r2, #16
 800300a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f003 fa90 	bl	8006536 <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b08      	cmp	r3, #8
 800301e:	d10a      	bne.n	8003036 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f011 fa5e 	bl	80144e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f002 0208 	and.w	r2, r2, #8
 8003034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f003 fa7b 	bl	8006536 <USB_ReadInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304a:	d10f      	bne.n	800306c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	b2db      	uxtb	r3, r3
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f011 fac0 	bl	80145dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800306a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f003 fa60 	bl	8006536 <USB_ReadInterrupts>
 8003076:	4603      	mov	r3, r0
 8003078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003080:	d10f      	bne.n	80030a2 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	b2db      	uxtb	r3, r3
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f011 fa93 	bl	80145b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 fa45 	bl	8006536 <USB_ReadInterrupts>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d10a      	bne.n	80030ce <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f011 faa1 	bl	8014600 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fa2f 	bl	8006536 <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d115      	bne.n	800310e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f011 fa91 	bl	801461c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	e000      	b.n	800310e <HAL_PCD_IRQHandler+0x740>
      return;
 800310c:	bf00      	nop
    }
  }
}
 800310e:	3734      	adds	r7, #52	; 0x34
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}

08003114 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_PCD_SetAddress+0x1a>
 800312a:	2302      	movs	r3, #2
 800312c:	e013      	b.n	8003156 <HAL_PCD_SetAddress+0x42>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f003 f99f 	bl	800648a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	4608      	mov	r0, r1
 8003168:	4611      	mov	r1, r2
 800316a:	461a      	mov	r2, r3
 800316c:	4603      	mov	r3, r0
 800316e:	70fb      	strb	r3, [r7, #3]
 8003170:	460b      	mov	r3, r1
 8003172:	803b      	strh	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800317c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003180:	2b00      	cmp	r3, #0
 8003182:	da0f      	bge.n	80031a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	3338      	adds	r3, #56	; 0x38
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	705a      	strb	r2, [r3, #1]
 80031a2:	e00f      	b.n	80031c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 020f 	and.w	r2, r3, #15
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	3304      	adds	r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031d0:	883a      	ldrh	r2, [r7, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	78ba      	ldrb	r2, [r7, #2]
 80031da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031ee:	78bb      	ldrb	r3, [r7, #2]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d102      	bne.n	80031fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_PCD_EP_Open+0xaa>
 8003204:	2302      	movs	r3, #2
 8003206:	e00e      	b.n	8003226 <HAL_PCD_EP_Open+0xc8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68f9      	ldr	r1, [r7, #12]
 8003216:	4618      	mov	r0, r3
 8003218:	f002 fb62 	bl	80058e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003224:	7afb      	ldrb	r3, [r7, #11]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800323a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da0f      	bge.n	8003262 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3338      	adds	r3, #56	; 0x38
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	705a      	strb	r2, [r3, #1]
 8003260:	e00f      	b.n	8003282 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PCD_EP_Close+0x6e>
 8003298:	2302      	movs	r3, #2
 800329a:	e00e      	b.n	80032ba <HAL_PCD_EP_Close+0x8c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 fba0 	bl	80059f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	460b      	mov	r3, r1
 80032d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	3304      	adds	r3, #4
 80032ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	b2da      	uxtb	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	6979      	ldr	r1, [r7, #20]
 8003336:	f002 fe23 	bl	8005f80 <USB_EP0StartXfer>
 800333a:	e008      	b.n	800334e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	6979      	ldr	r1, [r7, #20]
 800334a:	f002 fbd5 	bl	8005af8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 020f 	and.w	r2, r3, #15
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	460b      	mov	r3, r1
 8003396:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003398:	7afb      	ldrb	r3, [r7, #11]
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	3338      	adds	r3, #56	; 0x38
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	3304      	adds	r3, #4
 80033ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2201      	movs	r2, #1
 80033c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033e2:	7afb      	ldrb	r3, [r7, #11]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	6979      	ldr	r1, [r7, #20]
 80033fa:	f002 fdc1 	bl	8005f80 <USB_EP0StartXfer>
 80033fe:	e008      	b.n	8003412 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	f002 fb73 	bl	8005af8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	f003 020f 	and.w	r2, r3, #15
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	d901      	bls.n	800343a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e050      	b.n	80034dc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800343a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800343e:	2b00      	cmp	r3, #0
 8003440:	da0f      	bge.n	8003462 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 020f 	and.w	r2, r3, #15
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	3338      	adds	r3, #56	; 0x38
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	3304      	adds	r3, #4
 8003458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	705a      	strb	r2, [r3, #1]
 8003460:	e00d      	b.n	800347e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_PCD_EP_SetStall+0x82>
 800349a:	2302      	movs	r3, #2
 800349c:	e01e      	b.n	80034dc <HAL_PCD_EP_SetStall+0xc0>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 ff18 	bl	80062e2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	b2d9      	uxtb	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034cc:	461a      	mov	r2, r3
 80034ce:	f003 f909 	bl	80066e4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d901      	bls.n	8003502 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e042      	b.n	8003588 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003506:	2b00      	cmp	r3, #0
 8003508:	da0f      	bge.n	800352a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	f003 020f 	and.w	r2, r3, #15
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	3338      	adds	r3, #56	; 0x38
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	3304      	adds	r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	705a      	strb	r2, [r3, #1]
 8003528:	e00f      	b.n	800354a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_PCD_EP_ClrStall+0x86>
 8003566:	2302      	movs	r3, #2
 8003568:	e00e      	b.n	8003588 <HAL_PCD_EP_ClrStall+0xa4>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	4618      	mov	r0, r3
 800357a:	f002 ff20 	bl	80063be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	3338      	adds	r3, #56	; 0x38
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	3304      	adds	r3, #4
 80035b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d901      	bls.n	80035c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e06c      	b.n	80036a2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d902      	bls.n	80035e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	3303      	adds	r3, #3
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ec:	e02b      	b.n	8003646 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	429a      	cmp	r2, r3
 8003602:	d902      	bls.n	800360a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3303      	adds	r3, #3
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003622:	b2db      	uxtb	r3, r3
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4603      	mov	r3, r0
 8003628:	6978      	ldr	r0, [r7, #20]
 800362a:	f002 fdfc 	bl	8006226 <USB_WritePacket>

    ep->xfer_buff  += len;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	441a      	add	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	441a      	add	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	b29b      	uxth	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	429a      	cmp	r2, r3
 800365a:	d809      	bhi.n	8003670 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003664:	429a      	cmp	r2, r3
 8003666:	d203      	bcs.n	8003670 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1be      	bne.n	80035ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	429a      	cmp	r2, r3
 800367a:	d811      	bhi.n	80036a0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	2201      	movs	r2, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	43db      	mvns	r3, r3
 8003696:	6939      	ldr	r1, [r7, #16]
 8003698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800369c:	4013      	ands	r3, r2
 800369e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	333c      	adds	r3, #60	; 0x3c
 80036c4:	3304      	adds	r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	f040 80b3 	bne.w	800384a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d028      	beq.n	8003740 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a70      	ldr	r2, [pc, #448]	; (80038b4 <PCD_EP_OutXfrComplete_int+0x208>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d90e      	bls.n	8003714 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370c:	461a      	mov	r2, r3
 800370e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003712:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f010 fe9d 	bl	8014454 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003724:	461a      	mov	r2, r3
 8003726:	2101      	movs	r1, #1
 8003728:	f002 ffdc 	bl	80066e4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003738:	461a      	mov	r2, r3
 800373a:	2308      	movs	r3, #8
 800373c:	6093      	str	r3, [r2, #8]
 800373e:	e0b3      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003756:	461a      	mov	r2, r3
 8003758:	2320      	movs	r3, #32
 800375a:	6093      	str	r3, [r2, #8]
 800375c:	e0a4      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	f040 809f 	bne.w	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a51      	ldr	r2, [pc, #324]	; (80038b4 <PCD_EP_OutXfrComplete_int+0x208>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d90f      	bls.n	8003792 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003788:	461a      	mov	r2, r3
 800378a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378e:	6093      	str	r3, [r2, #8]
 8003790:	e08a      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037a4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	0159      	lsls	r1, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80037b8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4403      	add	r3, r0
 80037c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037cc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037e0:	6819      	ldr	r1, [r3, #0]
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4403      	add	r3, r0
 80037f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4419      	add	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4403      	add	r3, r0
 8003806:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800380a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f010 fe30 	bl	8014478 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d144      	bne.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d138      	bne.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003840:	461a      	mov	r2, r3
 8003842:	2101      	movs	r1, #1
 8003844:	f002 ff4e 	bl	80066e4 <USB_EP0_OutStart>
 8003848:	e02e      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <PCD_EP_OutXfrComplete_int+0x20c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d124      	bne.n	800389c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003868:	461a      	mov	r2, r3
 800386a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386e:	6093      	str	r3, [r2, #8]
 8003870:	e01a      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	2320      	movs	r3, #32
 800388c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f010 fdef 	bl	8014478 <HAL_PCD_DataOutStageCallback>
 800389a:	e005      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f010 fde8 	bl	8014478 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	4f54300a 	.word	0x4f54300a
 80038b8:	4f54310a 	.word	0x4f54310a

080038bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	333c      	adds	r3, #60	; 0x3c
 80038d4:	3304      	adds	r3, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d113      	bne.n	800391a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <PCD_EP_OutSetupPacket_int+0xb8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d922      	bls.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01d      	beq.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	461a      	mov	r2, r3
 8003912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003916:	6093      	str	r3, [r2, #8]
 8003918:	e012      	b.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a16      	ldr	r2, [pc, #88]	; (8003978 <PCD_EP_OutSetupPacket_int+0xbc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10e      	bne.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f010 fd87 	bl	8014454 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <PCD_EP_OutSetupPacket_int+0xb8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d90c      	bls.n	8003968 <PCD_EP_OutSetupPacket_int+0xac>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d108      	bne.n	8003968 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	f002 febe 	bl	80066e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	4f54300a 	.word	0x4f54300a
 8003978:	4f54310a 	.word	0x4f54310a

0800397c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
 8003988:	4613      	mov	r3, r2
 800398a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800399a:	883b      	ldrh	r3, [r7, #0]
 800399c:	0419      	lsls	r1, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
 80039a8:	e028      	b.n	80039fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4413      	add	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e00d      	b.n	80039da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	3340      	adds	r3, #64	; 0x40
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	3301      	adds	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	3b01      	subs	r3, #1
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3ec      	bcc.n	80039be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039e4:	883b      	ldrh	r3, [r7, #0]
 80039e6:	0418      	lsls	r0, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	4302      	orrs	r2, r0
 80039f4:	3340      	adds	r3, #64	; 0x40
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e22d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a62:	4ba3      	ldr	r3, [pc, #652]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d00c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6e:	4ba0      	ldr	r3, [pc, #640]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d112      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7a:	4b9d      	ldr	r3, [pc, #628]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4b99      	ldr	r3, [pc, #612]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d05b      	beq.n	8003b4c <HAL_RCC_OscConfig+0x108>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d157      	bne.n	8003b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e208      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x74>
 8003aaa:	4b91      	ldr	r3, [pc, #580]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a90      	ldr	r2, [pc, #576]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x98>
 8003ac2:	4b8b      	ldr	r3, [pc, #556]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a8a      	ldr	r2, [pc, #552]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b88      	ldr	r3, [pc, #544]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a87      	ldr	r2, [pc, #540]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003adc:	4b84      	ldr	r3, [pc, #528]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a83      	ldr	r2, [pc, #524]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b81      	ldr	r3, [pc, #516]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a80      	ldr	r2, [pc, #512]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd fb32 	bl	8001164 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fd fb2e 	bl	8001164 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1cd      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xc0>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd fb1e 	bl	8001164 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd fb1a 	bl	8001164 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1b9      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b6c      	ldr	r3, [pc, #432]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d063      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b72:	4b5f      	ldr	r3, [pc, #380]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b5c      	ldr	r3, [pc, #368]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e18d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4952      	ldr	r1, [pc, #328]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e03a      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_RCC_OscConfig+0x2b0>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fad3 	bl	8001164 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fd facf 	bl	8001164 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e16e      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4940      	ldr	r1, [pc, #256]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <HAL_RCC_OscConfig+0x2b0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fab2 	bl	8001164 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fd faae 	bl	8001164 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e14d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d030      	beq.n	8003c90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <HAL_RCC_OscConfig+0x2b4>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fd fa92 	bl	8001164 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fd fa8e 	bl	8001164 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e12d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x200>
 8003c62:	e015      	b.n	8003c90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c64:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_RCC_OscConfig+0x2b4>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fa7b 	bl	8001164 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fd fa77 	bl	8001164 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e116      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a0 	beq.w	8003dde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x2b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d121      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCC_OscConfig+0x2b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_RCC_OscConfig+0x2b8>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce6:	f7fd fa3d 	bl	8001164 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cec:	e011      	b.n	8003d12 <HAL_RCC_OscConfig+0x2ce>
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	42470000 	.word	0x42470000
 8003cf8:	42470e80 	.word	0x42470e80
 8003cfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d00:	f7fd fa30 	bl	8001164 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0cf      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x2f0>
 8003d26:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a65      	ldr	r2, [pc, #404]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
 8003d32:	e01c      	b.n	8003d6e <HAL_RCC_OscConfig+0x32a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d10c      	bne.n	8003d56 <HAL_RCC_OscConfig+0x312>
 8003d3c:	4b60      	ldr	r3, [pc, #384]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	4a5f      	ldr	r2, [pc, #380]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d42:	f043 0304 	orr.w	r3, r3, #4
 8003d46:	6713      	str	r3, [r2, #112]	; 0x70
 8003d48:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	4a5c      	ldr	r2, [pc, #368]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	; 0x70
 8003d54:	e00b      	b.n	8003d6e <HAL_RCC_OscConfig+0x32a>
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a59      	ldr	r2, [pc, #356]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	4b57      	ldr	r3, [pc, #348]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d68:	f023 0304 	bic.w	r3, r3, #4
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d015      	beq.n	8003da2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fd f9f5 	bl	8001164 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd f9f1 	bl	8001164 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e08e      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	4b4a      	ldr	r3, [pc, #296]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ee      	beq.n	8003d7e <HAL_RCC_OscConfig+0x33a>
 8003da0:	e014      	b.n	8003dcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fd f9df 	bl	8001164 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd f9db 	bl	8001164 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e078      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc0:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ee      	bne.n	8003daa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d064      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d05c      	beq.n	8003eac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d141      	bne.n	8003e7e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fd f9b0 	bl	8001164 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fd f9ac 	bl	8001164 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e04b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	491d      	ldr	r1, [pc, #116]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e50:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fd f985 	bl	8001164 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fd f981 	bl	8001164 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e020      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x41a>
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd f96e 	bl	8001164 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fd f96a 	bl	8001164 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e009      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x448>
 8003eaa:	e001      	b.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	42470060 	.word	0x42470060

08003ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0ca      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003edc:	4b67      	ldr	r3, [pc, #412]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d90c      	bls.n	8003f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b64      	ldr	r3, [pc, #400]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0b6      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f1c:	4b58      	ldr	r3, [pc, #352]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a57      	ldr	r2, [pc, #348]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f34:	4b52      	ldr	r3, [pc, #328]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4a51      	ldr	r2, [pc, #324]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	494c      	ldr	r1, [pc, #304]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d044      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b46      	ldr	r3, [pc, #280]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d119      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07d      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06d      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f96:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e065      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4933      	ldr	r1, [pc, #204]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd f8d4 	bl	8001164 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fd f8d0 	bl	8001164 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e04d      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 020c 	and.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1eb      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d20c      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e030      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401c:	4b18      	ldr	r3, [pc, #96]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4915      	ldr	r1, [pc, #84]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	490d      	ldr	r1, [pc, #52]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404e:	f000 f81d 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8004052:	4601      	mov	r1, r0
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	fa21 f303 	lsr.w	r3, r1, r3
 8004066:	4a08      	ldr	r2, [pc, #32]	; (8004088 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800406a:	2000      	movs	r0, #0
 800406c:	f7fc fe0e 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00
 8004080:	40023800 	.word	0x40023800
 8004084:	08017670 	.word	0x08017670
 8004088:	20000000 	.word	0x20000000

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	2300      	movs	r3, #0
 800409c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d007      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x32>
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d008      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x38>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 80b4 	bne.w	8004220 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040ba:	60bb      	str	r3, [r7, #8]
       break;
 80040bc:	e0b3      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040be:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040c0:	60bb      	str	r3, [r7, #8]
      break;
 80040c2:	e0b0      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c4:	4b5a      	ldr	r3, [pc, #360]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ce:	4b58      	ldr	r3, [pc, #352]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d04a      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040da:	4b55      	ldr	r3, [pc, #340]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	f04f 0400 	mov.w	r4, #0
 80040e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	ea03 0501 	and.w	r5, r3, r1
 80040f0:	ea04 0602 	and.w	r6, r4, r2
 80040f4:	4629      	mov	r1, r5
 80040f6:	4632      	mov	r2, r6
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f04f 0400 	mov.w	r4, #0
 8004100:	0154      	lsls	r4, r2, #5
 8004102:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004106:	014b      	lsls	r3, r1, #5
 8004108:	4619      	mov	r1, r3
 800410a:	4622      	mov	r2, r4
 800410c:	1b49      	subs	r1, r1, r5
 800410e:	eb62 0206 	sbc.w	r2, r2, r6
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	f04f 0400 	mov.w	r4, #0
 800411a:	0194      	lsls	r4, r2, #6
 800411c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004120:	018b      	lsls	r3, r1, #6
 8004122:	1a5b      	subs	r3, r3, r1
 8004124:	eb64 0402 	sbc.w	r4, r4, r2
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	00e2      	lsls	r2, r4, #3
 8004132:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004136:	00d9      	lsls	r1, r3, #3
 8004138:	460b      	mov	r3, r1
 800413a:	4614      	mov	r4, r2
 800413c:	195b      	adds	r3, r3, r5
 800413e:	eb44 0406 	adc.w	r4, r4, r6
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	0262      	lsls	r2, r4, #9
 800414c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004150:	0259      	lsls	r1, r3, #9
 8004152:	460b      	mov	r3, r1
 8004154:	4614      	mov	r4, r2
 8004156:	4618      	mov	r0, r3
 8004158:	4621      	mov	r1, r4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	461a      	mov	r2, r3
 8004162:	4623      	mov	r3, r4
 8004164:	f7fc f894 	bl	8000290 <__aeabi_uldivmod>
 8004168:	4603      	mov	r3, r0
 800416a:	460c      	mov	r4, r1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e049      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004170:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	ea03 0501 	and.w	r5, r3, r1
 8004186:	ea04 0602 	and.w	r6, r4, r2
 800418a:	4629      	mov	r1, r5
 800418c:	4632      	mov	r2, r6
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	f04f 0400 	mov.w	r4, #0
 8004196:	0154      	lsls	r4, r2, #5
 8004198:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800419c:	014b      	lsls	r3, r1, #5
 800419e:	4619      	mov	r1, r3
 80041a0:	4622      	mov	r2, r4
 80041a2:	1b49      	subs	r1, r1, r5
 80041a4:	eb62 0206 	sbc.w	r2, r2, r6
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	0194      	lsls	r4, r2, #6
 80041b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041b6:	018b      	lsls	r3, r1, #6
 80041b8:	1a5b      	subs	r3, r3, r1
 80041ba:	eb64 0402 	sbc.w	r4, r4, r2
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	00e2      	lsls	r2, r4, #3
 80041c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041cc:	00d9      	lsls	r1, r3, #3
 80041ce:	460b      	mov	r3, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	195b      	adds	r3, r3, r5
 80041d4:	eb44 0406 	adc.w	r4, r4, r6
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	02a2      	lsls	r2, r4, #10
 80041e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041e6:	0299      	lsls	r1, r3, #10
 80041e8:	460b      	mov	r3, r1
 80041ea:	4614      	mov	r4, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	4621      	mov	r1, r4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f04f 0400 	mov.w	r4, #0
 80041f6:	461a      	mov	r2, r3
 80041f8:	4623      	mov	r3, r4
 80041fa:	f7fc f849 	bl	8000290 <__aeabi_uldivmod>
 80041fe:	4603      	mov	r3, r0
 8004200:	460c      	mov	r4, r1
 8004202:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	60bb      	str	r3, [r7, #8]
      break;
 800421e:	e002      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004222:	60bb      	str	r3, [r7, #8]
      break;
 8004224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004226:	68bb      	ldr	r3, [r7, #8]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	00f42400 	.word	0x00f42400
 8004238:	007a1200 	.word	0x007a1200

0800423c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <HAL_RCC_GetHCLKFreq+0x14>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000000 	.word	0x20000000

08004254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004258:	f7ff fff0 	bl	800423c <HAL_RCC_GetHCLKFreq>
 800425c:	4601      	mov	r1, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0b5b      	lsrs	r3, r3, #13
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4a03      	ldr	r2, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	08017680 	.word	0x08017680

0800427c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	220f      	movs	r2, #15
 800428a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_RCC_GetClockConfig+0x5c>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0203 	and.w	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_RCC_GetClockConfig+0x5c>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCC_GetClockConfig+0x5c>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_RCC_GetClockConfig+0x5c>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	08db      	lsrs	r3, r3, #3
 80042b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <HAL_RCC_GetClockConfig+0x60>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40023c00 	.word	0x40023c00

080042e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e01d      	b.n	800432e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f815 	bl	8004336 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 f968 	bl	80045f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b06      	cmp	r3, #6
 8004372:	d007      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d122      	bne.n	80043ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d11b      	bne.n	80043ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f06f 0202 	mvn.w	r2, #2
 80043be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f8ee 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 80043da:	e005      	b.n	80043e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8e0 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8f1 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d122      	bne.n	8004442 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b04      	cmp	r3, #4
 8004408:	d11b      	bne.n	8004442 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f06f 0204 	mvn.w	r2, #4
 8004412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f8c4 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 800442e:	e005      	b.n	800443c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f8b6 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8c7 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b08      	cmp	r3, #8
 800444e:	d122      	bne.n	8004496 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b08      	cmp	r3, #8
 800445c:	d11b      	bne.n	8004496 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f06f 0208 	mvn.w	r2, #8
 8004466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2204      	movs	r2, #4
 800446c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f89a 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 8004482:	e005      	b.n	8004490 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f88c 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f89d 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d122      	bne.n	80044ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d11b      	bne.n	80044ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0210 	mvn.w	r2, #16
 80044ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2208      	movs	r2, #8
 80044c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f870 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 80044d6:	e005      	b.n	80044e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f862 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f873 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10e      	bne.n	8004516 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d107      	bne.n	8004516 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f06f 0201 	mvn.w	r2, #1
 800450e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fc fb75 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004520:	2b80      	cmp	r3, #128	; 0x80
 8004522:	d10e      	bne.n	8004542 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b80      	cmp	r3, #128	; 0x80
 8004530:	d107      	bne.n	8004542 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800453a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f903 	bl	8004748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d10e      	bne.n	800456e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d107      	bne.n	800456e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f838 	bl	80045de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b20      	cmp	r3, #32
 800457a:	d10e      	bne.n	800459a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b20      	cmp	r3, #32
 8004588:	d107      	bne.n	800459a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f06f 0220 	mvn.w	r2, #32
 8004592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8cd 	bl	8004734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <TIM_Base_SetConfig+0x114>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d00f      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a3d      	ldr	r2, [pc, #244]	; (800470c <TIM_Base_SetConfig+0x118>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3c      	ldr	r2, [pc, #240]	; (8004710 <TIM_Base_SetConfig+0x11c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <TIM_Base_SetConfig+0x120>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <TIM_Base_SetConfig+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <TIM_Base_SetConfig+0x114>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d027      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2c      	ldr	r2, [pc, #176]	; (800470c <TIM_Base_SetConfig+0x118>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d023      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2b      	ldr	r2, [pc, #172]	; (8004710 <TIM_Base_SetConfig+0x11c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01f      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2a      	ldr	r2, [pc, #168]	; (8004714 <TIM_Base_SetConfig+0x120>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a29      	ldr	r2, [pc, #164]	; (8004718 <TIM_Base_SetConfig+0x124>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d017      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a28      	ldr	r2, [pc, #160]	; (800471c <TIM_Base_SetConfig+0x128>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a27      	ldr	r2, [pc, #156]	; (8004720 <TIM_Base_SetConfig+0x12c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <TIM_Base_SetConfig+0x130>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a25      	ldr	r2, [pc, #148]	; (8004728 <TIM_Base_SetConfig+0x134>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a24      	ldr	r2, [pc, #144]	; (800472c <TIM_Base_SetConfig+0x138>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a23      	ldr	r2, [pc, #140]	; (8004730 <TIM_Base_SetConfig+0x13c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <TIM_Base_SetConfig+0x114>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0xf8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <TIM_Base_SetConfig+0x124>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d103      	bne.n	80046f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	615a      	str	r2, [r3, #20]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40010000 	.word	0x40010000
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40010400 	.word	0x40010400
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800
 8004728:	40001800 	.word	0x40001800
 800472c:	40001c00 	.word	0x40001c00
 8004730:	40002000 	.word	0x40002000

08004734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	fa93 f3a3 	rbit	r3, r3
 8004776:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	fab3 f383 	clz	r3, r3
 800477e:	b2db      	uxtb	r3, r3
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2103      	movs	r1, #3
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	401a      	ands	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	61bb      	str	r3, [r7, #24]
  return result;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3724      	adds	r7, #36	; 0x24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	401a      	ands	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]
}
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b089      	sub	sp, #36	; 0x24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	613b      	str	r3, [r7, #16]
  return result;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	2103      	movs	r1, #3
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	401a      	ands	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	61bb      	str	r3, [r7, #24]
  return result;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	fab3 f383 	clz	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	431a      	orrs	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800483c:	bf00      	nop
 800483e:	3724      	adds	r7, #36	; 0x24
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004848:	b480      	push	{r7}
 800484a:	b089      	sub	sp, #36	; 0x24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	613b      	str	r3, [r7, #16]
  return result;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	2103      	movs	r1, #3
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	401a      	ands	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	61bb      	str	r3, [r7, #24]
  return result;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	60da      	str	r2, [r3, #12]
}
 800489a:	bf00      	nop
 800489c:	3724      	adds	r7, #36	; 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b089      	sub	sp, #36	; 0x24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	fa93 f3a3 	rbit	r3, r3
 80048c0:	613b      	str	r3, [r7, #16]
  return result;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	fab3 f383 	clz	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	210f      	movs	r1, #15
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	401a      	ands	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	61bb      	str	r3, [r7, #24]
  return result;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	431a      	orrs	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80048f8:	bf00      	nop
 80048fa:	3724      	adds	r7, #36	; 0x24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	; 0x24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	613b      	str	r3, [r7, #16]
  return result;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	fab3 f383 	clz	r3, r3
 8004928:	b2db      	uxtb	r3, r3
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	210f      	movs	r1, #15
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	401a      	ands	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	0a1b      	lsrs	r3, r3, #8
 800493a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	fa93 f3a3 	rbit	r3, r3
 8004942:	61bb      	str	r3, [r7, #24]
  return result;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	431a      	orrs	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800495a:	bf00      	nop
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	fa93 f3a3 	rbit	r3, r3
 8004984:	613b      	str	r3, [r7, #16]
  return result;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004990:	e049      	b.n	8004a26 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	2101      	movs	r1, #1
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d03b      	beq.n	8004a20 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	461a      	mov	r2, r3
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff fed3 	bl	800475c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d003      	beq.n	80049c6 <LL_GPIO_Init+0x60>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d106      	bne.n	80049d4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	461a      	mov	r2, r3
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff0b 	bl	80047ea <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	461a      	mov	r2, r3
 80049da:	69b9      	ldr	r1, [r7, #24]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff33 	bl	8004848 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d11a      	bne.n	8004a20 <LL_GPIO_Init+0xba>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	60bb      	str	r3, [r7, #8]
  return result;
 80049f6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80049f8:	fab3 f383 	clz	r3, r3
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b07      	cmp	r3, #7
 8004a00:	d807      	bhi.n	8004a12 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	461a      	mov	r2, r3
 8004a08:	69b9      	ldr	r1, [r7, #24]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff ff4b 	bl	80048a6 <LL_GPIO_SetAFPin_0_7>
 8004a10:	e006      	b.n	8004a20 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	461a      	mov	r2, r3
 8004a18:	69b9      	ldr	r1, [r7, #24]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff ff72 	bl	8004904 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1ae      	bne.n	8004992 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d003      	beq.n	8004a44 <LL_GPIO_Init+0xde>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d107      	bne.n	8004a54 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff feb3 	bl	80047ba <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <LL_I2C_Enable>:
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_I2C_Disable>:
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 0201 	bic.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <LL_I2C_ConfigFilters>:
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f023 021f 	bic.w	r2, r3, #31
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_I2C_SetOwnAddress1>:
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	609a      	str	r2, [r3, #8]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8004afc:	b490      	push	{r4, r7}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8004b0a:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8004b0c:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a3f      	ldr	r2, [pc, #252]	; (8004c10 <LL_I2C_ConfigSpeed+0x114>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b20:	ea44 0203 	orr.w	r2, r4, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4938      	ldr	r1, [pc, #224]	; (8004c14 <LL_I2C_ConfigSpeed+0x118>)
 8004b34:	428b      	cmp	r3, r1
 8004b36:	d801      	bhi.n	8004b3c <LL_I2C_ConfigSpeed+0x40>
 8004b38:	1c63      	adds	r3, r4, #1
 8004b3a:	e008      	b.n	8004b4e <LL_I2C_ConfigSpeed+0x52>
 8004b3c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004b40:	fb03 f304 	mul.w	r3, r3, r4
 8004b44:	4934      	ldr	r1, [pc, #208]	; (8004c18 <LL_I2C_ConfigSpeed+0x11c>)
 8004b46:	fba1 1303 	umull	r1, r3, r1, r3
 8004b4a:	099b      	lsrs	r3, r3, #6
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a2f      	ldr	r2, [pc, #188]	; (8004c14 <LL_I2C_ConfigSpeed+0x118>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d939      	bls.n	8004bd0 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d117      	bne.n	8004b92 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8a:	e01d      	b.n	8004bc8 <LL_I2C_ConfigSpeed+0xcc>
 8004b8c:	f248 0301 	movw	r3, #32769	; 0x8001
 8004b90:	e01a      	b.n	8004bc8 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009a      	lsls	r2, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009a      	lsls	r2, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc2:	e001      	b.n	8004bc8 <LL_I2C_ConfigSpeed+0xcc>
 8004bc4:	f248 0301 	movw	r3, #32769	; 0x8001
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	ea43 0402 	orr.w	r4, r3, r2
 8004bce:	e010      	b.n	8004bf2 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d905      	bls.n	8004bee <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	e000      	b.n	8004bf0 <LL_I2C_ConfigSpeed+0xf4>
 8004bee:	2304      	movs	r3, #4
 8004bf0:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004bfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bfe:	ea44 0203 	orr.w	r2, r4, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	61da      	str	r2, [r3, #28]
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc90      	pop	{r4, r7}
 8004c0e:	4770      	bx	lr
 8004c10:	431bde83 	.word	0x431bde83
 8004c14:	000186a0 	.word	0x000186a0
 8004c18:	10624dd3 	.word	0x10624dd3

08004c1c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 021a 	bic.w	r2, r3, #26
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	601a      	str	r2, [r3, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff ff03 	bl	8004a7e <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004c78:	f107 0308 	add.w	r3, r7, #8
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f89d 	bl	8004dbc <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68d9      	ldr	r1, [r3, #12]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ff06 	bl	8004a9e <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004c92:	6939      	ldr	r1, [r7, #16]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ff2d 	bl	8004afc <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6959      	ldr	r1, [r3, #20]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	461a      	mov	r2, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff0c 	bl	8004aca <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ffaf 	bl	8004c1c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fecd 	bl	8004a5e <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff ffb9 	bl	8004c42 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <LL_RCC_GetSysClkSource+0x18>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800

08004cf8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <LL_RCC_GetAHBPrescaler+0x18>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800

08004d14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <LL_RCC_GetAPB1Prescaler+0x18>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800

08004d30 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800

08004d4c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <LL_RCC_PLL_GetMainSource+0x18>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800

08004d68 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <LL_RCC_PLL_GetN+0x18>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	099b      	lsrs	r3, r3, #6
 8004d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40023800 	.word	0x40023800

08004d84 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <LL_RCC_PLL_GetP+0x18>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800

08004da0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <LL_RCC_PLL_GetDivider+0x18>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800

08004dbc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004dc4:	f000 f820 	bl	8004e08 <RCC_GetSystemClockFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f83e 	bl	8004e54 <RCC_GetHCLKClockFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f84c 	bl	8004e80 <RCC_GetPCLK1ClockFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f858 	bl	8004ea8 <RCC_GetPCLK2ClockFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60da      	str	r2, [r3, #12]
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004e12:	f7ff ff63 	bl	8004cdc <LL_RCC_GetSysClkSource>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d006      	beq.n	8004e2a <RCC_GetSystemClockFreq+0x22>
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d007      	beq.n	8004e30 <RCC_GetSystemClockFreq+0x28>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <RCC_GetSystemClockFreq+0x44>)
 8004e26:	607b      	str	r3, [r7, #4]
      break;
 8004e28:	e00a      	b.n	8004e40 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <RCC_GetSystemClockFreq+0x48>)
 8004e2c:	607b      	str	r3, [r7, #4]
      break;
 8004e2e:	e007      	b.n	8004e40 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004e30:	2008      	movs	r0, #8
 8004e32:	f000 f84d 	bl	8004ed0 <RCC_PLL_GetFreqDomain_SYS>
 8004e36:	6078      	str	r0, [r7, #4]
      break;
 8004e38:	e002      	b.n	8004e40 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004e3a:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <RCC_GetSystemClockFreq+0x44>)
 8004e3c:	607b      	str	r3, [r7, #4]
      break;
 8004e3e:	bf00      	nop
  }

  return frequency;
 8004e40:	687b      	ldr	r3, [r7, #4]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	00f42400 	.word	0x00f42400
 8004e50:	007a1200 	.word	0x007a1200

08004e54 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004e5c:	f7ff ff4c 	bl	8004cf8 <LL_RCC_GetAHBPrescaler>
 8004e60:	4603      	mov	r3, r0
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <RCC_GetHCLKClockFreq+0x28>)
 8004e6a:	5cd3      	ldrb	r3, [r2, r3]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	40d3      	lsrs	r3, r2
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	08017670 	.word	0x08017670

08004e80 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004e88:	f7ff ff44 	bl	8004d14 <LL_RCC_GetAPB1Prescaler>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	0a9b      	lsrs	r3, r3, #10
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <RCC_GetPCLK1ClockFreq+0x24>)
 8004e92:	5cd3      	ldrb	r3, [r2, r3]
 8004e94:	461a      	mov	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	40d3      	lsrs	r3, r2
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	08017680 	.word	0x08017680

08004ea8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004eb0:	f7ff ff3e 	bl	8004d30 <LL_RCC_GetAPB2Prescaler>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	0b5b      	lsrs	r3, r3, #13
 8004eb8:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <RCC_GetPCLK2ClockFreq+0x24>)
 8004eba:	5cd3      	ldrb	r3, [r2, r3]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	40d3      	lsrs	r3, r2
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	08017680 	.word	0x08017680

08004ed0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ee4:	f7ff ff32 	bl	8004d4c <LL_RCC_PLL_GetMainSource>
 8004ee8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8004ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef4:	d003      	beq.n	8004efe <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8004ef6:	e005      	b.n	8004f04 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004ef8:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004efa:	617b      	str	r3, [r7, #20]
      break;
 8004efc:	e005      	b.n	8004f0a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004f00:	617b      	str	r3, [r7, #20]
      break;
 8004f02:	e002      	b.n	8004f0a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004f06:	617b      	str	r3, [r7, #20]
      break;
 8004f08:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d113      	bne.n	8004f38 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004f10:	f7ff ff46 	bl	8004da0 <LL_RCC_PLL_GetDivider>
 8004f14:	4602      	mov	r2, r0
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	fbb3 f4f2 	udiv	r4, r3, r2
 8004f1c:	f7ff ff24 	bl	8004d68 <LL_RCC_PLL_GetN>
 8004f20:	4603      	mov	r3, r0
 8004f22:	fb03 f404 	mul.w	r4, r3, r4
 8004f26:	f7ff ff2d 	bl	8004d84 <LL_RCC_PLL_GetP>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	3301      	adds	r3, #1
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f36:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004f38:	693b      	ldr	r3, [r7, #16]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}
 8004f42:	bf00      	nop
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	007a1200 	.word	0x007a1200

08004f4c <LL_USART_IsEnabled>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_USART_SetStopBitsLength>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	611a      	str	r2, [r3, #16]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <LL_USART_SetHWFlowCtrl>:
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	615a      	str	r2, [r3, #20]
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <LL_USART_SetBaudRate>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd4:	d152      	bne.n	800507c <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009a      	lsls	r2, r3, #2
 8004fe0:	441a      	add	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	4a4f      	ldr	r2, [pc, #316]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	b299      	uxth	r1, r3
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009a      	lsls	r2, r3, #2
 8005002:	441a      	add	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fbb2 f2f3 	udiv	r2, r2, r3
 800500c:	4b46      	ldr	r3, [pc, #280]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 800500e:	fba3 0302 	umull	r0, r3, r3, r2
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2064      	movs	r0, #100	; 0x64
 8005016:	fb00 f303 	mul.w	r3, r0, r3
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	3332      	adds	r3, #50	; 0x32
 8005020:	4a41      	ldr	r2, [pc, #260]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	b29b      	uxth	r3, r3
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	b29b      	uxth	r3, r3
 800502e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005032:	b29b      	uxth	r3, r3
 8005034:	440b      	add	r3, r1
 8005036:	b299      	uxth	r1, r3
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009a      	lsls	r2, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb2 f2f3 	udiv	r2, r2, r3
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 800504e:	fba3 0302 	umull	r0, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2064      	movs	r0, #100	; 0x64
 8005056:	fb00 f303 	mul.w	r3, r0, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	3332      	adds	r3, #50	; 0x32
 8005060:	4a31      	ldr	r2, [pc, #196]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	b29b      	uxth	r3, r3
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	b29b      	uxth	r3, r3
 8005070:	440b      	add	r3, r1
 8005072:	b29b      	uxth	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	609a      	str	r2, [r3, #8]
}
 800507a:	e04f      	b.n	800511c <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009a      	lsls	r2, r3, #2
 8005086:	441a      	add	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	4a25      	ldr	r2, [pc, #148]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	b29b      	uxth	r3, r3
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	b299      	uxth	r1, r3
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009a      	lsls	r2, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b2:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 80050b4:	fba3 0302 	umull	r0, r3, r3, r2
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	2064      	movs	r0, #100	; 0x64
 80050bc:	fb00 f303 	mul.w	r3, r0, r3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	3332      	adds	r3, #50	; 0x32
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	440b      	add	r3, r1
 80050d8:	b299      	uxth	r1, r3
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009a      	lsls	r2, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80050ee:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 80050f0:	fba3 0302 	umull	r0, r3, r3, r2
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	2064      	movs	r0, #100	; 0x64
 80050f8:	fb00 f303 	mul.w	r3, r0, r3
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	3332      	adds	r3, #50	; 0x32
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <LL_USART_SetBaudRate+0x168>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	b29b      	uxth	r3, r3
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	b29b      	uxth	r3, r3
 8005112:	440b      	add	r3, r1
 8005114:	b29b      	uxth	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	51eb851f 	.word	0x51eb851f

0800512c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff ff04 	bl	8004f4c <LL_USART_IsEnabled>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d16c      	bne.n	8005224 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005152:	f023 030c 	bic.w	r3, r3, #12
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	6851      	ldr	r1, [r2, #4]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	68d2      	ldr	r2, [r2, #12]
 800515e:	4311      	orrs	r1, r2
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	6912      	ldr	r2, [r2, #16]
 8005164:	4311      	orrs	r1, r2
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	6992      	ldr	r2, [r2, #24]
 800516a:	430a      	orrs	r2, r1
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff fefb 	bl	8004f74 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff ff08 	bl	8004f9a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fe14 	bl	8004dbc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a26      	ldr	r2, [pc, #152]	; (8005230 <LL_USART_Init+0x104>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d102      	bne.n	80051a2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e02f      	b.n	8005202 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <LL_USART_Init+0x108>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d102      	bne.n	80051b0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e028      	b.n	8005202 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a21      	ldr	r2, [pc, #132]	; (8005238 <LL_USART_Init+0x10c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d102      	bne.n	80051be <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e021      	b.n	8005202 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1e      	ldr	r2, [pc, #120]	; (800523c <LL_USART_Init+0x110>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d102      	bne.n	80051cc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e01a      	b.n	8005202 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <LL_USART_Init+0x114>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d102      	bne.n	80051da <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e013      	b.n	8005202 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a19      	ldr	r2, [pc, #100]	; (8005244 <LL_USART_Init+0x118>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d102      	bne.n	80051e8 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e00c      	b.n	8005202 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <LL_USART_Init+0x11c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d102      	bne.n	80051f6 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e005      	b.n	8005202 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a14      	ldr	r2, [pc, #80]	; (800524c <LL_USART_Init+0x120>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8005210:	2300      	movs	r3, #0
 8005212:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69b9      	ldr	r1, [r7, #24]
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fece 	bl	8004fc0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005224:	7ffb      	ldrb	r3, [r7, #31]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40011000 	.word	0x40011000
 8005234:	40004400 	.word	0x40004400
 8005238:	40004800 	.word	0x40004800
 800523c:	40011400 	.word	0x40011400
 8005240:	40004c00 	.word	0x40004c00
 8005244:	40005000 	.word	0x40005000
 8005248:	40007800 	.word	0x40007800
 800524c:	40007c00 	.word	0x40007c00

08005250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005250:	b084      	sub	sp, #16
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	f107 001c 	add.w	r0, r7, #28
 800525e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	2b01      	cmp	r3, #1
 8005266:	d122      	bne.n	80052ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800527c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	2b01      	cmp	r3, #1
 8005294:	d105      	bne.n	80052a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 fa7c 	bl	80067a0 <USB_CoreReset>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
 80052ac:	e01a      	b.n	80052e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fa70 	bl	80067a0 <USB_CoreReset>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
 80052d6:	e005      	b.n	80052e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10b      	bne.n	8005302 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f043 0206 	orr.w	r2, r3, #6
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f043 0220 	orr.w	r2, r3, #32
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800530e:	b004      	add	sp, #16
 8005310:	4770      	bx	lr
	...

08005314 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d165      	bne.n	80053f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a41      	ldr	r2, [pc, #260]	; (8005430 <USB_SetTurnaroundTime+0x11c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d906      	bls.n	800533e <USB_SetTurnaroundTime+0x2a>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4a40      	ldr	r2, [pc, #256]	; (8005434 <USB_SetTurnaroundTime+0x120>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d802      	bhi.n	800533e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005338:	230f      	movs	r3, #15
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e062      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a3c      	ldr	r2, [pc, #240]	; (8005434 <USB_SetTurnaroundTime+0x120>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d906      	bls.n	8005354 <USB_SetTurnaroundTime+0x40>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a3b      	ldr	r2, [pc, #236]	; (8005438 <USB_SetTurnaroundTime+0x124>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d802      	bhi.n	8005354 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800534e:	230e      	movs	r3, #14
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e057      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a38      	ldr	r2, [pc, #224]	; (8005438 <USB_SetTurnaroundTime+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d906      	bls.n	800536a <USB_SetTurnaroundTime+0x56>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a37      	ldr	r2, [pc, #220]	; (800543c <USB_SetTurnaroundTime+0x128>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d802      	bhi.n	800536a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005364:	230d      	movs	r3, #13
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e04c      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a33      	ldr	r2, [pc, #204]	; (800543c <USB_SetTurnaroundTime+0x128>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d906      	bls.n	8005380 <USB_SetTurnaroundTime+0x6c>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4a32      	ldr	r2, [pc, #200]	; (8005440 <USB_SetTurnaroundTime+0x12c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d802      	bhi.n	8005380 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800537a:	230c      	movs	r3, #12
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e041      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a2f      	ldr	r2, [pc, #188]	; (8005440 <USB_SetTurnaroundTime+0x12c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d906      	bls.n	8005396 <USB_SetTurnaroundTime+0x82>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a2e      	ldr	r2, [pc, #184]	; (8005444 <USB_SetTurnaroundTime+0x130>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d802      	bhi.n	8005396 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005390:	230b      	movs	r3, #11
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e036      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4a2a      	ldr	r2, [pc, #168]	; (8005444 <USB_SetTurnaroundTime+0x130>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d906      	bls.n	80053ac <USB_SetTurnaroundTime+0x98>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4a29      	ldr	r2, [pc, #164]	; (8005448 <USB_SetTurnaroundTime+0x134>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d802      	bhi.n	80053ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053a6:	230a      	movs	r3, #10
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e02b      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a26      	ldr	r2, [pc, #152]	; (8005448 <USB_SetTurnaroundTime+0x134>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d906      	bls.n	80053c2 <USB_SetTurnaroundTime+0xae>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a25      	ldr	r2, [pc, #148]	; (800544c <USB_SetTurnaroundTime+0x138>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d802      	bhi.n	80053c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053bc:	2309      	movs	r3, #9
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e020      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4a21      	ldr	r2, [pc, #132]	; (800544c <USB_SetTurnaroundTime+0x138>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d906      	bls.n	80053d8 <USB_SetTurnaroundTime+0xc4>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4a20      	ldr	r2, [pc, #128]	; (8005450 <USB_SetTurnaroundTime+0x13c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d802      	bhi.n	80053d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053d2:	2308      	movs	r3, #8
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e015      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <USB_SetTurnaroundTime+0x13c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d906      	bls.n	80053ee <USB_SetTurnaroundTime+0xda>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <USB_SetTurnaroundTime+0x140>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d802      	bhi.n	80053ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053e8:	2307      	movs	r3, #7
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e00a      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053ee:	2306      	movs	r3, #6
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e007      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053fa:	2309      	movs	r3, #9
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e001      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005400:	2309      	movs	r3, #9
 8005402:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	00d8acbf 	.word	0x00d8acbf
 8005434:	00e4e1bf 	.word	0x00e4e1bf
 8005438:	00f423ff 	.word	0x00f423ff
 800543c:	0106737f 	.word	0x0106737f
 8005440:	011a499f 	.word	0x011a499f
 8005444:	01312cff 	.word	0x01312cff
 8005448:	014ca43f 	.word	0x014ca43f
 800544c:	016e35ff 	.word	0x016e35ff
 8005450:	01a6ab1f 	.word	0x01a6ab1f
 8005454:	01e847ff 	.word	0x01e847ff

08005458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f043 0201 	orr.w	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d106      	bne.n	80054c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	e00b      	b.n	80054e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	e001      	b.n	80054e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e003      	b.n	80054e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80054e0:	2032      	movs	r0, #50	; 0x32
 80054e2:	f7fb fe4b 	bl	800117c <HAL_Delay>

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f0:	b084      	sub	sp, #16
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	e009      	b.n	8005524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3340      	adds	r3, #64	; 0x40
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	2200      	movs	r2, #0
 800551c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3301      	adds	r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b0e      	cmp	r3, #14
 8005528:	d9f2      	bls.n	8005510 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d112      	bne.n	8005556 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
 8005554:	e00b      	b.n	800556e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005574:	461a      	mov	r2, r3
 8005576:	2300      	movs	r3, #0
 8005578:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	4619      	mov	r1, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005588:	461a      	mov	r2, r3
 800558a:	680b      	ldr	r3, [r1, #0]
 800558c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	2b01      	cmp	r3, #1
 8005592:	d10c      	bne.n	80055ae <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800559a:	2100      	movs	r1, #0
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f961 	bl	8005864 <USB_SetDevSpeed>
 80055a2:	e008      	b.n	80055b6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055a4:	2101      	movs	r1, #1
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f95c 	bl	8005864 <USB_SetDevSpeed>
 80055ac:	e003      	b.n	80055b6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055ae:	2103      	movs	r1, #3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f957 	bl	8005864 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055b6:	2110      	movs	r1, #16
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f90b 	bl	80057d4 <USB_FlushTxFifo>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f929 	bl	8005820 <USB_FlushRxFifo>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	461a      	mov	r2, r3
 80055ec:	2300      	movs	r3, #0
 80055ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	461a      	mov	r2, r3
 80055f8:	2300      	movs	r3, #0
 80055fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	e043      	b.n	800568a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005618:	d118      	bne.n	800564c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	461a      	mov	r2, r3
 800562e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	e013      	b.n	800565e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	461a      	mov	r2, r3
 8005644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e008      	b.n	800565e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	461a      	mov	r2, r3
 800565a:	2300      	movs	r3, #0
 800565c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	461a      	mov	r2, r3
 800566c:	2300      	movs	r3, #0
 800566e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005682:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	3301      	adds	r3, #1
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3b7      	bcc.n	8005602 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e043      	b.n	8005720 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ae:	d118      	bne.n	80056e2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	461a      	mov	r2, r3
 80056c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e013      	b.n	80056f4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	e008      	b.n	80056f4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	461a      	mov	r2, r3
 80056f0:	2300      	movs	r3, #0
 80056f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	461a      	mov	r2, r3
 8005702:	2300      	movs	r3, #0
 8005704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3301      	adds	r3, #1
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d3b7      	bcc.n	8005698 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800573a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	2b01      	cmp	r3, #1
 8005740:	d111      	bne.n	8005766 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005748:	461a      	mov	r2, r3
 800574a:	4b20      	ldr	r3, [pc, #128]	; (80057cc <USB_DevInit+0x2dc>)
 800574c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005760:	f043 0303 	orr.w	r3, r3, #3
 8005764:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005772:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d105      	bne.n	8005786 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f043 0210 	orr.w	r2, r3, #16
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <USB_DevInit+0x2e0>)
 800578c:	4313      	orrs	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f043 0208 	orr.w	r2, r3, #8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d107      	bne.n	80057ba <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057b2:	f043 0304 	orr.w	r3, r3, #4
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057c6:	b004      	add	sp, #16
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	00800100 	.word	0x00800100
 80057d0:	803c3800 	.word	0x803c3800

080057d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3301      	adds	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <USB_FlushTxFifo+0x48>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e006      	b.n	800580e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b20      	cmp	r3, #32
 800580a:	d0f0      	beq.n	80057ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	00030d40 	.word	0x00030d40

08005820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2210      	movs	r2, #16
 8005830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3301      	adds	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a09      	ldr	r2, [pc, #36]	; (8005860 <USB_FlushRxFifo+0x40>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e006      	b.n	8005852 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b10      	cmp	r3, #16
 800584e:	d0f0      	beq.n	8005832 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	00030d40 	.word	0x00030d40

08005864 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005896:	b480      	push	{r7}
 8005898:	b087      	sub	sp, #28
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0306 	and.w	r3, r3, #6
 80058ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]
 80058ba:	e00a      	b.n	80058d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d002      	beq.n	80058c8 <USB_GetDevSpeed+0x32>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b06      	cmp	r3, #6
 80058c6:	d102      	bne.n	80058ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058c8:	2302      	movs	r3, #2
 80058ca:	75fb      	strb	r3, [r7, #23]
 80058cc:	e001      	b.n	80058d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058ce:	230f      	movs	r3, #15
 80058d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d13a      	bne.n	8005972 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	2101      	movs	r1, #1
 800590e:	fa01 f303 	lsl.w	r3, r1, r3
 8005912:	b29b      	uxth	r3, r3
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800591a:	4313      	orrs	r3, r2
 800591c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d155      	bne.n	80059e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	78db      	ldrb	r3, [r3, #3]
 800594e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005950:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	059b      	lsls	r3, r3, #22
 8005956:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005958:	4313      	orrs	r3, r2
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	e036      	b.n	80059e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	2101      	movs	r1, #1
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005990:	4313      	orrs	r3, r2
 8005992:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d11a      	bne.n	80059e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	78db      	ldrb	r3, [r3, #3]
 80059c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059c6:	430b      	orrs	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d135      	bne.n	8005a78 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	2101      	movs	r1, #1
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a50:	4013      	ands	r3, r2
 8005a52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	0159      	lsls	r1, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	440b      	add	r3, r1
 8005a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4b1f      	ldr	r3, [pc, #124]	; (8005af0 <USB_DeactivateEndpoint+0x100>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]
 8005a76:	e034      	b.n	8005ae2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	2101      	movs	r1, #1
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	43db      	mvns	r3, r3
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a98:	4013      	ands	r3, r2
 8005a9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	2101      	movs	r1, #1
 8005aae:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	68f9      	ldr	r1, [r7, #12]
 8005ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005abc:	4013      	ands	r3, r2
 8005abe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	0159      	lsls	r1, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	440b      	add	r3, r1
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	4619      	mov	r1, r3
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <USB_DeactivateEndpoint+0x104>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	ec337800 	.word	0xec337800
 8005af4:	eff37800 	.word	0xeff37800

08005af8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	4613      	mov	r3, r2
 8005b04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	f040 815c 	bne.w	8005dd2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d132      	bne.n	8005b88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	0cdb      	lsrs	r3, r3, #19
 8005b82:	04db      	lsls	r3, r3, #19
 8005b84:	6113      	str	r3, [r2, #16]
 8005b86:	e074      	b.n	8005c72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	0cdb      	lsrs	r3, r3, #19
 8005ba4:	04db      	lsls	r3, r3, #19
 8005ba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6959      	ldr	r1, [r3, #20]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	440b      	add	r3, r1
 8005be4:	1e59      	subs	r1, r3, #1
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bee:	04d9      	lsls	r1, r3, #19
 8005bf0:	4b9d      	ldr	r3, [pc, #628]	; (8005e68 <USB_EPStartXfer+0x370>)
 8005bf2:	400b      	ands	r3, r1
 8005bf4:	69b9      	ldr	r1, [r7, #24]
 8005bf6:	0148      	lsls	r0, r1, #5
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	4401      	add	r1, r0
 8005bfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c00:	4313      	orrs	r3, r2
 8005c02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1a:	69b9      	ldr	r1, [r7, #24]
 8005c1c:	0148      	lsls	r0, r1, #5
 8005c1e:	69f9      	ldr	r1, [r7, #28]
 8005c20:	4401      	add	r1, r0
 8005c22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c26:	4313      	orrs	r3, r2
 8005c28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	78db      	ldrb	r3, [r3, #3]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d11f      	bne.n	8005c72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d14b      	bne.n	8005d10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d009      	beq.n	8005c94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d128      	bne.n	8005cee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d110      	bne.n	8005cce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	e00f      	b.n	8005cee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e12f      	b.n	8005f70 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	78db      	ldrb	r3, [r3, #3]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d015      	beq.n	8005d64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8117 	beq.w	8005f70 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	2101      	movs	r1, #1
 8005d54:	fa01 f303 	lsl.w	r3, r1, r3
 8005d58:	69f9      	ldr	r1, [r7, #28]
 8005d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	634b      	str	r3, [r1, #52]	; 0x34
 8005d62:	e105      	b.n	8005f70 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d110      	bne.n	8005d96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	e00f      	b.n	8005db6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	68d9      	ldr	r1, [r3, #12]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	b298      	uxth	r0, r3
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	4603      	mov	r3, r0
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fa2b 	bl	8006226 <USB_WritePacket>
 8005dd0:	e0ce      	b.n	8005f70 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dec:	0cdb      	lsrs	r3, r3, #19
 8005dee:	04db      	lsls	r3, r3, #19
 8005df0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d126      	bne.n	8005e6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e34:	69b9      	ldr	r1, [r7, #24]
 8005e36:	0148      	lsls	r0, r1, #5
 8005e38:	69f9      	ldr	r1, [r7, #28]
 8005e3a:	4401      	add	r1, r0
 8005e3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e40:	4313      	orrs	r3, r2
 8005e42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e62:	6113      	str	r3, [r2, #16]
 8005e64:	e036      	b.n	8005ed4 <USB_EPStartXfer+0x3dc>
 8005e66:	bf00      	nop
 8005e68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4413      	add	r3, r2
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	8afb      	ldrh	r3, [r7, #22]
 8005e92:	04d9      	lsls	r1, r3, #19
 8005e94:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <USB_EPStartXfer+0x484>)
 8005e96:	400b      	ands	r3, r1
 8005e98:	69b9      	ldr	r1, [r7, #24]
 8005e9a:	0148      	lsls	r0, r1, #5
 8005e9c:	69f9      	ldr	r1, [r7, #28]
 8005e9e:	4401      	add	r1, r0
 8005ea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	8af9      	ldrh	r1, [r7, #22]
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec4:	69b9      	ldr	r1, [r7, #24]
 8005ec6:	0148      	lsls	r0, r1, #5
 8005ec8:	69f9      	ldr	r1, [r7, #28]
 8005eca:	4401      	add	r1, r0
 8005ecc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d10d      	bne.n	8005ef6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d009      	beq.n	8005ef6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	68d9      	ldr	r1, [r3, #12]
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d128      	bne.n	8005f50 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d110      	bne.n	8005f30 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	e00f      	b.n	8005f50 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3720      	adds	r7, #32
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	1ff80000 	.word	0x1ff80000

08005f80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	f040 80cd 	bne.w	800613c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d132      	bne.n	8006010 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	440a      	add	r2, r1
 8006004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006008:	0cdb      	lsrs	r3, r3, #19
 800600a:	04db      	lsls	r3, r3, #19
 800600c:	6113      	str	r3, [r2, #16]
 800600e:	e04e      	b.n	80060ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602a:	0cdb      	lsrs	r3, r3, #19
 800602c:	04db      	lsls	r3, r3, #19
 800602e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800604e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006052:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	695a      	ldr	r2, [r3, #20]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	d903      	bls.n	8006068 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006086:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800609e:	6939      	ldr	r1, [r7, #16]
 80060a0:	0148      	lsls	r0, r1, #5
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	4401      	add	r1, r0
 80060a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060aa:	4313      	orrs	r3, r2
 80060ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d11e      	bne.n	80060f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d009      	beq.n	80060d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	461a      	mov	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	e092      	b.n	8006218 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006110:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d07e      	beq.n	8006218 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	2101      	movs	r1, #1
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006136:	4313      	orrs	r3, r2
 8006138:	634b      	str	r3, [r1, #52]	; 0x34
 800613a:	e06d      	b.n	8006218 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006156:	0cdb      	lsrs	r3, r3, #19
 8006158:	04db      	lsls	r3, r3, #19
 800615a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006176:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800617a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800617e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c6:	6939      	ldr	r1, [r7, #16]
 80061c8:	0148      	lsls	r0, r1, #5
 80061ca:	6979      	ldr	r1, [r7, #20]
 80061cc:	4401      	add	r1, r0
 80061ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061d2:	4313      	orrs	r3, r2
 80061d4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d10d      	bne.n	80061f8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d009      	beq.n	80061f8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	68d9      	ldr	r1, [r3, #12]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	460a      	mov	r2, r1
 80061f6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006212:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006216:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006226:	b480      	push	{r7}
 8006228:	b089      	sub	sp, #36	; 0x24
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	4611      	mov	r1, r2
 8006232:	461a      	mov	r2, r3
 8006234:	460b      	mov	r3, r1
 8006236:	71fb      	strb	r3, [r7, #7]
 8006238:	4613      	mov	r3, r2
 800623a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006244:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11a      	bne.n	8006282 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800624c:	88bb      	ldrh	r3, [r7, #4]
 800624e:	3303      	adds	r3, #3
 8006250:	089b      	lsrs	r3, r3, #2
 8006252:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006254:	2300      	movs	r3, #0
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	e00f      	b.n	800627a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	031a      	lsls	r2, r3, #12
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006266:	461a      	mov	r2, r3
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3304      	adds	r3, #4
 8006272:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	3301      	adds	r3, #1
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	429a      	cmp	r2, r3
 8006280:	d3eb      	bcc.n	800625a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3724      	adds	r7, #36	; 0x24
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006290:	b480      	push	{r7}
 8006292:	b089      	sub	sp, #36	; 0x24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	3303      	adds	r3, #3
 80062aa:	089b      	lsrs	r3, r3, #2
 80062ac:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	e00b      	b.n	80062cc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	601a      	str	r2, [r3, #0]
    pDest++;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	3304      	adds	r3, #4
 80062c4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	3301      	adds	r3, #1
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d3ef      	bcc.n	80062b4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80062d4:	69fb      	ldr	r3, [r7, #28]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3724      	adds	r7, #36	; 0x24
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d12c      	bne.n	8006358 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	db12      	blt.n	8006336 <USB_EPSetStall+0x54>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00f      	beq.n	8006336 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006330:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006334:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	e02b      	b.n	80063b0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	db12      	blt.n	8006390 <USB_EPSetStall+0xae>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00f      	beq.n	8006390 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800638a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800638e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d128      	bne.n	800642c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	78db      	ldrb	r3, [r3, #3]
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d003      	beq.n	800640a <USB_EPClearStall+0x4c>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	78db      	ldrb	r3, [r3, #3]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d138      	bne.n	800647c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	e027      	b.n	800647c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006446:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800644a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	78db      	ldrb	r3, [r3, #3]
 8006450:	2b03      	cmp	r3, #3
 8006452:	d003      	beq.n	800645c <USB_EPClearStall+0x9e>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	78db      	ldrb	r3, [r3, #3]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d10f      	bne.n	800647c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064ac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c4:	4313      	orrs	r3, r2
 80064c6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f0:	f023 0302 	bic.w	r3, r3, #2
 80064f4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80064f6:	2003      	movs	r0, #3
 80064f8:	f7fa fe40 	bl	800117c <HAL_Delay>

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006520:	f043 0302 	orr.w	r3, r3, #2
 8006524:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006526:	2003      	movs	r0, #3
 8006528:	f7fa fe28 	bl	800117c <HAL_Delay>

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4013      	ands	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800654e:	68fb      	ldr	r3, [r7, #12]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4013      	ands	r3, r2
 800657e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	0c1b      	lsrs	r3, r3, #16
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4013      	ands	r3, r2
 80065b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	b29b      	uxth	r3, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065f2:	68bb      	ldr	r3, [r7, #8]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	01db      	lsls	r3, r3, #7
 8006632:	b2db      	uxtb	r3, r3
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4013      	ands	r3, r2
 800664c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800664e:	68bb      	ldr	r3, [r7, #8]
}
 8006650:	4618      	mov	r0, r3
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f003 0301 	and.w	r3, r3, #1
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006692:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0306 	and.w	r3, r3, #6
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d109      	bne.n	80066c0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ba:	f043 0303 	orr.w	r3, r3, #3
 80066be:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	460b      	mov	r3, r1
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	333c      	adds	r3, #60	; 0x3c
 80066fa:	3304      	adds	r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4a26      	ldr	r2, [pc, #152]	; (800679c <USB_EP0_OutStart+0xb8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d90a      	bls.n	800671e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006718:	d101      	bne.n	800671e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e037      	b.n	800678e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800673c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674c:	f043 0318 	orr.w	r3, r3, #24
 8006750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006760:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006764:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d10f      	bne.n	800678c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006786:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800678a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	4f54300a 	.word	0x4f54300a

080067a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4a13      	ldr	r2, [pc, #76]	; (8006804 <USB_CoreReset+0x64>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d901      	bls.n	80067be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e01b      	b.n	80067f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	daf2      	bge.n	80067ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f043 0201 	orr.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <USB_CoreReset+0x64>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d901      	bls.n	80067e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e006      	b.n	80067f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d0f0      	beq.n	80067d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	00030d40 	.word	0x00030d40

08006808 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800680e:	4b8c      	ldr	r3, [pc, #560]	; (8006a40 <MX_LWIP_Init+0x238>)
 8006810:	220a      	movs	r2, #10
 8006812:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 8006814:	4b8a      	ldr	r3, [pc, #552]	; (8006a40 <MX_LWIP_Init+0x238>)
 8006816:	220a      	movs	r2, #10
 8006818:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800681a:	4b89      	ldr	r3, [pc, #548]	; (8006a40 <MX_LWIP_Init+0x238>)
 800681c:	220a      	movs	r2, #10
 800681e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 5;
 8006820:	4b87      	ldr	r3, [pc, #540]	; (8006a40 <MX_LWIP_Init+0x238>)
 8006822:	2205      	movs	r2, #5
 8006824:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006826:	4b87      	ldr	r3, [pc, #540]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006828:	22ff      	movs	r2, #255	; 0xff
 800682a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800682c:	4b85      	ldr	r3, [pc, #532]	; (8006a44 <MX_LWIP_Init+0x23c>)
 800682e:	22ff      	movs	r2, #255	; 0xff
 8006830:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006832:	4b84      	ldr	r3, [pc, #528]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006834:	22ff      	movs	r2, #255	; 0xff
 8006836:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006838:	4b82      	ldr	r3, [pc, #520]	; (8006a44 <MX_LWIP_Init+0x23c>)
 800683a:	2200      	movs	r2, #0
 800683c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800683e:	4b82      	ldr	r3, [pc, #520]	; (8006a48 <MX_LWIP_Init+0x240>)
 8006840:	220a      	movs	r2, #10
 8006842:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 8006844:	4b80      	ldr	r3, [pc, #512]	; (8006a48 <MX_LWIP_Init+0x240>)
 8006846:	220a      	movs	r2, #10
 8006848:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 800684a:	4b7f      	ldr	r3, [pc, #508]	; (8006a48 <MX_LWIP_Init+0x240>)
 800684c:	220a      	movs	r2, #10
 800684e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006850:	4b7d      	ldr	r3, [pc, #500]	; (8006a48 <MX_LWIP_Init+0x240>)
 8006852:	2201      	movs	r2, #1
 8006854:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006856:	2100      	movs	r1, #0
 8006858:	2000      	movs	r0, #0
 800685a:	f004 ff55 	bl	800b708 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800685e:	4b78      	ldr	r3, [pc, #480]	; (8006a40 <MX_LWIP_Init+0x238>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	061a      	lsls	r2, r3, #24
 8006864:	4b76      	ldr	r3, [pc, #472]	; (8006a40 <MX_LWIP_Init+0x238>)
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	431a      	orrs	r2, r3
 800686c:	4b74      	ldr	r3, [pc, #464]	; (8006a40 <MX_LWIP_Init+0x238>)
 800686e:	789b      	ldrb	r3, [r3, #2]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	4313      	orrs	r3, r2
 8006874:	4a72      	ldr	r2, [pc, #456]	; (8006a40 <MX_LWIP_Init+0x238>)
 8006876:	78d2      	ldrb	r2, [r2, #3]
 8006878:	4313      	orrs	r3, r2
 800687a:	061a      	lsls	r2, r3, #24
 800687c:	4b70      	ldr	r3, [pc, #448]	; (8006a40 <MX_LWIP_Init+0x238>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	0619      	lsls	r1, r3, #24
 8006882:	4b6f      	ldr	r3, [pc, #444]	; (8006a40 <MX_LWIP_Init+0x238>)
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	4319      	orrs	r1, r3
 800688a:	4b6d      	ldr	r3, [pc, #436]	; (8006a40 <MX_LWIP_Init+0x238>)
 800688c:	789b      	ldrb	r3, [r3, #2]
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	430b      	orrs	r3, r1
 8006892:	496b      	ldr	r1, [pc, #428]	; (8006a40 <MX_LWIP_Init+0x238>)
 8006894:	78c9      	ldrb	r1, [r1, #3]
 8006896:	430b      	orrs	r3, r1
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800689e:	431a      	orrs	r2, r3
 80068a0:	4b67      	ldr	r3, [pc, #412]	; (8006a40 <MX_LWIP_Init+0x238>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	0619      	lsls	r1, r3, #24
 80068a6:	4b66      	ldr	r3, [pc, #408]	; (8006a40 <MX_LWIP_Init+0x238>)
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	4319      	orrs	r1, r3
 80068ae:	4b64      	ldr	r3, [pc, #400]	; (8006a40 <MX_LWIP_Init+0x238>)
 80068b0:	789b      	ldrb	r3, [r3, #2]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	430b      	orrs	r3, r1
 80068b6:	4962      	ldr	r1, [pc, #392]	; (8006a40 <MX_LWIP_Init+0x238>)
 80068b8:	78c9      	ldrb	r1, [r1, #3]
 80068ba:	430b      	orrs	r3, r1
 80068bc:	0a1b      	lsrs	r3, r3, #8
 80068be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068c2:	431a      	orrs	r2, r3
 80068c4:	4b5e      	ldr	r3, [pc, #376]	; (8006a40 <MX_LWIP_Init+0x238>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	0619      	lsls	r1, r3, #24
 80068ca:	4b5d      	ldr	r3, [pc, #372]	; (8006a40 <MX_LWIP_Init+0x238>)
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	041b      	lsls	r3, r3, #16
 80068d0:	4319      	orrs	r1, r3
 80068d2:	4b5b      	ldr	r3, [pc, #364]	; (8006a40 <MX_LWIP_Init+0x238>)
 80068d4:	789b      	ldrb	r3, [r3, #2]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	430b      	orrs	r3, r1
 80068da:	4959      	ldr	r1, [pc, #356]	; (8006a40 <MX_LWIP_Init+0x238>)
 80068dc:	78c9      	ldrb	r1, [r1, #3]
 80068de:	430b      	orrs	r3, r1
 80068e0:	0e1b      	lsrs	r3, r3, #24
 80068e2:	4313      	orrs	r3, r2
 80068e4:	4a59      	ldr	r2, [pc, #356]	; (8006a4c <MX_LWIP_Init+0x244>)
 80068e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80068e8:	4b56      	ldr	r3, [pc, #344]	; (8006a44 <MX_LWIP_Init+0x23c>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	061a      	lsls	r2, r3, #24
 80068ee:	4b55      	ldr	r3, [pc, #340]	; (8006a44 <MX_LWIP_Init+0x23c>)
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	041b      	lsls	r3, r3, #16
 80068f4:	431a      	orrs	r2, r3
 80068f6:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <MX_LWIP_Init+0x23c>)
 80068f8:	789b      	ldrb	r3, [r3, #2]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	4313      	orrs	r3, r2
 80068fe:	4a51      	ldr	r2, [pc, #324]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006900:	78d2      	ldrb	r2, [r2, #3]
 8006902:	4313      	orrs	r3, r2
 8006904:	061a      	lsls	r2, r3, #24
 8006906:	4b4f      	ldr	r3, [pc, #316]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	0619      	lsls	r1, r3, #24
 800690c:	4b4d      	ldr	r3, [pc, #308]	; (8006a44 <MX_LWIP_Init+0x23c>)
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	041b      	lsls	r3, r3, #16
 8006912:	4319      	orrs	r1, r3
 8006914:	4b4b      	ldr	r3, [pc, #300]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006916:	789b      	ldrb	r3, [r3, #2]
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	430b      	orrs	r3, r1
 800691c:	4949      	ldr	r1, [pc, #292]	; (8006a44 <MX_LWIP_Init+0x23c>)
 800691e:	78c9      	ldrb	r1, [r1, #3]
 8006920:	430b      	orrs	r3, r1
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006928:	431a      	orrs	r2, r3
 800692a:	4b46      	ldr	r3, [pc, #280]	; (8006a44 <MX_LWIP_Init+0x23c>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	0619      	lsls	r1, r3, #24
 8006930:	4b44      	ldr	r3, [pc, #272]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	041b      	lsls	r3, r3, #16
 8006936:	4319      	orrs	r1, r3
 8006938:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <MX_LWIP_Init+0x23c>)
 800693a:	789b      	ldrb	r3, [r3, #2]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	430b      	orrs	r3, r1
 8006940:	4940      	ldr	r1, [pc, #256]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006942:	78c9      	ldrb	r1, [r1, #3]
 8006944:	430b      	orrs	r3, r1
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800694c:	431a      	orrs	r2, r3
 800694e:	4b3d      	ldr	r3, [pc, #244]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	0619      	lsls	r1, r3, #24
 8006954:	4b3b      	ldr	r3, [pc, #236]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	041b      	lsls	r3, r3, #16
 800695a:	4319      	orrs	r1, r3
 800695c:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <MX_LWIP_Init+0x23c>)
 800695e:	789b      	ldrb	r3, [r3, #2]
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	430b      	orrs	r3, r1
 8006964:	4937      	ldr	r1, [pc, #220]	; (8006a44 <MX_LWIP_Init+0x23c>)
 8006966:	78c9      	ldrb	r1, [r1, #3]
 8006968:	430b      	orrs	r3, r1
 800696a:	0e1b      	lsrs	r3, r3, #24
 800696c:	4313      	orrs	r3, r2
 800696e:	4a38      	ldr	r2, [pc, #224]	; (8006a50 <MX_LWIP_Init+0x248>)
 8006970:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006972:	4b35      	ldr	r3, [pc, #212]	; (8006a48 <MX_LWIP_Init+0x240>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	061a      	lsls	r2, r3, #24
 8006978:	4b33      	ldr	r3, [pc, #204]	; (8006a48 <MX_LWIP_Init+0x240>)
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	431a      	orrs	r2, r3
 8006980:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <MX_LWIP_Init+0x240>)
 8006982:	789b      	ldrb	r3, [r3, #2]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	4313      	orrs	r3, r2
 8006988:	4a2f      	ldr	r2, [pc, #188]	; (8006a48 <MX_LWIP_Init+0x240>)
 800698a:	78d2      	ldrb	r2, [r2, #3]
 800698c:	4313      	orrs	r3, r2
 800698e:	061a      	lsls	r2, r3, #24
 8006990:	4b2d      	ldr	r3, [pc, #180]	; (8006a48 <MX_LWIP_Init+0x240>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	0619      	lsls	r1, r3, #24
 8006996:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <MX_LWIP_Init+0x240>)
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	041b      	lsls	r3, r3, #16
 800699c:	4319      	orrs	r1, r3
 800699e:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069a0:	789b      	ldrb	r3, [r3, #2]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	430b      	orrs	r3, r1
 80069a6:	4928      	ldr	r1, [pc, #160]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069a8:	78c9      	ldrb	r1, [r1, #3]
 80069aa:	430b      	orrs	r3, r1
 80069ac:	021b      	lsls	r3, r3, #8
 80069ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069b2:	431a      	orrs	r2, r3
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	0619      	lsls	r1, r3, #24
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	4319      	orrs	r1, r3
 80069c2:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069c4:	789b      	ldrb	r3, [r3, #2]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	430b      	orrs	r3, r1
 80069ca:	491f      	ldr	r1, [pc, #124]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069cc:	78c9      	ldrb	r1, [r1, #3]
 80069ce:	430b      	orrs	r3, r1
 80069d0:	0a1b      	lsrs	r3, r3, #8
 80069d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069d6:	431a      	orrs	r2, r3
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	0619      	lsls	r1, r3, #24
 80069de:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	041b      	lsls	r3, r3, #16
 80069e4:	4319      	orrs	r1, r3
 80069e6:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069e8:	789b      	ldrb	r3, [r3, #2]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	430b      	orrs	r3, r1
 80069ee:	4916      	ldr	r1, [pc, #88]	; (8006a48 <MX_LWIP_Init+0x240>)
 80069f0:	78c9      	ldrb	r1, [r1, #3]
 80069f2:	430b      	orrs	r3, r1
 80069f4:	0e1b      	lsrs	r3, r3, #24
 80069f6:	4313      	orrs	r3, r2
 80069f8:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <MX_LWIP_Init+0x24c>)
 80069fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80069fc:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <MX_LWIP_Init+0x250>)
 80069fe:	9302      	str	r3, [sp, #8]
 8006a00:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <MX_LWIP_Init+0x254>)
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	2300      	movs	r3, #0
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <MX_LWIP_Init+0x24c>)
 8006a0a:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <MX_LWIP_Init+0x248>)
 8006a0c:	490f      	ldr	r1, [pc, #60]	; (8006a4c <MX_LWIP_Init+0x244>)
 8006a0e:	4814      	ldr	r0, [pc, #80]	; (8006a60 <MX_LWIP_Init+0x258>)
 8006a10:	f005 fb34 	bl	800c07c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006a14:	4812      	ldr	r0, [pc, #72]	; (8006a60 <MX_LWIP_Init+0x258>)
 8006a16:	f005 fc09 	bl	800c22c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <MX_LWIP_Init+0x258>)
 8006a1c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006a20:	089b      	lsrs	r3, r3, #2
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006a2c:	480c      	ldr	r0, [pc, #48]	; (8006a60 <MX_LWIP_Init+0x258>)
 8006a2e:	f005 fc0d 	bl	800c24c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006a32:	e002      	b.n	8006a3a <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8006a34:	480a      	ldr	r0, [pc, #40]	; (8006a60 <MX_LWIP_Init+0x258>)
 8006a36:	f005 fc4d 	bl	800c2d4 <netif_set_down>
}
 8006a3a:	bf00      	nop
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	200043d0 	.word	0x200043d0
 8006a44:	200043cc 	.word	0x200043cc
 8006a48:	20004394 	.word	0x20004394
 8006a4c:	200043c8 	.word	0x200043c8
 8006a50:	200043d4 	.word	0x200043d4
 8006a54:	200043d8 	.word	0x200043d8
 8006a58:	0800b631 	.word	0x0800b631
 8006a5c:	080070b1 	.word	0x080070b1
 8006a60:	20004398 	.word	0x20004398

08006a64 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08e      	sub	sp, #56	; 0x38
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	605a      	str	r2, [r3, #4]
 8006a76:	609a      	str	r2, [r3, #8]
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a59      	ldr	r2, [pc, #356]	; (8006be8 <HAL_ETH_MspInit+0x184>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	f040 80ac 	bne.w	8006be0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006a88:	2300      	movs	r3, #0
 8006a8a:	623b      	str	r3, [r7, #32]
 8006a8c:	4b57      	ldr	r3, [pc, #348]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	4a56      	ldr	r2, [pc, #344]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006a92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a96:	6313      	str	r3, [r2, #48]	; 0x30
 8006a98:	4b54      	ldr	r3, [pc, #336]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa0:	623b      	str	r3, [r7, #32]
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	4b50      	ldr	r3, [pc, #320]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	4a4f      	ldr	r2, [pc, #316]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ab4:	4b4d      	ldr	r3, [pc, #308]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006abc:	61fb      	str	r3, [r7, #28]
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	4b49      	ldr	r3, [pc, #292]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	4a48      	ldr	r2, [pc, #288]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006aca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ace:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad0:	4b46      	ldr	r3, [pc, #280]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	4b42      	ldr	r3, [pc, #264]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	4a41      	ldr	r2, [pc, #260]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006ae6:	f043 0304 	orr.w	r3, r3, #4
 8006aea:	6313      	str	r3, [r2, #48]	; 0x30
 8006aec:	4b3f      	ldr	r3, [pc, #252]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	4b3b      	ldr	r3, [pc, #236]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	4a3a      	ldr	r2, [pc, #232]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	6313      	str	r3, [r2, #48]	; 0x30
 8006b08:	4b38      	ldr	r3, [pc, #224]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	4b34      	ldr	r3, [pc, #208]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	4a33      	ldr	r2, [pc, #204]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006b1e:	f043 0302 	orr.w	r3, r3, #2
 8006b22:	6313      	str	r3, [r2, #48]	; 0x30
 8006b24:	4b31      	ldr	r3, [pc, #196]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b30:	2300      	movs	r3, #0
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	4b2d      	ldr	r3, [pc, #180]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b40:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <HAL_ETH_MspInit+0x188>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006b4c:	2332      	movs	r3, #50	; 0x32
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b50:	2302      	movs	r3, #2
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b5c:	230b      	movs	r3, #11
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b64:	4619      	mov	r1, r3
 8006b66:	4822      	ldr	r0, [pc, #136]	; (8006bf0 <HAL_ETH_MspInit+0x18c>)
 8006b68:	f7fb fc1e 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006b6c:	2386      	movs	r3, #134	; 0x86
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b70:	2302      	movs	r3, #2
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b7c:	230b      	movs	r3, #11
 8006b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b84:	4619      	mov	r1, r3
 8006b86:	481b      	ldr	r0, [pc, #108]	; (8006bf4 <HAL_ETH_MspInit+0x190>)
 8006b88:	f7fb fc0e 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b92:	2302      	movs	r3, #2
 8006b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b9e:	230b      	movs	r3, #11
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4813      	ldr	r0, [pc, #76]	; (8006bf8 <HAL_ETH_MspInit+0x194>)
 8006baa:	f7fb fbfd 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006bae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006bc0:	230b      	movs	r3, #11
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bc8:	4619      	mov	r1, r3
 8006bca:	480c      	ldr	r0, [pc, #48]	; (8006bfc <HAL_ETH_MspInit+0x198>)
 8006bcc:	f7fb fbec 	bl	80023a8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2105      	movs	r1, #5
 8006bd4:	203d      	movs	r0, #61	; 0x3d
 8006bd6:	f7fa fbab 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006bda:	203d      	movs	r0, #61	; 0x3d
 8006bdc:	f7fa fbc4 	bl	8001368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006be0:	bf00      	nop
 8006be2:	3738      	adds	r7, #56	; 0x38
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40028000 	.word	0x40028000
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40020800 	.word	0x40020800
 8006bf4:	40020000 	.word	0x40020000
 8006bf8:	40020400 	.word	0x40020400
 8006bfc:	40021800 	.word	0x40021800

08006c00 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <HAL_ETH_RxCpltCallback+0x1c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 ff47 	bl	8008aa0 <osSemaphoreRelease>
}
 8006c12:	bf00      	nop
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000458 	.word	0x20000458

08006c20 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8006c20:	b5b0      	push	{r4, r5, r7, lr}
 8006c22:	b090      	sub	sp, #64	; 0x40
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006c2c:	4b5c      	ldr	r3, [pc, #368]	; (8006da0 <low_level_init+0x180>)
 8006c2e:	4a5d      	ldr	r2, [pc, #372]	; (8006da4 <low_level_init+0x184>)
 8006c30:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006c32:	4b5b      	ldr	r3, [pc, #364]	; (8006da0 <low_level_init+0x180>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006c38:	4b59      	ldr	r3, [pc, #356]	; (8006da0 <low_level_init+0x180>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8006c4a:	23e1      	movs	r3, #225	; 0xe1
 8006c4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8006c50:	2300      	movs	r3, #0
 8006c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8006c56:	2300      	movs	r3, #0
 8006c58:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006c62:	4a4f      	ldr	r2, [pc, #316]	; (8006da0 <low_level_init+0x180>)
 8006c64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c68:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006c6a:	4b4d      	ldr	r3, [pc, #308]	; (8006da0 <low_level_init+0x180>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006c70:	4b4b      	ldr	r3, [pc, #300]	; (8006da0 <low_level_init+0x180>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006c76:	4b4a      	ldr	r3, [pc, #296]	; (8006da0 <low_level_init+0x180>)
 8006c78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006c7c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006c7e:	4848      	ldr	r0, [pc, #288]	; (8006da0 <low_level_init+0x180>)
 8006c80:	f7fa fb80 	bl	8001384 <HAL_ETH_Init>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006c8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d108      	bne.n	8006ca4 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006c98:	f043 0304 	orr.w	r3, r3, #4
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	4a40      	ldr	r2, [pc, #256]	; (8006da8 <low_level_init+0x188>)
 8006ca8:	4940      	ldr	r1, [pc, #256]	; (8006dac <low_level_init+0x18c>)
 8006caa:	483d      	ldr	r0, [pc, #244]	; (8006da0 <low_level_init+0x180>)
 8006cac:	f7fa fd08 	bl	80016c0 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	4a3f      	ldr	r2, [pc, #252]	; (8006db0 <low_level_init+0x190>)
 8006cb4:	493f      	ldr	r1, [pc, #252]	; (8006db4 <low_level_init+0x194>)
 8006cb6:	483a      	ldr	r0, [pc, #232]	; (8006da0 <low_level_init+0x180>)
 8006cb8:	f7fa fd6b 	bl	8001792 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2206      	movs	r2, #6
 8006cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006cc4:	4b36      	ldr	r3, [pc, #216]	; (8006da0 <low_level_init+0x180>)
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006cd0:	4b33      	ldr	r3, [pc, #204]	; (8006da0 <low_level_init+0x180>)
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	785a      	ldrb	r2, [r3, #1]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006cdc:	4b30      	ldr	r3, [pc, #192]	; (8006da0 <low_level_init+0x180>)
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	789a      	ldrb	r2, [r3, #2]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006ce8:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <low_level_init+0x180>)
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	78da      	ldrb	r2, [r3, #3]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006cf4:	4b2a      	ldr	r3, [pc, #168]	; (8006da0 <low_level_init+0x180>)
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	791a      	ldrb	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006d00:	4b27      	ldr	r3, [pc, #156]	; (8006da0 <low_level_init+0x180>)
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	795a      	ldrb	r2, [r3, #5]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d12:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006d1a:	f043 030a 	orr.w	r3, r3, #10
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006d26:	2300      	movs	r3, #0
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d32:	2101      	movs	r1, #1
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 fe31 	bl	800899c <osSemaphoreCreate>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	4b1e      	ldr	r3, [pc, #120]	; (8006db8 <low_level_init+0x198>)
 8006d3e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006d40:	4b1e      	ldr	r3, [pc, #120]	; (8006dbc <low_level_init+0x19c>)
 8006d42:	f107 040c 	add.w	r4, r7, #12
 8006d46:	461d      	mov	r5, r3
 8006d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006d54:	f107 030c 	add.w	r3, r7, #12
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fd21 	bl	80087a2 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006d60:	480f      	ldr	r0, [pc, #60]	; (8006da0 <low_level_init+0x180>)
 8006d62:	f7fb f83e 	bl	8001de2 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006d66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	211d      	movs	r1, #29
 8006d6e:	480c      	ldr	r0, [pc, #48]	; (8006da0 <low_level_init+0x180>)
 8006d70:	f7fa ff69 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	f043 030b 	orr.w	r3, r3, #11
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	461a      	mov	r2, r3
 8006d80:	211d      	movs	r1, #29
 8006d82:	4807      	ldr	r0, [pc, #28]	; (8006da0 <low_level_init+0x180>)
 8006d84:	f7fa ffc7 	bl	8001d16 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006d88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	211d      	movs	r1, #29
 8006d90:	4803      	ldr	r0, [pc, #12]	; (8006da0 <low_level_init+0x180>)
 8006d92:	f7fa ff58 	bl	8001c46 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8006d96:	bf00      	nop
 8006d98:	3740      	adds	r7, #64	; 0x40
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20005cac 	.word	0x20005cac
 8006da4:	40028000 	.word	0x40028000
 8006da8:	20005cf4 	.word	0x20005cf4
 8006dac:	200043dc 	.word	0x200043dc
 8006db0:	2000445c 	.word	0x2000445c
 8006db4:	20005c2c 	.word	0x20005c2c
 8006db8:	20000458 	.word	0x20000458
 8006dbc:	080158ec 	.word	0x080158ec

08006dc0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006dca:	4b4b      	ldr	r3, [pc, #300]	; (8006ef8 <low_level_output+0x138>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006de2:	4b45      	ldr	r3, [pc, #276]	; (8006ef8 <low_level_output+0x138>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	623b      	str	r3, [r7, #32]
 8006df0:	e05a      	b.n	8006ea8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da03      	bge.n	8006e02 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006dfa:	23f8      	movs	r3, #248	; 0xf8
 8006dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006e00:	e05c      	b.n	8006ebc <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	895b      	ldrh	r3, [r3, #10]
 8006e06:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006e0c:	e02f      	b.n	8006e6e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	18d0      	adds	r0, r2, r3
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	18d1      	adds	r1, r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006e22:	3304      	adds	r3, #4
 8006e24:	461a      	mov	r2, r3
 8006e26:	f00d fe04 	bl	8014a32 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	da03      	bge.n	8006e40 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006e38:	23f8      	movs	r3, #248	; 0xf8
 8006e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006e3e:	e03d      	b.n	8006ebc <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006e50:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006e5c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006e68:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4413      	add	r3, r2
 8006e74:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d8c8      	bhi.n	8006e0e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	18d0      	adds	r0, r2, r3
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	4413      	add	r3, r2
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f00d fdd0 	bl	8014a32 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	623b      	str	r3, [r7, #32]
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1a1      	bne.n	8006df2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006eae:	6979      	ldr	r1, [r7, #20]
 8006eb0:	4811      	ldr	r0, [pc, #68]	; (8006ef8 <low_level_output+0x138>)
 8006eb2:	f7fa fcdb 	bl	800186c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <low_level_output+0x138>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec4:	3314      	adds	r3, #20
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00d      	beq.n	8006eec <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006ed0:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <low_level_output+0x138>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed8:	3314      	adds	r3, #20
 8006eda:	2220      	movs	r2, #32
 8006edc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006ede:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <low_level_output+0x138>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006eec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	; 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20005cac 	.word	0x20005cac

08006efc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08c      	sub	sp, #48	; 0x30
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006f20:	484e      	ldr	r0, [pc, #312]	; (800705c <low_level_input+0x160>)
 8006f22:	f7fa fd8d 	bl	8001a40 <HAL_ETH_GetReceivedFrame_IT>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <low_level_input+0x34>
    return NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e091      	b.n	8007054 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006f30:	4b4a      	ldr	r3, [pc, #296]	; (800705c <low_level_input+0x160>)
 8006f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f34:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006f36:	4b49      	ldr	r3, [pc, #292]	; (800705c <low_level_input+0x160>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8006f3c:	89fb      	ldrh	r3, [r7, #14]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d006      	beq.n	8006f50 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006f42:	89fb      	ldrh	r3, [r7, #14]
 8006f44:	2203      	movs	r2, #3
 8006f46:	4619      	mov	r1, r3
 8006f48:	2004      	movs	r0, #4
 8006f4a:	f005 fa45 	bl	800c3d8 <pbuf_alloc>
 8006f4e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d04b      	beq.n	8006fee <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006f56:	4b41      	ldr	r3, [pc, #260]	; (800705c <low_level_input+0x160>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f64:	e040      	b.n	8006fe8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	895b      	ldrh	r3, [r3, #10]
 8006f6a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006f70:	e021      	b.n	8006fb6 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	18d0      	adds	r0, r2, r3
 8006f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	18d1      	adds	r1, r2, r3
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006f86:	3304      	adds	r3, #4
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f00d fd52 	bl	8014a32 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006fa4:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006fb0:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d8d6      	bhi.n	8006f72 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	18d0      	adds	r0, r2, r3
 8006fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f00d fd2c 	bl	8014a32 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	4413      	add	r3, r2
 8006fe0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1bb      	bne.n	8006f66 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006fee:	4b1b      	ldr	r3, [pc, #108]	; (800705c <low_level_input+0x160>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	e00b      	b.n	8007012 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3301      	adds	r3, #1
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <low_level_input+0x160>)
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	429a      	cmp	r2, r3
 800701a:	d3ee      	bcc.n	8006ffa <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800701c:	4b0f      	ldr	r3, [pc, #60]	; (800705c <low_level_input+0x160>)
 800701e:	2200      	movs	r2, #0
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8007022:	4b0e      	ldr	r3, [pc, #56]	; (800705c <low_level_input+0x160>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800702a:	3314      	adds	r3, #20
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <low_level_input+0x160>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703e:	3314      	adds	r3, #20
 8007040:	2280      	movs	r2, #128	; 0x80
 8007042:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <low_level_input+0x160>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704c:	3308      	adds	r3, #8
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007054:	4618      	mov	r0, r3
 8007056:	3730      	adds	r7, #48	; 0x30
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20005cac 	.word	0x20005cac

08007060 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <ethernetif_input+0x4c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007074:	4618      	mov	r0, r3
 8007076:	f001 fcc5 	bl	8008a04 <osSemaphoreWait>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f5      	bne.n	800706c <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ff3b 	bl	8006efc <low_level_input>
 8007086:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	68f9      	ldr	r1, [r7, #12]
 8007094:	68b8      	ldr	r0, [r7, #8]
 8007096:	4798      	blx	r3
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800709e:	68b8      	ldr	r0, [r7, #8]
 80070a0:	f005 fd0c 	bl	800cabc <pbuf_free>
          }
        }
      } while(p!=NULL);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1ea      	bne.n	8007080 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80070aa:	e7df      	b.n	800706c <ethernetif_input+0xc>
 80070ac:	20000458 	.word	0x20000458

080070b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <ethernetif_init+0x1c>
 80070be:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <ethernetif_init+0x48>)
 80070c0:	f240 222d 	movw	r2, #557	; 0x22d
 80070c4:	490d      	ldr	r1, [pc, #52]	; (80070fc <ethernetif_init+0x4c>)
 80070c6:	480e      	ldr	r0, [pc, #56]	; (8007100 <ethernetif_init+0x50>)
 80070c8:	f00d fd6e 	bl	8014ba8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2273      	movs	r2, #115	; 0x73
 80070d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2274      	movs	r2, #116	; 0x74
 80070d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <ethernetif_init+0x54>)
 80070e0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a08      	ldr	r2, [pc, #32]	; (8007108 <ethernetif_init+0x58>)
 80070e6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff fd99 	bl	8006c20 <low_level_init>

  return ERR_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	08015908 	.word	0x08015908
 80070fc:	08015924 	.word	0x08015924
 8007100:	08015934 	.word	0x08015934
 8007104:	080121dd 	.word	0x080121dd
 8007108:	08006dc1 	.word	0x08006dc1

0800710c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007110:	f7fa f828 	bl	8001164 <HAL_GetTick>
 8007114:	4603      	mov	r3, r0
}
 8007116:	4618      	mov	r0, r3
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	460b      	mov	r3, r1
 8007124:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7c1b      	ldrb	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d115      	bne.n	800715e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007136:	2202      	movs	r2, #2
 8007138:	2181      	movs	r1, #129	; 0x81
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f00d fae3 	bl	8014706 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800714a:	2202      	movs	r2, #2
 800714c:	2101      	movs	r1, #1
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f00d fad9 	bl	8014706 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800715c:	e012      	b.n	8007184 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800715e:	2340      	movs	r3, #64	; 0x40
 8007160:	2202      	movs	r2, #2
 8007162:	2181      	movs	r1, #129	; 0x81
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f00d face 	bl	8014706 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007170:	2340      	movs	r3, #64	; 0x40
 8007172:	2202      	movs	r2, #2
 8007174:	2101      	movs	r1, #1
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f00d fac5 	bl	8014706 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007184:	2308      	movs	r3, #8
 8007186:	2203      	movs	r2, #3
 8007188:	2182      	movs	r1, #130	; 0x82
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f00d fabb 	bl	8014706 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007196:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800719a:	f00d fc2b 	bl	80149f4 <malloc>
 800719e:	4603      	mov	r3, r0
 80071a0:	461a      	mov	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80071b2:	2301      	movs	r3, #1
 80071b4:	73fb      	strb	r3, [r7, #15]
 80071b6:	e026      	b.n	8007206 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071be:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	7c1b      	ldrb	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d109      	bne.n	80071f6 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ec:	2101      	movs	r1, #1
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f00d fb7a 	bl	80148e8 <USBD_LL_PrepareReceive>
 80071f4:	e007      	b.n	8007206 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071fc:	2340      	movs	r3, #64	; 0x40
 80071fe:	2101      	movs	r1, #1
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f00d fb71 	bl	80148e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007220:	2181      	movs	r1, #129	; 0x81
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f00d fa95 	bl	8014752 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800722e:	2101      	movs	r1, #1
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f00d fa8e 	bl	8014752 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800723e:	2182      	movs	r1, #130	; 0x82
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f00d fa86 	bl	8014752 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00e      	beq.n	8007274 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007266:	4618      	mov	r0, r3
 8007268:	f00d fbcc 	bl	8014a04 <free>
    pdev->pClassData = NULL;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800728e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d039      	beq.n	800731c <USBD_CDC_Setup+0x9e>
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	d17c      	bne.n	80073a6 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	88db      	ldrh	r3, [r3, #6]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d029      	beq.n	8007308 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	b25b      	sxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	da11      	bge.n	80072e2 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80072ca:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	88d2      	ldrh	r2, [r2, #6]
 80072d0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072d2:	6939      	ldr	r1, [r7, #16]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	88db      	ldrh	r3, [r3, #6]
 80072d8:	461a      	mov	r2, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 f99c 	bl	8008618 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80072e0:	e068      	b.n	80073b4 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	785a      	ldrb	r2, [r3, #1]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	88db      	ldrh	r3, [r3, #6]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072f8:	6939      	ldr	r1, [r7, #16]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	88db      	ldrh	r3, [r3, #6]
 80072fe:	461a      	mov	r2, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f9b7 	bl	8008674 <USBD_CtlPrepareRx>
    break;
 8007306:	e055      	b.n	80073b4 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	7850      	ldrb	r0, [r2, #1]
 8007314:	2200      	movs	r2, #0
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	4798      	blx	r3
    break;
 800731a:	e04b      	b.n	80073b4 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b0a      	cmp	r3, #10
 8007322:	d017      	beq.n	8007354 <USBD_CDC_Setup+0xd6>
 8007324:	2b0b      	cmp	r3, #11
 8007326:	d029      	beq.n	800737c <USBD_CDC_Setup+0xfe>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d133      	bne.n	8007394 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007332:	2b03      	cmp	r3, #3
 8007334:	d107      	bne.n	8007346 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007336:	f107 030c 	add.w	r3, r7, #12
 800733a:	2202      	movs	r2, #2
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f96a 	bl	8008618 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007344:	e02e      	b.n	80073a4 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 f8fa 	bl	8008542 <USBD_CtlError>
			  ret = USBD_FAIL;
 800734e:	2302      	movs	r3, #2
 8007350:	75fb      	strb	r3, [r7, #23]
      break;
 8007352:	e027      	b.n	80073a4 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800735a:	2b03      	cmp	r3, #3
 800735c:	d107      	bne.n	800736e <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800735e:	f107 030f 	add.w	r3, r7, #15
 8007362:	2201      	movs	r2, #1
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f956 	bl	8008618 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800736c:	e01a      	b.n	80073a4 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 f8e6 	bl	8008542 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007376:	2302      	movs	r3, #2
 8007378:	75fb      	strb	r3, [r7, #23]
      break;
 800737a:	e013      	b.n	80073a4 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007382:	2b03      	cmp	r3, #3
 8007384:	d00d      	beq.n	80073a2 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 f8da 	bl	8008542 <USBD_CtlError>
			  ret = USBD_FAIL;
 800738e:	2302      	movs	r3, #2
 8007390:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007392:	e006      	b.n	80073a2 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 f8d3 	bl	8008542 <USBD_CtlError>
      ret = USBD_FAIL;
 800739c:	2302      	movs	r3, #2
 800739e:	75fb      	strb	r3, [r7, #23]
      break;
 80073a0:	e000      	b.n	80073a4 <USBD_CDC_Setup+0x126>
      break;
 80073a2:	bf00      	nop
    }
    break;
 80073a4:	e006      	b.n	80073b4 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 f8ca 	bl	8008542 <USBD_CtlError>
    ret = USBD_FAIL;
 80073ae:	2302      	movs	r3, #2
 80073b0:	75fb      	strb	r3, [r7, #23]
    break;
 80073b2:	bf00      	nop
  }

  return ret;
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073d0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80073d8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d03a      	beq.n	800745a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80073e4:	78fa      	ldrb	r2, [r7, #3]
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	331c      	adds	r3, #28
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d029      	beq.n	800744e <USBD_CDC_DataIn+0x90>
 80073fa:	78fa      	ldrb	r2, [r7, #3]
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	331c      	adds	r3, #28
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	78f9      	ldrb	r1, [r7, #3]
 800740e:	68b8      	ldr	r0, [r7, #8]
 8007410:	460b      	mov	r3, r1
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	1a5b      	subs	r3, r3, r1
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4403      	add	r3, r0
 800741a:	3344      	adds	r3, #68	; 0x44
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007422:	fb03 f301 	mul.w	r3, r3, r1
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d110      	bne.n	800744e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	331c      	adds	r3, #28
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007440:	78f9      	ldrb	r1, [r7, #3]
 8007442:	2300      	movs	r3, #0
 8007444:	2200      	movs	r2, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f00d fa2b 	bl	80148a2 <USBD_LL_Transmit>
 800744c:	e003      	b.n	8007456 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e000      	b.n	800745c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007476:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f00d fa56 	bl	801492e <USBD_LL_GetRxDataSize>
 8007482:	4602      	mov	r2, r0
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00d      	beq.n	80074b0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80074a8:	4611      	mov	r1, r2
 80074aa:	4798      	blx	r3

    return USBD_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e000      	b.n	80074b2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80074b0:	2302      	movs	r3, #2
  }
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074c8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d015      	beq.n	8007500 <USBD_CDC_EP0_RxReady+0x46>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074da:	2bff      	cmp	r3, #255	; 0xff
 80074dc:	d010      	beq.n	8007500 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80074ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074f4:	b292      	uxth	r2, r2
 80074f6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	22ff      	movs	r2, #255	; 0xff
 80074fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2243      	movs	r2, #67	; 0x43
 8007518:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800751a:	4b03      	ldr	r3, [pc, #12]	; (8007528 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	20000090 	.word	0x20000090

0800752c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2243      	movs	r2, #67	; 0x43
 8007538:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800753a:	4b03      	ldr	r3, [pc, #12]	; (8007548 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	2000004c 	.word	0x2000004c

0800754c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2243      	movs	r2, #67	; 0x43
 8007558:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800755a:	4b03      	ldr	r3, [pc, #12]	; (8007568 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	200000d4 	.word	0x200000d4

0800756c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	220a      	movs	r2, #10
 8007578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800757a:	4b03      	ldr	r3, [pc, #12]	; (8007588 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	20000008 	.word	0x20000008

0800758c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007596:	2302      	movs	r3, #2
 8007598:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	4613      	mov	r3, r2
 80075c6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075ce:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075d8:	88fa      	ldrh	r2, [r7, #6]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007624:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800762c:	2b00      	cmp	r3, #0
 800762e:	d017      	beq.n	8007660 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	7c1b      	ldrb	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800763e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007642:	2101      	movs	r1, #1
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f00d f94f 	bl	80148e8 <USBD_LL_PrepareReceive>
 800764a:	e007      	b.n	800765c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007652:	2340      	movs	r3, #64	; 0x40
 8007654:	2101      	movs	r1, #1
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f00d f946 	bl	80148e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	4613      	mov	r3, r2
 8007676:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800767e:	2302      	movs	r3, #2
 8007680:	e01a      	b.n	80076b8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	79fa      	ldrb	r2, [r7, #7]
 80076ae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f00c ffc1 	bl	8014638 <USBD_LL_Init>

  return USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]
 80076e0:	e001      	b.n	80076e6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80076e2:	2302      	movs	r3, #2
 80076e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f00c ffe7 	bl	80146d0 <USBD_LL_Start>

  return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800772e:	2302      	movs	r3, #2
 8007730:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00c      	beq.n	8007756 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	78fa      	ldrb	r2, [r7, #3]
 8007746:	4611      	mov	r1, r2
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	78fa      	ldrb	r2, [r7, #3]
 8007776:	4611      	mov	r1, r2
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fe95 	bl	80084c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80077ac:	461a      	mov	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d00c      	beq.n	80077dc <USBD_LL_SetupStage+0x56>
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d302      	bcc.n	80077cc <USBD_LL_SetupStage+0x46>
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d010      	beq.n	80077ec <USBD_LL_SetupStage+0x66>
 80077ca:	e017      	b.n	80077fc <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fa05 	bl	8007be4 <USBD_StdDevReq>
    break;
 80077da:	e01a      	b.n	8007812 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fa67 	bl	8007cb8 <USBD_StdItfReq>
    break;
 80077ea:	e012      	b.n	8007812 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 faa5 	bl	8007d44 <USBD_StdEPReq>
    break;
 80077fa:	e00a      	b.n	8007812 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007806:	b2db      	uxtb	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f00c ffc0 	bl	8014790 <USBD_LL_StallEP>
    break;
 8007810:	bf00      	nop
  }

  return USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	460b      	mov	r3, r1
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800782a:	7afb      	ldrb	r3, [r7, #11]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d14b      	bne.n	80078c8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007836:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800783e:	2b03      	cmp	r3, #3
 8007840:	d134      	bne.n	80078ac <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d919      	bls.n	8007882 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	1ad2      	subs	r2, r2, r3
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007864:	429a      	cmp	r2, r3
 8007866:	d203      	bcs.n	8007870 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800786c:	b29b      	uxth	r3, r3
 800786e:	e002      	b.n	8007876 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007874:	b29b      	uxth	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 ff18 	bl	80086b0 <USBD_CtlContinueRx>
 8007880:	e038      	b.n	80078f4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007894:	2b03      	cmp	r3, #3
 8007896:	d105      	bne.n	80078a4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 ff15 	bl	80086d4 <USBD_CtlSendStatus>
 80078aa:	e023      	b.n	80078f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d11e      	bne.n	80078f4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80078be:	2100      	movs	r1, #0
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f00c ff65 	bl	8014790 <USBD_LL_StallEP>
 80078c6:	e015      	b.n	80078f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00d      	beq.n	80078f0 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d108      	bne.n	80078f0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	7afa      	ldrb	r2, [r7, #11]
 80078e8:	4611      	mov	r1, r2
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	4798      	blx	r3
 80078ee:	e001      	b.n	80078f4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80078f0:	2302      	movs	r3, #2
 80078f2:	e000      	b.n	80078f6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b086      	sub	sp, #24
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	460b      	mov	r3, r1
 8007908:	607a      	str	r2, [r7, #4]
 800790a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d17f      	bne.n	8007a12 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3314      	adds	r3, #20
 8007916:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800791e:	2b02      	cmp	r3, #2
 8007920:	d15c      	bne.n	80079dc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	429a      	cmp	r2, r3
 800792c:	d915      	bls.n	800795a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	1ad2      	subs	r2, r2, r3
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fe82 	bl	8008650 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800794c:	2300      	movs	r3, #0
 800794e:	2200      	movs	r2, #0
 8007950:	2100      	movs	r1, #0
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f00c ffc8 	bl	80148e8 <USBD_LL_PrepareReceive>
 8007958:	e04e      	b.n	80079f8 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	6912      	ldr	r2, [r2, #16]
 8007962:	fbb3 f1f2 	udiv	r1, r3, r2
 8007966:	fb02 f201 	mul.w	r2, r2, r1
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d11c      	bne.n	80079aa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007978:	429a      	cmp	r2, r3
 800797a:	d316      	bcc.n	80079aa <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007986:	429a      	cmp	r2, r3
 8007988:	d20f      	bcs.n	80079aa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800798a:	2200      	movs	r2, #0
 800798c:	2100      	movs	r1, #0
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 fe5e 	bl	8008650 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800799c:	2300      	movs	r3, #0
 800799e:	2200      	movs	r2, #0
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f00c ffa0 	bl	80148e8 <USBD_LL_PrepareReceive>
 80079a8:	e026      	b.n	80079f8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d105      	bne.n	80079cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80079cc:	2180      	movs	r1, #128	; 0x80
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f00c fede 	bl	8014790 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fe90 	bl	80086fa <USBD_CtlReceiveStatus>
 80079da:	e00d      	b.n	80079f8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d004      	beq.n	80079f0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80079f0:	2180      	movs	r1, #128	; 0x80
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f00c fecc 	bl	8014790 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d11d      	bne.n	8007a3e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fe82 	bl	800770c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007a10:	e015      	b.n	8007a3e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d108      	bne.n	8007a3a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	7afa      	ldrb	r2, [r7, #11]
 8007a32:	4611      	mov	r1, r2
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	4798      	blx	r3
 8007a38:	e001      	b.n	8007a3e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e000      	b.n	8007a40 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	2200      	movs	r2, #0
 8007a54:	2100      	movs	r1, #0
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f00c fe55 	bl	8014706 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2240      	movs	r2, #64	; 0x40
 8007a68:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a6c:	2340      	movs	r3, #64	; 0x40
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2180      	movs	r1, #128	; 0x80
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f00c fe47 	bl	8014706 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2240      	movs	r2, #64	; 0x40
 8007a82:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6852      	ldr	r2, [r2, #4]
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	4611      	mov	r1, r2
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
  }

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2204      	movs	r2, #4
 8007b02:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d10b      	bne.n	8007b60 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6852      	ldr	r2, [r2, #4]
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d004      	beq.n	8007c08 <USBD_StdDevReq+0x24>
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d002      	beq.n	8007c08 <USBD_StdDevReq+0x24>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d008      	beq.n	8007c18 <USBD_StdDevReq+0x34>
 8007c06:	e04c      	b.n	8007ca2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
    break;
 8007c16:	e049      	b.n	8007cac <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2b09      	cmp	r3, #9
 8007c1e:	d83a      	bhi.n	8007c96 <USBD_StdDevReq+0xb2>
 8007c20:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <USBD_StdDevReq+0x44>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c79 	.word	0x08007c79
 8007c2c:	08007c8d 	.word	0x08007c8d
 8007c30:	08007c97 	.word	0x08007c97
 8007c34:	08007c83 	.word	0x08007c83
 8007c38:	08007c97 	.word	0x08007c97
 8007c3c:	08007c5b 	.word	0x08007c5b
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c97 	.word	0x08007c97
 8007c48:	08007c6f 	.word	0x08007c6f
 8007c4c:	08007c65 	.word	0x08007c65
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f9d2 	bl	8007ffc <USBD_GetDescriptor>
      break;
 8007c58:	e022      	b.n	8007ca0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fac7 	bl	80081f0 <USBD_SetAddress>
      break;
 8007c62:	e01d      	b.n	8007ca0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb04 	bl	8008274 <USBD_SetConfig>
      break;
 8007c6c:	e018      	b.n	8007ca0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fb8d 	bl	8008390 <USBD_GetConfig>
      break;
 8007c76:	e013      	b.n	8007ca0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fbbc 	bl	80083f8 <USBD_GetStatus>
      break;
 8007c80:	e00e      	b.n	8007ca0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fbea 	bl	800845e <USBD_SetFeature>
      break;
 8007c8a:	e009      	b.n	8007ca0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fbf9 	bl	8008486 <USBD_ClrFeature>
      break;
 8007c94:	e004      	b.n	8007ca0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fc52 	bl	8008542 <USBD_CtlError>
      break;
 8007c9e:	bf00      	nop
    }
    break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fc4c 	bl	8008542 <USBD_CtlError>
    break;
 8007caa:	bf00      	nop
  }

  return ret;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop

08007cb8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	d003      	beq.n	8007cda <USBD_StdItfReq+0x22>
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d001      	beq.n	8007cda <USBD_StdItfReq+0x22>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d12a      	bne.n	8007d30 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d81d      	bhi.n	8007d22 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	889b      	ldrh	r3, [r3, #4]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d813      	bhi.n	8007d18 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d110      	bne.n	8007d2c <USBD_StdItfReq+0x74>
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fcdf 	bl	80086d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007d16:	e009      	b.n	8007d2c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fc11 	bl	8008542 <USBD_CtlError>
      break;
 8007d20:	e004      	b.n	8007d2c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc0c 	bl	8008542 <USBD_CtlError>
      break;
 8007d2a:	e000      	b.n	8007d2e <USBD_StdItfReq+0x76>
      break;
 8007d2c:	bf00      	nop
    }
    break;
 8007d2e:	e004      	b.n	8007d3a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fc05 	bl	8008542 <USBD_CtlError>
    break;
 8007d38:	bf00      	nop
  }

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	889b      	ldrh	r3, [r3, #4]
 8007d56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d004      	beq.n	8007d6e <USBD_StdEPReq+0x2a>
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	d002      	beq.n	8007d6e <USBD_StdEPReq+0x2a>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <USBD_StdEPReq+0x3a>
 8007d6c:	e13b      	b.n	8007fe6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
    break;
 8007d7c:	e138      	b.n	8007ff0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d10a      	bne.n	8007da0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	e128      	b.n	8007ff2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	785b      	ldrb	r3, [r3, #1]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d03e      	beq.n	8007e26 <USBD_StdEPReq+0xe2>
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d002      	beq.n	8007db2 <USBD_StdEPReq+0x6e>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d070      	beq.n	8007e92 <USBD_StdEPReq+0x14e>
 8007db0:	e113      	b.n	8007fda <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d002      	beq.n	8007dc2 <USBD_StdEPReq+0x7e>
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d015      	beq.n	8007dec <USBD_StdEPReq+0xa8>
 8007dc0:	e02b      	b.n	8007e1a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00c      	beq.n	8007de2 <USBD_StdEPReq+0x9e>
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b80      	cmp	r3, #128	; 0x80
 8007dcc:	d009      	beq.n	8007de2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f00c fcdc 	bl	8014790 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007dd8:	2180      	movs	r1, #128	; 0x80
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f00c fcd8 	bl	8014790 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007de0:	e020      	b.n	8007e24 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fbac 	bl	8008542 <USBD_CtlError>
        break;
 8007dea:	e01b      	b.n	8007e24 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	885b      	ldrh	r3, [r3, #2]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10e      	bne.n	8007e12 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <USBD_StdEPReq+0xce>
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b80      	cmp	r3, #128	; 0x80
 8007dfe:	d008      	beq.n	8007e12 <USBD_StdEPReq+0xce>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	88db      	ldrh	r3, [r3, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f00c fcbf 	bl	8014790 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fc5e 	bl	80086d4 <USBD_CtlSendStatus>

        break;
 8007e18:	e004      	b.n	8007e24 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fb90 	bl	8008542 <USBD_CtlError>
        break;
 8007e22:	bf00      	nop
      }
      break;
 8007e24:	e0de      	b.n	8007fe4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d002      	beq.n	8007e36 <USBD_StdEPReq+0xf2>
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d015      	beq.n	8007e60 <USBD_StdEPReq+0x11c>
 8007e34:	e026      	b.n	8007e84 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00c      	beq.n	8007e56 <USBD_StdEPReq+0x112>
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d009      	beq.n	8007e56 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f00c fca2 	bl	8014790 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f00c fc9e 	bl	8014790 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007e54:	e01c      	b.n	8007e90 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fb72 	bl	8008542 <USBD_CtlError>
        break;
 8007e5e:	e017      	b.n	8007e90 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d112      	bne.n	8007e8e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f00c fca9 	bl	80147ce <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc29 	bl	80086d4 <USBD_CtlSendStatus>
        }
        break;
 8007e82:	e004      	b.n	8007e8e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fb5b 	bl	8008542 <USBD_CtlError>
        break;
 8007e8c:	e000      	b.n	8007e90 <USBD_StdEPReq+0x14c>
        break;
 8007e8e:	bf00      	nop
      }
      break;
 8007e90:	e0a8      	b.n	8007fe4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d002      	beq.n	8007ea2 <USBD_StdEPReq+0x15e>
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d031      	beq.n	8007f04 <USBD_StdEPReq+0x1c0>
 8007ea0:	e095      	b.n	8007fce <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <USBD_StdEPReq+0x174>
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d004      	beq.n	8007eb8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb46 	bl	8008542 <USBD_CtlError>
          break;
 8007eb6:	e08f      	b.n	8007fd8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da0b      	bge.n	8007ed8 <USBD_StdEPReq+0x194>
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	3310      	adds	r3, #16
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	e00a      	b.n	8007eee <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	4413      	add	r3, r2
 8007eee:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb8b 	bl	8008618 <USBD_CtlSendData>
          break;
 8007f02:	e069      	b.n	8007fd8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da11      	bge.n	8007f30 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	f003 020f 	and.w	r2, r3, #15
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	3318      	adds	r3, #24
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d117      	bne.n	8007f56 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb0a 	bl	8008542 <USBD_CtlError>
            break;
 8007f2e:	e053      	b.n	8007fd8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	f003 020f 	and.w	r2, r3, #15
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 faf7 	bl	8008542 <USBD_CtlError>
            break;
 8007f54:	e040      	b.n	8007fd8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	da0b      	bge.n	8007f76 <USBD_StdEPReq+0x232>
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f64:	4613      	mov	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	3310      	adds	r3, #16
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	4413      	add	r3, r2
 8007f72:	3304      	adds	r3, #4
 8007f74:	e00a      	b.n	8007f8c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <USBD_StdEPReq+0x256>
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b80      	cmp	r3, #128	; 0x80
 8007f98:	d103      	bne.n	8007fa2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	e00e      	b.n	8007fc0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f00c fc30 	bl	801480c <USBD_LL_IsStallEP>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	e002      	b.n	8007fc0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fb26 	bl	8008618 <USBD_CtlSendData>
          break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fab6 	bl	8008542 <USBD_CtlError>
        break;
 8007fd6:	bf00      	nop
      }
      break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fab0 	bl	8008542 <USBD_CtlError>
      break;
 8007fe2:	bf00      	nop
    }
    break;
 8007fe4:	e004      	b.n	8007ff0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 faaa 	bl	8008542 <USBD_CtlError>
    break;
 8007fee:	bf00      	nop
  }

  return ret;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	b29b      	uxth	r3, r3
 800800e:	3b01      	subs	r3, #1
 8008010:	2b06      	cmp	r3, #6
 8008012:	f200 80c9 	bhi.w	80081a8 <USBD_GetDescriptor+0x1ac>
 8008016:	a201      	add	r2, pc, #4	; (adr r2, 800801c <USBD_GetDescriptor+0x20>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008039 	.word	0x08008039
 8008020:	08008051 	.word	0x08008051
 8008024:	08008091 	.word	0x08008091
 8008028:	080081a9 	.word	0x080081a9
 800802c:	080081a9 	.word	0x080081a9
 8008030:	08008155 	.word	0x08008155
 8008034:	0800817b 	.word	0x0800817b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7c12      	ldrb	r2, [r2, #16]
 8008044:	f107 010a 	add.w	r1, r7, #10
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	60f8      	str	r0, [r7, #12]
    break;
 800804e:	e0b0      	b.n	80081b2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7c1b      	ldrb	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10d      	bne.n	8008074 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	f107 020a 	add.w	r2, r7, #10
 8008064:	4610      	mov	r0, r2
 8008066:	4798      	blx	r3
 8008068:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	2202      	movs	r2, #2
 8008070:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008072:	e09e      	b.n	80081b2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	f107 020a 	add.w	r2, r7, #10
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	2202      	movs	r2, #2
 800808c:	701a      	strb	r2, [r3, #0]
    break;
 800808e:	e090      	b.n	80081b2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b05      	cmp	r3, #5
 8008098:	d856      	bhi.n	8008148 <USBD_GetDescriptor+0x14c>
 800809a:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <USBD_GetDescriptor+0xa4>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080b9 	.word	0x080080b9
 80080a4:	080080d1 	.word	0x080080d1
 80080a8:	080080e9 	.word	0x080080e9
 80080ac:	08008101 	.word	0x08008101
 80080b0:	08008119 	.word	0x08008119
 80080b4:	08008131 	.word	0x08008131
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 010a 	add.w	r1, r7, #10
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
      break;
 80080ce:	e040      	b.n	8008152 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	7c12      	ldrb	r2, [r2, #16]
 80080dc:	f107 010a 	add.w	r1, r7, #10
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	60f8      	str	r0, [r7, #12]
      break;
 80080e6:	e034      	b.n	8008152 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	7c12      	ldrb	r2, [r2, #16]
 80080f4:	f107 010a 	add.w	r1, r7, #10
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
      break;
 80080fe:	e028      	b.n	8008152 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	7c12      	ldrb	r2, [r2, #16]
 800810c:	f107 010a 	add.w	r1, r7, #10
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
      break;
 8008116:	e01c      	b.n	8008152 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	7c12      	ldrb	r2, [r2, #16]
 8008124:	f107 010a 	add.w	r1, r7, #10
 8008128:	4610      	mov	r0, r2
 800812a:	4798      	blx	r3
 800812c:	60f8      	str	r0, [r7, #12]
      break;
 800812e:	e010      	b.n	8008152 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	7c12      	ldrb	r2, [r2, #16]
 800813c:	f107 010a 	add.w	r1, r7, #10
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	60f8      	str	r0, [r7, #12]
      break;
 8008146:	e004      	b.n	8008152 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f9f9 	bl	8008542 <USBD_CtlError>
      return;
 8008150:	e04b      	b.n	80081ea <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008152:	e02e      	b.n	80081b2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7c1b      	ldrb	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d109      	bne.n	8008170 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008164:	f107 020a 	add.w	r2, r7, #10
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3
 800816c:	60f8      	str	r0, [r7, #12]
      break;
 800816e:	e020      	b.n	80081b2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f9e5 	bl	8008542 <USBD_CtlError>
      return;
 8008178:	e037      	b.n	80081ea <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7c1b      	ldrb	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10d      	bne.n	800819e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	f107 020a 	add.w	r2, r7, #10
 800818e:	4610      	mov	r0, r2
 8008190:	4798      	blx	r3
 8008192:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3301      	adds	r3, #1
 8008198:	2207      	movs	r2, #7
 800819a:	701a      	strb	r2, [r3, #0]
      break;
 800819c:	e009      	b.n	80081b2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f9ce 	bl	8008542 <USBD_CtlError>
      return;
 80081a6:	e020      	b.n	80081ea <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f9c9 	bl	8008542 <USBD_CtlError>
    return;
 80081b0:	e01b      	b.n	80081ea <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80081b2:	897b      	ldrh	r3, [r7, #10]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d011      	beq.n	80081dc <USBD_GetDescriptor+0x1e0>
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	88db      	ldrh	r3, [r3, #6]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00d      	beq.n	80081dc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	88da      	ldrh	r2, [r3, #6]
 80081c4:	897b      	ldrh	r3, [r7, #10]
 80081c6:	4293      	cmp	r3, r2
 80081c8:	bf28      	it	cs
 80081ca:	4613      	movcs	r3, r2
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80081d0:	897b      	ldrh	r3, [r7, #10]
 80081d2:	461a      	mov	r2, r3
 80081d4:	68f9      	ldr	r1, [r7, #12]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa1e 	bl	8008618 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	88db      	ldrh	r3, [r3, #6]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fa75 	bl	80086d4 <USBD_CtlSendStatus>
  }
}
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	889b      	ldrh	r3, [r3, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d130      	bne.n	8008264 <USBD_SetAddress+0x74>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	88db      	ldrh	r3, [r3, #6]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d12c      	bne.n	8008264 <USBD_SetAddress+0x74>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	2b7f      	cmp	r3, #127	; 0x7f
 8008210:	d828      	bhi.n	8008264 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	885b      	ldrh	r3, [r3, #2]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008224:	2b03      	cmp	r3, #3
 8008226:	d104      	bne.n	8008232 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f989 	bl	8008542 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008230:	e01c      	b.n	800826c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7bfa      	ldrb	r2, [r7, #15]
 8008236:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f00c fb10 	bl	8014864 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fa45 	bl	80086d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008258:	e008      	b.n	800826c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008262:	e003      	b.n	800826c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f96b 	bl	8008542 <USBD_CtlError>
  }
}
 800826c:	bf00      	nop
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	b2da      	uxtb	r2, r3
 8008284:	4b41      	ldr	r3, [pc, #260]	; (800838c <USBD_SetConfig+0x118>)
 8008286:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008288:	4b40      	ldr	r3, [pc, #256]	; (800838c <USBD_SetConfig+0x118>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d904      	bls.n	800829a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f955 	bl	8008542 <USBD_CtlError>
 8008298:	e075      	b.n	8008386 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d002      	beq.n	80082aa <USBD_SetConfig+0x36>
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d023      	beq.n	80082f0 <USBD_SetConfig+0x7c>
 80082a8:	e062      	b.n	8008370 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80082aa:	4b38      	ldr	r3, [pc, #224]	; (800838c <USBD_SetConfig+0x118>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d01a      	beq.n	80082e8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80082b2:	4b36      	ldr	r3, [pc, #216]	; (800838c <USBD_SetConfig+0x118>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2203      	movs	r2, #3
 80082c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082c4:	4b31      	ldr	r3, [pc, #196]	; (800838c <USBD_SetConfig+0x118>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff fa29 	bl	8007722 <USBD_SetClassConfig>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d104      	bne.n	80082e0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f932 	bl	8008542 <USBD_CtlError>
          return;
 80082de:	e052      	b.n	8008386 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f9f7 	bl	80086d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80082e6:	e04e      	b.n	8008386 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f9f3 	bl	80086d4 <USBD_CtlSendStatus>
      break;
 80082ee:	e04a      	b.n	8008386 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082f0:	4b26      	ldr	r3, [pc, #152]	; (800838c <USBD_SetConfig+0x118>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d112      	bne.n	800831e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008300:	4b22      	ldr	r3, [pc, #136]	; (800838c <USBD_SetConfig+0x118>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800830a:	4b20      	ldr	r3, [pc, #128]	; (800838c <USBD_SetConfig+0x118>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff fa25 	bl	8007760 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f9dc 	bl	80086d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800831c:	e033      	b.n	8008386 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800831e:	4b1b      	ldr	r3, [pc, #108]	; (800838c <USBD_SetConfig+0x118>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	429a      	cmp	r2, r3
 800832a:	d01d      	beq.n	8008368 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff fa13 	bl	8007760 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800833a:	4b14      	ldr	r3, [pc, #80]	; (800838c <USBD_SetConfig+0x118>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008344:	4b11      	ldr	r3, [pc, #68]	; (800838c <USBD_SetConfig+0x118>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff f9e9 	bl	8007722 <USBD_SetClassConfig>
 8008350:	4603      	mov	r3, r0
 8008352:	2b02      	cmp	r3, #2
 8008354:	d104      	bne.n	8008360 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f8f2 	bl	8008542 <USBD_CtlError>
          return;
 800835e:	e012      	b.n	8008386 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f9b7 	bl	80086d4 <USBD_CtlSendStatus>
      break;
 8008366:	e00e      	b.n	8008386 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f9b3 	bl	80086d4 <USBD_CtlSendStatus>
      break;
 800836e:	e00a      	b.n	8008386 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f8e5 	bl	8008542 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <USBD_SetConfig+0x118>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff f9ee 	bl	8007760 <USBD_ClrClassConfig>
      break;
 8008384:	bf00      	nop
    }
  }
}
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	2000045c 	.word	0x2000045c

08008390 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	88db      	ldrh	r3, [r3, #6]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d004      	beq.n	80083ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f8cc 	bl	8008542 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80083aa:	e021      	b.n	80083f0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	db17      	blt.n	80083e6 <USBD_GetConfig+0x56>
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	dd02      	ble.n	80083c0 <USBD_GetConfig+0x30>
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d00b      	beq.n	80083d6 <USBD_GetConfig+0x46>
 80083be:	e012      	b.n	80083e6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3308      	adds	r3, #8
 80083ca:	2201      	movs	r2, #1
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f922 	bl	8008618 <USBD_CtlSendData>
      break;
 80083d4:	e00c      	b.n	80083f0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3304      	adds	r3, #4
 80083da:	2201      	movs	r2, #1
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f91a 	bl	8008618 <USBD_CtlSendData>
      break;
 80083e4:	e004      	b.n	80083f0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f8aa 	bl	8008542 <USBD_CtlError>
      break;
 80083ee:	bf00      	nop
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008408:	3b01      	subs	r3, #1
 800840a:	2b02      	cmp	r3, #2
 800840c:	d81e      	bhi.n	800844c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	88db      	ldrh	r3, [r3, #6]
 8008412:	2b02      	cmp	r3, #2
 8008414:	d004      	beq.n	8008420 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f892 	bl	8008542 <USBD_CtlError>
      break;
 800841e:	e01a      	b.n	8008456 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f043 0202 	orr.w	r2, r3, #2
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	330c      	adds	r3, #12
 8008440:	2202      	movs	r2, #2
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f8e7 	bl	8008618 <USBD_CtlSendData>
    break;
 800844a:	e004      	b.n	8008456 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f877 	bl	8008542 <USBD_CtlError>
    break;
 8008454:	bf00      	nop
  }
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	885b      	ldrh	r3, [r3, #2]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d106      	bne.n	800847e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f92b 	bl	80086d4 <USBD_CtlSendStatus>
  }

}
 800847e:	bf00      	nop
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008496:	3b01      	subs	r3, #1
 8008498:	2b02      	cmp	r3, #2
 800849a:	d80b      	bhi.n	80084b4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	885b      	ldrh	r3, [r3, #2]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d10c      	bne.n	80084be <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f911 	bl	80086d4 <USBD_CtlSendStatus>
    }
    break;
 80084b2:	e004      	b.n	80084be <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f843 	bl	8008542 <USBD_CtlError>
    break;
 80084bc:	e000      	b.n	80084c0 <USBD_ClrFeature+0x3a>
    break;
 80084be:	bf00      	nop
  }
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781a      	ldrb	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	785a      	ldrb	r2, [r3, #1]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	3302      	adds	r3, #2
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	3303      	adds	r3, #3
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	4413      	add	r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	3304      	adds	r3, #4
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	3305      	adds	r3, #5
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	021b      	lsls	r3, r3, #8
 8008510:	b29b      	uxth	r3, r3
 8008512:	4413      	add	r3, r2
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	3306      	adds	r3, #6
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b29a      	uxth	r2, r3
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	3307      	adds	r3, #7
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	b29b      	uxth	r3, r3
 800852e:	4413      	add	r3, r2
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	80da      	strh	r2, [r3, #6]

}
 8008536:	bf00      	nop
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800854c:	2180      	movs	r1, #128	; 0x80
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f00c f91e 	bl	8014790 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008554:	2100      	movs	r1, #0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f00c f91a 	bl	8014790 <USBD_LL_StallEP>
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d032      	beq.n	80085e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f834 	bl	80085e8 <USBD_GetLen>
 8008580:	4603      	mov	r3, r0
 8008582:	3301      	adds	r3, #1
 8008584:	b29b      	uxth	r3, r3
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	75fa      	strb	r2, [r7, #23]
 8008594:	461a      	mov	r2, r3
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4413      	add	r3, r2
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	7812      	ldrb	r2, [r2, #0]
 800859e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	75fa      	strb	r2, [r7, #23]
 80085a6:	461a      	mov	r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4413      	add	r3, r2
 80085ac:	2203      	movs	r2, #3
 80085ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80085b0:	e012      	b.n	80085d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	60fa      	str	r2, [r7, #12]
 80085b8:	7dfa      	ldrb	r2, [r7, #23]
 80085ba:	1c51      	adds	r1, r2, #1
 80085bc:	75f9      	strb	r1, [r7, #23]
 80085be:	4611      	mov	r1, r2
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	440a      	add	r2, r1
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	75fa      	strb	r2, [r7, #23]
 80085ce:	461a      	mov	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4413      	add	r3, r2
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e8      	bne.n	80085b2 <USBD_GetString+0x4e>
    }
  }
}
 80085e0:	bf00      	nop
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80085f4:	e005      	b.n	8008602 <USBD_GetLen+0x1a>
    {
        len++;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	3301      	adds	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
        buf++;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3301      	adds	r3, #1
 8008600:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f5      	bne.n	80085f6 <USBD_GetLen+0xe>
    }

    return len;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2202      	movs	r2, #2
 800862a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800862e:	88fa      	ldrh	r2, [r7, #6]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	2100      	movs	r1, #0
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f00c f92e 	bl	80148a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	2100      	movs	r1, #0
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f00c f91c 	bl	80148a2 <USBD_LL_Transmit>

  return USBD_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2203      	movs	r2, #3
 8008686:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800868a:	88fa      	ldrh	r2, [r7, #6]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008692:	88fa      	ldrh	r2, [r7, #6]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800869a:	88fb      	ldrh	r3, [r7, #6]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	2100      	movs	r1, #0
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f00c f921 	bl	80148e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086be:	88fb      	ldrh	r3, [r7, #6]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	2100      	movs	r1, #0
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f00c f90f 	bl	80148e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2204      	movs	r2, #4
 80086e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086e4:	2300      	movs	r3, #0
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f00c f8d9 	bl	80148a2 <USBD_LL_Transmit>

  return USBD_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2205      	movs	r2, #5
 8008706:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800870a:	2300      	movs	r3, #0
 800870c:	2200      	movs	r2, #0
 800870e:	2100      	movs	r1, #0
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f00c f8e9 	bl	80148e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800872e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008732:	2b84      	cmp	r3, #132	; 0x84
 8008734:	d005      	beq.n	8008742 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008736:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4413      	add	r3, r2
 800873e:	3303      	adds	r3, #3
 8008740:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008742:	68fb      	ldr	r3, [r7, #12]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008756:	f3ef 8305 	mrs	r3, IPSR
 800875a:	607b      	str	r3, [r7, #4]
  return(result);
 800875c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800875e:	2b00      	cmp	r3, #0
 8008760:	bf14      	ite	ne
 8008762:	2301      	movne	r3, #1
 8008764:	2300      	moveq	r3, #0
 8008766:	b2db      	uxtb	r3, r3
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008778:	f001 fc3a 	bl	8009ff0 <vTaskStartScheduler>
  
  return osOK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	bd80      	pop	{r7, pc}

08008782 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008786:	f7ff ffe3 	bl	8008750 <inHandlerMode>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008790:	f001 fd46 	bl	800a220 <xTaskGetTickCountFromISR>
 8008794:	4603      	mov	r3, r0
 8008796:	e002      	b.n	800879e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008798:	f001 fd32 	bl	800a200 <xTaskGetTickCount>
 800879c:	4603      	mov	r3, r0
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80087a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a4:	b089      	sub	sp, #36	; 0x24
 80087a6:	af04      	add	r7, sp, #16
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d020      	beq.n	80087f6 <osThreadCreate+0x54>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01c      	beq.n	80087f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685c      	ldr	r4, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681d      	ldr	r5, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691e      	ldr	r6, [r3, #16]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff ffa6 	bl	8008720 <makeFreeRtosPriority>
 80087d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087de:	9202      	str	r2, [sp, #8]
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	9100      	str	r1, [sp, #0]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	4632      	mov	r2, r6
 80087e8:	4629      	mov	r1, r5
 80087ea:	4620      	mov	r0, r4
 80087ec:	f001 fa45 	bl	8009c7a <xTaskCreateStatic>
 80087f0:	4603      	mov	r3, r0
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	e01c      	b.n	8008830 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685c      	ldr	r4, [r3, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008802:	b29e      	uxth	r6, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff ff88 	bl	8008720 <makeFreeRtosPriority>
 8008810:	4602      	mov	r2, r0
 8008812:	f107 030c 	add.w	r3, r7, #12
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	9200      	str	r2, [sp, #0]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	4632      	mov	r2, r6
 800881e:	4629      	mov	r1, r5
 8008820:	4620      	mov	r0, r4
 8008822:	f001 fa83 	bl	8009d2c <xTaskCreate>
 8008826:	4603      	mov	r3, r0
 8008828:	2b01      	cmp	r3, #1
 800882a:	d001      	beq.n	8008830 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800882c:	2300      	movs	r3, #0
 800882e:	e000      	b.n	8008832 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008830:	68fb      	ldr	r3, [r7, #12]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800883a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <osDelay+0x16>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	e000      	b.n	8008852 <osDelay+0x18>
 8008850:	2301      	movs	r3, #1
 8008852:	4618      	mov	r0, r3
 8008854:	f001 fb98 	bl	8009f88 <vTaskDelay>
  
  return osOK;
 8008858:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d007      	beq.n	8008882 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	4619      	mov	r1, r3
 8008878:	2001      	movs	r0, #1
 800887a:	f000 fc41 	bl	8009100 <xQueueCreateMutexStatic>
 800887e:	4603      	mov	r3, r0
 8008880:	e003      	b.n	800888a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008882:	2001      	movs	r0, #1
 8008884:	f000 fc24 	bl	80090d0 <xQueueCreateMutex>
 8008888:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800889e:	2300      	movs	r3, #0
 80088a0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <osMutexWait+0x18>
    return osErrorParameter;
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	e03a      	b.n	8008922 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088b6:	d103      	bne.n	80088c0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	e009      	b.n	80088d4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d006      	beq.n	80088d4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <osMutexWait+0x40>
      ticks = 1;
 80088d0:	2301      	movs	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80088d4:	f7ff ff3c 	bl	8008750 <inHandlerMode>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d017      	beq.n	800890e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80088de:	f107 0308 	add.w	r3, r7, #8
 80088e2:	461a      	mov	r2, r3
 80088e4:	2100      	movs	r1, #0
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 f822 	bl	8009930 <xQueueReceiveFromISR>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d001      	beq.n	80088f6 <osMutexWait+0x62>
      return osErrorOS;
 80088f2:	23ff      	movs	r3, #255	; 0xff
 80088f4:	e015      	b.n	8008922 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d011      	beq.n	8008920 <osMutexWait+0x8c>
 80088fc:	4b0b      	ldr	r3, [pc, #44]	; (800892c <osMutexWait+0x98>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	e008      	b.n	8008920 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 ff05 	bl	8009720 <xQueueSemaphoreTake>
 8008916:	4603      	mov	r3, r0
 8008918:	2b01      	cmp	r3, #1
 800891a:	d001      	beq.n	8008920 <osMutexWait+0x8c>
    return osErrorOS;
 800891c:	23ff      	movs	r3, #255	; 0xff
 800891e:	e000      	b.n	8008922 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	e000ed04 	.word	0xe000ed04

08008930 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008940:	f7ff ff06 	bl	8008750 <inHandlerMode>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d016      	beq.n	8008978 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800894a:	f107 0308 	add.w	r3, r7, #8
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fd7f 	bl	8009454 <xQueueGiveFromISR>
 8008956:	4603      	mov	r3, r0
 8008958:	2b01      	cmp	r3, #1
 800895a:	d001      	beq.n	8008960 <osMutexRelease+0x30>
      return osErrorOS;
 800895c:	23ff      	movs	r3, #255	; 0xff
 800895e:	e017      	b.n	8008990 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d013      	beq.n	800898e <osMutexRelease+0x5e>
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <osMutexRelease+0x68>)
 8008968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	e00a      	b.n	800898e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008978:	2300      	movs	r3, #0
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fbda 	bl	8009138 <xQueueGenericSend>
 8008984:	4603      	mov	r3, r0
 8008986:	2b01      	cmp	r3, #1
 8008988:	d001      	beq.n	800898e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800898a:	23ff      	movs	r3, #255	; 0xff
 800898c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800898e:	68fb      	ldr	r3, [r7, #12]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af02      	add	r7, sp, #8
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d010      	beq.n	80089d0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d10b      	bne.n	80089cc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	2303      	movs	r3, #3
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4613      	mov	r3, r2
 80089be:	2200      	movs	r2, #0
 80089c0:	2100      	movs	r1, #0
 80089c2:	2001      	movs	r0, #1
 80089c4:	f000 fa9c 	bl	8008f00 <xQueueGenericCreateStatic>
 80089c8:	4603      	mov	r3, r0
 80089ca:	e016      	b.n	80089fa <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80089cc:	2300      	movs	r3, #0
 80089ce:	e014      	b.n	80089fa <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d110      	bne.n	80089f8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80089d6:	2203      	movs	r2, #3
 80089d8:	2100      	movs	r1, #0
 80089da:	2001      	movs	r0, #1
 80089dc:	f000 fb02 	bl	8008fe4 <xQueueGenericCreate>
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <osSemaphoreCreate+0x58>
 80089e8:	2300      	movs	r3, #0
 80089ea:	2200      	movs	r2, #0
 80089ec:	2100      	movs	r1, #0
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fba2 	bl	8009138 <xQueueGenericSend>
      return sema;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	e000      	b.n	80089fa <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80089f8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008a18:	2380      	movs	r3, #128	; 0x80
 8008a1a:	e03a      	b.n	8008a92 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a26:	d103      	bne.n	8008a30 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	e009      	b.n	8008a44 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d006      	beq.n	8008a44 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <osSemaphoreWait+0x40>
      ticks = 1;
 8008a40:	2301      	movs	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008a44:	f7ff fe84 	bl	8008750 <inHandlerMode>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d017      	beq.n	8008a7e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008a4e:	f107 0308 	add.w	r3, r7, #8
 8008a52:	461a      	mov	r2, r3
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 ff6a 	bl	8009930 <xQueueReceiveFromISR>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d001      	beq.n	8008a66 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008a62:	23ff      	movs	r3, #255	; 0xff
 8008a64:	e015      	b.n	8008a92 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d011      	beq.n	8008a90 <osSemaphoreWait+0x8c>
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <osSemaphoreWait+0x98>)
 8008a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	e008      	b.n	8008a90 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fe4d 	bl	8009720 <xQueueSemaphoreTake>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d001      	beq.n	8008a90 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008a8c:	23ff      	movs	r3, #255	; 0xff
 8008a8e:	e000      	b.n	8008a92 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	e000ed04 	.word	0xe000ed04

08008aa0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008ab0:	f7ff fe4e 	bl	8008750 <inHandlerMode>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d016      	beq.n	8008ae8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fcc7 	bl	8009454 <xQueueGiveFromISR>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d001      	beq.n	8008ad0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008acc:	23ff      	movs	r3, #255	; 0xff
 8008ace:	e017      	b.n	8008b00 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d013      	beq.n	8008afe <osSemaphoreRelease+0x5e>
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	; (8008b08 <osSemaphoreRelease+0x68>)
 8008ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	e00a      	b.n	8008afe <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008ae8:	2300      	movs	r3, #0
 8008aea:	2200      	movs	r2, #0
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fb22 	bl	8009138 <xQueueGenericSend>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d001      	beq.n	8008afe <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008afa:	23ff      	movs	r3, #255	; 0xff
 8008afc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008afe:	68fb      	ldr	r3, [r7, #12]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008b0c:	b590      	push	{r4, r7, lr}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d012      	beq.n	8008b44 <osMessageCreate+0x38>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00e      	beq.n	8008b44 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6859      	ldr	r1, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68dc      	ldr	r4, [r3, #12]
 8008b36:	2300      	movs	r3, #0
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	4623      	mov	r3, r4
 8008b3c:	f000 f9e0 	bl	8008f00 <xQueueGenericCreateStatic>
 8008b40:	4603      	mov	r3, r0
 8008b42:	e008      	b.n	8008b56 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f000 fa48 	bl	8008fe4 <xQueueGenericCreate>
 8008b54:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd90      	pop	{r4, r7, pc}
	...

08008b60 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <osMessagePut+0x1e>
    ticks = 1;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008b7e:	f7ff fde7 	bl	8008750 <inHandlerMode>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d018      	beq.n	8008bba <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008b88:	f107 0210 	add.w	r2, r7, #16
 8008b8c:	f107 0108 	add.w	r1, r7, #8
 8008b90:	2300      	movs	r3, #0
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fbca 	bl	800932c <xQueueGenericSendFromISR>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d001      	beq.n	8008ba2 <osMessagePut+0x42>
      return osErrorOS;
 8008b9e:	23ff      	movs	r3, #255	; 0xff
 8008ba0:	e018      	b.n	8008bd4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d014      	beq.n	8008bd2 <osMessagePut+0x72>
 8008ba8:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <osMessagePut+0x7c>)
 8008baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	e00b      	b.n	8008bd2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008bba:	f107 0108 	add.w	r1, r7, #8
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 fab8 	bl	8009138 <xQueueGenericSend>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d001      	beq.n	8008bd2 <osMessagePut+0x72>
      return osErrorOS;
 8008bce:	23ff      	movs	r3, #255	; 0xff
 8008bd0:	e000      	b.n	8008bd4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	e000ed04 	.word	0xe000ed04

08008be0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008be0:	b590      	push	{r4, r7, lr}
 8008be2:	b08b      	sub	sp, #44	; 0x2c
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008bfa:	2380      	movs	r3, #128	; 0x80
 8008bfc:	617b      	str	r3, [r7, #20]
    return event;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	461c      	mov	r4, r3
 8008c02:	f107 0314 	add.w	r3, r7, #20
 8008c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c0e:	e054      	b.n	8008cba <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008c10:	2300      	movs	r3, #0
 8008c12:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c1e:	d103      	bne.n	8008c28 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
 8008c26:	e009      	b.n	8008c3c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d006      	beq.n	8008c3c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <osMessageGet+0x5c>
      ticks = 1;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008c3c:	f7ff fd88 	bl	8008750 <inHandlerMode>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d01c      	beq.n	8008c80 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008c46:	f107 0220 	add.w	r2, r7, #32
 8008c4a:	f107 0314 	add.w	r3, r7, #20
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4619      	mov	r1, r3
 8008c52:	68b8      	ldr	r0, [r7, #8]
 8008c54:	f000 fe6c 	bl	8009930 <xQueueReceiveFromISR>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d102      	bne.n	8008c64 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008c5e:	2310      	movs	r3, #16
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	e001      	b.n	8008c68 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d01d      	beq.n	8008caa <osMessageGet+0xca>
 8008c6e:	4b15      	ldr	r3, [pc, #84]	; (8008cc4 <osMessageGet+0xe4>)
 8008c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	e014      	b.n	8008caa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008c80:	f107 0314 	add.w	r3, r7, #20
 8008c84:	3304      	adds	r3, #4
 8008c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c88:	4619      	mov	r1, r3
 8008c8a:	68b8      	ldr	r0, [r7, #8]
 8008c8c:	f000 fc6c 	bl	8009568 <xQueueReceive>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d102      	bne.n	8008c9c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008c96:	2310      	movs	r3, #16
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e006      	b.n	8008caa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <osMessageGet+0xc6>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <osMessageGet+0xc8>
 8008ca6:	2340      	movs	r3, #64	; 0x40
 8008ca8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	461c      	mov	r4, r3
 8008cae:	f107 0314 	add.w	r3, r7, #20
 8008cb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	372c      	adds	r7, #44	; 0x2c
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd90      	pop	{r4, r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	e000ed04 	.word	0xe000ed04

08008cc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f103 0208 	add.w	r2, r3, #8
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f103 0208 	add.w	r2, r3, #8
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f103 0208 	add.w	r2, r3, #8
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	601a      	str	r2, [r3, #0]
}
 8008d5e:	bf00      	nop
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d80:	d103      	bne.n	8008d8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	e00c      	b.n	8008da4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e002      	b.n	8008d98 <vListInsert+0x2e>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d2f6      	bcs.n	8008d92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	601a      	str	r2, [r3, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6892      	ldr	r2, [r2, #8]
 8008df2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6852      	ldr	r2, [r2, #4]
 8008dfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d103      	bne.n	8008e10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	1e5a      	subs	r2, r3, #1
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	60bb      	str	r3, [r7, #8]
 8008e56:	e7fe      	b.n	8008e56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008e58:	f002 f850 	bl	800aefc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e64:	68f9      	ldr	r1, [r7, #12]
 8008e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e68:	fb01 f303 	mul.w	r3, r1, r3
 8008e6c:	441a      	add	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	68f9      	ldr	r1, [r7, #12]
 8008e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e8e:	fb01 f303 	mul.w	r3, r1, r3
 8008e92:	441a      	add	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	22ff      	movs	r2, #255	; 0xff
 8008e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d114      	bne.n	8008ed8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01a      	beq.n	8008eec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3310      	adds	r3, #16
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f001 fafc 	bl	800a4b8 <xTaskRemoveFromEventList>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d012      	beq.n	8008eec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <xQueueGenericReset+0xcc>)
 8008ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	e009      	b.n	8008eec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3310      	adds	r3, #16
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff fef3 	bl	8008cc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3324      	adds	r3, #36	; 0x24
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff feee 	bl	8008cc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008eec:	f002 f834 	bl	800af58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ef0:	2301      	movs	r3, #1
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	e000ed04 	.word	0xe000ed04

08008f00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08e      	sub	sp, #56	; 0x38
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <xQueueGenericCreateStatic+0x28>
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f26:	e7fe      	b.n	8008f26 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d109      	bne.n	8008f42 <xQueueGenericCreateStatic+0x42>
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f40:	e7fe      	b.n	8008f40 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <xQueueGenericCreateStatic+0x4e>
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <xQueueGenericCreateStatic+0x52>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <xQueueGenericCreateStatic+0x54>
 8008f52:	2300      	movs	r3, #0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <xQueueGenericCreateStatic+0x6c>
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	623b      	str	r3, [r7, #32]
 8008f6a:	e7fe      	b.n	8008f6a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d102      	bne.n	8008f78 <xQueueGenericCreateStatic+0x78>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <xQueueGenericCreateStatic+0x7c>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e000      	b.n	8008f7e <xQueueGenericCreateStatic+0x7e>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <xQueueGenericCreateStatic+0x96>
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	e7fe      	b.n	8008f94 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f96:	2348      	movs	r3, #72	; 0x48
 8008f98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b48      	cmp	r3, #72	; 0x48
 8008f9e:	d009      	beq.n	8008fb4 <xQueueGenericCreateStatic+0xb4>
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	61bb      	str	r3, [r7, #24]
 8008fb2:	e7fe      	b.n	8008fb2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00d      	beq.n	8008fda <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f842 	bl	800905e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3730      	adds	r7, #48	; 0x30
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d109      	bne.n	800900c <xQueueGenericCreate+0x28>
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	613b      	str	r3, [r7, #16]
 800900a:	e7fe      	b.n	800900a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d102      	bne.n	8009018 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009012:	2300      	movs	r3, #0
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	e004      	b.n	8009022 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	3348      	adds	r3, #72	; 0x48
 8009026:	4618      	mov	r0, r3
 8009028:	f002 f882 	bl	800b130 <pvPortMalloc>
 800902c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00f      	beq.n	8009054 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	3348      	adds	r3, #72	; 0x48
 8009038:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009042:	79fa      	ldrb	r2, [r7, #7]
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	4613      	mov	r3, r2
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 f805 	bl	800905e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009054:	69bb      	ldr	r3, [r7, #24]
	}
 8009056:	4618      	mov	r0, r3
 8009058:	3720      	adds	r7, #32
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
 800906a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d103      	bne.n	800907a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	e002      	b.n	8009080 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800908c:	2101      	movs	r1, #1
 800908e:	69b8      	ldr	r0, [r7, #24]
 8009090:	f7ff fece 	bl	8008e30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00e      	beq.n	80090c8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80090bc:	2300      	movs	r3, #0
 80090be:	2200      	movs	r2, #0
 80090c0:	2100      	movs	r1, #0
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f838 	bl	8009138 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80090da:	2301      	movs	r3, #1
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	2300      	movs	r3, #0
 80090e0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	461a      	mov	r2, r3
 80090e6:	6939      	ldr	r1, [r7, #16]
 80090e8:	6978      	ldr	r0, [r7, #20]
 80090ea:	f7ff ff7b 	bl	8008fe4 <xQueueGenericCreate>
 80090ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7ff ffd3 	bl	800909c <prvInitialiseMutex>

		return pxNewQueue;
 80090f6:	68fb      	ldr	r3, [r7, #12]
	}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af02      	add	r7, sp, #8
 8009106:	4603      	mov	r3, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800910c:	2301      	movs	r3, #1
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	2300      	movs	r3, #0
 8009112:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2200      	movs	r2, #0
 800911c:	6939      	ldr	r1, [r7, #16]
 800911e:	6978      	ldr	r0, [r7, #20]
 8009120:	f7ff feee 	bl	8008f00 <xQueueGenericCreateStatic>
 8009124:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff ffb8 	bl	800909c <prvInitialiseMutex>

		return pxNewQueue;
 800912c:	68fb      	ldr	r3, [r7, #12]
	}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08e      	sub	sp, #56	; 0x38
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009146:	2300      	movs	r3, #0
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	2b00      	cmp	r3, #0
 8009152:	d109      	bne.n	8009168 <xQueueGenericSend+0x30>
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	62bb      	str	r3, [r7, #40]	; 0x28
 8009166:	e7fe      	b.n	8009166 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d103      	bne.n	8009176 <xQueueGenericSend+0x3e>
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <xQueueGenericSend+0x42>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <xQueueGenericSend+0x44>
 800917a:	2300      	movs	r3, #0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d109      	bne.n	8009194 <xQueueGenericSend+0x5c>
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
 8009192:	e7fe      	b.n	8009192 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d103      	bne.n	80091a2 <xQueueGenericSend+0x6a>
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <xQueueGenericSend+0x6e>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <xQueueGenericSend+0x70>
 80091a6:	2300      	movs	r3, #0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d109      	bne.n	80091c0 <xQueueGenericSend+0x88>
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	623b      	str	r3, [r7, #32]
 80091be:	e7fe      	b.n	80091be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091c0:	f001 fb36 	bl	800a830 <xTaskGetSchedulerState>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d102      	bne.n	80091d0 <xQueueGenericSend+0x98>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <xQueueGenericSend+0x9c>
 80091d0:	2301      	movs	r3, #1
 80091d2:	e000      	b.n	80091d6 <xQueueGenericSend+0x9e>
 80091d4:	2300      	movs	r3, #0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <xQueueGenericSend+0xb6>
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	e7fe      	b.n	80091ec <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091ee:	f001 fe85 	bl	800aefc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d302      	bcc.n	8009204 <xQueueGenericSend+0xcc>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d129      	bne.n	8009258 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	68b9      	ldr	r1, [r7, #8]
 8009208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800920a:	f000 fc26 	bl	8009a5a <prvCopyDataToQueue>
 800920e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	4618      	mov	r0, r3
 800921e:	f001 f94b 	bl	800a4b8 <xTaskRemoveFromEventList>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d013      	beq.n	8009250 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009228:	4b3f      	ldr	r3, [pc, #252]	; (8009328 <xQueueGenericSend+0x1f0>)
 800922a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	e00a      	b.n	8009250 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009240:	4b39      	ldr	r3, [pc, #228]	; (8009328 <xQueueGenericSend+0x1f0>)
 8009242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009250:	f001 fe82 	bl	800af58 <vPortExitCritical>
				return pdPASS;
 8009254:	2301      	movs	r3, #1
 8009256:	e063      	b.n	8009320 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d103      	bne.n	8009266 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800925e:	f001 fe7b 	bl	800af58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009262:	2300      	movs	r3, #0
 8009264:	e05c      	b.n	8009320 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009268:	2b00      	cmp	r3, #0
 800926a:	d106      	bne.n	800927a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800926c:	f107 0314 	add.w	r3, r7, #20
 8009270:	4618      	mov	r0, r3
 8009272:	f001 f983 	bl	800a57c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009276:	2301      	movs	r3, #1
 8009278:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800927a:	f001 fe6d 	bl	800af58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800927e:	f000 ff15 	bl	800a0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009282:	f001 fe3b 	bl	800aefc <vPortEnterCritical>
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800928c:	b25b      	sxtb	r3, r3
 800928e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009292:	d103      	bne.n	800929c <xQueueGenericSend+0x164>
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a2:	b25b      	sxtb	r3, r3
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092a8:	d103      	bne.n	80092b2 <xQueueGenericSend+0x17a>
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092b2:	f001 fe51 	bl	800af58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092b6:	1d3a      	adds	r2, r7, #4
 80092b8:	f107 0314 	add.w	r3, r7, #20
 80092bc:	4611      	mov	r1, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f001 f972 	bl	800a5a8 <xTaskCheckForTimeOut>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d124      	bne.n	8009314 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092cc:	f000 fcbd 	bl	8009c4a <prvIsQueueFull>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d018      	beq.n	8009308 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d8:	3310      	adds	r3, #16
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 f8c6 	bl	800a470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80092e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092e6:	f000 fc48 	bl	8009b7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80092ea:	f000 feed 	bl	800a0c8 <xTaskResumeAll>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f47f af7c 	bne.w	80091ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80092f6:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <xQueueGenericSend+0x1f0>)
 80092f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	e772      	b.n	80091ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800930a:	f000 fc36 	bl	8009b7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800930e:	f000 fedb 	bl	800a0c8 <xTaskResumeAll>
 8009312:	e76c      	b.n	80091ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009316:	f000 fc30 	bl	8009b7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800931a:	f000 fed5 	bl	800a0c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800931e:	2300      	movs	r3, #0
		}
	}
}
 8009320:	4618      	mov	r0, r3
 8009322:	3738      	adds	r7, #56	; 0x38
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	e000ed04 	.word	0xe000ed04

0800932c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08e      	sub	sp, #56	; 0x38
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	2b00      	cmp	r3, #0
 8009342:	d109      	bne.n	8009358 <xQueueGenericSendFromISR+0x2c>
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
 8009356:	e7fe      	b.n	8009356 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d103      	bne.n	8009366 <xQueueGenericSendFromISR+0x3a>
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <xQueueGenericSendFromISR+0x3e>
 8009366:	2301      	movs	r3, #1
 8009368:	e000      	b.n	800936c <xQueueGenericSendFromISR+0x40>
 800936a:	2300      	movs	r3, #0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d109      	bne.n	8009384 <xQueueGenericSendFromISR+0x58>
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	623b      	str	r3, [r7, #32]
 8009382:	e7fe      	b.n	8009382 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d103      	bne.n	8009392 <xQueueGenericSendFromISR+0x66>
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <xQueueGenericSendFromISR+0x6a>
 8009392:	2301      	movs	r3, #1
 8009394:	e000      	b.n	8009398 <xQueueGenericSendFromISR+0x6c>
 8009396:	2300      	movs	r3, #0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d109      	bne.n	80093b0 <xQueueGenericSendFromISR+0x84>
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	e7fe      	b.n	80093ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093b0:	f001 fe80 	bl	800b0b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093b4:	f3ef 8211 	mrs	r2, BASEPRI
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	61ba      	str	r2, [r7, #24]
 80093ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80093cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d8:	429a      	cmp	r2, r3
 80093da:	d302      	bcc.n	80093e2 <xQueueGenericSendFromISR+0xb6>
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d12c      	bne.n	800943c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f2:	f000 fb32 	bl	8009a5a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80093fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093fe:	d112      	bne.n	8009426 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d016      	beq.n	8009436 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	3324      	adds	r3, #36	; 0x24
 800940c:	4618      	mov	r0, r3
 800940e:	f001 f853 	bl	800a4b8 <xTaskRemoveFromEventList>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00e      	beq.n	8009436 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00b      	beq.n	8009436 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e007      	b.n	8009436 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009426:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800942a:	3301      	adds	r3, #1
 800942c:	b2db      	uxtb	r3, r3
 800942e:	b25a      	sxtb	r2, r3
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009436:	2301      	movs	r3, #1
 8009438:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800943a:	e001      	b.n	8009440 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800943c:	2300      	movs	r3, #0
 800943e:	637b      	str	r3, [r7, #52]	; 0x34
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800944a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800944c:	4618      	mov	r0, r3
 800944e:	3738      	adds	r7, #56	; 0x38
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08e      	sub	sp, #56	; 0x38
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	2b00      	cmp	r3, #0
 8009466:	d109      	bne.n	800947c <xQueueGiveFromISR+0x28>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	623b      	str	r3, [r7, #32]
 800947a:	e7fe      	b.n	800947a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d009      	beq.n	8009498 <xQueueGiveFromISR+0x44>
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	61fb      	str	r3, [r7, #28]
 8009496:	e7fe      	b.n	8009496 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <xQueueGiveFromISR+0x54>
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <xQueueGiveFromISR+0x58>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e000      	b.n	80094ae <xQueueGiveFromISR+0x5a>
 80094ac:	2300      	movs	r3, #0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d109      	bne.n	80094c6 <xQueueGiveFromISR+0x72>
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	61bb      	str	r3, [r7, #24]
 80094c4:	e7fe      	b.n	80094c4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094c6:	f001 fdf5 	bl	800b0b4 <vPortValidateInterruptPriority>
	__asm volatile
 80094ca:	f3ef 8211 	mrs	r2, BASEPRI
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	617a      	str	r2, [r7, #20]
 80094e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80094e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d22b      	bcs.n	800954e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009508:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009510:	d112      	bne.n	8009538 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	2b00      	cmp	r3, #0
 8009518:	d016      	beq.n	8009548 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	4618      	mov	r0, r3
 8009520:	f000 ffca 	bl	800a4b8 <xTaskRemoveFromEventList>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00e      	beq.n	8009548 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00b      	beq.n	8009548 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2201      	movs	r2, #1
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	e007      	b.n	8009548 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800953c:	3301      	adds	r3, #1
 800953e:	b2db      	uxtb	r3, r3
 8009540:	b25a      	sxtb	r2, r3
 8009542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009548:	2301      	movs	r3, #1
 800954a:	637b      	str	r3, [r7, #52]	; 0x34
 800954c:	e001      	b.n	8009552 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800954e:	2300      	movs	r3, #0
 8009550:	637b      	str	r3, [r7, #52]	; 0x34
 8009552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009554:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800955e:	4618      	mov	r0, r3
 8009560:	3738      	adds	r7, #56	; 0x38
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b08c      	sub	sp, #48	; 0x30
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009574:	2300      	movs	r3, #0
 8009576:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	2b00      	cmp	r3, #0
 8009580:	d109      	bne.n	8009596 <xQueueReceive+0x2e>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	623b      	str	r3, [r7, #32]
 8009594:	e7fe      	b.n	8009594 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <xQueueReceive+0x3c>
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <xQueueReceive+0x40>
 80095a4:	2301      	movs	r3, #1
 80095a6:	e000      	b.n	80095aa <xQueueReceive+0x42>
 80095a8:	2300      	movs	r3, #0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d109      	bne.n	80095c2 <xQueueReceive+0x5a>
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	61fb      	str	r3, [r7, #28]
 80095c0:	e7fe      	b.n	80095c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095c2:	f001 f935 	bl	800a830 <xTaskGetSchedulerState>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <xQueueReceive+0x6a>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <xQueueReceive+0x6e>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <xQueueReceive+0x70>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <xQueueReceive+0x88>
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	e7fe      	b.n	80095ee <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80095f0:	f001 fc84 	bl	800aefc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01f      	beq.n	8009640 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009600:	68b9      	ldr	r1, [r7, #8]
 8009602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009604:	f000 fa93 	bl	8009b2e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	1e5a      	subs	r2, r3, #1
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00f      	beq.n	8009638 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	3310      	adds	r3, #16
 800961c:	4618      	mov	r0, r3
 800961e:	f000 ff4b 	bl	800a4b8 <xTaskRemoveFromEventList>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d007      	beq.n	8009638 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009628:	4b3c      	ldr	r3, [pc, #240]	; (800971c <xQueueReceive+0x1b4>)
 800962a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009638:	f001 fc8e 	bl	800af58 <vPortExitCritical>
				return pdPASS;
 800963c:	2301      	movs	r3, #1
 800963e:	e069      	b.n	8009714 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d103      	bne.n	800964e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009646:	f001 fc87 	bl	800af58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800964a:	2300      	movs	r3, #0
 800964c:	e062      	b.n	8009714 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009654:	f107 0310 	add.w	r3, r7, #16
 8009658:	4618      	mov	r0, r3
 800965a:	f000 ff8f 	bl	800a57c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800965e:	2301      	movs	r3, #1
 8009660:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009662:	f001 fc79 	bl	800af58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009666:	f000 fd21 	bl	800a0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800966a:	f001 fc47 	bl	800aefc <vPortEnterCritical>
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009674:	b25b      	sxtb	r3, r3
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800967a:	d103      	bne.n	8009684 <xQueueReceive+0x11c>
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800968a:	b25b      	sxtb	r3, r3
 800968c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009690:	d103      	bne.n	800969a <xQueueReceive+0x132>
 8009692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800969a:	f001 fc5d 	bl	800af58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800969e:	1d3a      	adds	r2, r7, #4
 80096a0:	f107 0310 	add.w	r3, r7, #16
 80096a4:	4611      	mov	r1, r2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 ff7e 	bl	800a5a8 <xTaskCheckForTimeOut>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d123      	bne.n	80096fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b4:	f000 fab3 	bl	8009c1e <prvIsQueueEmpty>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d017      	beq.n	80096ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	3324      	adds	r3, #36	; 0x24
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fed2 	bl	800a470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ce:	f000 fa54 	bl	8009b7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096d2:	f000 fcf9 	bl	800a0c8 <xTaskResumeAll>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d189      	bne.n	80095f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80096dc:	4b0f      	ldr	r3, [pc, #60]	; (800971c <xQueueReceive+0x1b4>)
 80096de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	e780      	b.n	80095f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f0:	f000 fa43 	bl	8009b7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096f4:	f000 fce8 	bl	800a0c8 <xTaskResumeAll>
 80096f8:	e77a      	b.n	80095f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fc:	f000 fa3d 	bl	8009b7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009700:	f000 fce2 	bl	800a0c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009706:	f000 fa8a 	bl	8009c1e <prvIsQueueEmpty>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	f43f af6f 	beq.w	80095f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009712:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009714:	4618      	mov	r0, r3
 8009716:	3730      	adds	r7, #48	; 0x30
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	e000ed04 	.word	0xe000ed04

08009720 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08e      	sub	sp, #56	; 0x38
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800972a:	2300      	movs	r3, #0
 800972c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <xQueueSemaphoreTake+0x30>
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	623b      	str	r3, [r7, #32]
 800974e:	e7fe      	b.n	800974e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	d009      	beq.n	800976c <xQueueSemaphoreTake+0x4c>
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	e7fe      	b.n	800976a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800976c:	f001 f860 	bl	800a830 <xTaskGetSchedulerState>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d102      	bne.n	800977c <xQueueSemaphoreTake+0x5c>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <xQueueSemaphoreTake+0x60>
 800977c:	2301      	movs	r3, #1
 800977e:	e000      	b.n	8009782 <xQueueSemaphoreTake+0x62>
 8009780:	2300      	movs	r3, #0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <xQueueSemaphoreTake+0x7a>
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	61bb      	str	r3, [r7, #24]
 8009798:	e7fe      	b.n	8009798 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800979a:	f001 fbaf 	bl	800aefc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d024      	beq.n	80097f4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	1e5a      	subs	r2, r3, #1
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80097ba:	f001 f9ff 	bl	800abbc <pvTaskIncrementMutexHeldCount>
 80097be:	4602      	mov	r2, r0
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00f      	beq.n	80097ec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	3310      	adds	r3, #16
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fe71 	bl	800a4b8 <xTaskRemoveFromEventList>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d007      	beq.n	80097ec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097dc:	4b53      	ldr	r3, [pc, #332]	; (800992c <xQueueSemaphoreTake+0x20c>)
 80097de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097ec:	f001 fbb4 	bl	800af58 <vPortExitCritical>
				return pdPASS;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e096      	b.n	8009922 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d110      	bne.n	800981c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d009      	beq.n	8009814 <xQueueSemaphoreTake+0xf4>
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	617b      	str	r3, [r7, #20]
 8009812:	e7fe      	b.n	8009812 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009814:	f001 fba0 	bl	800af58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009818:	2300      	movs	r3, #0
 800981a:	e082      	b.n	8009922 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800981c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009822:	f107 030c 	add.w	r3, r7, #12
 8009826:	4618      	mov	r0, r3
 8009828:	f000 fea8 	bl	800a57c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009830:	f001 fb92 	bl	800af58 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009834:	f000 fc3a 	bl	800a0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009838:	f001 fb60 	bl	800aefc <vPortEnterCritical>
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009842:	b25b      	sxtb	r3, r3
 8009844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009848:	d103      	bne.n	8009852 <xQueueSemaphoreTake+0x132>
 800984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009858:	b25b      	sxtb	r3, r3
 800985a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800985e:	d103      	bne.n	8009868 <xQueueSemaphoreTake+0x148>
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009868:	f001 fb76 	bl	800af58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800986c:	463a      	mov	r2, r7
 800986e:	f107 030c 	add.w	r3, r7, #12
 8009872:	4611      	mov	r1, r2
 8009874:	4618      	mov	r0, r3
 8009876:	f000 fe97 	bl	800a5a8 <xTaskCheckForTimeOut>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d132      	bne.n	80098e6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009882:	f000 f9cc 	bl	8009c1e <prvIsQueueEmpty>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d026      	beq.n	80098da <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009894:	f001 fb32 	bl	800aefc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 ffe5 	bl	800a86c <xTaskPriorityInherit>
 80098a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80098a4:	f001 fb58 	bl	800af58 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fddd 	bl	800a470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098b8:	f000 f95f 	bl	8009b7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098bc:	f000 fc04 	bl	800a0c8 <xTaskResumeAll>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f47f af69 	bne.w	800979a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80098c8:	4b18      	ldr	r3, [pc, #96]	; (800992c <xQueueSemaphoreTake+0x20c>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	e75f      	b.n	800979a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80098da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098dc:	f000 f94d 	bl	8009b7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098e0:	f000 fbf2 	bl	800a0c8 <xTaskResumeAll>
 80098e4:	e759      	b.n	800979a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80098e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e8:	f000 f947 	bl	8009b7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098ec:	f000 fbec 	bl	800a0c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098f2:	f000 f994 	bl	8009c1e <prvIsQueueEmpty>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f43f af4e 	beq.w	800979a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00d      	beq.n	8009920 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009904:	f001 fafa 	bl	800aefc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800990a:	f000 f88e 	bl	8009a2a <prvGetDisinheritPriorityAfterTimeout>
 800990e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009916:	4618      	mov	r0, r3
 8009918:	f001 f8b2 	bl	800aa80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800991c:	f001 fb1c 	bl	800af58 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009920:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009922:	4618      	mov	r0, r3
 8009924:	3738      	adds	r7, #56	; 0x38
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	e000ed04 	.word	0xe000ed04

08009930 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08e      	sub	sp, #56	; 0x38
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	2b00      	cmp	r3, #0
 8009944:	d109      	bne.n	800995a <xQueueReceiveFromISR+0x2a>
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	623b      	str	r3, [r7, #32]
 8009958:	e7fe      	b.n	8009958 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d103      	bne.n	8009968 <xQueueReceiveFromISR+0x38>
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <xQueueReceiveFromISR+0x3c>
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <xQueueReceiveFromISR+0x3e>
 800996c:	2300      	movs	r3, #0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d109      	bne.n	8009986 <xQueueReceiveFromISR+0x56>
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	e7fe      	b.n	8009984 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009986:	f001 fb95 	bl	800b0b4 <vPortValidateInterruptPriority>
	__asm volatile
 800998a:	f3ef 8211 	mrs	r2, BASEPRI
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	61ba      	str	r2, [r7, #24]
 80099a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80099a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d02f      	beq.n	8009a12 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099c0:	f000 f8b5 	bl	8009b2e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	1e5a      	subs	r2, r3, #1
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80099cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099d4:	d112      	bne.n	80099fc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d016      	beq.n	8009a0c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	3310      	adds	r3, #16
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fd68 	bl	800a4b8 <xTaskRemoveFromEventList>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00e      	beq.n	8009a0c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	e007      	b.n	8009a0c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a00:	3301      	adds	r3, #1
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	b25a      	sxtb	r2, r3
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a10:	e001      	b.n	8009a16 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	637b      	str	r3, [r7, #52]	; 0x34
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3738      	adds	r7, #56	; 0x38
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b085      	sub	sp, #20
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d006      	beq.n	8009a48 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f1c3 0307 	rsb	r3, r3, #7
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	e001      	b.n	8009a4c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
	}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b086      	sub	sp, #24
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10d      	bne.n	8009a94 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d14d      	bne.n	8009b1c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 ff77 	bl	800a978 <xTaskPriorityDisinherit>
 8009a8a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	605a      	str	r2, [r3, #4]
 8009a92:	e043      	b.n	8009b1c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d119      	bne.n	8009ace <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6898      	ldr	r0, [r3, #8]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	f00a ffc4 	bl	8014a32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	441a      	add	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d32b      	bcc.n	8009b1c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	609a      	str	r2, [r3, #8]
 8009acc:	e026      	b.n	8009b1c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	68d8      	ldr	r0, [r3, #12]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	68b9      	ldr	r1, [r7, #8]
 8009ada:	f00a ffaa 	bl	8014a32 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae6:	425b      	negs	r3, r3
 8009ae8:	441a      	add	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	68da      	ldr	r2, [r3, #12]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d207      	bcs.n	8009b0a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	425b      	negs	r3, r3
 8009b04:	441a      	add	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d105      	bne.n	8009b1c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b24:	697b      	ldr	r3, [r7, #20]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d018      	beq.n	8009b72 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	441a      	add	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d303      	bcc.n	8009b62 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68d9      	ldr	r1, [r3, #12]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	6838      	ldr	r0, [r7, #0]
 8009b6e:	f00a ff60 	bl	8014a32 <memcpy>
	}
}
 8009b72:	bf00      	nop
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b82:	f001 f9bb 	bl	800aefc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b8c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b8e:	e011      	b.n	8009bb4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d012      	beq.n	8009bbe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3324      	adds	r3, #36	; 0x24
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 fc8b 	bl	800a4b8 <xTaskRemoveFromEventList>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ba8:	f000 fd5e 	bl	800a668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	dce9      	bgt.n	8009b90 <prvUnlockQueue+0x16>
 8009bbc:	e000      	b.n	8009bc0 <prvUnlockQueue+0x46>
					break;
 8009bbe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	22ff      	movs	r2, #255	; 0xff
 8009bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bc8:	f001 f9c6 	bl	800af58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bcc:	f001 f996 	bl	800aefc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bd6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bd8:	e011      	b.n	8009bfe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d012      	beq.n	8009c08 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3310      	adds	r3, #16
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fc66 	bl	800a4b8 <xTaskRemoveFromEventList>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bf2:	f000 fd39 	bl	800a668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dce9      	bgt.n	8009bda <prvUnlockQueue+0x60>
 8009c06:	e000      	b.n	8009c0a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c08:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	22ff      	movs	r2, #255	; 0xff
 8009c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c12:	f001 f9a1 	bl	800af58 <vPortExitCritical>
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c26:	f001 f969 	bl	800aefc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c32:	2301      	movs	r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]
 8009c36:	e001      	b.n	8009c3c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c3c:	f001 f98c 	bl	800af58 <vPortExitCritical>

	return xReturn;
 8009c40:	68fb      	ldr	r3, [r7, #12]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c52:	f001 f953 	bl	800aefc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d102      	bne.n	8009c68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c62:	2301      	movs	r3, #1
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	e001      	b.n	8009c6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c6c:	f001 f974 	bl	800af58 <vPortExitCritical>

	return xReturn;
 8009c70:	68fb      	ldr	r3, [r7, #12]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b08e      	sub	sp, #56	; 0x38
 8009c7e:	af04      	add	r7, sp, #16
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	607a      	str	r2, [r7, #4]
 8009c86:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d109      	bne.n	8009ca2 <xTaskCreateStatic+0x28>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	623b      	str	r3, [r7, #32]
 8009ca0:	e7fe      	b.n	8009ca0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d109      	bne.n	8009cbc <xTaskCreateStatic+0x42>
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	61fb      	str	r3, [r7, #28]
 8009cba:	e7fe      	b.n	8009cba <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cbc:	2354      	movs	r3, #84	; 0x54
 8009cbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2b54      	cmp	r3, #84	; 0x54
 8009cc4:	d009      	beq.n	8009cda <xTaskCreateStatic+0x60>
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	61bb      	str	r3, [r7, #24]
 8009cd8:	e7fe      	b.n	8009cd8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01e      	beq.n	8009d1e <xTaskCreateStatic+0xa4>
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01b      	beq.n	8009d1e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9303      	str	r3, [sp, #12]
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	9302      	str	r3, [sp, #8]
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f850 	bl	8009db6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d18:	f000 f8cc 	bl	8009eb4 <prvAddNewTaskToReadyList>
 8009d1c:	e001      	b.n	8009d22 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d22:	697b      	ldr	r3, [r7, #20]
	}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3728      	adds	r7, #40	; 0x28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08c      	sub	sp, #48	; 0x30
 8009d30:	af04      	add	r7, sp, #16
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 f9f5 	bl	800b130 <pvPortMalloc>
 8009d46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00e      	beq.n	8009d6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009d4e:	2054      	movs	r0, #84	; 0x54
 8009d50:	f001 f9ee 	bl	800b130 <pvPortMalloc>
 8009d54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	631a      	str	r2, [r3, #48]	; 0x30
 8009d62:	e005      	b.n	8009d70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d64:	6978      	ldr	r0, [r7, #20]
 8009d66:	f001 faa5 	bl	800b2b4 <vPortFree>
 8009d6a:	e001      	b.n	8009d70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d017      	beq.n	8009da6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d7e:	88fa      	ldrh	r2, [r7, #6]
 8009d80:	2300      	movs	r3, #0
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	9302      	str	r3, [sp, #8]
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f80e 	bl	8009db6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d9a:	69f8      	ldr	r0, [r7, #28]
 8009d9c:	f000 f88a 	bl	8009eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009da0:	2301      	movs	r3, #1
 8009da2:	61bb      	str	r3, [r7, #24]
 8009da4:	e002      	b.n	8009dac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009daa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dac:	69bb      	ldr	r3, [r7, #24]
	}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b088      	sub	sp, #32
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f023 0307 	bic.w	r3, r3, #7
 8009ddc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d009      	beq.n	8009dfc <prvInitialiseNewTask+0x46>
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	617b      	str	r3, [r7, #20]
 8009dfa:	e7fe      	b.n	8009dfa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	61fb      	str	r3, [r7, #28]
 8009e00:	e012      	b.n	8009e28 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	4413      	add	r3, r2
 8009e08:	7819      	ldrb	r1, [r3, #0]
 8009e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	4413      	add	r3, r2
 8009e10:	3334      	adds	r3, #52	; 0x34
 8009e12:	460a      	mov	r2, r1
 8009e14:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d006      	beq.n	8009e30 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	3301      	adds	r3, #1
 8009e26:	61fb      	str	r3, [r7, #28]
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	2b0f      	cmp	r3, #15
 8009e2c:	d9e9      	bls.n	8009e02 <prvInitialiseNewTask+0x4c>
 8009e2e:	e000      	b.n	8009e32 <prvInitialiseNewTask+0x7c>
		{
			break;
 8009e30:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	2b06      	cmp	r3, #6
 8009e3e:	d901      	bls.n	8009e44 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e40:	2306      	movs	r3, #6
 8009e42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e4e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	2200      	movs	r2, #0
 8009e54:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe ff54 	bl	8008d08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	3318      	adds	r3, #24
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe ff4f 	bl	8008d08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	f1c3 0207 	rsb	r2, r3, #7
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	2200      	movs	r2, #0
 8009e84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	68f9      	ldr	r1, [r7, #12]
 8009e92:	69b8      	ldr	r0, [r7, #24]
 8009e94:	f000 ff0c 	bl	800acb0 <pxPortInitialiseStack>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eaa:	bf00      	nop
 8009eac:	3720      	adds	r7, #32
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
	...

08009eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ebc:	f001 f81e 	bl	800aefc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ec0:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <prvAddNewTaskToReadyList+0xb8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	4a29      	ldr	r2, [pc, #164]	; (8009f6c <prvAddNewTaskToReadyList+0xb8>)
 8009ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eca:	4b29      	ldr	r3, [pc, #164]	; (8009f70 <prvAddNewTaskToReadyList+0xbc>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d109      	bne.n	8009ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ed2:	4a27      	ldr	r2, [pc, #156]	; (8009f70 <prvAddNewTaskToReadyList+0xbc>)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ed8:	4b24      	ldr	r3, [pc, #144]	; (8009f6c <prvAddNewTaskToReadyList+0xb8>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d110      	bne.n	8009f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ee0:	f000 fbe6 	bl	800a6b0 <prvInitialiseTaskLists>
 8009ee4:	e00d      	b.n	8009f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ee6:	4b23      	ldr	r3, [pc, #140]	; (8009f74 <prvAddNewTaskToReadyList+0xc0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d109      	bne.n	8009f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009eee:	4b20      	ldr	r3, [pc, #128]	; (8009f70 <prvAddNewTaskToReadyList+0xbc>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d802      	bhi.n	8009f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009efc:	4a1c      	ldr	r2, [pc, #112]	; (8009f70 <prvAddNewTaskToReadyList+0xbc>)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f02:	4b1d      	ldr	r3, [pc, #116]	; (8009f78 <prvAddNewTaskToReadyList+0xc4>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3301      	adds	r3, #1
 8009f08:	4a1b      	ldr	r2, [pc, #108]	; (8009f78 <prvAddNewTaskToReadyList+0xc4>)
 8009f0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	2201      	movs	r2, #1
 8009f12:	409a      	lsls	r2, r3
 8009f14:	4b19      	ldr	r3, [pc, #100]	; (8009f7c <prvAddNewTaskToReadyList+0xc8>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	4a18      	ldr	r2, [pc, #96]	; (8009f7c <prvAddNewTaskToReadyList+0xc8>)
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4a15      	ldr	r2, [pc, #84]	; (8009f80 <prvAddNewTaskToReadyList+0xcc>)
 8009f2c:	441a      	add	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4619      	mov	r1, r3
 8009f34:	4610      	mov	r0, r2
 8009f36:	f7fe fef4 	bl	8008d22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f3a:	f001 f80d 	bl	800af58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f3e:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <prvAddNewTaskToReadyList+0xc0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00e      	beq.n	8009f64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f46:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <prvAddNewTaskToReadyList+0xbc>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d207      	bcs.n	8009f64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f54:	4b0b      	ldr	r3, [pc, #44]	; (8009f84 <prvAddNewTaskToReadyList+0xd0>)
 8009f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000560 	.word	0x20000560
 8009f70:	20000460 	.word	0x20000460
 8009f74:	2000056c 	.word	0x2000056c
 8009f78:	2000057c 	.word	0x2000057c
 8009f7c:	20000568 	.word	0x20000568
 8009f80:	20000464 	.word	0x20000464
 8009f84:	e000ed04 	.word	0xe000ed04

08009f88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d016      	beq.n	8009fc8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f9a:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <vTaskDelay+0x60>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d009      	beq.n	8009fb6 <vTaskDelay+0x2e>
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	60bb      	str	r3, [r7, #8]
 8009fb4:	e7fe      	b.n	8009fb4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009fb6:	f000 f879 	bl	800a0ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fba:	2100      	movs	r1, #0
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fe11 	bl	800abe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fc2:	f000 f881 	bl	800a0c8 <xTaskResumeAll>
 8009fc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d107      	bne.n	8009fde <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009fce:	4b07      	ldr	r3, [pc, #28]	; (8009fec <vTaskDelay+0x64>)
 8009fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000588 	.word	0x20000588
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	; 0x28
 8009ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ffe:	463a      	mov	r2, r7
 800a000:	1d39      	adds	r1, r7, #4
 800a002:	f107 0308 	add.w	r3, r7, #8
 800a006:	4618      	mov	r0, r3
 800a008:	f7f6 fac2 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	9202      	str	r2, [sp, #8]
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	2300      	movs	r3, #0
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	2300      	movs	r3, #0
 800a01c:	460a      	mov	r2, r1
 800a01e:	491d      	ldr	r1, [pc, #116]	; (800a094 <vTaskStartScheduler+0xa4>)
 800a020:	481d      	ldr	r0, [pc, #116]	; (800a098 <vTaskStartScheduler+0xa8>)
 800a022:	f7ff fe2a 	bl	8009c7a <xTaskCreateStatic>
 800a026:	4602      	mov	r2, r0
 800a028:	4b1c      	ldr	r3, [pc, #112]	; (800a09c <vTaskStartScheduler+0xac>)
 800a02a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a02c:	4b1b      	ldr	r3, [pc, #108]	; (800a09c <vTaskStartScheduler+0xac>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a034:	2301      	movs	r3, #1
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	e001      	b.n	800a03e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d115      	bne.n	800a070 <vTaskStartScheduler+0x80>
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <vTaskStartScheduler+0xb0>)
 800a058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a05c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a05e:	4b11      	ldr	r3, [pc, #68]	; (800a0a4 <vTaskStartScheduler+0xb4>)
 800a060:	2201      	movs	r2, #1
 800a062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a064:	4b10      	ldr	r3, [pc, #64]	; (800a0a8 <vTaskStartScheduler+0xb8>)
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a06a:	f000 fea9 	bl	800adc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a06e:	e00d      	b.n	800a08c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a076:	d109      	bne.n	800a08c <vTaskStartScheduler+0x9c>
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	e7fe      	b.n	800a08a <vTaskStartScheduler+0x9a>
}
 800a08c:	bf00      	nop
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	0801595c 	.word	0x0801595c
 800a098:	0800a681 	.word	0x0800a681
 800a09c:	20000584 	.word	0x20000584
 800a0a0:	20000580 	.word	0x20000580
 800a0a4:	2000056c 	.word	0x2000056c
 800a0a8:	20000564 	.word	0x20000564

0800a0ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a0b0:	4b04      	ldr	r3, [pc, #16]	; (800a0c4 <vTaskSuspendAll+0x18>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	4a03      	ldr	r2, [pc, #12]	; (800a0c4 <vTaskSuspendAll+0x18>)
 800a0b8:	6013      	str	r3, [r2, #0]
}
 800a0ba:	bf00      	nop
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	20000588 	.word	0x20000588

0800a0c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0d6:	4b41      	ldr	r3, [pc, #260]	; (800a1dc <xTaskResumeAll+0x114>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d109      	bne.n	800a0f2 <xTaskResumeAll+0x2a>
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	e7fe      	b.n	800a0f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0f2:	f000 ff03 	bl	800aefc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0f6:	4b39      	ldr	r3, [pc, #228]	; (800a1dc <xTaskResumeAll+0x114>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	4a37      	ldr	r2, [pc, #220]	; (800a1dc <xTaskResumeAll+0x114>)
 800a0fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a100:	4b36      	ldr	r3, [pc, #216]	; (800a1dc <xTaskResumeAll+0x114>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d161      	bne.n	800a1cc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a108:	4b35      	ldr	r3, [pc, #212]	; (800a1e0 <xTaskResumeAll+0x118>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d05d      	beq.n	800a1cc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a110:	e02e      	b.n	800a170 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a112:	4b34      	ldr	r3, [pc, #208]	; (800a1e4 <xTaskResumeAll+0x11c>)
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3318      	adds	r3, #24
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe fe5c 	bl	8008ddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3304      	adds	r3, #4
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fe fe57 	bl	8008ddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a132:	2201      	movs	r2, #1
 800a134:	409a      	lsls	r2, r3
 800a136:	4b2c      	ldr	r3, [pc, #176]	; (800a1e8 <xTaskResumeAll+0x120>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	4a2a      	ldr	r2, [pc, #168]	; (800a1e8 <xTaskResumeAll+0x120>)
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4a27      	ldr	r2, [pc, #156]	; (800a1ec <xTaskResumeAll+0x124>)
 800a14e:	441a      	add	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3304      	adds	r3, #4
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7fe fde3 	bl	8008d22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a160:	4b23      	ldr	r3, [pc, #140]	; (800a1f0 <xTaskResumeAll+0x128>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a166:	429a      	cmp	r2, r3
 800a168:	d302      	bcc.n	800a170 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a16a:	4b22      	ldr	r3, [pc, #136]	; (800a1f4 <xTaskResumeAll+0x12c>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a170:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <xTaskResumeAll+0x11c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1cc      	bne.n	800a112 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a17e:	f000 fb31 	bl	800a7e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a182:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <xTaskResumeAll+0x130>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d010      	beq.n	800a1b0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a18e:	f000 f859 	bl	800a244 <xTaskIncrementTick>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a198:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <xTaskResumeAll+0x12c>)
 800a19a:	2201      	movs	r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1f1      	bne.n	800a18e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a1aa:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <xTaskResumeAll+0x130>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1b0:	4b10      	ldr	r3, [pc, #64]	; (800a1f4 <xTaskResumeAll+0x12c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d009      	beq.n	800a1cc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1bc:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <xTaskResumeAll+0x134>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1cc:	f000 fec4 	bl	800af58 <vPortExitCritical>

	return xAlreadyYielded;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000588 	.word	0x20000588
 800a1e0:	20000560 	.word	0x20000560
 800a1e4:	20000520 	.word	0x20000520
 800a1e8:	20000568 	.word	0x20000568
 800a1ec:	20000464 	.word	0x20000464
 800a1f0:	20000460 	.word	0x20000460
 800a1f4:	20000574 	.word	0x20000574
 800a1f8:	20000570 	.word	0x20000570
 800a1fc:	e000ed04 	.word	0xe000ed04

0800a200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a206:	4b05      	ldr	r3, [pc, #20]	; (800a21c <xTaskGetTickCount+0x1c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a20c:	687b      	ldr	r3, [r7, #4]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	20000564 	.word	0x20000564

0800a220 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a226:	f000 ff45 	bl	800b0b4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a22a:	2300      	movs	r3, #0
 800a22c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a22e:	4b04      	ldr	r3, [pc, #16]	; (800a240 <xTaskGetTickCountFromISR+0x20>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a234:	683b      	ldr	r3, [r7, #0]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20000564 	.word	0x20000564

0800a244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a24e:	4b50      	ldr	r3, [pc, #320]	; (800a390 <xTaskIncrementTick+0x14c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f040 808c 	bne.w	800a370 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a258:	4b4e      	ldr	r3, [pc, #312]	; (800a394 <xTaskIncrementTick+0x150>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a260:	4a4c      	ldr	r2, [pc, #304]	; (800a394 <xTaskIncrementTick+0x150>)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d11f      	bne.n	800a2ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a26c:	4b4a      	ldr	r3, [pc, #296]	; (800a398 <xTaskIncrementTick+0x154>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d009      	beq.n	800a28a <xTaskIncrementTick+0x46>
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	603b      	str	r3, [r7, #0]
 800a288:	e7fe      	b.n	800a288 <xTaskIncrementTick+0x44>
 800a28a:	4b43      	ldr	r3, [pc, #268]	; (800a398 <xTaskIncrementTick+0x154>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	4b42      	ldr	r3, [pc, #264]	; (800a39c <xTaskIncrementTick+0x158>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a40      	ldr	r2, [pc, #256]	; (800a398 <xTaskIncrementTick+0x154>)
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	4a40      	ldr	r2, [pc, #256]	; (800a39c <xTaskIncrementTick+0x158>)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6013      	str	r3, [r2, #0]
 800a29e:	4b40      	ldr	r3, [pc, #256]	; (800a3a0 <xTaskIncrementTick+0x15c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	4a3e      	ldr	r2, [pc, #248]	; (800a3a0 <xTaskIncrementTick+0x15c>)
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	f000 fa9c 	bl	800a7e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2ac:	4b3d      	ldr	r3, [pc, #244]	; (800a3a4 <xTaskIncrementTick+0x160>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d34d      	bcc.n	800a352 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2b6:	4b38      	ldr	r3, [pc, #224]	; (800a398 <xTaskIncrementTick+0x154>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <xTaskIncrementTick+0x80>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e000      	b.n	800a2c6 <xTaskIncrementTick+0x82>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d004      	beq.n	800a2d4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ca:	4b36      	ldr	r3, [pc, #216]	; (800a3a4 <xTaskIncrementTick+0x160>)
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2d0:	601a      	str	r2, [r3, #0]
					break;
 800a2d2:	e03e      	b.n	800a352 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a2d4:	4b30      	ldr	r3, [pc, #192]	; (800a398 <xTaskIncrementTick+0x154>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d203      	bcs.n	800a2f4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2ec:	4a2d      	ldr	r2, [pc, #180]	; (800a3a4 <xTaskIncrementTick+0x160>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6013      	str	r3, [r2, #0]
						break;
 800a2f2:	e02e      	b.n	800a352 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe fd6f 	bl	8008ddc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a302:	2b00      	cmp	r3, #0
 800a304:	d004      	beq.n	800a310 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	3318      	adds	r3, #24
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fd66 	bl	8008ddc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	2201      	movs	r2, #1
 800a316:	409a      	lsls	r2, r3
 800a318:	4b23      	ldr	r3, [pc, #140]	; (800a3a8 <xTaskIncrementTick+0x164>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	4a22      	ldr	r2, [pc, #136]	; (800a3a8 <xTaskIncrementTick+0x164>)
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4a1f      	ldr	r2, [pc, #124]	; (800a3ac <xTaskIncrementTick+0x168>)
 800a330:	441a      	add	r2, r3
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	3304      	adds	r3, #4
 800a336:	4619      	mov	r1, r3
 800a338:	4610      	mov	r0, r2
 800a33a:	f7fe fcf2 	bl	8008d22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a342:	4b1b      	ldr	r3, [pc, #108]	; (800a3b0 <xTaskIncrementTick+0x16c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	429a      	cmp	r2, r3
 800a34a:	d3b4      	bcc.n	800a2b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a34c:	2301      	movs	r3, #1
 800a34e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a350:	e7b1      	b.n	800a2b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a352:	4b17      	ldr	r3, [pc, #92]	; (800a3b0 <xTaskIncrementTick+0x16c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	4914      	ldr	r1, [pc, #80]	; (800a3ac <xTaskIncrementTick+0x168>)
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	440b      	add	r3, r1
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d907      	bls.n	800a37a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a36a:	2301      	movs	r3, #1
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	e004      	b.n	800a37a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a370:	4b10      	ldr	r3, [pc, #64]	; (800a3b4 <xTaskIncrementTick+0x170>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3301      	adds	r3, #1
 800a376:	4a0f      	ldr	r2, [pc, #60]	; (800a3b4 <xTaskIncrementTick+0x170>)
 800a378:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a37a:	4b0f      	ldr	r3, [pc, #60]	; (800a3b8 <xTaskIncrementTick+0x174>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a382:	2301      	movs	r3, #1
 800a384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a386:	697b      	ldr	r3, [r7, #20]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20000588 	.word	0x20000588
 800a394:	20000564 	.word	0x20000564
 800a398:	20000518 	.word	0x20000518
 800a39c:	2000051c 	.word	0x2000051c
 800a3a0:	20000578 	.word	0x20000578
 800a3a4:	20000580 	.word	0x20000580
 800a3a8:	20000568 	.word	0x20000568
 800a3ac:	20000464 	.word	0x20000464
 800a3b0:	20000460 	.word	0x20000460
 800a3b4:	20000570 	.word	0x20000570
 800a3b8:	20000574 	.word	0x20000574

0800a3bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3c2:	4b26      	ldr	r3, [pc, #152]	; (800a45c <vTaskSwitchContext+0xa0>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3ca:	4b25      	ldr	r3, [pc, #148]	; (800a460 <vTaskSwitchContext+0xa4>)
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3d0:	e03e      	b.n	800a450 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a3d2:	4b23      	ldr	r3, [pc, #140]	; (800a460 <vTaskSwitchContext+0xa4>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a3d8:	4b22      	ldr	r3, [pc, #136]	; (800a464 <vTaskSwitchContext+0xa8>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	fab3 f383 	clz	r3, r3
 800a3e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	f1c3 031f 	rsb	r3, r3, #31
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	491e      	ldr	r1, [pc, #120]	; (800a468 <vTaskSwitchContext+0xac>)
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	440b      	add	r3, r1
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d109      	bne.n	800a416 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	607b      	str	r3, [r7, #4]
 800a414:	e7fe      	b.n	800a414 <vTaskSwitchContext+0x58>
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4a11      	ldr	r2, [pc, #68]	; (800a468 <vTaskSwitchContext+0xac>)
 800a422:	4413      	add	r3, r2
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	605a      	str	r2, [r3, #4]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	3308      	adds	r3, #8
 800a438:	429a      	cmp	r2, r3
 800a43a:	d104      	bne.n	800a446 <vTaskSwitchContext+0x8a>
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	605a      	str	r2, [r3, #4]
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	4a07      	ldr	r2, [pc, #28]	; (800a46c <vTaskSwitchContext+0xb0>)
 800a44e:	6013      	str	r3, [r2, #0]
}
 800a450:	bf00      	nop
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	20000588 	.word	0x20000588
 800a460:	20000574 	.word	0x20000574
 800a464:	20000568 	.word	0x20000568
 800a468:	20000464 	.word	0x20000464
 800a46c:	20000460 	.word	0x20000460

0800a470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d109      	bne.n	800a494 <vTaskPlaceOnEventList+0x24>
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
 800a492:	e7fe      	b.n	800a492 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a494:	4b07      	ldr	r3, [pc, #28]	; (800a4b4 <vTaskPlaceOnEventList+0x44>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3318      	adds	r3, #24
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7fe fc64 	bl	8008d6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	6838      	ldr	r0, [r7, #0]
 800a4a6:	f000 fb9d 	bl	800abe4 <prvAddCurrentTaskToDelayedList>
}
 800a4aa:	bf00      	nop
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000460 	.word	0x20000460

0800a4b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d109      	bne.n	800a4e2 <xTaskRemoveFromEventList+0x2a>
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	e7fe      	b.n	800a4e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3318      	adds	r3, #24
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe fc78 	bl	8008ddc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ec:	4b1d      	ldr	r3, [pc, #116]	; (800a564 <xTaskRemoveFromEventList+0xac>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d11c      	bne.n	800a52e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe fc6f 	bl	8008ddc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	2201      	movs	r2, #1
 800a504:	409a      	lsls	r2, r3
 800a506:	4b18      	ldr	r3, [pc, #96]	; (800a568 <xTaskRemoveFromEventList+0xb0>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	4a16      	ldr	r2, [pc, #88]	; (800a568 <xTaskRemoveFromEventList+0xb0>)
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a514:	4613      	mov	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4a13      	ldr	r2, [pc, #76]	; (800a56c <xTaskRemoveFromEventList+0xb4>)
 800a51e:	441a      	add	r2, r3
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	3304      	adds	r3, #4
 800a524:	4619      	mov	r1, r3
 800a526:	4610      	mov	r0, r2
 800a528:	f7fe fbfb 	bl	8008d22 <vListInsertEnd>
 800a52c:	e005      	b.n	800a53a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3318      	adds	r3, #24
 800a532:	4619      	mov	r1, r3
 800a534:	480e      	ldr	r0, [pc, #56]	; (800a570 <xTaskRemoveFromEventList+0xb8>)
 800a536:	f7fe fbf4 	bl	8008d22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53e:	4b0d      	ldr	r3, [pc, #52]	; (800a574 <xTaskRemoveFromEventList+0xbc>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a544:	429a      	cmp	r2, r3
 800a546:	d905      	bls.n	800a554 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a548:	2301      	movs	r3, #1
 800a54a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a54c:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <xTaskRemoveFromEventList+0xc0>)
 800a54e:	2201      	movs	r2, #1
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	e001      	b.n	800a558 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a558:	697b      	ldr	r3, [r7, #20]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20000588 	.word	0x20000588
 800a568:	20000568 	.word	0x20000568
 800a56c:	20000464 	.word	0x20000464
 800a570:	20000520 	.word	0x20000520
 800a574:	20000460 	.word	0x20000460
 800a578:	20000574 	.word	0x20000574

0800a57c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a584:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <vTaskInternalSetTimeOutState+0x24>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <vTaskInternalSetTimeOutState+0x28>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	605a      	str	r2, [r3, #4]
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	20000578 	.word	0x20000578
 800a5a4:	20000564 	.word	0x20000564

0800a5a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d109      	bne.n	800a5cc <xTaskCheckForTimeOut+0x24>
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	613b      	str	r3, [r7, #16]
 800a5ca:	e7fe      	b.n	800a5ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <xTaskCheckForTimeOut+0x3e>
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	e7fe      	b.n	800a5e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a5e6:	f000 fc89 	bl	800aefc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5ea:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <xTaskCheckForTimeOut+0xb8>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a602:	d102      	bne.n	800a60a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]
 800a608:	e023      	b.n	800a652 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b15      	ldr	r3, [pc, #84]	; (800a664 <xTaskCheckForTimeOut+0xbc>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d007      	beq.n	800a626 <xTaskCheckForTimeOut+0x7e>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d302      	bcc.n	800a626 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a620:	2301      	movs	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
 800a624:	e015      	b.n	800a652 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d20b      	bcs.n	800a648 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff ff9d 	bl	800a57c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a642:	2300      	movs	r3, #0
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	e004      	b.n	800a652 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a64e:	2301      	movs	r3, #1
 800a650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a652:	f000 fc81 	bl	800af58 <vPortExitCritical>

	return xReturn;
 800a656:	69fb      	ldr	r3, [r7, #28]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3720      	adds	r7, #32
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20000564 	.word	0x20000564
 800a664:	20000578 	.word	0x20000578

0800a668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a668:	b480      	push	{r7}
 800a66a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a66c:	4b03      	ldr	r3, [pc, #12]	; (800a67c <vTaskMissedYield+0x14>)
 800a66e:	2201      	movs	r2, #1
 800a670:	601a      	str	r2, [r3, #0]
}
 800a672:	bf00      	nop
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	20000574 	.word	0x20000574

0800a680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a688:	f000 f852 	bl	800a730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a68c:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <prvIdleTask+0x28>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d9f9      	bls.n	800a688 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <prvIdleTask+0x2c>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6a4:	e7f0      	b.n	800a688 <prvIdleTask+0x8>
 800a6a6:	bf00      	nop
 800a6a8:	20000464 	.word	0x20000464
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	607b      	str	r3, [r7, #4]
 800a6ba:	e00c      	b.n	800a6d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4a12      	ldr	r2, [pc, #72]	; (800a710 <prvInitialiseTaskLists+0x60>)
 800a6c8:	4413      	add	r3, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fafc 	bl	8008cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	607b      	str	r3, [r7, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b06      	cmp	r3, #6
 800a6da:	d9ef      	bls.n	800a6bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6dc:	480d      	ldr	r0, [pc, #52]	; (800a714 <prvInitialiseTaskLists+0x64>)
 800a6de:	f7fe faf3 	bl	8008cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6e2:	480d      	ldr	r0, [pc, #52]	; (800a718 <prvInitialiseTaskLists+0x68>)
 800a6e4:	f7fe faf0 	bl	8008cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6e8:	480c      	ldr	r0, [pc, #48]	; (800a71c <prvInitialiseTaskLists+0x6c>)
 800a6ea:	f7fe faed 	bl	8008cc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6ee:	480c      	ldr	r0, [pc, #48]	; (800a720 <prvInitialiseTaskLists+0x70>)
 800a6f0:	f7fe faea 	bl	8008cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6f4:	480b      	ldr	r0, [pc, #44]	; (800a724 <prvInitialiseTaskLists+0x74>)
 800a6f6:	f7fe fae7 	bl	8008cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <prvInitialiseTaskLists+0x78>)
 800a6fc:	4a05      	ldr	r2, [pc, #20]	; (800a714 <prvInitialiseTaskLists+0x64>)
 800a6fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <prvInitialiseTaskLists+0x7c>)
 800a702:	4a05      	ldr	r2, [pc, #20]	; (800a718 <prvInitialiseTaskLists+0x68>)
 800a704:	601a      	str	r2, [r3, #0]
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20000464 	.word	0x20000464
 800a714:	200004f0 	.word	0x200004f0
 800a718:	20000504 	.word	0x20000504
 800a71c:	20000520 	.word	0x20000520
 800a720:	20000534 	.word	0x20000534
 800a724:	2000054c 	.word	0x2000054c
 800a728:	20000518 	.word	0x20000518
 800a72c:	2000051c 	.word	0x2000051c

0800a730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a736:	e019      	b.n	800a76c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a738:	f000 fbe0 	bl	800aefc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a73c:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <prvCheckTasksWaitingTermination+0x4c>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3304      	adds	r3, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe fb47 	bl	8008ddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a74e:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <prvCheckTasksWaitingTermination+0x50>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3b01      	subs	r3, #1
 800a754:	4a0a      	ldr	r2, [pc, #40]	; (800a780 <prvCheckTasksWaitingTermination+0x50>)
 800a756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a758:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <prvCheckTasksWaitingTermination+0x54>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4a09      	ldr	r2, [pc, #36]	; (800a784 <prvCheckTasksWaitingTermination+0x54>)
 800a760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a762:	f000 fbf9 	bl	800af58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f80e 	bl	800a788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a76c:	4b05      	ldr	r3, [pc, #20]	; (800a784 <prvCheckTasksWaitingTermination+0x54>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e1      	bne.n	800a738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20000534 	.word	0x20000534
 800a780:	20000560 	.word	0x20000560
 800a784:	20000548 	.word	0x20000548

0800a788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a796:	2b00      	cmp	r3, #0
 800a798:	d108      	bne.n	800a7ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fd88 	bl	800b2b4 <vPortFree>
				vPortFree( pxTCB );
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fd85 	bl	800b2b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7aa:	e017      	b.n	800a7dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d103      	bne.n	800a7be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fd7c 	bl	800b2b4 <vPortFree>
	}
 800a7bc:	e00e      	b.n	800a7dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d009      	beq.n	800a7dc <prvDeleteTCB+0x54>
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	e7fe      	b.n	800a7da <prvDeleteTCB+0x52>
	}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7ea:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <prvResetNextTaskUnblockTime+0x44>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <prvResetNextTaskUnblockTime+0x14>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e000      	b.n	800a7fa <prvResetNextTaskUnblockTime+0x16>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <prvResetNextTaskUnblockTime+0x48>)
 800a800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a804:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a806:	e008      	b.n	800a81a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a808:	4b07      	ldr	r3, [pc, #28]	; (800a828 <prvResetNextTaskUnblockTime+0x44>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	4a05      	ldr	r2, [pc, #20]	; (800a82c <prvResetNextTaskUnblockTime+0x48>)
 800a818:	6013      	str	r3, [r2, #0]
}
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	20000518 	.word	0x20000518
 800a82c:	20000580 	.word	0x20000580

0800a830 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <xTaskGetSchedulerState+0x34>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d102      	bne.n	800a844 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a83e:	2301      	movs	r3, #1
 800a840:	607b      	str	r3, [r7, #4]
 800a842:	e008      	b.n	800a856 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a844:	4b08      	ldr	r3, [pc, #32]	; (800a868 <xTaskGetSchedulerState+0x38>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d102      	bne.n	800a852 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a84c:	2302      	movs	r3, #2
 800a84e:	607b      	str	r3, [r7, #4]
 800a850:	e001      	b.n	800a856 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a852:	2300      	movs	r3, #0
 800a854:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a856:	687b      	ldr	r3, [r7, #4]
	}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	2000056c 	.word	0x2000056c
 800a868:	20000588 	.word	0x20000588

0800a86c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a878:	2300      	movs	r3, #0
 800a87a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d06e      	beq.n	800a960 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a886:	4b39      	ldr	r3, [pc, #228]	; (800a96c <xTaskPriorityInherit+0x100>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d25e      	bcs.n	800a94e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	2b00      	cmp	r3, #0
 800a896:	db06      	blt.n	800a8a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a898:	4b34      	ldr	r3, [pc, #208]	; (800a96c <xTaskPriorityInherit+0x100>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89e:	f1c3 0207 	rsb	r2, r3, #7
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6959      	ldr	r1, [r3, #20]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4a2e      	ldr	r2, [pc, #184]	; (800a970 <xTaskPriorityInherit+0x104>)
 800a8b8:	4413      	add	r3, r2
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	d101      	bne.n	800a8c2 <xTaskPriorityInherit+0x56>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e000      	b.n	800a8c4 <xTaskPriorityInherit+0x58>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d03a      	beq.n	800a93e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe fa85 	bl	8008ddc <uxListRemove>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d115      	bne.n	800a904 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8dc:	4924      	ldr	r1, [pc, #144]	; (800a970 <xTaskPriorityInherit+0x104>)
 800a8de:	4613      	mov	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	440b      	add	r3, r1
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <xTaskPriorityInherit+0x98>
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f8:	43da      	mvns	r2, r3
 800a8fa:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <xTaskPriorityInherit+0x108>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4013      	ands	r3, r2
 800a900:	4a1c      	ldr	r2, [pc, #112]	; (800a974 <xTaskPriorityInherit+0x108>)
 800a902:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a904:	4b19      	ldr	r3, [pc, #100]	; (800a96c <xTaskPriorityInherit+0x100>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	2201      	movs	r2, #1
 800a914:	409a      	lsls	r2, r3
 800a916:	4b17      	ldr	r3, [pc, #92]	; (800a974 <xTaskPriorityInherit+0x108>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	4a15      	ldr	r2, [pc, #84]	; (800a974 <xTaskPriorityInherit+0x108>)
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a924:	4613      	mov	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4a10      	ldr	r2, [pc, #64]	; (800a970 <xTaskPriorityInherit+0x104>)
 800a92e:	441a      	add	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	3304      	adds	r3, #4
 800a934:	4619      	mov	r1, r3
 800a936:	4610      	mov	r0, r2
 800a938:	f7fe f9f3 	bl	8008d22 <vListInsertEnd>
 800a93c:	e004      	b.n	800a948 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a93e:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <xTaskPriorityInherit+0x100>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a948:	2301      	movs	r3, #1
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	e008      	b.n	800a960 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a952:	4b06      	ldr	r3, [pc, #24]	; (800a96c <xTaskPriorityInherit+0x100>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	429a      	cmp	r2, r3
 800a95a:	d201      	bcs.n	800a960 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a95c:	2301      	movs	r3, #1
 800a95e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a960:	68fb      	ldr	r3, [r7, #12]
	}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	20000460 	.word	0x20000460
 800a970:	20000464 	.word	0x20000464
 800a974:	20000568 	.word	0x20000568

0800a978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d06c      	beq.n	800aa68 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a98e:	4b39      	ldr	r3, [pc, #228]	; (800aa74 <xTaskPriorityDisinherit+0xfc>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	429a      	cmp	r2, r3
 800a996:	d009      	beq.n	800a9ac <xTaskPriorityDisinherit+0x34>
 800a998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	e7fe      	b.n	800a9aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d109      	bne.n	800a9c8 <xTaskPriorityDisinherit+0x50>
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	60bb      	str	r3, [r7, #8]
 800a9c6:	e7fe      	b.n	800a9c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9cc:	1e5a      	subs	r2, r3, #1
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d044      	beq.n	800aa68 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d140      	bne.n	800aa68 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe f9f6 	bl	8008ddc <uxListRemove>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d115      	bne.n	800aa22 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fa:	491f      	ldr	r1, [pc, #124]	; (800aa78 <xTaskPriorityDisinherit+0x100>)
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	440b      	add	r3, r1
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xTaskPriorityDisinherit+0xaa>
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	2201      	movs	r2, #1
 800aa12:	fa02 f303 	lsl.w	r3, r2, r3
 800aa16:	43da      	mvns	r2, r3
 800aa18:	4b18      	ldr	r3, [pc, #96]	; (800aa7c <xTaskPriorityDisinherit+0x104>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	4a17      	ldr	r2, [pc, #92]	; (800aa7c <xTaskPriorityDisinherit+0x104>)
 800aa20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	f1c3 0207 	rsb	r2, r3, #7
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	409a      	lsls	r2, r3
 800aa3e:	4b0f      	ldr	r3, [pc, #60]	; (800aa7c <xTaskPriorityDisinherit+0x104>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	4a0d      	ldr	r2, [pc, #52]	; (800aa7c <xTaskPriorityDisinherit+0x104>)
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	4413      	add	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <xTaskPriorityDisinherit+0x100>)
 800aa56:	441a      	add	r2, r3
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	f7fe f95f 	bl	8008d22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa64:	2301      	movs	r3, #1
 800aa66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa68:	697b      	ldr	r3, [r7, #20]
	}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	20000460 	.word	0x20000460
 800aa78:	20000464 	.word	0x20000464
 800aa7c:	20000568 	.word	0x20000568

0800aa80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 8086 	beq.w	800aba6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d109      	bne.n	800aab6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	e7fe      	b.n	800aab4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d902      	bls.n	800aac6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	61fb      	str	r3, [r7, #28]
 800aac4:	e002      	b.n	800aacc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad0:	69fa      	ldr	r2, [r7, #28]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d067      	beq.n	800aba6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d162      	bne.n	800aba6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aae0:	4b33      	ldr	r3, [pc, #204]	; (800abb0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d109      	bne.n	800aafe <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	60bb      	str	r3, [r7, #8]
 800aafc:	e7fe      	b.n	800aafc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	db04      	blt.n	800ab1c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	f1c3 0207 	rsb	r2, r3, #7
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	6959      	ldr	r1, [r3, #20]
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4a22      	ldr	r2, [pc, #136]	; (800abb4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ab2c:	4413      	add	r3, r2
 800ab2e:	4299      	cmp	r1, r3
 800ab30:	d101      	bne.n	800ab36 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e000      	b.n	800ab38 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800ab36:	2300      	movs	r3, #0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d034      	beq.n	800aba6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fe f94b 	bl	8008ddc <uxListRemove>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d115      	bne.n	800ab78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab50:	4918      	ldr	r1, [pc, #96]	; (800abb4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab66:	2201      	movs	r2, #1
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	43da      	mvns	r2, r3
 800ab6e:	4b12      	ldr	r3, [pc, #72]	; (800abb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4013      	ands	r3, r2
 800ab74:	4a10      	ldr	r2, [pc, #64]	; (800abb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ab76:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	409a      	lsls	r2, r3
 800ab80:	4b0d      	ldr	r3, [pc, #52]	; (800abb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	4a0c      	ldr	r2, [pc, #48]	; (800abb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ab88:	6013      	str	r3, [r2, #0]
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8e:	4613      	mov	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4a07      	ldr	r2, [pc, #28]	; (800abb4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ab98:	441a      	add	r2, r3
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4610      	mov	r0, r2
 800aba2:	f7fe f8be 	bl	8008d22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aba6:	bf00      	nop
 800aba8:	3720      	adds	r7, #32
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20000460 	.word	0x20000460
 800abb4:	20000464 	.word	0x20000464
 800abb8:	20000568 	.word	0x20000568

0800abbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800abbc:	b480      	push	{r7}
 800abbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800abc0:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <pvTaskIncrementMutexHeldCount+0x24>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d004      	beq.n	800abd2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800abc8:	4b05      	ldr	r3, [pc, #20]	; (800abe0 <pvTaskIncrementMutexHeldCount+0x24>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abce:	3201      	adds	r2, #1
 800abd0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800abd2:	4b03      	ldr	r3, [pc, #12]	; (800abe0 <pvTaskIncrementMutexHeldCount+0x24>)
 800abd4:	681b      	ldr	r3, [r3, #0]
	}
 800abd6:	4618      	mov	r0, r3
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	20000460 	.word	0x20000460

0800abe4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abee:	4b29      	ldr	r3, [pc, #164]	; (800ac94 <prvAddCurrentTaskToDelayedList+0xb0>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abf4:	4b28      	ldr	r3, [pc, #160]	; (800ac98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3304      	adds	r3, #4
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fe f8ee 	bl	8008ddc <uxListRemove>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10b      	bne.n	800ac1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ac06:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	43da      	mvns	r2, r3
 800ac14:	4b21      	ldr	r3, [pc, #132]	; (800ac9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	4a20      	ldr	r2, [pc, #128]	; (800ac9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ac1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac24:	d10a      	bne.n	800ac3c <prvAddCurrentTaskToDelayedList+0x58>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d007      	beq.n	800ac3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac2c:	4b1a      	ldr	r3, [pc, #104]	; (800ac98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4619      	mov	r1, r3
 800ac34:	481a      	ldr	r0, [pc, #104]	; (800aca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ac36:	f7fe f874 	bl	8008d22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac3a:	e026      	b.n	800ac8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4413      	add	r3, r2
 800ac42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac44:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d209      	bcs.n	800ac68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac54:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	4b0f      	ldr	r3, [pc, #60]	; (800ac98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4610      	mov	r0, r2
 800ac62:	f7fe f882 	bl	8008d6a <vListInsert>
}
 800ac66:	e010      	b.n	800ac8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac68:	4b0f      	ldr	r3, [pc, #60]	; (800aca8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3304      	adds	r3, #4
 800ac72:	4619      	mov	r1, r3
 800ac74:	4610      	mov	r0, r2
 800ac76:	f7fe f878 	bl	8008d6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac7a:	4b0c      	ldr	r3, [pc, #48]	; (800acac <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d202      	bcs.n	800ac8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ac84:	4a09      	ldr	r2, [pc, #36]	; (800acac <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	6013      	str	r3, [r2, #0]
}
 800ac8a:	bf00      	nop
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	20000564 	.word	0x20000564
 800ac98:	20000460 	.word	0x20000460
 800ac9c:	20000568 	.word	0x20000568
 800aca0:	2000054c 	.word	0x2000054c
 800aca4:	2000051c 	.word	0x2000051c
 800aca8:	20000518 	.word	0x20000518
 800acac:	20000580 	.word	0x20000580

0800acb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	3b04      	subs	r3, #4
 800acc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3b04      	subs	r3, #4
 800acce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f023 0201 	bic.w	r2, r3, #1
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3b04      	subs	r3, #4
 800acde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ace0:	4a0c      	ldr	r2, [pc, #48]	; (800ad14 <pxPortInitialiseStack+0x64>)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3b14      	subs	r3, #20
 800acea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3b04      	subs	r3, #4
 800acf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f06f 0202 	mvn.w	r2, #2
 800acfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3b20      	subs	r3, #32
 800ad04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad06:	68fb      	ldr	r3, [r7, #12]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	0800ad19 	.word	0x0800ad19

0800ad18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad22:	4b11      	ldr	r3, [pc, #68]	; (800ad68 <prvTaskExitError+0x50>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad2a:	d009      	beq.n	800ad40 <prvTaskExitError+0x28>
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	60fb      	str	r3, [r7, #12]
 800ad3e:	e7fe      	b.n	800ad3e <prvTaskExitError+0x26>
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad52:	bf00      	nop
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0fc      	beq.n	800ad54 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad5a:	bf00      	nop
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	20000118 	.word	0x20000118
 800ad6c:	00000000 	.word	0x00000000

0800ad70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <pxCurrentTCBConst2>)
 800ad72:	6819      	ldr	r1, [r3, #0]
 800ad74:	6808      	ldr	r0, [r1, #0]
 800ad76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7a:	f380 8809 	msr	PSP, r0
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f04f 0000 	mov.w	r0, #0
 800ad86:	f380 8811 	msr	BASEPRI, r0
 800ad8a:	4770      	bx	lr
 800ad8c:	f3af 8000 	nop.w

0800ad90 <pxCurrentTCBConst2>:
 800ad90:	20000460 	.word	0x20000460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop

0800ad98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad98:	4808      	ldr	r0, [pc, #32]	; (800adbc <prvPortStartFirstTask+0x24>)
 800ad9a:	6800      	ldr	r0, [r0, #0]
 800ad9c:	6800      	ldr	r0, [r0, #0]
 800ad9e:	f380 8808 	msr	MSP, r0
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f380 8814 	msr	CONTROL, r0
 800adaa:	b662      	cpsie	i
 800adac:	b661      	cpsie	f
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	df00      	svc	0
 800adb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adba:	bf00      	nop
 800adbc:	e000ed08 	.word	0xe000ed08

0800adc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800adc6:	4b44      	ldr	r3, [pc, #272]	; (800aed8 <xPortStartScheduler+0x118>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a44      	ldr	r2, [pc, #272]	; (800aedc <xPortStartScheduler+0x11c>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d109      	bne.n	800ade4 <xPortStartScheduler+0x24>
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	613b      	str	r3, [r7, #16]
 800ade2:	e7fe      	b.n	800ade2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ade4:	4b3c      	ldr	r3, [pc, #240]	; (800aed8 <xPortStartScheduler+0x118>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a3d      	ldr	r2, [pc, #244]	; (800aee0 <xPortStartScheduler+0x120>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d109      	bne.n	800ae02 <xPortStartScheduler+0x42>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	e7fe      	b.n	800ae00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae02:	4b38      	ldr	r3, [pc, #224]	; (800aee4 <xPortStartScheduler+0x124>)
 800ae04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	22ff      	movs	r2, #255	; 0xff
 800ae12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae1c:	78fb      	ldrb	r3, [r7, #3]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	4b30      	ldr	r3, [pc, #192]	; (800aee8 <xPortStartScheduler+0x128>)
 800ae28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae2a:	4b30      	ldr	r3, [pc, #192]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae2c:	2207      	movs	r2, #7
 800ae2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae30:	e009      	b.n	800ae46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ae32:	4b2e      	ldr	r3, [pc, #184]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	4a2c      	ldr	r2, [pc, #176]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae3c:	78fb      	ldrb	r3, [r7, #3]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4e:	2b80      	cmp	r3, #128	; 0x80
 800ae50:	d0ef      	beq.n	800ae32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae52:	4b26      	ldr	r3, [pc, #152]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f1c3 0307 	rsb	r3, r3, #7
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d009      	beq.n	800ae72 <xPortStartScheduler+0xb2>
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	60bb      	str	r3, [r7, #8]
 800ae70:	e7fe      	b.n	800ae70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae72:	4b1e      	ldr	r3, [pc, #120]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	021b      	lsls	r3, r3, #8
 800ae78:	4a1c      	ldr	r2, [pc, #112]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae7c:	4b1b      	ldr	r3, [pc, #108]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae84:	4a19      	ldr	r2, [pc, #100]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae90:	4b17      	ldr	r3, [pc, #92]	; (800aef0 <xPortStartScheduler+0x130>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a16      	ldr	r2, [pc, #88]	; (800aef0 <xPortStartScheduler+0x130>)
 800ae96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae9c:	4b14      	ldr	r3, [pc, #80]	; (800aef0 <xPortStartScheduler+0x130>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a13      	ldr	r2, [pc, #76]	; (800aef0 <xPortStartScheduler+0x130>)
 800aea2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aea6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aea8:	f000 f8d6 	bl	800b058 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aeac:	4b11      	ldr	r3, [pc, #68]	; (800aef4 <xPortStartScheduler+0x134>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aeb2:	f000 f8f5 	bl	800b0a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aeb6:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <xPortStartScheduler+0x138>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a0f      	ldr	r2, [pc, #60]	; (800aef8 <xPortStartScheduler+0x138>)
 800aebc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aec0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aec2:	f7ff ff69 	bl	800ad98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aec6:	f7ff fa79 	bl	800a3bc <vTaskSwitchContext>
	prvTaskExitError();
 800aeca:	f7ff ff25 	bl	800ad18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	e000ed00 	.word	0xe000ed00
 800aedc:	410fc271 	.word	0x410fc271
 800aee0:	410fc270 	.word	0x410fc270
 800aee4:	e000e400 	.word	0xe000e400
 800aee8:	2000058c 	.word	0x2000058c
 800aeec:	20000590 	.word	0x20000590
 800aef0:	e000ed20 	.word	0xe000ed20
 800aef4:	20000118 	.word	0x20000118
 800aef8:	e000ef34 	.word	0xe000ef34

0800aefc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af14:	4b0e      	ldr	r3, [pc, #56]	; (800af50 <vPortEnterCritical+0x54>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3301      	adds	r3, #1
 800af1a:	4a0d      	ldr	r2, [pc, #52]	; (800af50 <vPortEnterCritical+0x54>)
 800af1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af1e:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <vPortEnterCritical+0x54>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d10e      	bne.n	800af44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af26:	4b0b      	ldr	r3, [pc, #44]	; (800af54 <vPortEnterCritical+0x58>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d009      	beq.n	800af44 <vPortEnterCritical+0x48>
 800af30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af34:	f383 8811 	msr	BASEPRI, r3
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	603b      	str	r3, [r7, #0]
 800af42:	e7fe      	b.n	800af42 <vPortEnterCritical+0x46>
	}
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	20000118 	.word	0x20000118
 800af54:	e000ed04 	.word	0xe000ed04

0800af58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af5e:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <vPortExitCritical+0x4c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d109      	bne.n	800af7a <vPortExitCritical+0x22>
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	607b      	str	r3, [r7, #4]
 800af78:	e7fe      	b.n	800af78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800af7a:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <vPortExitCritical+0x4c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3b01      	subs	r3, #1
 800af80:	4a08      	ldr	r2, [pc, #32]	; (800afa4 <vPortExitCritical+0x4c>)
 800af82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af84:	4b07      	ldr	r3, [pc, #28]	; (800afa4 <vPortExitCritical+0x4c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <vPortExitCritical+0x3e>
 800af8c:	2300      	movs	r3, #0
 800af8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800af96:	bf00      	nop
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000118 	.word	0x20000118
	...

0800afb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afb0:	f3ef 8009 	mrs	r0, PSP
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	4b15      	ldr	r3, [pc, #84]	; (800b010 <pxCurrentTCBConst>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	f01e 0f10 	tst.w	lr, #16
 800afc0:	bf08      	it	eq
 800afc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	6010      	str	r0, [r2, #0]
 800afcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afd4:	f380 8811 	msr	BASEPRI, r0
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f7ff f9ec 	bl	800a3bc <vTaskSwitchContext>
 800afe4:	f04f 0000 	mov.w	r0, #0
 800afe8:	f380 8811 	msr	BASEPRI, r0
 800afec:	bc09      	pop	{r0, r3}
 800afee:	6819      	ldr	r1, [r3, #0]
 800aff0:	6808      	ldr	r0, [r1, #0]
 800aff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff6:	f01e 0f10 	tst.w	lr, #16
 800affa:	bf08      	it	eq
 800affc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b000:	f380 8809 	msr	PSP, r0
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	f3af 8000 	nop.w

0800b010 <pxCurrentTCBConst>:
 800b010:	20000460 	.word	0x20000460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop

0800b018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b030:	f7ff f908 	bl	800a244 <xTaskIncrementTick>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b03a:	4b06      	ldr	r3, [pc, #24]	; (800b054 <SysTick_Handler+0x3c>)
 800b03c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	2300      	movs	r3, #0
 800b044:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b04c:	bf00      	nop
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	e000ed04 	.word	0xe000ed04

0800b058 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b058:	b480      	push	{r7}
 800b05a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b05c:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <vPortSetupTimerInterrupt+0x34>)
 800b05e:	2200      	movs	r2, #0
 800b060:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b062:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <vPortSetupTimerInterrupt+0x38>)
 800b064:	2200      	movs	r2, #0
 800b066:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b068:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <vPortSetupTimerInterrupt+0x3c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a0a      	ldr	r2, [pc, #40]	; (800b098 <vPortSetupTimerInterrupt+0x40>)
 800b06e:	fba2 2303 	umull	r2, r3, r2, r3
 800b072:	099b      	lsrs	r3, r3, #6
 800b074:	4a09      	ldr	r2, [pc, #36]	; (800b09c <vPortSetupTimerInterrupt+0x44>)
 800b076:	3b01      	subs	r3, #1
 800b078:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b07a:	4b04      	ldr	r3, [pc, #16]	; (800b08c <vPortSetupTimerInterrupt+0x34>)
 800b07c:	2207      	movs	r2, #7
 800b07e:	601a      	str	r2, [r3, #0]
}
 800b080:	bf00      	nop
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	e000e010 	.word	0xe000e010
 800b090:	e000e018 	.word	0xe000e018
 800b094:	20000000 	.word	0x20000000
 800b098:	10624dd3 	.word	0x10624dd3
 800b09c:	e000e014 	.word	0xe000e014

0800b0a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0b0 <vPortEnableVFP+0x10>
 800b0a4:	6801      	ldr	r1, [r0, #0]
 800b0a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0aa:	6001      	str	r1, [r0, #0]
 800b0ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0ae:	bf00      	nop
 800b0b0:	e000ed88 	.word	0xe000ed88

0800b0b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0ba:	f3ef 8305 	mrs	r3, IPSR
 800b0be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b0f      	cmp	r3, #15
 800b0c4:	d913      	bls.n	800b0ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0c6:	4a16      	ldr	r2, [pc, #88]	; (800b120 <vPortValidateInterruptPriority+0x6c>)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0d0:	4b14      	ldr	r3, [pc, #80]	; (800b124 <vPortValidateInterruptPriority+0x70>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	7afa      	ldrb	r2, [r7, #11]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d209      	bcs.n	800b0ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	607b      	str	r3, [r7, #4]
 800b0ec:	e7fe      	b.n	800b0ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0ee:	4b0e      	ldr	r3, [pc, #56]	; (800b128 <vPortValidateInterruptPriority+0x74>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	; (800b12c <vPortValidateInterruptPriority+0x78>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d909      	bls.n	800b112 <vPortValidateInterruptPriority+0x5e>
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	603b      	str	r3, [r7, #0]
 800b110:	e7fe      	b.n	800b110 <vPortValidateInterruptPriority+0x5c>
	}
 800b112:	bf00      	nop
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	e000e3f0 	.word	0xe000e3f0
 800b124:	2000058c 	.word	0x2000058c
 800b128:	e000ed0c 	.word	0xe000ed0c
 800b12c:	20000590 	.word	0x20000590

0800b130 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08a      	sub	sp, #40	; 0x28
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b138:	2300      	movs	r3, #0
 800b13a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b13c:	f7fe ffb6 	bl	800a0ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b140:	4b57      	ldr	r3, [pc, #348]	; (800b2a0 <pvPortMalloc+0x170>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b148:	f000 f90c 	bl	800b364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b14c:	4b55      	ldr	r3, [pc, #340]	; (800b2a4 <pvPortMalloc+0x174>)
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4013      	ands	r3, r2
 800b154:	2b00      	cmp	r3, #0
 800b156:	f040 808c 	bne.w	800b272 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d01c      	beq.n	800b19a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b160:	2208      	movs	r2, #8
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4413      	add	r3, r2
 800b166:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f003 0307 	and.w	r3, r3, #7
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d013      	beq.n	800b19a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f023 0307 	bic.w	r3, r3, #7
 800b178:	3308      	adds	r3, #8
 800b17a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f003 0307 	and.w	r3, r3, #7
 800b182:	2b00      	cmp	r3, #0
 800b184:	d009      	beq.n	800b19a <pvPortMalloc+0x6a>
 800b186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	617b      	str	r3, [r7, #20]
 800b198:	e7fe      	b.n	800b198 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d068      	beq.n	800b272 <pvPortMalloc+0x142>
 800b1a0:	4b41      	ldr	r3, [pc, #260]	; (800b2a8 <pvPortMalloc+0x178>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d863      	bhi.n	800b272 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1aa:	4b40      	ldr	r3, [pc, #256]	; (800b2ac <pvPortMalloc+0x17c>)
 800b1ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1ae:	4b3f      	ldr	r3, [pc, #252]	; (800b2ac <pvPortMalloc+0x17c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1b4:	e004      	b.n	800b1c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d903      	bls.n	800b1d2 <pvPortMalloc+0xa2>
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f1      	bne.n	800b1b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1d2:	4b33      	ldr	r3, [pc, #204]	; (800b2a0 <pvPortMalloc+0x170>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d04a      	beq.n	800b272 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2208      	movs	r2, #8
 800b1e2:	4413      	add	r3, r2
 800b1e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	1ad2      	subs	r2, r2, r3
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d91e      	bls.n	800b23c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d009      	beq.n	800b224 <pvPortMalloc+0xf4>
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	613b      	str	r3, [r7, #16]
 800b222:	e7fe      	b.n	800b222 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	1ad2      	subs	r2, r2, r3
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b236:	69b8      	ldr	r0, [r7, #24]
 800b238:	f000 f8f6 	bl	800b428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b23c:	4b1a      	ldr	r3, [pc, #104]	; (800b2a8 <pvPortMalloc+0x178>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	4a18      	ldr	r2, [pc, #96]	; (800b2a8 <pvPortMalloc+0x178>)
 800b248:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b24a:	4b17      	ldr	r3, [pc, #92]	; (800b2a8 <pvPortMalloc+0x178>)
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	4b18      	ldr	r3, [pc, #96]	; (800b2b0 <pvPortMalloc+0x180>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	429a      	cmp	r2, r3
 800b254:	d203      	bcs.n	800b25e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b256:	4b14      	ldr	r3, [pc, #80]	; (800b2a8 <pvPortMalloc+0x178>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a15      	ldr	r2, [pc, #84]	; (800b2b0 <pvPortMalloc+0x180>)
 800b25c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	4b10      	ldr	r3, [pc, #64]	; (800b2a4 <pvPortMalloc+0x174>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	431a      	orrs	r2, r3
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	2200      	movs	r2, #0
 800b270:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b272:	f7fe ff29 	bl	800a0c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	f003 0307 	and.w	r3, r3, #7
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d009      	beq.n	800b294 <pvPortMalloc+0x164>
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	60fb      	str	r3, [r7, #12]
 800b292:	e7fe      	b.n	800b292 <pvPortMalloc+0x162>
	return pvReturn;
 800b294:	69fb      	ldr	r3, [r7, #28]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3728      	adds	r7, #40	; 0x28
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	2000419c 	.word	0x2000419c
 800b2a4:	200041a8 	.word	0x200041a8
 800b2a8:	200041a0 	.word	0x200041a0
 800b2ac:	20004194 	.word	0x20004194
 800b2b0:	200041a4 	.word	0x200041a4

0800b2b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d046      	beq.n	800b354 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	425b      	negs	r3, r3
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	4b20      	ldr	r3, [pc, #128]	; (800b35c <vPortFree+0xa8>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4013      	ands	r3, r2
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d109      	bne.n	800b2f6 <vPortFree+0x42>
 800b2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	e7fe      	b.n	800b2f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <vPortFree+0x5e>
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	60bb      	str	r3, [r7, #8]
 800b310:	e7fe      	b.n	800b310 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	4b11      	ldr	r3, [pc, #68]	; (800b35c <vPortFree+0xa8>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4013      	ands	r3, r2
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d019      	beq.n	800b354 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d115      	bne.n	800b354 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	4b0b      	ldr	r3, [pc, #44]	; (800b35c <vPortFree+0xa8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	43db      	mvns	r3, r3
 800b332:	401a      	ands	r2, r3
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b338:	f7fe feb8 	bl	800a0ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	4b07      	ldr	r3, [pc, #28]	; (800b360 <vPortFree+0xac>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4413      	add	r3, r2
 800b346:	4a06      	ldr	r2, [pc, #24]	; (800b360 <vPortFree+0xac>)
 800b348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b34a:	6938      	ldr	r0, [r7, #16]
 800b34c:	f000 f86c 	bl	800b428 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b350:	f7fe feba 	bl	800a0c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b354:	bf00      	nop
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	200041a8 	.word	0x200041a8
 800b360:	200041a0 	.word	0x200041a0

0800b364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b36a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b370:	4b27      	ldr	r3, [pc, #156]	; (800b410 <prvHeapInit+0xac>)
 800b372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00c      	beq.n	800b398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3307      	adds	r3, #7
 800b382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0307 	bic.w	r3, r3, #7
 800b38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	4a1f      	ldr	r2, [pc, #124]	; (800b410 <prvHeapInit+0xac>)
 800b394:	4413      	add	r3, r2
 800b396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b39c:	4a1d      	ldr	r2, [pc, #116]	; (800b414 <prvHeapInit+0xb0>)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3a2:	4b1c      	ldr	r3, [pc, #112]	; (800b414 <prvHeapInit+0xb0>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3b0:	2208      	movs	r2, #8
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	1a9b      	subs	r3, r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f023 0307 	bic.w	r3, r3, #7
 800b3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4a15      	ldr	r2, [pc, #84]	; (800b418 <prvHeapInit+0xb4>)
 800b3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3c6:	4b14      	ldr	r3, [pc, #80]	; (800b418 <prvHeapInit+0xb4>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3ce:	4b12      	ldr	r3, [pc, #72]	; (800b418 <prvHeapInit+0xb4>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	1ad2      	subs	r2, r2, r3
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3e4:	4b0c      	ldr	r3, [pc, #48]	; (800b418 <prvHeapInit+0xb4>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	4a0a      	ldr	r2, [pc, #40]	; (800b41c <prvHeapInit+0xb8>)
 800b3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	4a09      	ldr	r2, [pc, #36]	; (800b420 <prvHeapInit+0xbc>)
 800b3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3fc:	4b09      	ldr	r3, [pc, #36]	; (800b424 <prvHeapInit+0xc0>)
 800b3fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b402:	601a      	str	r2, [r3, #0]
}
 800b404:	bf00      	nop
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20000594 	.word	0x20000594
 800b414:	20004194 	.word	0x20004194
 800b418:	2000419c 	.word	0x2000419c
 800b41c:	200041a4 	.word	0x200041a4
 800b420:	200041a0 	.word	0x200041a0
 800b424:	200041a8 	.word	0x200041a8

0800b428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b430:	4b28      	ldr	r3, [pc, #160]	; (800b4d4 <prvInsertBlockIntoFreeList+0xac>)
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	e002      	b.n	800b43c <prvInsertBlockIntoFreeList+0x14>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	429a      	cmp	r2, r3
 800b444:	d8f7      	bhi.n	800b436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	4413      	add	r3, r2
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	429a      	cmp	r2, r3
 800b456:	d108      	bne.n	800b46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	441a      	add	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d118      	bne.n	800b4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	4b15      	ldr	r3, [pc, #84]	; (800b4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d00d      	beq.n	800b4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	441a      	add	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	e008      	b.n	800b4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	e003      	b.n	800b4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d002      	beq.n	800b4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4c6:	bf00      	nop
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	20004194 	.word	0x20004194
 800b4d8:	2000419c 	.word	0x2000419c

0800b4dc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800b4e4:	4b29      	ldr	r3, [pc, #164]	; (800b58c <tcpip_thread+0xb0>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d005      	beq.n	800b4f8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800b4ec:	4b27      	ldr	r3, [pc, #156]	; (800b58c <tcpip_thread+0xb0>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a27      	ldr	r2, [pc, #156]	; (800b590 <tcpip_thread+0xb4>)
 800b4f2:	6812      	ldr	r2, [r2, #0]
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800b4f8:	4826      	ldr	r0, [pc, #152]	; (800b594 <tcpip_thread+0xb8>)
 800b4fa:	f008 fd1d 	bl	8013f38 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800b4fe:	4825      	ldr	r0, [pc, #148]	; (800b594 <tcpip_thread+0xb8>)
 800b500:	f008 fd29 	bl	8013f56 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800b504:	f107 030c 	add.w	r3, r7, #12
 800b508:	4619      	mov	r1, r3
 800b50a:	4823      	ldr	r0, [pc, #140]	; (800b598 <tcpip_thread+0xbc>)
 800b50c:	f006 fa22 	bl	8011954 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b510:	4820      	ldr	r0, [pc, #128]	; (800b594 <tcpip_thread+0xb8>)
 800b512:	f008 fd11 	bl	8013f38 <sys_mutex_lock>
    if (msg == NULL) {
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b51c:	4b1f      	ldr	r3, [pc, #124]	; (800b59c <tcpip_thread+0xc0>)
 800b51e:	2269      	movs	r2, #105	; 0x69
 800b520:	491f      	ldr	r1, [pc, #124]	; (800b5a0 <tcpip_thread+0xc4>)
 800b522:	4820      	ldr	r0, [pc, #128]	; (800b5a4 <tcpip_thread+0xc8>)
 800b524:	f009 fb40 	bl	8014ba8 <iprintf>
      continue;
 800b528:	e02f      	b.n	800b58a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b03      	cmp	r3, #3
 800b530:	d011      	beq.n	800b556 <tcpip_thread+0x7a>
 800b532:	2b04      	cmp	r3, #4
 800b534:	d01b      	beq.n	800b56e <tcpip_thread+0x92>
 800b536:	2b02      	cmp	r3, #2
 800b538:	d120      	bne.n	800b57c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	6850      	ldr	r0, [r2, #4]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	6892      	ldr	r2, [r2, #8]
 800b546:	4611      	mov	r1, r2
 800b548:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4619      	mov	r1, r3
 800b54e:	2008      	movs	r0, #8
 800b550:	f000 fd62 	bl	800c018 <memp_free>
      break;
 800b554:	e019      	b.n	800b58a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	6892      	ldr	r2, [r2, #8]
 800b55e:	4610      	mov	r0, r2
 800b560:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4619      	mov	r1, r3
 800b566:	2007      	movs	r0, #7
 800b568:	f000 fd56 	bl	800c018 <memp_free>
      break;
 800b56c:	e00d      	b.n	800b58a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	6892      	ldr	r2, [r2, #8]
 800b576:	4610      	mov	r0, r2
 800b578:	4798      	blx	r3
      break;
 800b57a:	e006      	b.n	800b58a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <tcpip_thread+0xc0>)
 800b57e:	229b      	movs	r2, #155	; 0x9b
 800b580:	4907      	ldr	r1, [pc, #28]	; (800b5a0 <tcpip_thread+0xc4>)
 800b582:	4808      	ldr	r0, [pc, #32]	; (800b5a4 <tcpip_thread+0xc8>)
 800b584:	f009 fb10 	bl	8014ba8 <iprintf>
      break;
 800b588:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800b58a:	e7b8      	b.n	800b4fe <tcpip_thread+0x22>
 800b58c:	200041ac 	.word	0x200041ac
 800b590:	200041b0 	.word	0x200041b0
 800b594:	200074c4 	.word	0x200074c4
 800b598:	200041b4 	.word	0x200041b4
 800b59c:	08015964 	.word	0x08015964
 800b5a0:	08015994 	.word	0x08015994
 800b5a4:	080159b4 	.word	0x080159b4

0800b5a8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800b5b4:	481a      	ldr	r0, [pc, #104]	; (800b620 <tcpip_inpkt+0x78>)
 800b5b6:	f008 fc83 	bl	8013ec0 <sys_mbox_valid>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d105      	bne.n	800b5cc <tcpip_inpkt+0x24>
 800b5c0:	4b18      	ldr	r3, [pc, #96]	; (800b624 <tcpip_inpkt+0x7c>)
 800b5c2:	22b5      	movs	r2, #181	; 0xb5
 800b5c4:	4918      	ldr	r1, [pc, #96]	; (800b628 <tcpip_inpkt+0x80>)
 800b5c6:	4819      	ldr	r0, [pc, #100]	; (800b62c <tcpip_inpkt+0x84>)
 800b5c8:	f009 faee 	bl	8014ba8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b5cc:	2008      	movs	r0, #8
 800b5ce:	f000 fcd1 	bl	800bf74 <memp_malloc>
 800b5d2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d102      	bne.n	800b5e0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b5da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5de:	e01a      	b.n	800b616 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800b5f8:	6979      	ldr	r1, [r7, #20]
 800b5fa:	4809      	ldr	r0, [pc, #36]	; (800b620 <tcpip_inpkt+0x78>)
 800b5fc:	f008 fc07 	bl	8013e0e <sys_mbox_trypost>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d006      	beq.n	800b614 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b606:	6979      	ldr	r1, [r7, #20]
 800b608:	2008      	movs	r0, #8
 800b60a:	f000 fd05 	bl	800c018 <memp_free>
    return ERR_MEM;
 800b60e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b612:	e000      	b.n	800b616 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b614:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	200041b4 	.word	0x200041b4
 800b624:	08015964 	.word	0x08015964
 800b628:	080159dc 	.word	0x080159dc
 800b62c:	080159b4 	.word	0x080159b4

0800b630 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b640:	f003 0318 	and.w	r3, r3, #24
 800b644:	2b00      	cmp	r3, #0
 800b646:	d006      	beq.n	800b656 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b648:	4a08      	ldr	r2, [pc, #32]	; (800b66c <tcpip_input+0x3c>)
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f7ff ffab 	bl	800b5a8 <tcpip_inpkt>
 800b652:	4603      	mov	r3, r0
 800b654:	e005      	b.n	800b662 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800b656:	4a06      	ldr	r2, [pc, #24]	; (800b670 <tcpip_input+0x40>)
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff ffa4 	bl	800b5a8 <tcpip_inpkt>
 800b660:	4603      	mov	r3, r0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	08013be9 	.word	0x08013be9
 800b670:	08012bbd 	.word	0x08012bbd

0800b674 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800b682:	481d      	ldr	r0, [pc, #116]	; (800b6f8 <tcpip_callback_with_block+0x84>)
 800b684:	f008 fc1c 	bl	8013ec0 <sys_mbox_valid>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d105      	bne.n	800b69a <tcpip_callback_with_block+0x26>
 800b68e:	4b1b      	ldr	r3, [pc, #108]	; (800b6fc <tcpip_callback_with_block+0x88>)
 800b690:	22ee      	movs	r2, #238	; 0xee
 800b692:	491b      	ldr	r1, [pc, #108]	; (800b700 <tcpip_callback_with_block+0x8c>)
 800b694:	481b      	ldr	r0, [pc, #108]	; (800b704 <tcpip_callback_with_block+0x90>)
 800b696:	f009 fa87 	bl	8014ba8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b69a:	2007      	movs	r0, #7
 800b69c:	f000 fc6a 	bl	800bf74 <memp_malloc>
 800b6a0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d102      	bne.n	800b6ae <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800b6a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6ac:	e01f      	b.n	800b6ee <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2203      	movs	r2, #3
 800b6b2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	609a      	str	r2, [r3, #8]
  if (block) {
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d004      	beq.n	800b6d0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800b6c6:	6979      	ldr	r1, [r7, #20]
 800b6c8:	480b      	ldr	r0, [pc, #44]	; (800b6f8 <tcpip_callback_with_block+0x84>)
 800b6ca:	f008 fb8b 	bl	8013de4 <sys_mbox_post>
 800b6ce:	e00d      	b.n	800b6ec <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800b6d0:	6979      	ldr	r1, [r7, #20]
 800b6d2:	4809      	ldr	r0, [pc, #36]	; (800b6f8 <tcpip_callback_with_block+0x84>)
 800b6d4:	f008 fb9b 	bl	8013e0e <sys_mbox_trypost>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d006      	beq.n	800b6ec <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b6de:	6979      	ldr	r1, [r7, #20]
 800b6e0:	2007      	movs	r0, #7
 800b6e2:	f000 fc99 	bl	800c018 <memp_free>
      return ERR_MEM;
 800b6e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6ea:	e000      	b.n	800b6ee <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	200041b4 	.word	0x200041b4
 800b6fc:	08015964 	.word	0x08015964
 800b700:	080159dc 	.word	0x080159dc
 800b704:	080159b4 	.word	0x080159b4

0800b708 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af02      	add	r7, sp, #8
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b712:	f000 f86a 	bl	800b7ea <lwip_init>

  tcpip_init_done = initfunc;
 800b716:	4a17      	ldr	r2, [pc, #92]	; (800b774 <tcpip_init+0x6c>)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b71c:	4a16      	ldr	r2, [pc, #88]	; (800b778 <tcpip_init+0x70>)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b722:	2106      	movs	r1, #6
 800b724:	4815      	ldr	r0, [pc, #84]	; (800b77c <tcpip_init+0x74>)
 800b726:	f008 fb3b 	bl	8013da0 <sys_mbox_new>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d006      	beq.n	800b73e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b730:	4b13      	ldr	r3, [pc, #76]	; (800b780 <tcpip_init+0x78>)
 800b732:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b736:	4913      	ldr	r1, [pc, #76]	; (800b784 <tcpip_init+0x7c>)
 800b738:	4813      	ldr	r0, [pc, #76]	; (800b788 <tcpip_init+0x80>)
 800b73a:	f009 fa35 	bl	8014ba8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b73e:	4813      	ldr	r0, [pc, #76]	; (800b78c <tcpip_init+0x84>)
 800b740:	f008 fbde 	bl	8013f00 <sys_mutex_new>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d006      	beq.n	800b758 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b74a:	4b0d      	ldr	r3, [pc, #52]	; (800b780 <tcpip_init+0x78>)
 800b74c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800b750:	490f      	ldr	r1, [pc, #60]	; (800b790 <tcpip_init+0x88>)
 800b752:	480d      	ldr	r0, [pc, #52]	; (800b788 <tcpip_init+0x80>)
 800b754:	f009 fa28 	bl	8014ba8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b758:	2303      	movs	r3, #3
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b760:	2200      	movs	r2, #0
 800b762:	490c      	ldr	r1, [pc, #48]	; (800b794 <tcpip_init+0x8c>)
 800b764:	480c      	ldr	r0, [pc, #48]	; (800b798 <tcpip_init+0x90>)
 800b766:	f008 fc03 	bl	8013f70 <sys_thread_new>
}
 800b76a:	bf00      	nop
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	200041ac 	.word	0x200041ac
 800b778:	200041b0 	.word	0x200041b0
 800b77c:	200041b4 	.word	0x200041b4
 800b780:	08015964 	.word	0x08015964
 800b784:	080159ec 	.word	0x080159ec
 800b788:	080159b4 	.word	0x080159b4
 800b78c:	200074c4 	.word	0x200074c4
 800b790:	08015a10 	.word	0x08015a10
 800b794:	0800b4dd 	.word	0x0800b4dd
 800b798:	08015a34 	.word	0x08015a34

0800b79c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800b7a6:	88fb      	ldrh	r3, [r7, #6]
 800b7a8:	ba5b      	rev16	r3, r3
 800b7aa:	b29b      	uxth	r3, r3
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	061a      	lsls	r2, r3, #24
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b7cc:	431a      	orrs	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	0a1b      	lsrs	r3, r3, #8
 800b7d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	0e1b      	lsrs	r3, r3, #24
 800b7dc:	4313      	orrs	r3, r2
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b7f4:	f008 fb76 	bl	8013ee4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b7f8:	f000 f8a4 	bl	800b944 <mem_init>
  memp_init();
 800b7fc:	f000 fb6e 	bl	800bedc <memp_init>
  pbuf_init();
  netif_init();
 800b800:	f000 fc34 	bl	800c06c <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b804:	f001 fbd0 	bl	800cfa8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800b808:	f005 ff60 	bl	80116cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b81c:	4b40      	ldr	r3, [pc, #256]	; (800b920 <plug_holes+0x10c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	429a      	cmp	r2, r3
 800b824:	d206      	bcs.n	800b834 <plug_holes+0x20>
 800b826:	4b3f      	ldr	r3, [pc, #252]	; (800b924 <plug_holes+0x110>)
 800b828:	f240 125d 	movw	r2, #349	; 0x15d
 800b82c:	493e      	ldr	r1, [pc, #248]	; (800b928 <plug_holes+0x114>)
 800b82e:	483f      	ldr	r0, [pc, #252]	; (800b92c <plug_holes+0x118>)
 800b830:	f009 f9ba 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b834:	4b3e      	ldr	r3, [pc, #248]	; (800b930 <plug_holes+0x11c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d306      	bcc.n	800b84c <plug_holes+0x38>
 800b83e:	4b39      	ldr	r3, [pc, #228]	; (800b924 <plug_holes+0x110>)
 800b840:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b844:	493b      	ldr	r1, [pc, #236]	; (800b934 <plug_holes+0x120>)
 800b846:	4839      	ldr	r0, [pc, #228]	; (800b92c <plug_holes+0x118>)
 800b848:	f009 f9ae 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	791b      	ldrb	r3, [r3, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d006      	beq.n	800b862 <plug_holes+0x4e>
 800b854:	4b33      	ldr	r3, [pc, #204]	; (800b924 <plug_holes+0x110>)
 800b856:	f240 125f 	movw	r2, #351	; 0x15f
 800b85a:	4937      	ldr	r1, [pc, #220]	; (800b938 <plug_holes+0x124>)
 800b85c:	4833      	ldr	r0, [pc, #204]	; (800b92c <plug_holes+0x118>)
 800b85e:	f009 f9a3 	bl	8014ba8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b86a:	d906      	bls.n	800b87a <plug_holes+0x66>
 800b86c:	4b2d      	ldr	r3, [pc, #180]	; (800b924 <plug_holes+0x110>)
 800b86e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800b872:	4932      	ldr	r1, [pc, #200]	; (800b93c <plug_holes+0x128>)
 800b874:	482d      	ldr	r0, [pc, #180]	; (800b92c <plug_holes+0x118>)
 800b876:	f009 f997 	bl	8014ba8 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800b87a:	4b29      	ldr	r3, [pc, #164]	; (800b920 <plug_holes+0x10c>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	8812      	ldrh	r2, [r2, #0]
 800b882:	4413      	add	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d01f      	beq.n	800b8ce <plug_holes+0xba>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	791b      	ldrb	r3, [r3, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d11b      	bne.n	800b8ce <plug_holes+0xba>
 800b896:	4b26      	ldr	r3, [pc, #152]	; (800b930 <plug_holes+0x11c>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d016      	beq.n	800b8ce <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b8a0:	4b27      	ldr	r3, [pc, #156]	; (800b940 <plug_holes+0x12c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d102      	bne.n	800b8b0 <plug_holes+0x9c>
      lfree = mem;
 800b8aa:	4a25      	ldr	r2, [pc, #148]	; (800b940 <plug_holes+0x12c>)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	881a      	ldrh	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a19      	ldr	r2, [pc, #100]	; (800b920 <plug_holes+0x10c>)
 800b8bc:	6812      	ldr	r2, [r2, #0]
 800b8be:	1a99      	subs	r1, r3, r2
 800b8c0:	4b17      	ldr	r3, [pc, #92]	; (800b920 <plug_holes+0x10c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	8812      	ldrh	r2, [r2, #0]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	b28a      	uxth	r2, r1
 800b8cc:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800b8ce:	4b14      	ldr	r3, [pc, #80]	; (800b920 <plug_holes+0x10c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	8852      	ldrh	r2, [r2, #2]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d01a      	beq.n	800b918 <plug_holes+0x104>
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	791b      	ldrb	r3, [r3, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d116      	bne.n	800b918 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b8ea:	4b15      	ldr	r3, [pc, #84]	; (800b940 <plug_holes+0x12c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d102      	bne.n	800b8fa <plug_holes+0xe6>
      lfree = pmem;
 800b8f4:	4a12      	ldr	r2, [pc, #72]	; (800b940 <plug_holes+0x12c>)
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	881a      	ldrh	r2, [r3, #0]
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	4a06      	ldr	r2, [pc, #24]	; (800b920 <plug_holes+0x10c>)
 800b906:	6812      	ldr	r2, [r2, #0]
 800b908:	1a99      	subs	r1, r3, r2
 800b90a:	4b05      	ldr	r3, [pc, #20]	; (800b920 <plug_holes+0x10c>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	8812      	ldrh	r2, [r2, #0]
 800b912:	4413      	add	r3, r2
 800b914:	b28a      	uxth	r2, r1
 800b916:	805a      	strh	r2, [r3, #2]
  }
}
 800b918:	bf00      	nop
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	200041b8 	.word	0x200041b8
 800b924:	08015a44 	.word	0x08015a44
 800b928:	08015a74 	.word	0x08015a74
 800b92c:	08015a8c 	.word	0x08015a8c
 800b930:	200041bc 	.word	0x200041bc
 800b934:	08015ab4 	.word	0x08015ab4
 800b938:	08015ad0 	.word	0x08015ad0
 800b93c:	08015aec 	.word	0x08015aec
 800b940:	200041c0 	.word	0x200041c0

0800b944 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b94a:	4b1e      	ldr	r3, [pc, #120]	; (800b9c4 <mem_init+0x80>)
 800b94c:	3303      	adds	r3, #3
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	461a      	mov	r2, r3
 800b954:	4b1c      	ldr	r3, [pc, #112]	; (800b9c8 <mem_init+0x84>)
 800b956:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b958:	4b1b      	ldr	r3, [pc, #108]	; (800b9c8 <mem_init+0x84>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b964:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800b972:	4b15      	ldr	r3, [pc, #84]	; (800b9c8 <mem_init+0x84>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800b97a:	4a14      	ldr	r2, [pc, #80]	; (800b9cc <mem_init+0x88>)
 800b97c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b97e:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <mem_init+0x88>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2201      	movs	r2, #1
 800b984:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b986:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <mem_init+0x88>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b98e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b990:	4b0e      	ldr	r3, [pc, #56]	; (800b9cc <mem_init+0x88>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b998:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b99a:	4b0b      	ldr	r3, [pc, #44]	; (800b9c8 <mem_init+0x84>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a0c      	ldr	r2, [pc, #48]	; (800b9d0 <mem_init+0x8c>)
 800b9a0:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b9a2:	480c      	ldr	r0, [pc, #48]	; (800b9d4 <mem_init+0x90>)
 800b9a4:	f008 faac 	bl	8013f00 <sys_mutex_new>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b9ae:	4b0a      	ldr	r3, [pc, #40]	; (800b9d8 <mem_init+0x94>)
 800b9b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b9b4:	4909      	ldr	r1, [pc, #36]	; (800b9dc <mem_init+0x98>)
 800b9b6:	480a      	ldr	r0, [pc, #40]	; (800b9e0 <mem_init+0x9c>)
 800b9b8:	f009 f8f6 	bl	8014ba8 <iprintf>
  }
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	200074e0 	.word	0x200074e0
 800b9c8:	200041b8 	.word	0x200041b8
 800b9cc:	200041bc 	.word	0x200041bc
 800b9d0:	200041c0 	.word	0x200041c0
 800b9d4:	200041c4 	.word	0x200041c4
 800b9d8:	08015a44 	.word	0x08015a44
 800b9dc:	08015b18 	.word	0x08015b18
 800b9e0:	08015a8c 	.word	0x08015a8c

0800b9e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d050      	beq.n	800ba94 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f003 0303 	and.w	r3, r3, #3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d006      	beq.n	800ba0a <mem_free+0x26>
 800b9fc:	4b27      	ldr	r3, [pc, #156]	; (800ba9c <mem_free+0xb8>)
 800b9fe:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800ba02:	4927      	ldr	r1, [pc, #156]	; (800baa0 <mem_free+0xbc>)
 800ba04:	4827      	ldr	r0, [pc, #156]	; (800baa4 <mem_free+0xc0>)
 800ba06:	f009 f8cf 	bl	8014ba8 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ba0a:	4b27      	ldr	r3, [pc, #156]	; (800baa8 <mem_free+0xc4>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d304      	bcc.n	800ba1e <mem_free+0x3a>
 800ba14:	4b25      	ldr	r3, [pc, #148]	; (800baac <mem_free+0xc8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d306      	bcc.n	800ba2c <mem_free+0x48>
 800ba1e:	4b1f      	ldr	r3, [pc, #124]	; (800ba9c <mem_free+0xb8>)
 800ba20:	f240 12af 	movw	r2, #431	; 0x1af
 800ba24:	4922      	ldr	r1, [pc, #136]	; (800bab0 <mem_free+0xcc>)
 800ba26:	481f      	ldr	r0, [pc, #124]	; (800baa4 <mem_free+0xc0>)
 800ba28:	f009 f8be 	bl	8014ba8 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ba2c:	4b1e      	ldr	r3, [pc, #120]	; (800baa8 <mem_free+0xc4>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d304      	bcc.n	800ba40 <mem_free+0x5c>
 800ba36:	4b1d      	ldr	r3, [pc, #116]	; (800baac <mem_free+0xc8>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d306      	bcc.n	800ba4e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800ba40:	f008 fabc 	bl	8013fbc <sys_arch_protect>
 800ba44:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800ba46:	68b8      	ldr	r0, [r7, #8]
 800ba48:	f008 fac6 	bl	8013fd8 <sys_arch_unprotect>
    return;
 800ba4c:	e023      	b.n	800ba96 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba4e:	4819      	ldr	r0, [pc, #100]	; (800bab4 <mem_free+0xd0>)
 800ba50:	f008 fa72 	bl	8013f38 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3b08      	subs	r3, #8
 800ba58:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	791b      	ldrb	r3, [r3, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <mem_free+0x8c>
 800ba62:	4b0e      	ldr	r3, [pc, #56]	; (800ba9c <mem_free+0xb8>)
 800ba64:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800ba68:	4913      	ldr	r1, [pc, #76]	; (800bab8 <mem_free+0xd4>)
 800ba6a:	480e      	ldr	r0, [pc, #56]	; (800baa4 <mem_free+0xc0>)
 800ba6c:	f009 f89c 	bl	8014ba8 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ba76:	4b11      	ldr	r3, [pc, #68]	; (800babc <mem_free+0xd8>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d202      	bcs.n	800ba86 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ba80:	4a0e      	ldr	r2, [pc, #56]	; (800babc <mem_free+0xd8>)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7ff fec4 	bl	800b814 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ba8c:	4809      	ldr	r0, [pc, #36]	; (800bab4 <mem_free+0xd0>)
 800ba8e:	f008 fa62 	bl	8013f56 <sys_mutex_unlock>
 800ba92:	e000      	b.n	800ba96 <mem_free+0xb2>
    return;
 800ba94:	bf00      	nop
}
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	08015a44 	.word	0x08015a44
 800baa0:	08015b34 	.word	0x08015b34
 800baa4:	08015a8c 	.word	0x08015a8c
 800baa8:	200041b8 	.word	0x200041b8
 800baac:	200041bc 	.word	0x200041bc
 800bab0:	08015b58 	.word	0x08015b58
 800bab4:	200041c4 	.word	0x200041c4
 800bab8:	08015b70 	.word	0x08015b70
 800babc:	200041c0 	.word	0x200041c0

0800bac0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800bacc:	887b      	ldrh	r3, [r7, #2]
 800bace:	3303      	adds	r3, #3
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	f023 0303 	bic.w	r3, r3, #3
 800bad6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800bad8:	887b      	ldrh	r3, [r7, #2]
 800bada:	2b0b      	cmp	r3, #11
 800badc:	d801      	bhi.n	800bae2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bade:	230c      	movs	r3, #12
 800bae0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800bae2:	887b      	ldrh	r3, [r7, #2]
 800bae4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bae8:	d901      	bls.n	800baee <mem_trim+0x2e>
    return NULL;
 800baea:	2300      	movs	r3, #0
 800baec:	e0bd      	b.n	800bc6a <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800baee:	4b61      	ldr	r3, [pc, #388]	; (800bc74 <mem_trim+0x1b4>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d304      	bcc.n	800bb02 <mem_trim+0x42>
 800baf8:	4b5f      	ldr	r3, [pc, #380]	; (800bc78 <mem_trim+0x1b8>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d306      	bcc.n	800bb10 <mem_trim+0x50>
 800bb02:	4b5e      	ldr	r3, [pc, #376]	; (800bc7c <mem_trim+0x1bc>)
 800bb04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bb08:	495d      	ldr	r1, [pc, #372]	; (800bc80 <mem_trim+0x1c0>)
 800bb0a:	485e      	ldr	r0, [pc, #376]	; (800bc84 <mem_trim+0x1c4>)
 800bb0c:	f009 f84c 	bl	8014ba8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bb10:	4b58      	ldr	r3, [pc, #352]	; (800bc74 <mem_trim+0x1b4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d304      	bcc.n	800bb24 <mem_trim+0x64>
 800bb1a:	4b57      	ldr	r3, [pc, #348]	; (800bc78 <mem_trim+0x1b8>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d307      	bcc.n	800bb34 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800bb24:	f008 fa4a 	bl	8013fbc <sys_arch_protect>
 800bb28:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f008 fa54 	bl	8013fd8 <sys_arch_unprotect>
    return rmem;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	e09a      	b.n	800bc6a <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3b08      	subs	r3, #8
 800bb38:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	4a4d      	ldr	r2, [pc, #308]	; (800bc74 <mem_trim+0x1b4>)
 800bb3e:	6812      	ldr	r2, [r2, #0]
 800bb40:	1a9b      	subs	r3, r3, r2
 800bb42:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	881a      	ldrh	r2, [r3, #0]
 800bb48:	8b7b      	ldrh	r3, [r7, #26]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	3b08      	subs	r3, #8
 800bb50:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bb52:	887a      	ldrh	r2, [r7, #2]
 800bb54:	8b3b      	ldrh	r3, [r7, #24]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d906      	bls.n	800bb68 <mem_trim+0xa8>
 800bb5a:	4b48      	ldr	r3, [pc, #288]	; (800bc7c <mem_trim+0x1bc>)
 800bb5c:	f240 2206 	movw	r2, #518	; 0x206
 800bb60:	4949      	ldr	r1, [pc, #292]	; (800bc88 <mem_trim+0x1c8>)
 800bb62:	4848      	ldr	r0, [pc, #288]	; (800bc84 <mem_trim+0x1c4>)
 800bb64:	f009 f820 	bl	8014ba8 <iprintf>
  if (newsize > size) {
 800bb68:	887a      	ldrh	r2, [r7, #2]
 800bb6a:	8b3b      	ldrh	r3, [r7, #24]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d901      	bls.n	800bb74 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800bb70:	2300      	movs	r3, #0
 800bb72:	e07a      	b.n	800bc6a <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800bb74:	887a      	ldrh	r2, [r7, #2]
 800bb76:	8b3b      	ldrh	r3, [r7, #24]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d101      	bne.n	800bb80 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	e074      	b.n	800bc6a <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bb80:	4842      	ldr	r0, [pc, #264]	; (800bc8c <mem_trim+0x1cc>)
 800bb82:	f008 f9d9 	bl	8013f38 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800bb86:	4b3b      	ldr	r3, [pc, #236]	; (800bc74 <mem_trim+0x1b4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	8812      	ldrh	r2, [r2, #0]
 800bb8e:	4413      	add	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	791b      	ldrb	r3, [r3, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d131      	bne.n	800bbfe <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800bba0:	8b7a      	ldrh	r2, [r7, #26]
 800bba2:	887b      	ldrh	r3, [r7, #2]
 800bba4:	4413      	add	r3, r2
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3308      	adds	r3, #8
 800bbaa:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800bbac:	4b38      	ldr	r3, [pc, #224]	; (800bc90 <mem_trim+0x1d0>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d105      	bne.n	800bbc2 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800bbb6:	4b2f      	ldr	r3, [pc, #188]	; (800bc74 <mem_trim+0x1b4>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	8a7b      	ldrh	r3, [r7, #18]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	4a34      	ldr	r2, [pc, #208]	; (800bc90 <mem_trim+0x1d0>)
 800bbc0:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800bbc2:	4b2c      	ldr	r3, [pc, #176]	; (800bc74 <mem_trim+0x1b4>)
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	8a7b      	ldrh	r3, [r7, #18]
 800bbc8:	4413      	add	r3, r2
 800bbca:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	8a3a      	ldrh	r2, [r7, #16]
 800bbd6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	8b7a      	ldrh	r2, [r7, #26]
 800bbdc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	8a7a      	ldrh	r2, [r7, #18]
 800bbe2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbec:	d039      	beq.n	800bc62 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bbee:	4b21      	ldr	r3, [pc, #132]	; (800bc74 <mem_trim+0x1b4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	8812      	ldrh	r2, [r2, #0]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	8a7a      	ldrh	r2, [r7, #18]
 800bbfa:	805a      	strh	r2, [r3, #2]
 800bbfc:	e031      	b.n	800bc62 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bbfe:	887b      	ldrh	r3, [r7, #2]
 800bc00:	f103 0214 	add.w	r2, r3, #20
 800bc04:	8b3b      	ldrh	r3, [r7, #24]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d82b      	bhi.n	800bc62 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800bc0a:	8b7a      	ldrh	r2, [r7, #26]
 800bc0c:	887b      	ldrh	r3, [r7, #2]
 800bc0e:	4413      	add	r3, r2
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	3308      	adds	r3, #8
 800bc14:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800bc16:	4b17      	ldr	r3, [pc, #92]	; (800bc74 <mem_trim+0x1b4>)
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	8a7b      	ldrh	r3, [r7, #18]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800bc20:	4b1b      	ldr	r3, [pc, #108]	; (800bc90 <mem_trim+0x1d0>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d202      	bcs.n	800bc30 <mem_trim+0x170>
      lfree = mem2;
 800bc2a:	4a19      	ldr	r2, [pc, #100]	; (800bc90 <mem_trim+0x1d0>)
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2200      	movs	r2, #0
 800bc34:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	881a      	ldrh	r2, [r3, #0]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	8b7a      	ldrh	r2, [r7, #26]
 800bc42:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	8a7a      	ldrh	r2, [r7, #18]
 800bc48:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc52:	d006      	beq.n	800bc62 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bc54:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <mem_trim+0x1b4>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	8812      	ldrh	r2, [r2, #0]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	8a7a      	ldrh	r2, [r7, #18]
 800bc60:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc62:	480a      	ldr	r0, [pc, #40]	; (800bc8c <mem_trim+0x1cc>)
 800bc64:	f008 f977 	bl	8013f56 <sys_mutex_unlock>
  return rmem;
 800bc68:	687b      	ldr	r3, [r7, #4]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3720      	adds	r7, #32
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200041b8 	.word	0x200041b8
 800bc78:	200041bc 	.word	0x200041bc
 800bc7c:	08015a44 	.word	0x08015a44
 800bc80:	08015b84 	.word	0x08015b84
 800bc84:	08015a8c 	.word	0x08015a8c
 800bc88:	08015b9c 	.word	0x08015b9c
 800bc8c:	200041c4 	.word	0x200041c4
 800bc90:	200041c0 	.word	0x200041c0

0800bc94 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800bc9e:	88fb      	ldrh	r3, [r7, #6]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <mem_malloc+0x14>
    return NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	e0d1      	b.n	800be4c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800bca8:	88fb      	ldrh	r3, [r7, #6]
 800bcaa:	3303      	adds	r3, #3
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	f023 0303 	bic.w	r3, r3, #3
 800bcb2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800bcb4:	88fb      	ldrh	r3, [r7, #6]
 800bcb6:	2b0b      	cmp	r3, #11
 800bcb8:	d801      	bhi.n	800bcbe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bcba:	230c      	movs	r3, #12
 800bcbc:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcc4:	d901      	bls.n	800bcca <mem_malloc+0x36>
    return NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e0c0      	b.n	800be4c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bcca:	4862      	ldr	r0, [pc, #392]	; (800be54 <mem_malloc+0x1c0>)
 800bccc:	f008 f934 	bl	8013f38 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800bcd0:	4b61      	ldr	r3, [pc, #388]	; (800be58 <mem_malloc+0x1c4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4b61      	ldr	r3, [pc, #388]	; (800be5c <mem_malloc+0x1c8>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	83fb      	strh	r3, [r7, #30]
 800bcde:	e0aa      	b.n	800be36 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800bce0:	4b5e      	ldr	r3, [pc, #376]	; (800be5c <mem_malloc+0x1c8>)
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	8bfb      	ldrh	r3, [r7, #30]
 800bce6:	4413      	add	r3, r2
 800bce8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	791b      	ldrb	r3, [r3, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f040 809b 	bne.w	800be2a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	8bfb      	ldrh	r3, [r7, #30]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	f1a3 0208 	sub.w	r2, r3, #8
 800bd02:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800bd04:	429a      	cmp	r2, r3
 800bd06:	f0c0 8090 	bcc.w	800be2a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	8bfb      	ldrh	r3, [r7, #30]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	f1a3 0208 	sub.w	r2, r3, #8
 800bd18:	88fb      	ldrh	r3, [r7, #6]
 800bd1a:	3314      	adds	r3, #20
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d327      	bcc.n	800bd70 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800bd20:	8bfa      	ldrh	r2, [r7, #30]
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	4413      	add	r3, r2
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	3308      	adds	r3, #8
 800bd2a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800bd2c:	4b4b      	ldr	r3, [pc, #300]	; (800be5c <mem_malloc+0x1c8>)
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	8a7b      	ldrh	r3, [r7, #18]
 800bd32:	4413      	add	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	881a      	ldrh	r2, [r3, #0]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	8bfa      	ldrh	r2, [r7, #30]
 800bd48:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	8a7a      	ldrh	r2, [r7, #18]
 800bd4e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	2201      	movs	r2, #1
 800bd54:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	881b      	ldrh	r3, [r3, #0]
 800bd5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd5e:	d00a      	beq.n	800bd76 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bd60:	4b3e      	ldr	r3, [pc, #248]	; (800be5c <mem_malloc+0x1c8>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	8812      	ldrh	r2, [r2, #0]
 800bd68:	4413      	add	r3, r2
 800bd6a:	8a7a      	ldrh	r2, [r7, #18]
 800bd6c:	805a      	strh	r2, [r3, #2]
 800bd6e:	e002      	b.n	800bd76 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2201      	movs	r2, #1
 800bd74:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bd76:	4b38      	ldr	r3, [pc, #224]	; (800be58 <mem_malloc+0x1c4>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d127      	bne.n	800bdd0 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800bd80:	4b35      	ldr	r3, [pc, #212]	; (800be58 <mem_malloc+0x1c4>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bd86:	e005      	b.n	800bd94 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800bd88:	4b34      	ldr	r3, [pc, #208]	; (800be5c <mem_malloc+0x1c8>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	8812      	ldrh	r2, [r2, #0]
 800bd90:	4413      	add	r3, r2
 800bd92:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	791b      	ldrb	r3, [r3, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d004      	beq.n	800bda6 <mem_malloc+0x112>
 800bd9c:	4b30      	ldr	r3, [pc, #192]	; (800be60 <mem_malloc+0x1cc>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	69ba      	ldr	r2, [r7, #24]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d1f0      	bne.n	800bd88 <mem_malloc+0xf4>
          }
          lfree = cur;
 800bda6:	4a2c      	ldr	r2, [pc, #176]	; (800be58 <mem_malloc+0x1c4>)
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bdac:	4b2a      	ldr	r3, [pc, #168]	; (800be58 <mem_malloc+0x1c4>)
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	4b2b      	ldr	r3, [pc, #172]	; (800be60 <mem_malloc+0x1cc>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d00b      	beq.n	800bdd0 <mem_malloc+0x13c>
 800bdb8:	4b27      	ldr	r3, [pc, #156]	; (800be58 <mem_malloc+0x1c4>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	791b      	ldrb	r3, [r3, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d006      	beq.n	800bdd0 <mem_malloc+0x13c>
 800bdc2:	4b28      	ldr	r3, [pc, #160]	; (800be64 <mem_malloc+0x1d0>)
 800bdc4:	f240 22cf 	movw	r2, #719	; 0x2cf
 800bdc8:	4927      	ldr	r1, [pc, #156]	; (800be68 <mem_malloc+0x1d4>)
 800bdca:	4828      	ldr	r0, [pc, #160]	; (800be6c <mem_malloc+0x1d8>)
 800bdcc:	f008 feec 	bl	8014ba8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bdd0:	4820      	ldr	r0, [pc, #128]	; (800be54 <mem_malloc+0x1c0>)
 800bdd2:	f008 f8c0 	bl	8013f56 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bdd6:	88fa      	ldrh	r2, [r7, #6]
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	4413      	add	r3, r2
 800bddc:	3308      	adds	r3, #8
 800bdde:	4a20      	ldr	r2, [pc, #128]	; (800be60 <mem_malloc+0x1cc>)
 800bde0:	6812      	ldr	r2, [r2, #0]
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d906      	bls.n	800bdf4 <mem_malloc+0x160>
 800bde6:	4b1f      	ldr	r3, [pc, #124]	; (800be64 <mem_malloc+0x1d0>)
 800bde8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bdec:	4920      	ldr	r1, [pc, #128]	; (800be70 <mem_malloc+0x1dc>)
 800bdee:	481f      	ldr	r0, [pc, #124]	; (800be6c <mem_malloc+0x1d8>)
 800bdf0:	f008 feda 	bl	8014ba8 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	f003 0303 	and.w	r3, r3, #3
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <mem_malloc+0x178>
 800bdfe:	4b19      	ldr	r3, [pc, #100]	; (800be64 <mem_malloc+0x1d0>)
 800be00:	f240 22d6 	movw	r2, #726	; 0x2d6
 800be04:	491b      	ldr	r1, [pc, #108]	; (800be74 <mem_malloc+0x1e0>)
 800be06:	4819      	ldr	r0, [pc, #100]	; (800be6c <mem_malloc+0x1d8>)
 800be08:	f008 fece 	bl	8014ba8 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	f003 0303 	and.w	r3, r3, #3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d006      	beq.n	800be24 <mem_malloc+0x190>
 800be16:	4b13      	ldr	r3, [pc, #76]	; (800be64 <mem_malloc+0x1d0>)
 800be18:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800be1c:	4916      	ldr	r1, [pc, #88]	; (800be78 <mem_malloc+0x1e4>)
 800be1e:	4813      	ldr	r0, [pc, #76]	; (800be6c <mem_malloc+0x1d8>)
 800be20:	f008 fec2 	bl	8014ba8 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	3308      	adds	r3, #8
 800be28:	e010      	b.n	800be4c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800be2a:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <mem_malloc+0x1c8>)
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	8bfb      	ldrh	r3, [r7, #30]
 800be30:	4413      	add	r3, r2
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800be36:	8bfa      	ldrh	r2, [r7, #30]
 800be38:	88fb      	ldrh	r3, [r7, #6]
 800be3a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800be3e:	429a      	cmp	r2, r3
 800be40:	f4ff af4e 	bcc.w	800bce0 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800be44:	4803      	ldr	r0, [pc, #12]	; (800be54 <mem_malloc+0x1c0>)
 800be46:	f008 f886 	bl	8013f56 <sys_mutex_unlock>
  return NULL;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	200041c4 	.word	0x200041c4
 800be58:	200041c0 	.word	0x200041c0
 800be5c:	200041b8 	.word	0x200041b8
 800be60:	200041bc 	.word	0x200041bc
 800be64:	08015a44 	.word	0x08015a44
 800be68:	08015bbc 	.word	0x08015bbc
 800be6c:	08015a8c 	.word	0x08015a8c
 800be70:	08015bd8 	.word	0x08015bd8
 800be74:	08015c08 	.word	0x08015c08
 800be78:	08015c38 	.word	0x08015c38

0800be7c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	3303      	adds	r3, #3
 800be92:	f023 0303 	bic.w	r3, r3, #3
 800be96:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	e011      	b.n	800bec2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	881b      	ldrh	r3, [r3, #0]
 800beb4:	461a      	mov	r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	4413      	add	r3, r2
 800beba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3301      	adds	r3, #1
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	885b      	ldrh	r3, [r3, #2]
 800bec6:	461a      	mov	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	4293      	cmp	r3, r2
 800becc:	dbe7      	blt.n	800be9e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bece:	bf00      	nop
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
	...

0800bedc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bee2:	2300      	movs	r3, #0
 800bee4:	80fb      	strh	r3, [r7, #6]
 800bee6:	e009      	b.n	800befc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bee8:	88fb      	ldrh	r3, [r7, #6]
 800beea:	4a08      	ldr	r2, [pc, #32]	; (800bf0c <memp_init+0x30>)
 800beec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff ffc3 	bl	800be7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bef6:	88fb      	ldrh	r3, [r7, #6]
 800bef8:	3301      	adds	r3, #1
 800befa:	80fb      	strh	r3, [r7, #6]
 800befc:	88fb      	ldrh	r3, [r7, #6]
 800befe:	2b0b      	cmp	r3, #11
 800bf00:	d9f2      	bls.n	800bee8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bf02:	bf00      	nop
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	08017718 	.word	0x08017718

0800bf10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bf18:	f008 f850 	bl	8013fbc <sys_arch_protect>
 800bf1c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d015      	beq.n	800bf58 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	6812      	ldr	r2, [r2, #0]
 800bf34:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f003 0303 	and.w	r3, r3, #3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d006      	beq.n	800bf4e <do_memp_malloc_pool+0x3e>
 800bf40:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <do_memp_malloc_pool+0x58>)
 800bf42:	f240 1249 	movw	r2, #329	; 0x149
 800bf46:	4909      	ldr	r1, [pc, #36]	; (800bf6c <do_memp_malloc_pool+0x5c>)
 800bf48:	4809      	ldr	r0, [pc, #36]	; (800bf70 <do_memp_malloc_pool+0x60>)
 800bf4a:	f008 fe2d 	bl	8014ba8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f008 f842 	bl	8013fd8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	e003      	b.n	800bf60 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f008 f83d 	bl	8013fd8 <sys_arch_unprotect>
  return NULL;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	08015c5c 	.word	0x08015c5c
 800bf6c:	08015c8c 	.word	0x08015c8c
 800bf70:	08015cb0 	.word	0x08015cb0

0800bf74 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bf7e:	79fb      	ldrb	r3, [r7, #7]
 800bf80:	2b0b      	cmp	r3, #11
 800bf82:	d908      	bls.n	800bf96 <memp_malloc+0x22>
 800bf84:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <memp_malloc+0x3c>)
 800bf86:	f240 1287 	movw	r2, #391	; 0x187
 800bf8a:	490a      	ldr	r1, [pc, #40]	; (800bfb4 <memp_malloc+0x40>)
 800bf8c:	480a      	ldr	r0, [pc, #40]	; (800bfb8 <memp_malloc+0x44>)
 800bf8e:	f008 fe0b 	bl	8014ba8 <iprintf>
 800bf92:	2300      	movs	r3, #0
 800bf94:	e008      	b.n	800bfa8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	4a08      	ldr	r2, [pc, #32]	; (800bfbc <memp_malloc+0x48>)
 800bf9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff ffb6 	bl	800bf10 <do_memp_malloc_pool>
 800bfa4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	08015c5c 	.word	0x08015c5c
 800bfb4:	08015cec 	.word	0x08015cec
 800bfb8:	08015cb0 	.word	0x08015cb0
 800bfbc:	08017718 	.word	0x08017718

0800bfc0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	f003 0303 	and.w	r3, r3, #3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d006      	beq.n	800bfe2 <do_memp_free_pool+0x22>
 800bfd4:	4b0d      	ldr	r3, [pc, #52]	; (800c00c <do_memp_free_pool+0x4c>)
 800bfd6:	f240 129d 	movw	r2, #413	; 0x19d
 800bfda:	490d      	ldr	r1, [pc, #52]	; (800c010 <do_memp_free_pool+0x50>)
 800bfdc:	480d      	ldr	r0, [pc, #52]	; (800c014 <do_memp_free_pool+0x54>)
 800bfde:	f008 fde3 	bl	8014ba8 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bfe6:	f007 ffe9 	bl	8013fbc <sys_arch_protect>
 800bfea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bffe:	68b8      	ldr	r0, [r7, #8]
 800c000:	f007 ffea 	bl	8013fd8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c004:	bf00      	nop
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	08015c5c 	.word	0x08015c5c
 800c010:	08015d0c 	.word	0x08015d0c
 800c014:	08015cb0 	.word	0x08015cb0

0800c018 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	6039      	str	r1, [r7, #0]
 800c022:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c024:	79fb      	ldrb	r3, [r7, #7]
 800c026:	2b0b      	cmp	r3, #11
 800c028:	d907      	bls.n	800c03a <memp_free+0x22>
 800c02a:	4b0c      	ldr	r3, [pc, #48]	; (800c05c <memp_free+0x44>)
 800c02c:	f240 12db 	movw	r2, #475	; 0x1db
 800c030:	490b      	ldr	r1, [pc, #44]	; (800c060 <memp_free+0x48>)
 800c032:	480c      	ldr	r0, [pc, #48]	; (800c064 <memp_free+0x4c>)
 800c034:	f008 fdb8 	bl	8014ba8 <iprintf>
 800c038:	e00c      	b.n	800c054 <memp_free+0x3c>

  if (mem == NULL) {
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d008      	beq.n	800c052 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c040:	79fb      	ldrb	r3, [r7, #7]
 800c042:	4a09      	ldr	r2, [pc, #36]	; (800c068 <memp_free+0x50>)
 800c044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff ffb8 	bl	800bfc0 <do_memp_free_pool>
 800c050:	e000      	b.n	800c054 <memp_free+0x3c>
    return;
 800c052:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	08015c5c 	.word	0x08015c5c
 800c060:	08015d2c 	.word	0x08015d2c
 800c064:	08015cb0 	.word	0x08015cb0
 800c068:	08017718 	.word	0x08017718

0800c06c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c06c:	b480      	push	{r7}
 800c06e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c070:	bf00      	nop
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
	...

0800c07c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d105      	bne.n	800c09c <netif_add+0x20>
 800c090:	4b1f      	ldr	r3, [pc, #124]	; (800c110 <netif_add+0x94>)
 800c092:	22fb      	movs	r2, #251	; 0xfb
 800c094:	491f      	ldr	r1, [pc, #124]	; (800c114 <netif_add+0x98>)
 800c096:	4820      	ldr	r0, [pc, #128]	; (800c118 <netif_add+0x9c>)
 800c098:	f008 fd86 	bl	8014ba8 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2203      	movs	r2, #3
 800c0ba:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800c0c4:	4b15      	ldr	r3, [pc, #84]	; (800c11c <netif_add+0xa0>)
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	b2d1      	uxtb	r1, r2
 800c0cc:	4a13      	ldr	r2, [pc, #76]	; (800c11c <netif_add+0xa0>)
 800c0ce:	7011      	strb	r1, [r2, #0]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6a3a      	ldr	r2, [r7, #32]
 800c0da:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	68b9      	ldr	r1, [r7, #8]
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f000 f81e 	bl	800c124 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	4798      	blx	r3
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <netif_add+0x7c>
    return NULL;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e007      	b.n	800c108 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c0f8:	4b09      	ldr	r3, [pc, #36]	; (800c120 <netif_add+0xa4>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c100:	4a07      	ldr	r2, [pc, #28]	; (800c120 <netif_add+0xa4>)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800c106:	68fb      	ldr	r3, [r7, #12]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	08015d48 	.word	0x08015d48
 800c114:	08015d7c 	.word	0x08015d7c
 800c118:	08015d94 	.word	0x08015d94
 800c11c:	200041f8 	.word	0x200041f8
 800c120:	2000ab44 	.word	0x2000ab44

0800c124 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d003      	beq.n	800c140 <netif_set_addr+0x1c>
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10c      	bne.n	800c15a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800c140:	68b9      	ldr	r1, [r7, #8]
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f000 f81a 	bl	800c17c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800c148:	6879      	ldr	r1, [r7, #4]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 f85a 	bl	800c204 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c150:	6839      	ldr	r1, [r7, #0]
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f000 f842 	bl	800c1dc <netif_set_gw>
 800c158:	e00b      	b.n	800c172 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800c15a:	6879      	ldr	r1, [r7, #4]
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 f851 	bl	800c204 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 f839 	bl	800c1dc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800c16a:	68b9      	ldr	r1, [r7, #8]
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 f805 	bl	800c17c <netif_set_ipaddr>
  }
}
 800c172:	bf00      	nop
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
	...

0800c17c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <netif_set_ipaddr+0x18>
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	e002      	b.n	800c19a <netif_set_ipaddr+0x1e>
 800c194:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <netif_set_ipaddr+0x5c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d014      	beq.n	800c1d0 <netif_set_ipaddr+0x54>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	f107 020c 	add.w	r2, r7, #12
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f002 f887 	bl	800e2c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <netif_set_ipaddr+0x46>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	e000      	b.n	800c1c4 <netif_set_ipaddr+0x48>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f861 	bl	800c292 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800c1d0:	bf00      	nop
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	08017788 	.word	0x08017788

0800c1dc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <netif_set_gw+0x16>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	e000      	b.n	800c1f4 <netif_set_gw+0x18>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <netif_set_netmask+0x16>
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	e000      	b.n	800c21c <netif_set_netmask+0x18>
 800c21a:	2300      	movs	r3, #0
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c234:	4a04      	ldr	r2, [pc, #16]	; (800c248 <netif_set_default+0x1c>)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c23a:	bf00      	nop
 800c23c:	370c      	adds	r7, #12
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	2000ab48 	.word	0x2000ab48

0800c24c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d113      	bne.n	800c28a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c268:	f043 0301 	orr.w	r3, r3, #1
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c27a:	f003 0304 	and.w	r3, r3, #4
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800c282:	2103      	movs	r1, #3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 f804 	bl	800c292 <netif_issue_reports>
    }
  }
}
 800c28a:	bf00      	nop
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b082      	sub	sp, #8
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	460b      	mov	r3, r1
 800c29c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c29e:	78fb      	ldrb	r3, [r7, #3]
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d011      	beq.n	800c2cc <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3304      	adds	r3, #4
 800c2ac:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00c      	beq.n	800c2cc <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c2b8:	f003 0308 	and.w	r3, r3, #8
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d005      	beq.n	800c2cc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f006 fa6e 	bl	80127a8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800c2cc:	bf00      	nop
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d012      	beq.n	800c310 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c2f0:	f023 0301 	bic.w	r3, r3, #1
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c302:	f003 0308 	and.w	r3, r3, #8
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f005 fe12 	bl	8011f34 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c31e:	f007 fe4d 	bl	8013fbc <sys_arch_protect>
 800c322:	6038      	str	r0, [r7, #0]
 800c324:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <pbuf_free_ooseq+0x4c>)
 800c326:	2200      	movs	r2, #0
 800c328:	701a      	strb	r2, [r3, #0]
 800c32a:	6838      	ldr	r0, [r7, #0]
 800c32c:	f007 fe54 	bl	8013fd8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c330:	4b0d      	ldr	r3, [pc, #52]	; (800c368 <pbuf_free_ooseq+0x50>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	607b      	str	r3, [r7, #4]
 800c336:	e00f      	b.n	800c358 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d008      	beq.n	800c352 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c344:	4618      	mov	r0, r3
 800c346:	f001 fcf8 	bl	800dd3a <tcp_segs_free>
      pcb->ooseq = NULL;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800c350:	e005      	b.n	800c35e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	607b      	str	r3, [r7, #4]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1ec      	bne.n	800c338 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	2000ab4c 	.word	0x2000ab4c
 800c368:	2000ab54 	.word	0x2000ab54

0800c36c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c374:	f7ff ffd0 	bl	800c318 <pbuf_free_ooseq>
}
 800c378:	bf00      	nop
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c386:	f007 fe19 	bl	8013fbc <sys_arch_protect>
 800c38a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c38c:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <pbuf_pool_is_empty+0x50>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c392:	4b0f      	ldr	r3, [pc, #60]	; (800c3d0 <pbuf_pool_is_empty+0x50>)
 800c394:	2201      	movs	r2, #1
 800c396:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f007 fe1d 	bl	8013fd8 <sys_arch_unprotect>

  if (!queued) {
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d110      	bne.n	800c3c6 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	480a      	ldr	r0, [pc, #40]	; (800c3d4 <pbuf_pool_is_empty+0x54>)
 800c3aa:	f7ff f963 	bl	800b674 <tcpip_callback_with_block>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d008      	beq.n	800c3c6 <pbuf_pool_is_empty+0x46>
 800c3b4:	f007 fe02 	bl	8013fbc <sys_arch_protect>
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <pbuf_pool_is_empty+0x50>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f007 fe09 	bl	8013fd8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c3c6:	bf00      	nop
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	2000ab4c 	.word	0x2000ab4c
 800c3d4:	0800c36d 	.word	0x0800c36d

0800c3d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b088      	sub	sp, #32
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	71fb      	strb	r3, [r7, #7]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	80bb      	strh	r3, [r7, #4]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	d81c      	bhi.n	800c42a <pbuf_alloc+0x52>
 800c3f0:	a201      	add	r2, pc, #4	; (adr r2, 800c3f8 <pbuf_alloc+0x20>)
 800c3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f6:	bf00      	nop
 800c3f8:	0800c40d 	.word	0x0800c40d
 800c3fc:	0800c413 	.word	0x0800c413
 800c400:	0800c419 	.word	0x0800c419
 800c404:	0800c41f 	.word	0x0800c41f
 800c408:	0800c425 	.word	0x0800c425
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c40c:	2336      	movs	r3, #54	; 0x36
 800c40e:	82fb      	strh	r3, [r7, #22]
    break;
 800c410:	e014      	b.n	800c43c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c412:	2322      	movs	r3, #34	; 0x22
 800c414:	82fb      	strh	r3, [r7, #22]
    break;
 800c416:	e011      	b.n	800c43c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c418:	230e      	movs	r3, #14
 800c41a:	82fb      	strh	r3, [r7, #22]
    break;
 800c41c:	e00e      	b.n	800c43c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c41e:	2300      	movs	r3, #0
 800c420:	82fb      	strh	r3, [r7, #22]
    break;
 800c422:	e00b      	b.n	800c43c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	82fb      	strh	r3, [r7, #22]
    break;
 800c428:	e008      	b.n	800c43c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800c42a:	4ba5      	ldr	r3, [pc, #660]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c42c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800c430:	49a4      	ldr	r1, [pc, #656]	; (800c6c4 <pbuf_alloc+0x2ec>)
 800c432:	48a5      	ldr	r0, [pc, #660]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c434:	f008 fbb8 	bl	8014ba8 <iprintf>
    return NULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	e15d      	b.n	800c6f8 <pbuf_alloc+0x320>
  }

  switch (type) {
 800c43c:	79bb      	ldrb	r3, [r7, #6]
 800c43e:	2b03      	cmp	r3, #3
 800c440:	f200 8134 	bhi.w	800c6ac <pbuf_alloc+0x2d4>
 800c444:	a201      	add	r2, pc, #4	; (adr r2, 800c44c <pbuf_alloc+0x74>)
 800c446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c44a:	bf00      	nop
 800c44c:	0800c5ed 	.word	0x0800c5ed
 800c450:	0800c679 	.word	0x0800c679
 800c454:	0800c679 	.word	0x0800c679
 800c458:	0800c45d 	.word	0x0800c45d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c45c:	200b      	movs	r0, #11
 800c45e:	f7ff fd89 	bl	800bf74 <memp_malloc>
 800c462:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d103      	bne.n	800c472 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800c46a:	f7ff ff89 	bl	800c380 <pbuf_pool_is_empty>
      return NULL;
 800c46e:	2300      	movs	r3, #0
 800c470:	e142      	b.n	800c6f8 <pbuf_alloc+0x320>
    }
    p->type = type;
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	79ba      	ldrb	r2, [r7, #6]
 800c476:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800c47e:	8afb      	ldrh	r3, [r7, #22]
 800c480:	3310      	adds	r3, #16
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	4413      	add	r3, r2
 800c486:	3303      	adds	r3, #3
 800c488:	f023 0303 	bic.w	r3, r3, #3
 800c48c:	461a      	mov	r2, r3
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d006      	beq.n	800c4ac <pbuf_alloc+0xd4>
 800c49e:	4b88      	ldr	r3, [pc, #544]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c4a0:	f240 1229 	movw	r2, #297	; 0x129
 800c4a4:	4989      	ldr	r1, [pc, #548]	; (800c6cc <pbuf_alloc+0x2f4>)
 800c4a6:	4888      	ldr	r0, [pc, #544]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c4a8:	f008 fb7e 	bl	8014ba8 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	88ba      	ldrh	r2, [r7, #4]
 800c4b0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800c4b2:	8afb      	ldrh	r3, [r7, #22]
 800c4b4:	3303      	adds	r3, #3
 800c4b6:	f023 0303 	bic.w	r3, r3, #3
 800c4ba:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800c4be:	88bb      	ldrh	r3, [r7, #4]
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	bf28      	it	cs
 800c4c4:	4613      	movcs	r3, r2
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	8952      	ldrh	r2, [r2, #10]
 800c4d4:	441a      	add	r2, r3
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d906      	bls.n	800c4ee <pbuf_alloc+0x116>
 800c4e0:	4b77      	ldr	r3, [pc, #476]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c4e2:	f44f 7298 	mov.w	r2, #304	; 0x130
 800c4e6:	497a      	ldr	r1, [pc, #488]	; (800c6d0 <pbuf_alloc+0x2f8>)
 800c4e8:	4877      	ldr	r0, [pc, #476]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c4ea:	f008 fb5d 	bl	8014ba8 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c4ee:	8afb      	ldrh	r3, [r7, #22]
 800c4f0:	3303      	adds	r3, #3
 800c4f2:	f023 0303 	bic.w	r3, r3, #3
 800c4f6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c4fa:	d106      	bne.n	800c50a <pbuf_alloc+0x132>
 800c4fc:	4b70      	ldr	r3, [pc, #448]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c4fe:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c502:	4974      	ldr	r1, [pc, #464]	; (800c6d4 <pbuf_alloc+0x2fc>)
 800c504:	4870      	ldr	r0, [pc, #448]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c506:	f008 fb4f 	bl	8014ba8 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	2201      	movs	r2, #1
 800c50e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800c514:	88bb      	ldrh	r3, [r7, #4]
 800c516:	69fa      	ldr	r2, [r7, #28]
 800c518:	8952      	ldrh	r2, [r2, #10]
 800c51a:	1a9b      	subs	r3, r3, r2
 800c51c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800c51e:	e061      	b.n	800c5e4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c520:	200b      	movs	r0, #11
 800c522:	f7ff fd27 	bl	800bf74 <memp_malloc>
 800c526:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d106      	bne.n	800c53c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800c52e:	f7ff ff27 	bl	800c380 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800c532:	69f8      	ldr	r0, [r7, #28]
 800c534:	f000 fac2 	bl	800cabc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800c538:	2300      	movs	r3, #0
 800c53a:	e0dd      	b.n	800c6f8 <pbuf_alloc+0x320>
      }
      q->type = type;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	79ba      	ldrb	r2, [r7, #6]
 800c540:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c55a:	4293      	cmp	r3, r2
 800c55c:	dd06      	ble.n	800c56c <pbuf_alloc+0x194>
 800c55e:	4b58      	ldr	r3, [pc, #352]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c560:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800c564:	495c      	ldr	r1, [pc, #368]	; (800c6d8 <pbuf_alloc+0x300>)
 800c566:	4858      	ldr	r0, [pc, #352]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c568:	f008 fb1e 	bl	8014ba8 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	b29a      	uxth	r2, r3
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	b29b      	uxth	r3, r3
 800c578:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c57c:	bf28      	it	cs
 800c57e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800c582:	b29a      	uxth	r2, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f103 0210 	add.w	r2, r3, #16
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d006      	beq.n	800c5ac <pbuf_alloc+0x1d4>
 800c59e:	4b48      	ldr	r3, [pc, #288]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c5a0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800c5a4:	494d      	ldr	r1, [pc, #308]	; (800c6dc <pbuf_alloc+0x304>)
 800c5a6:	4848      	ldr	r0, [pc, #288]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c5a8:	f008 fafe 	bl	8014ba8 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	69fa      	ldr	r2, [r7, #28]
 800c5b2:	8952      	ldrh	r2, [r2, #10]
 800c5b4:	441a      	add	r2, r3
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d906      	bls.n	800c5ce <pbuf_alloc+0x1f6>
 800c5c0:	4b3f      	ldr	r3, [pc, #252]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c5c2:	f240 1255 	movw	r2, #341	; 0x155
 800c5c6:	4942      	ldr	r1, [pc, #264]	; (800c6d0 <pbuf_alloc+0x2f8>)
 800c5c8:	483f      	ldr	r0, [pc, #252]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c5ca:	f008 faed 	bl	8014ba8 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	895b      	ldrh	r3, [r3, #10]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	1a9b      	subs	r3, r3, r2
 800c5de:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	dc9a      	bgt.n	800c520 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800c5ea:	e07e      	b.n	800c6ea <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800c5ec:	8afb      	ldrh	r3, [r7, #22]
 800c5ee:	3313      	adds	r3, #19
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	f023 0303 	bic.w	r3, r3, #3
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	88bb      	ldrh	r3, [r7, #4]
 800c5fa:	3303      	adds	r3, #3
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	f023 0303 	bic.w	r3, r3, #3
 800c602:	b29b      	uxth	r3, r3
 800c604:	4413      	add	r3, r2
 800c606:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800c608:	897a      	ldrh	r2, [r7, #10]
 800c60a:	88bb      	ldrh	r3, [r7, #4]
 800c60c:	3303      	adds	r3, #3
 800c60e:	f023 0303 	bic.w	r3, r3, #3
 800c612:	429a      	cmp	r2, r3
 800c614:	d201      	bcs.n	800c61a <pbuf_alloc+0x242>
        return NULL;
 800c616:	2300      	movs	r3, #0
 800c618:	e06e      	b.n	800c6f8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800c61a:	897b      	ldrh	r3, [r7, #10]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7ff fb39 	bl	800bc94 <mem_malloc>
 800c622:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <pbuf_alloc+0x256>
      return NULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	e064      	b.n	800c6f8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800c62e:	8afb      	ldrh	r3, [r7, #22]
 800c630:	3310      	adds	r3, #16
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	4413      	add	r3, r2
 800c636:	3303      	adds	r3, #3
 800c638:	f023 0303 	bic.w	r3, r3, #3
 800c63c:	461a      	mov	r2, r3
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	88ba      	ldrh	r2, [r7, #4]
 800c646:	811a      	strh	r2, [r3, #8]
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	891a      	ldrh	r2, [r3, #8]
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	79ba      	ldrb	r2, [r7, #6]
 800c65a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	f003 0303 	and.w	r3, r3, #3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d03f      	beq.n	800c6e8 <pbuf_alloc+0x310>
 800c668:	4b15      	ldr	r3, [pc, #84]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c66a:	f240 1277 	movw	r2, #375	; 0x177
 800c66e:	491c      	ldr	r1, [pc, #112]	; (800c6e0 <pbuf_alloc+0x308>)
 800c670:	4815      	ldr	r0, [pc, #84]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c672:	f008 fa99 	bl	8014ba8 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800c676:	e037      	b.n	800c6e8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c678:	200a      	movs	r0, #10
 800c67a:	f7ff fc7b 	bl	800bf74 <memp_malloc>
 800c67e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800c686:	2300      	movs	r3, #0
 800c688:	e036      	b.n	800c6f8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	2200      	movs	r2, #0
 800c68e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	88ba      	ldrh	r2, [r7, #4]
 800c694:	811a      	strh	r2, [r3, #8]
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	891a      	ldrh	r2, [r3, #8]
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	79ba      	ldrb	r2, [r7, #6]
 800c6a8:	731a      	strb	r2, [r3, #12]
    break;
 800c6aa:	e01e      	b.n	800c6ea <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c6ac:	4b04      	ldr	r3, [pc, #16]	; (800c6c0 <pbuf_alloc+0x2e8>)
 800c6ae:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800c6b2:	490c      	ldr	r1, [pc, #48]	; (800c6e4 <pbuf_alloc+0x30c>)
 800c6b4:	4804      	ldr	r0, [pc, #16]	; (800c6c8 <pbuf_alloc+0x2f0>)
 800c6b6:	f008 fa77 	bl	8014ba8 <iprintf>
    return NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e01c      	b.n	800c6f8 <pbuf_alloc+0x320>
 800c6be:	bf00      	nop
 800c6c0:	08015dbc 	.word	0x08015dbc
 800c6c4:	08015dec 	.word	0x08015dec
 800c6c8:	08015e08 	.word	0x08015e08
 800c6cc:	08015e30 	.word	0x08015e30
 800c6d0:	08015e60 	.word	0x08015e60
 800c6d4:	08015e94 	.word	0x08015e94
 800c6d8:	08015ec8 	.word	0x08015ec8
 800c6dc:	08015edc 	.word	0x08015edc
 800c6e0:	08015f0c 	.word	0x08015f0c
 800c6e4:	08015f38 	.word	0x08015f38
    break;
 800c6e8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c6f6:	69fb      	ldr	r3, [r7, #28]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3720      	adds	r7, #32
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	603b      	str	r3, [r7, #0]
 800c708:	4603      	mov	r3, r0
 800c70a:	71fb      	strb	r3, [r7, #7]
 800c70c:	460b      	mov	r3, r1
 800c70e:	80bb      	strh	r3, [r7, #4]
 800c710:	4613      	mov	r3, r2
 800c712:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	2b04      	cmp	r3, #4
 800c718:	d81b      	bhi.n	800c752 <pbuf_alloced_custom+0x52>
 800c71a:	a201      	add	r2, pc, #4	; (adr r2, 800c720 <pbuf_alloced_custom+0x20>)
 800c71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c720:	0800c735 	.word	0x0800c735
 800c724:	0800c73b 	.word	0x0800c73b
 800c728:	0800c741 	.word	0x0800c741
 800c72c:	0800c747 	.word	0x0800c747
 800c730:	0800c74d 	.word	0x0800c74d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c734:	2336      	movs	r3, #54	; 0x36
 800c736:	81fb      	strh	r3, [r7, #14]
    break;
 800c738:	e014      	b.n	800c764 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c73a:	2322      	movs	r3, #34	; 0x22
 800c73c:	81fb      	strh	r3, [r7, #14]
    break;
 800c73e:	e011      	b.n	800c764 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c740:	230e      	movs	r3, #14
 800c742:	81fb      	strh	r3, [r7, #14]
    break;
 800c744:	e00e      	b.n	800c764 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c746:	2300      	movs	r3, #0
 800c748:	81fb      	strh	r3, [r7, #14]
    break;
 800c74a:	e00b      	b.n	800c764 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	81fb      	strh	r3, [r7, #14]
    break;
 800c750:	e008      	b.n	800c764 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800c752:	4b1d      	ldr	r3, [pc, #116]	; (800c7c8 <pbuf_alloced_custom+0xc8>)
 800c754:	f240 12c5 	movw	r2, #453	; 0x1c5
 800c758:	491c      	ldr	r1, [pc, #112]	; (800c7cc <pbuf_alloced_custom+0xcc>)
 800c75a:	481d      	ldr	r0, [pc, #116]	; (800c7d0 <pbuf_alloced_custom+0xd0>)
 800c75c:	f008 fa24 	bl	8014ba8 <iprintf>
    return NULL;
 800c760:	2300      	movs	r3, #0
 800c762:	e02d      	b.n	800c7c0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c764:	89fb      	ldrh	r3, [r7, #14]
 800c766:	3303      	adds	r3, #3
 800c768:	f023 0203 	bic.w	r2, r3, #3
 800c76c:	88bb      	ldrh	r3, [r7, #4]
 800c76e:	441a      	add	r2, r3
 800c770:	8bbb      	ldrh	r3, [r7, #28]
 800c772:	429a      	cmp	r2, r3
 800c774:	d901      	bls.n	800c77a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	e022      	b.n	800c7c0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	2200      	movs	r2, #0
 800c77e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d008      	beq.n	800c798 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c786:	89fb      	ldrh	r3, [r7, #14]
 800c788:	3303      	adds	r3, #3
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	69ba      	ldr	r2, [r7, #24]
 800c790:	441a      	add	r2, r3
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	605a      	str	r2, [r3, #4]
 800c796:	e002      	b.n	800c79e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2200      	movs	r2, #0
 800c79c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	88ba      	ldrh	r2, [r7, #4]
 800c7a8:	811a      	strh	r2, [r3, #8]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	891a      	ldrh	r2, [r3, #8]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	79ba      	ldrb	r2, [r7, #6]
 800c7b6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800c7be:	683b      	ldr	r3, [r7, #0]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	08015dbc 	.word	0x08015dbc
 800c7cc:	08015f54 	.word	0x08015f54
 800c7d0:	08015e08 	.word	0x08015e08

0800c7d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d106      	bne.n	800c7f4 <pbuf_realloc+0x20>
 800c7e6:	4b4b      	ldr	r3, [pc, #300]	; (800c914 <pbuf_realloc+0x140>)
 800c7e8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800c7ec:	494a      	ldr	r1, [pc, #296]	; (800c918 <pbuf_realloc+0x144>)
 800c7ee:	484b      	ldr	r0, [pc, #300]	; (800c91c <pbuf_realloc+0x148>)
 800c7f0:	f008 f9da 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	7b1b      	ldrb	r3, [r3, #12]
 800c7f8:	2b03      	cmp	r3, #3
 800c7fa:	d012      	beq.n	800c822 <pbuf_realloc+0x4e>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7b1b      	ldrb	r3, [r3, #12]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d00e      	beq.n	800c822 <pbuf_realloc+0x4e>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	7b1b      	ldrb	r3, [r3, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <pbuf_realloc+0x4e>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7b1b      	ldrb	r3, [r3, #12]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d006      	beq.n	800c822 <pbuf_realloc+0x4e>
 800c814:	4b3f      	ldr	r3, [pc, #252]	; (800c914 <pbuf_realloc+0x140>)
 800c816:	f240 12f7 	movw	r2, #503	; 0x1f7
 800c81a:	4941      	ldr	r1, [pc, #260]	; (800c920 <pbuf_realloc+0x14c>)
 800c81c:	483f      	ldr	r0, [pc, #252]	; (800c91c <pbuf_realloc+0x148>)
 800c81e:	f008 f9c3 	bl	8014ba8 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	891b      	ldrh	r3, [r3, #8]
 800c826:	887a      	ldrh	r2, [r7, #2]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d26f      	bcs.n	800c90c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800c82c:	887b      	ldrh	r3, [r7, #2]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	8912      	ldrh	r2, [r2, #8]
 800c832:	1a9b      	subs	r3, r3, r2
 800c834:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c836:	887b      	ldrh	r3, [r7, #2]
 800c838:	827b      	strh	r3, [r7, #18]
  q = p;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c83e:	e025      	b.n	800c88c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	895b      	ldrh	r3, [r3, #10]
 800c844:	8a7a      	ldrh	r2, [r7, #18]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c850:	4293      	cmp	r3, r2
 800c852:	dd06      	ble.n	800c862 <pbuf_realloc+0x8e>
 800c854:	4b2f      	ldr	r3, [pc, #188]	; (800c914 <pbuf_realloc+0x140>)
 800c856:	f240 220b 	movw	r2, #523	; 0x20b
 800c85a:	4932      	ldr	r1, [pc, #200]	; (800c924 <pbuf_realloc+0x150>)
 800c85c:	482f      	ldr	r0, [pc, #188]	; (800c91c <pbuf_realloc+0x148>)
 800c85e:	f008 f9a3 	bl	8014ba8 <iprintf>
    q->tot_len += (u16_t)grow;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	891a      	ldrh	r2, [r3, #8]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	b29b      	uxth	r3, r3
 800c86a:	4413      	add	r3, r2
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d106      	bne.n	800c88c <pbuf_realloc+0xb8>
 800c87e:	4b25      	ldr	r3, [pc, #148]	; (800c914 <pbuf_realloc+0x140>)
 800c880:	f240 220f 	movw	r2, #527	; 0x20f
 800c884:	4928      	ldr	r1, [pc, #160]	; (800c928 <pbuf_realloc+0x154>)
 800c886:	4825      	ldr	r0, [pc, #148]	; (800c91c <pbuf_realloc+0x148>)
 800c888:	f008 f98e 	bl	8014ba8 <iprintf>
  while (rem_len > q->len) {
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	895b      	ldrh	r3, [r3, #10]
 800c890:	8a7a      	ldrh	r2, [r7, #18]
 800c892:	429a      	cmp	r2, r3
 800c894:	d8d4      	bhi.n	800c840 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	7b1b      	ldrb	r3, [r3, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d122      	bne.n	800c8e4 <pbuf_realloc+0x110>
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	895b      	ldrh	r3, [r3, #10]
 800c8a2:	8a7a      	ldrh	r2, [r7, #18]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d01d      	beq.n	800c8e4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	7b5b      	ldrb	r3, [r3, #13]
 800c8ac:	f003 0302 	and.w	r3, r3, #2
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d117      	bne.n	800c8e4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	b29a      	uxth	r2, r3
 800c8c0:	8a7b      	ldrh	r3, [r7, #18]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6978      	ldr	r0, [r7, #20]
 800c8ca:	f7ff f8f9 	bl	800bac0 <mem_trim>
 800c8ce:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <pbuf_realloc+0x110>
 800c8d6:	4b0f      	ldr	r3, [pc, #60]	; (800c914 <pbuf_realloc+0x140>)
 800c8d8:	f240 221d 	movw	r2, #541	; 0x21d
 800c8dc:	4913      	ldr	r1, [pc, #76]	; (800c92c <pbuf_realloc+0x158>)
 800c8de:	480f      	ldr	r0, [pc, #60]	; (800c91c <pbuf_realloc+0x148>)
 800c8e0:	f008 f962 	bl	8014ba8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	8a7a      	ldrh	r2, [r7, #18]
 800c8e8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	895a      	ldrh	r2, [r3, #10]
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d004      	beq.n	800c904 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 f8dc 	bl	800cabc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2200      	movs	r2, #0
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	e000      	b.n	800c90e <pbuf_realloc+0x13a>
    return;
 800c90c:	bf00      	nop

}
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	08015dbc 	.word	0x08015dbc
 800c918:	08015f78 	.word	0x08015f78
 800c91c:	08015e08 	.word	0x08015e08
 800c920:	08015f90 	.word	0x08015f90
 800c924:	08015fac 	.word	0x08015fac
 800c928:	08015fc0 	.word	0x08015fc0
 800c92c:	08015fd8 	.word	0x08015fd8

0800c930 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	807b      	strh	r3, [r7, #2]
 800c93c:	4613      	mov	r3, r2
 800c93e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <pbuf_header_impl+0x24>
 800c946:	4b46      	ldr	r3, [pc, #280]	; (800ca60 <pbuf_header_impl+0x130>)
 800c948:	f240 223f 	movw	r2, #575	; 0x23f
 800c94c:	4945      	ldr	r1, [pc, #276]	; (800ca64 <pbuf_header_impl+0x134>)
 800c94e:	4846      	ldr	r0, [pc, #280]	; (800ca68 <pbuf_header_impl+0x138>)
 800c950:	f008 f92a 	bl	8014ba8 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800c954:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <pbuf_header_impl+0x32>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d101      	bne.n	800c966 <pbuf_header_impl+0x36>
    return 0;
 800c962:	2300      	movs	r3, #0
 800c964:	e078      	b.n	800ca58 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800c966:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	da10      	bge.n	800c990 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800c96e:	887b      	ldrh	r3, [r7, #2]
 800c970:	425b      	negs	r3, r3
 800c972:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	895b      	ldrh	r3, [r3, #10]
 800c978:	89fa      	ldrh	r2, [r7, #14]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d90a      	bls.n	800c994 <pbuf_header_impl+0x64>
 800c97e:	4b38      	ldr	r3, [pc, #224]	; (800ca60 <pbuf_header_impl+0x130>)
 800c980:	f240 2247 	movw	r2, #583	; 0x247
 800c984:	4939      	ldr	r1, [pc, #228]	; (800ca6c <pbuf_header_impl+0x13c>)
 800c986:	4838      	ldr	r0, [pc, #224]	; (800ca68 <pbuf_header_impl+0x138>)
 800c988:	f008 f90e 	bl	8014ba8 <iprintf>
 800c98c:	2301      	movs	r3, #1
 800c98e:	e063      	b.n	800ca58 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800c990:	887b      	ldrh	r3, [r7, #2]
 800c992:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	7b1b      	ldrb	r3, [r3, #12]
 800c998:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800c9a0:	89bb      	ldrh	r3, [r7, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <pbuf_header_impl+0x7c>
 800c9a6:	89bb      	ldrh	r3, [r7, #12]
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d112      	bne.n	800c9d2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9b4:	425b      	negs	r3, r3
 800c9b6:	441a      	add	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	3310      	adds	r3, #16
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d238      	bcs.n	800ca3a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e042      	b.n	800ca58 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800c9d2:	89bb      	ldrh	r3, [r7, #12]
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d002      	beq.n	800c9de <pbuf_header_impl+0xae>
 800c9d8:	89bb      	ldrh	r3, [r7, #12]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d124      	bne.n	800ca28 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c9de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	da0d      	bge.n	800ca02 <pbuf_header_impl+0xd2>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	895b      	ldrh	r3, [r3, #10]
 800c9ea:	89fa      	ldrh	r2, [r7, #14]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d808      	bhi.n	800ca02 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9f8:	425b      	negs	r3, r3
 800c9fa:	441a      	add	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	605a      	str	r2, [r3, #4]
 800ca00:	e011      	b.n	800ca26 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800ca02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	dd0b      	ble.n	800ca22 <pbuf_header_impl+0xf2>
 800ca0a:	787b      	ldrb	r3, [r7, #1]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d008      	beq.n	800ca22 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca18:	425b      	negs	r3, r3
 800ca1a:	441a      	add	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	605a      	str	r2, [r3, #4]
 800ca20:	e001      	b.n	800ca26 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e018      	b.n	800ca58 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800ca26:	e008      	b.n	800ca3a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800ca28:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <pbuf_header_impl+0x130>)
 800ca2a:	f240 2277 	movw	r2, #631	; 0x277
 800ca2e:	4910      	ldr	r1, [pc, #64]	; (800ca70 <pbuf_header_impl+0x140>)
 800ca30:	480d      	ldr	r0, [pc, #52]	; (800ca68 <pbuf_header_impl+0x138>)
 800ca32:	f008 f8b9 	bl	8014ba8 <iprintf>
    return 1;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e00e      	b.n	800ca58 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	895a      	ldrh	r2, [r3, #10]
 800ca3e:	887b      	ldrh	r3, [r7, #2]
 800ca40:	4413      	add	r3, r2
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	891a      	ldrh	r2, [r3, #8]
 800ca4c:	887b      	ldrh	r3, [r7, #2]
 800ca4e:	4413      	add	r3, r2
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	08015dbc 	.word	0x08015dbc
 800ca64:	08015ff4 	.word	0x08015ff4
 800ca68:	08015e08 	.word	0x08015e08
 800ca6c:	08016000 	.word	0x08016000
 800ca70:	08016020 	.word	0x08016020

0800ca74 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800ca80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca84:	2200      	movs	r2, #0
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff ff51 	bl	800c930 <pbuf_header_impl>
 800ca8e:	4603      	mov	r3, r0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800caa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800caa8:	2201      	movs	r2, #1
 800caaa:	4619      	mov	r1, r3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff ff3f 	bl	800c930 <pbuf_header_impl>
 800cab2:	4603      	mov	r3, r0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10b      	bne.n	800cae2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d106      	bne.n	800cade <pbuf_free+0x22>
 800cad0:	4b41      	ldr	r3, [pc, #260]	; (800cbd8 <pbuf_free+0x11c>)
 800cad2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cad6:	4941      	ldr	r1, [pc, #260]	; (800cbdc <pbuf_free+0x120>)
 800cad8:	4841      	ldr	r0, [pc, #260]	; (800cbe0 <pbuf_free+0x124>)
 800cada:	f008 f865 	bl	8014ba8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	e076      	b.n	800cbd0 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7b1b      	ldrb	r3, [r3, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d012      	beq.n	800cb10 <pbuf_free+0x54>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7b1b      	ldrb	r3, [r3, #12]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d00e      	beq.n	800cb10 <pbuf_free+0x54>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7b1b      	ldrb	r3, [r3, #12]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d00a      	beq.n	800cb10 <pbuf_free+0x54>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	7b1b      	ldrb	r3, [r3, #12]
 800cafe:	2b03      	cmp	r3, #3
 800cb00:	d006      	beq.n	800cb10 <pbuf_free+0x54>
 800cb02:	4b35      	ldr	r3, [pc, #212]	; (800cbd8 <pbuf_free+0x11c>)
 800cb04:	f240 22de 	movw	r2, #734	; 0x2de
 800cb08:	4936      	ldr	r1, [pc, #216]	; (800cbe4 <pbuf_free+0x128>)
 800cb0a:	4835      	ldr	r0, [pc, #212]	; (800cbe0 <pbuf_free+0x124>)
 800cb0c:	f008 f84c 	bl	8014ba8 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cb14:	e058      	b.n	800cbc8 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cb16:	f007 fa51 	bl	8013fbc <sys_arch_protect>
 800cb1a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	89db      	ldrh	r3, [r3, #14]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <pbuf_free+0x76>
 800cb24:	4b2c      	ldr	r3, [pc, #176]	; (800cbd8 <pbuf_free+0x11c>)
 800cb26:	f240 22eb 	movw	r2, #747	; 0x2eb
 800cb2a:	492f      	ldr	r1, [pc, #188]	; (800cbe8 <pbuf_free+0x12c>)
 800cb2c:	482c      	ldr	r0, [pc, #176]	; (800cbe0 <pbuf_free+0x124>)
 800cb2e:	f008 f83b 	bl	8014ba8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	89db      	ldrh	r3, [r3, #14]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	81da      	strh	r2, [r3, #14]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	89db      	ldrh	r3, [r3, #14]
 800cb42:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800cb44:	69b8      	ldr	r0, [r7, #24]
 800cb46:	f007 fa47 	bl	8013fd8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cb4a:	8afb      	ldrh	r3, [r7, #22]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d139      	bne.n	800cbc4 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	7b1b      	ldrb	r3, [r3, #12]
 800cb5a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7b5b      	ldrb	r3, [r3, #13]
 800cb60:	f003 0302 	and.w	r3, r3, #2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d011      	beq.n	800cb8c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d106      	bne.n	800cb82 <pbuf_free+0xc6>
 800cb74:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <pbuf_free+0x11c>)
 800cb76:	f240 22f9 	movw	r2, #761	; 0x2f9
 800cb7a:	491c      	ldr	r1, [pc, #112]	; (800cbec <pbuf_free+0x130>)
 800cb7c:	4818      	ldr	r0, [pc, #96]	; (800cbe0 <pbuf_free+0x124>)
 800cb7e:	f008 f813 	bl	8014ba8 <iprintf>
        pc->custom_free_function(p);
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	4798      	blx	r3
 800cb8a:	e015      	b.n	800cbb8 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800cb8c:	89fb      	ldrh	r3, [r7, #14]
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d104      	bne.n	800cb9c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800cb92:	6879      	ldr	r1, [r7, #4]
 800cb94:	200b      	movs	r0, #11
 800cb96:	f7ff fa3f 	bl	800c018 <memp_free>
 800cb9a:	e00d      	b.n	800cbb8 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800cb9c:	89fb      	ldrh	r3, [r7, #14]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d002      	beq.n	800cba8 <pbuf_free+0xec>
 800cba2:	89fb      	ldrh	r3, [r7, #14]
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	d104      	bne.n	800cbb2 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800cba8:	6879      	ldr	r1, [r7, #4]
 800cbaa:	200a      	movs	r0, #10
 800cbac:	f7ff fa34 	bl	800c018 <memp_free>
 800cbb0:	e002      	b.n	800cbb8 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7fe ff16 	bl	800b9e4 <mem_free>
        }
      }
      count++;
 800cbb8:	7ffb      	ldrb	r3, [r7, #31]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	607b      	str	r3, [r7, #4]
 800cbc2:	e001      	b.n	800cbc8 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1a3      	bne.n	800cb16 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cbce:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3720      	adds	r7, #32
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	08015dbc 	.word	0x08015dbc
 800cbdc:	08015ff4 	.word	0x08015ff4
 800cbe0:	08015e08 	.word	0x08015e08
 800cbe4:	08016030 	.word	0x08016030
 800cbe8:	08016048 	.word	0x08016048
 800cbec:	08016060 	.word	0x08016060

0800cbf0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cbfc:	e005      	b.n	800cc0a <pbuf_clen+0x1a>
    ++len;
 800cbfe:	89fb      	ldrh	r3, [r7, #14]
 800cc00:	3301      	adds	r3, #1
 800cc02:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f6      	bne.n	800cbfe <pbuf_clen+0xe>
  }
  return len;
 800cc10:	89fb      	ldrh	r3, [r7, #14]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
	...

0800cc20 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d016      	beq.n	800cc5c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800cc2e:	f007 f9c5 	bl	8013fbc <sys_arch_protect>
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	89db      	ldrh	r3, [r3, #14]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	81da      	strh	r2, [r3, #14]
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f007 f9c9 	bl	8013fd8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	89db      	ldrh	r3, [r3, #14]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d106      	bne.n	800cc5c <pbuf_ref+0x3c>
 800cc4e:	4b05      	ldr	r3, [pc, #20]	; (800cc64 <pbuf_ref+0x44>)
 800cc50:	f240 3239 	movw	r2, #825	; 0x339
 800cc54:	4904      	ldr	r1, [pc, #16]	; (800cc68 <pbuf_ref+0x48>)
 800cc56:	4805      	ldr	r0, [pc, #20]	; (800cc6c <pbuf_ref+0x4c>)
 800cc58:	f007 ffa6 	bl	8014ba8 <iprintf>
  }
}
 800cc5c:	bf00      	nop
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	08015dbc 	.word	0x08015dbc
 800cc68:	08016084 	.word	0x08016084
 800cc6c:	08015e08 	.word	0x08015e08

0800cc70 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <pbuf_cat+0x16>
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d107      	bne.n	800cc96 <pbuf_cat+0x26>
 800cc86:	4b20      	ldr	r3, [pc, #128]	; (800cd08 <pbuf_cat+0x98>)
 800cc88:	f240 324d 	movw	r2, #845	; 0x34d
 800cc8c:	491f      	ldr	r1, [pc, #124]	; (800cd0c <pbuf_cat+0x9c>)
 800cc8e:	4820      	ldr	r0, [pc, #128]	; (800cd10 <pbuf_cat+0xa0>)
 800cc90:	f007 ff8a 	bl	8014ba8 <iprintf>
 800cc94:	e034      	b.n	800cd00 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	60fb      	str	r3, [r7, #12]
 800cc9a:	e00a      	b.n	800ccb2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	891a      	ldrh	r2, [r3, #8]
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	891b      	ldrh	r3, [r3, #8]
 800cca4:	4413      	add	r3, r2
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	60fb      	str	r3, [r7, #12]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1f0      	bne.n	800cc9c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	891a      	ldrh	r2, [r3, #8]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	895b      	ldrh	r3, [r3, #10]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d006      	beq.n	800ccd4 <pbuf_cat+0x64>
 800ccc6:	4b10      	ldr	r3, [pc, #64]	; (800cd08 <pbuf_cat+0x98>)
 800ccc8:	f240 3255 	movw	r2, #853	; 0x355
 800cccc:	4911      	ldr	r1, [pc, #68]	; (800cd14 <pbuf_cat+0xa4>)
 800ccce:	4810      	ldr	r0, [pc, #64]	; (800cd10 <pbuf_cat+0xa0>)
 800ccd0:	f007 ff6a 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d006      	beq.n	800ccea <pbuf_cat+0x7a>
 800ccdc:	4b0a      	ldr	r3, [pc, #40]	; (800cd08 <pbuf_cat+0x98>)
 800ccde:	f240 3256 	movw	r2, #854	; 0x356
 800cce2:	490d      	ldr	r1, [pc, #52]	; (800cd18 <pbuf_cat+0xa8>)
 800cce4:	480a      	ldr	r0, [pc, #40]	; (800cd10 <pbuf_cat+0xa0>)
 800cce6:	f007 ff5f 	bl	8014ba8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	891a      	ldrh	r2, [r3, #8]
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	891b      	ldrh	r3, [r3, #8]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	08015dbc 	.word	0x08015dbc
 800cd0c:	08016098 	.word	0x08016098
 800cd10:	08015e08 	.word	0x08015e08
 800cd14:	080160d0 	.word	0x080160d0
 800cd18:	08016100 	.word	0x08016100

0800cd1c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800cd26:	2300      	movs	r3, #0
 800cd28:	81fb      	strh	r3, [r7, #14]
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d008      	beq.n	800cd46 <pbuf_copy+0x2a>
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d005      	beq.n	800cd46 <pbuf_copy+0x2a>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	891a      	ldrh	r2, [r3, #8]
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	891b      	ldrh	r3, [r3, #8]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d209      	bcs.n	800cd5a <pbuf_copy+0x3e>
 800cd46:	4b54      	ldr	r3, [pc, #336]	; (800ce98 <pbuf_copy+0x17c>)
 800cd48:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cd4c:	4953      	ldr	r1, [pc, #332]	; (800ce9c <pbuf_copy+0x180>)
 800cd4e:	4854      	ldr	r0, [pc, #336]	; (800cea0 <pbuf_copy+0x184>)
 800cd50:	f007 ff2a 	bl	8014ba8 <iprintf>
 800cd54:	f06f 030f 	mvn.w	r3, #15
 800cd58:	e099      	b.n	800ce8e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	895b      	ldrh	r3, [r3, #10]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	89fb      	ldrh	r3, [r7, #14]
 800cd62:	1ad2      	subs	r2, r2, r3
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	895b      	ldrh	r3, [r3, #10]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	89bb      	ldrh	r3, [r7, #12]
 800cd6c:	1acb      	subs	r3, r1, r3
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	db05      	blt.n	800cd7e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	895a      	ldrh	r2, [r3, #10]
 800cd76:	89bb      	ldrh	r3, [r7, #12]
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	817b      	strh	r3, [r7, #10]
 800cd7c:	e004      	b.n	800cd88 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	895a      	ldrh	r2, [r3, #10]
 800cd82:	89fb      	ldrh	r3, [r7, #14]
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	89fb      	ldrh	r3, [r7, #14]
 800cd8e:	18d0      	adds	r0, r2, r3
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	89bb      	ldrh	r3, [r7, #12]
 800cd96:	4413      	add	r3, r2
 800cd98:	897a      	ldrh	r2, [r7, #10]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	f007 fe49 	bl	8014a32 <memcpy>
    offset_to += len;
 800cda0:	89fa      	ldrh	r2, [r7, #14]
 800cda2:	897b      	ldrh	r3, [r7, #10]
 800cda4:	4413      	add	r3, r2
 800cda6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800cda8:	89ba      	ldrh	r2, [r7, #12]
 800cdaa:	897b      	ldrh	r3, [r7, #10]
 800cdac:	4413      	add	r3, r2
 800cdae:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	895b      	ldrh	r3, [r3, #10]
 800cdb4:	89fa      	ldrh	r2, [r7, #14]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d906      	bls.n	800cdc8 <pbuf_copy+0xac>
 800cdba:	4b37      	ldr	r3, [pc, #220]	; (800ce98 <pbuf_copy+0x17c>)
 800cdbc:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cdc0:	4938      	ldr	r1, [pc, #224]	; (800cea4 <pbuf_copy+0x188>)
 800cdc2:	4837      	ldr	r0, [pc, #220]	; (800cea0 <pbuf_copy+0x184>)
 800cdc4:	f007 fef0 	bl	8014ba8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	895b      	ldrh	r3, [r3, #10]
 800cdcc:	89ba      	ldrh	r2, [r7, #12]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d906      	bls.n	800cde0 <pbuf_copy+0xc4>
 800cdd2:	4b31      	ldr	r3, [pc, #196]	; (800ce98 <pbuf_copy+0x17c>)
 800cdd4:	f240 32ce 	movw	r2, #974	; 0x3ce
 800cdd8:	4933      	ldr	r1, [pc, #204]	; (800cea8 <pbuf_copy+0x18c>)
 800cdda:	4831      	ldr	r0, [pc, #196]	; (800cea0 <pbuf_copy+0x184>)
 800cddc:	f007 fee4 	bl	8014ba8 <iprintf>
    if (offset_from >= p_from->len) {
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	895b      	ldrh	r3, [r3, #10]
 800cde4:	89ba      	ldrh	r2, [r7, #12]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d304      	bcc.n	800cdf4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	895b      	ldrh	r3, [r3, #10]
 800cdf8:	89fa      	ldrh	r2, [r7, #14]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d114      	bne.n	800ce28 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10c      	bne.n	800ce28 <pbuf_copy+0x10c>
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d009      	beq.n	800ce28 <pbuf_copy+0x10c>
 800ce14:	4b20      	ldr	r3, [pc, #128]	; (800ce98 <pbuf_copy+0x17c>)
 800ce16:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ce1a:	4924      	ldr	r1, [pc, #144]	; (800ceac <pbuf_copy+0x190>)
 800ce1c:	4820      	ldr	r0, [pc, #128]	; (800cea0 <pbuf_copy+0x184>)
 800ce1e:	f007 fec3 	bl	8014ba8 <iprintf>
 800ce22:	f06f 030f 	mvn.w	r3, #15
 800ce26:	e032      	b.n	800ce8e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d013      	beq.n	800ce56 <pbuf_copy+0x13a>
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	895a      	ldrh	r2, [r3, #10]
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	891b      	ldrh	r3, [r3, #8]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d10d      	bne.n	800ce56 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d009      	beq.n	800ce56 <pbuf_copy+0x13a>
 800ce42:	4b15      	ldr	r3, [pc, #84]	; (800ce98 <pbuf_copy+0x17c>)
 800ce44:	f240 32de 	movw	r2, #990	; 0x3de
 800ce48:	4919      	ldr	r1, [pc, #100]	; (800ceb0 <pbuf_copy+0x194>)
 800ce4a:	4815      	ldr	r0, [pc, #84]	; (800cea0 <pbuf_copy+0x184>)
 800ce4c:	f007 feac 	bl	8014ba8 <iprintf>
 800ce50:	f06f 0305 	mvn.w	r3, #5
 800ce54:	e01b      	b.n	800ce8e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d013      	beq.n	800ce84 <pbuf_copy+0x168>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	895a      	ldrh	r2, [r3, #10]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	891b      	ldrh	r3, [r3, #8]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d10d      	bne.n	800ce84 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d009      	beq.n	800ce84 <pbuf_copy+0x168>
 800ce70:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <pbuf_copy+0x17c>)
 800ce72:	f240 32e3 	movw	r2, #995	; 0x3e3
 800ce76:	490e      	ldr	r1, [pc, #56]	; (800ceb0 <pbuf_copy+0x194>)
 800ce78:	4809      	ldr	r0, [pc, #36]	; (800cea0 <pbuf_copy+0x184>)
 800ce7a:	f007 fe95 	bl	8014ba8 <iprintf>
 800ce7e:	f06f 0305 	mvn.w	r3, #5
 800ce82:	e004      	b.n	800ce8e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f47f af67 	bne.w	800cd5a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	08015dbc 	.word	0x08015dbc
 800ce9c:	0801614c 	.word	0x0801614c
 800cea0:	08015e08 	.word	0x08015e08
 800cea4:	0801617c 	.word	0x0801617c
 800cea8:	08016194 	.word	0x08016194
 800ceac:	080161b0 	.word	0x080161b0
 800ceb0:	080161c0 	.word	0x080161c0

0800ceb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	4611      	mov	r1, r2
 800cec0:	461a      	mov	r2, r3
 800cec2:	460b      	mov	r3, r1
 800cec4:	80fb      	strh	r3, [r7, #6]
 800cec6:	4613      	mov	r3, r2
 800cec8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d108      	bne.n	800cee6 <pbuf_copy_partial+0x32>
 800ced4:	4b30      	ldr	r3, [pc, #192]	; (800cf98 <pbuf_copy_partial+0xe4>)
 800ced6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800ceda:	4930      	ldr	r1, [pc, #192]	; (800cf9c <pbuf_copy_partial+0xe8>)
 800cedc:	4830      	ldr	r0, [pc, #192]	; (800cfa0 <pbuf_copy_partial+0xec>)
 800cede:	f007 fe63 	bl	8014ba8 <iprintf>
 800cee2:	2300      	movs	r3, #0
 800cee4:	e054      	b.n	800cf90 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d108      	bne.n	800cefe <pbuf_copy_partial+0x4a>
 800ceec:	4b2a      	ldr	r3, [pc, #168]	; (800cf98 <pbuf_copy_partial+0xe4>)
 800ceee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800cef2:	492c      	ldr	r1, [pc, #176]	; (800cfa4 <pbuf_copy_partial+0xf0>)
 800cef4:	482a      	ldr	r0, [pc, #168]	; (800cfa0 <pbuf_copy_partial+0xec>)
 800cef6:	f007 fe57 	bl	8014ba8 <iprintf>
 800cefa:	2300      	movs	r3, #0
 800cefc:	e048      	b.n	800cf90 <pbuf_copy_partial+0xdc>

  left = 0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <pbuf_copy_partial+0x5a>
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d101      	bne.n	800cf12 <pbuf_copy_partial+0x5e>
    return 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e03e      	b.n	800cf90 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	61fb      	str	r3, [r7, #28]
 800cf16:	e034      	b.n	800cf82 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800cf18:	88bb      	ldrh	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00a      	beq.n	800cf34 <pbuf_copy_partial+0x80>
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	895b      	ldrh	r3, [r3, #10]
 800cf22:	88ba      	ldrh	r2, [r7, #4]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d305      	bcc.n	800cf34 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	895b      	ldrh	r3, [r3, #10]
 800cf2c:	88ba      	ldrh	r2, [r7, #4]
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	80bb      	strh	r3, [r7, #4]
 800cf32:	e023      	b.n	800cf7c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	895a      	ldrh	r2, [r3, #10]
 800cf38:	88bb      	ldrh	r3, [r7, #4]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cf3e:	8b3a      	ldrh	r2, [r7, #24]
 800cf40:	88fb      	ldrh	r3, [r7, #6]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d901      	bls.n	800cf4a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800cf46:	88fb      	ldrh	r3, [r7, #6]
 800cf48:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800cf4a:	8b7b      	ldrh	r3, [r7, #26]
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	18d0      	adds	r0, r2, r3
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	685a      	ldr	r2, [r3, #4]
 800cf54:	88bb      	ldrh	r3, [r7, #4]
 800cf56:	4413      	add	r3, r2
 800cf58:	8b3a      	ldrh	r2, [r7, #24]
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	f007 fd69 	bl	8014a32 <memcpy>
      copied_total += buf_copy_len;
 800cf60:	8afa      	ldrh	r2, [r7, #22]
 800cf62:	8b3b      	ldrh	r3, [r7, #24]
 800cf64:	4413      	add	r3, r2
 800cf66:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800cf68:	8b7a      	ldrh	r2, [r7, #26]
 800cf6a:	8b3b      	ldrh	r3, [r7, #24]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800cf70:	88fa      	ldrh	r2, [r7, #6]
 800cf72:	8b3b      	ldrh	r3, [r7, #24]
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	61fb      	str	r3, [r7, #28]
 800cf82:	88fb      	ldrh	r3, [r7, #6]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <pbuf_copy_partial+0xda>
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1c4      	bne.n	800cf18 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800cf8e:	8afb      	ldrh	r3, [r7, #22]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3720      	adds	r7, #32
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	08015dbc 	.word	0x08015dbc
 800cf9c:	080161ec 	.word	0x080161ec
 800cfa0:	08015e08 	.word	0x08015e08
 800cfa4:	0801620c 	.word	0x0801620c

0800cfa8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800cfac:	bf00      	nop
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cfbc:	f000 fdf0 	bl	800dba0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cfc0:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <tcp_tmr+0x28>)
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	b2da      	uxtb	r2, r3
 800cfc8:	4b05      	ldr	r3, [pc, #20]	; (800cfe0 <tcp_tmr+0x28>)
 800cfca:	701a      	strb	r2, [r3, #0]
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <tcp_tmr+0x28>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cfd8:	f000 fb22 	bl	800d620 <tcp_slowtmr>
  }
}
 800cfdc:	bf00      	nop
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	200041f9 	.word	0x200041f9

0800cfe4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	60fb      	str	r3, [r7, #12]
 800cff2:	e00a      	b.n	800d00a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cff8:	683a      	ldr	r2, [r7, #0]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d102      	bne.n	800d004 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	60fb      	str	r3, [r7, #12]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1f1      	bne.n	800cff4 <tcp_remove_listener+0x10>
      }
   }
}
 800d010:	bf00      	nop
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d105      	bne.n	800d036 <tcp_listen_closed+0x1a>
 800d02a:	4b13      	ldr	r3, [pc, #76]	; (800d078 <tcp_listen_closed+0x5c>)
 800d02c:	22c0      	movs	r2, #192	; 0xc0
 800d02e:	4913      	ldr	r1, [pc, #76]	; (800d07c <tcp_listen_closed+0x60>)
 800d030:	4813      	ldr	r0, [pc, #76]	; (800d080 <tcp_listen_closed+0x64>)
 800d032:	f007 fdb9 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	7d1b      	ldrb	r3, [r3, #20]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d005      	beq.n	800d04a <tcp_listen_closed+0x2e>
 800d03e:	4b0e      	ldr	r3, [pc, #56]	; (800d078 <tcp_listen_closed+0x5c>)
 800d040:	22c1      	movs	r2, #193	; 0xc1
 800d042:	4910      	ldr	r1, [pc, #64]	; (800d084 <tcp_listen_closed+0x68>)
 800d044:	480e      	ldr	r0, [pc, #56]	; (800d080 <tcp_listen_closed+0x64>)
 800d046:	f007 fdaf 	bl	8014ba8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d04a:	2301      	movs	r3, #1
 800d04c:	60fb      	str	r3, [r7, #12]
 800d04e:	e00b      	b.n	800d068 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800d050:	4a0d      	ldr	r2, [pc, #52]	; (800d088 <tcp_listen_closed+0x6c>)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	6879      	ldr	r1, [r7, #4]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff ffc1 	bl	800cfe4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	3301      	adds	r3, #1
 800d066:	60fb      	str	r3, [r7, #12]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d9f0      	bls.n	800d050 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	08016340 	.word	0x08016340
 800d07c:	08016370 	.word	0x08016370
 800d080:	0801637c 	.word	0x0801637c
 800d084:	080163a4 	.word	0x080163a4
 800d088:	08017760 	.word	0x08017760

0800d08c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d08c:	b5b0      	push	{r4, r5, r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af02      	add	r7, sp, #8
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	460b      	mov	r3, r1
 800d096:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d098:	78fb      	ldrb	r3, [r7, #3]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d075      	beq.n	800d18a <tcp_close_shutdown+0xfe>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7d1b      	ldrb	r3, [r3, #20]
 800d0a2:	2b04      	cmp	r3, #4
 800d0a4:	d003      	beq.n	800d0ae <tcp_close_shutdown+0x22>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	7d1b      	ldrb	r3, [r3, #20]
 800d0aa:	2b07      	cmp	r3, #7
 800d0ac:	d16d      	bne.n	800d18a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d104      	bne.n	800d0c0 <tcp_close_shutdown+0x34>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d0be:	d064      	beq.n	800d18a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	7e9b      	ldrb	r3, [r3, #26]
 800d0c4:	f003 0310 	and.w	r3, r3, #16
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d106      	bne.n	800d0da <tcp_close_shutdown+0x4e>
 800d0cc:	4b59      	ldr	r3, [pc, #356]	; (800d234 <tcp_close_shutdown+0x1a8>)
 800d0ce:	f240 120f 	movw	r2, #271	; 0x10f
 800d0d2:	4959      	ldr	r1, [pc, #356]	; (800d238 <tcp_close_shutdown+0x1ac>)
 800d0d4:	4859      	ldr	r0, [pc, #356]	; (800d23c <tcp_close_shutdown+0x1b0>)
 800d0d6:	f007 fd67 	bl	8014ba8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d0e2:	687c      	ldr	r4, [r7, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	1d1d      	adds	r5, r3, #4
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	8adb      	ldrh	r3, [r3, #22]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	8b12      	ldrh	r2, [r2, #24]
 800d0f0:	9201      	str	r2, [sp, #4]
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	462b      	mov	r3, r5
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	f004 f862 	bl	80111c0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 ffc5 	bl	800e08c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d102:	4b4f      	ldr	r3, [pc, #316]	; (800d240 <tcp_close_shutdown+0x1b4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d105      	bne.n	800d118 <tcp_close_shutdown+0x8c>
 800d10c:	4b4c      	ldr	r3, [pc, #304]	; (800d240 <tcp_close_shutdown+0x1b4>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	4a4b      	ldr	r2, [pc, #300]	; (800d240 <tcp_close_shutdown+0x1b4>)
 800d114:	6013      	str	r3, [r2, #0]
 800d116:	e013      	b.n	800d140 <tcp_close_shutdown+0xb4>
 800d118:	4b49      	ldr	r3, [pc, #292]	; (800d240 <tcp_close_shutdown+0x1b4>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	e00c      	b.n	800d13a <tcp_close_shutdown+0xae>
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	429a      	cmp	r2, r3
 800d128:	d104      	bne.n	800d134 <tcp_close_shutdown+0xa8>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68da      	ldr	r2, [r3, #12]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	60da      	str	r2, [r3, #12]
 800d132:	e005      	b.n	800d140 <tcp_close_shutdown+0xb4>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	60fb      	str	r3, [r7, #12]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d1ef      	bne.n	800d120 <tcp_close_shutdown+0x94>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	60da      	str	r2, [r3, #12]
 800d146:	4b3f      	ldr	r3, [pc, #252]	; (800d244 <tcp_close_shutdown+0x1b8>)
 800d148:	2201      	movs	r2, #1
 800d14a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7d1b      	ldrb	r3, [r3, #20]
 800d150:	2b04      	cmp	r3, #4
 800d152:	d10c      	bne.n	800d16e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	220a      	movs	r2, #10
 800d158:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d15a:	4b3b      	ldr	r3, [pc, #236]	; (800d248 <tcp_close_shutdown+0x1bc>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	60da      	str	r2, [r3, #12]
 800d162:	4a39      	ldr	r2, [pc, #228]	; (800d248 <tcp_close_shutdown+0x1bc>)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	f004 fa7a 	bl	8011660 <tcp_timer_needed>
 800d16c:	e00b      	b.n	800d186 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800d16e:	4b37      	ldr	r3, [pc, #220]	; (800d24c <tcp_close_shutdown+0x1c0>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	429a      	cmp	r2, r3
 800d176:	d102      	bne.n	800d17e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800d178:	f003 faec 	bl	8010754 <tcp_trigger_input_pcb_close>
 800d17c:	e003      	b.n	800d186 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800d17e:	6879      	ldr	r1, [r7, #4]
 800d180:	2000      	movs	r0, #0
 800d182:	f7fe ff49 	bl	800c018 <memp_free>
        }
      }
      return ERR_OK;
 800d186:	2300      	movs	r3, #0
 800d188:	e050      	b.n	800d22c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	7d1b      	ldrb	r3, [r3, #20]
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d02e      	beq.n	800d1f0 <tcp_close_shutdown+0x164>
 800d192:	2b02      	cmp	r3, #2
 800d194:	d038      	beq.n	800d208 <tcp_close_shutdown+0x17c>
 800d196:	2b00      	cmp	r3, #0
 800d198:	d142      	bne.n	800d220 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	8adb      	ldrh	r3, [r3, #22]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d021      	beq.n	800d1e6 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d1a2:	4b2b      	ldr	r3, [pc, #172]	; (800d250 <tcp_close_shutdown+0x1c4>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d105      	bne.n	800d1b8 <tcp_close_shutdown+0x12c>
 800d1ac:	4b28      	ldr	r3, [pc, #160]	; (800d250 <tcp_close_shutdown+0x1c4>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	4a27      	ldr	r2, [pc, #156]	; (800d250 <tcp_close_shutdown+0x1c4>)
 800d1b4:	6013      	str	r3, [r2, #0]
 800d1b6:	e013      	b.n	800d1e0 <tcp_close_shutdown+0x154>
 800d1b8:	4b25      	ldr	r3, [pc, #148]	; (800d250 <tcp_close_shutdown+0x1c4>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	60bb      	str	r3, [r7, #8]
 800d1be:	e00c      	b.n	800d1da <tcp_close_shutdown+0x14e>
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d104      	bne.n	800d1d4 <tcp_close_shutdown+0x148>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68da      	ldr	r2, [r3, #12]
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	60da      	str	r2, [r3, #12]
 800d1d2:	e005      	b.n	800d1e0 <tcp_close_shutdown+0x154>
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	60bb      	str	r3, [r7, #8]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1ef      	bne.n	800d1c0 <tcp_close_shutdown+0x134>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800d1e6:	6879      	ldr	r1, [r7, #4]
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	f7fe ff15 	bl	800c018 <memp_free>
    break;
 800d1ee:	e01c      	b.n	800d22a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7ff ff13 	bl	800d01c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	4816      	ldr	r0, [pc, #88]	; (800d254 <tcp_close_shutdown+0x1c8>)
 800d1fa:	f000 ff89 	bl	800e110 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d1fe:	6879      	ldr	r1, [r7, #4]
 800d200:	2001      	movs	r0, #1
 800d202:	f7fe ff09 	bl	800c018 <memp_free>
    break;
 800d206:	e010      	b.n	800d22a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800d208:	6879      	ldr	r1, [r7, #4]
 800d20a:	480d      	ldr	r0, [pc, #52]	; (800d240 <tcp_close_shutdown+0x1b4>)
 800d20c:	f000 ff80 	bl	800e110 <tcp_pcb_remove>
 800d210:	4b0c      	ldr	r3, [pc, #48]	; (800d244 <tcp_close_shutdown+0x1b8>)
 800d212:	2201      	movs	r2, #1
 800d214:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800d216:	6879      	ldr	r1, [r7, #4]
 800d218:	2000      	movs	r0, #0
 800d21a:	f7fe fefd 	bl	800c018 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800d21e:	e004      	b.n	800d22a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f819 	bl	800d258 <tcp_close_shutdown_fin>
 800d226:	4603      	mov	r3, r0
 800d228:	e000      	b.n	800d22c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bdb0      	pop	{r4, r5, r7, pc}
 800d234:	08016340 	.word	0x08016340
 800d238:	080163bc 	.word	0x080163bc
 800d23c:	0801637c 	.word	0x0801637c
 800d240:	2000ab54 	.word	0x2000ab54
 800d244:	2000ab50 	.word	0x2000ab50
 800d248:	2000ab64 	.word	0x2000ab64
 800d24c:	2000ab68 	.word	0x2000ab68
 800d250:	2000ab60 	.word	0x2000ab60
 800d254:	2000ab5c 	.word	0x2000ab5c

0800d258 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <tcp_close_shutdown_fin+0x1c>
 800d266:	4b2c      	ldr	r3, [pc, #176]	; (800d318 <tcp_close_shutdown_fin+0xc0>)
 800d268:	f240 124d 	movw	r2, #333	; 0x14d
 800d26c:	492b      	ldr	r1, [pc, #172]	; (800d31c <tcp_close_shutdown_fin+0xc4>)
 800d26e:	482c      	ldr	r0, [pc, #176]	; (800d320 <tcp_close_shutdown_fin+0xc8>)
 800d270:	f007 fc9a 	bl	8014ba8 <iprintf>

  switch (pcb->state) {
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7d1b      	ldrb	r3, [r3, #20]
 800d278:	2b04      	cmp	r3, #4
 800d27a:	d010      	beq.n	800d29e <tcp_close_shutdown_fin+0x46>
 800d27c:	2b07      	cmp	r3, #7
 800d27e:	d01b      	beq.n	800d2b8 <tcp_close_shutdown_fin+0x60>
 800d280:	2b03      	cmp	r3, #3
 800d282:	d126      	bne.n	800d2d2 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f003 faf1 	bl	801086c <tcp_send_fin>
 800d28a:	4603      	mov	r3, r0
 800d28c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d28e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d11f      	bne.n	800d2d6 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2205      	movs	r2, #5
 800d29a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d29c:	e01b      	b.n	800d2d6 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f003 fae4 	bl	801086c <tcp_send_fin>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d2a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d114      	bne.n	800d2da <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2205      	movs	r2, #5
 800d2b4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d2b6:	e010      	b.n	800d2da <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f003 fad7 	bl	801086c <tcp_send_fin>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d109      	bne.n	800d2de <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2209      	movs	r2, #9
 800d2ce:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d2d0:	e005      	b.n	800d2de <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	e01c      	b.n	800d310 <tcp_close_shutdown_fin+0xb8>
    break;
 800d2d6:	bf00      	nop
 800d2d8:	e002      	b.n	800d2e0 <tcp_close_shutdown_fin+0x88>
    break;
 800d2da:	bf00      	nop
 800d2dc:	e000      	b.n	800d2e0 <tcp_close_shutdown_fin+0x88>
    break;
 800d2de:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d2e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d103      	bne.n	800d2f0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f003 fcdf 	bl	8010cac <tcp_output>
 800d2ee:	e00d      	b.n	800d30c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2f8:	d108      	bne.n	800d30c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	7e9b      	ldrb	r3, [r3, #26]
 800d2fe:	f043 0308 	orr.w	r3, r3, #8
 800d302:	b2da      	uxtb	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	e001      	b.n	800d310 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	08016340 	.word	0x08016340
 800d31c:	08016370 	.word	0x08016370
 800d320:	0801637c 	.word	0x0801637c

0800d324 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	7d1b      	ldrb	r3, [r3, #20]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d006      	beq.n	800d342 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	7e9b      	ldrb	r3, [r3, #26]
 800d338:	f043 0310 	orr.w	r3, r3, #16
 800d33c:	b2da      	uxtb	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d342:	2101      	movs	r1, #1
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff fea1 	bl	800d08c <tcp_close_shutdown>
 800d34a:	4603      	mov	r3, r0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08c      	sub	sp, #48	; 0x30
 800d358:	af02      	add	r7, sp, #8
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	7d1b      	ldrb	r3, [r3, #20]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d106      	bne.n	800d374 <tcp_abandon+0x20>
 800d366:	4b4d      	ldr	r3, [pc, #308]	; (800d49c <tcp_abandon+0x148>)
 800d368:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d36c:	494c      	ldr	r1, [pc, #304]	; (800d4a0 <tcp_abandon+0x14c>)
 800d36e:	484d      	ldr	r0, [pc, #308]	; (800d4a4 <tcp_abandon+0x150>)
 800d370:	f007 fc1a 	bl	8014ba8 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7d1b      	ldrb	r3, [r3, #20]
 800d378:	2b0a      	cmp	r3, #10
 800d37a:	d108      	bne.n	800d38e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d37c:	6879      	ldr	r1, [r7, #4]
 800d37e:	484a      	ldr	r0, [pc, #296]	; (800d4a8 <tcp_abandon+0x154>)
 800d380:	f000 fec6 	bl	800e110 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	2000      	movs	r0, #0
 800d388:	f7fe fe46 	bl	800c018 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800d38c:	e081      	b.n	800d492 <tcp_abandon+0x13e>
    int send_rst = 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d392:	2300      	movs	r3, #0
 800d394:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d39a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3a8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	7d1b      	ldrb	r3, [r3, #20]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d126      	bne.n	800d406 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8adb      	ldrh	r3, [r3, #22]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d02e      	beq.n	800d41e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d3c0:	4b3a      	ldr	r3, [pc, #232]	; (800d4ac <tcp_abandon+0x158>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d105      	bne.n	800d3d6 <tcp_abandon+0x82>
 800d3ca:	4b38      	ldr	r3, [pc, #224]	; (800d4ac <tcp_abandon+0x158>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	4a36      	ldr	r2, [pc, #216]	; (800d4ac <tcp_abandon+0x158>)
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	e013      	b.n	800d3fe <tcp_abandon+0xaa>
 800d3d6:	4b35      	ldr	r3, [pc, #212]	; (800d4ac <tcp_abandon+0x158>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	61fb      	str	r3, [r7, #28]
 800d3dc:	e00c      	b.n	800d3f8 <tcp_abandon+0xa4>
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d104      	bne.n	800d3f2 <tcp_abandon+0x9e>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	68da      	ldr	r2, [r3, #12]
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	60da      	str	r2, [r3, #12]
 800d3f0:	e005      	b.n	800d3fe <tcp_abandon+0xaa>
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	61fb      	str	r3, [r7, #28]
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1ef      	bne.n	800d3de <tcp_abandon+0x8a>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	60da      	str	r2, [r3, #12]
 800d404:	e00b      	b.n	800d41e <tcp_abandon+0xca>
      send_rst = reset;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	8adb      	ldrh	r3, [r3, #22]
 800d40e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	4827      	ldr	r0, [pc, #156]	; (800d4b0 <tcp_abandon+0x15c>)
 800d414:	f000 fe7c 	bl	800e110 <tcp_pcb_remove>
 800d418:	4b26      	ldr	r3, [pc, #152]	; (800d4b4 <tcp_abandon+0x160>)
 800d41a:	2201      	movs	r2, #1
 800d41c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d422:	2b00      	cmp	r3, #0
 800d424:	d004      	beq.n	800d430 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 fc85 	bl	800dd3a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d434:	2b00      	cmp	r3, #0
 800d436:	d004      	beq.n	800d442 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d43c:	4618      	mov	r0, r3
 800d43e:	f000 fc7c 	bl	800dd3a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d446:	2b00      	cmp	r3, #0
 800d448:	d004      	beq.n	800d454 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 fc73 	bl	800dd3a <tcp_segs_free>
    if (send_rst) {
 800d454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00c      	beq.n	800d474 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	1d19      	adds	r1, r3, #4
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	8b1b      	ldrh	r3, [r3, #24]
 800d464:	9301      	str	r3, [sp, #4]
 800d466:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	460b      	mov	r3, r1
 800d46c:	6979      	ldr	r1, [r7, #20]
 800d46e:	69b8      	ldr	r0, [r7, #24]
 800d470:	f003 fea6 	bl	80111c0 <tcp_rst>
    last_state = pcb->state;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	7d1b      	ldrb	r3, [r3, #20]
 800d478:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800d47a:	6879      	ldr	r1, [r7, #4]
 800d47c:	2000      	movs	r0, #0
 800d47e:	f7fe fdcb 	bl	800c018 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d004      	beq.n	800d492 <tcp_abandon+0x13e>
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f06f 010c 	mvn.w	r1, #12
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	4798      	blx	r3
}
 800d492:	bf00      	nop
 800d494:	3728      	adds	r7, #40	; 0x28
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	08016340 	.word	0x08016340
 800d4a0:	080163d8 	.word	0x080163d8
 800d4a4:	0801637c 	.word	0x0801637c
 800d4a8:	2000ab64 	.word	0x2000ab64
 800d4ac:	2000ab60 	.word	0x2000ab60
 800d4b0:	2000ab54 	.word	0x2000ab54
 800d4b4:	2000ab50 	.word	0x2000ab50

0800d4b8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff ff46 	bl	800d354 <tcp_abandon>
}
 800d4c8:	bf00      	nop
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d4e0:	4413      	add	r3, r2
 800d4e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d4ec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d4f0:	bf28      	it	cs
 800d4f2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d4f6:	b292      	uxth	r2, r2
 800d4f8:	4413      	add	r3, r2
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	db08      	blt.n	800d514 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	e020      	b.n	800d556 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	dd03      	ble.n	800d52a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d528:	e014      	b.n	800d554 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d53c:	d306      	bcc.n	800d54c <tcp_update_rcv_ann_wnd+0x7c>
 800d53e:	4b08      	ldr	r3, [pc, #32]	; (800d560 <tcp_update_rcv_ann_wnd+0x90>)
 800d540:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d544:	4907      	ldr	r1, [pc, #28]	; (800d564 <tcp_update_rcv_ann_wnd+0x94>)
 800d546:	4808      	ldr	r0, [pc, #32]	; (800d568 <tcp_update_rcv_ann_wnd+0x98>)
 800d548:	f007 fb2e 	bl	8014ba8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	b29a      	uxth	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d554:	2300      	movs	r3, #0
  }
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	08016340 	.word	0x08016340
 800d564:	08016458 	.word	0x08016458
 800d568:	0801637c 	.word	0x0801637c

0800d56c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	7d1b      	ldrb	r3, [r3, #20]
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d106      	bne.n	800d58e <tcp_recved+0x22>
 800d580:	4b23      	ldr	r3, [pc, #140]	; (800d610 <tcp_recved+0xa4>)
 800d582:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d586:	4923      	ldr	r1, [pc, #140]	; (800d614 <tcp_recved+0xa8>)
 800d588:	4823      	ldr	r0, [pc, #140]	; (800d618 <tcp_recved+0xac>)
 800d58a:	f007 fb0d 	bl	8014ba8 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d592:	887b      	ldrh	r3, [r7, #2]
 800d594:	4413      	add	r3, r2
 800d596:	b29a      	uxth	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d5a4:	d904      	bls.n	800d5b0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d5ac:	851a      	strh	r2, [r3, #40]	; 0x28
 800d5ae:	e017      	b.n	800d5e0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d113      	bne.n	800d5e0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7d1b      	ldrb	r3, [r3, #20]
 800d5bc:	2b07      	cmp	r3, #7
 800d5be:	d003      	beq.n	800d5c8 <tcp_recved+0x5c>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	7d1b      	ldrb	r3, [r3, #20]
 800d5c4:	2b09      	cmp	r3, #9
 800d5c6:	d104      	bne.n	800d5d2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d5ce:	851a      	strh	r2, [r3, #40]	; 0x28
 800d5d0:	e006      	b.n	800d5e0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800d5d2:	4b0f      	ldr	r3, [pc, #60]	; (800d610 <tcp_recved+0xa4>)
 800d5d4:	f240 322d 	movw	r2, #813	; 0x32d
 800d5d8:	4910      	ldr	r1, [pc, #64]	; (800d61c <tcp_recved+0xb0>)
 800d5da:	480f      	ldr	r0, [pc, #60]	; (800d618 <tcp_recved+0xac>)
 800d5dc:	f007 fae4 	bl	8014ba8 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff ff75 	bl	800d4d0 <tcp_update_rcv_ann_wnd>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d5f0:	db09      	blt.n	800d606 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	7e9b      	ldrb	r3, [r3, #26]
 800d5f6:	f043 0302 	orr.w	r3, r3, #2
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f003 fb53 	bl	8010cac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d606:	bf00      	nop
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	08016340 	.word	0x08016340
 800d614:	08016474 	.word	0x08016474
 800d618:	0801637c 	.word	0x0801637c
 800d61c:	0801649c 	.word	0x0801649c

0800d620 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d620:	b5b0      	push	{r4, r5, r7, lr}
 800d622:	b08c      	sub	sp, #48	; 0x30
 800d624:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d62a:	4b97      	ldr	r3, [pc, #604]	; (800d888 <tcp_slowtmr+0x268>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	3301      	adds	r3, #1
 800d630:	4a95      	ldr	r2, [pc, #596]	; (800d888 <tcp_slowtmr+0x268>)
 800d632:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d634:	4b95      	ldr	r3, [pc, #596]	; (800d88c <tcp_slowtmr+0x26c>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	3301      	adds	r3, #1
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	4b93      	ldr	r3, [pc, #588]	; (800d88c <tcp_slowtmr+0x26c>)
 800d63e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d640:	2300      	movs	r3, #0
 800d642:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d644:	4b92      	ldr	r3, [pc, #584]	; (800d890 <tcp_slowtmr+0x270>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d64a:	e227      	b.n	800da9c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	7d1b      	ldrb	r3, [r3, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <tcp_slowtmr+0x42>
 800d654:	4b8f      	ldr	r3, [pc, #572]	; (800d894 <tcp_slowtmr+0x274>)
 800d656:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d65a:	498f      	ldr	r1, [pc, #572]	; (800d898 <tcp_slowtmr+0x278>)
 800d65c:	488f      	ldr	r0, [pc, #572]	; (800d89c <tcp_slowtmr+0x27c>)
 800d65e:	f007 faa3 	bl	8014ba8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	7d1b      	ldrb	r3, [r3, #20]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d106      	bne.n	800d678 <tcp_slowtmr+0x58>
 800d66a:	4b8a      	ldr	r3, [pc, #552]	; (800d894 <tcp_slowtmr+0x274>)
 800d66c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d670:	498b      	ldr	r1, [pc, #556]	; (800d8a0 <tcp_slowtmr+0x280>)
 800d672:	488a      	ldr	r0, [pc, #552]	; (800d89c <tcp_slowtmr+0x27c>)
 800d674:	f007 fa98 	bl	8014ba8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67a:	7d1b      	ldrb	r3, [r3, #20]
 800d67c:	2b0a      	cmp	r3, #10
 800d67e:	d106      	bne.n	800d68e <tcp_slowtmr+0x6e>
 800d680:	4b84      	ldr	r3, [pc, #528]	; (800d894 <tcp_slowtmr+0x274>)
 800d682:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800d686:	4987      	ldr	r1, [pc, #540]	; (800d8a4 <tcp_slowtmr+0x284>)
 800d688:	4884      	ldr	r0, [pc, #528]	; (800d89c <tcp_slowtmr+0x27c>)
 800d68a:	f007 fa8d 	bl	8014ba8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d690:	7f5a      	ldrb	r2, [r3, #29]
 800d692:	4b7e      	ldr	r3, [pc, #504]	; (800d88c <tcp_slowtmr+0x26c>)
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	429a      	cmp	r2, r3
 800d698:	d103      	bne.n	800d6a2 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d6a0:	e1fc      	b.n	800da9c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d6a2:	4b7a      	ldr	r3, [pc, #488]	; (800d88c <tcp_slowtmr+0x26c>)
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a8:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	7d1b      	ldrb	r3, [r3, #20]
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d108      	bne.n	800d6cc <tcp_slowtmr+0xac>
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6c0:	2b05      	cmp	r3, #5
 800d6c2:	d903      	bls.n	800d6cc <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d6c4:	7ffb      	ldrb	r3, [r7, #31]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	77fb      	strb	r3, [r7, #31]
 800d6ca:	e0a2      	b.n	800d812 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6d2:	2b0b      	cmp	r3, #11
 800d6d4:	d903      	bls.n	800d6de <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d6d6:	7ffb      	ldrb	r3, [r7, #31]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	77fb      	strb	r3, [r7, #31]
 800d6dc:	e099      	b.n	800d812 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d032      	beq.n	800d74e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	4a6d      	ldr	r2, [pc, #436]	; (800d8a8 <tcp_slowtmr+0x288>)
 800d6f2:	5cd3      	ldrb	r3, [r2, r3]
 800d6f4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d6fc:	7cfa      	ldrb	r2, [r7, #19]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d907      	bls.n	800d712 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d708:	3301      	adds	r3, #1
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d718:	7cfa      	ldrb	r2, [r7, #19]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d879      	bhi.n	800d812 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d71e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d720:	f003 fede 	bl	80114e0 <tcp_zero_window_probe>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d173      	bne.n	800d812 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d734:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d738:	2b06      	cmp	r3, #6
 800d73a:	d86a      	bhi.n	800d812 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d742:	3301      	adds	r3, #1
 800d744:	b2da      	uxtb	r2, r3
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d74c:	e061      	b.n	800d812 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d754:	2b00      	cmp	r3, #0
 800d756:	db08      	blt.n	800d76a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d75e:	b29b      	uxth	r3, r3
 800d760:	3301      	adds	r3, #1
 800d762:	b29b      	uxth	r3, r3
 800d764:	b21a      	sxth	r2, r3
 800d766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d768:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d04f      	beq.n	800d812 <tcp_slowtmr+0x1f2>
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d77e:	429a      	cmp	r2, r3
 800d780:	db47      	blt.n	800d812 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	7d1b      	ldrb	r3, [r3, #20]
 800d786:	2b02      	cmp	r3, #2
 800d788:	d018      	beq.n	800d7bc <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d790:	2b0c      	cmp	r3, #12
 800d792:	bf28      	it	cs
 800d794:	230c      	movcs	r3, #12
 800d796:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d79e:	10db      	asrs	r3, r3, #3
 800d7a0:	b21b      	sxth	r3, r3
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d7aa:	4413      	add	r3, r2
 800d7ac:	7dfa      	ldrb	r2, [r7, #23]
 800d7ae:	493f      	ldr	r1, [pc, #252]	; (800d8ac <tcp_slowtmr+0x28c>)
 800d7b0:	5c8a      	ldrb	r2, [r1, r2]
 800d7b2:	4093      	lsls	r3, r2
 800d7b4:	b21a      	sxth	r2, r3
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	2200      	movs	r2, #0
 800d7c0:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	bf28      	it	cs
 800d7d2:	4613      	movcs	r3, r2
 800d7d4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800d7d6:	8abb      	ldrh	r3, [r7, #20]
 800d7d8:	085b      	lsrs	r3, r3, #1
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d206      	bcs.n	800d802 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7f8:	005b      	lsls	r3, r3, #1
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800d80c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d80e:	f003 fd4d 	bl	80112ac <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d814:	7d1b      	ldrb	r3, [r3, #20]
 800d816:	2b06      	cmp	r3, #6
 800d818:	d10f      	bne.n	800d83a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81c:	7e9b      	ldrb	r3, [r3, #26]
 800d81e:	f003 0310 	and.w	r3, r3, #16
 800d822:	2b00      	cmp	r3, #0
 800d824:	d009      	beq.n	800d83a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d826:	4b18      	ldr	r3, [pc, #96]	; (800d888 <tcp_slowtmr+0x268>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	2b28      	cmp	r3, #40	; 0x28
 800d832:	d902      	bls.n	800d83a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d834:	7ffb      	ldrb	r3, [r7, #31]
 800d836:	3301      	adds	r3, #1
 800d838:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	7a1b      	ldrb	r3, [r3, #8]
 800d83e:	f003 0308 	and.w	r3, r3, #8
 800d842:	2b00      	cmp	r3, #0
 800d844:	d05d      	beq.n	800d902 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d84a:	2b04      	cmp	r3, #4
 800d84c:	d003      	beq.n	800d856 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d850:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d852:	2b07      	cmp	r3, #7
 800d854:	d155      	bne.n	800d902 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d856:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <tcp_slowtmr+0x268>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	6a1b      	ldr	r3, [r3, #32]
 800d85e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d866:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d86a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d86e:	4910      	ldr	r1, [pc, #64]	; (800d8b0 <tcp_slowtmr+0x290>)
 800d870:	fba1 1303 	umull	r1, r3, r1, r3
 800d874:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d876:	429a      	cmp	r2, r3
 800d878:	d91c      	bls.n	800d8b4 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d87a:	7ffb      	ldrb	r3, [r7, #31]
 800d87c:	3301      	adds	r3, #1
 800d87e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d880:	7fbb      	ldrb	r3, [r7, #30]
 800d882:	3301      	adds	r3, #1
 800d884:	77bb      	strb	r3, [r7, #30]
 800d886:	e03c      	b.n	800d902 <tcp_slowtmr+0x2e2>
 800d888:	2000ab58 	.word	0x2000ab58
 800d88c:	200041fa 	.word	0x200041fa
 800d890:	2000ab54 	.word	0x2000ab54
 800d894:	08016340 	.word	0x08016340
 800d898:	080164f0 	.word	0x080164f0
 800d89c:	0801637c 	.word	0x0801637c
 800d8a0:	0801651c 	.word	0x0801651c
 800d8a4:	08016548 	.word	0x08016548
 800d8a8:	08017758 	.word	0x08017758
 800d8ac:	08017748 	.word	0x08017748
 800d8b0:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d8b4:	4b97      	ldr	r3, [pc, #604]	; (800db14 <tcp_slowtmr+0x4f4>)
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	6a1b      	ldr	r3, [r3, #32]
 800d8bc:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	4b92      	ldr	r3, [pc, #584]	; (800db18 <tcp_slowtmr+0x4f8>)
 800d8ce:	fb03 f300 	mul.w	r3, r3, r0
 800d8d2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800d8d4:	4991      	ldr	r1, [pc, #580]	; (800db1c <tcp_slowtmr+0x4fc>)
 800d8d6:	fba1 1303 	umull	r1, r3, r1, r3
 800d8da:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d910      	bls.n	800d902 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800d8e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8e2:	f003 fdc0 	bl	8011466 <tcp_keepalive>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800d8ea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d107      	bne.n	800d902 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d906:	2b00      	cmp	r3, #0
 800d908:	d016      	beq.n	800d938 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800d90a:	4b82      	ldr	r3, [pc, #520]	; (800db14 <tcp_slowtmr+0x4f4>)
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	6a1b      	ldr	r3, [r3, #32]
 800d912:	1ad2      	subs	r2, r2, r3
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d91a:	4619      	mov	r1, r3
 800d91c:	460b      	mov	r3, r1
 800d91e:	005b      	lsls	r3, r3, #1
 800d920:	440b      	add	r3, r1
 800d922:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d924:	429a      	cmp	r2, r3
 800d926:	d307      	bcc.n	800d938 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 fa04 	bl	800dd3a <tcp_segs_free>
      pcb->ooseq = NULL;
 800d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d934:	2200      	movs	r2, #0
 800d936:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	7d1b      	ldrb	r3, [r3, #20]
 800d93c:	2b03      	cmp	r3, #3
 800d93e:	d109      	bne.n	800d954 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d940:	4b74      	ldr	r3, [pc, #464]	; (800db14 <tcp_slowtmr+0x4f4>)
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	6a1b      	ldr	r3, [r3, #32]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	2b28      	cmp	r3, #40	; 0x28
 800d94c:	d902      	bls.n	800d954 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d94e:	7ffb      	ldrb	r3, [r7, #31]
 800d950:	3301      	adds	r3, #1
 800d952:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	7d1b      	ldrb	r3, [r3, #20]
 800d958:	2b09      	cmp	r3, #9
 800d95a:	d109      	bne.n	800d970 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d95c:	4b6d      	ldr	r3, [pc, #436]	; (800db14 <tcp_slowtmr+0x4f4>)
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d962:	6a1b      	ldr	r3, [r3, #32]
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	2bf0      	cmp	r3, #240	; 0xf0
 800d968:	d902      	bls.n	800d970 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800d96a:	7ffb      	ldrb	r3, [r7, #31]
 800d96c:	3301      	adds	r3, #1
 800d96e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d970:	7ffb      	ldrb	r3, [r7, #31]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d05d      	beq.n	800da32 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d97c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d97e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d980:	f000 fb84 	bl	800e08c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d010      	beq.n	800d9ac <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d98a:	4b65      	ldr	r3, [pc, #404]	; (800db20 <tcp_slowtmr+0x500>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d990:	429a      	cmp	r2, r3
 800d992:	d106      	bne.n	800d9a2 <tcp_slowtmr+0x382>
 800d994:	4b63      	ldr	r3, [pc, #396]	; (800db24 <tcp_slowtmr+0x504>)
 800d996:	f240 4289 	movw	r2, #1161	; 0x489
 800d99a:	4963      	ldr	r1, [pc, #396]	; (800db28 <tcp_slowtmr+0x508>)
 800d99c:	4863      	ldr	r0, [pc, #396]	; (800db2c <tcp_slowtmr+0x50c>)
 800d99e:	f007 f903 	bl	8014ba8 <iprintf>
        prev->next = pcb->next;
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	68da      	ldr	r2, [r3, #12]
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	60da      	str	r2, [r3, #12]
 800d9aa:	e00f      	b.n	800d9cc <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d9ac:	4b5c      	ldr	r3, [pc, #368]	; (800db20 <tcp_slowtmr+0x500>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d006      	beq.n	800d9c4 <tcp_slowtmr+0x3a4>
 800d9b6:	4b5b      	ldr	r3, [pc, #364]	; (800db24 <tcp_slowtmr+0x504>)
 800d9b8:	f240 428d 	movw	r2, #1165	; 0x48d
 800d9bc:	495c      	ldr	r1, [pc, #368]	; (800db30 <tcp_slowtmr+0x510>)
 800d9be:	485b      	ldr	r0, [pc, #364]	; (800db2c <tcp_slowtmr+0x50c>)
 800d9c0:	f007 f8f2 	bl	8014ba8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	4a55      	ldr	r2, [pc, #340]	; (800db20 <tcp_slowtmr+0x500>)
 800d9ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d9cc:	7fbb      	ldrb	r3, [r7, #30]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d010      	beq.n	800d9f4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d9da:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9de:	1d1d      	adds	r5, r3, #4
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	8adb      	ldrh	r3, [r3, #22]
 800d9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e6:	8b12      	ldrh	r2, [r2, #24]
 800d9e8:	9201      	str	r2, [sp, #4]
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	462b      	mov	r3, r5
 800d9ee:	4622      	mov	r2, r4
 800d9f0:	f003 fbe6 	bl	80111c0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fc:	7d1b      	ldrb	r3, [r3, #20]
 800d9fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800da0a:	6839      	ldr	r1, [r7, #0]
 800da0c:	2000      	movs	r0, #0
 800da0e:	f7fe fb03 	bl	800c018 <memp_free>

      tcp_active_pcbs_changed = 0;
 800da12:	4b48      	ldr	r3, [pc, #288]	; (800db34 <tcp_slowtmr+0x514>)
 800da14:	2200      	movs	r2, #0
 800da16:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d004      	beq.n	800da28 <tcp_slowtmr+0x408>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f06f 010c 	mvn.w	r1, #12
 800da24:	68b8      	ldr	r0, [r7, #8]
 800da26:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800da28:	4b42      	ldr	r3, [pc, #264]	; (800db34 <tcp_slowtmr+0x514>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d035      	beq.n	800da9c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800da30:	e606      	b.n	800d640 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	7edb      	ldrb	r3, [r3, #27]
 800da40:	3301      	adds	r3, #1
 800da42:	b2da      	uxtb	r2, r3
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800da48:	6a3b      	ldr	r3, [r7, #32]
 800da4a:	7eda      	ldrb	r2, [r3, #27]
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	7f1b      	ldrb	r3, [r3, #28]
 800da50:	429a      	cmp	r2, r3
 800da52:	d323      	bcc.n	800da9c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	2200      	movs	r2, #0
 800da58:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800da5a:	4b36      	ldr	r3, [pc, #216]	; (800db34 <tcp_slowtmr+0x514>)
 800da5c:	2200      	movs	r2, #0
 800da5e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800da60:	6a3b      	ldr	r3, [r7, #32]
 800da62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <tcp_slowtmr+0x460>
 800da6a:	6a3b      	ldr	r3, [r7, #32]
 800da6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da70:	6a3a      	ldr	r2, [r7, #32]
 800da72:	6912      	ldr	r2, [r2, #16]
 800da74:	6a39      	ldr	r1, [r7, #32]
 800da76:	4610      	mov	r0, r2
 800da78:	4798      	blx	r3
 800da7a:	4603      	mov	r3, r0
 800da7c:	777b      	strb	r3, [r7, #29]
 800da7e:	e001      	b.n	800da84 <tcp_slowtmr+0x464>
 800da80:	2300      	movs	r3, #0
 800da82:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800da84:	4b2b      	ldr	r3, [pc, #172]	; (800db34 <tcp_slowtmr+0x514>)
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d000      	beq.n	800da8e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800da8c:	e5d8      	b.n	800d640 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800da8e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d102      	bne.n	800da9c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800da96:	6a38      	ldr	r0, [r7, #32]
 800da98:	f003 f908 	bl	8010cac <tcp_output>
  while (pcb != NULL) {
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f47f add4 	bne.w	800d64c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800daa4:	2300      	movs	r3, #0
 800daa6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800daa8:	4b23      	ldr	r3, [pc, #140]	; (800db38 <tcp_slowtmr+0x518>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800daae:	e068      	b.n	800db82 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	7d1b      	ldrb	r3, [r3, #20]
 800dab4:	2b0a      	cmp	r3, #10
 800dab6:	d006      	beq.n	800dac6 <tcp_slowtmr+0x4a6>
 800dab8:	4b1a      	ldr	r3, [pc, #104]	; (800db24 <tcp_slowtmr+0x504>)
 800daba:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800dabe:	491f      	ldr	r1, [pc, #124]	; (800db3c <tcp_slowtmr+0x51c>)
 800dac0:	481a      	ldr	r0, [pc, #104]	; (800db2c <tcp_slowtmr+0x50c>)
 800dac2:	f007 f871 	bl	8014ba8 <iprintf>
    pcb_remove = 0;
 800dac6:	2300      	movs	r3, #0
 800dac8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800daca:	4b12      	ldr	r3, [pc, #72]	; (800db14 <tcp_slowtmr+0x4f4>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	2bf0      	cmp	r3, #240	; 0xf0
 800dad6:	d902      	bls.n	800dade <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800dad8:	7ffb      	ldrb	r3, [r7, #31]
 800dada:	3301      	adds	r3, #1
 800dadc:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dade:	7ffb      	ldrb	r3, [r7, #31]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d049      	beq.n	800db78 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dae6:	f000 fad1 	bl	800e08c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800daea:	6a3b      	ldr	r3, [r7, #32]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d029      	beq.n	800db44 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800daf0:	4b11      	ldr	r3, [pc, #68]	; (800db38 <tcp_slowtmr+0x518>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d106      	bne.n	800db08 <tcp_slowtmr+0x4e8>
 800dafa:	4b0a      	ldr	r3, [pc, #40]	; (800db24 <tcp_slowtmr+0x504>)
 800dafc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800db00:	490f      	ldr	r1, [pc, #60]	; (800db40 <tcp_slowtmr+0x520>)
 800db02:	480a      	ldr	r0, [pc, #40]	; (800db2c <tcp_slowtmr+0x50c>)
 800db04:	f007 f850 	bl	8014ba8 <iprintf>
        prev->next = pcb->next;
 800db08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0a:	68da      	ldr	r2, [r3, #12]
 800db0c:	6a3b      	ldr	r3, [r7, #32]
 800db0e:	60da      	str	r2, [r3, #12]
 800db10:	e028      	b.n	800db64 <tcp_slowtmr+0x544>
 800db12:	bf00      	nop
 800db14:	2000ab58 	.word	0x2000ab58
 800db18:	000124f8 	.word	0x000124f8
 800db1c:	10624dd3 	.word	0x10624dd3
 800db20:	2000ab54 	.word	0x2000ab54
 800db24:	08016340 	.word	0x08016340
 800db28:	08016578 	.word	0x08016578
 800db2c:	0801637c 	.word	0x0801637c
 800db30:	080165a4 	.word	0x080165a4
 800db34:	2000ab50 	.word	0x2000ab50
 800db38:	2000ab64 	.word	0x2000ab64
 800db3c:	080165d0 	.word	0x080165d0
 800db40:	08016600 	.word	0x08016600
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800db44:	4b12      	ldr	r3, [pc, #72]	; (800db90 <tcp_slowtmr+0x570>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d006      	beq.n	800db5c <tcp_slowtmr+0x53c>
 800db4e:	4b11      	ldr	r3, [pc, #68]	; (800db94 <tcp_slowtmr+0x574>)
 800db50:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800db54:	4910      	ldr	r1, [pc, #64]	; (800db98 <tcp_slowtmr+0x578>)
 800db56:	4811      	ldr	r0, [pc, #68]	; (800db9c <tcp_slowtmr+0x57c>)
 800db58:	f007 f826 	bl	8014ba8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	4a0b      	ldr	r2, [pc, #44]	; (800db90 <tcp_slowtmr+0x570>)
 800db62:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800db6e:	69b9      	ldr	r1, [r7, #24]
 800db70:	2000      	movs	r0, #0
 800db72:	f7fe fa51 	bl	800c018 <memp_free>
 800db76:	e004      	b.n	800db82 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800db7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	2b00      	cmp	r3, #0
 800db86:	d193      	bne.n	800dab0 <tcp_slowtmr+0x490>
    }
  }
}
 800db88:	bf00      	nop
 800db8a:	3728      	adds	r7, #40	; 0x28
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bdb0      	pop	{r4, r5, r7, pc}
 800db90:	2000ab64 	.word	0x2000ab64
 800db94:	08016340 	.word	0x08016340
 800db98:	08016628 	.word	0x08016628
 800db9c:	0801637c 	.word	0x0801637c

0800dba0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dba6:	4b2d      	ldr	r3, [pc, #180]	; (800dc5c <tcp_fasttmr+0xbc>)
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	4b2b      	ldr	r3, [pc, #172]	; (800dc5c <tcp_fasttmr+0xbc>)
 800dbb0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dbb2:	4b2b      	ldr	r3, [pc, #172]	; (800dc60 <tcp_fasttmr+0xc0>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dbb8:	e048      	b.n	800dc4c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	7f5a      	ldrb	r2, [r3, #29]
 800dbbe:	4b27      	ldr	r3, [pc, #156]	; (800dc5c <tcp_fasttmr+0xbc>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d03f      	beq.n	800dc46 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dbc6:	4b25      	ldr	r3, [pc, #148]	; (800dc5c <tcp_fasttmr+0xbc>)
 800dbc8:	781a      	ldrb	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	7e9b      	ldrb	r3, [r3, #26]
 800dbd2:	f003 0301 	and.w	r3, r3, #1
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d010      	beq.n	800dbfc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	7e9b      	ldrb	r3, [r3, #26]
 800dbde:	f043 0302 	orr.w	r3, r3, #2
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f003 f85f 	bl	8010cac <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	7e9b      	ldrb	r3, [r3, #26]
 800dbf2:	f023 0303 	bic.w	r3, r3, #3
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	7e9b      	ldrb	r3, [r3, #26]
 800dc00:	f003 0308 	and.w	r3, r3, #8
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d009      	beq.n	800dc1c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	7e9b      	ldrb	r3, [r3, #26]
 800dc0c:	f023 0308 	bic.w	r3, r3, #8
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff fb1e 	bl	800d258 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00a      	beq.n	800dc40 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dc2a:	4b0e      	ldr	r3, [pc, #56]	; (800dc64 <tcp_fasttmr+0xc4>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f819 	bl	800dc68 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dc36:	4b0b      	ldr	r3, [pc, #44]	; (800dc64 <tcp_fasttmr+0xc4>)
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d000      	beq.n	800dc40 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dc3e:	e7b8      	b.n	800dbb2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	607b      	str	r3, [r7, #4]
 800dc44:	e002      	b.n	800dc4c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1b3      	bne.n	800dbba <tcp_fasttmr+0x1a>
    }
  }
}
 800dc52:	bf00      	nop
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	200041fa 	.word	0x200041fa
 800dc60:	2000ab54 	.word	0x2000ab54
 800dc64:	2000ab50 	.word	0x2000ab50

0800dc68 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dc68:	b590      	push	{r4, r7, lr}
 800dc6a:	b085      	sub	sp, #20
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc74:	7b5b      	ldrb	r3, [r3, #13]
 800dc76:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc7c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00b      	beq.n	800dca6 <tcp_process_refused_data+0x3e>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6918      	ldr	r0, [r3, #16]
 800dc98:	2300      	movs	r3, #0
 800dc9a:	68ba      	ldr	r2, [r7, #8]
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	47a0      	blx	r4
 800dca0:	4603      	mov	r3, r0
 800dca2:	73fb      	strb	r3, [r7, #15]
 800dca4:	e007      	b.n	800dcb6 <tcp_process_refused_data+0x4e>
 800dca6:	2300      	movs	r3, #0
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	6879      	ldr	r1, [r7, #4]
 800dcac:	2000      	movs	r0, #0
 800dcae:	f000 f88c 	bl	800ddca <tcp_recv_null>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d12a      	bne.n	800dd14 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800dcbe:	7bbb      	ldrb	r3, [r7, #14]
 800dcc0:	f003 0320 	and.w	r3, r3, #32
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d033      	beq.n	800dd30 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dccc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dcd0:	d005      	beq.n	800dcde <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00b      	beq.n	800dd00 <tcp_process_refused_data+0x98>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6918      	ldr	r0, [r3, #16]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	47a0      	blx	r4
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73fb      	strb	r3, [r7, #15]
 800dcfe:	e001      	b.n	800dd04 <tcp_process_refused_data+0x9c>
 800dd00:	2300      	movs	r3, #0
 800dd02:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dd04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd08:	f113 0f0d 	cmn.w	r3, #13
 800dd0c:	d110      	bne.n	800dd30 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800dd0e:	f06f 030c 	mvn.w	r3, #12
 800dd12:	e00e      	b.n	800dd32 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800dd14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd18:	f113 0f0d 	cmn.w	r3, #13
 800dd1c:	d102      	bne.n	800dd24 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dd1e:	f06f 030c 	mvn.w	r3, #12
 800dd22:	e006      	b.n	800dd32 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800dd2a:	f06f 0304 	mvn.w	r3, #4
 800dd2e:	e000      	b.n	800dd32 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd90      	pop	{r4, r7, pc}

0800dd3a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b084      	sub	sp, #16
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dd42:	e007      	b.n	800dd54 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f809 	bl	800dd62 <tcp_seg_free>
    seg = next;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1f4      	bne.n	800dd44 <tcp_segs_free+0xa>
  }
}
 800dd5a:	bf00      	nop
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b082      	sub	sp, #8
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00c      	beq.n	800dd8a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d004      	beq.n	800dd82 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7fe fe9d 	bl	800cabc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dd82:	6879      	ldr	r1, [r7, #4]
 800dd84:	2002      	movs	r0, #2
 800dd86:	f7fe f947 	bl	800c018 <memp_free>
  }
}
 800dd8a:	bf00      	nop
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b084      	sub	sp, #16
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dd9a:	2002      	movs	r0, #2
 800dd9c:	f7fe f8ea 	bl	800bf74 <memp_malloc>
 800dda0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <tcp_seg_copy+0x1a>
    return NULL;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	e00a      	b.n	800ddc2 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ddac:	2210      	movs	r2, #16
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f006 fe3e 	bl	8014a32 <memcpy>
  pbuf_ref(cseg->p);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fe ff30 	bl	800cc20 <pbuf_ref>
  return cseg;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b084      	sub	sp, #16
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	60f8      	str	r0, [r7, #12]
 800ddd2:	60b9      	str	r1, [r7, #8]
 800ddd4:	607a      	str	r2, [r7, #4]
 800ddd6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d009      	beq.n	800ddf2 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	891b      	ldrh	r3, [r3, #8]
 800dde2:	4619      	mov	r1, r3
 800dde4:	68b8      	ldr	r0, [r7, #8]
 800dde6:	f7ff fbc1 	bl	800d56c <tcp_recved>
    pbuf_free(p);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7fe fe66 	bl	800cabc <pbuf_free>
 800ddf0:	e008      	b.n	800de04 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800ddf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d104      	bne.n	800de04 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800ddfa:	68b8      	ldr	r0, [r7, #8]
 800ddfc:	f7ff fa92 	bl	800d324 <tcp_close>
 800de00:	4603      	mov	r3, r0
 800de02:	e000      	b.n	800de06 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
	...

0800de10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	4603      	mov	r3, r0
 800de18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800de1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	db01      	blt.n	800de26 <tcp_kill_prio+0x16>
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	e000      	b.n	800de28 <tcp_kill_prio+0x18>
 800de26:	237f      	movs	r3, #127	; 0x7f
 800de28:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800de2e:	2300      	movs	r3, #0
 800de30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de32:	4b16      	ldr	r3, [pc, #88]	; (800de8c <tcp_kill_prio+0x7c>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	617b      	str	r3, [r7, #20]
 800de38:	e01a      	b.n	800de70 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	7d5b      	ldrb	r3, [r3, #21]
 800de3e:	7afa      	ldrb	r2, [r7, #11]
 800de40:	429a      	cmp	r2, r3
 800de42:	d312      	bcc.n	800de6a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de44:	4b12      	ldr	r3, [pc, #72]	; (800de90 <tcp_kill_prio+0x80>)
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	429a      	cmp	r2, r3
 800de52:	d80a      	bhi.n	800de6a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800de54:	4b0e      	ldr	r3, [pc, #56]	; (800de90 <tcp_kill_prio+0x80>)
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	6a1b      	ldr	r3, [r3, #32]
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	7d5b      	ldrb	r3, [r3, #21]
 800de68:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	68db      	ldr	r3, [r3, #12]
 800de6e:	617b      	str	r3, [r7, #20]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1e1      	bne.n	800de3a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d002      	beq.n	800de82 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800de7c:	6938      	ldr	r0, [r7, #16]
 800de7e:	f7ff fb1b 	bl	800d4b8 <tcp_abort>
  }
}
 800de82:	bf00      	nop
 800de84:	3718      	adds	r7, #24
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	2000ab54 	.word	0x2000ab54
 800de90:	2000ab58 	.word	0x2000ab58

0800de94 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	4603      	mov	r3, r0
 800de9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800de9e:	79fb      	ldrb	r3, [r7, #7]
 800dea0:	2b08      	cmp	r3, #8
 800dea2:	d009      	beq.n	800deb8 <tcp_kill_state+0x24>
 800dea4:	79fb      	ldrb	r3, [r7, #7]
 800dea6:	2b09      	cmp	r3, #9
 800dea8:	d006      	beq.n	800deb8 <tcp_kill_state+0x24>
 800deaa:	4b1a      	ldr	r3, [pc, #104]	; (800df14 <tcp_kill_state+0x80>)
 800deac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800deb0:	4919      	ldr	r1, [pc, #100]	; (800df18 <tcp_kill_state+0x84>)
 800deb2:	481a      	ldr	r0, [pc, #104]	; (800df1c <tcp_kill_state+0x88>)
 800deb4:	f006 fe78 	bl	8014ba8 <iprintf>

  inactivity = 0;
 800deb8:	2300      	movs	r3, #0
 800deba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800debc:	2300      	movs	r3, #0
 800debe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dec0:	4b17      	ldr	r3, [pc, #92]	; (800df20 <tcp_kill_state+0x8c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	617b      	str	r3, [r7, #20]
 800dec6:	e017      	b.n	800def8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	7d1b      	ldrb	r3, [r3, #20]
 800decc:	79fa      	ldrb	r2, [r7, #7]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d10f      	bne.n	800def2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ded2:	4b14      	ldr	r3, [pc, #80]	; (800df24 <tcp_kill_state+0x90>)
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	6a1b      	ldr	r3, [r3, #32]
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d807      	bhi.n	800def2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dee2:	4b10      	ldr	r3, [pc, #64]	; (800df24 <tcp_kill_state+0x90>)
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	6a1b      	ldr	r3, [r3, #32]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1e4      	bne.n	800dec8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d003      	beq.n	800df0c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800df04:	2100      	movs	r1, #0
 800df06:	6938      	ldr	r0, [r7, #16]
 800df08:	f7ff fa24 	bl	800d354 <tcp_abandon>
  }
}
 800df0c:	bf00      	nop
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	08016340 	.word	0x08016340
 800df18:	08016650 	.word	0x08016650
 800df1c:	0801637c 	.word	0x0801637c
 800df20:	2000ab54 	.word	0x2000ab54
 800df24:	2000ab58 	.word	0x2000ab58

0800df28 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800df2e:	2300      	movs	r3, #0
 800df30:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800df36:	4b12      	ldr	r3, [pc, #72]	; (800df80 <tcp_kill_timewait+0x58>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	60fb      	str	r3, [r7, #12]
 800df3c:	e012      	b.n	800df64 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800df3e:	4b11      	ldr	r3, [pc, #68]	; (800df84 <tcp_kill_timewait+0x5c>)
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6a1b      	ldr	r3, [r3, #32]
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d807      	bhi.n	800df5e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800df4e:	4b0d      	ldr	r3, [pc, #52]	; (800df84 <tcp_kill_timewait+0x5c>)
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1e9      	bne.n	800df3e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800df70:	68b8      	ldr	r0, [r7, #8]
 800df72:	f7ff faa1 	bl	800d4b8 <tcp_abort>
  }
}
 800df76:	bf00      	nop
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	2000ab64 	.word	0x2000ab64
 800df84:	2000ab58 	.word	0x2000ab58

0800df88 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	4603      	mov	r3, r0
 800df90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df92:	2000      	movs	r0, #0
 800df94:	f7fd ffee 	bl	800bf74 <memp_malloc>
 800df98:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d124      	bne.n	800dfea <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dfa0:	f7ff ffc2 	bl	800df28 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	f7fd ffe5 	bl	800bf74 <memp_malloc>
 800dfaa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d11b      	bne.n	800dfea <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dfb2:	2009      	movs	r0, #9
 800dfb4:	f7ff ff6e 	bl	800de94 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dfb8:	2000      	movs	r0, #0
 800dfba:	f7fd ffdb 	bl	800bf74 <memp_malloc>
 800dfbe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d111      	bne.n	800dfea <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dfc6:	2008      	movs	r0, #8
 800dfc8:	f7ff ff64 	bl	800de94 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dfcc:	2000      	movs	r0, #0
 800dfce:	f7fd ffd1 	bl	800bf74 <memp_malloc>
 800dfd2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d107      	bne.n	800dfea <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7ff ff17 	bl	800de10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	f7fd ffc6 	bl	800bf74 <memp_malloc>
 800dfe8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d03f      	beq.n	800e070 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dff0:	2298      	movs	r2, #152	; 0x98
 800dff2:	2100      	movs	r1, #0
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f006 fd27 	bl	8014a48 <memset>
    pcb->prio = prio;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	79fa      	ldrb	r2, [r7, #7]
 800dffe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e006:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e010:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	22ff      	movs	r2, #255	; 0xff
 800e01e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e026:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2206      	movs	r2, #6
 800e02c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2206      	movs	r2, #6
 800e034:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e03c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2201      	movs	r2, #1
 800e042:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e046:	4b0d      	ldr	r3, [pc, #52]	; (800e07c <tcp_alloc+0xf4>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e04e:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <tcp_alloc+0xf8>)
 800e050:	781a      	ldrb	r2, [r3, #0]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e05c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	4a08      	ldr	r2, [pc, #32]	; (800e084 <tcp_alloc+0xfc>)
 800e064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	4a07      	ldr	r2, [pc, #28]	; (800e088 <tcp_alloc+0x100>)
 800e06c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e070:	68fb      	ldr	r3, [r7, #12]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	2000ab58 	.word	0x2000ab58
 800e080:	200041fa 	.word	0x200041fa
 800e084:	0800ddcb 	.word	0x0800ddcb
 800e088:	006ddd00 	.word	0x006ddd00

0800e08c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	7d1b      	ldrb	r3, [r3, #20]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d034      	beq.n	800e106 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e0a0:	2b0a      	cmp	r3, #10
 800e0a2:	d030      	beq.n	800e106 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d02c      	beq.n	800e106 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d007      	beq.n	800e0c4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fe fcff 	bl	800cabc <pbuf_free>
      pcb->refused_data = NULL;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7ff fe36 	bl	800dd3a <tcp_segs_free>
    pcb->ooseq = NULL;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff fe2a 	bl	800dd3a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7ff fe25 	bl	800dd3a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	669a      	str	r2, [r3, #104]	; 0x68
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800e106:	bf00      	nop
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
	...

0800e110 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	429a      	cmp	r2, r3
 800e122:	d105      	bne.n	800e130 <tcp_pcb_remove+0x20>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	68da      	ldr	r2, [r3, #12]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	e013      	b.n	800e158 <tcp_pcb_remove+0x48>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	60fb      	str	r3, [r7, #12]
 800e136:	e00c      	b.n	800e152 <tcp_pcb_remove+0x42>
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	683a      	ldr	r2, [r7, #0]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d104      	bne.n	800e14c <tcp_pcb_remove+0x3c>
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	68da      	ldr	r2, [r3, #12]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	60da      	str	r2, [r3, #12]
 800e14a:	e005      	b.n	800e158 <tcp_pcb_remove+0x48>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	60fb      	str	r3, [r7, #12]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1ef      	bne.n	800e138 <tcp_pcb_remove+0x28>
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	2200      	movs	r2, #0
 800e15c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e15e:	6838      	ldr	r0, [r7, #0]
 800e160:	f7ff ff94 	bl	800e08c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	7d1b      	ldrb	r3, [r3, #20]
 800e168:	2b0a      	cmp	r3, #10
 800e16a:	d013      	beq.n	800e194 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800e170:	2b01      	cmp	r3, #1
 800e172:	d00f      	beq.n	800e194 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	7e9b      	ldrb	r3, [r3, #26]
 800e178:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d009      	beq.n	800e194 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	7e9b      	ldrb	r3, [r3, #26]
 800e184:	f043 0302 	orr.w	r3, r3, #2
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e18e:	6838      	ldr	r0, [r7, #0]
 800e190:	f002 fd8c 	bl	8010cac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	7d1b      	ldrb	r3, [r3, #20]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d020      	beq.n	800e1de <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d006      	beq.n	800e1b2 <tcp_pcb_remove+0xa2>
 800e1a4:	4b13      	ldr	r3, [pc, #76]	; (800e1f4 <tcp_pcb_remove+0xe4>)
 800e1a6:	f240 7253 	movw	r2, #1875	; 0x753
 800e1aa:	4913      	ldr	r1, [pc, #76]	; (800e1f8 <tcp_pcb_remove+0xe8>)
 800e1ac:	4813      	ldr	r0, [pc, #76]	; (800e1fc <tcp_pcb_remove+0xec>)
 800e1ae:	f006 fcfb 	bl	8014ba8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d006      	beq.n	800e1c8 <tcp_pcb_remove+0xb8>
 800e1ba:	4b0e      	ldr	r3, [pc, #56]	; (800e1f4 <tcp_pcb_remove+0xe4>)
 800e1bc:	f240 7254 	movw	r2, #1876	; 0x754
 800e1c0:	490f      	ldr	r1, [pc, #60]	; (800e200 <tcp_pcb_remove+0xf0>)
 800e1c2:	480e      	ldr	r0, [pc, #56]	; (800e1fc <tcp_pcb_remove+0xec>)
 800e1c4:	f006 fcf0 	bl	8014ba8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d006      	beq.n	800e1de <tcp_pcb_remove+0xce>
 800e1d0:	4b08      	ldr	r3, [pc, #32]	; (800e1f4 <tcp_pcb_remove+0xe4>)
 800e1d2:	f240 7256 	movw	r2, #1878	; 0x756
 800e1d6:	490b      	ldr	r1, [pc, #44]	; (800e204 <tcp_pcb_remove+0xf4>)
 800e1d8:	4808      	ldr	r0, [pc, #32]	; (800e1fc <tcp_pcb_remove+0xec>)
 800e1da:	f006 fce5 	bl	8014ba8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e1ea:	bf00      	nop
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	08016340 	.word	0x08016340
 800e1f8:	080166f8 	.word	0x080166f8
 800e1fc:	0801637c 	.word	0x0801637c
 800e200:	08016710 	.word	0x08016710
 800e204:	0801672c 	.word	0x0801672c

0800e208 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e210:	4b07      	ldr	r3, [pc, #28]	; (800e230 <tcp_next_iss+0x28>)
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	4b07      	ldr	r3, [pc, #28]	; (800e234 <tcp_next_iss+0x2c>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4413      	add	r3, r2
 800e21a:	4a05      	ldr	r2, [pc, #20]	; (800e230 <tcp_next_iss+0x28>)
 800e21c:	6013      	str	r3, [r2, #0]
  return iss;
 800e21e:	4b04      	ldr	r3, [pc, #16]	; (800e230 <tcp_next_iss+0x28>)
 800e220:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e222:	4618      	mov	r0, r3
 800e224:	370c      	adds	r7, #12
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	2000011c 	.word	0x2000011c
 800e234:	2000ab58 	.word	0x2000ab58

0800e238 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	4603      	mov	r3, r0
 800e240:	6039      	str	r1, [r7, #0]
 800e242:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800e244:	6838      	ldr	r0, [r7, #0]
 800e246:	f004 fc4f 	bl	8012ae8 <ip4_route>
 800e24a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d101      	bne.n	800e256 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800e252:	88fb      	ldrh	r3, [r7, #6]
 800e254:	e010      	b.n	800e278 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e25a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e25c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d008      	beq.n	800e276 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e264:	897b      	ldrh	r3, [r7, #10]
 800e266:	3b28      	subs	r3, #40	; 0x28
 800e268:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e26a:	893a      	ldrh	r2, [r7, #8]
 800e26c:	88fb      	ldrh	r3, [r7, #6]
 800e26e:	4293      	cmp	r3, r2
 800e270:	bf28      	it	cs
 800e272:	4613      	movcs	r3, r2
 800e274:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e276:	88fb      	ldrh	r3, [r7, #6]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e28e:	e011      	b.n	800e2b4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d108      	bne.n	800e2ae <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff f908 	bl	800d4b8 <tcp_abort>
      pcb = next;
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	60fb      	str	r3, [r7, #12]
 800e2ac:	e002      	b.n	800e2b4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1ea      	bne.n	800e290 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e2ba:	bf00      	nop
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
	...

0800e2c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d02c      	beq.n	800e32e <tcp_netif_ip_addr_changed+0x6a>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d028      	beq.n	800e32e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e2dc:	4b16      	ldr	r3, [pc, #88]	; (800e338 <tcp_netif_ip_addr_changed+0x74>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff ffcc 	bl	800e280 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e2e8:	4b14      	ldr	r3, [pc, #80]	; (800e33c <tcp_netif_ip_addr_changed+0x78>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7ff ffc6 	bl	800e280 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d019      	beq.n	800e32e <tcp_netif_ip_addr_changed+0x6a>
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d015      	beq.n	800e32e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e302:	4b0f      	ldr	r3, [pc, #60]	; (800e340 <tcp_netif_ip_addr_changed+0x7c>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	60fb      	str	r3, [r7, #12]
 800e308:	e00e      	b.n	800e328 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d103      	bne.n	800e324 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	60fb      	str	r3, [r7, #12]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1ed      	bne.n	800e30a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e32e:	bf00      	nop
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	2000ab54 	.word	0x2000ab54
 800e33c:	2000ab60 	.word	0x2000ab60
 800e340:	2000ab5c 	.word	0x2000ab5c

0800e344 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e344:	b590      	push	{r4, r7, lr}
 800e346:	b08b      	sub	sp, #44	; 0x2c
 800e348:	af02      	add	r7, sp, #8
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	4a82      	ldr	r2, [pc, #520]	; (800e55c <tcp_input+0x218>)
 800e354:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	895b      	ldrh	r3, [r3, #10]
 800e35a:	2b13      	cmp	r3, #19
 800e35c:	f240 838a 	bls.w	800ea74 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e360:	4b7f      	ldr	r3, [pc, #508]	; (800e560 <tcp_input+0x21c>)
 800e362:	695a      	ldr	r2, [r3, #20]
 800e364:	4b7e      	ldr	r3, [pc, #504]	; (800e560 <tcp_input+0x21c>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4619      	mov	r1, r3
 800e36a:	4610      	mov	r0, r2
 800e36c:	f004 fe2e 	bl	8012fcc <ip4_addr_isbroadcast_u32>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	f040 8380 	bne.w	800ea78 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e378:	4b79      	ldr	r3, [pc, #484]	; (800e560 <tcp_input+0x21c>)
 800e37a:	695b      	ldr	r3, [r3, #20]
 800e37c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e380:	2be0      	cmp	r3, #224	; 0xe0
 800e382:	f000 8379 	beq.w	800ea78 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e386:	4b75      	ldr	r3, [pc, #468]	; (800e55c <tcp_input+0x218>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	899b      	ldrh	r3, [r3, #12]
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fd fa04 	bl	800b79c <lwip_htons>
 800e394:	4603      	mov	r3, r0
 800e396:	0b1b      	lsrs	r3, r3, #12
 800e398:	b29b      	uxth	r3, r3
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e3a0:	7cbb      	ldrb	r3, [r7, #18]
 800e3a2:	2b13      	cmp	r3, #19
 800e3a4:	f240 8368 	bls.w	800ea78 <tcp_input+0x734>
 800e3a8:	7cbb      	ldrb	r3, [r7, #18]
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	891b      	ldrh	r3, [r3, #8]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	f200 8361 	bhi.w	800ea78 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e3b6:	7cbb      	ldrb	r3, [r7, #18]
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	3b14      	subs	r3, #20
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	4b69      	ldr	r3, [pc, #420]	; (800e564 <tcp_input+0x220>)
 800e3c0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e3c2:	4b69      	ldr	r3, [pc, #420]	; (800e568 <tcp_input+0x224>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	895a      	ldrh	r2, [r3, #10]
 800e3cc:	7cbb      	ldrb	r3, [r7, #18]
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d30d      	bcc.n	800e3f0 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e3d4:	4b63      	ldr	r3, [pc, #396]	; (800e564 <tcp_input+0x220>)
 800e3d6:	881a      	ldrh	r2, [r3, #0]
 800e3d8:	4b64      	ldr	r3, [pc, #400]	; (800e56c <tcp_input+0x228>)
 800e3da:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800e3dc:	7cbb      	ldrb	r3, [r7, #18]
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	425b      	negs	r3, r3
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	b21b      	sxth	r3, r3
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7fe fb43 	bl	800ca74 <pbuf_header>
 800e3ee:	e055      	b.n	800e49c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d105      	bne.n	800e404 <tcp_input+0xc0>
 800e3f8:	4b5d      	ldr	r3, [pc, #372]	; (800e570 <tcp_input+0x22c>)
 800e3fa:	22b2      	movs	r2, #178	; 0xb2
 800e3fc:	495d      	ldr	r1, [pc, #372]	; (800e574 <tcp_input+0x230>)
 800e3fe:	485e      	ldr	r0, [pc, #376]	; (800e578 <tcp_input+0x234>)
 800e400:	f006 fbd2 	bl	8014ba8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e404:	f06f 0113 	mvn.w	r1, #19
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7fe fb33 	bl	800ca74 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	895a      	ldrh	r2, [r3, #10]
 800e412:	4b56      	ldr	r3, [pc, #344]	; (800e56c <tcp_input+0x228>)
 800e414:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e416:	4b53      	ldr	r3, [pc, #332]	; (800e564 <tcp_input+0x220>)
 800e418:	881a      	ldrh	r2, [r3, #0]
 800e41a:	4b54      	ldr	r3, [pc, #336]	; (800e56c <tcp_input+0x228>)
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e422:	4b52      	ldr	r3, [pc, #328]	; (800e56c <tcp_input+0x228>)
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	425b      	negs	r3, r3
 800e428:	b29b      	uxth	r3, r3
 800e42a:	b21b      	sxth	r3, r3
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7fe fb20 	bl	800ca74 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	895b      	ldrh	r3, [r3, #10]
 800e43a:	8a3a      	ldrh	r2, [r7, #16]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	f200 831d 	bhi.w	800ea7c <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	4a47      	ldr	r2, [pc, #284]	; (800e568 <tcp_input+0x224>)
 800e44a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	8a3b      	ldrh	r3, [r7, #16]
 800e452:	425b      	negs	r3, r3
 800e454:	b29b      	uxth	r3, r3
 800e456:	b21b      	sxth	r3, r3
 800e458:	4619      	mov	r1, r3
 800e45a:	4610      	mov	r0, r2
 800e45c:	f7fe fb0a 	bl	800ca74 <pbuf_header>
    p->tot_len -= opt2len;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	891a      	ldrh	r2, [r3, #8]
 800e464:	8a3b      	ldrh	r3, [r7, #16]
 800e466:	1ad3      	subs	r3, r2, r3
 800e468:	b29a      	uxth	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	895b      	ldrh	r3, [r3, #10]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d005      	beq.n	800e482 <tcp_input+0x13e>
 800e476:	4b3e      	ldr	r3, [pc, #248]	; (800e570 <tcp_input+0x22c>)
 800e478:	22cf      	movs	r2, #207	; 0xcf
 800e47a:	4940      	ldr	r1, [pc, #256]	; (800e57c <tcp_input+0x238>)
 800e47c:	483e      	ldr	r0, [pc, #248]	; (800e578 <tcp_input+0x234>)
 800e47e:	f006 fb93 	bl	8014ba8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	891a      	ldrh	r2, [r3, #8]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	891b      	ldrh	r3, [r3, #8]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d005      	beq.n	800e49c <tcp_input+0x158>
 800e490:	4b37      	ldr	r3, [pc, #220]	; (800e570 <tcp_input+0x22c>)
 800e492:	22d0      	movs	r2, #208	; 0xd0
 800e494:	493a      	ldr	r1, [pc, #232]	; (800e580 <tcp_input+0x23c>)
 800e496:	4838      	ldr	r0, [pc, #224]	; (800e578 <tcp_input+0x234>)
 800e498:	f006 fb86 	bl	8014ba8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e49c:	4b2f      	ldr	r3, [pc, #188]	; (800e55c <tcp_input+0x218>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	881b      	ldrh	r3, [r3, #0]
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	4b2d      	ldr	r3, [pc, #180]	; (800e55c <tcp_input+0x218>)
 800e4a6:	681c      	ldr	r4, [r3, #0]
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	f7fd f977 	bl	800b79c <lwip_htons>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e4b2:	4b2a      	ldr	r3, [pc, #168]	; (800e55c <tcp_input+0x218>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	885b      	ldrh	r3, [r3, #2]
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	4b28      	ldr	r3, [pc, #160]	; (800e55c <tcp_input+0x218>)
 800e4bc:	681c      	ldr	r4, [r3, #0]
 800e4be:	4610      	mov	r0, r2
 800e4c0:	f7fd f96c 	bl	800b79c <lwip_htons>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e4c8:	4b24      	ldr	r3, [pc, #144]	; (800e55c <tcp_input+0x218>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	685a      	ldr	r2, [r3, #4]
 800e4ce:	4b23      	ldr	r3, [pc, #140]	; (800e55c <tcp_input+0x218>)
 800e4d0:	681c      	ldr	r4, [r3, #0]
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	f7fd f970 	bl	800b7b8 <lwip_htonl>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	6063      	str	r3, [r4, #4]
 800e4dc:	6863      	ldr	r3, [r4, #4]
 800e4de:	4a29      	ldr	r2, [pc, #164]	; (800e584 <tcp_input+0x240>)
 800e4e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e4e2:	4b1e      	ldr	r3, [pc, #120]	; (800e55c <tcp_input+0x218>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	689a      	ldr	r2, [r3, #8]
 800e4e8:	4b1c      	ldr	r3, [pc, #112]	; (800e55c <tcp_input+0x218>)
 800e4ea:	681c      	ldr	r4, [r3, #0]
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f7fd f963 	bl	800b7b8 <lwip_htonl>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	60a3      	str	r3, [r4, #8]
 800e4f6:	68a3      	ldr	r3, [r4, #8]
 800e4f8:	4a23      	ldr	r2, [pc, #140]	; (800e588 <tcp_input+0x244>)
 800e4fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e4fc:	4b17      	ldr	r3, [pc, #92]	; (800e55c <tcp_input+0x218>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	89db      	ldrh	r3, [r3, #14]
 800e502:	b29a      	uxth	r2, r3
 800e504:	4b15      	ldr	r3, [pc, #84]	; (800e55c <tcp_input+0x218>)
 800e506:	681c      	ldr	r4, [r3, #0]
 800e508:	4610      	mov	r0, r2
 800e50a:	f7fd f947 	bl	800b79c <lwip_htons>
 800e50e:	4603      	mov	r3, r0
 800e510:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e512:	4b12      	ldr	r3, [pc, #72]	; (800e55c <tcp_input+0x218>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	899b      	ldrh	r3, [r3, #12]
 800e518:	b29b      	uxth	r3, r3
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fd f93e 	bl	800b79c <lwip_htons>
 800e520:	4603      	mov	r3, r0
 800e522:	b2db      	uxtb	r3, r3
 800e524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e528:	b2da      	uxtb	r2, r3
 800e52a:	4b18      	ldr	r3, [pc, #96]	; (800e58c <tcp_input+0x248>)
 800e52c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	891a      	ldrh	r2, [r3, #8]
 800e532:	4b16      	ldr	r3, [pc, #88]	; (800e58c <tcp_input+0x248>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	f003 0303 	and.w	r3, r3, #3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	bf14      	ite	ne
 800e53e:	2301      	movne	r3, #1
 800e540:	2300      	moveq	r3, #0
 800e542:	b2db      	uxtb	r3, r3
 800e544:	b29b      	uxth	r3, r3
 800e546:	4413      	add	r3, r2
 800e548:	b29a      	uxth	r2, r3
 800e54a:	4b11      	ldr	r3, [pc, #68]	; (800e590 <tcp_input+0x24c>)
 800e54c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e54e:	2300      	movs	r3, #0
 800e550:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e552:	4b10      	ldr	r3, [pc, #64]	; (800e594 <tcp_input+0x250>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	61fb      	str	r3, [r7, #28]
 800e558:	e082      	b.n	800e660 <tcp_input+0x31c>
 800e55a:	bf00      	nop
 800e55c:	2000420c 	.word	0x2000420c
 800e560:	200074c8 	.word	0x200074c8
 800e564:	20004210 	.word	0x20004210
 800e568:	20004214 	.word	0x20004214
 800e56c:	20004212 	.word	0x20004212
 800e570:	08016744 	.word	0x08016744
 800e574:	08016778 	.word	0x08016778
 800e578:	08016788 	.word	0x08016788
 800e57c:	080167b0 	.word	0x080167b0
 800e580:	080167bc 	.word	0x080167bc
 800e584:	2000421c 	.word	0x2000421c
 800e588:	20004220 	.word	0x20004220
 800e58c:	20004228 	.word	0x20004228
 800e590:	20004226 	.word	0x20004226
 800e594:	2000ab54 	.word	0x2000ab54
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	7d1b      	ldrb	r3, [r3, #20]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d105      	bne.n	800e5ac <tcp_input+0x268>
 800e5a0:	4b8f      	ldr	r3, [pc, #572]	; (800e7e0 <tcp_input+0x49c>)
 800e5a2:	22e2      	movs	r2, #226	; 0xe2
 800e5a4:	498f      	ldr	r1, [pc, #572]	; (800e7e4 <tcp_input+0x4a0>)
 800e5a6:	4890      	ldr	r0, [pc, #576]	; (800e7e8 <tcp_input+0x4a4>)
 800e5a8:	f006 fafe 	bl	8014ba8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	7d1b      	ldrb	r3, [r3, #20]
 800e5b0:	2b0a      	cmp	r3, #10
 800e5b2:	d105      	bne.n	800e5c0 <tcp_input+0x27c>
 800e5b4:	4b8a      	ldr	r3, [pc, #552]	; (800e7e0 <tcp_input+0x49c>)
 800e5b6:	22e3      	movs	r2, #227	; 0xe3
 800e5b8:	498c      	ldr	r1, [pc, #560]	; (800e7ec <tcp_input+0x4a8>)
 800e5ba:	488b      	ldr	r0, [pc, #556]	; (800e7e8 <tcp_input+0x4a4>)
 800e5bc:	f006 faf4 	bl	8014ba8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	7d1b      	ldrb	r3, [r3, #20]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d105      	bne.n	800e5d4 <tcp_input+0x290>
 800e5c8:	4b85      	ldr	r3, [pc, #532]	; (800e7e0 <tcp_input+0x49c>)
 800e5ca:	22e4      	movs	r2, #228	; 0xe4
 800e5cc:	4988      	ldr	r1, [pc, #544]	; (800e7f0 <tcp_input+0x4ac>)
 800e5ce:	4886      	ldr	r0, [pc, #536]	; (800e7e8 <tcp_input+0x4a4>)
 800e5d0:	f006 faea 	bl	8014ba8 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	8b1a      	ldrh	r2, [r3, #24]
 800e5d8:	4b86      	ldr	r3, [pc, #536]	; (800e7f4 <tcp_input+0x4b0>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	881b      	ldrh	r3, [r3, #0]
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d138      	bne.n	800e656 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	8ada      	ldrh	r2, [r3, #22]
 800e5e8:	4b82      	ldr	r3, [pc, #520]	; (800e7f4 <tcp_input+0x4b0>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	885b      	ldrh	r3, [r3, #2]
 800e5ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d130      	bne.n	800e656 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	685a      	ldr	r2, [r3, #4]
 800e5f8:	4b7f      	ldr	r3, [pc, #508]	; (800e7f8 <tcp_input+0x4b4>)
 800e5fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d12a      	bne.n	800e656 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	4b7c      	ldr	r3, [pc, #496]	; (800e7f8 <tcp_input+0x4b4>)
 800e606:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e608:	429a      	cmp	r2, r3
 800e60a:	d124      	bne.n	800e656 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	69fa      	ldr	r2, [r7, #28]
 800e612:	429a      	cmp	r2, r3
 800e614:	d105      	bne.n	800e622 <tcp_input+0x2de>
 800e616:	4b72      	ldr	r3, [pc, #456]	; (800e7e0 <tcp_input+0x49c>)
 800e618:	22ec      	movs	r2, #236	; 0xec
 800e61a:	4978      	ldr	r1, [pc, #480]	; (800e7fc <tcp_input+0x4b8>)
 800e61c:	4872      	ldr	r0, [pc, #456]	; (800e7e8 <tcp_input+0x4a4>)
 800e61e:	f006 fac3 	bl	8014ba8 <iprintf>
      if (prev != NULL) {
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00a      	beq.n	800e63e <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	68da      	ldr	r2, [r3, #12]
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e630:	4b73      	ldr	r3, [pc, #460]	; (800e800 <tcp_input+0x4bc>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e638:	4a71      	ldr	r2, [pc, #452]	; (800e800 <tcp_input+0x4bc>)
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	69fa      	ldr	r2, [r7, #28]
 800e644:	429a      	cmp	r2, r3
 800e646:	d10f      	bne.n	800e668 <tcp_input+0x324>
 800e648:	4b65      	ldr	r3, [pc, #404]	; (800e7e0 <tcp_input+0x49c>)
 800e64a:	22f4      	movs	r2, #244	; 0xf4
 800e64c:	496d      	ldr	r1, [pc, #436]	; (800e804 <tcp_input+0x4c0>)
 800e64e:	4866      	ldr	r0, [pc, #408]	; (800e7e8 <tcp_input+0x4a4>)
 800e650:	f006 faaa 	bl	8014ba8 <iprintf>
      break;
 800e654:	e008      	b.n	800e668 <tcp_input+0x324>
    }
    prev = pcb;
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	61fb      	str	r3, [r7, #28]
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d198      	bne.n	800e598 <tcp_input+0x254>
 800e666:	e000      	b.n	800e66a <tcp_input+0x326>
      break;
 800e668:	bf00      	nop
  }

  if (pcb == NULL) {
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d173      	bne.n	800e758 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e670:	4b65      	ldr	r3, [pc, #404]	; (800e808 <tcp_input+0x4c4>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	61fb      	str	r3, [r7, #28]
 800e676:	e02f      	b.n	800e6d8 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	7d1b      	ldrb	r3, [r3, #20]
 800e67c:	2b0a      	cmp	r3, #10
 800e67e:	d005      	beq.n	800e68c <tcp_input+0x348>
 800e680:	4b57      	ldr	r3, [pc, #348]	; (800e7e0 <tcp_input+0x49c>)
 800e682:	22fe      	movs	r2, #254	; 0xfe
 800e684:	4961      	ldr	r1, [pc, #388]	; (800e80c <tcp_input+0x4c8>)
 800e686:	4858      	ldr	r0, [pc, #352]	; (800e7e8 <tcp_input+0x4a4>)
 800e688:	f006 fa8e 	bl	8014ba8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	8b1a      	ldrh	r2, [r3, #24]
 800e690:	4b58      	ldr	r3, [pc, #352]	; (800e7f4 <tcp_input+0x4b0>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	b29b      	uxth	r3, r3
 800e698:	429a      	cmp	r2, r3
 800e69a:	d11a      	bne.n	800e6d2 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	8ada      	ldrh	r2, [r3, #22]
 800e6a0:	4b54      	ldr	r3, [pc, #336]	; (800e7f4 <tcp_input+0x4b0>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	885b      	ldrh	r3, [r3, #2]
 800e6a6:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d112      	bne.n	800e6d2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	4b51      	ldr	r3, [pc, #324]	; (800e7f8 <tcp_input+0x4b4>)
 800e6b2:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d10c      	bne.n	800e6d2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	4b4e      	ldr	r3, [pc, #312]	; (800e7f8 <tcp_input+0x4b4>)
 800e6be:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d106      	bne.n	800e6d2 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e6c4:	69f8      	ldr	r0, [r7, #28]
 800e6c6:	f000 fb15 	bl	800ecf4 <tcp_timewait_input>
        pbuf_free(p);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7fe f9f6 	bl	800cabc <pbuf_free>
        return;
 800e6d0:	e1da      	b.n	800ea88 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	61fb      	str	r3, [r7, #28]
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d1cc      	bne.n	800e678 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6e2:	4b4b      	ldr	r3, [pc, #300]	; (800e810 <tcp_input+0x4cc>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	617b      	str	r3, [r7, #20]
 800e6e8:	e019      	b.n	800e71e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	8ada      	ldrh	r2, [r3, #22]
 800e6ee:	4b41      	ldr	r3, [pc, #260]	; (800e7f4 <tcp_input+0x4b0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	885b      	ldrh	r3, [r3, #2]
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d10c      	bne.n	800e714 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	4b3e      	ldr	r3, [pc, #248]	; (800e7f8 <tcp_input+0x4b4>)
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	429a      	cmp	r2, r3
 800e704:	d00f      	beq.n	800e726 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00d      	beq.n	800e728 <tcp_input+0x3e4>
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d009      	beq.n	800e728 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	617b      	str	r3, [r7, #20]
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1e2      	bne.n	800e6ea <tcp_input+0x3a6>
 800e724:	e000      	b.n	800e728 <tcp_input+0x3e4>
            break;
 800e726:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d014      	beq.n	800e758 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00a      	beq.n	800e74a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	68da      	ldr	r2, [r3, #12]
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e73c:	4b34      	ldr	r3, [pc, #208]	; (800e810 <tcp_input+0x4cc>)
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e744:	4a32      	ldr	r2, [pc, #200]	; (800e810 <tcp_input+0x4cc>)
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e74a:	6978      	ldr	r0, [r7, #20]
 800e74c:	f000 f9f0 	bl	800eb30 <tcp_listen_input>
      pbuf_free(p);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7fe f9b3 	bl	800cabc <pbuf_free>
      return;
 800e756:	e197      	b.n	800ea88 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f000 8164 	beq.w	800ea28 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e760:	4b2c      	ldr	r3, [pc, #176]	; (800e814 <tcp_input+0x4d0>)
 800e762:	2200      	movs	r2, #0
 800e764:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	891a      	ldrh	r2, [r3, #8]
 800e76a:	4b2a      	ldr	r3, [pc, #168]	; (800e814 <tcp_input+0x4d0>)
 800e76c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e76e:	4a29      	ldr	r2, [pc, #164]	; (800e814 <tcp_input+0x4d0>)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e774:	4b1f      	ldr	r3, [pc, #124]	; (800e7f4 <tcp_input+0x4b0>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a26      	ldr	r2, [pc, #152]	; (800e814 <tcp_input+0x4d0>)
 800e77a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e77c:	4b26      	ldr	r3, [pc, #152]	; (800e818 <tcp_input+0x4d4>)
 800e77e:	2200      	movs	r2, #0
 800e780:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e782:	4b26      	ldr	r3, [pc, #152]	; (800e81c <tcp_input+0x4d8>)
 800e784:	2200      	movs	r2, #0
 800e786:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e788:	4b25      	ldr	r3, [pc, #148]	; (800e820 <tcp_input+0x4dc>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e78e:	4b25      	ldr	r3, [pc, #148]	; (800e824 <tcp_input+0x4e0>)
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	f003 0308 	and.w	r3, r3, #8
 800e796:	2b00      	cmp	r3, #0
 800e798:	d006      	beq.n	800e7a8 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	7b5b      	ldrb	r3, [r3, #13]
 800e79e:	f043 0301 	orr.w	r3, r3, #1
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d03d      	beq.n	800e82c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e7b0:	69f8      	ldr	r0, [r7, #28]
 800e7b2:	f7ff fa59 	bl	800dc68 <tcp_process_refused_data>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	f113 0f0d 	cmn.w	r3, #13
 800e7bc:	d007      	beq.n	800e7ce <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d032      	beq.n	800e82c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e7c6:	4b18      	ldr	r3, [pc, #96]	; (800e828 <tcp_input+0x4e4>)
 800e7c8:	881b      	ldrh	r3, [r3, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d02e      	beq.n	800e82c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f040 8108 	bne.w	800e9e8 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e7d8:	69f8      	ldr	r0, [r7, #28]
 800e7da:	f002 fa0b 	bl	8010bf4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e7de:	e103      	b.n	800e9e8 <tcp_input+0x6a4>
 800e7e0:	08016744 	.word	0x08016744
 800e7e4:	080167dc 	.word	0x080167dc
 800e7e8:	08016788 	.word	0x08016788
 800e7ec:	08016804 	.word	0x08016804
 800e7f0:	08016830 	.word	0x08016830
 800e7f4:	2000420c 	.word	0x2000420c
 800e7f8:	200074c8 	.word	0x200074c8
 800e7fc:	08016858 	.word	0x08016858
 800e800:	2000ab54 	.word	0x2000ab54
 800e804:	08016884 	.word	0x08016884
 800e808:	2000ab64 	.word	0x2000ab64
 800e80c:	080168b0 	.word	0x080168b0
 800e810:	2000ab5c 	.word	0x2000ab5c
 800e814:	200041fc 	.word	0x200041fc
 800e818:	2000422c 	.word	0x2000422c
 800e81c:	20004229 	.word	0x20004229
 800e820:	20004224 	.word	0x20004224
 800e824:	20004228 	.word	0x20004228
 800e828:	20004226 	.word	0x20004226
      }
    }
    tcp_input_pcb = pcb;
 800e82c:	4a98      	ldr	r2, [pc, #608]	; (800ea90 <tcp_input+0x74c>)
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e832:	69f8      	ldr	r0, [r7, #28]
 800e834:	f000 fac6 	bl	800edc4 <tcp_process>
 800e838:	4603      	mov	r3, r0
 800e83a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e83c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e840:	f113 0f0d 	cmn.w	r3, #13
 800e844:	f000 80d2 	beq.w	800e9ec <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800e848:	4b92      	ldr	r3, [pc, #584]	; (800ea94 <tcp_input+0x750>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	f003 0308 	and.w	r3, r3, #8
 800e850:	2b00      	cmp	r3, #0
 800e852:	d016      	beq.n	800e882 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d008      	beq.n	800e870 <tcp_input+0x52c>
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e864:	69fa      	ldr	r2, [r7, #28]
 800e866:	6912      	ldr	r2, [r2, #16]
 800e868:	f06f 010d 	mvn.w	r1, #13
 800e86c:	4610      	mov	r0, r2
 800e86e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e870:	69f9      	ldr	r1, [r7, #28]
 800e872:	4889      	ldr	r0, [pc, #548]	; (800ea98 <tcp_input+0x754>)
 800e874:	f7ff fc4c 	bl	800e110 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800e878:	69f9      	ldr	r1, [r7, #28]
 800e87a:	2000      	movs	r0, #0
 800e87c:	f7fd fbcc 	bl	800c018 <memp_free>
 800e880:	e0bf      	b.n	800ea02 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800e882:	2300      	movs	r3, #0
 800e884:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e886:	4b85      	ldr	r3, [pc, #532]	; (800ea9c <tcp_input+0x758>)
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d01b      	beq.n	800e8c6 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e88e:	4b83      	ldr	r3, [pc, #524]	; (800ea9c <tcp_input+0x758>)
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d009      	beq.n	800e8b0 <tcp_input+0x56c>
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8a0:	69fa      	ldr	r2, [r7, #28]
 800e8a2:	6910      	ldr	r0, [r2, #16]
 800e8a4:	89fa      	ldrh	r2, [r7, #14]
 800e8a6:	69f9      	ldr	r1, [r7, #28]
 800e8a8:	4798      	blx	r3
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	74fb      	strb	r3, [r7, #19]
 800e8ae:	e001      	b.n	800e8b4 <tcp_input+0x570>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e8b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8b8:	f113 0f0d 	cmn.w	r3, #13
 800e8bc:	f000 8098 	beq.w	800e9f0 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e8c0:	4b76      	ldr	r3, [pc, #472]	; (800ea9c <tcp_input+0x758>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e8c6:	69f8      	ldr	r0, [r7, #28]
 800e8c8:	f000 f900 	bl	800eacc <tcp_input_delayed_close>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f040 8090 	bne.w	800e9f4 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e8d4:	4b72      	ldr	r3, [pc, #456]	; (800eaa0 <tcp_input+0x75c>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d041      	beq.n	800e960 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d006      	beq.n	800e8f2 <tcp_input+0x5ae>
 800e8e4:	4b6f      	ldr	r3, [pc, #444]	; (800eaa4 <tcp_input+0x760>)
 800e8e6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800e8ea:	496f      	ldr	r1, [pc, #444]	; (800eaa8 <tcp_input+0x764>)
 800e8ec:	486f      	ldr	r0, [pc, #444]	; (800eaac <tcp_input+0x768>)
 800e8ee:	f006 f95b 	bl	8014ba8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	7e9b      	ldrb	r3, [r3, #26]
 800e8f6:	f003 0310 	and.w	r3, r3, #16
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d008      	beq.n	800e910 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e8fe:	4b68      	ldr	r3, [pc, #416]	; (800eaa0 <tcp_input+0x75c>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe f8da 	bl	800cabc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e908:	69f8      	ldr	r0, [r7, #28]
 800e90a:	f7fe fdd5 	bl	800d4b8 <tcp_abort>
            goto aborted;
 800e90e:	e078      	b.n	800ea02 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00c      	beq.n	800e934 <tcp_input+0x5f0>
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	6918      	ldr	r0, [r3, #16]
 800e924:	4b5e      	ldr	r3, [pc, #376]	; (800eaa0 <tcp_input+0x75c>)
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	2300      	movs	r3, #0
 800e92a:	69f9      	ldr	r1, [r7, #28]
 800e92c:	47a0      	blx	r4
 800e92e:	4603      	mov	r3, r0
 800e930:	74fb      	strb	r3, [r7, #19]
 800e932:	e008      	b.n	800e946 <tcp_input+0x602>
 800e934:	4b5a      	ldr	r3, [pc, #360]	; (800eaa0 <tcp_input+0x75c>)
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	2300      	movs	r3, #0
 800e93a:	69f9      	ldr	r1, [r7, #28]
 800e93c:	2000      	movs	r0, #0
 800e93e:	f7ff fa44 	bl	800ddca <tcp_recv_null>
 800e942:	4603      	mov	r3, r0
 800e944:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e946:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e94a:	f113 0f0d 	cmn.w	r3, #13
 800e94e:	d053      	beq.n	800e9f8 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e950:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e958:	4b51      	ldr	r3, [pc, #324]	; (800eaa0 <tcp_input+0x75c>)
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e960:	4b4c      	ldr	r3, [pc, #304]	; (800ea94 <tcp_input+0x750>)
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	f003 0320 	and.w	r3, r3, #32
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d030      	beq.n	800e9ce <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e970:	2b00      	cmp	r3, #0
 800e972:	d009      	beq.n	800e988 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e978:	7b5a      	ldrb	r2, [r3, #13]
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e97e:	f042 0220 	orr.w	r2, r2, #32
 800e982:	b2d2      	uxtb	r2, r2
 800e984:	735a      	strb	r2, [r3, #13]
 800e986:	e022      	b.n	800e9ce <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e98c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e990:	d005      	beq.n	800e99e <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e996:	3301      	adds	r3, #1
 800e998:	b29a      	uxth	r2, r3
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00b      	beq.n	800e9c0 <tcp_input+0x67c>
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	6918      	ldr	r0, [r3, #16]
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	69f9      	ldr	r1, [r7, #28]
 800e9b8:	47a0      	blx	r4
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	74fb      	strb	r3, [r7, #19]
 800e9be:	e001      	b.n	800e9c4 <tcp_input+0x680>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e9c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9c8:	f113 0f0d 	cmn.w	r3, #13
 800e9cc:	d016      	beq.n	800e9fc <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e9ce:	4b30      	ldr	r3, [pc, #192]	; (800ea90 <tcp_input+0x74c>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e9d4:	69f8      	ldr	r0, [r7, #28]
 800e9d6:	f000 f879 	bl	800eacc <tcp_input_delayed_close>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10f      	bne.n	800ea00 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e9e0:	69f8      	ldr	r0, [r7, #28]
 800e9e2:	f002 f963 	bl	8010cac <tcp_output>
 800e9e6:	e00c      	b.n	800ea02 <tcp_input+0x6be>
        goto aborted;
 800e9e8:	bf00      	nop
 800e9ea:	e00a      	b.n	800ea02 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e9ec:	bf00      	nop
 800e9ee:	e008      	b.n	800ea02 <tcp_input+0x6be>
              goto aborted;
 800e9f0:	bf00      	nop
 800e9f2:	e006      	b.n	800ea02 <tcp_input+0x6be>
          goto aborted;
 800e9f4:	bf00      	nop
 800e9f6:	e004      	b.n	800ea02 <tcp_input+0x6be>
            goto aborted;
 800e9f8:	bf00      	nop
 800e9fa:	e002      	b.n	800ea02 <tcp_input+0x6be>
              goto aborted;
 800e9fc:	bf00      	nop
 800e9fe:	e000      	b.n	800ea02 <tcp_input+0x6be>
          goto aborted;
 800ea00:	bf00      	nop
    tcp_input_pcb = NULL;
 800ea02:	4b23      	ldr	r3, [pc, #140]	; (800ea90 <tcp_input+0x74c>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ea08:	4b25      	ldr	r3, [pc, #148]	; (800eaa0 <tcp_input+0x75c>)
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ea0e:	4b28      	ldr	r3, [pc, #160]	; (800eab0 <tcp_input+0x76c>)
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d037      	beq.n	800ea86 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800ea16:	4b26      	ldr	r3, [pc, #152]	; (800eab0 <tcp_input+0x76c>)
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fe f84e 	bl	800cabc <pbuf_free>
      inseg.p = NULL;
 800ea20:	4b23      	ldr	r3, [pc, #140]	; (800eab0 <tcp_input+0x76c>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ea26:	e02e      	b.n	800ea86 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ea28:	4b22      	ldr	r3, [pc, #136]	; (800eab4 <tcp_input+0x770>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	899b      	ldrh	r3, [r3, #12]
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fc feb3 	bl	800b79c <lwip_htons>
 800ea36:	4603      	mov	r3, r0
 800ea38:	f003 0304 	and.w	r3, r3, #4
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d115      	bne.n	800ea6c <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea40:	4b1d      	ldr	r3, [pc, #116]	; (800eab8 <tcp_input+0x774>)
 800ea42:	6818      	ldr	r0, [r3, #0]
 800ea44:	4b1d      	ldr	r3, [pc, #116]	; (800eabc <tcp_input+0x778>)
 800ea46:	881b      	ldrh	r3, [r3, #0]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	4b1d      	ldr	r3, [pc, #116]	; (800eac0 <tcp_input+0x77c>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea50:	4b18      	ldr	r3, [pc, #96]	; (800eab4 <tcp_input+0x770>)
 800ea52:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea54:	885b      	ldrh	r3, [r3, #2]
 800ea56:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea58:	4a16      	ldr	r2, [pc, #88]	; (800eab4 <tcp_input+0x770>)
 800ea5a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea5c:	8812      	ldrh	r2, [r2, #0]
 800ea5e:	b292      	uxth	r2, r2
 800ea60:	9201      	str	r2, [sp, #4]
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	4b17      	ldr	r3, [pc, #92]	; (800eac4 <tcp_input+0x780>)
 800ea66:	4a18      	ldr	r2, [pc, #96]	; (800eac8 <tcp_input+0x784>)
 800ea68:	f002 fbaa 	bl	80111c0 <tcp_rst>
    pbuf_free(p);
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7fe f825 	bl	800cabc <pbuf_free>
  return;
 800ea72:	e008      	b.n	800ea86 <tcp_input+0x742>
    goto dropped;
 800ea74:	bf00      	nop
 800ea76:	e002      	b.n	800ea7e <tcp_input+0x73a>
dropped:
 800ea78:	bf00      	nop
 800ea7a:	e000      	b.n	800ea7e <tcp_input+0x73a>
      goto dropped;
 800ea7c:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7fe f81c 	bl	800cabc <pbuf_free>
 800ea84:	e000      	b.n	800ea88 <tcp_input+0x744>
  return;
 800ea86:	bf00      	nop
}
 800ea88:	3724      	adds	r7, #36	; 0x24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd90      	pop	{r4, r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	2000ab68 	.word	0x2000ab68
 800ea94:	20004229 	.word	0x20004229
 800ea98:	2000ab54 	.word	0x2000ab54
 800ea9c:	20004224 	.word	0x20004224
 800eaa0:	2000422c 	.word	0x2000422c
 800eaa4:	08016744 	.word	0x08016744
 800eaa8:	080168e0 	.word	0x080168e0
 800eaac:	08016788 	.word	0x08016788
 800eab0:	200041fc 	.word	0x200041fc
 800eab4:	2000420c 	.word	0x2000420c
 800eab8:	20004220 	.word	0x20004220
 800eabc:	20004226 	.word	0x20004226
 800eac0:	2000421c 	.word	0x2000421c
 800eac4:	200074d8 	.word	0x200074d8
 800eac8:	200074dc 	.word	0x200074dc

0800eacc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800ead4:	4b14      	ldr	r3, [pc, #80]	; (800eb28 <tcp_input_delayed_close+0x5c>)
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	f003 0310 	and.w	r3, r3, #16
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d01d      	beq.n	800eb1c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7e9b      	ldrb	r3, [r3, #26]
 800eae4:	f003 0310 	and.w	r3, r3, #16
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10d      	bne.n	800eb08 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d008      	beq.n	800eb08 <tcp_input_delayed_close+0x3c>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	6912      	ldr	r2, [r2, #16]
 800eb00:	f06f 010e 	mvn.w	r1, #14
 800eb04:	4610      	mov	r0, r2
 800eb06:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb08:	6879      	ldr	r1, [r7, #4]
 800eb0a:	4808      	ldr	r0, [pc, #32]	; (800eb2c <tcp_input_delayed_close+0x60>)
 800eb0c:	f7ff fb00 	bl	800e110 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800eb10:	6879      	ldr	r1, [r7, #4]
 800eb12:	2000      	movs	r0, #0
 800eb14:	f7fd fa80 	bl	800c018 <memp_free>
    return 1;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e000      	b.n	800eb1e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	20004229 	.word	0x20004229
 800eb2c:	2000ab54 	.word	0x2000ab54

0800eb30 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b088      	sub	sp, #32
 800eb34:	af02      	add	r7, sp, #8
 800eb36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eb38:	4b64      	ldr	r3, [pc, #400]	; (800eccc <tcp_listen_input+0x19c>)
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	f003 0304 	and.w	r3, r3, #4
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f040 80bc 	bne.w	800ecbe <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eb46:	4b61      	ldr	r3, [pc, #388]	; (800eccc <tcp_listen_input+0x19c>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	f003 0310 	and.w	r3, r3, #16
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d016      	beq.n	800eb80 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb52:	4b5f      	ldr	r3, [pc, #380]	; (800ecd0 <tcp_listen_input+0x1a0>)
 800eb54:	6818      	ldr	r0, [r3, #0]
 800eb56:	4b5f      	ldr	r3, [pc, #380]	; (800ecd4 <tcp_listen_input+0x1a4>)
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	4b5e      	ldr	r3, [pc, #376]	; (800ecd8 <tcp_listen_input+0x1a8>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb62:	4b5e      	ldr	r3, [pc, #376]	; (800ecdc <tcp_listen_input+0x1ac>)
 800eb64:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb66:	885b      	ldrh	r3, [r3, #2]
 800eb68:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb6a:	4a5c      	ldr	r2, [pc, #368]	; (800ecdc <tcp_listen_input+0x1ac>)
 800eb6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb6e:	8812      	ldrh	r2, [r2, #0]
 800eb70:	b292      	uxth	r2, r2
 800eb72:	9201      	str	r2, [sp, #4]
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	4b5a      	ldr	r3, [pc, #360]	; (800ece0 <tcp_listen_input+0x1b0>)
 800eb78:	4a5a      	ldr	r2, [pc, #360]	; (800ece4 <tcp_listen_input+0x1b4>)
 800eb7a:	f002 fb21 	bl	80111c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eb7e:	e0a0      	b.n	800ecc2 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800eb80:	4b52      	ldr	r3, [pc, #328]	; (800eccc <tcp_listen_input+0x19c>)
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f003 0302 	and.w	r3, r3, #2
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 809a 	beq.w	800ecc2 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	7d5b      	ldrb	r3, [r3, #21]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff f9f8 	bl	800df88 <tcp_alloc>
 800eb98:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d111      	bne.n	800ebc4 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	699b      	ldr	r3, [r3, #24]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00a      	beq.n	800ebbe <tcp_listen_input+0x8e>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	699b      	ldr	r3, [r3, #24]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	6910      	ldr	r0, [r2, #16]
 800ebb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	4798      	blx	r3
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73bb      	strb	r3, [r7, #14]
      return;
 800ebbc:	e082      	b.n	800ecc4 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ebbe:	23f0      	movs	r3, #240	; 0xf0
 800ebc0:	73bb      	strb	r3, [r7, #14]
      return;
 800ebc2:	e07f      	b.n	800ecc4 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ebc4:	4b48      	ldr	r3, [pc, #288]	; (800ece8 <tcp_listen_input+0x1b8>)
 800ebc6:	695a      	ldr	r2, [r3, #20]
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ebcc:	4b46      	ldr	r3, [pc, #280]	; (800ece8 <tcp_listen_input+0x1b8>)
 800ebce:	691a      	ldr	r2, [r3, #16]
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	8ada      	ldrh	r2, [r3, #22]
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ebdc:	4b3f      	ldr	r3, [pc, #252]	; (800ecdc <tcp_listen_input+0x1ac>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	2203      	movs	r2, #3
 800ebec:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ebee:	4b3a      	ldr	r3, [pc, #232]	; (800ecd8 <tcp_listen_input+0x1a8>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ec00:	6978      	ldr	r0, [r7, #20]
 800ec02:	f7ff fb01 	bl	800e208 <tcp_next_iss>
 800ec06:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	693a      	ldr	r2, [r7, #16]
 800ec0c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	693a      	ldr	r2, [r7, #16]
 800ec18:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	693a      	ldr	r2, [r7, #16]
 800ec1e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ec20:	4b2d      	ldr	r3, [pc, #180]	; (800ecd8 <tcp_listen_input+0x1a8>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	1e5a      	subs	r2, r3, #1
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	691a      	ldr	r2, [r3, #16]
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	7a1b      	ldrb	r3, [r3, #8]
 800ec3c:	f003 030c 	and.w	r3, r3, #12
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ec46:	4b29      	ldr	r3, [pc, #164]	; (800ecec <tcp_listen_input+0x1bc>)
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	60da      	str	r2, [r3, #12]
 800ec4e:	4a27      	ldr	r2, [pc, #156]	; (800ecec <tcp_listen_input+0x1bc>)
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	6013      	str	r3, [r2, #0]
 800ec54:	f002 fd04 	bl	8011660 <tcp_timer_needed>
 800ec58:	4b25      	ldr	r3, [pc, #148]	; (800ecf0 <tcp_listen_input+0x1c0>)
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ec5e:	6978      	ldr	r0, [r7, #20]
 800ec60:	f001 fd14 	bl	801068c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ec64:	4b1d      	ldr	r3, [pc, #116]	; (800ecdc <tcp_listen_input+0x1ac>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	89db      	ldrh	r3, [r3, #14]
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	3304      	adds	r3, #4
 800ec86:	4619      	mov	r1, r3
 800ec88:	4610      	mov	r0, r2
 800ec8a:	f7ff fad5 	bl	800e238 <tcp_eff_send_mss_impl>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	461a      	mov	r2, r3
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ec96:	2112      	movs	r1, #18
 800ec98:	6978      	ldr	r0, [r7, #20]
 800ec9a:	f001 feaf 	bl	80109fc <tcp_enqueue_flags>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800eca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d004      	beq.n	800ecb4 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ecaa:	2100      	movs	r1, #0
 800ecac:	6978      	ldr	r0, [r7, #20]
 800ecae:	f7fe fb51 	bl	800d354 <tcp_abandon>
      return;
 800ecb2:	e007      	b.n	800ecc4 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800ecb4:	6978      	ldr	r0, [r7, #20]
 800ecb6:	f001 fff9 	bl	8010cac <tcp_output>
  return;
 800ecba:	bf00      	nop
 800ecbc:	e001      	b.n	800ecc2 <tcp_listen_input+0x192>
    return;
 800ecbe:	bf00      	nop
 800ecc0:	e000      	b.n	800ecc4 <tcp_listen_input+0x194>
  return;
 800ecc2:	bf00      	nop
}
 800ecc4:	3718      	adds	r7, #24
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	20004228 	.word	0x20004228
 800ecd0:	20004220 	.word	0x20004220
 800ecd4:	20004226 	.word	0x20004226
 800ecd8:	2000421c 	.word	0x2000421c
 800ecdc:	2000420c 	.word	0x2000420c
 800ece0:	200074d8 	.word	0x200074d8
 800ece4:	200074dc 	.word	0x200074dc
 800ece8:	200074c8 	.word	0x200074c8
 800ecec:	2000ab54 	.word	0x2000ab54
 800ecf0:	2000ab50 	.word	0x2000ab50

0800ecf4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af02      	add	r7, sp, #8
 800ecfa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ecfc:	4b29      	ldr	r3, [pc, #164]	; (800eda4 <tcp_timewait_input+0xb0>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	f003 0304 	and.w	r3, r3, #4
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d147      	bne.n	800ed98 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ed08:	4b26      	ldr	r3, [pc, #152]	; (800eda4 <tcp_timewait_input+0xb0>)
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	f003 0302 	and.w	r3, r3, #2
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d027      	beq.n	800ed64 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ed14:	4b24      	ldr	r3, [pc, #144]	; (800eda8 <tcp_timewait_input+0xb4>)
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	db2a      	blt.n	800ed78 <tcp_timewait_input+0x84>
 800ed22:	4b21      	ldr	r3, [pc, #132]	; (800eda8 <tcp_timewait_input+0xb4>)
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2a:	6879      	ldr	r1, [r7, #4]
 800ed2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed2e:	440b      	add	r3, r1
 800ed30:	1ad3      	subs	r3, r2, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	dc20      	bgt.n	800ed78 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed36:	4b1d      	ldr	r3, [pc, #116]	; (800edac <tcp_timewait_input+0xb8>)
 800ed38:	6818      	ldr	r0, [r3, #0]
 800ed3a:	4b1d      	ldr	r3, [pc, #116]	; (800edb0 <tcp_timewait_input+0xbc>)
 800ed3c:	881b      	ldrh	r3, [r3, #0]
 800ed3e:	461a      	mov	r2, r3
 800ed40:	4b19      	ldr	r3, [pc, #100]	; (800eda8 <tcp_timewait_input+0xb4>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed46:	4b1b      	ldr	r3, [pc, #108]	; (800edb4 <tcp_timewait_input+0xc0>)
 800ed48:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed4a:	885b      	ldrh	r3, [r3, #2]
 800ed4c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed4e:	4a19      	ldr	r2, [pc, #100]	; (800edb4 <tcp_timewait_input+0xc0>)
 800ed50:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed52:	8812      	ldrh	r2, [r2, #0]
 800ed54:	b292      	uxth	r2, r2
 800ed56:	9201      	str	r2, [sp, #4]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	4b17      	ldr	r3, [pc, #92]	; (800edb8 <tcp_timewait_input+0xc4>)
 800ed5c:	4a17      	ldr	r2, [pc, #92]	; (800edbc <tcp_timewait_input+0xc8>)
 800ed5e:	f002 fa2f 	bl	80111c0 <tcp_rst>
      return;
 800ed62:	e01c      	b.n	800ed9e <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800ed64:	4b0f      	ldr	r3, [pc, #60]	; (800eda4 <tcp_timewait_input+0xb0>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	f003 0301 	and.w	r3, r3, #1
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d003      	beq.n	800ed78 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ed70:	4b13      	ldr	r3, [pc, #76]	; (800edc0 <tcp_timewait_input+0xcc>)
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ed78:	4b0d      	ldr	r3, [pc, #52]	; (800edb0 <tcp_timewait_input+0xbc>)
 800ed7a:	881b      	ldrh	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00d      	beq.n	800ed9c <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	7e9b      	ldrb	r3, [r3, #26]
 800ed84:	f043 0302 	orr.w	r3, r3, #2
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f001 ff8c 	bl	8010cac <tcp_output>
  }
  return;
 800ed94:	bf00      	nop
 800ed96:	e001      	b.n	800ed9c <tcp_timewait_input+0xa8>
    return;
 800ed98:	bf00      	nop
 800ed9a:	e000      	b.n	800ed9e <tcp_timewait_input+0xaa>
  return;
 800ed9c:	bf00      	nop
}
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	20004228 	.word	0x20004228
 800eda8:	2000421c 	.word	0x2000421c
 800edac:	20004220 	.word	0x20004220
 800edb0:	20004226 	.word	0x20004226
 800edb4:	2000420c 	.word	0x2000420c
 800edb8:	200074d8 	.word	0x200074d8
 800edbc:	200074dc 	.word	0x200074dc
 800edc0:	2000ab58 	.word	0x2000ab58

0800edc4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b08a      	sub	sp, #40	; 0x28
 800edc8:	af02      	add	r7, sp, #8
 800edca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800edd4:	4ba4      	ldr	r3, [pc, #656]	; (800f068 <tcp_process+0x2a4>)
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	f003 0304 	and.w	r3, r3, #4
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d04e      	beq.n	800ee7e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	2b02      	cmp	r3, #2
 800ede6:	d108      	bne.n	800edfa <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edec:	4b9f      	ldr	r3, [pc, #636]	; (800f06c <tcp_process+0x2a8>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d123      	bne.n	800ee3c <tcp_process+0x78>
        acceptable = 1;
 800edf4:	2301      	movs	r3, #1
 800edf6:	76fb      	strb	r3, [r7, #27]
 800edf8:	e020      	b.n	800ee3c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edfe:	4b9c      	ldr	r3, [pc, #624]	; (800f070 <tcp_process+0x2ac>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d102      	bne.n	800ee0c <tcp_process+0x48>
        acceptable = 1;
 800ee06:	2301      	movs	r3, #1
 800ee08:	76fb      	strb	r3, [r7, #27]
 800ee0a:	e017      	b.n	800ee3c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee0c:	4b98      	ldr	r3, [pc, #608]	; (800f070 <tcp_process+0x2ac>)
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	db10      	blt.n	800ee3c <tcp_process+0x78>
 800ee1a:	4b95      	ldr	r3, [pc, #596]	; (800f070 <tcp_process+0x2ac>)
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee22:	6879      	ldr	r1, [r7, #4]
 800ee24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee26:	440b      	add	r3, r1
 800ee28:	1ad3      	subs	r3, r2, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dc06      	bgt.n	800ee3c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	7e9b      	ldrb	r3, [r3, #26]
 800ee32:	f043 0302 	orr.w	r3, r3, #2
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ee3c:	7efb      	ldrb	r3, [r7, #27]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d01b      	beq.n	800ee7a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	7d1b      	ldrb	r3, [r3, #20]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d106      	bne.n	800ee58 <tcp_process+0x94>
 800ee4a:	4b8a      	ldr	r3, [pc, #552]	; (800f074 <tcp_process+0x2b0>)
 800ee4c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ee50:	4989      	ldr	r1, [pc, #548]	; (800f078 <tcp_process+0x2b4>)
 800ee52:	488a      	ldr	r0, [pc, #552]	; (800f07c <tcp_process+0x2b8>)
 800ee54:	f005 fea8 	bl	8014ba8 <iprintf>
      recv_flags |= TF_RESET;
 800ee58:	4b89      	ldr	r3, [pc, #548]	; (800f080 <tcp_process+0x2bc>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	f043 0308 	orr.w	r3, r3, #8
 800ee60:	b2da      	uxtb	r2, r3
 800ee62:	4b87      	ldr	r3, [pc, #540]	; (800f080 <tcp_process+0x2bc>)
 800ee64:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	7e9b      	ldrb	r3, [r3, #26]
 800ee6a:	f023 0301 	bic.w	r3, r3, #1
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800ee74:	f06f 030d 	mvn.w	r3, #13
 800ee78:	e34d      	b.n	800f516 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e34b      	b.n	800f516 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ee7e:	4b7a      	ldr	r3, [pc, #488]	; (800f068 <tcp_process+0x2a4>)
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	f003 0302 	and.w	r3, r3, #2
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d010      	beq.n	800eeac <tcp_process+0xe8>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	7d1b      	ldrb	r3, [r3, #20]
 800ee8e:	2b02      	cmp	r3, #2
 800ee90:	d00c      	beq.n	800eeac <tcp_process+0xe8>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	7d1b      	ldrb	r3, [r3, #20]
 800ee96:	2b03      	cmp	r3, #3
 800ee98:	d008      	beq.n	800eeac <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7e9b      	ldrb	r3, [r3, #26]
 800ee9e:	f043 0302 	orr.w	r3, r3, #2
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	e334      	b.n	800f516 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	7e9b      	ldrb	r3, [r3, #26]
 800eeb0:	f003 0310 	and.w	r3, r3, #16
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d103      	bne.n	800eec0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800eeb8:	4b72      	ldr	r3, [pc, #456]	; (800f084 <tcp_process+0x2c0>)
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f001 fbdf 	bl	801068c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	7d1b      	ldrb	r3, [r3, #20]
 800eed2:	3b02      	subs	r3, #2
 800eed4:	2b07      	cmp	r3, #7
 800eed6:	f200 830e 	bhi.w	800f4f6 <tcp_process+0x732>
 800eeda:	a201      	add	r2, pc, #4	; (adr r2, 800eee0 <tcp_process+0x11c>)
 800eedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee0:	0800ef01 	.word	0x0800ef01
 800eee4:	0800f0f9 	.word	0x0800f0f9
 800eee8:	0800f251 	.word	0x0800f251
 800eeec:	0800f27b 	.word	0x0800f27b
 800eef0:	0800f3a5 	.word	0x0800f3a5
 800eef4:	0800f251 	.word	0x0800f251
 800eef8:	0800f431 	.word	0x0800f431
 800eefc:	0800f4c1 	.word	0x0800f4c1
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ef00:	4b59      	ldr	r3, [pc, #356]	; (800f068 <tcp_process+0x2a4>)
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	f003 0310 	and.w	r3, r3, #16
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 80cb 	beq.w	800f0a4 <tcp_process+0x2e0>
 800ef0e:	4b56      	ldr	r3, [pc, #344]	; (800f068 <tcp_process+0x2a4>)
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	f003 0302 	and.w	r3, r3, #2
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f000 80c4 	beq.w	800f0a4 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef20:	1c5a      	adds	r2, r3, #1
 800ef22:	4b52      	ldr	r3, [pc, #328]	; (800f06c <tcp_process+0x2a8>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	f040 80bc 	bne.w	800f0a4 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800ef2c:	4b50      	ldr	r3, [pc, #320]	; (800f070 <tcp_process+0x2ac>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	1c5a      	adds	r2, r3, #1
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800ef3e:	4b4b      	ldr	r3, [pc, #300]	; (800f06c <tcp_process+0x2a8>)
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ef46:	4b50      	ldr	r3, [pc, #320]	; (800f088 <tcp_process+0x2c4>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	89db      	ldrh	r3, [r3, #14]
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ef60:	4b43      	ldr	r3, [pc, #268]	; (800f070 <tcp_process+0x2ac>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	1e5a      	subs	r2, r3, #1
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2204      	movs	r2, #4
 800ef6e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3304      	adds	r3, #4
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4610      	mov	r0, r2
 800ef7c:	f7ff f95c 	bl	800e238 <tcp_eff_send_mss_impl>
 800ef80:	4603      	mov	r3, r0
 800ef82:	461a      	mov	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ef92:	429a      	cmp	r2, r3
 800ef94:	bf38      	it	cc
 800ef96:	461a      	movcc	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	bf28      	it	cs
 800efa2:	4613      	movcs	r3, r2
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d106      	bne.n	800efc4 <tcp_process+0x200>
 800efb6:	4b2f      	ldr	r3, [pc, #188]	; (800f074 <tcp_process+0x2b0>)
 800efb8:	f240 321a 	movw	r2, #794	; 0x31a
 800efbc:	4933      	ldr	r1, [pc, #204]	; (800f08c <tcp_process+0x2c8>)
 800efbe:	482f      	ldr	r0, [pc, #188]	; (800f07c <tcp_process+0x2b8>)
 800efc0:	f005 fdf2 	bl	8014ba8 <iprintf>
      --pcb->snd_queuelen;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efca:	3b01      	subs	r3, #1
 800efcc:	b29a      	uxth	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d111      	bne.n	800f004 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efe4:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d106      	bne.n	800effa <tcp_process+0x236>
 800efec:	4b21      	ldr	r3, [pc, #132]	; (800f074 <tcp_process+0x2b0>)
 800efee:	f240 3222 	movw	r2, #802	; 0x322
 800eff2:	4927      	ldr	r1, [pc, #156]	; (800f090 <tcp_process+0x2cc>)
 800eff4:	4821      	ldr	r0, [pc, #132]	; (800f07c <tcp_process+0x2b8>)
 800eff6:	f005 fdd7 	bl	8014ba8 <iprintf>
        pcb->unsent = rseg->next;
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	669a      	str	r2, [r3, #104]	; 0x68
 800f002:	e003      	b.n	800f00c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800f00c:	69f8      	ldr	r0, [r7, #28]
 800f00e:	f7fe fea8 	bl	800dd62 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f016:	2b00      	cmp	r3, #0
 800f018:	d104      	bne.n	800f024 <tcp_process+0x260>
        pcb->rtime = -1;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f020:	861a      	strh	r2, [r3, #48]	; 0x30
 800f022:	e006      	b.n	800f032 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2200      	movs	r2, #0
 800f028:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2200      	movs	r2, #0
 800f02e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00a      	beq.n	800f052 <tcp_process+0x28e>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	6910      	ldr	r0, [r2, #16]
 800f046:	2200      	movs	r2, #0
 800f048:	6879      	ldr	r1, [r7, #4]
 800f04a:	4798      	blx	r3
 800f04c:	4603      	mov	r3, r0
 800f04e:	76bb      	strb	r3, [r7, #26]
 800f050:	e001      	b.n	800f056 <tcp_process+0x292>
 800f052:	2300      	movs	r3, #0
 800f054:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800f056:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f05a:	f113 0f0d 	cmn.w	r3, #13
 800f05e:	d119      	bne.n	800f094 <tcp_process+0x2d0>
        return ERR_ABRT;
 800f060:	f06f 030c 	mvn.w	r3, #12
 800f064:	e257      	b.n	800f516 <tcp_process+0x752>
 800f066:	bf00      	nop
 800f068:	20004228 	.word	0x20004228
 800f06c:	20004220 	.word	0x20004220
 800f070:	2000421c 	.word	0x2000421c
 800f074:	08016744 	.word	0x08016744
 800f078:	080168fc 	.word	0x080168fc
 800f07c:	08016788 	.word	0x08016788
 800f080:	20004229 	.word	0x20004229
 800f084:	2000ab58 	.word	0x2000ab58
 800f088:	2000420c 	.word	0x2000420c
 800f08c:	0801691c 	.word	0x0801691c
 800f090:	08016934 	.word	0x08016934
      }
      tcp_ack_now(pcb);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	7e9b      	ldrb	r3, [r3, #26]
 800f098:	f043 0302 	orr.w	r3, r3, #2
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800f0a2:	e22a      	b.n	800f4fa <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800f0a4:	4b9f      	ldr	r3, [pc, #636]	; (800f324 <tcp_process+0x560>)
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	f003 0310 	and.w	r3, r3, #16
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f000 8224 	beq.w	800f4fa <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0b2:	4b9d      	ldr	r3, [pc, #628]	; (800f328 <tcp_process+0x564>)
 800f0b4:	6818      	ldr	r0, [r3, #0]
 800f0b6:	4b9d      	ldr	r3, [pc, #628]	; (800f32c <tcp_process+0x568>)
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	4b9c      	ldr	r3, [pc, #624]	; (800f330 <tcp_process+0x56c>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0c2:	4b9c      	ldr	r3, [pc, #624]	; (800f334 <tcp_process+0x570>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0c6:	885b      	ldrh	r3, [r3, #2]
 800f0c8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0ca:	4a9a      	ldr	r2, [pc, #616]	; (800f334 <tcp_process+0x570>)
 800f0cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0ce:	8812      	ldrh	r2, [r2, #0]
 800f0d0:	b292      	uxth	r2, r2
 800f0d2:	9201      	str	r2, [sp, #4]
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	4b98      	ldr	r3, [pc, #608]	; (800f338 <tcp_process+0x574>)
 800f0d8:	4a98      	ldr	r2, [pc, #608]	; (800f33c <tcp_process+0x578>)
 800f0da:	f002 f871 	bl	80111c0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0e4:	2b05      	cmp	r3, #5
 800f0e6:	f200 8208 	bhi.w	800f4fa <tcp_process+0x736>
        pcb->rtime = 0;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f002 f8db 	bl	80112ac <tcp_rexmit_rto>
    break;
 800f0f6:	e200      	b.n	800f4fa <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800f0f8:	4b8a      	ldr	r3, [pc, #552]	; (800f324 <tcp_process+0x560>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	f003 0310 	and.w	r3, r3, #16
 800f100:	2b00      	cmp	r3, #0
 800f102:	f000 8091 	beq.w	800f228 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f106:	4b88      	ldr	r3, [pc, #544]	; (800f328 <tcp_process+0x564>)
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	3b01      	subs	r3, #1
 800f112:	2b00      	cmp	r3, #0
 800f114:	db71      	blt.n	800f1fa <tcp_process+0x436>
 800f116:	4b84      	ldr	r3, [pc, #528]	; (800f328 <tcp_process+0x564>)
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	dc6a      	bgt.n	800f1fa <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2204      	movs	r2, #4
 800f128:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00b      	beq.n	800f14a <tcp_process+0x386>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f136:	699b      	ldr	r3, [r3, #24]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d106      	bne.n	800f14a <tcp_process+0x386>
 800f13c:	4b80      	ldr	r3, [pc, #512]	; (800f340 <tcp_process+0x57c>)
 800f13e:	f240 3251 	movw	r2, #849	; 0x351
 800f142:	4980      	ldr	r1, [pc, #512]	; (800f344 <tcp_process+0x580>)
 800f144:	4880      	ldr	r0, [pc, #512]	; (800f348 <tcp_process+0x584>)
 800f146:	f005 fd2f 	bl	8014ba8 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d102      	bne.n	800f158 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800f152:	23fa      	movs	r3, #250	; 0xfa
 800f154:	76bb      	strb	r3, [r7, #26]
 800f156:	e011      	b.n	800f17c <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f15c:	699b      	ldr	r3, [r3, #24]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00a      	beq.n	800f178 <tcp_process+0x3b4>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f166:	699b      	ldr	r3, [r3, #24]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	6910      	ldr	r0, [r2, #16]
 800f16c:	2200      	movs	r2, #0
 800f16e:	6879      	ldr	r1, [r7, #4]
 800f170:	4798      	blx	r3
 800f172:	4603      	mov	r3, r0
 800f174:	76bb      	strb	r3, [r7, #26]
 800f176:	e001      	b.n	800f17c <tcp_process+0x3b8>
 800f178:	23f0      	movs	r3, #240	; 0xf0
 800f17a:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800f17c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00a      	beq.n	800f19a <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800f184:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f188:	f113 0f0d 	cmn.w	r3, #13
 800f18c:	d002      	beq.n	800f194 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7fe f992 	bl	800d4b8 <tcp_abort>
          }
          return ERR_ABRT;
 800f194:	f06f 030c 	mvn.w	r3, #12
 800f198:	e1bd      	b.n	800f516 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fa42 	bl	800f624 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800f1a0:	4b6a      	ldr	r3, [pc, #424]	; (800f34c <tcp_process+0x588>)
 800f1a2:	881b      	ldrh	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d005      	beq.n	800f1b4 <tcp_process+0x3f0>
          recv_acked--;
 800f1a8:	4b68      	ldr	r3, [pc, #416]	; (800f34c <tcp_process+0x588>)
 800f1aa:	881b      	ldrh	r3, [r3, #0]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	4b66      	ldr	r3, [pc, #408]	; (800f34c <tcp_process+0x588>)
 800f1b2:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1b8:	005b      	lsls	r3, r3, #1
 800f1ba:	f241 121c 	movw	r2, #4380	; 0x111c
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	bf38      	it	cc
 800f1c2:	461a      	movcc	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	bf28      	it	cs
 800f1ce:	4613      	movcs	r3, r2
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800f1d8:	4b5d      	ldr	r3, [pc, #372]	; (800f350 <tcp_process+0x58c>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	f003 0320 	and.w	r3, r3, #32
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d034      	beq.n	800f24e <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	7e9b      	ldrb	r3, [r3, #26]
 800f1e8:	f043 0302 	orr.w	r3, r3, #2
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2207      	movs	r2, #7
 800f1f6:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800f1f8:	e029      	b.n	800f24e <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f1fa:	4b4b      	ldr	r3, [pc, #300]	; (800f328 <tcp_process+0x564>)
 800f1fc:	6818      	ldr	r0, [r3, #0]
 800f1fe:	4b4b      	ldr	r3, [pc, #300]	; (800f32c <tcp_process+0x568>)
 800f200:	881b      	ldrh	r3, [r3, #0]
 800f202:	461a      	mov	r2, r3
 800f204:	4b4a      	ldr	r3, [pc, #296]	; (800f330 <tcp_process+0x56c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f20a:	4b4a      	ldr	r3, [pc, #296]	; (800f334 <tcp_process+0x570>)
 800f20c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f20e:	885b      	ldrh	r3, [r3, #2]
 800f210:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f212:	4a48      	ldr	r2, [pc, #288]	; (800f334 <tcp_process+0x570>)
 800f214:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f216:	8812      	ldrh	r2, [r2, #0]
 800f218:	b292      	uxth	r2, r2
 800f21a:	9201      	str	r2, [sp, #4]
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	4b46      	ldr	r3, [pc, #280]	; (800f338 <tcp_process+0x574>)
 800f220:	4a46      	ldr	r2, [pc, #280]	; (800f33c <tcp_process+0x578>)
 800f222:	f001 ffcd 	bl	80111c0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800f226:	e16a      	b.n	800f4fe <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f228:	4b3e      	ldr	r3, [pc, #248]	; (800f324 <tcp_process+0x560>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	f003 0302 	and.w	r3, r3, #2
 800f230:	2b00      	cmp	r3, #0
 800f232:	f000 8164 	beq.w	800f4fe <tcp_process+0x73a>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23a:	1e5a      	subs	r2, r3, #1
 800f23c:	4b3c      	ldr	r3, [pc, #240]	; (800f330 <tcp_process+0x56c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	429a      	cmp	r2, r3
 800f242:	f040 815c 	bne.w	800f4fe <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f002 f866 	bl	8011318 <tcp_rexmit>
    break;
 800f24c:	e157      	b.n	800f4fe <tcp_process+0x73a>
 800f24e:	e156      	b.n	800f4fe <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 f9e7 	bl	800f624 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f256:	4b3e      	ldr	r3, [pc, #248]	; (800f350 <tcp_process+0x58c>)
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	f003 0320 	and.w	r3, r3, #32
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f000 814f 	beq.w	800f502 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	7e9b      	ldrb	r3, [r3, #26]
 800f268:	f043 0302 	orr.w	r3, r3, #2
 800f26c:	b2da      	uxtb	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2207      	movs	r2, #7
 800f276:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f278:	e143      	b.n	800f502 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 f9d2 	bl	800f624 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f280:	4b33      	ldr	r3, [pc, #204]	; (800f350 <tcp_process+0x58c>)
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	f003 0320 	and.w	r3, r3, #32
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d074      	beq.n	800f376 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f28c:	4b25      	ldr	r3, [pc, #148]	; (800f324 <tcp_process+0x560>)
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f003 0310 	and.w	r3, r3, #16
 800f294:	2b00      	cmp	r3, #0
 800f296:	d063      	beq.n	800f360 <tcp_process+0x59c>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f29c:	4b22      	ldr	r3, [pc, #136]	; (800f328 <tcp_process+0x564>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d15d      	bne.n	800f360 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d159      	bne.n	800f360 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	7e9b      	ldrb	r3, [r3, #26]
 800f2b0:	f043 0302 	orr.w	r3, r3, #2
 800f2b4:	b2da      	uxtb	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7fe fee6 	bl	800e08c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f2c0:	4b24      	ldr	r3, [pc, #144]	; (800f354 <tcp_process+0x590>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d105      	bne.n	800f2d6 <tcp_process+0x512>
 800f2ca:	4b22      	ldr	r3, [pc, #136]	; (800f354 <tcp_process+0x590>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	4a20      	ldr	r2, [pc, #128]	; (800f354 <tcp_process+0x590>)
 800f2d2:	6013      	str	r3, [r2, #0]
 800f2d4:	e013      	b.n	800f2fe <tcp_process+0x53a>
 800f2d6:	4b1f      	ldr	r3, [pc, #124]	; (800f354 <tcp_process+0x590>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	617b      	str	r3, [r7, #20]
 800f2dc:	e00c      	b.n	800f2f8 <tcp_process+0x534>
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d104      	bne.n	800f2f2 <tcp_process+0x52e>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	68da      	ldr	r2, [r3, #12]
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	60da      	str	r2, [r3, #12]
 800f2f0:	e005      	b.n	800f2fe <tcp_process+0x53a>
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	617b      	str	r3, [r7, #20]
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1ef      	bne.n	800f2de <tcp_process+0x51a>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	60da      	str	r2, [r3, #12]
 800f304:	4b14      	ldr	r3, [pc, #80]	; (800f358 <tcp_process+0x594>)
 800f306:	2201      	movs	r2, #1
 800f308:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	220a      	movs	r2, #10
 800f30e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f310:	4b12      	ldr	r3, [pc, #72]	; (800f35c <tcp_process+0x598>)
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	60da      	str	r2, [r3, #12]
 800f318:	4a10      	ldr	r2, [pc, #64]	; (800f35c <tcp_process+0x598>)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6013      	str	r3, [r2, #0]
 800f31e:	f002 f99f 	bl	8011660 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f322:	e0f0      	b.n	800f506 <tcp_process+0x742>
 800f324:	20004228 	.word	0x20004228
 800f328:	20004220 	.word	0x20004220
 800f32c:	20004226 	.word	0x20004226
 800f330:	2000421c 	.word	0x2000421c
 800f334:	2000420c 	.word	0x2000420c
 800f338:	200074d8 	.word	0x200074d8
 800f33c:	200074dc 	.word	0x200074dc
 800f340:	08016744 	.word	0x08016744
 800f344:	08016948 	.word	0x08016948
 800f348:	08016788 	.word	0x08016788
 800f34c:	20004224 	.word	0x20004224
 800f350:	20004229 	.word	0x20004229
 800f354:	2000ab54 	.word	0x2000ab54
 800f358:	2000ab50 	.word	0x2000ab50
 800f35c:	2000ab64 	.word	0x2000ab64
        tcp_ack_now(pcb);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	7e9b      	ldrb	r3, [r3, #26]
 800f364:	f043 0302 	orr.w	r3, r3, #2
 800f368:	b2da      	uxtb	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2208      	movs	r2, #8
 800f372:	751a      	strb	r2, [r3, #20]
    break;
 800f374:	e0c7      	b.n	800f506 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f376:	4b6a      	ldr	r3, [pc, #424]	; (800f520 <tcp_process+0x75c>)
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	f003 0310 	and.w	r3, r3, #16
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f000 80c1 	beq.w	800f506 <tcp_process+0x742>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f388:	4b66      	ldr	r3, [pc, #408]	; (800f524 <tcp_process+0x760>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	f040 80ba 	bne.w	800f506 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f396:	2b00      	cmp	r3, #0
 800f398:	f040 80b5 	bne.w	800f506 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2206      	movs	r2, #6
 800f3a0:	751a      	strb	r2, [r3, #20]
    break;
 800f3a2:	e0b0      	b.n	800f506 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 f93d 	bl	800f624 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f3aa:	4b5f      	ldr	r3, [pc, #380]	; (800f528 <tcp_process+0x764>)
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	f003 0320 	and.w	r3, r3, #32
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f000 80a9 	beq.w	800f50a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	7e9b      	ldrb	r3, [r3, #26]
 800f3bc:	f043 0302 	orr.w	r3, r3, #2
 800f3c0:	b2da      	uxtb	r2, r3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f7fe fe60 	bl	800e08c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f3cc:	4b57      	ldr	r3, [pc, #348]	; (800f52c <tcp_process+0x768>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d105      	bne.n	800f3e2 <tcp_process+0x61e>
 800f3d6:	4b55      	ldr	r3, [pc, #340]	; (800f52c <tcp_process+0x768>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	4a53      	ldr	r2, [pc, #332]	; (800f52c <tcp_process+0x768>)
 800f3de:	6013      	str	r3, [r2, #0]
 800f3e0:	e013      	b.n	800f40a <tcp_process+0x646>
 800f3e2:	4b52      	ldr	r3, [pc, #328]	; (800f52c <tcp_process+0x768>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	613b      	str	r3, [r7, #16]
 800f3e8:	e00c      	b.n	800f404 <tcp_process+0x640>
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d104      	bne.n	800f3fe <tcp_process+0x63a>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	68da      	ldr	r2, [r3, #12]
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	60da      	str	r2, [r3, #12]
 800f3fc:	e005      	b.n	800f40a <tcp_process+0x646>
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	613b      	str	r3, [r7, #16]
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1ef      	bne.n	800f3ea <tcp_process+0x626>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2200      	movs	r2, #0
 800f40e:	60da      	str	r2, [r3, #12]
 800f410:	4b47      	ldr	r3, [pc, #284]	; (800f530 <tcp_process+0x76c>)
 800f412:	2201      	movs	r2, #1
 800f414:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	220a      	movs	r2, #10
 800f41a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f41c:	4b45      	ldr	r3, [pc, #276]	; (800f534 <tcp_process+0x770>)
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	60da      	str	r2, [r3, #12]
 800f424:	4a43      	ldr	r2, [pc, #268]	; (800f534 <tcp_process+0x770>)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6013      	str	r3, [r2, #0]
 800f42a:	f002 f919 	bl	8011660 <tcp_timer_needed>
    }
    break;
 800f42e:	e06c      	b.n	800f50a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 f8f7 	bl	800f624 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f436:	4b3a      	ldr	r3, [pc, #232]	; (800f520 <tcp_process+0x75c>)
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	f003 0310 	and.w	r3, r3, #16
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d065      	beq.n	800f50e <tcp_process+0x74a>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f446:	4b37      	ldr	r3, [pc, #220]	; (800f524 <tcp_process+0x760>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d15f      	bne.n	800f50e <tcp_process+0x74a>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f452:	2b00      	cmp	r3, #0
 800f454:	d15b      	bne.n	800f50e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7fe fe18 	bl	800e08c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f45c:	4b33      	ldr	r3, [pc, #204]	; (800f52c <tcp_process+0x768>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	429a      	cmp	r2, r3
 800f464:	d105      	bne.n	800f472 <tcp_process+0x6ae>
 800f466:	4b31      	ldr	r3, [pc, #196]	; (800f52c <tcp_process+0x768>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	4a2f      	ldr	r2, [pc, #188]	; (800f52c <tcp_process+0x768>)
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	e013      	b.n	800f49a <tcp_process+0x6d6>
 800f472:	4b2e      	ldr	r3, [pc, #184]	; (800f52c <tcp_process+0x768>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	60fb      	str	r3, [r7, #12]
 800f478:	e00c      	b.n	800f494 <tcp_process+0x6d0>
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	429a      	cmp	r2, r3
 800f482:	d104      	bne.n	800f48e <tcp_process+0x6ca>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	68da      	ldr	r2, [r3, #12]
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	60da      	str	r2, [r3, #12]
 800f48c:	e005      	b.n	800f49a <tcp_process+0x6d6>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	60fb      	str	r3, [r7, #12]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1ef      	bne.n	800f47a <tcp_process+0x6b6>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	60da      	str	r2, [r3, #12]
 800f4a0:	4b23      	ldr	r3, [pc, #140]	; (800f530 <tcp_process+0x76c>)
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f4ac:	4b21      	ldr	r3, [pc, #132]	; (800f534 <tcp_process+0x770>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	60da      	str	r2, [r3, #12]
 800f4b4:	4a1f      	ldr	r2, [pc, #124]	; (800f534 <tcp_process+0x770>)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6013      	str	r3, [r2, #0]
 800f4ba:	f002 f8d1 	bl	8011660 <tcp_timer_needed>
    }
    break;
 800f4be:	e026      	b.n	800f50e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f8af 	bl	800f624 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f4c6:	4b16      	ldr	r3, [pc, #88]	; (800f520 <tcp_process+0x75c>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	f003 0310 	and.w	r3, r3, #16
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d01f      	beq.n	800f512 <tcp_process+0x74e>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4d6:	4b13      	ldr	r3, [pc, #76]	; (800f524 <tcp_process+0x760>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d119      	bne.n	800f512 <tcp_process+0x74e>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d115      	bne.n	800f512 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f4e6:	4b10      	ldr	r3, [pc, #64]	; (800f528 <tcp_process+0x764>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	f043 0310 	orr.w	r3, r3, #16
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	4b0d      	ldr	r3, [pc, #52]	; (800f528 <tcp_process+0x764>)
 800f4f2:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f4f4:	e00d      	b.n	800f512 <tcp_process+0x74e>
  default:
    break;
 800f4f6:	bf00      	nop
 800f4f8:	e00c      	b.n	800f514 <tcp_process+0x750>
    break;
 800f4fa:	bf00      	nop
 800f4fc:	e00a      	b.n	800f514 <tcp_process+0x750>
    break;
 800f4fe:	bf00      	nop
 800f500:	e008      	b.n	800f514 <tcp_process+0x750>
    break;
 800f502:	bf00      	nop
 800f504:	e006      	b.n	800f514 <tcp_process+0x750>
    break;
 800f506:	bf00      	nop
 800f508:	e004      	b.n	800f514 <tcp_process+0x750>
    break;
 800f50a:	bf00      	nop
 800f50c:	e002      	b.n	800f514 <tcp_process+0x750>
    break;
 800f50e:	bf00      	nop
 800f510:	e000      	b.n	800f514 <tcp_process+0x750>
    break;
 800f512:	bf00      	nop
  }
  return ERR_OK;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	3720      	adds	r7, #32
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	20004228 	.word	0x20004228
 800f524:	20004220 	.word	0x20004220
 800f528:	20004229 	.word	0x20004229
 800f52c:	2000ab54 	.word	0x2000ab54
 800f530:	2000ab50 	.word	0x2000ab50
 800f534:	2000ab64 	.word	0x2000ab64

0800f538 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f538:	b590      	push	{r4, r7, lr}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	899b      	ldrh	r3, [r3, #12]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fc f926 	bl	800b79c <lwip_htons>
 800f550:	4603      	mov	r3, r0
 800f552:	f003 0301 	and.w	r3, r3, #1
 800f556:	2b00      	cmp	r3, #0
 800f558:	d027      	beq.n	800f5aa <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f55a:	6838      	ldr	r0, [r7, #0]
 800f55c:	f7fe fbed 	bl	800dd3a <tcp_segs_free>
    next = NULL;
 800f560:	2300      	movs	r3, #0
 800f562:	603b      	str	r3, [r7, #0]
 800f564:	e055      	b.n	800f612 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	899b      	ldrh	r3, [r3, #12]
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fc f914 	bl	800b79c <lwip_htons>
 800f574:	4603      	mov	r3, r0
 800f576:	f003 0301 	and.w	r3, r3, #1
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00d      	beq.n	800f59a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	899b      	ldrh	r3, [r3, #12]
 800f584:	b29c      	uxth	r4, r3
 800f586:	2001      	movs	r0, #1
 800f588:	f7fc f908 	bl	800b79c <lwip_htons>
 800f58c:	4603      	mov	r3, r0
 800f58e:	461a      	mov	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	4322      	orrs	r2, r4
 800f596:	b292      	uxth	r2, r2
 800f598:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7fe fbdc 	bl	800dd62 <tcp_seg_free>
    while (next &&
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00e      	beq.n	800f5ce <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	891b      	ldrh	r3, [r3, #8]
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	4b1a      	ldr	r3, [pc, #104]	; (800f620 <tcp_oos_insert_segment+0xe8>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	441a      	add	r2, r3
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	6839      	ldr	r1, [r7, #0]
 800f5c4:	8909      	ldrh	r1, [r1, #8]
 800f5c6:	440b      	add	r3, r1
 800f5c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dacb      	bge.n	800f566 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d01e      	beq.n	800f612 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	891b      	ldrh	r3, [r3, #8]
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4b11      	ldr	r3, [pc, #68]	; (800f620 <tcp_oos_insert_segment+0xe8>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	441a      	add	r2, r3
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	dd12      	ble.n	800f612 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	4b0a      	ldr	r3, [pc, #40]	; (800f620 <tcp_oos_insert_segment+0xe8>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	685a      	ldr	r2, [r3, #4]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	891b      	ldrh	r3, [r3, #8]
 800f60a:	4619      	mov	r1, r3
 800f60c:	4610      	mov	r0, r2
 800f60e:	f7fd f8e1 	bl	800c7d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	683a      	ldr	r2, [r7, #0]
 800f616:	601a      	str	r2, [r3, #0]
}
 800f618:	bf00      	nop
 800f61a:	3714      	adds	r7, #20
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd90      	pop	{r4, r7, pc}
 800f620:	2000421c 	.word	0x2000421c

0800f624 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f626:	b08d      	sub	sp, #52	; 0x34
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f62c:	2300      	movs	r3, #0
 800f62e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	7d1b      	ldrb	r3, [r3, #20]
 800f634:	2b03      	cmp	r3, #3
 800f636:	d806      	bhi.n	800f646 <tcp_receive+0x22>
 800f638:	4ba6      	ldr	r3, [pc, #664]	; (800f8d4 <tcp_receive+0x2b0>)
 800f63a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f63e:	49a6      	ldr	r1, [pc, #664]	; (800f8d8 <tcp_receive+0x2b4>)
 800f640:	48a6      	ldr	r0, [pc, #664]	; (800f8dc <tcp_receive+0x2b8>)
 800f642:	f005 fab1 	bl	8014ba8 <iprintf>

  if (flags & TCP_ACK) {
 800f646:	4ba6      	ldr	r3, [pc, #664]	; (800f8e0 <tcp_receive+0x2bc>)
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	f003 0310 	and.w	r3, r3, #16
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f000 82bf 	beq.w	800fbd2 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f65a:	461a      	mov	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f660:	4413      	add	r3, r2
 800f662:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f668:	4b9e      	ldr	r3, [pc, #632]	; (800f8e4 <tcp_receive+0x2c0>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	1ad3      	subs	r3, r2, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	db1b      	blt.n	800f6aa <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f676:	4b9b      	ldr	r3, [pc, #620]	; (800f8e4 <tcp_receive+0x2c0>)
 800f678:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d106      	bne.n	800f68c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f682:	4b99      	ldr	r3, [pc, #612]	; (800f8e8 <tcp_receive+0x2c4>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	1ad3      	subs	r3, r2, r3
 800f688:	2b00      	cmp	r3, #0
 800f68a:	db0e      	blt.n	800f6aa <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f690:	4b95      	ldr	r3, [pc, #596]	; (800f8e8 <tcp_receive+0x2c4>)
 800f692:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f694:	429a      	cmp	r2, r3
 800f696:	d141      	bne.n	800f71c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f698:	4b94      	ldr	r3, [pc, #592]	; (800f8ec <tcp_receive+0x2c8>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	89db      	ldrh	r3, [r3, #14]
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d938      	bls.n	800f71c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f6aa:	4b90      	ldr	r3, [pc, #576]	; (800f8ec <tcp_receive+0x2c8>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	89db      	ldrh	r3, [r3, #14]
 800f6b0:	b29a      	uxth	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d205      	bcs.n	800f6d4 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f6d4:	4b83      	ldr	r3, [pc, #524]	; (800f8e4 <tcp_receive+0x2c0>)
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f6dc:	4b82      	ldr	r3, [pc, #520]	; (800f8e8 <tcp_receive+0x2c4>)
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10d      	bne.n	800f70a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d111      	bne.n	800f71c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2201      	movs	r2, #1
 800f704:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f708:	e008      	b.n	800f71c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f710:	2b00      	cmp	r3, #0
 800f712:	d003      	beq.n	800f71c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f71c:	4b72      	ldr	r3, [pc, #456]	; (800f8e8 <tcp_receive+0x2c4>)
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f724:	1ad3      	subs	r3, r2, r3
 800f726:	2b00      	cmp	r3, #0
 800f728:	dc53      	bgt.n	800f7d2 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f72a:	4b71      	ldr	r3, [pc, #452]	; (800f8f0 <tcp_receive+0x2cc>)
 800f72c:	881b      	ldrh	r3, [r3, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d146      	bne.n	800f7c0 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f73c:	4413      	add	r3, r2
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	429a      	cmp	r2, r3
 800f742:	d13d      	bne.n	800f7c0 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	db38      	blt.n	800f7c0 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f752:	4b65      	ldr	r3, [pc, #404]	; (800f8e8 <tcp_receive+0x2c4>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	429a      	cmp	r2, r3
 800f758:	d132      	bne.n	800f7c0 <tcp_receive+0x19c>
              found_dupack = 1;
 800f75a:	2301      	movs	r3, #1
 800f75c:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f764:	2bff      	cmp	r3, #255	; 0xff
 800f766:	d007      	beq.n	800f778 <tcp_receive+0x154>
                ++pcb->dupacks;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f76e:	3301      	adds	r3, #1
 800f770:	b2da      	uxtb	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f77e:	2b03      	cmp	r3, #3
 800f780:	d916      	bls.n	800f7b0 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f78c:	4413      	add	r3, r2
 800f78e:	b29a      	uxth	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f796:	429a      	cmp	r2, r3
 800f798:	d912      	bls.n	800f7c0 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7a4:	4413      	add	r3, r2
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f7ae:	e007      	b.n	800f7c0 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	d102      	bne.n	800f7c0 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f001 fdfc 	bl	80113b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f040 8169 	bne.w	800fa9a <tcp_receive+0x476>
        pcb->dupacks = 0;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7d0:	e163      	b.n	800fa9a <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f7d2:	4b45      	ldr	r3, [pc, #276]	; (800f8e8 <tcp_receive+0x2c4>)
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7da:	1ad3      	subs	r3, r2, r3
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f2c0 8107 	blt.w	800f9f2 <tcp_receive+0x3ce>
 800f7e4:	4b40      	ldr	r3, [pc, #256]	; (800f8e8 <tcp_receive+0x2c4>)
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ec:	1ad3      	subs	r3, r2, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f300 80ff 	bgt.w	800f9f2 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	7e9b      	ldrb	r3, [r3, #26]
 800f7f8:	f003 0304 	and.w	r3, r3, #4
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00c      	beq.n	800f81a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	7e9b      	ldrb	r3, [r3, #26]
 800f804:	f023 0304 	bic.w	r3, r3, #4
 800f808:	b2da      	uxtb	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f828:	10db      	asrs	r3, r3, #3
 800f82a:	b21b      	sxth	r3, r3
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f834:	b29b      	uxth	r3, r3
 800f836:	4413      	add	r3, r2
 800f838:	b29b      	uxth	r3, r3
 800f83a:	b21a      	sxth	r2, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f84a:	4b27      	ldr	r3, [pc, #156]	; (800f8e8 <tcp_receive+0x2c4>)
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	7d1b      	ldrb	r3, [r3, #20]
 800f856:	2b03      	cmp	r3, #3
 800f858:	f240 8094 	bls.w	800f984 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f868:	429a      	cmp	r2, r3
 800f86a:	d216      	bcs.n	800f89a <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f876:	4413      	add	r3, r2
 800f878:	b29a      	uxth	r2, r3
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f880:	429a      	cmp	r2, r3
 800f882:	d97f      	bls.n	800f984 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f88e:	4413      	add	r3, r2
 800f890:	b29a      	uxth	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f898:	e074      	b.n	800f984 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8aa:	fb03 f301 	mul.w	r3, r3, r1
 800f8ae:	6879      	ldr	r1, [r7, #4]
 800f8b0:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800f8b4:	fb93 f3f1 	sdiv	r3, r3, r1
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	4413      	add	r3, r2
 800f8bc:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8c4:	8a7a      	ldrh	r2, [r7, #18]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d95c      	bls.n	800f984 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	8a7a      	ldrh	r2, [r7, #18]
 800f8ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800f8d2:	e057      	b.n	800f984 <tcp_receive+0x360>
 800f8d4:	08016744 	.word	0x08016744
 800f8d8:	08016968 	.word	0x08016968
 800f8dc:	08016788 	.word	0x08016788
 800f8e0:	20004228 	.word	0x20004228
 800f8e4:	2000421c 	.word	0x2000421c
 800f8e8:	20004220 	.word	0x20004220
 800f8ec:	2000420c 	.word	0x2000420c
 800f8f0:	20004226 	.word	0x20004226
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fd f96e 	bl	800cbf0 <pbuf_clen>
 800f914:	4603      	mov	r3, r0
 800f916:	429c      	cmp	r4, r3
 800f918:	d206      	bcs.n	800f928 <tcp_receive+0x304>
 800f91a:	4b70      	ldr	r3, [pc, #448]	; (800fadc <tcp_receive+0x4b8>)
 800f91c:	f240 429e 	movw	r2, #1182	; 0x49e
 800f920:	496f      	ldr	r1, [pc, #444]	; (800fae0 <tcp_receive+0x4bc>)
 800f922:	4870      	ldr	r0, [pc, #448]	; (800fae4 <tcp_receive+0x4c0>)
 800f924:	f005 f940 	bl	8014ba8 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800f928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fd f95f 	bl	800cbf0 <pbuf_clen>
 800f932:	4603      	mov	r3, r0
 800f934:	461a      	mov	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f93c:	1a9b      	subs	r3, r3, r2
 800f93e:	b29a      	uxth	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800f946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f948:	891a      	ldrh	r2, [r3, #8]
 800f94a:	4b67      	ldr	r3, [pc, #412]	; (800fae8 <tcp_receive+0x4c4>)
 800f94c:	881b      	ldrh	r3, [r3, #0]
 800f94e:	4413      	add	r3, r2
 800f950:	b29a      	uxth	r2, r3
 800f952:	4b65      	ldr	r3, [pc, #404]	; (800fae8 <tcp_receive+0x4c4>)
 800f954:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800f956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f958:	f7fe fa03 	bl	800dd62 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00e      	beq.n	800f984 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d10a      	bne.n	800f984 <tcp_receive+0x360>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f972:	2b00      	cmp	r3, #0
 800f974:	d106      	bne.n	800f984 <tcp_receive+0x360>
 800f976:	4b59      	ldr	r3, [pc, #356]	; (800fadc <tcp_receive+0x4b8>)
 800f978:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800f97c:	495b      	ldr	r1, [pc, #364]	; (800faec <tcp_receive+0x4c8>)
 800f97e:	4859      	ldr	r0, [pc, #356]	; (800fae4 <tcp_receive+0x4c0>)
 800f980:	f005 f912 	bl	8014ba8 <iprintf>
      while (pcb->unacked != NULL &&
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d022      	beq.n	800f9d2 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	4618      	mov	r0, r3
 800f996:	f7fb ff0f 	bl	800b7b8 <lwip_htonl>
 800f99a:	4604      	mov	r4, r0
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a0:	891b      	ldrh	r3, [r3, #8]
 800f9a2:	461d      	mov	r5, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	899b      	ldrh	r3, [r3, #12]
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fb fef4 	bl	800b79c <lwip_htons>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	f003 0303 	and.w	r3, r3, #3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d001      	beq.n	800f9c2 <tcp_receive+0x39e>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	e000      	b.n	800f9c4 <tcp_receive+0x3a0>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	442b      	add	r3, r5
 800f9c6:	18e2      	adds	r2, r4, r3
 800f9c8:	4b49      	ldr	r3, [pc, #292]	; (800faf0 <tcp_receive+0x4cc>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	dd90      	ble.n	800f8f4 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d104      	bne.n	800f9e4 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9e0:	861a      	strh	r2, [r3, #48]	; 0x30
 800f9e2:	e002      	b.n	800f9ea <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	76da      	strb	r2, [r3, #27]
 800f9f0:	e002      	b.n	800f9f8 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f001 f8fe 	bl	8010bf4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800f9f8:	e04f      	b.n	800fa9a <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d103      	bne.n	800fa1a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2200      	movs	r2, #0
 800fa16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fd f8e3 	bl	800cbf0 <pbuf_clen>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	429c      	cmp	r4, r3
 800fa2e:	d206      	bcs.n	800fa3e <tcp_receive+0x41a>
 800fa30:	4b2a      	ldr	r3, [pc, #168]	; (800fadc <tcp_receive+0x4b8>)
 800fa32:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fa36:	492a      	ldr	r1, [pc, #168]	; (800fae0 <tcp_receive+0x4bc>)
 800fa38:	482a      	ldr	r0, [pc, #168]	; (800fae4 <tcp_receive+0x4c0>)
 800fa3a:	f005 f8b5 	bl	8014ba8 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fd f8d4 	bl	800cbf0 <pbuf_clen>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa52:	1a9b      	subs	r3, r3, r2
 800fa54:	b29a      	uxth	r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800fa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5e:	891a      	ldrh	r2, [r3, #8]
 800fa60:	4b21      	ldr	r3, [pc, #132]	; (800fae8 <tcp_receive+0x4c4>)
 800fa62:	881b      	ldrh	r3, [r3, #0]
 800fa64:	4413      	add	r3, r2
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	4b1f      	ldr	r3, [pc, #124]	; (800fae8 <tcp_receive+0x4c4>)
 800fa6a:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800fa6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa6e:	f7fe f978 	bl	800dd62 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d00e      	beq.n	800fa9a <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d10a      	bne.n	800fa9a <tcp_receive+0x476>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d106      	bne.n	800fa9a <tcp_receive+0x476>
 800fa8c:	4b13      	ldr	r3, [pc, #76]	; (800fadc <tcp_receive+0x4b8>)
 800fa8e:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800fa92:	4916      	ldr	r1, [pc, #88]	; (800faec <tcp_receive+0x4c8>)
 800fa94:	4813      	ldr	r0, [pc, #76]	; (800fae4 <tcp_receive+0x4c0>)
 800fa96:	f005 f887 	bl	8014ba8 <iprintf>
    while (pcb->unsent != NULL &&
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d036      	beq.n	800fb10 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800faa2:	4b13      	ldr	r3, [pc, #76]	; (800faf0 <tcp_receive+0x4cc>)
 800faa4:	681c      	ldr	r4, [r3, #0]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fb fe82 	bl	800b7b8 <lwip_htonl>
 800fab4:	4605      	mov	r5, r0
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800faba:	891b      	ldrh	r3, [r3, #8]
 800fabc:	461e      	mov	r6, r3
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	899b      	ldrh	r3, [r3, #12]
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fb fe67 	bl	800b79c <lwip_htons>
 800face:	4603      	mov	r3, r0
 800fad0:	f003 0303 	and.w	r3, r3, #3
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00d      	beq.n	800faf4 <tcp_receive+0x4d0>
 800fad8:	2301      	movs	r3, #1
 800fada:	e00c      	b.n	800faf6 <tcp_receive+0x4d2>
 800fadc:	08016744 	.word	0x08016744
 800fae0:	08016984 	.word	0x08016984
 800fae4:	08016788 	.word	0x08016788
 800fae8:	20004224 	.word	0x20004224
 800faec:	080169ac 	.word	0x080169ac
 800faf0:	20004220 	.word	0x20004220
 800faf4:	2300      	movs	r3, #0
 800faf6:	4433      	add	r3, r6
 800faf8:	442b      	add	r3, r5
 800fafa:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	db07      	blt.n	800fb10 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fb00:	4b8d      	ldr	r3, [pc, #564]	; (800fd38 <tcp_receive+0x714>)
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f77f af75 	ble.w	800f9fa <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb16:	4b89      	ldr	r3, [pc, #548]	; (800fd3c <tcp_receive+0x718>)
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	4413      	add	r3, r2
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d052      	beq.n	800fbd2 <tcp_receive+0x5ae>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb30:	4b81      	ldr	r3, [pc, #516]	; (800fd38 <tcp_receive+0x714>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	da4b      	bge.n	800fbd2 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fb3a:	4b81      	ldr	r3, [pc, #516]	; (800fd40 <tcp_receive+0x71c>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	1ad3      	subs	r3, r2, r3
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800fb4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb54:	10db      	asrs	r3, r3, #3
 800fb56:	b21b      	sxth	r3, r3
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	1ad3      	subs	r3, r2, r3
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb6a:	4413      	add	r3, r2
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	b21a      	sxth	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fb74:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	da03      	bge.n	800fb84 <tcp_receive+0x560>
        m = -m;
 800fb7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb7e:	425b      	negs	r3, r3
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800fb84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb8c:	109b      	asrs	r3, r3, #2
 800fb8e:	b21b      	sxth	r3, r3
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb9e:	b29a      	uxth	r2, r3
 800fba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fba2:	4413      	add	r3, r2
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	b21a      	sxth	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fbb2:	10db      	asrs	r3, r3, #3
 800fbb4:	b21b      	sxth	r3, r3
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	4413      	add	r3, r2
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	b21a      	sxth	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fbd2:	4b5c      	ldr	r3, [pc, #368]	; (800fd44 <tcp_receive+0x720>)
 800fbd4:	881b      	ldrh	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f000 84f1 	beq.w	80105be <tcp_receive+0xf9a>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	7d1b      	ldrb	r3, [r3, #20]
 800fbe0:	2b06      	cmp	r3, #6
 800fbe2:	f200 84ec 	bhi.w	80105be <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbea:	4b57      	ldr	r3, [pc, #348]	; (800fd48 <tcp_receive+0x724>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	3b01      	subs	r3, #1
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	f2c0 80b8 	blt.w	800fd68 <tcp_receive+0x744>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbfc:	4b51      	ldr	r3, [pc, #324]	; (800fd44 <tcp_receive+0x720>)
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	4619      	mov	r1, r3
 800fc02:	4b51      	ldr	r3, [pc, #324]	; (800fd48 <tcp_receive+0x724>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	440b      	add	r3, r1
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f300 80ab 	bgt.w	800fd68 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fc12:	4b4e      	ldr	r3, [pc, #312]	; (800fd4c <tcp_receive+0x728>)
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc1c:	4b4a      	ldr	r3, [pc, #296]	; (800fd48 <tcp_receive+0x724>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	1ad3      	subs	r3, r2, r3
 800fc22:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fc24:	4b49      	ldr	r3, [pc, #292]	; (800fd4c <tcp_receive+0x728>)
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d106      	bne.n	800fc3a <tcp_receive+0x616>
 800fc2c:	4b48      	ldr	r3, [pc, #288]	; (800fd50 <tcp_receive+0x72c>)
 800fc2e:	f240 523c 	movw	r2, #1340	; 0x53c
 800fc32:	4948      	ldr	r1, [pc, #288]	; (800fd54 <tcp_receive+0x730>)
 800fc34:	4848      	ldr	r0, [pc, #288]	; (800fd58 <tcp_receive+0x734>)
 800fc36:	f004 ffb7 	bl	8014ba8 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fc40:	4293      	cmp	r3, r2
 800fc42:	dd06      	ble.n	800fc52 <tcp_receive+0x62e>
 800fc44:	4b42      	ldr	r3, [pc, #264]	; (800fd50 <tcp_receive+0x72c>)
 800fc46:	f240 523d 	movw	r2, #1341	; 0x53d
 800fc4a:	4944      	ldr	r1, [pc, #272]	; (800fd5c <tcp_receive+0x738>)
 800fc4c:	4842      	ldr	r0, [pc, #264]	; (800fd58 <tcp_receive+0x734>)
 800fc4e:	f004 ffab 	bl	8014ba8 <iprintf>
      if (inseg.p->len < off) {
 800fc52:	4b3e      	ldr	r3, [pc, #248]	; (800fd4c <tcp_receive+0x728>)
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	895b      	ldrh	r3, [r3, #10]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	dd3e      	ble.n	800fcde <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fc60:	4b3a      	ldr	r3, [pc, #232]	; (800fd4c <tcp_receive+0x728>)
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	891b      	ldrh	r3, [r3, #8]
 800fc66:	461a      	mov	r2, r3
 800fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	dd06      	ble.n	800fc7c <tcp_receive+0x658>
 800fc6e:	4b38      	ldr	r3, [pc, #224]	; (800fd50 <tcp_receive+0x72c>)
 800fc70:	f240 523f 	movw	r2, #1343	; 0x53f
 800fc74:	493a      	ldr	r1, [pc, #232]	; (800fd60 <tcp_receive+0x73c>)
 800fc76:	4838      	ldr	r0, [pc, #224]	; (800fd58 <tcp_receive+0x734>)
 800fc78:	f004 ff96 	bl	8014ba8 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fc7c:	4b33      	ldr	r3, [pc, #204]	; (800fd4c <tcp_receive+0x728>)
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	891a      	ldrh	r2, [r3, #8]
 800fc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800fc8a:	e00e      	b.n	800fcaa <tcp_receive+0x686>
          off -= p->len;
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	895b      	ldrh	r3, [r3, #10]
 800fc90:	461a      	mov	r2, r3
 800fc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc94:	1a9b      	subs	r3, r3, r2
 800fc96:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	8a3a      	ldrh	r2, [r7, #16]
 800fc9c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	2200      	movs	r2, #0
 800fca2:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	895b      	ldrh	r3, [r3, #10]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	dcea      	bgt.n	800fc8c <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	425b      	negs	r3, r3
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	b21b      	sxth	r3, r3
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	69b8      	ldr	r0, [r7, #24]
 800fcc4:	f7fc fed6 	bl	800ca74 <pbuf_header>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d01c      	beq.n	800fd08 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fcce:	4b20      	ldr	r3, [pc, #128]	; (800fd50 <tcp_receive+0x72c>)
 800fcd0:	f240 524c 	movw	r2, #1356	; 0x54c
 800fcd4:	4923      	ldr	r1, [pc, #140]	; (800fd64 <tcp_receive+0x740>)
 800fcd6:	4820      	ldr	r0, [pc, #128]	; (800fd58 <tcp_receive+0x734>)
 800fcd8:	f004 ff66 	bl	8014ba8 <iprintf>
 800fcdc:	e014      	b.n	800fd08 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800fcde:	4b1b      	ldr	r3, [pc, #108]	; (800fd4c <tcp_receive+0x728>)
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fce4:	b292      	uxth	r2, r2
 800fce6:	4252      	negs	r2, r2
 800fce8:	b292      	uxth	r2, r2
 800fcea:	b212      	sxth	r2, r2
 800fcec:	4611      	mov	r1, r2
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fc fec0 	bl	800ca74 <pbuf_header>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d006      	beq.n	800fd08 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fcfa:	4b15      	ldr	r3, [pc, #84]	; (800fd50 <tcp_receive+0x72c>)
 800fcfc:	f240 5251 	movw	r2, #1361	; 0x551
 800fd00:	4918      	ldr	r1, [pc, #96]	; (800fd64 <tcp_receive+0x740>)
 800fd02:	4815      	ldr	r0, [pc, #84]	; (800fd58 <tcp_receive+0x734>)
 800fd04:	f004 ff50 	bl	8014ba8 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800fd08:	4b10      	ldr	r3, [pc, #64]	; (800fd4c <tcp_receive+0x728>)
 800fd0a:	891a      	ldrh	r2, [r3, #8]
 800fd0c:	4b0e      	ldr	r3, [pc, #56]	; (800fd48 <tcp_receive+0x724>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	b299      	uxth	r1, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	1acb      	subs	r3, r1, r3
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	4413      	add	r3, r2
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	4b0a      	ldr	r3, [pc, #40]	; (800fd4c <tcp_receive+0x728>)
 800fd22:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd28:	4a07      	ldr	r2, [pc, #28]	; (800fd48 <tcp_receive+0x724>)
 800fd2a:	6013      	str	r3, [r2, #0]
 800fd2c:	4b07      	ldr	r3, [pc, #28]	; (800fd4c <tcp_receive+0x728>)
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	4a05      	ldr	r2, [pc, #20]	; (800fd48 <tcp_receive+0x724>)
 800fd32:	6812      	ldr	r2, [r2, #0]
 800fd34:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fd36:	e025      	b.n	800fd84 <tcp_receive+0x760>
 800fd38:	20004220 	.word	0x20004220
 800fd3c:	20004224 	.word	0x20004224
 800fd40:	2000ab58 	.word	0x2000ab58
 800fd44:	20004226 	.word	0x20004226
 800fd48:	2000421c 	.word	0x2000421c
 800fd4c:	200041fc 	.word	0x200041fc
 800fd50:	08016744 	.word	0x08016744
 800fd54:	080169cc 	.word	0x080169cc
 800fd58:	08016788 	.word	0x08016788
 800fd5c:	080169dc 	.word	0x080169dc
 800fd60:	080169ec 	.word	0x080169ec
 800fd64:	080169fc 	.word	0x080169fc
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fd68:	4b87      	ldr	r3, [pc, #540]	; (800ff88 <tcp_receive+0x964>)
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	da06      	bge.n	800fd84 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	7e9b      	ldrb	r3, [r3, #26]
 800fd7a:	f043 0302 	orr.w	r3, r3, #2
 800fd7e:	b2da      	uxtb	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd84:	4b80      	ldr	r3, [pc, #512]	; (800ff88 <tcp_receive+0x964>)
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f2c0 8410 	blt.w	80105b4 <tcp_receive+0xf90>
 800fd94:	4b7c      	ldr	r3, [pc, #496]	; (800ff88 <tcp_receive+0x964>)
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	6879      	ldr	r1, [r7, #4]
 800fd9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fda0:	440b      	add	r3, r1
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	3301      	adds	r3, #1
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f300 8404 	bgt.w	80105b4 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdb0:	4b75      	ldr	r3, [pc, #468]	; (800ff88 <tcp_receive+0x964>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	f040 8287 	bne.w	80102c8 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fdba:	4b74      	ldr	r3, [pc, #464]	; (800ff8c <tcp_receive+0x968>)
 800fdbc:	891c      	ldrh	r4, [r3, #8]
 800fdbe:	4b73      	ldr	r3, [pc, #460]	; (800ff8c <tcp_receive+0x968>)
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	899b      	ldrh	r3, [r3, #12]
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fb fce8 	bl	800b79c <lwip_htons>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	f003 0303 	and.w	r3, r3, #3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d001      	beq.n	800fdda <tcp_receive+0x7b6>
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e000      	b.n	800fddc <tcp_receive+0x7b8>
 800fdda:	2300      	movs	r3, #0
 800fddc:	4423      	add	r3, r4
 800fdde:	b29a      	uxth	r2, r3
 800fde0:	4b6b      	ldr	r3, [pc, #428]	; (800ff90 <tcp_receive+0x96c>)
 800fde2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fde8:	4b69      	ldr	r3, [pc, #420]	; (800ff90 <tcp_receive+0x96c>)
 800fdea:	881b      	ldrh	r3, [r3, #0]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d26e      	bcs.n	800fece <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fdf0:	4b66      	ldr	r3, [pc, #408]	; (800ff8c <tcp_receive+0x968>)
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	899b      	ldrh	r3, [r3, #12]
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fb fccf 	bl	800b79c <lwip_htons>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	f003 0301 	and.w	r3, r3, #1
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d01b      	beq.n	800fe40 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fe08:	4b60      	ldr	r3, [pc, #384]	; (800ff8c <tcp_receive+0x968>)
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	899b      	ldrh	r3, [r3, #12]
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fe14:	b29c      	uxth	r4, r3
 800fe16:	4b5d      	ldr	r3, [pc, #372]	; (800ff8c <tcp_receive+0x968>)
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	899b      	ldrh	r3, [r3, #12]
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fb fcbc 	bl	800b79c <lwip_htons>
 800fe24:	4603      	mov	r3, r0
 800fe26:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fb fcb5 	bl	800b79c <lwip_htons>
 800fe32:	4603      	mov	r3, r0
 800fe34:	461a      	mov	r2, r3
 800fe36:	4b55      	ldr	r3, [pc, #340]	; (800ff8c <tcp_receive+0x968>)
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	4322      	orrs	r2, r4
 800fe3c:	b292      	uxth	r2, r2
 800fe3e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe44:	4b51      	ldr	r3, [pc, #324]	; (800ff8c <tcp_receive+0x968>)
 800fe46:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fe48:	4b50      	ldr	r3, [pc, #320]	; (800ff8c <tcp_receive+0x968>)
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	899b      	ldrh	r3, [r3, #12]
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7fb fca3 	bl	800b79c <lwip_htons>
 800fe56:	4603      	mov	r3, r0
 800fe58:	f003 0302 	and.w	r3, r3, #2
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d005      	beq.n	800fe6c <tcp_receive+0x848>
            inseg.len -= 1;
 800fe60:	4b4a      	ldr	r3, [pc, #296]	; (800ff8c <tcp_receive+0x968>)
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	3b01      	subs	r3, #1
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	4b48      	ldr	r3, [pc, #288]	; (800ff8c <tcp_receive+0x968>)
 800fe6a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fe6c:	4b47      	ldr	r3, [pc, #284]	; (800ff8c <tcp_receive+0x968>)
 800fe6e:	685a      	ldr	r2, [r3, #4]
 800fe70:	4b46      	ldr	r3, [pc, #280]	; (800ff8c <tcp_receive+0x968>)
 800fe72:	891b      	ldrh	r3, [r3, #8]
 800fe74:	4619      	mov	r1, r3
 800fe76:	4610      	mov	r0, r2
 800fe78:	f7fc fcac 	bl	800c7d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fe7c:	4b43      	ldr	r3, [pc, #268]	; (800ff8c <tcp_receive+0x968>)
 800fe7e:	891c      	ldrh	r4, [r3, #8]
 800fe80:	4b42      	ldr	r3, [pc, #264]	; (800ff8c <tcp_receive+0x968>)
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	899b      	ldrh	r3, [r3, #12]
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7fb fc87 	bl	800b79c <lwip_htons>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	f003 0303 	and.w	r3, r3, #3
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d001      	beq.n	800fe9c <tcp_receive+0x878>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e000      	b.n	800fe9e <tcp_receive+0x87a>
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	4423      	add	r3, r4
 800fea0:	b29a      	uxth	r2, r3
 800fea2:	4b3b      	ldr	r3, [pc, #236]	; (800ff90 <tcp_receive+0x96c>)
 800fea4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fea6:	4b3a      	ldr	r3, [pc, #232]	; (800ff90 <tcp_receive+0x96c>)
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	4b36      	ldr	r3, [pc, #216]	; (800ff88 <tcp_receive+0x964>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	441a      	add	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb6:	6879      	ldr	r1, [r7, #4]
 800feb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800feba:	440b      	add	r3, r1
 800febc:	429a      	cmp	r2, r3
 800febe:	d006      	beq.n	800fece <tcp_receive+0x8aa>
 800fec0:	4b34      	ldr	r3, [pc, #208]	; (800ff94 <tcp_receive+0x970>)
 800fec2:	f240 527f 	movw	r2, #1407	; 0x57f
 800fec6:	4934      	ldr	r1, [pc, #208]	; (800ff98 <tcp_receive+0x974>)
 800fec8:	4834      	ldr	r0, [pc, #208]	; (800ff9c <tcp_receive+0x978>)
 800feca:	f004 fe6d 	bl	8014ba8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	f000 80e1 	beq.w	801009a <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fed8:	4b2c      	ldr	r3, [pc, #176]	; (800ff8c <tcp_receive+0x968>)
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	899b      	ldrh	r3, [r3, #12]
 800fede:	b29b      	uxth	r3, r3
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fb fc5b 	bl	800b79c <lwip_htons>
 800fee6:	4603      	mov	r3, r0
 800fee8:	f003 0301 	and.w	r3, r3, #1
 800feec:	2b00      	cmp	r3, #0
 800feee:	d010      	beq.n	800ff12 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fef0:	e00a      	b.n	800ff08 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fef6:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800ff02:	68b8      	ldr	r0, [r7, #8]
 800ff04:	f7fd ff2d 	bl	800dd62 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1f0      	bne.n	800fef2 <tcp_receive+0x8ce>
 800ff10:	e0c3      	b.n	801009a <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff16:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ff18:	e04f      	b.n	800ffba <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ff1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	899b      	ldrh	r3, [r3, #12]
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fb fc3a 	bl	800b79c <lwip_htons>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	f003 0301 	and.w	r3, r3, #1
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d03b      	beq.n	800ffaa <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ff32:	4b16      	ldr	r3, [pc, #88]	; (800ff8c <tcp_receive+0x968>)
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	899b      	ldrh	r3, [r3, #12]
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fb fc2e 	bl	800b79c <lwip_htons>
 800ff40:	4603      	mov	r3, r0
 800ff42:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d12f      	bne.n	800ffaa <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ff4a:	4b10      	ldr	r3, [pc, #64]	; (800ff8c <tcp_receive+0x968>)
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	899b      	ldrh	r3, [r3, #12]
 800ff50:	b29c      	uxth	r4, r3
 800ff52:	2001      	movs	r0, #1
 800ff54:	f7fb fc22 	bl	800b79c <lwip_htons>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	4b0b      	ldr	r3, [pc, #44]	; (800ff8c <tcp_receive+0x968>)
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	4322      	orrs	r2, r4
 800ff62:	b292      	uxth	r2, r2
 800ff64:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ff66:	4b09      	ldr	r3, [pc, #36]	; (800ff8c <tcp_receive+0x968>)
 800ff68:	891c      	ldrh	r4, [r3, #8]
 800ff6a:	4b08      	ldr	r3, [pc, #32]	; (800ff8c <tcp_receive+0x968>)
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	899b      	ldrh	r3, [r3, #12]
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fb fc12 	bl	800b79c <lwip_htons>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	f003 0303 	and.w	r3, r3, #3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00e      	beq.n	800ffa0 <tcp_receive+0x97c>
 800ff82:	2301      	movs	r3, #1
 800ff84:	e00d      	b.n	800ffa2 <tcp_receive+0x97e>
 800ff86:	bf00      	nop
 800ff88:	2000421c 	.word	0x2000421c
 800ff8c:	200041fc 	.word	0x200041fc
 800ff90:	20004226 	.word	0x20004226
 800ff94:	08016744 	.word	0x08016744
 800ff98:	08016a10 	.word	0x08016a10
 800ff9c:	08016788 	.word	0x08016788
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	4423      	add	r3, r4
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	4b95      	ldr	r3, [pc, #596]	; (80101fc <tcp_receive+0xbd8>)
 800ffa8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800ffaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffac:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800ffae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800ffb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffb6:	f7fd fed4 	bl	800dd62 <tcp_seg_free>
            while (next &&
 800ffba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d00e      	beq.n	800ffde <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ffc0:	4b8e      	ldr	r3, [pc, #568]	; (80101fc <tcp_receive+0xbd8>)
 800ffc2:	881b      	ldrh	r3, [r3, #0]
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	4b8e      	ldr	r3, [pc, #568]	; (8010200 <tcp_receive+0xbdc>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	441a      	add	r2, r3
 800ffcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffd4:	8909      	ldrh	r1, [r1, #8]
 800ffd6:	440b      	add	r3, r1
 800ffd8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	da9d      	bge.n	800ff1a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ffde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d057      	beq.n	8010094 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800ffe4:	4b85      	ldr	r3, [pc, #532]	; (80101fc <tcp_receive+0xbd8>)
 800ffe6:	881b      	ldrh	r3, [r3, #0]
 800ffe8:	461a      	mov	r2, r3
 800ffea:	4b85      	ldr	r3, [pc, #532]	; (8010200 <tcp_receive+0xbdc>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	441a      	add	r2, r3
 800fff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff2:	68db      	ldr	r3, [r3, #12]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	dd4b      	ble.n	8010094 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	b29a      	uxth	r2, r3
 8010004:	4b7e      	ldr	r3, [pc, #504]	; (8010200 <tcp_receive+0xbdc>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	b29b      	uxth	r3, r3
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	b29a      	uxth	r2, r3
 801000e:	4b7d      	ldr	r3, [pc, #500]	; (8010204 <tcp_receive+0xbe0>)
 8010010:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010012:	4b7c      	ldr	r3, [pc, #496]	; (8010204 <tcp_receive+0xbe0>)
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	899b      	ldrh	r3, [r3, #12]
 8010018:	b29b      	uxth	r3, r3
 801001a:	4618      	mov	r0, r3
 801001c:	f7fb fbbe 	bl	800b79c <lwip_htons>
 8010020:	4603      	mov	r3, r0
 8010022:	f003 0302 	and.w	r3, r3, #2
 8010026:	2b00      	cmp	r3, #0
 8010028:	d005      	beq.n	8010036 <tcp_receive+0xa12>
                inseg.len -= 1;
 801002a:	4b76      	ldr	r3, [pc, #472]	; (8010204 <tcp_receive+0xbe0>)
 801002c:	891b      	ldrh	r3, [r3, #8]
 801002e:	3b01      	subs	r3, #1
 8010030:	b29a      	uxth	r2, r3
 8010032:	4b74      	ldr	r3, [pc, #464]	; (8010204 <tcp_receive+0xbe0>)
 8010034:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010036:	4b73      	ldr	r3, [pc, #460]	; (8010204 <tcp_receive+0xbe0>)
 8010038:	685a      	ldr	r2, [r3, #4]
 801003a:	4b72      	ldr	r3, [pc, #456]	; (8010204 <tcp_receive+0xbe0>)
 801003c:	891b      	ldrh	r3, [r3, #8]
 801003e:	4619      	mov	r1, r3
 8010040:	4610      	mov	r0, r2
 8010042:	f7fc fbc7 	bl	800c7d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010046:	4b6f      	ldr	r3, [pc, #444]	; (8010204 <tcp_receive+0xbe0>)
 8010048:	891c      	ldrh	r4, [r3, #8]
 801004a:	4b6e      	ldr	r3, [pc, #440]	; (8010204 <tcp_receive+0xbe0>)
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	899b      	ldrh	r3, [r3, #12]
 8010050:	b29b      	uxth	r3, r3
 8010052:	4618      	mov	r0, r3
 8010054:	f7fb fba2 	bl	800b79c <lwip_htons>
 8010058:	4603      	mov	r3, r0
 801005a:	f003 0303 	and.w	r3, r3, #3
 801005e:	2b00      	cmp	r3, #0
 8010060:	d001      	beq.n	8010066 <tcp_receive+0xa42>
 8010062:	2301      	movs	r3, #1
 8010064:	e000      	b.n	8010068 <tcp_receive+0xa44>
 8010066:	2300      	movs	r3, #0
 8010068:	4423      	add	r3, r4
 801006a:	b29a      	uxth	r2, r3
 801006c:	4b63      	ldr	r3, [pc, #396]	; (80101fc <tcp_receive+0xbd8>)
 801006e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010070:	4b62      	ldr	r3, [pc, #392]	; (80101fc <tcp_receive+0xbd8>)
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	461a      	mov	r2, r3
 8010076:	4b62      	ldr	r3, [pc, #392]	; (8010200 <tcp_receive+0xbdc>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	441a      	add	r2, r3
 801007c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	429a      	cmp	r2, r3
 8010084:	d006      	beq.n	8010094 <tcp_receive+0xa70>
 8010086:	4b60      	ldr	r3, [pc, #384]	; (8010208 <tcp_receive+0xbe4>)
 8010088:	f240 52af 	movw	r2, #1455	; 0x5af
 801008c:	495f      	ldr	r1, [pc, #380]	; (801020c <tcp_receive+0xbe8>)
 801008e:	4860      	ldr	r0, [pc, #384]	; (8010210 <tcp_receive+0xbec>)
 8010090:	f004 fd8a 	bl	8014ba8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010098:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801009a:	4b58      	ldr	r3, [pc, #352]	; (80101fc <tcp_receive+0xbd8>)
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	461a      	mov	r2, r3
 80100a0:	4b57      	ldr	r3, [pc, #348]	; (8010200 <tcp_receive+0xbdc>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	441a      	add	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100ae:	4b53      	ldr	r3, [pc, #332]	; (80101fc <tcp_receive+0xbd8>)
 80100b0:	881b      	ldrh	r3, [r3, #0]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d206      	bcs.n	80100c4 <tcp_receive+0xaa0>
 80100b6:	4b54      	ldr	r3, [pc, #336]	; (8010208 <tcp_receive+0xbe4>)
 80100b8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80100bc:	4955      	ldr	r1, [pc, #340]	; (8010214 <tcp_receive+0xbf0>)
 80100be:	4854      	ldr	r0, [pc, #336]	; (8010210 <tcp_receive+0xbec>)
 80100c0:	f004 fd72 	bl	8014ba8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100c8:	4b4c      	ldr	r3, [pc, #304]	; (80101fc <tcp_receive+0xbd8>)
 80100ca:	881b      	ldrh	r3, [r3, #0]
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7fd f9fb 	bl	800d4d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80100da:	4b4a      	ldr	r3, [pc, #296]	; (8010204 <tcp_receive+0xbe0>)
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	891b      	ldrh	r3, [r3, #8]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d006      	beq.n	80100f2 <tcp_receive+0xace>
          recv_data = inseg.p;
 80100e4:	4b47      	ldr	r3, [pc, #284]	; (8010204 <tcp_receive+0xbe0>)
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	4a4b      	ldr	r2, [pc, #300]	; (8010218 <tcp_receive+0xbf4>)
 80100ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80100ec:	4b45      	ldr	r3, [pc, #276]	; (8010204 <tcp_receive+0xbe0>)
 80100ee:	2200      	movs	r2, #0
 80100f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80100f2:	4b44      	ldr	r3, [pc, #272]	; (8010204 <tcp_receive+0xbe0>)
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	899b      	ldrh	r3, [r3, #12]
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fb fb4e 	bl	800b79c <lwip_htons>
 8010100:	4603      	mov	r3, r0
 8010102:	f003 0301 	and.w	r3, r3, #1
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 80b4 	beq.w	8010274 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801010c:	4b43      	ldr	r3, [pc, #268]	; (801021c <tcp_receive+0xbf8>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	f043 0320 	orr.w	r3, r3, #32
 8010114:	b2da      	uxtb	r2, r3
 8010116:	4b41      	ldr	r3, [pc, #260]	; (801021c <tcp_receive+0xbf8>)
 8010118:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801011a:	e0ab      	b.n	8010274 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010120:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	4a35      	ldr	r2, [pc, #212]	; (8010200 <tcp_receive+0xbdc>)
 801012c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	891b      	ldrh	r3, [r3, #8]
 8010132:	461c      	mov	r4, r3
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	899b      	ldrh	r3, [r3, #12]
 801013a:	b29b      	uxth	r3, r3
 801013c:	4618      	mov	r0, r3
 801013e:	f7fb fb2d 	bl	800b79c <lwip_htons>
 8010142:	4603      	mov	r3, r0
 8010144:	f003 0303 	and.w	r3, r3, #3
 8010148:	2b00      	cmp	r3, #0
 801014a:	d001      	beq.n	8010150 <tcp_receive+0xb2c>
 801014c:	2301      	movs	r3, #1
 801014e:	e000      	b.n	8010152 <tcp_receive+0xb2e>
 8010150:	2300      	movs	r3, #0
 8010152:	191a      	adds	r2, r3, r4
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010158:	441a      	add	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010162:	461c      	mov	r4, r3
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	891b      	ldrh	r3, [r3, #8]
 8010168:	461d      	mov	r5, r3
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	899b      	ldrh	r3, [r3, #12]
 8010170:	b29b      	uxth	r3, r3
 8010172:	4618      	mov	r0, r3
 8010174:	f7fb fb12 	bl	800b79c <lwip_htons>
 8010178:	4603      	mov	r3, r0
 801017a:	f003 0303 	and.w	r3, r3, #3
 801017e:	2b00      	cmp	r3, #0
 8010180:	d001      	beq.n	8010186 <tcp_receive+0xb62>
 8010182:	2301      	movs	r3, #1
 8010184:	e000      	b.n	8010188 <tcp_receive+0xb64>
 8010186:	2300      	movs	r3, #0
 8010188:	442b      	add	r3, r5
 801018a:	429c      	cmp	r4, r3
 801018c:	d206      	bcs.n	801019c <tcp_receive+0xb78>
 801018e:	4b1e      	ldr	r3, [pc, #120]	; (8010208 <tcp_receive+0xbe4>)
 8010190:	f240 52de 	movw	r2, #1502	; 0x5de
 8010194:	4922      	ldr	r1, [pc, #136]	; (8010220 <tcp_receive+0xbfc>)
 8010196:	481e      	ldr	r0, [pc, #120]	; (8010210 <tcp_receive+0xbec>)
 8010198:	f004 fd06 	bl	8014ba8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	891b      	ldrh	r3, [r3, #8]
 80101a0:	461c      	mov	r4, r3
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	899b      	ldrh	r3, [r3, #12]
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fb faf6 	bl	800b79c <lwip_htons>
 80101b0:	4603      	mov	r3, r0
 80101b2:	f003 0303 	and.w	r3, r3, #3
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <tcp_receive+0xb9a>
 80101ba:	2301      	movs	r3, #1
 80101bc:	e000      	b.n	80101c0 <tcp_receive+0xb9c>
 80101be:	2300      	movs	r3, #0
 80101c0:	1919      	adds	r1, r3, r4
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80101c6:	b28b      	uxth	r3, r1
 80101c8:	1ad3      	subs	r3, r2, r3
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f7fd f97d 	bl	800d4d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	891b      	ldrh	r3, [r3, #8]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d028      	beq.n	8010232 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80101e0:	4b0d      	ldr	r3, [pc, #52]	; (8010218 <tcp_receive+0xbf4>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d01d      	beq.n	8010224 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80101e8:	4b0b      	ldr	r3, [pc, #44]	; (8010218 <tcp_receive+0xbf4>)
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	4619      	mov	r1, r3
 80101f2:	4610      	mov	r0, r2
 80101f4:	f7fc fd3c 	bl	800cc70 <pbuf_cat>
 80101f8:	e018      	b.n	801022c <tcp_receive+0xc08>
 80101fa:	bf00      	nop
 80101fc:	20004226 	.word	0x20004226
 8010200:	2000421c 	.word	0x2000421c
 8010204:	200041fc 	.word	0x200041fc
 8010208:	08016744 	.word	0x08016744
 801020c:	08016a48 	.word	0x08016a48
 8010210:	08016788 	.word	0x08016788
 8010214:	08016a84 	.word	0x08016a84
 8010218:	2000422c 	.word	0x2000422c
 801021c:	20004229 	.word	0x20004229
 8010220:	08016aa4 	.word	0x08016aa4
            } else {
              recv_data = cseg->p;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	4a71      	ldr	r2, [pc, #452]	; (80103f0 <tcp_receive+0xdcc>)
 801022a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	899b      	ldrh	r3, [r3, #12]
 8010238:	b29b      	uxth	r3, r3
 801023a:	4618      	mov	r0, r3
 801023c:	f7fb faae 	bl	800b79c <lwip_htons>
 8010240:	4603      	mov	r3, r0
 8010242:	f003 0301 	and.w	r3, r3, #1
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00d      	beq.n	8010266 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801024a:	4b6a      	ldr	r3, [pc, #424]	; (80103f4 <tcp_receive+0xdd0>)
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	f043 0320 	orr.w	r3, r3, #32
 8010252:	b2da      	uxtb	r2, r3
 8010254:	4b67      	ldr	r3, [pc, #412]	; (80103f4 <tcp_receive+0xdd0>)
 8010256:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	7d1b      	ldrb	r3, [r3, #20]
 801025c:	2b04      	cmp	r3, #4
 801025e:	d102      	bne.n	8010266 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2207      	movs	r2, #7
 8010264:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f7fd fd77 	bl	800dd62 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010278:	2b00      	cmp	r3, #0
 801027a:	d008      	beq.n	801028e <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	685a      	ldr	r2, [r3, #4]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010288:	429a      	cmp	r2, r3
 801028a:	f43f af47 	beq.w	801011c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	7e9b      	ldrb	r3, [r3, #26]
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00e      	beq.n	80102b8 <tcp_receive+0xc94>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	7e9b      	ldrb	r3, [r3, #26]
 801029e:	f023 0301 	bic.w	r3, r3, #1
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	769a      	strb	r2, [r3, #26]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	7e9b      	ldrb	r3, [r3, #26]
 80102ac:	f043 0302 	orr.w	r3, r3, #2
 80102b0:	b2da      	uxtb	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80102b6:	e181      	b.n	80105bc <tcp_receive+0xf98>
        tcp_ack(pcb);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	7e9b      	ldrb	r3, [r3, #26]
 80102bc:	f043 0301 	orr.w	r3, r3, #1
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80102c6:	e179      	b.n	80105bc <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f000 fc93 	bl	8010bf4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d106      	bne.n	80102e4 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80102d6:	4848      	ldr	r0, [pc, #288]	; (80103f8 <tcp_receive+0xdd4>)
 80102d8:	f7fd fd5b 	bl	800dd92 <tcp_seg_copy>
 80102dc:	4602      	mov	r2, r0
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80102e2:	e16b      	b.n	80105bc <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80102e4:	2300      	movs	r3, #0
 80102e6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102ee:	e150      	b.n	8010592 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 80102f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	685a      	ldr	r2, [r3, #4]
 80102f6:	4b41      	ldr	r3, [pc, #260]	; (80103fc <tcp_receive+0xdd8>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d11d      	bne.n	801033a <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80102fe:	4b3e      	ldr	r3, [pc, #248]	; (80103f8 <tcp_receive+0xdd4>)
 8010300:	891a      	ldrh	r2, [r3, #8]
 8010302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010304:	891b      	ldrh	r3, [r3, #8]
 8010306:	429a      	cmp	r2, r3
 8010308:	f240 8148 	bls.w	801059c <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801030c:	483a      	ldr	r0, [pc, #232]	; (80103f8 <tcp_receive+0xdd4>)
 801030e:	f7fd fd40 	bl	800dd92 <tcp_seg_copy>
 8010312:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2b00      	cmp	r3, #0
 8010318:	f000 8142 	beq.w	80105a0 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 801031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031e:	2b00      	cmp	r3, #0
 8010320:	d003      	beq.n	801032a <tcp_receive+0xd06>
                    prev->next = cseg;
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	601a      	str	r2, [r3, #0]
 8010328:	e002      	b.n	8010330 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	68fa      	ldr	r2, [r7, #12]
 801032e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f7ff f900 	bl	800f538 <tcp_oos_insert_segment>
                }
                break;
 8010338:	e132      	b.n	80105a0 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	2b00      	cmp	r3, #0
 801033e:	d117      	bne.n	8010370 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010340:	4b2e      	ldr	r3, [pc, #184]	; (80103fc <tcp_receive+0xdd8>)
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	2b00      	cmp	r3, #0
 801034e:	da57      	bge.n	8010400 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8010350:	4829      	ldr	r0, [pc, #164]	; (80103f8 <tcp_receive+0xdd4>)
 8010352:	f7fd fd1e 	bl	800dd92 <tcp_seg_copy>
 8010356:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2b00      	cmp	r3, #0
 801035c:	f000 8122 	beq.w	80105a4 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8010366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	f7ff f8e5 	bl	800f538 <tcp_oos_insert_segment>
                  }
                  break;
 801036e:	e119      	b.n	80105a4 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8010370:	4b22      	ldr	r3, [pc, #136]	; (80103fc <tcp_receive+0xdd8>)
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	3b01      	subs	r3, #1
 801037e:	2b00      	cmp	r3, #0
 8010380:	db3e      	blt.n	8010400 <tcp_receive+0xddc>
 8010382:	4b1e      	ldr	r3, [pc, #120]	; (80103fc <tcp_receive+0xdd8>)
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	1ad3      	subs	r3, r2, r3
 801038e:	3301      	adds	r3, #1
 8010390:	2b00      	cmp	r3, #0
 8010392:	dc35      	bgt.n	8010400 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8010394:	4818      	ldr	r0, [pc, #96]	; (80103f8 <tcp_receive+0xdd4>)
 8010396:	f7fd fcfc 	bl	800dd92 <tcp_seg_copy>
 801039a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 8102 	beq.w	80105a8 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80103a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103ac:	8912      	ldrh	r2, [r2, #8]
 80103ae:	441a      	add	r2, r3
 80103b0:	4b12      	ldr	r3, [pc, #72]	; (80103fc <tcp_receive+0xdd8>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	dd12      	ble.n	80103e0 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80103ba:	4b10      	ldr	r3, [pc, #64]	; (80103fc <tcp_receive+0xdd8>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	b29a      	uxth	r2, r3
 80103c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c2:	68db      	ldr	r3, [r3, #12]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	1ad3      	subs	r3, r2, r3
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80103d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d2:	685a      	ldr	r2, [r3, #4]
 80103d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d6:	891b      	ldrh	r3, [r3, #8]
 80103d8:	4619      	mov	r1, r3
 80103da:	4610      	mov	r0, r2
 80103dc:	f7fc f9fa 	bl	800c7d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80103e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80103e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f7ff f8a5 	bl	800f538 <tcp_oos_insert_segment>
                  }
                  break;
 80103ee:	e0db      	b.n	80105a8 <tcp_receive+0xf84>
 80103f0:	2000422c 	.word	0x2000422c
 80103f4:	20004229 	.word	0x20004229
 80103f8:	200041fc 	.word	0x200041fc
 80103fc:	2000421c 	.word	0x2000421c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	f040 80bf 	bne.w	8010588 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801040a:	4b7c      	ldr	r3, [pc, #496]	; (80105fc <tcp_receive+0xfd8>)
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010410:	68db      	ldr	r3, [r3, #12]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010416:	2b00      	cmp	r3, #0
 8010418:	f340 80b6 	ble.w	8010588 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	899b      	ldrh	r3, [r3, #12]
 8010422:	b29b      	uxth	r3, r3
 8010424:	4618      	mov	r0, r3
 8010426:	f7fb f9b9 	bl	800b79c <lwip_htons>
 801042a:	4603      	mov	r3, r0
 801042c:	f003 0301 	and.w	r3, r3, #1
 8010430:	2b00      	cmp	r3, #0
 8010432:	f040 80bb 	bne.w	80105ac <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010436:	4872      	ldr	r0, [pc, #456]	; (8010600 <tcp_receive+0xfdc>)
 8010438:	f7fd fcab 	bl	800dd92 <tcp_seg_copy>
 801043c:	4602      	mov	r2, r0
 801043e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010440:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	f000 80b2 	beq.w	80105b0 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010454:	8912      	ldrh	r2, [r2, #8]
 8010456:	441a      	add	r2, r3
 8010458:	4b68      	ldr	r3, [pc, #416]	; (80105fc <tcp_receive+0xfd8>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	2b00      	cmp	r3, #0
 8010460:	dd12      	ble.n	8010488 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010462:	4b66      	ldr	r3, [pc, #408]	; (80105fc <tcp_receive+0xfd8>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	b29a      	uxth	r2, r3
 8010468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	b29b      	uxth	r3, r3
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	b29a      	uxth	r2, r3
 8010474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010476:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047a:	685a      	ldr	r2, [r3, #4]
 801047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047e:	891b      	ldrh	r3, [r3, #8]
 8010480:	4619      	mov	r1, r3
 8010482:	4610      	mov	r0, r2
 8010484:	f7fc f9a6 	bl	800c7d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010488:	4b5e      	ldr	r3, [pc, #376]	; (8010604 <tcp_receive+0xfe0>)
 801048a:	881b      	ldrh	r3, [r3, #0]
 801048c:	461a      	mov	r2, r3
 801048e:	4b5b      	ldr	r3, [pc, #364]	; (80105fc <tcp_receive+0xfd8>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	441a      	add	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010498:	6879      	ldr	r1, [r7, #4]
 801049a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801049c:	440b      	add	r3, r1
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f340 8085 	ble.w	80105b0 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80104a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	899b      	ldrh	r3, [r3, #12]
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fb f973 	bl	800b79c <lwip_htons>
 80104b6:	4603      	mov	r3, r0
 80104b8:	f003 0301 	and.w	r3, r3, #1
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d01e      	beq.n	80104fe <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80104c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	899b      	ldrh	r3, [r3, #12]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80104ce:	b29c      	uxth	r4, r3
 80104d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	899b      	ldrh	r3, [r3, #12]
 80104d8:	b29b      	uxth	r3, r3
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fb f95e 	bl	800b79c <lwip_htons>
 80104e0:	4603      	mov	r3, r0
 80104e2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7fb f957 	bl	800b79c <lwip_htons>
 80104ee:	4603      	mov	r3, r0
 80104f0:	461a      	mov	r2, r3
 80104f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	4322      	orrs	r2, r4
 80104fa:	b292      	uxth	r2, r2
 80104fc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010502:	b29a      	uxth	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010508:	4413      	add	r3, r2
 801050a:	b299      	uxth	r1, r3
 801050c:	4b3b      	ldr	r3, [pc, #236]	; (80105fc <tcp_receive+0xfd8>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	b29a      	uxth	r2, r3
 8010512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	1a8a      	subs	r2, r1, r2
 8010518:	b292      	uxth	r2, r2
 801051a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	685a      	ldr	r2, [r3, #4]
 8010522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	891b      	ldrh	r3, [r3, #8]
 8010528:	4619      	mov	r1, r3
 801052a:	4610      	mov	r0, r2
 801052c:	f7fc f952 	bl	800c7d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	891c      	ldrh	r4, [r3, #8]
 8010536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	899b      	ldrh	r3, [r3, #12]
 801053e:	b29b      	uxth	r3, r3
 8010540:	4618      	mov	r0, r3
 8010542:	f7fb f92b 	bl	800b79c <lwip_htons>
 8010546:	4603      	mov	r3, r0
 8010548:	f003 0303 	and.w	r3, r3, #3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d001      	beq.n	8010554 <tcp_receive+0xf30>
 8010550:	2301      	movs	r3, #1
 8010552:	e000      	b.n	8010556 <tcp_receive+0xf32>
 8010554:	2300      	movs	r3, #0
 8010556:	4423      	add	r3, r4
 8010558:	b29a      	uxth	r2, r3
 801055a:	4b2a      	ldr	r3, [pc, #168]	; (8010604 <tcp_receive+0xfe0>)
 801055c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801055e:	4b29      	ldr	r3, [pc, #164]	; (8010604 <tcp_receive+0xfe0>)
 8010560:	881b      	ldrh	r3, [r3, #0]
 8010562:	461a      	mov	r2, r3
 8010564:	4b25      	ldr	r3, [pc, #148]	; (80105fc <tcp_receive+0xfd8>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	441a      	add	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801056e:	6879      	ldr	r1, [r7, #4]
 8010570:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010572:	440b      	add	r3, r1
 8010574:	429a      	cmp	r2, r3
 8010576:	d01b      	beq.n	80105b0 <tcp_receive+0xf8c>
 8010578:	4b23      	ldr	r3, [pc, #140]	; (8010608 <tcp_receive+0xfe4>)
 801057a:	f240 627b 	movw	r2, #1659	; 0x67b
 801057e:	4923      	ldr	r1, [pc, #140]	; (801060c <tcp_receive+0xfe8>)
 8010580:	4823      	ldr	r0, [pc, #140]	; (8010610 <tcp_receive+0xfec>)
 8010582:	f004 fb11 	bl	8014ba8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010586:	e013      	b.n	80105b0 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8010588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801058c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010594:	2b00      	cmp	r3, #0
 8010596:	f47f aeab 	bne.w	80102f0 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 801059a:	e00f      	b.n	80105bc <tcp_receive+0xf98>
                break;
 801059c:	bf00      	nop
 801059e:	e00d      	b.n	80105bc <tcp_receive+0xf98>
                break;
 80105a0:	bf00      	nop
 80105a2:	e00b      	b.n	80105bc <tcp_receive+0xf98>
                  break;
 80105a4:	bf00      	nop
 80105a6:	e009      	b.n	80105bc <tcp_receive+0xf98>
                  break;
 80105a8:	bf00      	nop
 80105aa:	e007      	b.n	80105bc <tcp_receive+0xf98>
                  break;
 80105ac:	bf00      	nop
 80105ae:	e005      	b.n	80105bc <tcp_receive+0xf98>
                break;
 80105b0:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80105b2:	e003      	b.n	80105bc <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fb1d 	bl	8010bf4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80105ba:	e01a      	b.n	80105f2 <tcp_receive+0xfce>
 80105bc:	e019      	b.n	80105f2 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80105be:	4b0f      	ldr	r3, [pc, #60]	; (80105fc <tcp_receive+0xfd8>)
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	db0a      	blt.n	80105e2 <tcp_receive+0xfbe>
 80105cc:	4b0b      	ldr	r3, [pc, #44]	; (80105fc <tcp_receive+0xfd8>)
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d4:	6879      	ldr	r1, [r7, #4]
 80105d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80105d8:	440b      	add	r3, r1
 80105da:	1ad3      	subs	r3, r2, r3
 80105dc:	3301      	adds	r3, #1
 80105de:	2b00      	cmp	r3, #0
 80105e0:	dd07      	ble.n	80105f2 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	7e9b      	ldrb	r3, [r3, #26]
 80105e6:	f043 0302 	orr.w	r3, r3, #2
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80105f0:	e7ff      	b.n	80105f2 <tcp_receive+0xfce>
 80105f2:	bf00      	nop
 80105f4:	3734      	adds	r7, #52	; 0x34
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105fa:	bf00      	nop
 80105fc:	2000421c 	.word	0x2000421c
 8010600:	200041fc 	.word	0x200041fc
 8010604:	20004226 	.word	0x20004226
 8010608:	08016744 	.word	0x08016744
 801060c:	08016a10 	.word	0x08016a10
 8010610:	08016788 	.word	0x08016788

08010614 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801061a:	4b18      	ldr	r3, [pc, #96]	; (801067c <tcp_getoptbyte+0x68>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d005      	beq.n	801062e <tcp_getoptbyte+0x1a>
 8010622:	4b17      	ldr	r3, [pc, #92]	; (8010680 <tcp_getoptbyte+0x6c>)
 8010624:	881a      	ldrh	r2, [r3, #0]
 8010626:	4b17      	ldr	r3, [pc, #92]	; (8010684 <tcp_getoptbyte+0x70>)
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	429a      	cmp	r2, r3
 801062c:	d20e      	bcs.n	801064c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801062e:	4b16      	ldr	r3, [pc, #88]	; (8010688 <tcp_getoptbyte+0x74>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	3314      	adds	r3, #20
 8010634:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8010636:	4b12      	ldr	r3, [pc, #72]	; (8010680 <tcp_getoptbyte+0x6c>)
 8010638:	881b      	ldrh	r3, [r3, #0]
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	b291      	uxth	r1, r2
 801063e:	4a10      	ldr	r2, [pc, #64]	; (8010680 <tcp_getoptbyte+0x6c>)
 8010640:	8011      	strh	r1, [r2, #0]
 8010642:	461a      	mov	r2, r3
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	4413      	add	r3, r2
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	e010      	b.n	801066e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 801064c:	4b0c      	ldr	r3, [pc, #48]	; (8010680 <tcp_getoptbyte+0x6c>)
 801064e:	881b      	ldrh	r3, [r3, #0]
 8010650:	1c5a      	adds	r2, r3, #1
 8010652:	b291      	uxth	r1, r2
 8010654:	4a0a      	ldr	r2, [pc, #40]	; (8010680 <tcp_getoptbyte+0x6c>)
 8010656:	8011      	strh	r1, [r2, #0]
 8010658:	b2da      	uxtb	r2, r3
 801065a:	4b0a      	ldr	r3, [pc, #40]	; (8010684 <tcp_getoptbyte+0x70>)
 801065c:	881b      	ldrh	r3, [r3, #0]
 801065e:	b2db      	uxtb	r3, r3
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8010664:	4b05      	ldr	r3, [pc, #20]	; (801067c <tcp_getoptbyte+0x68>)
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	79fb      	ldrb	r3, [r7, #7]
 801066a:	4413      	add	r3, r2
 801066c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801066e:	4618      	mov	r0, r3
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	20004214 	.word	0x20004214
 8010680:	20004218 	.word	0x20004218
 8010684:	20004212 	.word	0x20004212
 8010688:	2000420c 	.word	0x2000420c

0801068c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010694:	4b2d      	ldr	r3, [pc, #180]	; (801074c <tcp_parseopt+0xc0>)
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d053      	beq.n	8010744 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801069c:	4b2c      	ldr	r3, [pc, #176]	; (8010750 <tcp_parseopt+0xc4>)
 801069e:	2200      	movs	r2, #0
 80106a0:	801a      	strh	r2, [r3, #0]
 80106a2:	e043      	b.n	801072c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80106a4:	f7ff ffb6 	bl	8010614 <tcp_getoptbyte>
 80106a8:	4603      	mov	r3, r0
 80106aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80106ac:	7bfb      	ldrb	r3, [r7, #15]
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d03c      	beq.n	801072c <tcp_parseopt+0xa0>
 80106b2:	2b02      	cmp	r3, #2
 80106b4:	d002      	beq.n	80106bc <tcp_parseopt+0x30>
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d03f      	beq.n	801073a <tcp_parseopt+0xae>
 80106ba:	e026      	b.n	801070a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80106bc:	f7ff ffaa 	bl	8010614 <tcp_getoptbyte>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b04      	cmp	r3, #4
 80106c4:	d13b      	bne.n	801073e <tcp_parseopt+0xb2>
 80106c6:	4b22      	ldr	r3, [pc, #136]	; (8010750 <tcp_parseopt+0xc4>)
 80106c8:	881b      	ldrh	r3, [r3, #0]
 80106ca:	3302      	adds	r3, #2
 80106cc:	4a1f      	ldr	r2, [pc, #124]	; (801074c <tcp_parseopt+0xc0>)
 80106ce:	8812      	ldrh	r2, [r2, #0]
 80106d0:	4293      	cmp	r3, r2
 80106d2:	dc34      	bgt.n	801073e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80106d4:	f7ff ff9e 	bl	8010614 <tcp_getoptbyte>
 80106d8:	4603      	mov	r3, r0
 80106da:	b29b      	uxth	r3, r3
 80106dc:	021b      	lsls	r3, r3, #8
 80106de:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80106e0:	f7ff ff98 	bl	8010614 <tcp_getoptbyte>
 80106e4:	4603      	mov	r3, r0
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	89bb      	ldrh	r3, [r7, #12]
 80106ea:	4313      	orrs	r3, r2
 80106ec:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80106ee:	89bb      	ldrh	r3, [r7, #12]
 80106f0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80106f4:	d804      	bhi.n	8010700 <tcp_parseopt+0x74>
 80106f6:	89bb      	ldrh	r3, [r7, #12]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <tcp_parseopt+0x74>
 80106fc:	89ba      	ldrh	r2, [r7, #12]
 80106fe:	e001      	b.n	8010704 <tcp_parseopt+0x78>
 8010700:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8010708:	e010      	b.n	801072c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801070a:	f7ff ff83 	bl	8010614 <tcp_getoptbyte>
 801070e:	4603      	mov	r3, r0
 8010710:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8010712:	7afb      	ldrb	r3, [r7, #11]
 8010714:	2b01      	cmp	r3, #1
 8010716:	d914      	bls.n	8010742 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010718:	7afb      	ldrb	r3, [r7, #11]
 801071a:	b29a      	uxth	r2, r3
 801071c:	4b0c      	ldr	r3, [pc, #48]	; (8010750 <tcp_parseopt+0xc4>)
 801071e:	881b      	ldrh	r3, [r3, #0]
 8010720:	4413      	add	r3, r2
 8010722:	b29b      	uxth	r3, r3
 8010724:	3b02      	subs	r3, #2
 8010726:	b29a      	uxth	r2, r3
 8010728:	4b09      	ldr	r3, [pc, #36]	; (8010750 <tcp_parseopt+0xc4>)
 801072a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801072c:	4b08      	ldr	r3, [pc, #32]	; (8010750 <tcp_parseopt+0xc4>)
 801072e:	881a      	ldrh	r2, [r3, #0]
 8010730:	4b06      	ldr	r3, [pc, #24]	; (801074c <tcp_parseopt+0xc0>)
 8010732:	881b      	ldrh	r3, [r3, #0]
 8010734:	429a      	cmp	r2, r3
 8010736:	d3b5      	bcc.n	80106a4 <tcp_parseopt+0x18>
 8010738:	e004      	b.n	8010744 <tcp_parseopt+0xb8>
        return;
 801073a:	bf00      	nop
 801073c:	e002      	b.n	8010744 <tcp_parseopt+0xb8>
          return;
 801073e:	bf00      	nop
 8010740:	e000      	b.n	8010744 <tcp_parseopt+0xb8>
          return;
 8010742:	bf00      	nop
      }
    }
  }
}
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	20004210 	.word	0x20004210
 8010750:	20004218 	.word	0x20004218

08010754 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010754:	b480      	push	{r7}
 8010756:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010758:	4b05      	ldr	r3, [pc, #20]	; (8010770 <tcp_trigger_input_pcb_close+0x1c>)
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	f043 0310 	orr.w	r3, r3, #16
 8010760:	b2da      	uxtb	r2, r3
 8010762:	4b03      	ldr	r3, [pc, #12]	; (8010770 <tcp_trigger_input_pcb_close+0x1c>)
 8010764:	701a      	strb	r2, [r3, #0]
}
 8010766:	bf00      	nop
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr
 8010770:	20004229 	.word	0x20004229

08010774 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	607b      	str	r3, [r7, #4]
 801077e:	460b      	mov	r3, r1
 8010780:	817b      	strh	r3, [r7, #10]
 8010782:	4613      	mov	r3, r2
 8010784:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010786:	897a      	ldrh	r2, [r7, #10]
 8010788:	893b      	ldrh	r3, [r7, #8]
 801078a:	4413      	add	r3, r2
 801078c:	b29b      	uxth	r3, r3
 801078e:	3314      	adds	r3, #20
 8010790:	b29b      	uxth	r3, r3
 8010792:	2200      	movs	r2, #0
 8010794:	4619      	mov	r1, r3
 8010796:	2001      	movs	r0, #1
 8010798:	f7fb fe1e 	bl	800c3d8 <pbuf_alloc>
 801079c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d057      	beq.n	8010854 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	895b      	ldrh	r3, [r3, #10]
 80107a8:	461a      	mov	r2, r3
 80107aa:	897b      	ldrh	r3, [r7, #10]
 80107ac:	3314      	adds	r3, #20
 80107ae:	429a      	cmp	r2, r3
 80107b0:	da05      	bge.n	80107be <tcp_output_alloc_header+0x4a>
 80107b2:	4b2b      	ldr	r3, [pc, #172]	; (8010860 <tcp_output_alloc_header+0xec>)
 80107b4:	2273      	movs	r2, #115	; 0x73
 80107b6:	492b      	ldr	r1, [pc, #172]	; (8010864 <tcp_output_alloc_header+0xf0>)
 80107b8:	482b      	ldr	r0, [pc, #172]	; (8010868 <tcp_output_alloc_header+0xf4>)
 80107ba:	f004 f9f5 	bl	8014ba8 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	8adb      	ldrh	r3, [r3, #22]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fa ffe7 	bl	800b79c <lwip_htons>
 80107ce:	4603      	mov	r3, r0
 80107d0:	461a      	mov	r2, r3
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	8b1b      	ldrh	r3, [r3, #24]
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fa ffde 	bl	800b79c <lwip_htons>
 80107e0:	4603      	mov	r3, r0
 80107e2:	461a      	mov	r2, r3
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7fa ffe0 	bl	800b7b8 <lwip_htonl>
 80107f8:	4602      	mov	r2, r0
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80107fe:	897b      	ldrh	r3, [r7, #10]
 8010800:	089b      	lsrs	r3, r3, #2
 8010802:	b29b      	uxth	r3, r3
 8010804:	3305      	adds	r3, #5
 8010806:	b29b      	uxth	r3, r3
 8010808:	031b      	lsls	r3, r3, #12
 801080a:	b29b      	uxth	r3, r3
 801080c:	f043 0310 	orr.w	r3, r3, #16
 8010810:	b29b      	uxth	r3, r3
 8010812:	4618      	mov	r0, r3
 8010814:	f7fa ffc2 	bl	800b79c <lwip_htons>
 8010818:	4603      	mov	r3, r0
 801081a:	461a      	mov	r2, r3
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010824:	4618      	mov	r0, r3
 8010826:	f7fa ffb9 	bl	800b79c <lwip_htons>
 801082a:	4603      	mov	r3, r0
 801082c:	461a      	mov	r2, r3
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	2200      	movs	r2, #0
 8010836:	741a      	strb	r2, [r3, #16]
 8010838:	2200      	movs	r2, #0
 801083a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	2200      	movs	r2, #0
 8010840:	749a      	strb	r2, [r3, #18]
 8010842:	2200      	movs	r2, #0
 8010844:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084a:	68fa      	ldr	r2, [r7, #12]
 801084c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801084e:	441a      	add	r2, r3
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010854:	697b      	ldr	r3, [r7, #20]
}
 8010856:	4618      	mov	r0, r3
 8010858:	3718      	adds	r7, #24
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	08016acc 	.word	0x08016acc
 8010864:	08016b00 	.word	0x08016b00
 8010868:	08016b30 	.word	0x08016b30

0801086c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801086c:	b590      	push	{r4, r7, lr}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010878:	2b00      	cmp	r3, #0
 801087a:	d02d      	beq.n	80108d8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010880:	60fb      	str	r3, [r7, #12]
 8010882:	e002      	b.n	801088a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1f8      	bne.n	8010884 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	899b      	ldrh	r3, [r3, #12]
 8010898:	b29b      	uxth	r3, r3
 801089a:	4618      	mov	r0, r3
 801089c:	f7fa ff7e 	bl	800b79c <lwip_htons>
 80108a0:	4603      	mov	r3, r0
 80108a2:	f003 0307 	and.w	r3, r3, #7
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d116      	bne.n	80108d8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	899b      	ldrh	r3, [r3, #12]
 80108b0:	b29c      	uxth	r4, r3
 80108b2:	2001      	movs	r0, #1
 80108b4:	f7fa ff72 	bl	800b79c <lwip_htons>
 80108b8:	4603      	mov	r3, r0
 80108ba:	461a      	mov	r2, r3
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	68db      	ldr	r3, [r3, #12]
 80108c0:	4322      	orrs	r2, r4
 80108c2:	b292      	uxth	r2, r2
 80108c4:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	7e9b      	ldrb	r3, [r3, #26]
 80108ca:	f043 0320 	orr.w	r3, r3, #32
 80108ce:	b2da      	uxtb	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80108d4:	2300      	movs	r3, #0
 80108d6:	e004      	b.n	80108e2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80108d8:	2101      	movs	r1, #1
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 f88e 	bl	80109fc <tcp_enqueue_flags>
 80108e0:	4603      	mov	r3, r0
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3714      	adds	r7, #20
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd90      	pop	{r4, r7, pc}
	...

080108ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80108ec:	b590      	push	{r4, r7, lr}
 80108ee:	b087      	sub	sp, #28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	603b      	str	r3, [r7, #0]
 80108f8:	4613      	mov	r3, r2
 80108fa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80108fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010900:	009b      	lsls	r3, r3, #2
 8010902:	b2db      	uxtb	r3, r3
 8010904:	f003 0304 	and.w	r3, r3, #4
 8010908:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801090a:	2002      	movs	r0, #2
 801090c:	f7fb fb32 	bl	800bf74 <memp_malloc>
 8010910:	6138      	str	r0, [r7, #16]
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d104      	bne.n	8010922 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010918:	68b8      	ldr	r0, [r7, #8]
 801091a:	f7fc f8cf 	bl	800cabc <pbuf_free>
    return NULL;
 801091e:	2300      	movs	r3, #0
 8010920:	e061      	b.n	80109e6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010928:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	2200      	movs	r2, #0
 801092e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	891a      	ldrh	r2, [r3, #8]
 801093a:	7dfb      	ldrb	r3, [r7, #23]
 801093c:	b29b      	uxth	r3, r3
 801093e:	429a      	cmp	r2, r3
 8010940:	d205      	bcs.n	801094e <tcp_create_segment+0x62>
 8010942:	4b2b      	ldr	r3, [pc, #172]	; (80109f0 <tcp_create_segment+0x104>)
 8010944:	22ba      	movs	r2, #186	; 0xba
 8010946:	492b      	ldr	r1, [pc, #172]	; (80109f4 <tcp_create_segment+0x108>)
 8010948:	482b      	ldr	r0, [pc, #172]	; (80109f8 <tcp_create_segment+0x10c>)
 801094a:	f004 f92d 	bl	8014ba8 <iprintf>
  seg->len = p->tot_len - optlen;
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	891a      	ldrh	r2, [r3, #8]
 8010952:	7dfb      	ldrb	r3, [r7, #23]
 8010954:	b29b      	uxth	r3, r3
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	b29a      	uxth	r2, r3
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 801095e:	2114      	movs	r1, #20
 8010960:	68b8      	ldr	r0, [r7, #8]
 8010962:	f7fc f887 	bl	800ca74 <pbuf_header>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d004      	beq.n	8010976 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801096c:	6938      	ldr	r0, [r7, #16]
 801096e:	f7fd f9f8 	bl	800dd62 <tcp_seg_free>
    return NULL;
 8010972:	2300      	movs	r3, #0
 8010974:	e037      	b.n	80109e6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	685a      	ldr	r2, [r3, #4]
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	8ada      	ldrh	r2, [r3, #22]
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	68dc      	ldr	r4, [r3, #12]
 8010988:	4610      	mov	r0, r2
 801098a:	f7fa ff07 	bl	800b79c <lwip_htons>
 801098e:	4603      	mov	r3, r0
 8010990:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	8b1a      	ldrh	r2, [r3, #24]
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	68dc      	ldr	r4, [r3, #12]
 801099a:	4610      	mov	r0, r2
 801099c:	f7fa fefe 	bl	800b79c <lwip_htons>
 80109a0:	4603      	mov	r3, r0
 80109a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	68dc      	ldr	r4, [r3, #12]
 80109a8:	6838      	ldr	r0, [r7, #0]
 80109aa:	f7fa ff05 	bl	800b7b8 <lwip_htonl>
 80109ae:	4603      	mov	r3, r0
 80109b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80109b2:	7dfb      	ldrb	r3, [r7, #23]
 80109b4:	089b      	lsrs	r3, r3, #2
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	3305      	adds	r3, #5
 80109bc:	b29b      	uxth	r3, r3
 80109be:	031b      	lsls	r3, r3, #12
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	79fb      	ldrb	r3, [r7, #7]
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	4313      	orrs	r3, r2
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	68dc      	ldr	r4, [r3, #12]
 80109ce:	4610      	mov	r0, r2
 80109d0:	f7fa fee4 	bl	800b79c <lwip_htons>
 80109d4:	4603      	mov	r3, r0
 80109d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	2200      	movs	r2, #0
 80109de:	749a      	strb	r2, [r3, #18]
 80109e0:	2200      	movs	r2, #0
 80109e2:	74da      	strb	r2, [r3, #19]
  return seg;
 80109e4:	693b      	ldr	r3, [r7, #16]
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	371c      	adds	r7, #28
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd90      	pop	{r4, r7, pc}
 80109ee:	bf00      	nop
 80109f0:	08016acc 	.word	0x08016acc
 80109f4:	08016b58 	.word	0x08016b58
 80109f8:	08016b30 	.word	0x08016b30

080109fc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b08a      	sub	sp, #40	; 0x28
 8010a00:	af02      	add	r7, sp, #8
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	460b      	mov	r3, r1
 8010a06:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010a10:	78fb      	ldrb	r3, [r7, #3]
 8010a12:	f003 0303 	and.w	r3, r3, #3
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d106      	bne.n	8010a28 <tcp_enqueue_flags+0x2c>
 8010a1a:	4b6f      	ldr	r3, [pc, #444]	; (8010bd8 <tcp_enqueue_flags+0x1dc>)
 8010a1c:	f240 321b 	movw	r2, #795	; 0x31b
 8010a20:	496e      	ldr	r1, [pc, #440]	; (8010bdc <tcp_enqueue_flags+0x1e0>)
 8010a22:	486f      	ldr	r0, [pc, #444]	; (8010be0 <tcp_enqueue_flags+0x1e4>)
 8010a24:	f004 f8c0 	bl	8014ba8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a2e:	2b08      	cmp	r3, #8
 8010a30:	d806      	bhi.n	8010a40 <tcp_enqueue_flags+0x44>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a38:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d90e      	bls.n	8010a5e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8010a40:	78fb      	ldrb	r3, [r7, #3]
 8010a42:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d109      	bne.n	8010a5e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	7e9b      	ldrb	r3, [r3, #26]
 8010a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a5c:	e0b7      	b.n	8010bce <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8010a5e:	78fb      	ldrb	r3, [r7, #3]
 8010a60:	f003 0302 	and.w	r3, r3, #2
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d001      	beq.n	8010a6c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010a6c:	7ffb      	ldrb	r3, [r7, #31]
 8010a6e:	009b      	lsls	r3, r3, #2
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	f003 0304 	and.w	r3, r3, #4
 8010a76:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a78:	7dfb      	ldrb	r3, [r7, #23]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	4619      	mov	r1, r3
 8010a80:	2000      	movs	r0, #0
 8010a82:	f7fb fca9 	bl	800c3d8 <pbuf_alloc>
 8010a86:	6138      	str	r0, [r7, #16]
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d109      	bne.n	8010aa2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	7e9b      	ldrb	r3, [r3, #26]
 8010a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010a96:	b2da      	uxtb	r2, r3
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010aa0:	e095      	b.n	8010bce <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	895a      	ldrh	r2, [r3, #10]
 8010aa6:	7dfb      	ldrb	r3, [r7, #23]
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d206      	bcs.n	8010abc <tcp_enqueue_flags+0xc0>
 8010aae:	4b4a      	ldr	r3, [pc, #296]	; (8010bd8 <tcp_enqueue_flags+0x1dc>)
 8010ab0:	f240 3241 	movw	r2, #833	; 0x341
 8010ab4:	494b      	ldr	r1, [pc, #300]	; (8010be4 <tcp_enqueue_flags+0x1e8>)
 8010ab6:	484a      	ldr	r0, [pc, #296]	; (8010be0 <tcp_enqueue_flags+0x1e4>)
 8010ab8:	f004 f876 	bl	8014ba8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010ac0:	78fa      	ldrb	r2, [r7, #3]
 8010ac2:	7ffb      	ldrb	r3, [r7, #31]
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	6939      	ldr	r1, [r7, #16]
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7ff ff0e 	bl	80108ec <tcp_create_segment>
 8010ad0:	60f8      	str	r0, [r7, #12]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d109      	bne.n	8010aec <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	7e9b      	ldrb	r3, [r3, #26]
 8010adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ae0:	b2da      	uxtb	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010aea:	e070      	b.n	8010bce <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	f003 0303 	and.w	r3, r3, #3
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d006      	beq.n	8010b06 <tcp_enqueue_flags+0x10a>
 8010af8:	4b37      	ldr	r3, [pc, #220]	; (8010bd8 <tcp_enqueue_flags+0x1dc>)
 8010afa:	f240 3249 	movw	r2, #841	; 0x349
 8010afe:	493a      	ldr	r1, [pc, #232]	; (8010be8 <tcp_enqueue_flags+0x1ec>)
 8010b00:	4837      	ldr	r0, [pc, #220]	; (8010be0 <tcp_enqueue_flags+0x1e4>)
 8010b02:	f004 f851 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	891b      	ldrh	r3, [r3, #8]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d006      	beq.n	8010b1c <tcp_enqueue_flags+0x120>
 8010b0e:	4b32      	ldr	r3, [pc, #200]	; (8010bd8 <tcp_enqueue_flags+0x1dc>)
 8010b10:	f240 324a 	movw	r2, #842	; 0x34a
 8010b14:	4935      	ldr	r1, [pc, #212]	; (8010bec <tcp_enqueue_flags+0x1f0>)
 8010b16:	4832      	ldr	r0, [pc, #200]	; (8010be0 <tcp_enqueue_flags+0x1e4>)
 8010b18:	f004 f846 	bl	8014ba8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d103      	bne.n	8010b2c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	669a      	str	r2, [r3, #104]	; 0x68
 8010b2a:	e00d      	b.n	8010b48 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b30:	61bb      	str	r3, [r7, #24]
 8010b32:	e002      	b.n	8010b3a <tcp_enqueue_flags+0x13e>
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	61bb      	str	r3, [r7, #24]
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d1f8      	bne.n	8010b34 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010b50:	78fb      	ldrb	r3, [r7, #3]
 8010b52:	f003 0302 	and.w	r3, r3, #2
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d104      	bne.n	8010b64 <tcp_enqueue_flags+0x168>
 8010b5a:	78fb      	ldrb	r3, [r7, #3]
 8010b5c:	f003 0301 	and.w	r3, r3, #1
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d004      	beq.n	8010b6e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b68:	1c5a      	adds	r2, r3, #1
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010b6e:	78fb      	ldrb	r3, [r7, #3]
 8010b70:	f003 0301 	and.w	r3, r3, #1
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d006      	beq.n	8010b86 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	7e9b      	ldrb	r3, [r3, #26]
 8010b7c:	f043 0320 	orr.w	r3, r3, #32
 8010b80:	b2da      	uxtb	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fc f830 	bl	800cbf0 <pbuf_clen>
 8010b90:	4603      	mov	r3, r0
 8010b92:	461a      	mov	r2, r3
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b9a:	4413      	add	r3, r2
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d00e      	beq.n	8010bcc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d10a      	bne.n	8010bcc <tcp_enqueue_flags+0x1d0>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d106      	bne.n	8010bcc <tcp_enqueue_flags+0x1d0>
 8010bbe:	4b06      	ldr	r3, [pc, #24]	; (8010bd8 <tcp_enqueue_flags+0x1dc>)
 8010bc0:	f240 326d 	movw	r2, #877	; 0x36d
 8010bc4:	490a      	ldr	r1, [pc, #40]	; (8010bf0 <tcp_enqueue_flags+0x1f4>)
 8010bc6:	4806      	ldr	r0, [pc, #24]	; (8010be0 <tcp_enqueue_flags+0x1e4>)
 8010bc8:	f003 ffee 	bl	8014ba8 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010bcc:	2300      	movs	r3, #0
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3720      	adds	r7, #32
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	08016acc 	.word	0x08016acc
 8010bdc:	08016dd0 	.word	0x08016dd0
 8010be0:	08016b30 	.word	0x08016b30
 8010be4:	08016e28 	.word	0x08016e28
 8010be8:	08016e64 	.word	0x08016e64
 8010bec:	08016e7c 	.word	0x08016e7c
 8010bf0:	08016ea8 	.word	0x08016ea8

08010bf4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010bf4:	b590      	push	{r4, r7, lr}
 8010bf6:	b08b      	sub	sp, #44	; 0x2c
 8010bf8:	af04      	add	r7, sp, #16
 8010bfa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010c00:	7dbb      	ldrb	r3, [r7, #22]
 8010c02:	b29c      	uxth	r4, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fa fdd5 	bl	800b7b8 <lwip_htonl>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2200      	movs	r2, #0
 8010c12:	4621      	mov	r1, r4
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f7ff fdad 	bl	8010774 <tcp_output_alloc_header>
 8010c1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d109      	bne.n	8010c36 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	7e9b      	ldrb	r3, [r3, #26]
 8010c26:	f043 0303 	orr.w	r3, r3, #3
 8010c2a:	b2da      	uxtb	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010c30:	f06f 0301 	mvn.w	r3, #1
 8010c34:	e036      	b.n	8010ca4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	3304      	adds	r3, #4
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f001 ff54 	bl	8012ae8 <ip4_route>
 8010c40:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d102      	bne.n	8010c4e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8010c48:	23fc      	movs	r3, #252	; 0xfc
 8010c4a:	75fb      	strb	r3, [r7, #23]
 8010c4c:	e012      	b.n	8010c74 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8010c4e:	6879      	ldr	r1, [r7, #4]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	1d18      	adds	r0, r3, #4
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	7a9c      	ldrb	r4, [r3, #10]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	7a5b      	ldrb	r3, [r3, #9]
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	9202      	str	r2, [sp, #8]
 8010c60:	2206      	movs	r2, #6
 8010c62:	9201      	str	r2, [sp, #4]
 8010c64:	9300      	str	r3, [sp, #0]
 8010c66:	4623      	mov	r3, r4
 8010c68:	4602      	mov	r2, r0
 8010c6a:	6938      	ldr	r0, [r7, #16]
 8010c6c:	f002 f8dc 	bl	8012e28 <ip4_output_if>
 8010c70:	4603      	mov	r3, r0
 8010c72:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8010c74:	6938      	ldr	r0, [r7, #16]
 8010c76:	f7fb ff21 	bl	800cabc <pbuf_free>

  if (err != ERR_OK) {
 8010c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d007      	beq.n	8010c92 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	7e9b      	ldrb	r3, [r3, #26]
 8010c86:	f043 0303 	orr.w	r3, r3, #3
 8010c8a:	b2da      	uxtb	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	769a      	strb	r2, [r3, #26]
 8010c90:	e006      	b.n	8010ca0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	7e9b      	ldrb	r3, [r3, #26]
 8010c96:	f023 0303 	bic.w	r3, r3, #3
 8010c9a:	b2da      	uxtb	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8010ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	371c      	adds	r7, #28
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd90      	pop	{r4, r7, pc}

08010cac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010cac:	b5b0      	push	{r4, r5, r7, lr}
 8010cae:	b08a      	sub	sp, #40	; 0x28
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	7d1b      	ldrb	r3, [r3, #20]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d106      	bne.n	8010cca <tcp_output+0x1e>
 8010cbc:	4b9b      	ldr	r3, [pc, #620]	; (8010f2c <tcp_output+0x280>)
 8010cbe:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8010cc2:	499b      	ldr	r1, [pc, #620]	; (8010f30 <tcp_output+0x284>)
 8010cc4:	489b      	ldr	r0, [pc, #620]	; (8010f34 <tcp_output+0x288>)
 8010cc6:	f003 ff6f 	bl	8014ba8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010cca:	4b9b      	ldr	r3, [pc, #620]	; (8010f38 <tcp_output+0x28c>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d101      	bne.n	8010cd8 <tcp_output+0x2c>
    return ERR_OK;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	e1cf      	b.n	8011078 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d203      	bcs.n	8010cf0 <tcp_output+0x44>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010cee:	e002      	b.n	8010cf6 <tcp_output+0x4a>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cf6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	7e9b      	ldrb	r3, [r3, #26]
 8010d02:	f003 0302 	and.w	r3, r3, #2
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d017      	beq.n	8010d3a <tcp_output+0x8e>
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d00f      	beq.n	8010d30 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fa fd4e 	bl	800b7b8 <lwip_htonl>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d26:	8912      	ldrh	r2, [r2, #8]
 8010d28:	4413      	add	r3, r2
     (seg == NULL ||
 8010d2a:	69ba      	ldr	r2, [r7, #24]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d204      	bcs.n	8010d3a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f7ff ff5f 	bl	8010bf4 <tcp_send_empty_ack>
 8010d36:	4603      	mov	r3, r0
 8010d38:	e19e      	b.n	8011078 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d3e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010d40:	6a3b      	ldr	r3, [r7, #32]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d007      	beq.n	8010d56 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8010d46:	e002      	b.n	8010d4e <tcp_output+0xa2>
 8010d48:	6a3b      	ldr	r3, [r7, #32]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	623b      	str	r3, [r7, #32]
 8010d4e:	6a3b      	ldr	r3, [r7, #32]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d1f8      	bne.n	8010d48 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	3304      	adds	r3, #4
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f001 fec4 	bl	8012ae8 <ip4_route>
 8010d60:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d102      	bne.n	8010d6e <tcp_output+0xc2>
    return ERR_RTE;
 8010d68:	f06f 0303 	mvn.w	r3, #3
 8010d6c:	e184      	b.n	8011078 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d003      	beq.n	8010d7c <tcp_output+0xd0>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d111      	bne.n	8010da0 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d002      	beq.n	8010d88 <tcp_output+0xdc>
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	3304      	adds	r3, #4
 8010d86:	e000      	b.n	8010d8a <tcp_output+0xde>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d102      	bne.n	8010d98 <tcp_output+0xec>
      return ERR_RTE;
 8010d92:	f06f 0303 	mvn.w	r3, #3
 8010d96:	e16f      	b.n	8011078 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f000 813e 	beq.w	8011024 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8010da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7fa fd02 	bl	800b7b8 <lwip_htonl>
 8010db4:	4602      	mov	r2, r0
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dba:	1ad3      	subs	r3, r2, r3
 8010dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dbe:	8912      	ldrh	r2, [r2, #8]
 8010dc0:	4413      	add	r3, r2
  if (seg != NULL &&
 8010dc2:	69ba      	ldr	r2, [r7, #24]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	f080 812d 	bcs.w	8011024 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f000 8129 	beq.w	8011024 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010dd8:	461a      	mov	r2, r3
 8010dda:	69bb      	ldr	r3, [r7, #24]
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	f040 8121 	bne.w	8011024 <tcp_output+0x378>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f040 811c 	bne.w	8011024 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f040 812b 	bne.w	801104e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2201      	movs	r2, #1
 8010e04:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8010e08:	e121      	b.n	801104e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	899b      	ldrh	r3, [r3, #12]
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fa fcc2 	bl	800b79c <lwip_htons>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	f003 0304 	and.w	r3, r3, #4
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d006      	beq.n	8010e30 <tcp_output+0x184>
 8010e22:	4b42      	ldr	r3, [pc, #264]	; (8010f2c <tcp_output+0x280>)
 8010e24:	f240 4246 	movw	r2, #1094	; 0x446
 8010e28:	4944      	ldr	r1, [pc, #272]	; (8010f3c <tcp_output+0x290>)
 8010e2a:	4842      	ldr	r0, [pc, #264]	; (8010f34 <tcp_output+0x288>)
 8010e2c:	f003 febc 	bl	8014ba8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d01f      	beq.n	8010e78 <tcp_output+0x1cc>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	7e9b      	ldrb	r3, [r3, #26]
 8010e3c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d119      	bne.n	8010e78 <tcp_output+0x1cc>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00b      	beq.n	8010e64 <tcp_output+0x1b8>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d110      	bne.n	8010e78 <tcp_output+0x1cc>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e5a:	891a      	ldrh	r2, [r3, #8]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d209      	bcs.n	8010e78 <tcp_output+0x1cc>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d004      	beq.n	8010e78 <tcp_output+0x1cc>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e74:	2b08      	cmp	r3, #8
 8010e76:	d901      	bls.n	8010e7c <tcp_output+0x1d0>
 8010e78:	2301      	movs	r3, #1
 8010e7a:	e000      	b.n	8010e7e <tcp_output+0x1d2>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d106      	bne.n	8010e90 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	7e9b      	ldrb	r3, [r3, #26]
 8010e86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f000 80e1 	beq.w	8011052 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	7d1b      	ldrb	r3, [r3, #20]
 8010e94:	2b02      	cmp	r3, #2
 8010e96:	d00d      	beq.n	8010eb4 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	899b      	ldrh	r3, [r3, #12]
 8010e9e:	b29c      	uxth	r4, r3
 8010ea0:	2010      	movs	r0, #16
 8010ea2:	f7fa fc7b 	bl	800b79c <lwip_htons>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	4322      	orrs	r2, r4
 8010eb0:	b292      	uxth	r2, r2
 8010eb2:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8010eb4:	697a      	ldr	r2, [r7, #20]
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010eba:	f000 f8e1 	bl	8011080 <tcp_output_segment>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d009      	beq.n	8010ede <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	7e9b      	ldrb	r3, [r3, #26]
 8010ece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ed2:	b2da      	uxtb	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	769a      	strb	r2, [r3, #26]
      return err;
 8010ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010edc:	e0cc      	b.n	8011078 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8010ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	7d1b      	ldrb	r3, [r3, #20]
 8010eea:	2b02      	cmp	r3, #2
 8010eec:	d006      	beq.n	8010efc <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	7e9b      	ldrb	r3, [r3, #26]
 8010ef2:	f023 0303 	bic.w	r3, r3, #3
 8010ef6:	b2da      	uxtb	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fa fc58 	bl	800b7b8 <lwip_htonl>
 8010f08:	4604      	mov	r4, r0
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	891b      	ldrh	r3, [r3, #8]
 8010f0e:	461d      	mov	r5, r3
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	899b      	ldrh	r3, [r3, #12]
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7fa fc3f 	bl	800b79c <lwip_htons>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	f003 0303 	and.w	r3, r3, #3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d00b      	beq.n	8010f40 <tcp_output+0x294>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	e00a      	b.n	8010f42 <tcp_output+0x296>
 8010f2c:	08016acc 	.word	0x08016acc
 8010f30:	08016ed0 	.word	0x08016ed0
 8010f34:	08016b30 	.word	0x08016b30
 8010f38:	2000ab68 	.word	0x2000ab68
 8010f3c:	08016ef8 	.word	0x08016ef8
 8010f40:	2300      	movs	r3, #0
 8010f42:	442b      	add	r3, r5
 8010f44:	4423      	add	r3, r4
 8010f46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	1ad3      	subs	r3, r2, r3
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	da02      	bge.n	8010f5a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5c:	891b      	ldrh	r3, [r3, #8]
 8010f5e:	461c      	mov	r4, r3
 8010f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	899b      	ldrh	r3, [r3, #12]
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fa fc17 	bl	800b79c <lwip_htons>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	f003 0303 	and.w	r3, r3, #3
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <tcp_output+0x2d0>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e000      	b.n	8010f7e <tcp_output+0x2d2>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	4423      	add	r3, r4
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d049      	beq.n	8011018 <tcp_output+0x36c>
      seg->next = NULL;
 8010f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f86:	2200      	movs	r2, #0
 8010f88:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d105      	bne.n	8010f9e <tcp_output+0x2f2>
        pcb->unacked = seg;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f96:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8010f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9a:	623b      	str	r3, [r7, #32]
 8010f9c:	e03f      	b.n	801101e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fa fc07 	bl	800b7b8 <lwip_htonl>
 8010faa:	4604      	mov	r4, r0
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fa fc00 	bl	800b7b8 <lwip_htonl>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	1ae3      	subs	r3, r4, r3
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	da24      	bge.n	801100a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	336c      	adds	r3, #108	; 0x6c
 8010fc4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010fc6:	e002      	b.n	8010fce <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d011      	beq.n	8010ffa <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fa fbea 	bl	800b7b8 <lwip_htonl>
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fa fbe3 	bl	800b7b8 <lwip_htonl>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dbe6      	blt.n	8010fc8 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011000:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011006:	601a      	str	r2, [r3, #0]
 8011008:	e009      	b.n	801101e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801100a:	6a3b      	ldr	r3, [r7, #32]
 801100c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801100e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011010:	6a3b      	ldr	r3, [r7, #32]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	623b      	str	r3, [r7, #32]
 8011016:	e002      	b.n	801101e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801101a:	f7fc fea2 	bl	800dd62 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011022:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	2b00      	cmp	r3, #0
 8011028:	d015      	beq.n	8011056 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	4618      	mov	r0, r3
 8011032:	f7fa fbc1 	bl	800b7b8 <lwip_htonl>
 8011036:	4602      	mov	r2, r0
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801103c:	1ad3      	subs	r3, r2, r3
 801103e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011040:	8912      	ldrh	r2, [r2, #8]
 8011042:	4413      	add	r3, r2
  while (seg != NULL &&
 8011044:	69ba      	ldr	r2, [r7, #24]
 8011046:	429a      	cmp	r2, r3
 8011048:	f4bf aedf 	bcs.w	8010e0a <tcp_output+0x15e>
  }
output_done:
 801104c:	e003      	b.n	8011056 <tcp_output+0x3aa>
    goto output_done;
 801104e:	bf00      	nop
 8011050:	e002      	b.n	8011058 <tcp_output+0x3ac>
      break;
 8011052:	bf00      	nop
 8011054:	e000      	b.n	8011058 <tcp_output+0x3ac>
output_done:
 8011056:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801105c:	2b00      	cmp	r3, #0
 801105e:	d103      	bne.n	8011068 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	7e9b      	ldrb	r3, [r3, #26]
 801106c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011070:	b2da      	uxtb	r2, r3
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3728      	adds	r7, #40	; 0x28
 801107c:	46bd      	mov	sp, r7
 801107e:	bdb0      	pop	{r4, r5, r7, pc}

08011080 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011080:	b5b0      	push	{r4, r5, r7, lr}
 8011082:	b08c      	sub	sp, #48	; 0x30
 8011084:	af04      	add	r7, sp, #16
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	89db      	ldrh	r3, [r3, #14]
 8011092:	2b01      	cmp	r3, #1
 8011094:	d001      	beq.n	801109a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	e08b      	b.n	80111b2 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	68dc      	ldr	r4, [r3, #12]
 80110a2:	4610      	mov	r0, r2
 80110a4:	f7fa fb88 	bl	800b7b8 <lwip_htonl>
 80110a8:	4603      	mov	r3, r0
 80110aa:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	68dc      	ldr	r4, [r3, #12]
 80110b4:	4610      	mov	r0, r2
 80110b6:	f7fa fb71 	bl	800b79c <lwip_htons>
 80110ba:	4603      	mov	r3, r0
 80110bc:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c2:	68ba      	ldr	r2, [r7, #8]
 80110c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80110c6:	441a      	add	r2, r3
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	3314      	adds	r3, #20
 80110d2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	7a9b      	ldrb	r3, [r3, #10]
 80110d8:	f003 0301 	and.w	r3, r3, #1
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d014      	beq.n	801110a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	3304      	adds	r3, #4
 80110e4:	4619      	mov	r1, r3
 80110e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80110ea:	f7fd f8a5 	bl	800e238 <tcp_eff_send_mss_impl>
 80110ee:	4603      	mov	r3, r0
 80110f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80110f2:	8b7b      	ldrh	r3, [r7, #26]
 80110f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fa fb5d 	bl	800b7b8 <lwip_htonl>
 80110fe:	4602      	mov	r2, r0
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	3304      	adds	r3, #4
 8011108:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011110:	2b00      	cmp	r3, #0
 8011112:	da02      	bge.n	801111a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	2200      	movs	r2, #0
 8011118:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801111e:	2b00      	cmp	r3, #0
 8011120:	d10c      	bne.n	801113c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8011122:	4b26      	ldr	r3, [pc, #152]	; (80111bc <tcp_output_segment+0x13c>)
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	68db      	ldr	r3, [r3, #12]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	4618      	mov	r0, r3
 8011132:	f7fa fb41 	bl	800b7b8 <lwip_htonl>
 8011136:	4602      	mov	r2, r0
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	461a      	mov	r2, r3
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	1ad3      	subs	r3, r2, r3
 801114a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	8959      	ldrh	r1, [r3, #10]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	8b3a      	ldrh	r2, [r7, #24]
 8011158:	1a8a      	subs	r2, r1, r2
 801115a:	b292      	uxth	r2, r2
 801115c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	8919      	ldrh	r1, [r3, #8]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	8b3a      	ldrh	r2, [r7, #24]
 801116a:	1a8a      	subs	r2, r1, r2
 801116c:	b292      	uxth	r2, r2
 801116e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	68fa      	ldr	r2, [r7, #12]
 8011176:	68d2      	ldr	r2, [r2, #12]
 8011178:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	68db      	ldr	r3, [r3, #12]
 801117e:	2200      	movs	r2, #0
 8011180:	741a      	strb	r2, [r3, #16]
 8011182:	2200      	movs	r2, #0
 8011184:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	6858      	ldr	r0, [r3, #4]
 801118a:	68b9      	ldr	r1, [r7, #8]
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	1d1c      	adds	r4, r3, #4
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	7a9d      	ldrb	r5, [r3, #10]
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	7a5b      	ldrb	r3, [r3, #9]
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	9202      	str	r2, [sp, #8]
 801119c:	2206      	movs	r2, #6
 801119e:	9201      	str	r2, [sp, #4]
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	462b      	mov	r3, r5
 80111a4:	4622      	mov	r2, r4
 80111a6:	f001 fe3f 	bl	8012e28 <ip4_output_if>
 80111aa:	4603      	mov	r3, r0
 80111ac:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80111ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3720      	adds	r7, #32
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bdb0      	pop	{r4, r5, r7, pc}
 80111ba:	bf00      	nop
 80111bc:	2000ab58 	.word	0x2000ab58

080111c0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b08c      	sub	sp, #48	; 0x30
 80111c4:	af04      	add	r7, sp, #16
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	607a      	str	r2, [r7, #4]
 80111cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80111ce:	2200      	movs	r2, #0
 80111d0:	2114      	movs	r1, #20
 80111d2:	2001      	movs	r0, #1
 80111d4:	f7fb f900 	bl	800c3d8 <pbuf_alloc>
 80111d8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80111da:	69fb      	ldr	r3, [r7, #28]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d05b      	beq.n	8011298 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	895b      	ldrh	r3, [r3, #10]
 80111e4:	2b13      	cmp	r3, #19
 80111e6:	d806      	bhi.n	80111f6 <tcp_rst+0x36>
 80111e8:	4b2d      	ldr	r3, [pc, #180]	; (80112a0 <tcp_rst+0xe0>)
 80111ea:	f240 524d 	movw	r2, #1357	; 0x54d
 80111ee:	492d      	ldr	r1, [pc, #180]	; (80112a4 <tcp_rst+0xe4>)
 80111f0:	482d      	ldr	r0, [pc, #180]	; (80112a8 <tcp_rst+0xe8>)
 80111f2:	f003 fcd9 	bl	8014ba8 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80111fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fa facc 	bl	800b79c <lwip_htons>
 8011204:	4603      	mov	r3, r0
 8011206:	461a      	mov	r2, r3
 8011208:	69bb      	ldr	r3, [r7, #24]
 801120a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801120c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801120e:	4618      	mov	r0, r3
 8011210:	f7fa fac4 	bl	800b79c <lwip_htons>
 8011214:	4603      	mov	r3, r0
 8011216:	461a      	mov	r2, r3
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801121c:	68f8      	ldr	r0, [r7, #12]
 801121e:	f7fa facb 	bl	800b7b8 <lwip_htonl>
 8011222:	4602      	mov	r2, r0
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011228:	68b8      	ldr	r0, [r7, #8]
 801122a:	f7fa fac5 	bl	800b7b8 <lwip_htonl>
 801122e:	4602      	mov	r2, r0
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011234:	f245 0014 	movw	r0, #20500	; 0x5014
 8011238:	f7fa fab0 	bl	800b79c <lwip_htons>
 801123c:	4603      	mov	r3, r0
 801123e:	461a      	mov	r2, r3
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011244:	69bb      	ldr	r3, [r7, #24]
 8011246:	2200      	movs	r2, #0
 8011248:	f042 0208 	orr.w	r2, r2, #8
 801124c:	739a      	strb	r2, [r3, #14]
 801124e:	2200      	movs	r2, #0
 8011250:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011254:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	2200      	movs	r2, #0
 801125a:	741a      	strb	r2, [r3, #16]
 801125c:	2200      	movs	r2, #0
 801125e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011260:	69bb      	ldr	r3, [r7, #24]
 8011262:	2200      	movs	r2, #0
 8011264:	749a      	strb	r2, [r3, #18]
 8011266:	2200      	movs	r2, #0
 8011268:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801126a:	6838      	ldr	r0, [r7, #0]
 801126c:	f001 fc3c 	bl	8012ae8 <ip4_route>
 8011270:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00b      	beq.n	8011290 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	9302      	str	r3, [sp, #8]
 801127c:	2306      	movs	r3, #6
 801127e:	9301      	str	r3, [sp, #4]
 8011280:	2300      	movs	r3, #0
 8011282:	9300      	str	r3, [sp, #0]
 8011284:	23ff      	movs	r3, #255	; 0xff
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	6879      	ldr	r1, [r7, #4]
 801128a:	69f8      	ldr	r0, [r7, #28]
 801128c:	f001 fdcc 	bl	8012e28 <ip4_output_if>
  }
  pbuf_free(p);
 8011290:	69f8      	ldr	r0, [r7, #28]
 8011292:	f7fb fc13 	bl	800cabc <pbuf_free>
 8011296:	e000      	b.n	801129a <tcp_rst+0xda>
    return;
 8011298:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801129a:	3720      	adds	r7, #32
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}
 80112a0:	08016acc 	.word	0x08016acc
 80112a4:	08016b00 	.word	0x08016b00
 80112a8:	08016b30 	.word	0x08016b30

080112ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d029      	beq.n	8011310 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c0:	60fb      	str	r3, [r7, #12]
 80112c2:	e002      	b.n	80112ca <tcp_rexmit_rto+0x1e>
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	60fb      	str	r3, [r7, #12]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1f8      	bne.n	80112c4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2200      	movs	r2, #0
 80112e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112ee:	2bff      	cmp	r3, #255	; 0xff
 80112f0:	d007      	beq.n	8011302 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112f8:	3301      	adds	r3, #1
 80112fa:	b2da      	uxtb	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2200      	movs	r2, #0
 8011306:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7ff fccf 	bl	8010cac <tcp_output>
 801130e:	e000      	b.n	8011312 <tcp_rexmit_rto+0x66>
    return;
 8011310:	bf00      	nop
}
 8011312:	3710      	adds	r7, #16
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011318:	b590      	push	{r4, r7, lr}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011324:	2b00      	cmp	r3, #0
 8011326:	d043      	beq.n	80113b0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801132c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	3368      	adds	r3, #104	; 0x68
 801133a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801133c:	e002      	b.n	8011344 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d011      	beq.n	8011370 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	4618      	mov	r0, r3
 8011356:	f7fa fa2f 	bl	800b7b8 <lwip_htonl>
 801135a:	4604      	mov	r4, r0
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	4618      	mov	r0, r3
 8011364:	f7fa fa28 	bl	800b7b8 <lwip_htonl>
 8011368:	4603      	mov	r3, r0
 801136a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801136c:	2b00      	cmp	r3, #0
 801136e:	dbe6      	blt.n	801133e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	68ba      	ldr	r2, [r7, #8]
 801137c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d103      	bne.n	801138e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011394:	2bff      	cmp	r3, #255	; 0xff
 8011396:	d007      	beq.n	80113a8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801139e:	3301      	adds	r3, #1
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	635a      	str	r2, [r3, #52]	; 0x34
 80113ae:	e000      	b.n	80113b2 <tcp_rexmit+0x9a>
    return;
 80113b0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80113b2:	3714      	adds	r7, #20
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd90      	pop	{r4, r7, pc}

080113b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d04a      	beq.n	801145e <tcp_rexmit_fast+0xa6>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	7e9b      	ldrb	r3, [r3, #26]
 80113cc:	f003 0304 	and.w	r3, r3, #4
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d144      	bne.n	801145e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7ff ff9f 	bl	8011318 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d207      	bcs.n	80113fa <tcp_rexmit_fast+0x42>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113f0:	0fda      	lsrs	r2, r3, #31
 80113f2:	4413      	add	r3, r2
 80113f4:	105b      	asrs	r3, r3, #1
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	e006      	b.n	8011408 <tcp_rexmit_fast+0x50>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011400:	0fda      	lsrs	r2, r3, #31
 8011402:	4413      	add	r3, r2
 8011404:	105b      	asrs	r3, r3, #1
 8011406:	b29b      	uxth	r3, r3
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011414:	461a      	mov	r2, r3
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801141a:	005b      	lsls	r3, r3, #1
 801141c:	429a      	cmp	r2, r3
 801141e:	d206      	bcs.n	801142e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011424:	005b      	lsls	r3, r3, #1
 8011426:	b29a      	uxth	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011438:	4619      	mov	r1, r3
 801143a:	0049      	lsls	r1, r1, #1
 801143c:	440b      	add	r3, r1
 801143e:	b29b      	uxth	r3, r3
 8011440:	4413      	add	r3, r2
 8011442:	b29a      	uxth	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	7e9b      	ldrb	r3, [r3, #26]
 801144e:	f043 0304 	orr.w	r3, r3, #4
 8011452:	b2da      	uxtb	r2, r3
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801145e:	bf00      	nop
 8011460:	3708      	adds	r7, #8
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011466:	b580      	push	{r7, lr}
 8011468:	b08a      	sub	sp, #40	; 0x28
 801146a:	af04      	add	r7, sp, #16
 801146c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011472:	3b01      	subs	r3, #1
 8011474:	4618      	mov	r0, r3
 8011476:	f7fa f99f 	bl	800b7b8 <lwip_htonl>
 801147a:	4603      	mov	r3, r0
 801147c:	2200      	movs	r2, #0
 801147e:	2100      	movs	r1, #0
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff f977 	bl	8010774 <tcp_output_alloc_header>
 8011486:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d102      	bne.n	8011494 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801148e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011492:	e021      	b.n	80114d8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	3304      	adds	r3, #4
 8011498:	4618      	mov	r0, r3
 801149a:	f001 fb25 	bl	8012ae8 <ip4_route>
 801149e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d102      	bne.n	80114ac <tcp_keepalive+0x46>
    err = ERR_RTE;
 80114a6:	23fc      	movs	r3, #252	; 0xfc
 80114a8:	75fb      	strb	r3, [r7, #23]
 80114aa:	e010      	b.n	80114ce <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80114ac:	6879      	ldr	r1, [r7, #4]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	1d1a      	adds	r2, r3, #4
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	7a98      	ldrb	r0, [r3, #10]
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	9302      	str	r3, [sp, #8]
 80114ba:	2306      	movs	r3, #6
 80114bc:	9301      	str	r3, [sp, #4]
 80114be:	2300      	movs	r3, #0
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	4603      	mov	r3, r0
 80114c4:	6938      	ldr	r0, [r7, #16]
 80114c6:	f001 fcaf 	bl	8012e28 <ip4_output_if>
 80114ca:	4603      	mov	r3, r0
 80114cc:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80114ce:	6938      	ldr	r0, [r7, #16]
 80114d0:	f7fb faf4 	bl	800cabc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80114d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3718      	adds	r7, #24
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80114e0:	b590      	push	{r4, r7, lr}
 80114e2:	b08f      	sub	sp, #60	; 0x3c
 80114e4:	af04      	add	r7, sp, #16
 80114e6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114ec:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80114ee:	6a3b      	ldr	r3, [r7, #32]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80114f8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80114fa:	6a3b      	ldr	r3, [r7, #32]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d101      	bne.n	8011504 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8011500:	2300      	movs	r3, #0
 8011502:	e085      	b.n	8011610 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011504:	6a3b      	ldr	r3, [r7, #32]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	899b      	ldrh	r3, [r3, #12]
 801150a:	b29b      	uxth	r3, r3
 801150c:	4618      	mov	r0, r3
 801150e:	f7fa f945 	bl	800b79c <lwip_htons>
 8011512:	4603      	mov	r3, r0
 8011514:	f003 0301 	and.w	r3, r3, #1
 8011518:	2b00      	cmp	r3, #0
 801151a:	d005      	beq.n	8011528 <tcp_zero_window_probe+0x48>
 801151c:	6a3b      	ldr	r3, [r7, #32]
 801151e:	891b      	ldrh	r3, [r3, #8]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <tcp_zero_window_probe+0x48>
 8011524:	2301      	movs	r3, #1
 8011526:	e000      	b.n	801152a <tcp_zero_window_probe+0x4a>
 8011528:	2300      	movs	r3, #0
 801152a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801152c:	7ffb      	ldrb	r3, [r7, #31]
 801152e:	2b00      	cmp	r3, #0
 8011530:	bf0c      	ite	eq
 8011532:	2301      	moveq	r3, #1
 8011534:	2300      	movne	r3, #0
 8011536:	b2db      	uxtb	r3, r3
 8011538:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	8bba      	ldrh	r2, [r7, #28]
 8011542:	2100      	movs	r1, #0
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7ff f915 	bl	8010774 <tcp_output_alloc_header>
 801154a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d102      	bne.n	8011558 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011556:	e05b      	b.n	8011610 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801155e:	7ffb      	ldrb	r3, [r7, #31]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d00e      	beq.n	8011582 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	899b      	ldrh	r3, [r3, #12]
 8011568:	b29b      	uxth	r3, r3
 801156a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801156e:	b29c      	uxth	r4, r3
 8011570:	2011      	movs	r0, #17
 8011572:	f7fa f913 	bl	800b79c <lwip_htons>
 8011576:	4603      	mov	r3, r0
 8011578:	4323      	orrs	r3, r4
 801157a:	b29a      	uxth	r2, r3
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	819a      	strh	r2, [r3, #12]
 8011580:	e010      	b.n	80115a4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	3314      	adds	r3, #20
 8011588:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801158a:	6a3b      	ldr	r3, [r7, #32]
 801158c:	6858      	ldr	r0, [r3, #4]
 801158e:	6a3b      	ldr	r3, [r7, #32]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	891a      	ldrh	r2, [r3, #8]
 8011594:	6a3b      	ldr	r3, [r7, #32]
 8011596:	891b      	ldrh	r3, [r3, #8]
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	b29b      	uxth	r3, r3
 801159c:	2201      	movs	r2, #1
 801159e:	6939      	ldr	r1, [r7, #16]
 80115a0:	f7fb fc88 	bl	800ceb4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80115a4:	6a3b      	ldr	r3, [r7, #32]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fa f904 	bl	800b7b8 <lwip_htonl>
 80115b0:	4603      	mov	r3, r0
 80115b2:	3301      	adds	r3, #1
 80115b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	2b00      	cmp	r3, #0
 80115c0:	da02      	bge.n	80115c8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	3304      	adds	r3, #4
 80115cc:	4618      	mov	r0, r3
 80115ce:	f001 fa8b 	bl	8012ae8 <ip4_route>
 80115d2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d103      	bne.n	80115e2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80115da:	23fc      	movs	r3, #252	; 0xfc
 80115dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80115e0:	e011      	b.n	8011606 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80115e2:	6879      	ldr	r1, [r7, #4]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	1d1a      	adds	r2, r3, #4
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	7a98      	ldrb	r0, [r3, #10]
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	9302      	str	r3, [sp, #8]
 80115f0:	2306      	movs	r3, #6
 80115f2:	9301      	str	r3, [sp, #4]
 80115f4:	2300      	movs	r3, #0
 80115f6:	9300      	str	r3, [sp, #0]
 80115f8:	4603      	mov	r3, r0
 80115fa:	69b8      	ldr	r0, [r7, #24]
 80115fc:	f001 fc14 	bl	8012e28 <ip4_output_if>
 8011600:	4603      	mov	r3, r0
 8011602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8011606:	69b8      	ldr	r0, [r7, #24]
 8011608:	f7fb fa58 	bl	800cabc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801160c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011610:	4618      	mov	r0, r3
 8011612:	372c      	adds	r7, #44	; 0x2c
 8011614:	46bd      	mov	sp, r7
 8011616:	bd90      	pop	{r4, r7, pc}

08011618 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011620:	f7fb fcca 	bl	800cfb8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011624:	4b0a      	ldr	r3, [pc, #40]	; (8011650 <tcpip_tcp_timer+0x38>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d103      	bne.n	8011634 <tcpip_tcp_timer+0x1c>
 801162c:	4b09      	ldr	r3, [pc, #36]	; (8011654 <tcpip_tcp_timer+0x3c>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d005      	beq.n	8011640 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011634:	2200      	movs	r2, #0
 8011636:	4908      	ldr	r1, [pc, #32]	; (8011658 <tcpip_tcp_timer+0x40>)
 8011638:	20fa      	movs	r0, #250	; 0xfa
 801163a:	f000 f86f 	bl	801171c <sys_timeout>
 801163e:	e002      	b.n	8011646 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011640:	4b06      	ldr	r3, [pc, #24]	; (801165c <tcpip_tcp_timer+0x44>)
 8011642:	2200      	movs	r2, #0
 8011644:	601a      	str	r2, [r3, #0]
  }
}
 8011646:	bf00      	nop
 8011648:	3708      	adds	r7, #8
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	2000ab54 	.word	0x2000ab54
 8011654:	2000ab64 	.word	0x2000ab64
 8011658:	08011619 	.word	0x08011619
 801165c:	20004238 	.word	0x20004238

08011660 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011664:	4b0a      	ldr	r3, [pc, #40]	; (8011690 <tcp_timer_needed+0x30>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d10f      	bne.n	801168c <tcp_timer_needed+0x2c>
 801166c:	4b09      	ldr	r3, [pc, #36]	; (8011694 <tcp_timer_needed+0x34>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d103      	bne.n	801167c <tcp_timer_needed+0x1c>
 8011674:	4b08      	ldr	r3, [pc, #32]	; (8011698 <tcp_timer_needed+0x38>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d007      	beq.n	801168c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801167c:	4b04      	ldr	r3, [pc, #16]	; (8011690 <tcp_timer_needed+0x30>)
 801167e:	2201      	movs	r2, #1
 8011680:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011682:	2200      	movs	r2, #0
 8011684:	4905      	ldr	r1, [pc, #20]	; (801169c <tcp_timer_needed+0x3c>)
 8011686:	20fa      	movs	r0, #250	; 0xfa
 8011688:	f000 f848 	bl	801171c <sys_timeout>
  }
}
 801168c:	bf00      	nop
 801168e:	bd80      	pop	{r7, pc}
 8011690:	20004238 	.word	0x20004238
 8011694:	2000ab54 	.word	0x2000ab54
 8011698:	2000ab64 	.word	0x2000ab64
 801169c:	08011619 	.word	0x08011619

080116a0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b084      	sub	sp, #16
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	4903      	ldr	r1, [pc, #12]	; (80116c8 <cyclic_timer+0x28>)
 80116ba:	4618      	mov	r0, r3
 80116bc:	f000 f82e 	bl	801171c <sys_timeout>
}
 80116c0:	bf00      	nop
 80116c2:	3710      	adds	r7, #16
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	080116a1 	.word	0x080116a1

080116cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80116d2:	2301      	movs	r3, #1
 80116d4:	607b      	str	r3, [r7, #4]
 80116d6:	e00e      	b.n	80116f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80116d8:	4a0d      	ldr	r2, [pc, #52]	; (8011710 <sys_timeouts_init+0x44>)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	00db      	lsls	r3, r3, #3
 80116e4:	4a0a      	ldr	r2, [pc, #40]	; (8011710 <sys_timeouts_init+0x44>)
 80116e6:	4413      	add	r3, r2
 80116e8:	461a      	mov	r2, r3
 80116ea:	490a      	ldr	r1, [pc, #40]	; (8011714 <sys_timeouts_init+0x48>)
 80116ec:	f000 f816 	bl	801171c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3301      	adds	r3, #1
 80116f4:	607b      	str	r3, [r7, #4]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2b02      	cmp	r3, #2
 80116fa:	d9ed      	bls.n	80116d8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80116fc:	f7f5 fd06 	bl	800710c <sys_now>
 8011700:	4602      	mov	r2, r0
 8011702:	4b05      	ldr	r3, [pc, #20]	; (8011718 <sys_timeouts_init+0x4c>)
 8011704:	601a      	str	r2, [r3, #0]
}
 8011706:	bf00      	nop
 8011708:	3708      	adds	r7, #8
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	08017770 	.word	0x08017770
 8011714:	080116a1 	.word	0x080116a1
 8011718:	20004234 	.word	0x20004234

0801171c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b088      	sub	sp, #32
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011728:	2009      	movs	r0, #9
 801172a:	f7fa fc23 	bl	800bf74 <memp_malloc>
 801172e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d10a      	bne.n	801174c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f040 8084 	bne.w	8011846 <sys_timeout+0x12a>
 801173e:	4b44      	ldr	r3, [pc, #272]	; (8011850 <sys_timeout+0x134>)
 8011740:	22d4      	movs	r2, #212	; 0xd4
 8011742:	4944      	ldr	r1, [pc, #272]	; (8011854 <sys_timeout+0x138>)
 8011744:	4844      	ldr	r0, [pc, #272]	; (8011858 <sys_timeout+0x13c>)
 8011746:	f003 fa2f 	bl	8014ba8 <iprintf>
    return;
 801174a:	e07c      	b.n	8011846 <sys_timeout+0x12a>
  }

  now = sys_now();
 801174c:	f7f5 fcde 	bl	800710c <sys_now>
 8011750:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011752:	4b42      	ldr	r3, [pc, #264]	; (801185c <sys_timeout+0x140>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d105      	bne.n	8011766 <sys_timeout+0x4a>
    diff = 0;
 801175a:	2300      	movs	r3, #0
 801175c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801175e:	4a40      	ldr	r2, [pc, #256]	; (8011860 <sys_timeout+0x144>)
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	6013      	str	r3, [r2, #0]
 8011764:	e004      	b.n	8011770 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011766:	4b3e      	ldr	r3, [pc, #248]	; (8011860 <sys_timeout+0x144>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	693a      	ldr	r2, [r7, #16]
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	2200      	movs	r2, #0
 8011774:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011782:	68fa      	ldr	r2, [r7, #12]
 8011784:	69bb      	ldr	r3, [r7, #24]
 8011786:	441a      	add	r2, r3
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801178c:	4b33      	ldr	r3, [pc, #204]	; (801185c <sys_timeout+0x140>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d103      	bne.n	801179c <sys_timeout+0x80>
    next_timeout = timeout;
 8011794:	4a31      	ldr	r2, [pc, #196]	; (801185c <sys_timeout+0x140>)
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	6013      	str	r3, [r2, #0]
    return;
 801179a:	e055      	b.n	8011848 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801179c:	4b2f      	ldr	r3, [pc, #188]	; (801185c <sys_timeout+0x140>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d20f      	bcs.n	80117c8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80117a8:	4b2c      	ldr	r3, [pc, #176]	; (801185c <sys_timeout+0x140>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	6859      	ldr	r1, [r3, #4]
 80117ae:	4b2b      	ldr	r3, [pc, #172]	; (801185c <sys_timeout+0x140>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	68fa      	ldr	r2, [r7, #12]
 80117b4:	1a8a      	subs	r2, r1, r2
 80117b6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80117b8:	4b28      	ldr	r3, [pc, #160]	; (801185c <sys_timeout+0x140>)
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80117c0:	4a26      	ldr	r2, [pc, #152]	; (801185c <sys_timeout+0x140>)
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	6013      	str	r3, [r2, #0]
 80117c6:	e03f      	b.n	8011848 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80117c8:	4b24      	ldr	r3, [pc, #144]	; (801185c <sys_timeout+0x140>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	61fb      	str	r3, [r7, #28]
 80117ce:	e036      	b.n	801183e <sys_timeout+0x122>
      timeout->time -= t->time;
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	1ad2      	subs	r2, r2, r3
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80117de:	69fb      	ldr	r3, [r7, #28]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d006      	beq.n	80117f4 <sys_timeout+0xd8>
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d921      	bls.n	8011838 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d009      	beq.n	8011810 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	6859      	ldr	r1, [r3, #4]
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	685a      	ldr	r2, [r3, #4]
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	1a8a      	subs	r2, r1, r2
 801180c:	605a      	str	r2, [r3, #4]
 801180e:	e00b      	b.n	8011828 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	429a      	cmp	r2, r3
 8011818:	d206      	bcs.n	8011828 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801181a:	4b10      	ldr	r3, [pc, #64]	; (801185c <sys_timeout+0x140>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	685a      	ldr	r2, [r3, #4]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	441a      	add	r2, r3
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	697a      	ldr	r2, [r7, #20]
 8011834:	601a      	str	r2, [r3, #0]
        break;
 8011836:	e007      	b.n	8011848 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	61fb      	str	r3, [r7, #28]
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1c5      	bne.n	80117d0 <sys_timeout+0xb4>
 8011844:	e000      	b.n	8011848 <sys_timeout+0x12c>
    return;
 8011846:	bf00      	nop
      }
    }
  }
}
 8011848:	3720      	adds	r7, #32
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	08016f10 	.word	0x08016f10
 8011854:	08016f44 	.word	0x08016f44
 8011858:	08016f84 	.word	0x08016f84
 801185c:	20004230 	.word	0x20004230
 8011860:	20004234 	.word	0x20004234

08011864 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801186a:	4b24      	ldr	r3, [pc, #144]	; (80118fc <sys_check_timeouts+0x98>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d03f      	beq.n	80118f2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011872:	f7f5 fc4b 	bl	800710c <sys_now>
 8011876:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011878:	4b21      	ldr	r3, [pc, #132]	; (8011900 <sys_check_timeouts+0x9c>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	1ad3      	subs	r3, r2, r3
 8011880:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011882:	2300      	movs	r3, #0
 8011884:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011886:	4b1d      	ldr	r3, [pc, #116]	; (80118fc <sys_check_timeouts+0x98>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d02c      	beq.n	80118ec <sys_check_timeouts+0x88>
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	697a      	ldr	r2, [r7, #20]
 8011898:	429a      	cmp	r2, r3
 801189a:	d327      	bcc.n	80118ec <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 801189c:	2301      	movs	r3, #1
 801189e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	685a      	ldr	r2, [r3, #4]
 80118a4:	4b16      	ldr	r3, [pc, #88]	; (8011900 <sys_check_timeouts+0x9c>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4413      	add	r3, r2
 80118aa:	4a15      	ldr	r2, [pc, #84]	; (8011900 <sys_check_timeouts+0x9c>)
 80118ac:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	697a      	ldr	r2, [r7, #20]
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	4a0f      	ldr	r2, [pc, #60]	; (80118fc <sys_check_timeouts+0x98>)
 80118be:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	689b      	ldr	r3, [r3, #8]
 80118c4:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80118cc:	68b9      	ldr	r1, [r7, #8]
 80118ce:	2009      	movs	r0, #9
 80118d0:	f7fa fba2 	bl	800c018 <memp_free>
        if (handler != NULL) {
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d008      	beq.n	80118ec <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80118da:	480a      	ldr	r0, [pc, #40]	; (8011904 <sys_check_timeouts+0xa0>)
 80118dc:	f002 fb2c 	bl	8013f38 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6838      	ldr	r0, [r7, #0]
 80118e4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80118e6:	4807      	ldr	r0, [pc, #28]	; (8011904 <sys_check_timeouts+0xa0>)
 80118e8:	f002 fb35 	bl	8013f56 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80118ec:	7cfb      	ldrb	r3, [r7, #19]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d1c7      	bne.n	8011882 <sys_check_timeouts+0x1e>
  }
}
 80118f2:	bf00      	nop
 80118f4:	3718      	adds	r7, #24
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	20004230 	.word	0x20004230
 8011900:	20004234 	.word	0x20004234
 8011904:	200074c4 	.word	0x200074c4

08011908 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 801190e:	4b0f      	ldr	r3, [pc, #60]	; (801194c <sys_timeouts_sleeptime+0x44>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d102      	bne.n	801191c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8011916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801191a:	e013      	b.n	8011944 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 801191c:	f7f5 fbf6 	bl	800710c <sys_now>
 8011920:	4602      	mov	r2, r0
 8011922:	4b0b      	ldr	r3, [pc, #44]	; (8011950 <sys_timeouts_sleeptime+0x48>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801192a:	4b08      	ldr	r3, [pc, #32]	; (801194c <sys_timeouts_sleeptime+0x44>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	687a      	ldr	r2, [r7, #4]
 8011932:	429a      	cmp	r2, r3
 8011934:	d901      	bls.n	801193a <sys_timeouts_sleeptime+0x32>
    return 0;
 8011936:	2300      	movs	r3, #0
 8011938:	e004      	b.n	8011944 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801193a:	4b04      	ldr	r3, [pc, #16]	; (801194c <sys_timeouts_sleeptime+0x44>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	685a      	ldr	r2, [r3, #4]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	1ad3      	subs	r3, r2, r3
  }
}
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	20004230 	.word	0x20004230
 8011950:	20004234 	.word	0x20004234

08011954 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801195e:	4b0f      	ldr	r3, [pc, #60]	; (801199c <sys_timeouts_mbox_fetch+0x48>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d105      	bne.n	8011972 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011966:	2200      	movs	r2, #0
 8011968:	6839      	ldr	r1, [r7, #0]
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f002 fa69 	bl	8013e42 <sys_arch_mbox_fetch>
    return;
 8011970:	e011      	b.n	8011996 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011972:	f7ff ffc9 	bl	8011908 <sys_timeouts_sleeptime>
 8011976:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d008      	beq.n	8011990 <sys_timeouts_mbox_fetch+0x3c>
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	6839      	ldr	r1, [r7, #0]
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f002 fa5d 	bl	8013e42 <sys_arch_mbox_fetch>
 8011988:	4603      	mov	r3, r0
 801198a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801198e:	d102      	bne.n	8011996 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011990:	f7ff ff68 	bl	8011864 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011994:	e7e3      	b.n	801195e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011996:	3710      	adds	r7, #16
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	20004230 	.word	0x20004230

080119a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80119a8:	4915      	ldr	r1, [pc, #84]	; (8011a00 <etharp_free_entry+0x60>)
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	4613      	mov	r3, r2
 80119ae:	005b      	lsls	r3, r3, #1
 80119b0:	4413      	add	r3, r2
 80119b2:	00db      	lsls	r3, r3, #3
 80119b4:	440b      	add	r3, r1
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d013      	beq.n	80119e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80119bc:	4910      	ldr	r1, [pc, #64]	; (8011a00 <etharp_free_entry+0x60>)
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	4613      	mov	r3, r2
 80119c2:	005b      	lsls	r3, r3, #1
 80119c4:	4413      	add	r3, r2
 80119c6:	00db      	lsls	r3, r3, #3
 80119c8:	440b      	add	r3, r1
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fb f875 	bl	800cabc <pbuf_free>
    arp_table[i].q = NULL;
 80119d2:	490b      	ldr	r1, [pc, #44]	; (8011a00 <etharp_free_entry+0x60>)
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	4613      	mov	r3, r2
 80119d8:	005b      	lsls	r3, r3, #1
 80119da:	4413      	add	r3, r2
 80119dc:	00db      	lsls	r3, r3, #3
 80119de:	440b      	add	r3, r1
 80119e0:	2200      	movs	r2, #0
 80119e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80119e4:	4906      	ldr	r1, [pc, #24]	; (8011a00 <etharp_free_entry+0x60>)
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	4613      	mov	r3, r2
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	4413      	add	r3, r2
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	440b      	add	r3, r1
 80119f2:	3314      	adds	r3, #20
 80119f4:	2200      	movs	r2, #0
 80119f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80119f8:	bf00      	nop
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	2000423c 	.word	0x2000423c

08011a04 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	71fb      	strb	r3, [r7, #7]
 8011a0e:	e096      	b.n	8011b3e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011a10:	79fa      	ldrb	r2, [r7, #7]
 8011a12:	494f      	ldr	r1, [pc, #316]	; (8011b50 <etharp_tmr+0x14c>)
 8011a14:	4613      	mov	r3, r2
 8011a16:	005b      	lsls	r3, r3, #1
 8011a18:	4413      	add	r3, r2
 8011a1a:	00db      	lsls	r3, r3, #3
 8011a1c:	440b      	add	r3, r1
 8011a1e:	3314      	adds	r3, #20
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8011a24:	79bb      	ldrb	r3, [r7, #6]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	f000 8086 	beq.w	8011b38 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8011a2c:	79fa      	ldrb	r2, [r7, #7]
 8011a2e:	4948      	ldr	r1, [pc, #288]	; (8011b50 <etharp_tmr+0x14c>)
 8011a30:	4613      	mov	r3, r2
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	4413      	add	r3, r2
 8011a36:	00db      	lsls	r3, r3, #3
 8011a38:	440b      	add	r3, r1
 8011a3a:	3312      	adds	r3, #18
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	b298      	uxth	r0, r3
 8011a42:	4943      	ldr	r1, [pc, #268]	; (8011b50 <etharp_tmr+0x14c>)
 8011a44:	4613      	mov	r3, r2
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	4413      	add	r3, r2
 8011a4a:	00db      	lsls	r3, r3, #3
 8011a4c:	440b      	add	r3, r1
 8011a4e:	3312      	adds	r3, #18
 8011a50:	4602      	mov	r2, r0
 8011a52:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011a54:	79fa      	ldrb	r2, [r7, #7]
 8011a56:	493e      	ldr	r1, [pc, #248]	; (8011b50 <etharp_tmr+0x14c>)
 8011a58:	4613      	mov	r3, r2
 8011a5a:	005b      	lsls	r3, r3, #1
 8011a5c:	4413      	add	r3, r2
 8011a5e:	00db      	lsls	r3, r3, #3
 8011a60:	440b      	add	r3, r1
 8011a62:	3312      	adds	r3, #18
 8011a64:	881b      	ldrh	r3, [r3, #0]
 8011a66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011a6a:	d215      	bcs.n	8011a98 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011a6c:	79fa      	ldrb	r2, [r7, #7]
 8011a6e:	4938      	ldr	r1, [pc, #224]	; (8011b50 <etharp_tmr+0x14c>)
 8011a70:	4613      	mov	r3, r2
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	4413      	add	r3, r2
 8011a76:	00db      	lsls	r3, r3, #3
 8011a78:	440b      	add	r3, r1
 8011a7a:	3314      	adds	r3, #20
 8011a7c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	d10f      	bne.n	8011aa2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011a82:	79fa      	ldrb	r2, [r7, #7]
 8011a84:	4932      	ldr	r1, [pc, #200]	; (8011b50 <etharp_tmr+0x14c>)
 8011a86:	4613      	mov	r3, r2
 8011a88:	005b      	lsls	r3, r3, #1
 8011a8a:	4413      	add	r3, r2
 8011a8c:	00db      	lsls	r3, r3, #3
 8011a8e:	440b      	add	r3, r1
 8011a90:	3312      	adds	r3, #18
 8011a92:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011a94:	2b04      	cmp	r3, #4
 8011a96:	d904      	bls.n	8011aa2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011a98:	79fb      	ldrb	r3, [r7, #7]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7ff ff80 	bl	80119a0 <etharp_free_entry>
 8011aa0:	e04a      	b.n	8011b38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011aa2:	79fa      	ldrb	r2, [r7, #7]
 8011aa4:	492a      	ldr	r1, [pc, #168]	; (8011b50 <etharp_tmr+0x14c>)
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	4413      	add	r3, r2
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	440b      	add	r3, r1
 8011ab0:	3314      	adds	r3, #20
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	2b03      	cmp	r3, #3
 8011ab6:	d10a      	bne.n	8011ace <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011ab8:	79fa      	ldrb	r2, [r7, #7]
 8011aba:	4925      	ldr	r1, [pc, #148]	; (8011b50 <etharp_tmr+0x14c>)
 8011abc:	4613      	mov	r3, r2
 8011abe:	005b      	lsls	r3, r3, #1
 8011ac0:	4413      	add	r3, r2
 8011ac2:	00db      	lsls	r3, r3, #3
 8011ac4:	440b      	add	r3, r1
 8011ac6:	3314      	adds	r3, #20
 8011ac8:	2204      	movs	r2, #4
 8011aca:	701a      	strb	r2, [r3, #0]
 8011acc:	e034      	b.n	8011b38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011ace:	79fa      	ldrb	r2, [r7, #7]
 8011ad0:	491f      	ldr	r1, [pc, #124]	; (8011b50 <etharp_tmr+0x14c>)
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	4413      	add	r3, r2
 8011ad8:	00db      	lsls	r3, r3, #3
 8011ada:	440b      	add	r3, r1
 8011adc:	3314      	adds	r3, #20
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	2b04      	cmp	r3, #4
 8011ae2:	d10a      	bne.n	8011afa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011ae4:	79fa      	ldrb	r2, [r7, #7]
 8011ae6:	491a      	ldr	r1, [pc, #104]	; (8011b50 <etharp_tmr+0x14c>)
 8011ae8:	4613      	mov	r3, r2
 8011aea:	005b      	lsls	r3, r3, #1
 8011aec:	4413      	add	r3, r2
 8011aee:	00db      	lsls	r3, r3, #3
 8011af0:	440b      	add	r3, r1
 8011af2:	3314      	adds	r3, #20
 8011af4:	2202      	movs	r2, #2
 8011af6:	701a      	strb	r2, [r3, #0]
 8011af8:	e01e      	b.n	8011b38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011afa:	79fa      	ldrb	r2, [r7, #7]
 8011afc:	4914      	ldr	r1, [pc, #80]	; (8011b50 <etharp_tmr+0x14c>)
 8011afe:	4613      	mov	r3, r2
 8011b00:	005b      	lsls	r3, r3, #1
 8011b02:	4413      	add	r3, r2
 8011b04:	00db      	lsls	r3, r3, #3
 8011b06:	440b      	add	r3, r1
 8011b08:	3314      	adds	r3, #20
 8011b0a:	781b      	ldrb	r3, [r3, #0]
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d113      	bne.n	8011b38 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011b10:	79fa      	ldrb	r2, [r7, #7]
 8011b12:	490f      	ldr	r1, [pc, #60]	; (8011b50 <etharp_tmr+0x14c>)
 8011b14:	4613      	mov	r3, r2
 8011b16:	005b      	lsls	r3, r3, #1
 8011b18:	4413      	add	r3, r2
 8011b1a:	00db      	lsls	r3, r3, #3
 8011b1c:	440b      	add	r3, r1
 8011b1e:	3308      	adds	r3, #8
 8011b20:	6818      	ldr	r0, [r3, #0]
 8011b22:	79fa      	ldrb	r2, [r7, #7]
 8011b24:	4613      	mov	r3, r2
 8011b26:	005b      	lsls	r3, r3, #1
 8011b28:	4413      	add	r3, r2
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	4a08      	ldr	r2, [pc, #32]	; (8011b50 <etharp_tmr+0x14c>)
 8011b2e:	4413      	add	r3, r2
 8011b30:	3304      	adds	r3, #4
 8011b32:	4619      	mov	r1, r3
 8011b34:	f000 fe38 	bl	80127a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b38:	79fb      	ldrb	r3, [r7, #7]
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	71fb      	strb	r3, [r7, #7]
 8011b3e:	79fb      	ldrb	r3, [r7, #7]
 8011b40:	2b09      	cmp	r3, #9
 8011b42:	f67f af65 	bls.w	8011a10 <etharp_tmr+0xc>
      }
    }
  }
}
 8011b46:	bf00      	nop
 8011b48:	3708      	adds	r7, #8
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	2000423c 	.word	0x2000423c

08011b54 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b088      	sub	sp, #32
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	607a      	str	r2, [r7, #4]
 8011b60:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011b62:	230a      	movs	r3, #10
 8011b64:	77fb      	strb	r3, [r7, #31]
 8011b66:	230a      	movs	r3, #10
 8011b68:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8011b6a:	230a      	movs	r3, #10
 8011b6c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8011b72:	230a      	movs	r3, #10
 8011b74:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011b76:	2300      	movs	r3, #0
 8011b78:	833b      	strh	r3, [r7, #24]
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	82fb      	strh	r3, [r7, #22]
 8011b7e:	2300      	movs	r3, #0
 8011b80:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b82:	2300      	movs	r3, #0
 8011b84:	773b      	strb	r3, [r7, #28]
 8011b86:	e093      	b.n	8011cb0 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8011b88:	7f3a      	ldrb	r2, [r7, #28]
 8011b8a:	4990      	ldr	r1, [pc, #576]	; (8011dcc <etharp_find_entry+0x278>)
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	005b      	lsls	r3, r3, #1
 8011b90:	4413      	add	r3, r2
 8011b92:	00db      	lsls	r3, r3, #3
 8011b94:	440b      	add	r3, r1
 8011b96:	3314      	adds	r3, #20
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011b9c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011ba0:	2b0a      	cmp	r3, #10
 8011ba2:	d105      	bne.n	8011bb0 <etharp_find_entry+0x5c>
 8011ba4:	7cfb      	ldrb	r3, [r7, #19]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d102      	bne.n	8011bb0 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8011baa:	7f3b      	ldrb	r3, [r7, #28]
 8011bac:	777b      	strb	r3, [r7, #29]
 8011bae:	e07c      	b.n	8011caa <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011bb0:	7cfb      	ldrb	r3, [r7, #19]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d079      	beq.n	8011caa <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011bb6:	7cfb      	ldrb	r3, [r7, #19]
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d009      	beq.n	8011bd0 <etharp_find_entry+0x7c>
 8011bbc:	7cfb      	ldrb	r3, [r7, #19]
 8011bbe:	2b01      	cmp	r3, #1
 8011bc0:	d806      	bhi.n	8011bd0 <etharp_find_entry+0x7c>
 8011bc2:	4b83      	ldr	r3, [pc, #524]	; (8011dd0 <etharp_find_entry+0x27c>)
 8011bc4:	f44f 7293 	mov.w	r2, #294	; 0x126
 8011bc8:	4982      	ldr	r1, [pc, #520]	; (8011dd4 <etharp_find_entry+0x280>)
 8011bca:	4883      	ldr	r0, [pc, #524]	; (8011dd8 <etharp_find_entry+0x284>)
 8011bcc:	f002 ffec 	bl	8014ba8 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00f      	beq.n	8011bf6 <etharp_find_entry+0xa2>
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6819      	ldr	r1, [r3, #0]
 8011bda:	7f3a      	ldrb	r2, [r7, #28]
 8011bdc:	487b      	ldr	r0, [pc, #492]	; (8011dcc <etharp_find_entry+0x278>)
 8011bde:	4613      	mov	r3, r2
 8011be0:	005b      	lsls	r3, r3, #1
 8011be2:	4413      	add	r3, r2
 8011be4:	00db      	lsls	r3, r3, #3
 8011be6:	4403      	add	r3, r0
 8011be8:	3304      	adds	r3, #4
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4299      	cmp	r1, r3
 8011bee:	d102      	bne.n	8011bf6 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011bf0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011bf4:	e0e5      	b.n	8011dc2 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011bf6:	7cfb      	ldrb	r3, [r7, #19]
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d13b      	bne.n	8011c74 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011bfc:	7f3a      	ldrb	r2, [r7, #28]
 8011bfe:	4973      	ldr	r1, [pc, #460]	; (8011dcc <etharp_find_entry+0x278>)
 8011c00:	4613      	mov	r3, r2
 8011c02:	005b      	lsls	r3, r3, #1
 8011c04:	4413      	add	r3, r2
 8011c06:	00db      	lsls	r3, r3, #3
 8011c08:	440b      	add	r3, r1
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d018      	beq.n	8011c42 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8011c10:	7f3a      	ldrb	r2, [r7, #28]
 8011c12:	496e      	ldr	r1, [pc, #440]	; (8011dcc <etharp_find_entry+0x278>)
 8011c14:	4613      	mov	r3, r2
 8011c16:	005b      	lsls	r3, r3, #1
 8011c18:	4413      	add	r3, r2
 8011c1a:	00db      	lsls	r3, r3, #3
 8011c1c:	440b      	add	r3, r1
 8011c1e:	3312      	adds	r3, #18
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	8b3a      	ldrh	r2, [r7, #24]
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d840      	bhi.n	8011caa <etharp_find_entry+0x156>
            old_queue = i;
 8011c28:	7f3b      	ldrb	r3, [r7, #28]
 8011c2a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8011c2c:	7f3a      	ldrb	r2, [r7, #28]
 8011c2e:	4967      	ldr	r1, [pc, #412]	; (8011dcc <etharp_find_entry+0x278>)
 8011c30:	4613      	mov	r3, r2
 8011c32:	005b      	lsls	r3, r3, #1
 8011c34:	4413      	add	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	440b      	add	r3, r1
 8011c3a:	3312      	adds	r3, #18
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	833b      	strh	r3, [r7, #24]
 8011c40:	e033      	b.n	8011caa <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011c42:	7f3a      	ldrb	r2, [r7, #28]
 8011c44:	4961      	ldr	r1, [pc, #388]	; (8011dcc <etharp_find_entry+0x278>)
 8011c46:	4613      	mov	r3, r2
 8011c48:	005b      	lsls	r3, r3, #1
 8011c4a:	4413      	add	r3, r2
 8011c4c:	00db      	lsls	r3, r3, #3
 8011c4e:	440b      	add	r3, r1
 8011c50:	3312      	adds	r3, #18
 8011c52:	881b      	ldrh	r3, [r3, #0]
 8011c54:	8afa      	ldrh	r2, [r7, #22]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d827      	bhi.n	8011caa <etharp_find_entry+0x156>
            old_pending = i;
 8011c5a:	7f3b      	ldrb	r3, [r7, #28]
 8011c5c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8011c5e:	7f3a      	ldrb	r2, [r7, #28]
 8011c60:	495a      	ldr	r1, [pc, #360]	; (8011dcc <etharp_find_entry+0x278>)
 8011c62:	4613      	mov	r3, r2
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	4413      	add	r3, r2
 8011c68:	00db      	lsls	r3, r3, #3
 8011c6a:	440b      	add	r3, r1
 8011c6c:	3312      	adds	r3, #18
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	82fb      	strh	r3, [r7, #22]
 8011c72:	e01a      	b.n	8011caa <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011c74:	7cfb      	ldrb	r3, [r7, #19]
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d917      	bls.n	8011caa <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011c7a:	7f3a      	ldrb	r2, [r7, #28]
 8011c7c:	4953      	ldr	r1, [pc, #332]	; (8011dcc <etharp_find_entry+0x278>)
 8011c7e:	4613      	mov	r3, r2
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	4413      	add	r3, r2
 8011c84:	00db      	lsls	r3, r3, #3
 8011c86:	440b      	add	r3, r1
 8011c88:	3312      	adds	r3, #18
 8011c8a:	881b      	ldrh	r3, [r3, #0]
 8011c8c:	8aba      	ldrh	r2, [r7, #20]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d80b      	bhi.n	8011caa <etharp_find_entry+0x156>
            old_stable = i;
 8011c92:	7f3b      	ldrb	r3, [r7, #28]
 8011c94:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8011c96:	7f3a      	ldrb	r2, [r7, #28]
 8011c98:	494c      	ldr	r1, [pc, #304]	; (8011dcc <etharp_find_entry+0x278>)
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	005b      	lsls	r3, r3, #1
 8011c9e:	4413      	add	r3, r2
 8011ca0:	00db      	lsls	r3, r3, #3
 8011ca2:	440b      	add	r3, r1
 8011ca4:	3312      	adds	r3, #18
 8011ca6:	881b      	ldrh	r3, [r3, #0]
 8011ca8:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011caa:	7f3b      	ldrb	r3, [r7, #28]
 8011cac:	3301      	adds	r3, #1
 8011cae:	773b      	strb	r3, [r7, #28]
 8011cb0:	7f3b      	ldrb	r3, [r7, #28]
 8011cb2:	2b09      	cmp	r3, #9
 8011cb4:	f67f af68 	bls.w	8011b88 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011cb8:	7afb      	ldrb	r3, [r7, #11]
 8011cba:	f003 0302 	and.w	r3, r3, #2
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d108      	bne.n	8011cd4 <etharp_find_entry+0x180>
 8011cc2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011cc6:	2b0a      	cmp	r3, #10
 8011cc8:	d107      	bne.n	8011cda <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011cca:	7afb      	ldrb	r3, [r7, #11]
 8011ccc:	f003 0301 	and.w	r3, r3, #1
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d102      	bne.n	8011cda <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8011cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cd8:	e073      	b.n	8011dc2 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011cda:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011cde:	2b09      	cmp	r3, #9
 8011ce0:	dc02      	bgt.n	8011ce8 <etharp_find_entry+0x194>
    i = empty;
 8011ce2:	7f7b      	ldrb	r3, [r7, #29]
 8011ce4:	773b      	strb	r3, [r7, #28]
 8011ce6:	e036      	b.n	8011d56 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011ce8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011cec:	2b09      	cmp	r3, #9
 8011cee:	dc13      	bgt.n	8011d18 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8011cf0:	7fbb      	ldrb	r3, [r7, #30]
 8011cf2:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011cf4:	7f3a      	ldrb	r2, [r7, #28]
 8011cf6:	4935      	ldr	r1, [pc, #212]	; (8011dcc <etharp_find_entry+0x278>)
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	005b      	lsls	r3, r3, #1
 8011cfc:	4413      	add	r3, r2
 8011cfe:	00db      	lsls	r3, r3, #3
 8011d00:	440b      	add	r3, r1
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d018      	beq.n	8011d3a <etharp_find_entry+0x1e6>
 8011d08:	4b31      	ldr	r3, [pc, #196]	; (8011dd0 <etharp_find_entry+0x27c>)
 8011d0a:	f240 126f 	movw	r2, #367	; 0x16f
 8011d0e:	4933      	ldr	r1, [pc, #204]	; (8011ddc <etharp_find_entry+0x288>)
 8011d10:	4831      	ldr	r0, [pc, #196]	; (8011dd8 <etharp_find_entry+0x284>)
 8011d12:	f002 ff49 	bl	8014ba8 <iprintf>
 8011d16:	e010      	b.n	8011d3a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011d18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d1c:	2b09      	cmp	r3, #9
 8011d1e:	dc02      	bgt.n	8011d26 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8011d20:	7ffb      	ldrb	r3, [r7, #31]
 8011d22:	773b      	strb	r3, [r7, #28]
 8011d24:	e009      	b.n	8011d3a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011d26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d2a:	2b09      	cmp	r3, #9
 8011d2c:	dc02      	bgt.n	8011d34 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011d2e:	7efb      	ldrb	r3, [r7, #27]
 8011d30:	773b      	strb	r3, [r7, #28]
 8011d32:	e002      	b.n	8011d3a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8011d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d38:	e043      	b.n	8011dc2 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011d3a:	7f3b      	ldrb	r3, [r7, #28]
 8011d3c:	2b09      	cmp	r3, #9
 8011d3e:	d906      	bls.n	8011d4e <etharp_find_entry+0x1fa>
 8011d40:	4b23      	ldr	r3, [pc, #140]	; (8011dd0 <etharp_find_entry+0x27c>)
 8011d42:	f240 1281 	movw	r2, #385	; 0x181
 8011d46:	4926      	ldr	r1, [pc, #152]	; (8011de0 <etharp_find_entry+0x28c>)
 8011d48:	4823      	ldr	r0, [pc, #140]	; (8011dd8 <etharp_find_entry+0x284>)
 8011d4a:	f002 ff2d 	bl	8014ba8 <iprintf>
    etharp_free_entry(i);
 8011d4e:	7f3b      	ldrb	r3, [r7, #28]
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7ff fe25 	bl	80119a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011d56:	7f3b      	ldrb	r3, [r7, #28]
 8011d58:	2b09      	cmp	r3, #9
 8011d5a:	d906      	bls.n	8011d6a <etharp_find_entry+0x216>
 8011d5c:	4b1c      	ldr	r3, [pc, #112]	; (8011dd0 <etharp_find_entry+0x27c>)
 8011d5e:	f240 1285 	movw	r2, #389	; 0x185
 8011d62:	491f      	ldr	r1, [pc, #124]	; (8011de0 <etharp_find_entry+0x28c>)
 8011d64:	481c      	ldr	r0, [pc, #112]	; (8011dd8 <etharp_find_entry+0x284>)
 8011d66:	f002 ff1f 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011d6a:	7f3a      	ldrb	r2, [r7, #28]
 8011d6c:	4917      	ldr	r1, [pc, #92]	; (8011dcc <etharp_find_entry+0x278>)
 8011d6e:	4613      	mov	r3, r2
 8011d70:	005b      	lsls	r3, r3, #1
 8011d72:	4413      	add	r3, r2
 8011d74:	00db      	lsls	r3, r3, #3
 8011d76:	440b      	add	r3, r1
 8011d78:	3314      	adds	r3, #20
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d006      	beq.n	8011d8e <etharp_find_entry+0x23a>
 8011d80:	4b13      	ldr	r3, [pc, #76]	; (8011dd0 <etharp_find_entry+0x27c>)
 8011d82:	f240 1287 	movw	r2, #391	; 0x187
 8011d86:	4917      	ldr	r1, [pc, #92]	; (8011de4 <etharp_find_entry+0x290>)
 8011d88:	4813      	ldr	r0, [pc, #76]	; (8011dd8 <etharp_find_entry+0x284>)
 8011d8a:	f002 ff0d 	bl	8014ba8 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d00a      	beq.n	8011daa <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011d94:	7f3a      	ldrb	r2, [r7, #28]
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	6819      	ldr	r1, [r3, #0]
 8011d9a:	480c      	ldr	r0, [pc, #48]	; (8011dcc <etharp_find_entry+0x278>)
 8011d9c:	4613      	mov	r3, r2
 8011d9e:	005b      	lsls	r3, r3, #1
 8011da0:	4413      	add	r3, r2
 8011da2:	00db      	lsls	r3, r3, #3
 8011da4:	4403      	add	r3, r0
 8011da6:	3304      	adds	r3, #4
 8011da8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011daa:	7f3a      	ldrb	r2, [r7, #28]
 8011dac:	4907      	ldr	r1, [pc, #28]	; (8011dcc <etharp_find_entry+0x278>)
 8011dae:	4613      	mov	r3, r2
 8011db0:	005b      	lsls	r3, r3, #1
 8011db2:	4413      	add	r3, r2
 8011db4:	00db      	lsls	r3, r3, #3
 8011db6:	440b      	add	r3, r1
 8011db8:	3312      	adds	r3, #18
 8011dba:	2200      	movs	r2, #0
 8011dbc:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8011dbe:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3720      	adds	r7, #32
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	2000423c 	.word	0x2000423c
 8011dd0:	08016fac 	.word	0x08016fac
 8011dd4:	08016fe4 	.word	0x08016fe4
 8011dd8:	08017024 	.word	0x08017024
 8011ddc:	0801704c 	.word	0x0801704c
 8011de0:	08017064 	.word	0x08017064
 8011de4:	08017078 	.word	0x08017078

08011de8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b088      	sub	sp, #32
 8011dec:	af02      	add	r7, sp, #8
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
 8011df4:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011dfc:	2b06      	cmp	r3, #6
 8011dfe:	d006      	beq.n	8011e0e <etharp_update_arp_entry+0x26>
 8011e00:	4b48      	ldr	r3, [pc, #288]	; (8011f24 <etharp_update_arp_entry+0x13c>)
 8011e02:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011e06:	4948      	ldr	r1, [pc, #288]	; (8011f28 <etharp_update_arp_entry+0x140>)
 8011e08:	4848      	ldr	r0, [pc, #288]	; (8011f2c <etharp_update_arp_entry+0x144>)
 8011e0a:	f002 fecd 	bl	8014ba8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d012      	beq.n	8011e3a <etharp_update_arp_entry+0x52>
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00e      	beq.n	8011e3a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	68f9      	ldr	r1, [r7, #12]
 8011e22:	4618      	mov	r0, r3
 8011e24:	f001 f8d2 	bl	8012fcc <ip4_addr_isbroadcast_u32>
 8011e28:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d105      	bne.n	8011e3a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011e36:	2be0      	cmp	r3, #224	; 0xe0
 8011e38:	d102      	bne.n	8011e40 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011e3a:	f06f 030f 	mvn.w	r3, #15
 8011e3e:	e06c      	b.n	8011f1a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011e40:	78fb      	ldrb	r3, [r7, #3]
 8011e42:	68fa      	ldr	r2, [r7, #12]
 8011e44:	4619      	mov	r1, r3
 8011e46:	68b8      	ldr	r0, [r7, #8]
 8011e48:	f7ff fe84 	bl	8011b54 <etharp_find_entry>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	da02      	bge.n	8011e5e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e5c:	e05d      	b.n	8011f1a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011e5e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011e62:	4933      	ldr	r1, [pc, #204]	; (8011f30 <etharp_update_arp_entry+0x148>)
 8011e64:	4613      	mov	r3, r2
 8011e66:	005b      	lsls	r3, r3, #1
 8011e68:	4413      	add	r3, r2
 8011e6a:	00db      	lsls	r3, r3, #3
 8011e6c:	440b      	add	r3, r1
 8011e6e:	3314      	adds	r3, #20
 8011e70:	2202      	movs	r2, #2
 8011e72:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011e74:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011e78:	492d      	ldr	r1, [pc, #180]	; (8011f30 <etharp_update_arp_entry+0x148>)
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	005b      	lsls	r3, r3, #1
 8011e7e:	4413      	add	r3, r2
 8011e80:	00db      	lsls	r3, r3, #3
 8011e82:	440b      	add	r3, r1
 8011e84:	3308      	adds	r3, #8
 8011e86:	68fa      	ldr	r2, [r7, #12]
 8011e88:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8011e8a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011e8e:	4613      	mov	r3, r2
 8011e90:	005b      	lsls	r3, r3, #1
 8011e92:	4413      	add	r3, r2
 8011e94:	00db      	lsls	r3, r3, #3
 8011e96:	3308      	adds	r3, #8
 8011e98:	4a25      	ldr	r2, [pc, #148]	; (8011f30 <etharp_update_arp_entry+0x148>)
 8011e9a:	4413      	add	r3, r2
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	2206      	movs	r2, #6
 8011ea0:	6879      	ldr	r1, [r7, #4]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f002 fdc5 	bl	8014a32 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011ea8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011eac:	4920      	ldr	r1, [pc, #128]	; (8011f30 <etharp_update_arp_entry+0x148>)
 8011eae:	4613      	mov	r3, r2
 8011eb0:	005b      	lsls	r3, r3, #1
 8011eb2:	4413      	add	r3, r2
 8011eb4:	00db      	lsls	r3, r3, #3
 8011eb6:	440b      	add	r3, r1
 8011eb8:	3312      	adds	r3, #18
 8011eba:	2200      	movs	r2, #0
 8011ebc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011ebe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011ec2:	491b      	ldr	r1, [pc, #108]	; (8011f30 <etharp_update_arp_entry+0x148>)
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	005b      	lsls	r3, r3, #1
 8011ec8:	4413      	add	r3, r2
 8011eca:	00db      	lsls	r3, r3, #3
 8011ecc:	440b      	add	r3, r1
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d021      	beq.n	8011f18 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011ed4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011ed8:	4915      	ldr	r1, [pc, #84]	; (8011f30 <etharp_update_arp_entry+0x148>)
 8011eda:	4613      	mov	r3, r2
 8011edc:	005b      	lsls	r3, r3, #1
 8011ede:	4413      	add	r3, r2
 8011ee0:	00db      	lsls	r3, r3, #3
 8011ee2:	440b      	add	r3, r1
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011ee8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011eec:	4910      	ldr	r1, [pc, #64]	; (8011f30 <etharp_update_arp_entry+0x148>)
 8011eee:	4613      	mov	r3, r2
 8011ef0:	005b      	lsls	r3, r3, #1
 8011ef2:	4413      	add	r3, r2
 8011ef4:	00db      	lsls	r3, r3, #3
 8011ef6:	440b      	add	r3, r1
 8011ef8:	2200      	movs	r2, #0
 8011efa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8011f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6939      	ldr	r1, [r7, #16]
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f001 feff 	bl	8013d10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011f12:	6938      	ldr	r0, [r7, #16]
 8011f14:	f7fa fdd2 	bl	800cabc <pbuf_free>
  }
  return ERR_OK;
 8011f18:	2300      	movs	r3, #0
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3718      	adds	r7, #24
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	08016fac 	.word	0x08016fac
 8011f28:	080170a4 	.word	0x080170a4
 8011f2c:	08017024 	.word	0x08017024
 8011f30:	2000423c 	.word	0x2000423c

08011f34 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b084      	sub	sp, #16
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	73fb      	strb	r3, [r7, #15]
 8011f40:	e01f      	b.n	8011f82 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8011f42:	7bfa      	ldrb	r2, [r7, #15]
 8011f44:	4912      	ldr	r1, [pc, #72]	; (8011f90 <etharp_cleanup_netif+0x5c>)
 8011f46:	4613      	mov	r3, r2
 8011f48:	005b      	lsls	r3, r3, #1
 8011f4a:	4413      	add	r3, r2
 8011f4c:	00db      	lsls	r3, r3, #3
 8011f4e:	440b      	add	r3, r1
 8011f50:	3314      	adds	r3, #20
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011f56:	7bbb      	ldrb	r3, [r7, #14]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d00f      	beq.n	8011f7c <etharp_cleanup_netif+0x48>
 8011f5c:	7bfa      	ldrb	r2, [r7, #15]
 8011f5e:	490c      	ldr	r1, [pc, #48]	; (8011f90 <etharp_cleanup_netif+0x5c>)
 8011f60:	4613      	mov	r3, r2
 8011f62:	005b      	lsls	r3, r3, #1
 8011f64:	4413      	add	r3, r2
 8011f66:	00db      	lsls	r3, r3, #3
 8011f68:	440b      	add	r3, r1
 8011f6a:	3308      	adds	r3, #8
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d103      	bne.n	8011f7c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8011f74:	7bfb      	ldrb	r3, [r7, #15]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7ff fd12 	bl	80119a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f7c:	7bfb      	ldrb	r3, [r7, #15]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	73fb      	strb	r3, [r7, #15]
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
 8011f84:	2b09      	cmp	r3, #9
 8011f86:	d9dc      	bls.n	8011f42 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011f88:	bf00      	nop
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	2000423c 	.word	0x2000423c

08011f94 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011f94:	b5b0      	push	{r4, r5, r7, lr}
 8011f96:	b08a      	sub	sp, #40	; 0x28
 8011f98:	af04      	add	r7, sp, #16
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d107      	bne.n	8011fb4 <etharp_input+0x20>
 8011fa4:	4b3d      	ldr	r3, [pc, #244]	; (801209c <etharp_input+0x108>)
 8011fa6:	f44f 7222 	mov.w	r2, #648	; 0x288
 8011faa:	493d      	ldr	r1, [pc, #244]	; (80120a0 <etharp_input+0x10c>)
 8011fac:	483d      	ldr	r0, [pc, #244]	; (80120a4 <etharp_input+0x110>)
 8011fae:	f002 fdfb 	bl	8014ba8 <iprintf>
 8011fb2:	e06f      	b.n	8012094 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	881b      	ldrh	r3, [r3, #0]
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011fc4:	d10c      	bne.n	8011fe0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8011fca:	2b06      	cmp	r3, #6
 8011fcc:	d108      	bne.n	8011fe0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011fd2:	2b04      	cmp	r3, #4
 8011fd4:	d104      	bne.n	8011fe0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	885b      	ldrh	r3, [r3, #2]
 8011fda:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011fdc:	2b08      	cmp	r3, #8
 8011fde:	d003      	beq.n	8011fe8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7fa fd6b 	bl	800cabc <pbuf_free>
    return;
 8011fe6:	e055      	b.n	8012094 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	330e      	adds	r3, #14
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	3318      	adds	r3, #24
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	3304      	adds	r3, #4
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d102      	bne.n	8012008 <etharp_input+0x74>
    for_us = 0;
 8012002:	2300      	movs	r3, #0
 8012004:	75fb      	strb	r3, [r7, #23]
 8012006:	e009      	b.n	801201c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012008:	68ba      	ldr	r2, [r7, #8]
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	3304      	adds	r3, #4
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	429a      	cmp	r2, r3
 8012012:	bf0c      	ite	eq
 8012014:	2301      	moveq	r3, #1
 8012016:	2300      	movne	r3, #0
 8012018:	b2db      	uxtb	r3, r3
 801201a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	f103 0208 	add.w	r2, r3, #8
 8012022:	7dfb      	ldrb	r3, [r7, #23]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d001      	beq.n	801202c <etharp_input+0x98>
 8012028:	2301      	movs	r3, #1
 801202a:	e000      	b.n	801202e <etharp_input+0x9a>
 801202c:	2302      	movs	r3, #2
 801202e:	f107 010c 	add.w	r1, r7, #12
 8012032:	6838      	ldr	r0, [r7, #0]
 8012034:	f7ff fed8 	bl	8011de8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	88db      	ldrh	r3, [r3, #6]
 801203c:	b29b      	uxth	r3, r3
 801203e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012042:	d003      	beq.n	801204c <etharp_input+0xb8>
 8012044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012048:	d01e      	beq.n	8012088 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801204a:	e020      	b.n	801208e <etharp_input+0xfa>
    if (for_us) {
 801204c:	7dfb      	ldrb	r3, [r7, #23]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d01c      	beq.n	801208c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8012068:	693a      	ldr	r2, [r7, #16]
 801206a:	3208      	adds	r2, #8
      etharp_raw(netif,
 801206c:	2102      	movs	r1, #2
 801206e:	9103      	str	r1, [sp, #12]
 8012070:	f107 010c 	add.w	r1, r7, #12
 8012074:	9102      	str	r1, [sp, #8]
 8012076:	9201      	str	r2, [sp, #4]
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	462b      	mov	r3, r5
 801207c:	4622      	mov	r2, r4
 801207e:	4601      	mov	r1, r0
 8012080:	6838      	ldr	r0, [r7, #0]
 8012082:	f000 fae3 	bl	801264c <etharp_raw>
    break;
 8012086:	e001      	b.n	801208c <etharp_input+0xf8>
    break;
 8012088:	bf00      	nop
 801208a:	e000      	b.n	801208e <etharp_input+0xfa>
    break;
 801208c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f7fa fd14 	bl	800cabc <pbuf_free>
}
 8012094:	3718      	adds	r7, #24
 8012096:	46bd      	mov	sp, r7
 8012098:	bdb0      	pop	{r4, r5, r7, pc}
 801209a:	bf00      	nop
 801209c:	08016fac 	.word	0x08016fac
 80120a0:	080170fc 	.word	0x080170fc
 80120a4:	08017024 	.word	0x08017024

080120a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b086      	sub	sp, #24
 80120ac:	af02      	add	r7, sp, #8
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	4613      	mov	r3, r2
 80120b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80120b6:	79fa      	ldrb	r2, [r7, #7]
 80120b8:	4944      	ldr	r1, [pc, #272]	; (80121cc <etharp_output_to_arp_index+0x124>)
 80120ba:	4613      	mov	r3, r2
 80120bc:	005b      	lsls	r3, r3, #1
 80120be:	4413      	add	r3, r2
 80120c0:	00db      	lsls	r3, r3, #3
 80120c2:	440b      	add	r3, r1
 80120c4:	3314      	adds	r3, #20
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d806      	bhi.n	80120da <etharp_output_to_arp_index+0x32>
 80120cc:	4b40      	ldr	r3, [pc, #256]	; (80121d0 <etharp_output_to_arp_index+0x128>)
 80120ce:	f240 22ed 	movw	r2, #749	; 0x2ed
 80120d2:	4940      	ldr	r1, [pc, #256]	; (80121d4 <etharp_output_to_arp_index+0x12c>)
 80120d4:	4840      	ldr	r0, [pc, #256]	; (80121d8 <etharp_output_to_arp_index+0x130>)
 80120d6:	f002 fd67 	bl	8014ba8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80120da:	79fa      	ldrb	r2, [r7, #7]
 80120dc:	493b      	ldr	r1, [pc, #236]	; (80121cc <etharp_output_to_arp_index+0x124>)
 80120de:	4613      	mov	r3, r2
 80120e0:	005b      	lsls	r3, r3, #1
 80120e2:	4413      	add	r3, r2
 80120e4:	00db      	lsls	r3, r3, #3
 80120e6:	440b      	add	r3, r1
 80120e8:	3314      	adds	r3, #20
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	2b02      	cmp	r3, #2
 80120ee:	d153      	bne.n	8012198 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80120f0:	79fa      	ldrb	r2, [r7, #7]
 80120f2:	4936      	ldr	r1, [pc, #216]	; (80121cc <etharp_output_to_arp_index+0x124>)
 80120f4:	4613      	mov	r3, r2
 80120f6:	005b      	lsls	r3, r3, #1
 80120f8:	4413      	add	r3, r2
 80120fa:	00db      	lsls	r3, r3, #3
 80120fc:	440b      	add	r3, r1
 80120fe:	3312      	adds	r3, #18
 8012100:	881b      	ldrh	r3, [r3, #0]
 8012102:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012106:	d919      	bls.n	801213c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012108:	79fa      	ldrb	r2, [r7, #7]
 801210a:	4613      	mov	r3, r2
 801210c:	005b      	lsls	r3, r3, #1
 801210e:	4413      	add	r3, r2
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	4a2e      	ldr	r2, [pc, #184]	; (80121cc <etharp_output_to_arp_index+0x124>)
 8012114:	4413      	add	r3, r2
 8012116:	3304      	adds	r3, #4
 8012118:	4619      	mov	r1, r3
 801211a:	68f8      	ldr	r0, [r7, #12]
 801211c:	f000 fb44 	bl	80127a8 <etharp_request>
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d138      	bne.n	8012198 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012126:	79fa      	ldrb	r2, [r7, #7]
 8012128:	4928      	ldr	r1, [pc, #160]	; (80121cc <etharp_output_to_arp_index+0x124>)
 801212a:	4613      	mov	r3, r2
 801212c:	005b      	lsls	r3, r3, #1
 801212e:	4413      	add	r3, r2
 8012130:	00db      	lsls	r3, r3, #3
 8012132:	440b      	add	r3, r1
 8012134:	3314      	adds	r3, #20
 8012136:	2203      	movs	r2, #3
 8012138:	701a      	strb	r2, [r3, #0]
 801213a:	e02d      	b.n	8012198 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801213c:	79fa      	ldrb	r2, [r7, #7]
 801213e:	4923      	ldr	r1, [pc, #140]	; (80121cc <etharp_output_to_arp_index+0x124>)
 8012140:	4613      	mov	r3, r2
 8012142:	005b      	lsls	r3, r3, #1
 8012144:	4413      	add	r3, r2
 8012146:	00db      	lsls	r3, r3, #3
 8012148:	440b      	add	r3, r1
 801214a:	3312      	adds	r3, #18
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012152:	d321      	bcc.n	8012198 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012154:	79fa      	ldrb	r2, [r7, #7]
 8012156:	4613      	mov	r3, r2
 8012158:	005b      	lsls	r3, r3, #1
 801215a:	4413      	add	r3, r2
 801215c:	00db      	lsls	r3, r3, #3
 801215e:	4a1b      	ldr	r2, [pc, #108]	; (80121cc <etharp_output_to_arp_index+0x124>)
 8012160:	4413      	add	r3, r2
 8012162:	1d19      	adds	r1, r3, #4
 8012164:	79fa      	ldrb	r2, [r7, #7]
 8012166:	4613      	mov	r3, r2
 8012168:	005b      	lsls	r3, r3, #1
 801216a:	4413      	add	r3, r2
 801216c:	00db      	lsls	r3, r3, #3
 801216e:	3308      	adds	r3, #8
 8012170:	4a16      	ldr	r2, [pc, #88]	; (80121cc <etharp_output_to_arp_index+0x124>)
 8012172:	4413      	add	r3, r2
 8012174:	3304      	adds	r3, #4
 8012176:	461a      	mov	r2, r3
 8012178:	68f8      	ldr	r0, [r7, #12]
 801217a:	f000 faf3 	bl	8012764 <etharp_request_dst>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d109      	bne.n	8012198 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012184:	79fa      	ldrb	r2, [r7, #7]
 8012186:	4911      	ldr	r1, [pc, #68]	; (80121cc <etharp_output_to_arp_index+0x124>)
 8012188:	4613      	mov	r3, r2
 801218a:	005b      	lsls	r3, r3, #1
 801218c:	4413      	add	r3, r2
 801218e:	00db      	lsls	r3, r3, #3
 8012190:	440b      	add	r3, r1
 8012192:	3314      	adds	r3, #20
 8012194:	2203      	movs	r2, #3
 8012196:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f103 0125 	add.w	r1, r3, #37	; 0x25
 801219e:	79fa      	ldrb	r2, [r7, #7]
 80121a0:	4613      	mov	r3, r2
 80121a2:	005b      	lsls	r3, r3, #1
 80121a4:	4413      	add	r3, r2
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	3308      	adds	r3, #8
 80121aa:	4a08      	ldr	r2, [pc, #32]	; (80121cc <etharp_output_to_arp_index+0x124>)
 80121ac:	4413      	add	r3, r2
 80121ae:	1d1a      	adds	r2, r3, #4
 80121b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	4613      	mov	r3, r2
 80121b8:	460a      	mov	r2, r1
 80121ba:	68b9      	ldr	r1, [r7, #8]
 80121bc:	68f8      	ldr	r0, [r7, #12]
 80121be:	f001 fda7 	bl	8013d10 <ethernet_output>
 80121c2:	4603      	mov	r3, r0
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	2000423c 	.word	0x2000423c
 80121d0:	08016fac 	.word	0x08016fac
 80121d4:	0801711c 	.word	0x0801711c
 80121d8:	08017024 	.word	0x08017024

080121dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b08a      	sub	sp, #40	; 0x28
 80121e0:	af02      	add	r7, sp, #8
 80121e2:	60f8      	str	r0, [r7, #12]
 80121e4:	60b9      	str	r1, [r7, #8]
 80121e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d106      	bne.n	8012200 <etharp_output+0x24>
 80121f2:	4b69      	ldr	r3, [pc, #420]	; (8012398 <etharp_output+0x1bc>)
 80121f4:	f240 321b 	movw	r2, #795	; 0x31b
 80121f8:	4968      	ldr	r1, [pc, #416]	; (801239c <etharp_output+0x1c0>)
 80121fa:	4869      	ldr	r0, [pc, #420]	; (80123a0 <etharp_output+0x1c4>)
 80121fc:	f002 fcd4 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d106      	bne.n	8012214 <etharp_output+0x38>
 8012206:	4b64      	ldr	r3, [pc, #400]	; (8012398 <etharp_output+0x1bc>)
 8012208:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801220c:	4965      	ldr	r1, [pc, #404]	; (80123a4 <etharp_output+0x1c8>)
 801220e:	4864      	ldr	r0, [pc, #400]	; (80123a0 <etharp_output+0x1c4>)
 8012210:	f002 fcca 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d106      	bne.n	8012228 <etharp_output+0x4c>
 801221a:	4b5f      	ldr	r3, [pc, #380]	; (8012398 <etharp_output+0x1bc>)
 801221c:	f240 321d 	movw	r2, #797	; 0x31d
 8012220:	4961      	ldr	r1, [pc, #388]	; (80123a8 <etharp_output+0x1cc>)
 8012222:	485f      	ldr	r0, [pc, #380]	; (80123a0 <etharp_output+0x1c4>)
 8012224:	f002 fcc0 	bl	8014ba8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	68f9      	ldr	r1, [r7, #12]
 801222e:	4618      	mov	r0, r3
 8012230:	f000 fecc 	bl	8012fcc <ip4_addr_isbroadcast_u32>
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d002      	beq.n	8012240 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801223a:	4b5c      	ldr	r3, [pc, #368]	; (80123ac <etharp_output+0x1d0>)
 801223c:	61fb      	str	r3, [r7, #28]
 801223e:	e09b      	b.n	8012378 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012248:	2be0      	cmp	r3, #224	; 0xe0
 801224a:	d118      	bne.n	801227e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801224c:	2301      	movs	r3, #1
 801224e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012250:	2300      	movs	r3, #0
 8012252:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012254:	235e      	movs	r3, #94	; 0x5e
 8012256:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	3301      	adds	r3, #1
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012262:	b2db      	uxtb	r3, r3
 8012264:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	3302      	adds	r3, #2
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	3303      	adds	r3, #3
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012276:	f107 0310 	add.w	r3, r7, #16
 801227a:	61fb      	str	r3, [r7, #28]
 801227c:	e07c      	b.n	8012378 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	3304      	adds	r3, #4
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	405a      	eors	r2, r3
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	3308      	adds	r3, #8
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4013      	ands	r3, r2
 8012292:	2b00      	cmp	r3, #0
 8012294:	d012      	beq.n	80122bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801229c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d00b      	beq.n	80122bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	330c      	adds	r3, #12
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d003      	beq.n	80122b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	330c      	adds	r3, #12
 80122b2:	61bb      	str	r3, [r7, #24]
 80122b4:	e002      	b.n	80122bc <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80122b6:	f06f 0303 	mvn.w	r3, #3
 80122ba:	e069      	b.n	8012390 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80122bc:	4b3c      	ldr	r3, [pc, #240]	; (80123b0 <etharp_output+0x1d4>)
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	4619      	mov	r1, r3
 80122c2:	4a3c      	ldr	r2, [pc, #240]	; (80123b4 <etharp_output+0x1d8>)
 80122c4:	460b      	mov	r3, r1
 80122c6:	005b      	lsls	r3, r3, #1
 80122c8:	440b      	add	r3, r1
 80122ca:	00db      	lsls	r3, r3, #3
 80122cc:	4413      	add	r3, r2
 80122ce:	3314      	adds	r3, #20
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d917      	bls.n	8012306 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	681a      	ldr	r2, [r3, #0]
 80122da:	4b35      	ldr	r3, [pc, #212]	; (80123b0 <etharp_output+0x1d4>)
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	4618      	mov	r0, r3
 80122e0:	4934      	ldr	r1, [pc, #208]	; (80123b4 <etharp_output+0x1d8>)
 80122e2:	4603      	mov	r3, r0
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	4403      	add	r3, r0
 80122e8:	00db      	lsls	r3, r3, #3
 80122ea:	440b      	add	r3, r1
 80122ec:	3304      	adds	r3, #4
 80122ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d108      	bne.n	8012306 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80122f4:	4b2e      	ldr	r3, [pc, #184]	; (80123b0 <etharp_output+0x1d4>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	461a      	mov	r2, r3
 80122fa:	68b9      	ldr	r1, [r7, #8]
 80122fc:	68f8      	ldr	r0, [r7, #12]
 80122fe:	f7ff fed3 	bl	80120a8 <etharp_output_to_arp_index>
 8012302:	4603      	mov	r3, r0
 8012304:	e044      	b.n	8012390 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012306:	2300      	movs	r3, #0
 8012308:	75fb      	strb	r3, [r7, #23]
 801230a:	e02a      	b.n	8012362 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801230c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012310:	4928      	ldr	r1, [pc, #160]	; (80123b4 <etharp_output+0x1d8>)
 8012312:	4613      	mov	r3, r2
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	4413      	add	r3, r2
 8012318:	00db      	lsls	r3, r3, #3
 801231a:	440b      	add	r3, r1
 801231c:	3314      	adds	r3, #20
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d918      	bls.n	8012356 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	6819      	ldr	r1, [r3, #0]
 8012328:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801232c:	4821      	ldr	r0, [pc, #132]	; (80123b4 <etharp_output+0x1d8>)
 801232e:	4613      	mov	r3, r2
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	4413      	add	r3, r2
 8012334:	00db      	lsls	r3, r3, #3
 8012336:	4403      	add	r3, r0
 8012338:	3304      	adds	r3, #4
 801233a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801233c:	4299      	cmp	r1, r3
 801233e:	d10a      	bne.n	8012356 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8012340:	7dfa      	ldrb	r2, [r7, #23]
 8012342:	4b1b      	ldr	r3, [pc, #108]	; (80123b0 <etharp_output+0x1d4>)
 8012344:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012346:	7dfb      	ldrb	r3, [r7, #23]
 8012348:	461a      	mov	r2, r3
 801234a:	68b9      	ldr	r1, [r7, #8]
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f7ff feab 	bl	80120a8 <etharp_output_to_arp_index>
 8012352:	4603      	mov	r3, r0
 8012354:	e01c      	b.n	8012390 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801235a:	b2db      	uxtb	r3, r3
 801235c:	3301      	adds	r3, #1
 801235e:	b2db      	uxtb	r3, r3
 8012360:	75fb      	strb	r3, [r7, #23]
 8012362:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012366:	2b09      	cmp	r3, #9
 8012368:	ddd0      	ble.n	801230c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	69b9      	ldr	r1, [r7, #24]
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f000 f822 	bl	80123b8 <etharp_query>
 8012374:	4603      	mov	r3, r0
 8012376:	e00b      	b.n	8012390 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	f103 0225 	add.w	r2, r3, #37	; 0x25
 801237e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	68b9      	ldr	r1, [r7, #8]
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f001 fcc1 	bl	8013d10 <ethernet_output>
 801238e:	4603      	mov	r3, r0
}
 8012390:	4618      	mov	r0, r3
 8012392:	3720      	adds	r7, #32
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	08016fac 	.word	0x08016fac
 801239c:	080170fc 	.word	0x080170fc
 80123a0:	08017024 	.word	0x08017024
 80123a4:	0801714c 	.word	0x0801714c
 80123a8:	080170ec 	.word	0x080170ec
 80123ac:	0801778c 	.word	0x0801778c
 80123b0:	2000432c 	.word	0x2000432c
 80123b4:	2000423c 	.word	0x2000423c

080123b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b08c      	sub	sp, #48	; 0x30
 80123bc:	af02      	add	r7, sp, #8
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	3325      	adds	r3, #37	; 0x25
 80123c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80123ca:	23ff      	movs	r3, #255	; 0xff
 80123cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80123d0:	2300      	movs	r3, #0
 80123d2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68f9      	ldr	r1, [r7, #12]
 80123da:	4618      	mov	r0, r3
 80123dc:	f000 fdf6 	bl	8012fcc <ip4_addr_isbroadcast_u32>
 80123e0:	4603      	mov	r3, r0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d10c      	bne.n	8012400 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80123ee:	2be0      	cmp	r3, #224	; 0xe0
 80123f0:	d006      	beq.n	8012400 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d003      	beq.n	8012400 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d102      	bne.n	8012406 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012400:	f06f 030f 	mvn.w	r3, #15
 8012404:	e10f      	b.n	8012626 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	2101      	movs	r1, #1
 801240a:	68b8      	ldr	r0, [r7, #8]
 801240c:	f7ff fba2 	bl	8011b54 <etharp_find_entry>
 8012410:	4603      	mov	r3, r0
 8012412:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8012414:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012418:	2b00      	cmp	r3, #0
 801241a:	da02      	bge.n	8012422 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 801241c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012420:	e101      	b.n	8012626 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012422:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012426:	4982      	ldr	r1, [pc, #520]	; (8012630 <etharp_query+0x278>)
 8012428:	4613      	mov	r3, r2
 801242a:	005b      	lsls	r3, r3, #1
 801242c:	4413      	add	r3, r2
 801242e:	00db      	lsls	r3, r3, #3
 8012430:	440b      	add	r3, r1
 8012432:	3314      	adds	r3, #20
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d117      	bne.n	801246a <etharp_query+0xb2>
    is_new_entry = 1;
 801243a:	2301      	movs	r3, #1
 801243c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801243e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012442:	497b      	ldr	r1, [pc, #492]	; (8012630 <etharp_query+0x278>)
 8012444:	4613      	mov	r3, r2
 8012446:	005b      	lsls	r3, r3, #1
 8012448:	4413      	add	r3, r2
 801244a:	00db      	lsls	r3, r3, #3
 801244c:	440b      	add	r3, r1
 801244e:	3314      	adds	r3, #20
 8012450:	2201      	movs	r2, #1
 8012452:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012454:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012458:	4975      	ldr	r1, [pc, #468]	; (8012630 <etharp_query+0x278>)
 801245a:	4613      	mov	r3, r2
 801245c:	005b      	lsls	r3, r3, #1
 801245e:	4413      	add	r3, r2
 8012460:	00db      	lsls	r3, r3, #3
 8012462:	440b      	add	r3, r1
 8012464:	3308      	adds	r3, #8
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801246a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801246e:	4970      	ldr	r1, [pc, #448]	; (8012630 <etharp_query+0x278>)
 8012470:	4613      	mov	r3, r2
 8012472:	005b      	lsls	r3, r3, #1
 8012474:	4413      	add	r3, r2
 8012476:	00db      	lsls	r3, r3, #3
 8012478:	440b      	add	r3, r1
 801247a:	3314      	adds	r3, #20
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	2b01      	cmp	r3, #1
 8012480:	d012      	beq.n	80124a8 <etharp_query+0xf0>
 8012482:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012486:	496a      	ldr	r1, [pc, #424]	; (8012630 <etharp_query+0x278>)
 8012488:	4613      	mov	r3, r2
 801248a:	005b      	lsls	r3, r3, #1
 801248c:	4413      	add	r3, r2
 801248e:	00db      	lsls	r3, r3, #3
 8012490:	440b      	add	r3, r1
 8012492:	3314      	adds	r3, #20
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	2b01      	cmp	r3, #1
 8012498:	d806      	bhi.n	80124a8 <etharp_query+0xf0>
 801249a:	4b66      	ldr	r3, [pc, #408]	; (8012634 <etharp_query+0x27c>)
 801249c:	f240 32c9 	movw	r2, #969	; 0x3c9
 80124a0:	4965      	ldr	r1, [pc, #404]	; (8012638 <etharp_query+0x280>)
 80124a2:	4866      	ldr	r0, [pc, #408]	; (801263c <etharp_query+0x284>)
 80124a4:	f002 fb80 	bl	8014ba8 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80124a8:	6a3b      	ldr	r3, [r7, #32]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d102      	bne.n	80124b4 <etharp_query+0xfc>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d10c      	bne.n	80124ce <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80124b4:	68b9      	ldr	r1, [r7, #8]
 80124b6:	68f8      	ldr	r0, [r7, #12]
 80124b8:	f000 f976 	bl	80127a8 <etharp_request>
 80124bc:	4603      	mov	r3, r0
 80124be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d102      	bne.n	80124ce <etharp_query+0x116>
      return result;
 80124c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80124cc:	e0ab      	b.n	8012626 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d106      	bne.n	80124e2 <etharp_query+0x12a>
 80124d4:	4b57      	ldr	r3, [pc, #348]	; (8012634 <etharp_query+0x27c>)
 80124d6:	f240 32db 	movw	r2, #987	; 0x3db
 80124da:	4959      	ldr	r1, [pc, #356]	; (8012640 <etharp_query+0x288>)
 80124dc:	4857      	ldr	r0, [pc, #348]	; (801263c <etharp_query+0x284>)
 80124de:	f002 fb63 	bl	8014ba8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80124e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80124e6:	4952      	ldr	r1, [pc, #328]	; (8012630 <etharp_query+0x278>)
 80124e8:	4613      	mov	r3, r2
 80124ea:	005b      	lsls	r3, r3, #1
 80124ec:	4413      	add	r3, r2
 80124ee:	00db      	lsls	r3, r3, #3
 80124f0:	440b      	add	r3, r1
 80124f2:	3314      	adds	r3, #20
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d919      	bls.n	801252e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80124fa:	7cfa      	ldrb	r2, [r7, #19]
 80124fc:	4b51      	ldr	r3, [pc, #324]	; (8012644 <etharp_query+0x28c>)
 80124fe:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012500:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012504:	4613      	mov	r3, r2
 8012506:	005b      	lsls	r3, r3, #1
 8012508:	4413      	add	r3, r2
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	3308      	adds	r3, #8
 801250e:	4a48      	ldr	r2, [pc, #288]	; (8012630 <etharp_query+0x278>)
 8012510:	4413      	add	r3, r2
 8012512:	1d1a      	adds	r2, r3, #4
 8012514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012518:	9300      	str	r3, [sp, #0]
 801251a:	4613      	mov	r3, r2
 801251c:	697a      	ldr	r2, [r7, #20]
 801251e:	6879      	ldr	r1, [r7, #4]
 8012520:	68f8      	ldr	r0, [r7, #12]
 8012522:	f001 fbf5 	bl	8013d10 <ethernet_output>
 8012526:	4603      	mov	r3, r0
 8012528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801252c:	e079      	b.n	8012622 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801252e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012532:	493f      	ldr	r1, [pc, #252]	; (8012630 <etharp_query+0x278>)
 8012534:	4613      	mov	r3, r2
 8012536:	005b      	lsls	r3, r3, #1
 8012538:	4413      	add	r3, r2
 801253a:	00db      	lsls	r3, r3, #3
 801253c:	440b      	add	r3, r1
 801253e:	3314      	adds	r3, #20
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	2b01      	cmp	r3, #1
 8012544:	d16d      	bne.n	8012622 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012546:	2300      	movs	r3, #0
 8012548:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801254e:	e01a      	b.n	8012586 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	895a      	ldrh	r2, [r3, #10]
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	891b      	ldrh	r3, [r3, #8]
 8012558:	429a      	cmp	r2, r3
 801255a:	d10a      	bne.n	8012572 <etharp_query+0x1ba>
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d006      	beq.n	8012572 <etharp_query+0x1ba>
 8012564:	4b33      	ldr	r3, [pc, #204]	; (8012634 <etharp_query+0x27c>)
 8012566:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801256a:	4937      	ldr	r1, [pc, #220]	; (8012648 <etharp_query+0x290>)
 801256c:	4833      	ldr	r0, [pc, #204]	; (801263c <etharp_query+0x284>)
 801256e:	f002 fb1b 	bl	8014ba8 <iprintf>
      if (p->type != PBUF_ROM) {
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	7b1b      	ldrb	r3, [r3, #12]
 8012576:	2b01      	cmp	r3, #1
 8012578:	d002      	beq.n	8012580 <etharp_query+0x1c8>
        copy_needed = 1;
 801257a:	2301      	movs	r3, #1
 801257c:	61bb      	str	r3, [r7, #24]
        break;
 801257e:	e005      	b.n	801258c <etharp_query+0x1d4>
      }
      p = p->next;
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d1e1      	bne.n	8012550 <etharp_query+0x198>
    }
    if (copy_needed) {
 801258c:	69bb      	ldr	r3, [r7, #24]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d017      	beq.n	80125c2 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	891b      	ldrh	r3, [r3, #8]
 8012596:	2200      	movs	r2, #0
 8012598:	4619      	mov	r1, r3
 801259a:	2002      	movs	r0, #2
 801259c:	f7f9 ff1c 	bl	800c3d8 <pbuf_alloc>
 80125a0:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d011      	beq.n	80125cc <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 80125a8:	6879      	ldr	r1, [r7, #4]
 80125aa:	69f8      	ldr	r0, [r7, #28]
 80125ac:	f7fa fbb6 	bl	800cd1c <pbuf_copy>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00a      	beq.n	80125cc <etharp_query+0x214>
          pbuf_free(p);
 80125b6:	69f8      	ldr	r0, [r7, #28]
 80125b8:	f7fa fa80 	bl	800cabc <pbuf_free>
          p = NULL;
 80125bc:	2300      	movs	r3, #0
 80125be:	61fb      	str	r3, [r7, #28]
 80125c0:	e004      	b.n	80125cc <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80125c6:	69f8      	ldr	r0, [r7, #28]
 80125c8:	f7fa fb2a 	bl	800cc20 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d024      	beq.n	801261c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80125d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80125d6:	4916      	ldr	r1, [pc, #88]	; (8012630 <etharp_query+0x278>)
 80125d8:	4613      	mov	r3, r2
 80125da:	005b      	lsls	r3, r3, #1
 80125dc:	4413      	add	r3, r2
 80125de:	00db      	lsls	r3, r3, #3
 80125e0:	440b      	add	r3, r1
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d00b      	beq.n	8012600 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80125e8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80125ec:	4910      	ldr	r1, [pc, #64]	; (8012630 <etharp_query+0x278>)
 80125ee:	4613      	mov	r3, r2
 80125f0:	005b      	lsls	r3, r3, #1
 80125f2:	4413      	add	r3, r2
 80125f4:	00db      	lsls	r3, r3, #3
 80125f6:	440b      	add	r3, r1
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7fa fa5e 	bl	800cabc <pbuf_free>
      }
      arp_table[i].q = p;
 8012600:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012604:	490a      	ldr	r1, [pc, #40]	; (8012630 <etharp_query+0x278>)
 8012606:	4613      	mov	r3, r2
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	4413      	add	r3, r2
 801260c:	00db      	lsls	r3, r3, #3
 801260e:	440b      	add	r3, r1
 8012610:	69fa      	ldr	r2, [r7, #28]
 8012612:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012614:	2300      	movs	r3, #0
 8012616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801261a:	e002      	b.n	8012622 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801261c:	23ff      	movs	r3, #255	; 0xff
 801261e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012622:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012626:	4618      	mov	r0, r3
 8012628:	3728      	adds	r7, #40	; 0x28
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	2000423c 	.word	0x2000423c
 8012634:	08016fac 	.word	0x08016fac
 8012638:	08017158 	.word	0x08017158
 801263c:	08017024 	.word	0x08017024
 8012640:	0801714c 	.word	0x0801714c
 8012644:	2000432c 	.word	0x2000432c
 8012648:	08017180 	.word	0x08017180

0801264c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b08a      	sub	sp, #40	; 0x28
 8012650:	af02      	add	r7, sp, #8
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
 8012658:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801265a:	2300      	movs	r3, #0
 801265c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d106      	bne.n	8012672 <etharp_raw+0x26>
 8012664:	4b3a      	ldr	r3, [pc, #232]	; (8012750 <etharp_raw+0x104>)
 8012666:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801266a:	493a      	ldr	r1, [pc, #232]	; (8012754 <etharp_raw+0x108>)
 801266c:	483a      	ldr	r0, [pc, #232]	; (8012758 <etharp_raw+0x10c>)
 801266e:	f002 fa9b 	bl	8014ba8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012672:	2200      	movs	r2, #0
 8012674:	211c      	movs	r1, #28
 8012676:	2002      	movs	r0, #2
 8012678:	f7f9 feae 	bl	800c3d8 <pbuf_alloc>
 801267c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d102      	bne.n	801268a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012688:	e05d      	b.n	8012746 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	895b      	ldrh	r3, [r3, #10]
 801268e:	2b1b      	cmp	r3, #27
 8012690:	d806      	bhi.n	80126a0 <etharp_raw+0x54>
 8012692:	4b2f      	ldr	r3, [pc, #188]	; (8012750 <etharp_raw+0x104>)
 8012694:	f240 4264 	movw	r2, #1124	; 0x464
 8012698:	4930      	ldr	r1, [pc, #192]	; (801275c <etharp_raw+0x110>)
 801269a:	482f      	ldr	r0, [pc, #188]	; (8012758 <etharp_raw+0x10c>)
 801269c:	f002 fa84 	bl	8014ba8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80126a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7f9 f877 	bl	800b79c <lwip_htons>
 80126ae:	4603      	mov	r3, r0
 80126b0:	461a      	mov	r2, r3
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80126bc:	2b06      	cmp	r3, #6
 80126be:	d006      	beq.n	80126ce <etharp_raw+0x82>
 80126c0:	4b23      	ldr	r3, [pc, #140]	; (8012750 <etharp_raw+0x104>)
 80126c2:	f240 426b 	movw	r2, #1131	; 0x46b
 80126c6:	4926      	ldr	r1, [pc, #152]	; (8012760 <etharp_raw+0x114>)
 80126c8:	4823      	ldr	r0, [pc, #140]	; (8012758 <etharp_raw+0x10c>)
 80126ca:	f002 fa6d 	bl	8014ba8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	3308      	adds	r3, #8
 80126d2:	2206      	movs	r2, #6
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f002 f9ab 	bl	8014a32 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	3312      	adds	r3, #18
 80126e0:	2206      	movs	r2, #6
 80126e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80126e4:	4618      	mov	r0, r3
 80126e6:	f002 f9a4 	bl	8014a32 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	330e      	adds	r3, #14
 80126ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126f0:	6812      	ldr	r2, [r2, #0]
 80126f2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	3318      	adds	r3, #24
 80126f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126fa:	6812      	ldr	r2, [r2, #0]
 80126fc:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	2200      	movs	r2, #0
 8012702:	701a      	strb	r2, [r3, #0]
 8012704:	2200      	movs	r2, #0
 8012706:	f042 0201 	orr.w	r2, r2, #1
 801270a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	2200      	movs	r2, #0
 8012710:	f042 0208 	orr.w	r2, r2, #8
 8012714:	709a      	strb	r2, [r3, #2]
 8012716:	2200      	movs	r2, #0
 8012718:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	2206      	movs	r2, #6
 801271e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	2204      	movs	r2, #4
 8012724:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012726:	f640 0306 	movw	r3, #2054	; 0x806
 801272a:	9300      	str	r3, [sp, #0]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	68ba      	ldr	r2, [r7, #8]
 8012730:	69b9      	ldr	r1, [r7, #24]
 8012732:	68f8      	ldr	r0, [r7, #12]
 8012734:	f001 faec 	bl	8013d10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012738:	69b8      	ldr	r0, [r7, #24]
 801273a:	f7fa f9bf 	bl	800cabc <pbuf_free>
  p = NULL;
 801273e:	2300      	movs	r3, #0
 8012740:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012742:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3720      	adds	r7, #32
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	08016fac 	.word	0x08016fac
 8012754:	080170fc 	.word	0x080170fc
 8012758:	08017024 	.word	0x08017024
 801275c:	0801719c 	.word	0x0801719c
 8012760:	080171d0 	.word	0x080171d0

08012764 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b088      	sub	sp, #32
 8012768:	af04      	add	r7, sp, #16
 801276a:	60f8      	str	r0, [r7, #12]
 801276c:	60b9      	str	r1, [r7, #8]
 801276e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012780:	2201      	movs	r2, #1
 8012782:	9203      	str	r2, [sp, #12]
 8012784:	68ba      	ldr	r2, [r7, #8]
 8012786:	9202      	str	r2, [sp, #8]
 8012788:	4a06      	ldr	r2, [pc, #24]	; (80127a4 <etharp_request_dst+0x40>)
 801278a:	9201      	str	r2, [sp, #4]
 801278c:	9300      	str	r3, [sp, #0]
 801278e:	4603      	mov	r3, r0
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	68f8      	ldr	r0, [r7, #12]
 8012794:	f7ff ff5a 	bl	801264c <etharp_raw>
 8012798:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801279a:	4618      	mov	r0, r3
 801279c:	3710      	adds	r7, #16
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	08017794 	.word	0x08017794

080127a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80127b2:	4a05      	ldr	r2, [pc, #20]	; (80127c8 <etharp_request+0x20>)
 80127b4:	6839      	ldr	r1, [r7, #0]
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7ff ffd4 	bl	8012764 <etharp_request_dst>
 80127bc:	4603      	mov	r3, r0
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	0801778c 	.word	0x0801778c

080127cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b08e      	sub	sp, #56	; 0x38
 80127d0:	af04      	add	r7, sp, #16
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80127d6:	4b7a      	ldr	r3, [pc, #488]	; (80129c0 <icmp_input+0x1f4>)
 80127d8:	689b      	ldr	r3, [r3, #8]
 80127da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	f003 030f 	and.w	r3, r3, #15
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	009b      	lsls	r3, r3, #2
 80127ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80127ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127ee:	2b13      	cmp	r3, #19
 80127f0:	f240 80d1 	bls.w	8012996 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	895b      	ldrh	r3, [r3, #10]
 80127f8:	2b03      	cmp	r3, #3
 80127fa:	f240 80ce 	bls.w	801299a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012808:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801280c:	2b00      	cmp	r3, #0
 801280e:	f000 80bb 	beq.w	8012988 <icmp_input+0x1bc>
 8012812:	2b08      	cmp	r3, #8
 8012814:	f040 80bb 	bne.w	801298e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8012818:	4b6a      	ldr	r3, [pc, #424]	; (80129c4 <icmp_input+0x1f8>)
 801281a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801281c:	4b68      	ldr	r3, [pc, #416]	; (80129c0 <icmp_input+0x1f4>)
 801281e:	695b      	ldr	r3, [r3, #20]
 8012820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012824:	2be0      	cmp	r3, #224	; 0xe0
 8012826:	f000 80bf 	beq.w	80129a8 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801282a:	4b65      	ldr	r3, [pc, #404]	; (80129c0 <icmp_input+0x1f4>)
 801282c:	695a      	ldr	r2, [r3, #20]
 801282e:	4b64      	ldr	r3, [pc, #400]	; (80129c0 <icmp_input+0x1f4>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	4619      	mov	r1, r3
 8012834:	4610      	mov	r0, r2
 8012836:	f000 fbc9 	bl	8012fcc <ip4_addr_isbroadcast_u32>
 801283a:	4603      	mov	r3, r0
 801283c:	2b00      	cmp	r3, #0
 801283e:	f040 80b5 	bne.w	80129ac <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	891b      	ldrh	r3, [r3, #8]
 8012846:	2b07      	cmp	r3, #7
 8012848:	f240 80a9 	bls.w	801299e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801284c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801284e:	330e      	adds	r3, #14
 8012850:	b29b      	uxth	r3, r3
 8012852:	b21b      	sxth	r3, r3
 8012854:	4619      	mov	r1, r3
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f7fa f90c 	bl	800ca74 <pbuf_header>
 801285c:	4603      	mov	r3, r0
 801285e:	2b00      	cmp	r3, #0
 8012860:	d046      	beq.n	80128f0 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	891a      	ldrh	r2, [r3, #8]
 8012866:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012868:	4413      	add	r3, r2
 801286a:	b29b      	uxth	r3, r3
 801286c:	2200      	movs	r2, #0
 801286e:	4619      	mov	r1, r3
 8012870:	2002      	movs	r0, #2
 8012872:	f7f9 fdb1 	bl	800c3d8 <pbuf_alloc>
 8012876:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	2b00      	cmp	r3, #0
 801287c:	f000 8098 	beq.w	80129b0 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	895b      	ldrh	r3, [r3, #10]
 8012884:	461a      	mov	r2, r3
 8012886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012888:	3308      	adds	r3, #8
 801288a:	429a      	cmp	r2, r3
 801288c:	d203      	bcs.n	8012896 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801288e:	69b8      	ldr	r0, [r7, #24]
 8012890:	f7fa f914 	bl	800cabc <pbuf_free>
        goto icmperr;
 8012894:	e08d      	b.n	80129b2 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801289c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801289e:	4618      	mov	r0, r3
 80128a0:	f002 f8c7 	bl	8014a32 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80128a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128a6:	425b      	negs	r3, r3
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	b21b      	sxth	r3, r3
 80128ac:	4619      	mov	r1, r3
 80128ae:	69b8      	ldr	r0, [r7, #24]
 80128b0:	f7fa f8e0 	bl	800ca74 <pbuf_header>
 80128b4:	4603      	mov	r3, r0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d009      	beq.n	80128ce <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80128ba:	4b43      	ldr	r3, [pc, #268]	; (80129c8 <icmp_input+0x1fc>)
 80128bc:	22af      	movs	r2, #175	; 0xaf
 80128be:	4943      	ldr	r1, [pc, #268]	; (80129cc <icmp_input+0x200>)
 80128c0:	4843      	ldr	r0, [pc, #268]	; (80129d0 <icmp_input+0x204>)
 80128c2:	f002 f971 	bl	8014ba8 <iprintf>
        pbuf_free(r);
 80128c6:	69b8      	ldr	r0, [r7, #24]
 80128c8:	f7fa f8f8 	bl	800cabc <pbuf_free>
        goto icmperr;
 80128cc:	e071      	b.n	80129b2 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80128ce:	6879      	ldr	r1, [r7, #4]
 80128d0:	69b8      	ldr	r0, [r7, #24]
 80128d2:	f7fa fa23 	bl	800cd1c <pbuf_copy>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d003      	beq.n	80128e4 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80128dc:	69b8      	ldr	r0, [r7, #24]
 80128de:	f7fa f8ed 	bl	800cabc <pbuf_free>
        goto icmperr;
 80128e2:	e066      	b.n	80129b2 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f7fa f8e9 	bl	800cabc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	607b      	str	r3, [r7, #4]
 80128ee:	e015      	b.n	801291c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80128f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128f2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80128f6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80128fa:	33f2      	adds	r3, #242	; 0xf2
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	b21b      	sxth	r3, r3
 8012900:	4619      	mov	r1, r3
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f7fa f8b6 	bl	800ca74 <pbuf_header>
 8012908:	4603      	mov	r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	d006      	beq.n	801291c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801290e:	4b2e      	ldr	r3, [pc, #184]	; (80129c8 <icmp_input+0x1fc>)
 8012910:	22c0      	movs	r2, #192	; 0xc0
 8012912:	4930      	ldr	r1, [pc, #192]	; (80129d4 <icmp_input+0x208>)
 8012914:	482e      	ldr	r0, [pc, #184]	; (80129d0 <icmp_input+0x204>)
 8012916:	f002 f947 	bl	8014ba8 <iprintf>
        goto icmperr;
 801291a:	e04a      	b.n	80129b2 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8012922:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012926:	4619      	mov	r1, r3
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f7fa f8a3 	bl	800ca74 <pbuf_header>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d12b      	bne.n	801298c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	681a      	ldr	r2, [r3, #0]
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012942:	4b1f      	ldr	r3, [pc, #124]	; (80129c0 <icmp_input+0x1f4>)
 8012944:	691a      	ldr	r2, [r3, #16]
 8012946:	693b      	ldr	r3, [r7, #16]
 8012948:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	2200      	movs	r2, #0
 801294e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	2200      	movs	r2, #0
 8012954:	709a      	strb	r2, [r3, #2]
 8012956:	2200      	movs	r2, #0
 8012958:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	22ff      	movs	r2, #255	; 0xff
 801295e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	2200      	movs	r2, #0
 8012964:	729a      	strb	r2, [r3, #10]
 8012966:	2200      	movs	r2, #0
 8012968:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	9302      	str	r3, [sp, #8]
 801296e:	2301      	movs	r3, #1
 8012970:	9301      	str	r3, [sp, #4]
 8012972:	2300      	movs	r3, #0
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	23ff      	movs	r3, #255	; 0xff
 8012978:	2200      	movs	r2, #0
 801297a:	69f9      	ldr	r1, [r7, #28]
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 fa53 	bl	8012e28 <ip4_output_if>
 8012982:	4603      	mov	r3, r0
 8012984:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8012986:	e001      	b.n	801298c <icmp_input+0x1c0>
    break;
 8012988:	bf00      	nop
 801298a:	e000      	b.n	801298e <icmp_input+0x1c2>
    break;
 801298c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f7fa f894 	bl	800cabc <pbuf_free>
  return;
 8012994:	e011      	b.n	80129ba <icmp_input+0x1ee>
    goto lenerr;
 8012996:	bf00      	nop
 8012998:	e002      	b.n	80129a0 <icmp_input+0x1d4>
    goto lenerr;
 801299a:	bf00      	nop
 801299c:	e000      	b.n	80129a0 <icmp_input+0x1d4>
      goto lenerr;
 801299e:	bf00      	nop
lenerr:
  pbuf_free(p);
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f7fa f88b 	bl	800cabc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80129a6:	e008      	b.n	80129ba <icmp_input+0x1ee>
      goto icmperr;
 80129a8:	bf00      	nop
 80129aa:	e002      	b.n	80129b2 <icmp_input+0x1e6>
      goto icmperr;
 80129ac:	bf00      	nop
 80129ae:	e000      	b.n	80129b2 <icmp_input+0x1e6>
        goto icmperr;
 80129b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7fa f882 	bl	800cabc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80129b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80129ba:	3728      	adds	r7, #40	; 0x28
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	200074c8 	.word	0x200074c8
 80129c4:	200074dc 	.word	0x200074dc
 80129c8:	08017214 	.word	0x08017214
 80129cc:	0801724c 	.word	0x0801724c
 80129d0:	08017284 	.word	0x08017284
 80129d4:	080172ac 	.word	0x080172ac

080129d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	460b      	mov	r3, r1
 80129e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80129e4:	78fb      	ldrb	r3, [r7, #3]
 80129e6:	461a      	mov	r2, r3
 80129e8:	2103      	movs	r1, #3
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f000 f814 	bl	8012a18 <icmp_send_response>
}
 80129f0:	bf00      	nop
 80129f2:	3708      	adds	r7, #8
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}

080129f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	460b      	mov	r3, r1
 8012a02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012a04:	78fb      	ldrb	r3, [r7, #3]
 8012a06:	461a      	mov	r2, r3
 8012a08:	210b      	movs	r1, #11
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 f804 	bl	8012a18 <icmp_send_response>
}
 8012a10:	bf00      	nop
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b08c      	sub	sp, #48	; 0x30
 8012a1c:	af04      	add	r7, sp, #16
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	460b      	mov	r3, r1
 8012a22:	70fb      	strb	r3, [r7, #3]
 8012a24:	4613      	mov	r3, r2
 8012a26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012a28:	2200      	movs	r2, #0
 8012a2a:	2124      	movs	r1, #36	; 0x24
 8012a2c:	2001      	movs	r0, #1
 8012a2e:	f7f9 fcd3 	bl	800c3d8 <pbuf_alloc>
 8012a32:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d04c      	beq.n	8012ad4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	895b      	ldrh	r3, [r3, #10]
 8012a3e:	2b23      	cmp	r3, #35	; 0x23
 8012a40:	d806      	bhi.n	8012a50 <icmp_send_response+0x38>
 8012a42:	4b26      	ldr	r3, [pc, #152]	; (8012adc <icmp_send_response+0xc4>)
 8012a44:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8012a48:	4925      	ldr	r1, [pc, #148]	; (8012ae0 <icmp_send_response+0xc8>)
 8012a4a:	4826      	ldr	r0, [pc, #152]	; (8012ae4 <icmp_send_response+0xcc>)
 8012a4c:	f002 f8ac 	bl	8014ba8 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012a56:	69fb      	ldr	r3, [r7, #28]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	78fa      	ldrb	r2, [r7, #3]
 8012a60:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	78ba      	ldrb	r2, [r7, #2]
 8012a66:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	711a      	strb	r2, [r3, #4]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	2200      	movs	r2, #0
 8012a76:	719a      	strb	r2, [r3, #6]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012a7c:	69fb      	ldr	r3, [r7, #28]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	f103 0008 	add.w	r0, r3, #8
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	221c      	movs	r2, #28
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	f001 ffd1 	bl	8014a32 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012a96:	f107 030c 	add.w	r3, r7, #12
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f000 f824 	bl	8012ae8 <ip4_route>
 8012aa0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d011      	beq.n	8012acc <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	709a      	strb	r2, [r3, #2]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012ab2:	f107 020c 	add.w	r2, r7, #12
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	9302      	str	r3, [sp, #8]
 8012aba:	2301      	movs	r3, #1
 8012abc:	9301      	str	r3, [sp, #4]
 8012abe:	2300      	movs	r3, #0
 8012ac0:	9300      	str	r3, [sp, #0]
 8012ac2:	23ff      	movs	r3, #255	; 0xff
 8012ac4:	2100      	movs	r1, #0
 8012ac6:	69f8      	ldr	r0, [r7, #28]
 8012ac8:	f000 f9ae 	bl	8012e28 <ip4_output_if>
  }
  pbuf_free(q);
 8012acc:	69f8      	ldr	r0, [r7, #28]
 8012ace:	f7f9 fff5 	bl	800cabc <pbuf_free>
 8012ad2:	e000      	b.n	8012ad6 <icmp_send_response+0xbe>
    return;
 8012ad4:	bf00      	nop
}
 8012ad6:	3720      	adds	r7, #32
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	08017214 	.word	0x08017214
 8012ae0:	080172e0 	.word	0x080172e0
 8012ae4:	08017284 	.word	0x08017284

08012ae8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012ae8:	b480      	push	{r7}
 8012aea:	b085      	sub	sp, #20
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8012af0:	4b30      	ldr	r3, [pc, #192]	; (8012bb4 <ip4_route+0xcc>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	60fb      	str	r3, [r7, #12]
 8012af6:	e036      	b.n	8012b66 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012afe:	f003 0301 	and.w	r3, r3, #1
 8012b02:	b2db      	uxtb	r3, r3
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d02b      	beq.n	8012b60 <ip4_route+0x78>
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012b0e:	089b      	lsrs	r3, r3, #2
 8012b10:	f003 0301 	and.w	r3, r3, #1
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d022      	beq.n	8012b60 <ip4_route+0x78>
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d01d      	beq.n	8012b60 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	3304      	adds	r3, #4
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	405a      	eors	r2, r3
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	3308      	adds	r3, #8
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4013      	ands	r3, r2
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d101      	bne.n	8012b40 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	e033      	b.n	8012ba8 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012b46:	f003 0302 	and.w	r3, r3, #2
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d108      	bne.n	8012b60 <ip4_route+0x78>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681a      	ldr	r2, [r3, #0]
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	330c      	adds	r3, #12
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d101      	bne.n	8012b60 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	e023      	b.n	8012ba8 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	60fb      	str	r3, [r7, #12]
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d1c5      	bne.n	8012af8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012b6c:	4b12      	ldr	r3, [pc, #72]	; (8012bb8 <ip4_route+0xd0>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d015      	beq.n	8012ba0 <ip4_route+0xb8>
 8012b74:	4b10      	ldr	r3, [pc, #64]	; (8012bb8 <ip4_route+0xd0>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012b7c:	f003 0301 	and.w	r3, r3, #1
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d00d      	beq.n	8012ba0 <ip4_route+0xb8>
 8012b84:	4b0c      	ldr	r3, [pc, #48]	; (8012bb8 <ip4_route+0xd0>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012b8c:	f003 0304 	and.w	r3, r3, #4
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d005      	beq.n	8012ba0 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8012b94:	4b08      	ldr	r3, [pc, #32]	; (8012bb8 <ip4_route+0xd0>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3304      	adds	r3, #4
 8012b9a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d101      	bne.n	8012ba4 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	e001      	b.n	8012ba8 <ip4_route+0xc0>
  }

  return netif_default;
 8012ba4:	4b04      	ldr	r3, [pc, #16]	; (8012bb8 <ip4_route+0xd0>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3714      	adds	r7, #20
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr
 8012bb4:	2000ab44 	.word	0x2000ab44
 8012bb8:	2000ab48 	.word	0x2000ab48

08012bbc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b086      	sub	sp, #24
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	091b      	lsrs	r3, r3, #4
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	2b04      	cmp	r3, #4
 8012bd6:	d004      	beq.n	8012be2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f7f9 ff6f 	bl	800cabc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012bde:	2300      	movs	r3, #0
 8012be0:	e11a      	b.n	8012e18 <ip4_input+0x25c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	f003 030f 	and.w	r3, r3, #15
 8012bec:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8012bee:	897b      	ldrh	r3, [r7, #10]
 8012bf0:	009b      	lsls	r3, r3, #2
 8012bf2:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	885b      	ldrh	r3, [r3, #2]
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7f8 fdce 	bl	800b79c <lwip_htons>
 8012c00:	4603      	mov	r3, r0
 8012c02:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	891b      	ldrh	r3, [r3, #8]
 8012c08:	893a      	ldrh	r2, [r7, #8]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d204      	bcs.n	8012c18 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8012c0e:	893b      	ldrh	r3, [r7, #8]
 8012c10:	4619      	mov	r1, r3
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7f9 fdde 	bl	800c7d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	895b      	ldrh	r3, [r3, #10]
 8012c1c:	897a      	ldrh	r2, [r7, #10]
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d807      	bhi.n	8012c32 <ip4_input+0x76>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	891b      	ldrh	r3, [r3, #8]
 8012c26:	893a      	ldrh	r2, [r7, #8]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d802      	bhi.n	8012c32 <ip4_input+0x76>
 8012c2c:	897b      	ldrh	r3, [r7, #10]
 8012c2e:	2b13      	cmp	r3, #19
 8012c30:	d804      	bhi.n	8012c3c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f7f9 ff42 	bl	800cabc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	e0ed      	b.n	8012e18 <ip4_input+0x25c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	691b      	ldr	r3, [r3, #16]
 8012c40:	4a77      	ldr	r2, [pc, #476]	; (8012e20 <ip4_input+0x264>)
 8012c42:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	68db      	ldr	r3, [r3, #12]
 8012c48:	4a75      	ldr	r2, [pc, #468]	; (8012e20 <ip4_input+0x264>)
 8012c4a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012c4c:	4b74      	ldr	r3, [pc, #464]	; (8012e20 <ip4_input+0x264>)
 8012c4e:	695b      	ldr	r3, [r3, #20]
 8012c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c54:	2be0      	cmp	r3, #224	; 0xe0
 8012c56:	d112      	bne.n	8012c7e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012c5e:	f003 0301 	and.w	r3, r3, #1
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d007      	beq.n	8012c78 <ip4_input+0xbc>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d002      	beq.n	8012c78 <ip4_input+0xbc>
      netif = inp;
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	613b      	str	r3, [r7, #16]
 8012c76:	e041      	b.n	8012cfc <ip4_input+0x140>
    } else {
      netif = NULL;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	613b      	str	r3, [r7, #16]
 8012c7c:	e03e      	b.n	8012cfc <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012c8c:	f003 0301 	and.w	r3, r3, #1
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d014      	beq.n	8012cc0 <ip4_input+0x104>
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	3304      	adds	r3, #4
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d00f      	beq.n	8012cc0 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012ca0:	4b5f      	ldr	r3, [pc, #380]	; (8012e20 <ip4_input+0x264>)
 8012ca2:	695a      	ldr	r2, [r3, #20]
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	3304      	adds	r3, #4
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d026      	beq.n	8012cfc <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012cae:	4b5c      	ldr	r3, [pc, #368]	; (8012e20 <ip4_input+0x264>)
 8012cb0:	695b      	ldr	r3, [r3, #20]
 8012cb2:	6939      	ldr	r1, [r7, #16]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f000 f989 	bl	8012fcc <ip4_addr_isbroadcast_u32>
 8012cba:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d11d      	bne.n	8012cfc <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d00d      	beq.n	8012ce2 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8012cc6:	4b56      	ldr	r3, [pc, #344]	; (8012e20 <ip4_input+0x264>)
 8012cc8:	695b      	ldr	r3, [r3, #20]
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8012cce:	d102      	bne.n	8012cd6 <ip4_input+0x11a>
          netif = NULL;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	613b      	str	r3, [r7, #16]
          break;
 8012cd4:	e012      	b.n	8012cfc <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8012cda:	4b52      	ldr	r3, [pc, #328]	; (8012e24 <ip4_input+0x268>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	613b      	str	r3, [r7, #16]
 8012ce0:	e002      	b.n	8012ce8 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8012ce8:	693a      	ldr	r2, [r7, #16]
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d102      	bne.n	8012cf6 <ip4_input+0x13a>
        netif = netif->next;
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d1c4      	bne.n	8012c86 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012cfc:	4b48      	ldr	r3, [pc, #288]	; (8012e20 <ip4_input+0x264>)
 8012cfe:	691b      	ldr	r3, [r3, #16]
 8012d00:	6839      	ldr	r1, [r7, #0]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 f962 	bl	8012fcc <ip4_addr_isbroadcast_u32>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d105      	bne.n	8012d1a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012d0e:	4b44      	ldr	r3, [pc, #272]	; (8012e20 <ip4_input+0x264>)
 8012d10:	691b      	ldr	r3, [r3, #16]
 8012d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012d16:	2be0      	cmp	r3, #224	; 0xe0
 8012d18:	d104      	bne.n	8012d24 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7f9 fece 	bl	800cabc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012d20:	2300      	movs	r3, #0
 8012d22:	e079      	b.n	8012e18 <ip4_input+0x25c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d104      	bne.n	8012d34 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f7f9 fec6 	bl	800cabc <pbuf_free>
    return ERR_OK;
 8012d30:	2300      	movs	r3, #0
 8012d32:	e071      	b.n	8012e18 <ip4_input+0x25c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	88db      	ldrh	r3, [r3, #6]
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012d40:	4013      	ands	r3, r2
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d00b      	beq.n	8012d5e <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 fc86 	bl	8013658 <ip4_reass>
 8012d4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d101      	bne.n	8012d58 <ip4_input+0x19c>
      return ERR_OK;
 8012d54:	2300      	movs	r3, #0
 8012d56:	e05f      	b.n	8012e18 <ip4_input+0x25c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012d5e:	4a30      	ldr	r2, [pc, #192]	; (8012e20 <ip4_input+0x264>)
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012d64:	4a2e      	ldr	r2, [pc, #184]	; (8012e20 <ip4_input+0x264>)
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012d6a:	4a2d      	ldr	r2, [pc, #180]	; (8012e20 <ip4_input+0x264>)
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	f003 030f 	and.w	r3, r3, #15
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	b29a      	uxth	r2, r3
 8012d80:	4b27      	ldr	r3, [pc, #156]	; (8012e20 <ip4_input+0x264>)
 8012d82:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8012d84:	897b      	ldrh	r3, [r7, #10]
 8012d86:	425b      	negs	r3, r3
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	b21b      	sxth	r3, r3
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7f9 fe70 	bl	800ca74 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	7a5b      	ldrb	r3, [r3, #9]
 8012d98:	2b01      	cmp	r3, #1
 8012d9a:	d006      	beq.n	8012daa <ip4_input+0x1ee>
 8012d9c:	2b06      	cmp	r3, #6
 8012d9e:	d109      	bne.n	8012db4 <ip4_input+0x1f8>
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8012da0:	6839      	ldr	r1, [r7, #0]
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f7fb face 	bl	800e344 <tcp_input>
      break;
 8012da8:	e023      	b.n	8012df2 <ip4_input+0x236>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8012daa:	6839      	ldr	r1, [r7, #0]
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f7ff fd0d 	bl	80127cc <icmp_input>
      break;
 8012db2:	e01e      	b.n	8012df2 <ip4_input+0x236>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012db4:	4b1a      	ldr	r3, [pc, #104]	; (8012e20 <ip4_input+0x264>)
 8012db6:	695b      	ldr	r3, [r3, #20]
 8012db8:	6939      	ldr	r1, [r7, #16]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f000 f906 	bl	8012fcc <ip4_addr_isbroadcast_u32>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d112      	bne.n	8012dec <ip4_input+0x230>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012dc6:	4b16      	ldr	r3, [pc, #88]	; (8012e20 <ip4_input+0x264>)
 8012dc8:	695b      	ldr	r3, [r3, #20]
 8012dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012dce:	2be0      	cmp	r3, #224	; 0xe0
 8012dd0:	d00c      	beq.n	8012dec <ip4_input+0x230>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8012dd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f7f9 fe5d 	bl	800ca98 <pbuf_header_force>
        p->payload = iphdr;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	697a      	ldr	r2, [r7, #20]
 8012de2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012de4:	2102      	movs	r1, #2
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f7ff fdf6 	bl	80129d8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7f9 fe65 	bl	800cabc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012df2:	4b0b      	ldr	r3, [pc, #44]	; (8012e20 <ip4_input+0x264>)
 8012df4:	2200      	movs	r2, #0
 8012df6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012df8:	4b09      	ldr	r3, [pc, #36]	; (8012e20 <ip4_input+0x264>)
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012dfe:	4b08      	ldr	r3, [pc, #32]	; (8012e20 <ip4_input+0x264>)
 8012e00:	2200      	movs	r2, #0
 8012e02:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012e04:	4b06      	ldr	r3, [pc, #24]	; (8012e20 <ip4_input+0x264>)
 8012e06:	2200      	movs	r2, #0
 8012e08:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012e0a:	4b05      	ldr	r3, [pc, #20]	; (8012e20 <ip4_input+0x264>)
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012e10:	4b03      	ldr	r3, [pc, #12]	; (8012e20 <ip4_input+0x264>)
 8012e12:	2200      	movs	r2, #0
 8012e14:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012e16:	2300      	movs	r3, #0
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3718      	adds	r7, #24
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	200074c8 	.word	0x200074c8
 8012e24:	2000ab44 	.word	0x2000ab44

08012e28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b08a      	sub	sp, #40	; 0x28
 8012e2c:	af04      	add	r7, sp, #16
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	607a      	str	r2, [r7, #4]
 8012e34:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d009      	beq.n	8012e54 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d003      	beq.n	8012e4e <ip4_output_if+0x26>
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d102      	bne.n	8012e54 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e50:	3304      	adds	r3, #4
 8012e52:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012e54:	78fa      	ldrb	r2, [r7, #3]
 8012e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e58:	9302      	str	r3, [sp, #8]
 8012e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012e5e:	9301      	str	r3, [sp, #4]
 8012e60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e64:	9300      	str	r3, [sp, #0]
 8012e66:	4613      	mov	r3, r2
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	6979      	ldr	r1, [r7, #20]
 8012e6c:	68f8      	ldr	r0, [r7, #12]
 8012e6e:	f000 f805 	bl	8012e7c <ip4_output_if_src>
 8012e72:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3718      	adds	r7, #24
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b088      	sub	sp, #32
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
 8012e88:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	89db      	ldrh	r3, [r3, #14]
 8012e8e:	2b01      	cmp	r3, #1
 8012e90:	d006      	beq.n	8012ea0 <ip4_output_if_src+0x24>
 8012e92:	4b48      	ldr	r3, [pc, #288]	; (8012fb4 <ip4_output_if_src+0x138>)
 8012e94:	f240 3233 	movw	r2, #819	; 0x333
 8012e98:	4947      	ldr	r1, [pc, #284]	; (8012fb8 <ip4_output_if_src+0x13c>)
 8012e9a:	4848      	ldr	r0, [pc, #288]	; (8012fbc <ip4_output_if_src+0x140>)
 8012e9c:	f001 fe84 	bl	8014ba8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d060      	beq.n	8012f68 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012ea6:	2314      	movs	r3, #20
 8012ea8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8012eaa:	2114      	movs	r1, #20
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	f7f9 fde1 	bl	800ca74 <pbuf_header>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d002      	beq.n	8012ebe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012eb8:	f06f 0301 	mvn.w	r3, #1
 8012ebc:	e075      	b.n	8012faa <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	895b      	ldrh	r3, [r3, #10]
 8012ec8:	2b13      	cmp	r3, #19
 8012eca:	d806      	bhi.n	8012eda <ip4_output_if_src+0x5e>
 8012ecc:	4b39      	ldr	r3, [pc, #228]	; (8012fb4 <ip4_output_if_src+0x138>)
 8012ece:	f240 3261 	movw	r2, #865	; 0x361
 8012ed2:	493b      	ldr	r1, [pc, #236]	; (8012fc0 <ip4_output_if_src+0x144>)
 8012ed4:	4839      	ldr	r0, [pc, #228]	; (8012fbc <ip4_output_if_src+0x140>)
 8012ed6:	f001 fe67 	bl	8014ba8 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	78fa      	ldrb	r2, [r7, #3]
 8012ede:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012ee6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012ef0:	8b7b      	ldrh	r3, [r7, #26]
 8012ef2:	089b      	lsrs	r3, r3, #2
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	69fb      	ldr	r3, [r7, #28]
 8012f00:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012f02:	69fb      	ldr	r3, [r7, #28]
 8012f04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012f08:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	891b      	ldrh	r3, [r3, #8]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7f8 fc44 	bl	800b79c <lwip_htons>
 8012f14:	4603      	mov	r3, r0
 8012f16:	461a      	mov	r2, r3
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012f1c:	69fb      	ldr	r3, [r7, #28]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	719a      	strb	r2, [r3, #6]
 8012f22:	2200      	movs	r2, #0
 8012f24:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012f26:	4b27      	ldr	r3, [pc, #156]	; (8012fc4 <ip4_output_if_src+0x148>)
 8012f28:	881b      	ldrh	r3, [r3, #0]
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7f8 fc36 	bl	800b79c <lwip_htons>
 8012f30:	4603      	mov	r3, r0
 8012f32:	461a      	mov	r2, r3
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012f38:	4b22      	ldr	r3, [pc, #136]	; (8012fc4 <ip4_output_if_src+0x148>)
 8012f3a:	881b      	ldrh	r3, [r3, #0]
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	b29a      	uxth	r2, r3
 8012f40:	4b20      	ldr	r3, [pc, #128]	; (8012fc4 <ip4_output_if_src+0x148>)
 8012f42:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d104      	bne.n	8012f54 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012f4a:	4b1f      	ldr	r3, [pc, #124]	; (8012fc8 <ip4_output_if_src+0x14c>)
 8012f4c:	681a      	ldr	r2, [r3, #0]
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	60da      	str	r2, [r3, #12]
 8012f52:	e003      	b.n	8012f5c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	681a      	ldr	r2, [r3, #0]
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	729a      	strb	r2, [r3, #10]
 8012f62:	2200      	movs	r2, #0
 8012f64:	72da      	strb	r2, [r3, #11]
 8012f66:	e008      	b.n	8012f7a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012f6e:	69fb      	ldr	r3, [r7, #28]
 8012f70:	691b      	ldr	r3, [r3, #16]
 8012f72:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012f74:	f107 0314 	add.w	r3, r7, #20
 8012f78:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d00c      	beq.n	8012f9c <ip4_output_if_src+0x120>
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	891a      	ldrh	r2, [r3, #8]
 8012f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f88:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d906      	bls.n	8012f9c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012f92:	68f8      	ldr	r0, [r7, #12]
 8012f94:	f000 fd0a 	bl	80139ac <ip4_frag>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	e006      	b.n	8012faa <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9e:	695b      	ldr	r3, [r3, #20]
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	68f9      	ldr	r1, [r7, #12]
 8012fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fa6:	4798      	blx	r3
 8012fa8:	4603      	mov	r3, r0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3720      	adds	r7, #32
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	0801730c 	.word	0x0801730c
 8012fb8:	08017340 	.word	0x08017340
 8012fbc:	0801734c 	.word	0x0801734c
 8012fc0:	08017374 	.word	0x08017374
 8012fc4:	2000432e 	.word	0x2000432e
 8012fc8:	08017788 	.word	0x08017788

08012fcc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b085      	sub	sp, #20
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fe0:	d002      	beq.n	8012fe8 <ip4_addr_isbroadcast_u32+0x1c>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d101      	bne.n	8012fec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012fe8:	2301      	movs	r3, #1
 8012fea:	e02a      	b.n	8013042 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012ff2:	f003 0302 	and.w	r3, r3, #2
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d101      	bne.n	8012ffe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	e021      	b.n	8013042 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	3304      	adds	r3, #4
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	687a      	ldr	r2, [r7, #4]
 8013006:	429a      	cmp	r2, r3
 8013008:	d101      	bne.n	801300e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801300a:	2300      	movs	r3, #0
 801300c:	e019      	b.n	8013042 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801300e:	68fa      	ldr	r2, [r7, #12]
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	3304      	adds	r3, #4
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	405a      	eors	r2, r3
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	3308      	adds	r3, #8
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	4013      	ands	r3, r2
 8013020:	2b00      	cmp	r3, #0
 8013022:	d10d      	bne.n	8013040 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	3308      	adds	r3, #8
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	43da      	mvns	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	3308      	adds	r3, #8
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013038:	429a      	cmp	r2, r3
 801303a:	d101      	bne.n	8013040 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801303c:	2301      	movs	r3, #1
 801303e:	e000      	b.n	8013042 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013040:	2300      	movs	r3, #0
  }
}
 8013042:	4618      	mov	r0, r3
 8013044:	3714      	adds	r7, #20
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr
	...

08013050 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013056:	2300      	movs	r3, #0
 8013058:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801305a:	4b12      	ldr	r3, [pc, #72]	; (80130a4 <ip_reass_tmr+0x54>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013060:	e018      	b.n	8013094 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	7fdb      	ldrb	r3, [r3, #31]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00b      	beq.n	8013082 <ip_reass_tmr+0x32>
      r->timer--;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	7fdb      	ldrb	r3, [r3, #31]
 801306e:	3b01      	subs	r3, #1
 8013070:	b2da      	uxtb	r2, r3
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	60fb      	str	r3, [r7, #12]
 8013080:	e008      	b.n	8013094 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801308c:	68b9      	ldr	r1, [r7, #8]
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f000 f80a 	bl	80130a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d1e3      	bne.n	8013062 <ip_reass_tmr+0x12>
     }
   }
}
 801309a:	bf00      	nop
 801309c:	3710      	adds	r7, #16
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	20004330 	.word	0x20004330

080130a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b088      	sub	sp, #32
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80130b2:	2300      	movs	r3, #0
 80130b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80130b6:	683a      	ldr	r2, [r7, #0]
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d105      	bne.n	80130ca <ip_reass_free_complete_datagram+0x22>
 80130be:	4b45      	ldr	r3, [pc, #276]	; (80131d4 <ip_reass_free_complete_datagram+0x12c>)
 80130c0:	22ab      	movs	r2, #171	; 0xab
 80130c2:	4945      	ldr	r1, [pc, #276]	; (80131d8 <ip_reass_free_complete_datagram+0x130>)
 80130c4:	4845      	ldr	r0, [pc, #276]	; (80131dc <ip_reass_free_complete_datagram+0x134>)
 80130c6:	f001 fd6f 	bl	8014ba8 <iprintf>
  if (prev != NULL) {
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d00a      	beq.n	80130e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d005      	beq.n	80130e6 <ip_reass_free_complete_datagram+0x3e>
 80130da:	4b3e      	ldr	r3, [pc, #248]	; (80131d4 <ip_reass_free_complete_datagram+0x12c>)
 80130dc:	22ad      	movs	r2, #173	; 0xad
 80130de:	4940      	ldr	r1, [pc, #256]	; (80131e0 <ip_reass_free_complete_datagram+0x138>)
 80130e0:	483e      	ldr	r0, [pc, #248]	; (80131dc <ip_reass_free_complete_datagram+0x134>)
 80130e2:	f001 fd61 	bl	8014ba8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	889b      	ldrh	r3, [r3, #4]
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d12a      	bne.n	801314e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	681a      	ldr	r2, [r3, #0]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013106:	69bb      	ldr	r3, [r7, #24]
 8013108:	6858      	ldr	r0, [r3, #4]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	3308      	adds	r3, #8
 801310e:	2214      	movs	r2, #20
 8013110:	4619      	mov	r1, r3
 8013112:	f001 fc8e 	bl	8014a32 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013116:	2101      	movs	r1, #1
 8013118:	69b8      	ldr	r0, [r7, #24]
 801311a:	f7ff fc6d 	bl	80129f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801311e:	69b8      	ldr	r0, [r7, #24]
 8013120:	f7f9 fd66 	bl	800cbf0 <pbuf_clen>
 8013124:	4603      	mov	r3, r0
 8013126:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013128:	8bfa      	ldrh	r2, [r7, #30]
 801312a:	8a7b      	ldrh	r3, [r7, #18]
 801312c:	4413      	add	r3, r2
 801312e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013132:	db05      	blt.n	8013140 <ip_reass_free_complete_datagram+0x98>
 8013134:	4b27      	ldr	r3, [pc, #156]	; (80131d4 <ip_reass_free_complete_datagram+0x12c>)
 8013136:	22bc      	movs	r2, #188	; 0xbc
 8013138:	492a      	ldr	r1, [pc, #168]	; (80131e4 <ip_reass_free_complete_datagram+0x13c>)
 801313a:	4828      	ldr	r0, [pc, #160]	; (80131dc <ip_reass_free_complete_datagram+0x134>)
 801313c:	f001 fd34 	bl	8014ba8 <iprintf>
    pbufs_freed += clen;
 8013140:	8bfa      	ldrh	r2, [r7, #30]
 8013142:	8a7b      	ldrh	r3, [r7, #18]
 8013144:	4413      	add	r3, r2
 8013146:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013148:	69b8      	ldr	r0, [r7, #24]
 801314a:	f7f9 fcb7 	bl	800cabc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013154:	e01f      	b.n	8013196 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801315c:	69bb      	ldr	r3, [r7, #24]
 801315e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013166:	68f8      	ldr	r0, [r7, #12]
 8013168:	f7f9 fd42 	bl	800cbf0 <pbuf_clen>
 801316c:	4603      	mov	r3, r0
 801316e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013170:	8bfa      	ldrh	r2, [r7, #30]
 8013172:	8a7b      	ldrh	r3, [r7, #18]
 8013174:	4413      	add	r3, r2
 8013176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801317a:	db05      	blt.n	8013188 <ip_reass_free_complete_datagram+0xe0>
 801317c:	4b15      	ldr	r3, [pc, #84]	; (80131d4 <ip_reass_free_complete_datagram+0x12c>)
 801317e:	22cc      	movs	r2, #204	; 0xcc
 8013180:	4918      	ldr	r1, [pc, #96]	; (80131e4 <ip_reass_free_complete_datagram+0x13c>)
 8013182:	4816      	ldr	r0, [pc, #88]	; (80131dc <ip_reass_free_complete_datagram+0x134>)
 8013184:	f001 fd10 	bl	8014ba8 <iprintf>
    pbufs_freed += clen;
 8013188:	8bfa      	ldrh	r2, [r7, #30]
 801318a:	8a7b      	ldrh	r3, [r7, #18]
 801318c:	4413      	add	r3, r2
 801318e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013190:	68f8      	ldr	r0, [r7, #12]
 8013192:	f7f9 fc93 	bl	800cabc <pbuf_free>
  while (p != NULL) {
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d1dc      	bne.n	8013156 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801319c:	6839      	ldr	r1, [r7, #0]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f000 f8c2 	bl	8013328 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80131a4:	4b10      	ldr	r3, [pc, #64]	; (80131e8 <ip_reass_free_complete_datagram+0x140>)
 80131a6:	881b      	ldrh	r3, [r3, #0]
 80131a8:	8bfa      	ldrh	r2, [r7, #30]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d905      	bls.n	80131ba <ip_reass_free_complete_datagram+0x112>
 80131ae:	4b09      	ldr	r3, [pc, #36]	; (80131d4 <ip_reass_free_complete_datagram+0x12c>)
 80131b0:	22d2      	movs	r2, #210	; 0xd2
 80131b2:	490e      	ldr	r1, [pc, #56]	; (80131ec <ip_reass_free_complete_datagram+0x144>)
 80131b4:	4809      	ldr	r0, [pc, #36]	; (80131dc <ip_reass_free_complete_datagram+0x134>)
 80131b6:	f001 fcf7 	bl	8014ba8 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80131ba:	4b0b      	ldr	r3, [pc, #44]	; (80131e8 <ip_reass_free_complete_datagram+0x140>)
 80131bc:	881a      	ldrh	r2, [r3, #0]
 80131be:	8bfb      	ldrh	r3, [r7, #30]
 80131c0:	1ad3      	subs	r3, r2, r3
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	4b08      	ldr	r3, [pc, #32]	; (80131e8 <ip_reass_free_complete_datagram+0x140>)
 80131c6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80131c8:	8bfb      	ldrh	r3, [r7, #30]
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3720      	adds	r7, #32
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	080173a4 	.word	0x080173a4
 80131d8:	080173e0 	.word	0x080173e0
 80131dc:	080173ec 	.word	0x080173ec
 80131e0:	08017414 	.word	0x08017414
 80131e4:	08017428 	.word	0x08017428
 80131e8:	20004334 	.word	0x20004334
 80131ec:	08017448 	.word	0x08017448

080131f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b08a      	sub	sp, #40	; 0x28
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80131fa:	2300      	movs	r3, #0
 80131fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80131fe:	2300      	movs	r3, #0
 8013200:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013202:	2300      	movs	r3, #0
 8013204:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013206:	2300      	movs	r3, #0
 8013208:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801320e:	4b28      	ldr	r3, [pc, #160]	; (80132b0 <ip_reass_remove_oldest_datagram+0xc0>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013214:	e030      	b.n	8013278 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013218:	695a      	ldr	r2, [r3, #20]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	68db      	ldr	r3, [r3, #12]
 801321e:	429a      	cmp	r2, r3
 8013220:	d10c      	bne.n	801323c <ip_reass_remove_oldest_datagram+0x4c>
 8013222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013224:	699a      	ldr	r2, [r3, #24]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	691b      	ldr	r3, [r3, #16]
 801322a:	429a      	cmp	r2, r3
 801322c:	d106      	bne.n	801323c <ip_reass_remove_oldest_datagram+0x4c>
 801322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013230:	899a      	ldrh	r2, [r3, #12]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	889b      	ldrh	r3, [r3, #4]
 8013236:	b29b      	uxth	r3, r3
 8013238:	429a      	cmp	r2, r3
 801323a:	d014      	beq.n	8013266 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	3301      	adds	r3, #1
 8013240:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013242:	6a3b      	ldr	r3, [r7, #32]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d104      	bne.n	8013252 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801324a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	61bb      	str	r3, [r7, #24]
 8013250:	e009      	b.n	8013266 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013254:	7fda      	ldrb	r2, [r3, #31]
 8013256:	6a3b      	ldr	r3, [r7, #32]
 8013258:	7fdb      	ldrb	r3, [r3, #31]
 801325a:	429a      	cmp	r2, r3
 801325c:	d803      	bhi.n	8013266 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013260:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d001      	beq.n	8013272 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013270:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327a:	2b00      	cmp	r3, #0
 801327c:	d1cb      	bne.n	8013216 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801327e:	6a3b      	ldr	r3, [r7, #32]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d008      	beq.n	8013296 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013284:	69b9      	ldr	r1, [r7, #24]
 8013286:	6a38      	ldr	r0, [r7, #32]
 8013288:	f7ff ff0e 	bl	80130a8 <ip_reass_free_complete_datagram>
 801328c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801328e:	697a      	ldr	r2, [r7, #20]
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	4413      	add	r3, r2
 8013294:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013296:	697a      	ldr	r2, [r7, #20]
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	429a      	cmp	r2, r3
 801329c:	da02      	bge.n	80132a4 <ip_reass_remove_oldest_datagram+0xb4>
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	dcac      	bgt.n	80131fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80132a4:	697b      	ldr	r3, [r7, #20]
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3728      	adds	r7, #40	; 0x28
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	20004330 	.word	0x20004330

080132b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b084      	sub	sp, #16
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
 80132bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80132be:	2003      	movs	r0, #3
 80132c0:	f7f8 fe58 	bl	800bf74 <memp_malloc>
 80132c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d110      	bne.n	80132ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80132cc:	6839      	ldr	r1, [r7, #0]
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f7ff ff8e 	bl	80131f0 <ip_reass_remove_oldest_datagram>
 80132d4:	4602      	mov	r2, r0
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	4293      	cmp	r3, r2
 80132da:	dc03      	bgt.n	80132e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80132dc:	2003      	movs	r0, #3
 80132de:	f7f8 fe49 	bl	800bf74 <memp_malloc>
 80132e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d101      	bne.n	80132ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 80132ea:	2300      	movs	r3, #0
 80132ec:	e016      	b.n	801331c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80132ee:	2220      	movs	r2, #32
 80132f0:	2100      	movs	r1, #0
 80132f2:	68f8      	ldr	r0, [r7, #12]
 80132f4:	f001 fba8 	bl	8014a48 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2203      	movs	r2, #3
 80132fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80132fe:	4b09      	ldr	r3, [pc, #36]	; (8013324 <ip_reass_enqueue_new_datagram+0x70>)
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013306:	4a07      	ldr	r2, [pc, #28]	; (8013324 <ip_reass_enqueue_new_datagram+0x70>)
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	3308      	adds	r3, #8
 8013310:	2214      	movs	r2, #20
 8013312:	6879      	ldr	r1, [r7, #4]
 8013314:	4618      	mov	r0, r3
 8013316:	f001 fb8c 	bl	8014a32 <memcpy>
  return ipr;
 801331a:	68fb      	ldr	r3, [r7, #12]
}
 801331c:	4618      	mov	r0, r3
 801331e:	3710      	adds	r7, #16
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	20004330 	.word	0x20004330

08013328 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013332:	4b10      	ldr	r3, [pc, #64]	; (8013374 <ip_reass_dequeue_datagram+0x4c>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	429a      	cmp	r2, r3
 801333a:	d104      	bne.n	8013346 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4a0c      	ldr	r2, [pc, #48]	; (8013374 <ip_reass_dequeue_datagram+0x4c>)
 8013342:	6013      	str	r3, [r2, #0]
 8013344:	e00d      	b.n	8013362 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d106      	bne.n	801335a <ip_reass_dequeue_datagram+0x32>
 801334c:	4b0a      	ldr	r3, [pc, #40]	; (8013378 <ip_reass_dequeue_datagram+0x50>)
 801334e:	f240 1245 	movw	r2, #325	; 0x145
 8013352:	490a      	ldr	r1, [pc, #40]	; (801337c <ip_reass_dequeue_datagram+0x54>)
 8013354:	480a      	ldr	r0, [pc, #40]	; (8013380 <ip_reass_dequeue_datagram+0x58>)
 8013356:	f001 fc27 	bl	8014ba8 <iprintf>
    prev->next = ipr->next;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681a      	ldr	r2, [r3, #0]
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013362:	6879      	ldr	r1, [r7, #4]
 8013364:	2003      	movs	r0, #3
 8013366:	f7f8 fe57 	bl	800c018 <memp_free>
}
 801336a:	bf00      	nop
 801336c:	3708      	adds	r7, #8
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	bf00      	nop
 8013374:	20004330 	.word	0x20004330
 8013378:	080173a4 	.word	0x080173a4
 801337c:	08017464 	.word	0x08017464
 8013380:	080173ec 	.word	0x080173ec

08013384 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b08c      	sub	sp, #48	; 0x30
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8013390:	2300      	movs	r3, #0
 8013392:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013394:	2301      	movs	r3, #1
 8013396:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	685b      	ldr	r3, [r3, #4]
 801339c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801339e:	69fb      	ldr	r3, [r7, #28]
 80133a0:	885b      	ldrh	r3, [r3, #2]
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7f8 f9f9 	bl	800b79c <lwip_htons>
 80133aa:	4603      	mov	r3, r0
 80133ac:	461a      	mov	r2, r3
 80133ae:	69fb      	ldr	r3, [r7, #28]
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	f003 030f 	and.w	r3, r3, #15
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	009b      	lsls	r3, r3, #2
 80133bc:	b29b      	uxth	r3, r3
 80133be:	1ad3      	subs	r3, r2, r3
 80133c0:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	88db      	ldrh	r3, [r3, #6]
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7f8 f9e7 	bl	800b79c <lwip_htons>
 80133ce:	4603      	mov	r3, r0
 80133d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80133e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e2:	2200      	movs	r2, #0
 80133e4:	701a      	strb	r2, [r3, #0]
 80133e6:	2200      	movs	r2, #0
 80133e8:	705a      	strb	r2, [r3, #1]
 80133ea:	2200      	movs	r2, #0
 80133ec:	709a      	strb	r2, [r3, #2]
 80133ee:	2200      	movs	r2, #0
 80133f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80133f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f4:	8b3a      	ldrh	r2, [r7, #24]
 80133f6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80133f8:	8b3a      	ldrh	r2, [r7, #24]
 80133fa:	8b7b      	ldrh	r3, [r7, #26]
 80133fc:	4413      	add	r3, r2
 80133fe:	b29a      	uxth	r2, r3
 8013400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013402:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	627b      	str	r3, [r7, #36]	; 0x24
 801340a:	e061      	b.n	80134d0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8013412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013414:	889b      	ldrh	r3, [r3, #4]
 8013416:	b29a      	uxth	r2, r3
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	889b      	ldrh	r3, [r3, #4]
 801341c:	b29b      	uxth	r3, r3
 801341e:	429a      	cmp	r2, r3
 8013420:	d232      	bcs.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013426:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342a:	2b00      	cmp	r3, #0
 801342c:	d01f      	beq.n	801346e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013430:	889b      	ldrh	r3, [r3, #4]
 8013432:	b29a      	uxth	r2, r3
 8013434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013436:	88db      	ldrh	r3, [r3, #6]
 8013438:	b29b      	uxth	r3, r3
 801343a:	429a      	cmp	r2, r3
 801343c:	f0c0 80e3 	bcc.w	8013606 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8013440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013442:	88db      	ldrh	r3, [r3, #6]
 8013444:	b29a      	uxth	r2, r3
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	889b      	ldrh	r3, [r3, #4]
 801344a:	b29b      	uxth	r3, r3
 801344c:	429a      	cmp	r2, r3
 801344e:	f200 80da 	bhi.w	8013606 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013454:	68ba      	ldr	r2, [r7, #8]
 8013456:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345a:	88db      	ldrh	r3, [r3, #6]
 801345c:	b29a      	uxth	r2, r3
 801345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013460:	889b      	ldrh	r3, [r3, #4]
 8013462:	b29b      	uxth	r3, r3
 8013464:	429a      	cmp	r2, r3
 8013466:	d037      	beq.n	80134d8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013468:	2300      	movs	r3, #0
 801346a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801346c:	e034      	b.n	80134d8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013470:	88db      	ldrh	r3, [r3, #6]
 8013472:	b29a      	uxth	r2, r3
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	889b      	ldrh	r3, [r3, #4]
 8013478:	b29b      	uxth	r3, r3
 801347a:	429a      	cmp	r2, r3
 801347c:	f200 80c5 	bhi.w	801360a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	68ba      	ldr	r2, [r7, #8]
 8013484:	605a      	str	r2, [r3, #4]
      break;
 8013486:	e027      	b.n	80134d8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8013488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801348a:	889b      	ldrh	r3, [r3, #4]
 801348c:	b29a      	uxth	r2, r3
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	889b      	ldrh	r3, [r3, #4]
 8013492:	b29b      	uxth	r3, r3
 8013494:	429a      	cmp	r2, r3
 8013496:	f000 80ba 	beq.w	801360e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349c:	889b      	ldrh	r3, [r3, #4]
 801349e:	b29a      	uxth	r2, r3
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	88db      	ldrh	r3, [r3, #6]
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	429a      	cmp	r2, r3
 80134a8:	f0c0 80b3 	bcc.w	8013612 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80134ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d009      	beq.n	80134c6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	88db      	ldrh	r3, [r3, #6]
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	889b      	ldrh	r3, [r3, #4]
 80134bc:	b29b      	uxth	r3, r3
 80134be:	429a      	cmp	r2, r3
 80134c0:	d001      	beq.n	80134c6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80134c2:	2300      	movs	r3, #0
 80134c4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80134d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d19a      	bne.n	801340c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 80134d6:	e000      	b.n	80134da <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 80134d8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80134da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d12d      	bne.n	801353c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80134e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d01c      	beq.n	8013520 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80134e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e8:	88db      	ldrh	r3, [r3, #6]
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ee:	889b      	ldrh	r3, [r3, #4]
 80134f0:	b29b      	uxth	r3, r3
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d906      	bls.n	8013504 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80134f6:	4b51      	ldr	r3, [pc, #324]	; (801363c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80134f8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80134fc:	4950      	ldr	r1, [pc, #320]	; (8013640 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134fe:	4851      	ldr	r0, [pc, #324]	; (8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013500:	f001 fb52 	bl	8014ba8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013506:	68ba      	ldr	r2, [r7, #8]
 8013508:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350c:	88db      	ldrh	r3, [r3, #6]
 801350e:	b29a      	uxth	r2, r3
 8013510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013512:	889b      	ldrh	r3, [r3, #4]
 8013514:	b29b      	uxth	r3, r3
 8013516:	429a      	cmp	r2, r3
 8013518:	d010      	beq.n	801353c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801351a:	2300      	movs	r3, #0
 801351c:	623b      	str	r3, [r7, #32]
 801351e:	e00d      	b.n	801353c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d006      	beq.n	8013536 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8013528:	4b44      	ldr	r3, [pc, #272]	; (801363c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801352a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801352e:	4946      	ldr	r1, [pc, #280]	; (8013648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013530:	4844      	ldr	r0, [pc, #272]	; (8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013532:	f001 fb39 	bl	8014ba8 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d105      	bne.n	801354e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	7f9b      	ldrb	r3, [r3, #30]
 8013546:	f003 0301 	and.w	r3, r3, #1
 801354a:	2b00      	cmp	r3, #0
 801354c:	d059      	beq.n	8013602 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801354e:	6a3b      	ldr	r3, [r7, #32]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d04f      	beq.n	80135f4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	685b      	ldr	r3, [r3, #4]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d006      	beq.n	801356a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	889b      	ldrh	r3, [r3, #4]
 8013564:	b29b      	uxth	r3, r3
 8013566:	2b00      	cmp	r3, #0
 8013568:	d002      	beq.n	8013570 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801356a:	2300      	movs	r3, #0
 801356c:	623b      	str	r3, [r7, #32]
 801356e:	e041      	b.n	80135f4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013572:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801357a:	e012      	b.n	80135a2 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013584:	88db      	ldrh	r3, [r3, #6]
 8013586:	b29a      	uxth	r2, r3
 8013588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358a:	889b      	ldrh	r3, [r3, #4]
 801358c:	b29b      	uxth	r3, r3
 801358e:	429a      	cmp	r2, r3
 8013590:	d002      	beq.n	8013598 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8013592:	2300      	movs	r3, #0
 8013594:	623b      	str	r3, [r7, #32]
            break;
 8013596:	e007      	b.n	80135a8 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8013598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80135a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d1e9      	bne.n	801357c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80135a8:	6a3b      	ldr	r3, [r7, #32]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d022      	beq.n	80135f4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d106      	bne.n	80135c4 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80135b6:	4b21      	ldr	r3, [pc, #132]	; (801363c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80135b8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80135bc:	4923      	ldr	r1, [pc, #140]	; (801364c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80135be:	4821      	ldr	r0, [pc, #132]	; (8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80135c0:	f001 faf2 	bl	8014ba8 <iprintf>
          LWIP_ASSERT("sanity check",
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d106      	bne.n	80135de <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 80135d0:	4b1a      	ldr	r3, [pc, #104]	; (801363c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80135d2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80135d6:	491d      	ldr	r1, [pc, #116]	; (801364c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80135d8:	481a      	ldr	r0, [pc, #104]	; (8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80135da:	f001 fae5 	bl	8014ba8 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80135de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d006      	beq.n	80135f4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80135e6:	4b15      	ldr	r3, [pc, #84]	; (801363c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80135e8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80135ec:	4918      	ldr	r1, [pc, #96]	; (8013650 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80135ee:	4815      	ldr	r0, [pc, #84]	; (8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80135f0:	f001 fada 	bl	8014ba8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80135f4:	6a3b      	ldr	r3, [r7, #32]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	bf14      	ite	ne
 80135fa:	2301      	movne	r3, #1
 80135fc:	2300      	moveq	r3, #0
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	e018      	b.n	8013634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013602:	2300      	movs	r3, #0
 8013604:	e016      	b.n	8013634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8013606:	bf00      	nop
 8013608:	e004      	b.n	8013614 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801360a:	bf00      	nop
 801360c:	e002      	b.n	8013614 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801360e:	bf00      	nop
 8013610:	e000      	b.n	8013614 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013612:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8013614:	68b8      	ldr	r0, [r7, #8]
 8013616:	f7f9 faeb 	bl	800cbf0 <pbuf_clen>
 801361a:	4603      	mov	r3, r0
 801361c:	461a      	mov	r2, r3
 801361e:	4b0d      	ldr	r3, [pc, #52]	; (8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013620:	881b      	ldrh	r3, [r3, #0]
 8013622:	1a9b      	subs	r3, r3, r2
 8013624:	b29a      	uxth	r2, r3
 8013626:	4b0b      	ldr	r3, [pc, #44]	; (8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013628:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801362a:	68b8      	ldr	r0, [r7, #8]
 801362c:	f7f9 fa46 	bl	800cabc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8013634:	4618      	mov	r0, r3
 8013636:	3730      	adds	r7, #48	; 0x30
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}
 801363c:	080173a4 	.word	0x080173a4
 8013640:	08017480 	.word	0x08017480
 8013644:	080173ec 	.word	0x080173ec
 8013648:	080174a0 	.word	0x080174a0
 801364c:	080174d8 	.word	0x080174d8
 8013650:	080174e8 	.word	0x080174e8
 8013654:	20004334 	.word	0x20004334

08013658 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b08e      	sub	sp, #56	; 0x38
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	685b      	ldr	r3, [r3, #4]
 8013664:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	f003 030f 	and.w	r3, r3, #15
 801366e:	009b      	lsls	r3, r3, #2
 8013670:	2b14      	cmp	r3, #20
 8013672:	f040 8131 	bne.w	80138d8 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8013676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013678:	88db      	ldrh	r3, [r3, #6]
 801367a:	b29b      	uxth	r3, r3
 801367c:	4618      	mov	r0, r3
 801367e:	f7f8 f88d 	bl	800b79c <lwip_htons>
 8013682:	4603      	mov	r3, r0
 8013684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013688:	b29b      	uxth	r3, r3
 801368a:	00db      	lsls	r3, r3, #3
 801368c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013690:	885b      	ldrh	r3, [r3, #2]
 8013692:	b29b      	uxth	r3, r3
 8013694:	4618      	mov	r0, r3
 8013696:	f7f8 f881 	bl	800b79c <lwip_htons>
 801369a:	4603      	mov	r3, r0
 801369c:	461a      	mov	r2, r3
 801369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	f003 030f 	and.w	r3, r3, #15
 80136a8:	b29b      	uxth	r3, r3
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f7f9 fa9c 	bl	800cbf0 <pbuf_clen>
 80136b8:	4603      	mov	r3, r0
 80136ba:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80136bc:	4b8d      	ldr	r3, [pc, #564]	; (80138f4 <ip4_reass+0x29c>)
 80136be:	881b      	ldrh	r3, [r3, #0]
 80136c0:	461a      	mov	r2, r3
 80136c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136c4:	4413      	add	r3, r2
 80136c6:	2b0a      	cmp	r3, #10
 80136c8:	dd10      	ble.n	80136ec <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80136ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136cc:	4619      	mov	r1, r3
 80136ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136d0:	f7ff fd8e 	bl	80131f0 <ip_reass_remove_oldest_datagram>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	f000 8100 	beq.w	80138dc <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80136dc:	4b85      	ldr	r3, [pc, #532]	; (80138f4 <ip4_reass+0x29c>)
 80136de:	881b      	ldrh	r3, [r3, #0]
 80136e0:	461a      	mov	r2, r3
 80136e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136e4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80136e6:	2b0a      	cmp	r3, #10
 80136e8:	f300 80f8 	bgt.w	80138dc <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80136ec:	4b82      	ldr	r3, [pc, #520]	; (80138f8 <ip4_reass+0x2a0>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	633b      	str	r3, [r7, #48]	; 0x30
 80136f2:	e015      	b.n	8013720 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80136f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f6:	695a      	ldr	r2, [r3, #20]
 80136f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d10c      	bne.n	801371a <ip4_reass+0xc2>
 8013700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013702:	699a      	ldr	r2, [r3, #24]
 8013704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013706:	691b      	ldr	r3, [r3, #16]
 8013708:	429a      	cmp	r2, r3
 801370a:	d106      	bne.n	801371a <ip4_reass+0xc2>
 801370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370e:	899a      	ldrh	r2, [r3, #12]
 8013710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013712:	889b      	ldrh	r3, [r3, #4]
 8013714:	b29b      	uxth	r3, r3
 8013716:	429a      	cmp	r2, r3
 8013718:	d006      	beq.n	8013728 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	633b      	str	r3, [r7, #48]	; 0x30
 8013720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013722:	2b00      	cmp	r3, #0
 8013724:	d1e6      	bne.n	80136f4 <ip4_reass+0x9c>
 8013726:	e000      	b.n	801372a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013728:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	2b00      	cmp	r3, #0
 801372e:	d109      	bne.n	8013744 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013732:	4619      	mov	r1, r3
 8013734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013736:	f7ff fdbd 	bl	80132b4 <ip_reass_enqueue_new_datagram>
 801373a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373e:	2b00      	cmp	r3, #0
 8013740:	d11c      	bne.n	801377c <ip4_reass+0x124>
      goto nullreturn;
 8013742:	e0ce      	b.n	80138e2 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013746:	88db      	ldrh	r3, [r3, #6]
 8013748:	b29b      	uxth	r3, r3
 801374a:	4618      	mov	r0, r3
 801374c:	f7f8 f826 	bl	800b79c <lwip_htons>
 8013750:	4603      	mov	r3, r0
 8013752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013756:	2b00      	cmp	r3, #0
 8013758:	d110      	bne.n	801377c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375c:	89db      	ldrh	r3, [r3, #14]
 801375e:	4618      	mov	r0, r3
 8013760:	f7f8 f81c 	bl	800b79c <lwip_htons>
 8013764:	4603      	mov	r3, r0
 8013766:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801376a:	2b00      	cmp	r3, #0
 801376c:	d006      	beq.n	801377c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013770:	3308      	adds	r3, #8
 8013772:	2214      	movs	r2, #20
 8013774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013776:	4618      	mov	r0, r3
 8013778:	f001 f95b 	bl	8014a32 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377e:	88db      	ldrh	r3, [r3, #6]
 8013780:	b29b      	uxth	r3, r3
 8013782:	f003 0320 	and.w	r3, r3, #32
 8013786:	2b00      	cmp	r3, #0
 8013788:	bf0c      	ite	eq
 801378a:	2301      	moveq	r3, #1
 801378c:	2300      	movne	r3, #0
 801378e:	b2db      	uxtb	r3, r3
 8013790:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013792:	69fb      	ldr	r3, [r7, #28]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d00e      	beq.n	80137b6 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8013798:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801379a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801379c:	4413      	add	r3, r2
 801379e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80137a0:	8b7a      	ldrh	r2, [r7, #26]
 80137a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80137a4:	429a      	cmp	r2, r3
 80137a6:	f0c0 8099 	bcc.w	80138dc <ip4_reass+0x284>
 80137aa:	8b7b      	ldrh	r3, [r7, #26]
 80137ac:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80137b0:	4293      	cmp	r3, r2
 80137b2:	f200 8093 	bhi.w	80138dc <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80137b6:	69fa      	ldr	r2, [r7, #28]
 80137b8:	6879      	ldr	r1, [r7, #4]
 80137ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137bc:	f7ff fde2 	bl	8013384 <ip_reass_chain_frag_into_datagram_and_validate>
 80137c0:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137c8:	f000 808a 	beq.w	80138e0 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80137cc:	4b49      	ldr	r3, [pc, #292]	; (80138f4 <ip4_reass+0x29c>)
 80137ce:	881a      	ldrh	r2, [r3, #0]
 80137d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137d2:	4413      	add	r3, r2
 80137d4:	b29a      	uxth	r2, r3
 80137d6:	4b47      	ldr	r3, [pc, #284]	; (80138f4 <ip4_reass+0x29c>)
 80137d8:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80137da:	69fb      	ldr	r3, [r7, #28]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d00d      	beq.n	80137fc <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80137e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80137e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137e4:	4413      	add	r3, r2
 80137e6:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80137e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ea:	8a7a      	ldrh	r2, [r7, #18]
 80137ec:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80137ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f0:	7f9b      	ldrb	r3, [r3, #30]
 80137f2:	f043 0301 	orr.w	r3, r3, #1
 80137f6:	b2da      	uxtb	r2, r3
 80137f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fa:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	2b01      	cmp	r3, #1
 8013800:	d168      	bne.n	80138d4 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8013802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013804:	8b9b      	ldrh	r3, [r3, #28]
 8013806:	3314      	adds	r3, #20
 8013808:	b29a      	uxth	r2, r3
 801380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8013818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013822:	3308      	adds	r3, #8
 8013824:	2214      	movs	r2, #20
 8013826:	4619      	mov	r1, r3
 8013828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801382a:	f001 f902 	bl	8014a32 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	8b9b      	ldrh	r3, [r3, #28]
 8013832:	4618      	mov	r0, r3
 8013834:	f7f7 ffb2 	bl	800b79c <lwip_htons>
 8013838:	4603      	mov	r3, r0
 801383a:	461a      	mov	r2, r3
 801383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013842:	2200      	movs	r2, #0
 8013844:	719a      	strb	r2, [r3, #6]
 8013846:	2200      	movs	r2, #0
 8013848:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384c:	2200      	movs	r2, #0
 801384e:	729a      	strb	r2, [r3, #10]
 8013850:	2200      	movs	r2, #0
 8013852:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801385a:	e00e      	b.n	801387a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8013862:	f06f 0113 	mvn.w	r1, #19
 8013866:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013868:	f7f9 f904 	bl	800ca74 <pbuf_header>
      pbuf_cat(p, r);
 801386c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f7f9 f9fe 	bl	800cc70 <pbuf_cat>
      r = iprh->next_pbuf;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387c:	2b00      	cmp	r3, #0
 801387e:	d1ed      	bne.n	801385c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013880:	4b1d      	ldr	r3, [pc, #116]	; (80138f8 <ip4_reass+0x2a0>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013886:	429a      	cmp	r2, r3
 8013888:	d102      	bne.n	8013890 <ip4_reass+0x238>
      ipr_prev = NULL;
 801388a:	2300      	movs	r3, #0
 801388c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801388e:	e010      	b.n	80138b2 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013890:	4b19      	ldr	r3, [pc, #100]	; (80138f8 <ip4_reass+0x2a0>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013896:	e007      	b.n	80138a8 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8013898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801389e:	429a      	cmp	r2, r3
 80138a0:	d006      	beq.n	80138b0 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80138a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d1f4      	bne.n	8013898 <ip4_reass+0x240>
 80138ae:	e000      	b.n	80138b2 <ip4_reass+0x25a>
          break;
 80138b0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80138b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80138b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138b6:	f7ff fd37 	bl	8013328 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f7f9 f998 	bl	800cbf0 <pbuf_clen>
 80138c0:	4603      	mov	r3, r0
 80138c2:	461a      	mov	r2, r3
 80138c4:	4b0b      	ldr	r3, [pc, #44]	; (80138f4 <ip4_reass+0x29c>)
 80138c6:	881b      	ldrh	r3, [r3, #0]
 80138c8:	1a9b      	subs	r3, r3, r2
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	4b09      	ldr	r3, [pc, #36]	; (80138f4 <ip4_reass+0x29c>)
 80138ce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	e00a      	b.n	80138ea <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80138d4:	2300      	movs	r3, #0
 80138d6:	e008      	b.n	80138ea <ip4_reass+0x292>
    goto nullreturn;
 80138d8:	bf00      	nop
 80138da:	e002      	b.n	80138e2 <ip4_reass+0x28a>

nullreturn:
 80138dc:	bf00      	nop
 80138de:	e000      	b.n	80138e2 <ip4_reass+0x28a>
    goto nullreturn;
 80138e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7f9 f8ea 	bl	800cabc <pbuf_free>
  return NULL;
 80138e8:	2300      	movs	r3, #0
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3738      	adds	r7, #56	; 0x38
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
 80138f2:	bf00      	nop
 80138f4:	20004334 	.word	0x20004334
 80138f8:	20004330 	.word	0x20004330

080138fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8013900:	2004      	movs	r0, #4
 8013902:	f7f8 fb37 	bl	800bf74 <memp_malloc>
 8013906:	4603      	mov	r3, r0
}
 8013908:	4618      	mov	r0, r3
 801390a:	bd80      	pop	{r7, pc}

0801390c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d106      	bne.n	8013928 <ip_frag_free_pbuf_custom_ref+0x1c>
 801391a:	4b07      	ldr	r3, [pc, #28]	; (8013938 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801391c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8013920:	4906      	ldr	r1, [pc, #24]	; (801393c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013922:	4807      	ldr	r0, [pc, #28]	; (8013940 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013924:	f001 f940 	bl	8014ba8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013928:	6879      	ldr	r1, [r7, #4]
 801392a:	2004      	movs	r0, #4
 801392c:	f7f8 fb74 	bl	800c018 <memp_free>
}
 8013930:	bf00      	nop
 8013932:	3708      	adds	r7, #8
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}
 8013938:	080173a4 	.word	0x080173a4
 801393c:	0801750c 	.word	0x0801750c
 8013940:	080173ec 	.word	0x080173ec

08013944 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b084      	sub	sp, #16
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d106      	bne.n	8013964 <ipfrag_free_pbuf_custom+0x20>
 8013956:	4b11      	ldr	r3, [pc, #68]	; (801399c <ipfrag_free_pbuf_custom+0x58>)
 8013958:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801395c:	4910      	ldr	r1, [pc, #64]	; (80139a0 <ipfrag_free_pbuf_custom+0x5c>)
 801395e:	4811      	ldr	r0, [pc, #68]	; (80139a4 <ipfrag_free_pbuf_custom+0x60>)
 8013960:	f001 f922 	bl	8014ba8 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8013964:	68fa      	ldr	r2, [r7, #12]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	429a      	cmp	r2, r3
 801396a:	d006      	beq.n	801397a <ipfrag_free_pbuf_custom+0x36>
 801396c:	4b0b      	ldr	r3, [pc, #44]	; (801399c <ipfrag_free_pbuf_custom+0x58>)
 801396e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8013972:	490d      	ldr	r1, [pc, #52]	; (80139a8 <ipfrag_free_pbuf_custom+0x64>)
 8013974:	480b      	ldr	r0, [pc, #44]	; (80139a4 <ipfrag_free_pbuf_custom+0x60>)
 8013976:	f001 f917 	bl	8014ba8 <iprintf>
  if (pcr->original != NULL) {
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	695b      	ldr	r3, [r3, #20]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d004      	beq.n	801398c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	695b      	ldr	r3, [r3, #20]
 8013986:	4618      	mov	r0, r3
 8013988:	f7f9 f898 	bl	800cabc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	f7ff ffbd 	bl	801390c <ip_frag_free_pbuf_custom_ref>
}
 8013992:	bf00      	nop
 8013994:	3710      	adds	r7, #16
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	080173a4 	.word	0x080173a4
 80139a0:	08017518 	.word	0x08017518
 80139a4:	080173ec 	.word	0x080173ec
 80139a8:	08017524 	.word	0x08017524

080139ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b092      	sub	sp, #72	; 0x48
 80139b0:	af02      	add	r7, sp, #8
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	60b9      	str	r1, [r7, #8]
 80139b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80139b8:	2300      	movs	r3, #0
 80139ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80139c0:	3b14      	subs	r3, #20
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	da00      	bge.n	80139c8 <ip4_frag+0x1c>
 80139c6:	3307      	adds	r3, #7
 80139c8:	10db      	asrs	r3, r3, #3
 80139ca:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80139cc:	2314      	movs	r3, #20
 80139ce:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80139d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139d8:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80139da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	f003 030f 	and.w	r3, r3, #15
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	2b14      	cmp	r3, #20
 80139e6:	d009      	beq.n	80139fc <ip4_frag+0x50>
 80139e8:	4b79      	ldr	r3, [pc, #484]	; (8013bd0 <ip4_frag+0x224>)
 80139ea:	f240 22e1 	movw	r2, #737	; 0x2e1
 80139ee:	4979      	ldr	r1, [pc, #484]	; (8013bd4 <ip4_frag+0x228>)
 80139f0:	4879      	ldr	r0, [pc, #484]	; (8013bd8 <ip4_frag+0x22c>)
 80139f2:	f001 f8d9 	bl	8014ba8 <iprintf>
 80139f6:	f06f 0305 	mvn.w	r3, #5
 80139fa:	e0e5      	b.n	8013bc8 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80139fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fe:	88db      	ldrh	r3, [r3, #6]
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7f7 feca 	bl	800b79c <lwip_htons>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8013a0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013a0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a12:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8013a14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d009      	beq.n	8013a32 <ip4_frag+0x86>
 8013a1e:	4b6c      	ldr	r3, [pc, #432]	; (8013bd0 <ip4_frag+0x224>)
 8013a20:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013a24:	496d      	ldr	r1, [pc, #436]	; (8013bdc <ip4_frag+0x230>)
 8013a26:	486c      	ldr	r0, [pc, #432]	; (8013bd8 <ip4_frag+0x22c>)
 8013a28:	f001 f8be 	bl	8014ba8 <iprintf>
 8013a2c:	f06f 0305 	mvn.w	r3, #5
 8013a30:	e0ca      	b.n	8013bc8 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	891b      	ldrh	r3, [r3, #8]
 8013a36:	3b14      	subs	r3, #20
 8013a38:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8013a3a:	e0bc      	b.n	8013bb6 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8013a3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013a3e:	00da      	lsls	r2, r3, #3
 8013a40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a42:	4293      	cmp	r3, r2
 8013a44:	bfa8      	it	ge
 8013a46:	4613      	movge	r3, r2
 8013a48:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	2114      	movs	r1, #20
 8013a4e:	2002      	movs	r0, #2
 8013a50:	f7f8 fcc2 	bl	800c3d8 <pbuf_alloc>
 8013a54:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8013a56:	6a3b      	ldr	r3, [r7, #32]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	f000 80b2 	beq.w	8013bc2 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	895b      	ldrh	r3, [r3, #10]
 8013a62:	2b13      	cmp	r3, #19
 8013a64:	d806      	bhi.n	8013a74 <ip4_frag+0xc8>
 8013a66:	4b5a      	ldr	r3, [pc, #360]	; (8013bd0 <ip4_frag+0x224>)
 8013a68:	f240 3209 	movw	r2, #777	; 0x309
 8013a6c:	495c      	ldr	r1, [pc, #368]	; (8013be0 <ip4_frag+0x234>)
 8013a6e:	485a      	ldr	r0, [pc, #360]	; (8013bd8 <ip4_frag+0x22c>)
 8013a70:	f001 f89a 	bl	8014ba8 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013a74:	6a3b      	ldr	r3, [r7, #32]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	2214      	movs	r2, #20
 8013a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f000 ffd8 	bl	8014a32 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013a82:	6a3b      	ldr	r3, [r7, #32]
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8013a88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8013a8c:	e04f      	b.n	8013b2e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	895a      	ldrh	r2, [r3, #10]
 8013a92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013a98:	8b7a      	ldrh	r2, [r7, #26]
 8013a9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	bf28      	it	cs
 8013aa0:	4613      	movcs	r3, r2
 8013aa2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013aa4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d105      	bne.n	8013ab6 <ip4_frag+0x10a>
        poff = 0;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	60fb      	str	r3, [r7, #12]
        continue;
 8013ab4:	e03b      	b.n	8013b2e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013ab6:	f7ff ff21 	bl	80138fc <ip_frag_alloc_pbuf_custom_ref>
 8013aba:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d103      	bne.n	8013aca <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8013ac2:	6a38      	ldr	r0, [r7, #32]
 8013ac4:	f7f8 fffa 	bl	800cabc <pbuf_free>
        goto memerr;
 8013ac8:	e07c      	b.n	8013bc4 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013aca:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013ad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013ad2:	4413      	add	r3, r2
 8013ad4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8013ad6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013ad8:	9201      	str	r2, [sp, #4]
 8013ada:	9300      	str	r3, [sp, #0]
 8013adc:	4603      	mov	r3, r0
 8013ade:	2202      	movs	r2, #2
 8013ae0:	2004      	movs	r0, #4
 8013ae2:	f7f8 fe0d 	bl	800c700 <pbuf_alloced_custom>
 8013ae6:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d106      	bne.n	8013afc <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013aee:	6978      	ldr	r0, [r7, #20]
 8013af0:	f7ff ff0c 	bl	801390c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013af4:	6a38      	ldr	r0, [r7, #32]
 8013af6:	f7f8 ffe1 	bl	800cabc <pbuf_free>
        goto memerr;
 8013afa:	e063      	b.n	8013bc4 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f7f9 f88f 	bl	800cc20 <pbuf_ref>
      pcr->original = p;
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	68fa      	ldr	r2, [r7, #12]
 8013b06:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	4a36      	ldr	r2, [pc, #216]	; (8013be4 <ip4_frag+0x238>)
 8013b0c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013b0e:	6939      	ldr	r1, [r7, #16]
 8013b10:	6a38      	ldr	r0, [r7, #32]
 8013b12:	f7f9 f8ad 	bl	800cc70 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8013b16:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8013b18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b1a:	1ad3      	subs	r3, r2, r3
 8013b1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8013b1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d004      	beq.n	8013b2e <ip4_frag+0x182>
        poff = 0;
 8013b24:	2300      	movs	r3, #0
 8013b26:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013b2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d1ac      	bne.n	8013a8e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8013b34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013b36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b38:	4413      	add	r3, r2
 8013b3a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013b3c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013b42:	3b14      	subs	r3, #20
 8013b44:	429a      	cmp	r2, r3
 8013b46:	bfd4      	ite	le
 8013b48:	2301      	movle	r3, #1
 8013b4a:	2300      	movgt	r3, #0
 8013b4c:	b2db      	uxtb	r3, r3
 8013b4e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013b50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013b52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b56:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d103      	bne.n	8013b66 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8013b5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013b64:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013b66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7f7 fe17 	bl	800b79c <lwip_htons>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	461a      	mov	r2, r3
 8013b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b74:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8013b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013b78:	3314      	adds	r3, #20
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7f7 fe0d 	bl	800b79c <lwip_htons>
 8013b82:	4603      	mov	r3, r0
 8013b84:	461a      	mov	r2, r3
 8013b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b88:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	729a      	strb	r2, [r3, #10]
 8013b90:	2200      	movs	r2, #0
 8013b92:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	695b      	ldr	r3, [r3, #20]
 8013b98:	687a      	ldr	r2, [r7, #4]
 8013b9a:	6a39      	ldr	r1, [r7, #32]
 8013b9c:	68b8      	ldr	r0, [r7, #8]
 8013b9e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013ba0:	6a38      	ldr	r0, [r7, #32]
 8013ba2:	f7f8 ff8b 	bl	800cabc <pbuf_free>
    left -= fragsize;
 8013ba6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013baa:	1ad3      	subs	r3, r2, r3
 8013bac:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8013bae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013bb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013bb2:	4413      	add	r3, r2
 8013bb4:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8013bb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f47f af3f 	bne.w	8013a3c <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	e002      	b.n	8013bc8 <ip4_frag+0x21c>
      goto memerr;
 8013bc2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3740      	adds	r7, #64	; 0x40
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	080173a4 	.word	0x080173a4
 8013bd4:	08017530 	.word	0x08017530
 8013bd8:	080173ec 	.word	0x080173ec
 8013bdc:	08017558 	.word	0x08017558
 8013be0:	08017574 	.word	0x08017574
 8013be4:	08013945 	.word	0x08013945

08013be8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b086      	sub	sp, #24
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8013bf2:	230e      	movs	r3, #14
 8013bf4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	895b      	ldrh	r3, [r3, #10]
 8013bfa:	2b0e      	cmp	r3, #14
 8013bfc:	d977      	bls.n	8013cee <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	7b1a      	ldrb	r2, [r3, #12]
 8013c08:	7b5b      	ldrb	r3, [r3, #13]
 8013c0a:	021b      	lsls	r3, r3, #8
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	f003 0301 	and.w	r3, r3, #1
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d023      	beq.n	8013c64 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	2b01      	cmp	r3, #1
 8013c22:	d10f      	bne.n	8013c44 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	785b      	ldrb	r3, [r3, #1]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d11b      	bne.n	8013c64 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c30:	2b5e      	cmp	r3, #94	; 0x5e
 8013c32:	d117      	bne.n	8013c64 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	7b5b      	ldrb	r3, [r3, #13]
 8013c38:	f043 0310 	orr.w	r3, r3, #16
 8013c3c:	b2da      	uxtb	r2, r3
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	735a      	strb	r2, [r3, #13]
 8013c42:	e00f      	b.n	8013c64 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	2206      	movs	r2, #6
 8013c48:	4930      	ldr	r1, [pc, #192]	; (8013d0c <ethernet_input+0x124>)
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f000 fee2 	bl	8014a14 <memcmp>
 8013c50:	4603      	mov	r3, r0
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d106      	bne.n	8013c64 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	7b5b      	ldrb	r3, [r3, #13]
 8013c5a:	f043 0308 	orr.w	r3, r3, #8
 8013c5e:	b2da      	uxtb	r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013c64:	89fb      	ldrh	r3, [r7, #14]
 8013c66:	2b08      	cmp	r3, #8
 8013c68:	d003      	beq.n	8013c72 <ethernet_input+0x8a>
 8013c6a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013c6e:	d01e      	beq.n	8013cae <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013c70:	e044      	b.n	8013cfc <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013c78:	f003 0308 	and.w	r3, r3, #8
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d038      	beq.n	8013cf2 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	895b      	ldrh	r3, [r3, #10]
 8013c84:	461a      	mov	r2, r3
 8013c86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	db33      	blt.n	8013cf6 <ethernet_input+0x10e>
 8013c8e:	8afb      	ldrh	r3, [r7, #22]
 8013c90:	425b      	negs	r3, r3
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	b21b      	sxth	r3, r3
 8013c96:	4619      	mov	r1, r3
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f7f8 feeb 	bl	800ca74 <pbuf_header>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d128      	bne.n	8013cf6 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8013ca4:	6839      	ldr	r1, [r7, #0]
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7fe ff88 	bl	8012bbc <ip4_input>
      break;
 8013cac:	e01d      	b.n	8013cea <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013cb4:	f003 0308 	and.w	r3, r3, #8
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d01e      	beq.n	8013cfa <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	895b      	ldrh	r3, [r3, #10]
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	db15      	blt.n	8013cf6 <ethernet_input+0x10e>
 8013cca:	8afb      	ldrh	r3, [r7, #22]
 8013ccc:	425b      	negs	r3, r3
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	b21b      	sxth	r3, r3
 8013cd2:	4619      	mov	r1, r3
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f7f8 fecd 	bl	800ca74 <pbuf_header>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d10a      	bne.n	8013cf6 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8013ce0:	6839      	ldr	r1, [r7, #0]
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f7fe f956 	bl	8011f94 <etharp_input>
      break;
 8013ce8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013cea:	2300      	movs	r3, #0
 8013cec:	e00a      	b.n	8013d04 <ethernet_input+0x11c>
    goto free_and_return;
 8013cee:	bf00      	nop
 8013cf0:	e004      	b.n	8013cfc <ethernet_input+0x114>
        goto free_and_return;
 8013cf2:	bf00      	nop
 8013cf4:	e002      	b.n	8013cfc <ethernet_input+0x114>

free_and_return:
 8013cf6:	bf00      	nop
 8013cf8:	e000      	b.n	8013cfc <ethernet_input+0x114>
        goto free_and_return;
 8013cfa:	bf00      	nop
  pbuf_free(p);
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7f8 fedd 	bl	800cabc <pbuf_free>
  return ERR_OK;
 8013d02:	2300      	movs	r3, #0
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3718      	adds	r7, #24
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	0801778c 	.word	0x0801778c

08013d10 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b086      	sub	sp, #24
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013d1e:	8c3b      	ldrh	r3, [r7, #32]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7f7 fd3b 	bl	800b79c <lwip_htons>
 8013d26:	4603      	mov	r3, r0
 8013d28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8013d2a:	210e      	movs	r1, #14
 8013d2c:	68b8      	ldr	r0, [r7, #8]
 8013d2e:	f7f8 fea1 	bl	800ca74 <pbuf_header>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d125      	bne.n	8013d84 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	8afa      	ldrh	r2, [r7, #22]
 8013d42:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	2206      	movs	r2, #6
 8013d48:	6839      	ldr	r1, [r7, #0]
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f000 fe71 	bl	8014a32 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	3306      	adds	r3, #6
 8013d54:	2206      	movs	r2, #6
 8013d56:	6879      	ldr	r1, [r7, #4]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f000 fe6a 	bl	8014a32 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013d64:	2b06      	cmp	r3, #6
 8013d66:	d006      	beq.n	8013d76 <ethernet_output+0x66>
 8013d68:	4b0a      	ldr	r3, [pc, #40]	; (8013d94 <ethernet_output+0x84>)
 8013d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013d6e:	490a      	ldr	r1, [pc, #40]	; (8013d98 <ethernet_output+0x88>)
 8013d70:	480a      	ldr	r0, [pc, #40]	; (8013d9c <ethernet_output+0x8c>)
 8013d72:	f000 ff19 	bl	8014ba8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	699b      	ldr	r3, [r3, #24]
 8013d7a:	68b9      	ldr	r1, [r7, #8]
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	4798      	blx	r3
 8013d80:	4603      	mov	r3, r0
 8013d82:	e002      	b.n	8013d8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013d84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013d86:	f06f 0301 	mvn.w	r3, #1
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3718      	adds	r7, #24
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	08017594 	.word	0x08017594
 8013d98:	080175cc 	.word	0x080175cc
 8013d9c:	08017600 	.word	0x08017600

08013da0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b086      	sub	sp, #24
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	60bb      	str	r3, [r7, #8]
 8013dae:	2304      	movs	r3, #4
 8013db0:	60fb      	str	r3, [r7, #12]
 8013db2:	2300      	movs	r3, #0
 8013db4:	613b      	str	r3, [r7, #16]
 8013db6:	2300      	movs	r3, #0
 8013db8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013dba:	f107 0308 	add.w	r3, r7, #8
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7f4 fea3 	bl	8008b0c <osMessageCreate>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d102      	bne.n	8013dda <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dd8:	e000      	b.n	8013ddc <sys_mbox_new+0x3c>

  return ERR_OK;
 8013dda:	2300      	movs	r3, #0
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3718      	adds	r7, #24
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8013dee:	bf00      	nop
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	6839      	ldr	r1, [r7, #0]
 8013df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7f4 feb0 	bl	8008b60 <osMessagePut>
 8013e00:	4603      	mov	r3, r0
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d1f4      	bne.n	8013df0 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8013e06:	bf00      	nop
 8013e08:	3708      	adds	r7, #8
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b084      	sub	sp, #16
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
 8013e16:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	6839      	ldr	r1, [r7, #0]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7f4 fe9d 	bl	8008b60 <osMessagePut>
 8013e26:	4603      	mov	r3, r0
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d102      	bne.n	8013e32 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	73fb      	strb	r3, [r7, #15]
 8013e30:	e001      	b.n	8013e36 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013e32:	23ff      	movs	r3, #255	; 0xff
 8013e34:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3710      	adds	r7, #16
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}

08013e42 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013e42:	b580      	push	{r7, lr}
 8013e44:	b08c      	sub	sp, #48	; 0x30
 8013e46:	af00      	add	r7, sp, #0
 8013e48:	61f8      	str	r0, [r7, #28]
 8013e4a:	61b9      	str	r1, [r7, #24]
 8013e4c:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013e4e:	f7f4 fc98 	bl	8008782 <osKernelSysTick>
 8013e52:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d017      	beq.n	8013e8a <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013e5a:	69fb      	ldr	r3, [r7, #28]
 8013e5c:	6819      	ldr	r1, [r3, #0]
 8013e5e:	f107 0320 	add.w	r3, r7, #32
 8013e62:	697a      	ldr	r2, [r7, #20]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7f4 febb 	bl	8008be0 <osMessageGet>

    if(event.status == osEventMessage)
 8013e6a:	6a3b      	ldr	r3, [r7, #32]
 8013e6c:	2b10      	cmp	r3, #16
 8013e6e:	d109      	bne.n	8013e84 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e72:	461a      	mov	r2, r3
 8013e74:	69bb      	ldr	r3, [r7, #24]
 8013e76:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013e78:	f7f4 fc83 	bl	8008782 <osKernelSysTick>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e80:	1ad3      	subs	r3, r2, r3
 8013e82:	e019      	b.n	8013eb8 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e88:	e016      	b.n	8013eb8 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013e8a:	69fb      	ldr	r3, [r7, #28]
 8013e8c:	6819      	ldr	r1, [r3, #0]
 8013e8e:	463b      	mov	r3, r7
 8013e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7f4 fea3 	bl	8008be0 <osMessageGet>
 8013e9a:	f107 0320 	add.w	r3, r7, #32
 8013e9e:	463a      	mov	r2, r7
 8013ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ea2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	69bb      	ldr	r3, [r7, #24]
 8013eac:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013eae:	f7f4 fc68 	bl	8008782 <osKernelSysTick>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb6:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3730      	adds	r7, #48	; 0x30
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b083      	sub	sp, #12
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d101      	bne.n	8013ed4 <sys_mbox_valid+0x14>
    return 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	e000      	b.n	8013ed6 <sys_mbox_valid+0x16>
  else
    return 1;
 8013ed4:	2301      	movs	r3, #1
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	370c      	adds	r7, #12
 8013eda:	46bd      	mov	sp, r7
 8013edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee0:	4770      	bx	lr
	...

08013ee4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013ee8:	4803      	ldr	r0, [pc, #12]	; (8013ef8 <sys_init+0x14>)
 8013eea:	f7f4 fcba 	bl	8008862 <osMutexCreate>
 8013eee:	4602      	mov	r2, r0
 8013ef0:	4b02      	ldr	r3, [pc, #8]	; (8013efc <sys_init+0x18>)
 8013ef2:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013ef4:	bf00      	nop
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	0801779c 	.word	0x0801779c
 8013efc:	2000ab70 	.word	0x2000ab70

08013f00 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013f08:	2300      	movs	r3, #0
 8013f0a:	60bb      	str	r3, [r7, #8]
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013f10:	f107 0308 	add.w	r3, r7, #8
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7f4 fca4 	bl	8008862 <osMutexCreate>
 8013f1a:	4602      	mov	r2, r0
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d102      	bne.n	8013f2e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f2c:	e000      	b.n	8013f30 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013f2e:	2300      	movs	r3, #0
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3710      	adds	r7, #16
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}

08013f38 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7f4 fca3 	bl	8008894 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013f4e:	bf00      	nop
 8013f50:	3708      	adds	r7, #8
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}

08013f56 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013f56:	b580      	push	{r7, lr}
 8013f58:	b082      	sub	sp, #8
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7f4 fce4 	bl	8008930 <osMutexRelease>
}
 8013f68:	bf00      	nop
 8013f6a:	3708      	adds	r7, #8
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b08c      	sub	sp, #48	; 0x30
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	60f8      	str	r0, [r7, #12]
 8013f78:	60b9      	str	r1, [r7, #8]
 8013f7a:	607a      	str	r2, [r7, #4]
 8013f7c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013f7e:	f107 0314 	add.w	r3, r7, #20
 8013f82:	2200      	movs	r2, #0
 8013f84:	601a      	str	r2, [r3, #0]
 8013f86:	605a      	str	r2, [r3, #4]
 8013f88:	609a      	str	r2, [r3, #8]
 8013f8a:	60da      	str	r2, [r3, #12]
 8013f8c:	611a      	str	r2, [r3, #16]
 8013f8e:	615a      	str	r2, [r3, #20]
 8013f90:	619a      	str	r2, [r3, #24]
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	617b      	str	r3, [r7, #20]
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	61bb      	str	r3, [r7, #24]
 8013f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f9c:	b21b      	sxth	r3, r3
 8013f9e:	83bb      	strh	r3, [r7, #28]
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013fa4:	f107 0314 	add.w	r3, r7, #20
 8013fa8:	6879      	ldr	r1, [r7, #4]
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7f4 fbf9 	bl	80087a2 <osThreadCreate>
 8013fb0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3730      	adds	r7, #48	; 0x30
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
	...

08013fbc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013fc0:	4b04      	ldr	r3, [pc, #16]	; (8013fd4 <sys_arch_protect+0x18>)
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7f4 fc63 	bl	8008894 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013fce:	2301      	movs	r3, #1
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	bd80      	pop	{r7, pc}
 8013fd4:	2000ab70 	.word	0x2000ab70

08013fd8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b082      	sub	sp, #8
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013fe0:	4b04      	ldr	r3, [pc, #16]	; (8013ff4 <sys_arch_unprotect+0x1c>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7f4 fca3 	bl	8008930 <osMutexRelease>
}
 8013fea:	bf00      	nop
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	2000ab70 	.word	0x2000ab70

08013ff8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	4912      	ldr	r1, [pc, #72]	; (8014048 <MX_USB_DEVICE_Init+0x50>)
 8014000:	4812      	ldr	r0, [pc, #72]	; (801404c <MX_USB_DEVICE_Init+0x54>)
 8014002:	f7f3 fb32 	bl	800766a <USBD_Init>
 8014006:	4603      	mov	r3, r0
 8014008:	2b00      	cmp	r3, #0
 801400a:	d001      	beq.n	8014010 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801400c:	f7ec fe0a 	bl	8000c24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014010:	490f      	ldr	r1, [pc, #60]	; (8014050 <MX_USB_DEVICE_Init+0x58>)
 8014012:	480e      	ldr	r0, [pc, #56]	; (801404c <MX_USB_DEVICE_Init+0x54>)
 8014014:	f7f3 fb54 	bl	80076c0 <USBD_RegisterClass>
 8014018:	4603      	mov	r3, r0
 801401a:	2b00      	cmp	r3, #0
 801401c:	d001      	beq.n	8014022 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801401e:	f7ec fe01 	bl	8000c24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014022:	490c      	ldr	r1, [pc, #48]	; (8014054 <MX_USB_DEVICE_Init+0x5c>)
 8014024:	4809      	ldr	r0, [pc, #36]	; (801404c <MX_USB_DEVICE_Init+0x54>)
 8014026:	f7f3 fab1 	bl	800758c <USBD_CDC_RegisterInterface>
 801402a:	4603      	mov	r3, r0
 801402c:	2b00      	cmp	r3, #0
 801402e:	d001      	beq.n	8014034 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014030:	f7ec fdf8 	bl	8000c24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014034:	4805      	ldr	r0, [pc, #20]	; (801404c <MX_USB_DEVICE_Init+0x54>)
 8014036:	f7f3 fb5d 	bl	80076f4 <USBD_Start>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d001      	beq.n	8014044 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014040:	f7ec fdf0 	bl	8000c24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014044:	bf00      	nop
 8014046:	bd80      	pop	{r7, pc}
 8014048:	20000130 	.word	0x20000130
 801404c:	2000ab74 	.word	0x2000ab74
 8014050:	20000014 	.word	0x20000014
 8014054:	20000120 	.word	0x20000120

08014058 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801405c:	2200      	movs	r2, #0
 801405e:	4905      	ldr	r1, [pc, #20]	; (8014074 <CDC_Init_FS+0x1c>)
 8014060:	4805      	ldr	r0, [pc, #20]	; (8014078 <CDC_Init_FS+0x20>)
 8014062:	f7f3 faaa 	bl	80075ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014066:	4905      	ldr	r1, [pc, #20]	; (801407c <CDC_Init_FS+0x24>)
 8014068:	4803      	ldr	r0, [pc, #12]	; (8014078 <CDC_Init_FS+0x20>)
 801406a:	f7f3 fac0 	bl	80075ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801406e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014070:	4618      	mov	r0, r3
 8014072:	bd80      	pop	{r7, pc}
 8014074:	2000b610 	.word	0x2000b610
 8014078:	2000ab74 	.word	0x2000ab74
 801407c:	2000ae10 	.word	0x2000ae10

08014080 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014080:	b480      	push	{r7}
 8014082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014084:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014086:	4618      	mov	r0, r3
 8014088:	46bd      	mov	sp, r7
 801408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408e:	4770      	bx	lr

08014090 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014090:	b480      	push	{r7}
 8014092:	b083      	sub	sp, #12
 8014094:	af00      	add	r7, sp, #0
 8014096:	4603      	mov	r3, r0
 8014098:	6039      	str	r1, [r7, #0]
 801409a:	71fb      	strb	r3, [r7, #7]
 801409c:	4613      	mov	r3, r2
 801409e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80140a0:	79fb      	ldrb	r3, [r7, #7]
 80140a2:	2b23      	cmp	r3, #35	; 0x23
 80140a4:	d84a      	bhi.n	801413c <CDC_Control_FS+0xac>
 80140a6:	a201      	add	r2, pc, #4	; (adr r2, 80140ac <CDC_Control_FS+0x1c>)
 80140a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ac:	0801413d 	.word	0x0801413d
 80140b0:	0801413d 	.word	0x0801413d
 80140b4:	0801413d 	.word	0x0801413d
 80140b8:	0801413d 	.word	0x0801413d
 80140bc:	0801413d 	.word	0x0801413d
 80140c0:	0801413d 	.word	0x0801413d
 80140c4:	0801413d 	.word	0x0801413d
 80140c8:	0801413d 	.word	0x0801413d
 80140cc:	0801413d 	.word	0x0801413d
 80140d0:	0801413d 	.word	0x0801413d
 80140d4:	0801413d 	.word	0x0801413d
 80140d8:	0801413d 	.word	0x0801413d
 80140dc:	0801413d 	.word	0x0801413d
 80140e0:	0801413d 	.word	0x0801413d
 80140e4:	0801413d 	.word	0x0801413d
 80140e8:	0801413d 	.word	0x0801413d
 80140ec:	0801413d 	.word	0x0801413d
 80140f0:	0801413d 	.word	0x0801413d
 80140f4:	0801413d 	.word	0x0801413d
 80140f8:	0801413d 	.word	0x0801413d
 80140fc:	0801413d 	.word	0x0801413d
 8014100:	0801413d 	.word	0x0801413d
 8014104:	0801413d 	.word	0x0801413d
 8014108:	0801413d 	.word	0x0801413d
 801410c:	0801413d 	.word	0x0801413d
 8014110:	0801413d 	.word	0x0801413d
 8014114:	0801413d 	.word	0x0801413d
 8014118:	0801413d 	.word	0x0801413d
 801411c:	0801413d 	.word	0x0801413d
 8014120:	0801413d 	.word	0x0801413d
 8014124:	0801413d 	.word	0x0801413d
 8014128:	0801413d 	.word	0x0801413d
 801412c:	0801413d 	.word	0x0801413d
 8014130:	0801413d 	.word	0x0801413d
 8014134:	0801413d 	.word	0x0801413d
 8014138:	0801413d 	.word	0x0801413d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801413c:	bf00      	nop
  }

  return (USBD_OK);
 801413e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014140:	4618      	mov	r0, r3
 8014142:	370c      	adds	r7, #12
 8014144:	46bd      	mov	sp, r7
 8014146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414a:	4770      	bx	lr

0801414c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
 8014154:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014156:	6879      	ldr	r1, [r7, #4]
 8014158:	4805      	ldr	r0, [pc, #20]	; (8014170 <CDC_Receive_FS+0x24>)
 801415a:	f7f3 fa48 	bl	80075ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801415e:	4804      	ldr	r0, [pc, #16]	; (8014170 <CDC_Receive_FS+0x24>)
 8014160:	f7f3 fa59 	bl	8007616 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014164:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014166:	4618      	mov	r0, r3
 8014168:	3708      	adds	r7, #8
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
 801416e:	bf00      	nop
 8014170:	2000ab74 	.word	0x2000ab74

08014174 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014174:	b480      	push	{r7}
 8014176:	b083      	sub	sp, #12
 8014178:	af00      	add	r7, sp, #0
 801417a:	4603      	mov	r3, r0
 801417c:	6039      	str	r1, [r7, #0]
 801417e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	2212      	movs	r2, #18
 8014184:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014186:	4b03      	ldr	r3, [pc, #12]	; (8014194 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014188:	4618      	mov	r0, r3
 801418a:	370c      	adds	r7, #12
 801418c:	46bd      	mov	sp, r7
 801418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014192:	4770      	bx	lr
 8014194:	2000014c 	.word	0x2000014c

08014198 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014198:	b480      	push	{r7}
 801419a:	b083      	sub	sp, #12
 801419c:	af00      	add	r7, sp, #0
 801419e:	4603      	mov	r3, r0
 80141a0:	6039      	str	r1, [r7, #0]
 80141a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	2204      	movs	r2, #4
 80141a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80141aa:	4b03      	ldr	r3, [pc, #12]	; (80141b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	370c      	adds	r7, #12
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr
 80141b8:	20000160 	.word	0x20000160

080141bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	4603      	mov	r3, r0
 80141c4:	6039      	str	r1, [r7, #0]
 80141c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80141c8:	79fb      	ldrb	r3, [r7, #7]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d105      	bne.n	80141da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80141ce:	683a      	ldr	r2, [r7, #0]
 80141d0:	4907      	ldr	r1, [pc, #28]	; (80141f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80141d2:	4808      	ldr	r0, [pc, #32]	; (80141f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80141d4:	f7f4 f9c6 	bl	8008564 <USBD_GetString>
 80141d8:	e004      	b.n	80141e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80141da:	683a      	ldr	r2, [r7, #0]
 80141dc:	4904      	ldr	r1, [pc, #16]	; (80141f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80141de:	4805      	ldr	r0, [pc, #20]	; (80141f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80141e0:	f7f4 f9c0 	bl	8008564 <USBD_GetString>
  }
  return USBD_StrDesc;
 80141e4:	4b02      	ldr	r3, [pc, #8]	; (80141f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3708      	adds	r7, #8
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	2000be10 	.word	0x2000be10
 80141f4:	08017628 	.word	0x08017628

080141f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	4603      	mov	r3, r0
 8014200:	6039      	str	r1, [r7, #0]
 8014202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014204:	683a      	ldr	r2, [r7, #0]
 8014206:	4904      	ldr	r1, [pc, #16]	; (8014218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014208:	4804      	ldr	r0, [pc, #16]	; (801421c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801420a:	f7f4 f9ab 	bl	8008564 <USBD_GetString>
  return USBD_StrDesc;
 801420e:	4b02      	ldr	r3, [pc, #8]	; (8014218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014210:	4618      	mov	r0, r3
 8014212:	3708      	adds	r7, #8
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}
 8014218:	2000be10 	.word	0x2000be10
 801421c:	08017640 	.word	0x08017640

08014220 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b082      	sub	sp, #8
 8014224:	af00      	add	r7, sp, #0
 8014226:	4603      	mov	r3, r0
 8014228:	6039      	str	r1, [r7, #0]
 801422a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	221a      	movs	r2, #26
 8014230:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014232:	f000 f843 	bl	80142bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014236:	4b02      	ldr	r3, [pc, #8]	; (8014240 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014238:	4618      	mov	r0, r3
 801423a:	3708      	adds	r7, #8
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}
 8014240:	20000164 	.word	0x20000164

08014244 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
 801424a:	4603      	mov	r3, r0
 801424c:	6039      	str	r1, [r7, #0]
 801424e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014250:	79fb      	ldrb	r3, [r7, #7]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d105      	bne.n	8014262 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014256:	683a      	ldr	r2, [r7, #0]
 8014258:	4907      	ldr	r1, [pc, #28]	; (8014278 <USBD_FS_ConfigStrDescriptor+0x34>)
 801425a:	4808      	ldr	r0, [pc, #32]	; (801427c <USBD_FS_ConfigStrDescriptor+0x38>)
 801425c:	f7f4 f982 	bl	8008564 <USBD_GetString>
 8014260:	e004      	b.n	801426c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014262:	683a      	ldr	r2, [r7, #0]
 8014264:	4904      	ldr	r1, [pc, #16]	; (8014278 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014266:	4805      	ldr	r0, [pc, #20]	; (801427c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014268:	f7f4 f97c 	bl	8008564 <USBD_GetString>
  }
  return USBD_StrDesc;
 801426c:	4b02      	ldr	r3, [pc, #8]	; (8014278 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801426e:	4618      	mov	r0, r3
 8014270:	3708      	adds	r7, #8
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	2000be10 	.word	0x2000be10
 801427c:	08017654 	.word	0x08017654

08014280 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	4603      	mov	r3, r0
 8014288:	6039      	str	r1, [r7, #0]
 801428a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801428c:	79fb      	ldrb	r3, [r7, #7]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d105      	bne.n	801429e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014292:	683a      	ldr	r2, [r7, #0]
 8014294:	4907      	ldr	r1, [pc, #28]	; (80142b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014296:	4808      	ldr	r0, [pc, #32]	; (80142b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014298:	f7f4 f964 	bl	8008564 <USBD_GetString>
 801429c:	e004      	b.n	80142a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801429e:	683a      	ldr	r2, [r7, #0]
 80142a0:	4904      	ldr	r1, [pc, #16]	; (80142b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80142a2:	4805      	ldr	r0, [pc, #20]	; (80142b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80142a4:	f7f4 f95e 	bl	8008564 <USBD_GetString>
  }
  return USBD_StrDesc;
 80142a8:	4b02      	ldr	r3, [pc, #8]	; (80142b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80142aa:	4618      	mov	r0, r3
 80142ac:	3708      	adds	r7, #8
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}
 80142b2:	bf00      	nop
 80142b4:	2000be10 	.word	0x2000be10
 80142b8:	08017660 	.word	0x08017660

080142bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80142c2:	4b0f      	ldr	r3, [pc, #60]	; (8014300 <Get_SerialNum+0x44>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80142c8:	4b0e      	ldr	r3, [pc, #56]	; (8014304 <Get_SerialNum+0x48>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80142ce:	4b0e      	ldr	r3, [pc, #56]	; (8014308 <Get_SerialNum+0x4c>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80142d4:	68fa      	ldr	r2, [r7, #12]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	4413      	add	r3, r2
 80142da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d009      	beq.n	80142f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80142e2:	2208      	movs	r2, #8
 80142e4:	4909      	ldr	r1, [pc, #36]	; (801430c <Get_SerialNum+0x50>)
 80142e6:	68f8      	ldr	r0, [r7, #12]
 80142e8:	f000 f814 	bl	8014314 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80142ec:	2204      	movs	r2, #4
 80142ee:	4908      	ldr	r1, [pc, #32]	; (8014310 <Get_SerialNum+0x54>)
 80142f0:	68b8      	ldr	r0, [r7, #8]
 80142f2:	f000 f80f 	bl	8014314 <IntToUnicode>
  }
}
 80142f6:	bf00      	nop
 80142f8:	3710      	adds	r7, #16
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	1fff7a10 	.word	0x1fff7a10
 8014304:	1fff7a14 	.word	0x1fff7a14
 8014308:	1fff7a18 	.word	0x1fff7a18
 801430c:	20000166 	.word	0x20000166
 8014310:	20000176 	.word	0x20000176

08014314 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014314:	b480      	push	{r7}
 8014316:	b087      	sub	sp, #28
 8014318:	af00      	add	r7, sp, #0
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	60b9      	str	r1, [r7, #8]
 801431e:	4613      	mov	r3, r2
 8014320:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014322:	2300      	movs	r3, #0
 8014324:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014326:	2300      	movs	r3, #0
 8014328:	75fb      	strb	r3, [r7, #23]
 801432a:	e027      	b.n	801437c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	0f1b      	lsrs	r3, r3, #28
 8014330:	2b09      	cmp	r3, #9
 8014332:	d80b      	bhi.n	801434c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	0f1b      	lsrs	r3, r3, #28
 8014338:	b2da      	uxtb	r2, r3
 801433a:	7dfb      	ldrb	r3, [r7, #23]
 801433c:	005b      	lsls	r3, r3, #1
 801433e:	4619      	mov	r1, r3
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	440b      	add	r3, r1
 8014344:	3230      	adds	r2, #48	; 0x30
 8014346:	b2d2      	uxtb	r2, r2
 8014348:	701a      	strb	r2, [r3, #0]
 801434a:	e00a      	b.n	8014362 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	0f1b      	lsrs	r3, r3, #28
 8014350:	b2da      	uxtb	r2, r3
 8014352:	7dfb      	ldrb	r3, [r7, #23]
 8014354:	005b      	lsls	r3, r3, #1
 8014356:	4619      	mov	r1, r3
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	440b      	add	r3, r1
 801435c:	3237      	adds	r2, #55	; 0x37
 801435e:	b2d2      	uxtb	r2, r2
 8014360:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	011b      	lsls	r3, r3, #4
 8014366:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014368:	7dfb      	ldrb	r3, [r7, #23]
 801436a:	005b      	lsls	r3, r3, #1
 801436c:	3301      	adds	r3, #1
 801436e:	68ba      	ldr	r2, [r7, #8]
 8014370:	4413      	add	r3, r2
 8014372:	2200      	movs	r2, #0
 8014374:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014376:	7dfb      	ldrb	r3, [r7, #23]
 8014378:	3301      	adds	r3, #1
 801437a:	75fb      	strb	r3, [r7, #23]
 801437c:	7dfa      	ldrb	r2, [r7, #23]
 801437e:	79fb      	ldrb	r3, [r7, #7]
 8014380:	429a      	cmp	r2, r3
 8014382:	d3d3      	bcc.n	801432c <IntToUnicode+0x18>
  }
}
 8014384:	bf00      	nop
 8014386:	371c      	adds	r7, #28
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr

08014390 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b08a      	sub	sp, #40	; 0x28
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014398:	f107 0314 	add.w	r3, r7, #20
 801439c:	2200      	movs	r2, #0
 801439e:	601a      	str	r2, [r3, #0]
 80143a0:	605a      	str	r2, [r3, #4]
 80143a2:	609a      	str	r2, [r3, #8]
 80143a4:	60da      	str	r2, [r3, #12]
 80143a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80143b0:	d147      	bne.n	8014442 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80143b2:	2300      	movs	r3, #0
 80143b4:	613b      	str	r3, [r7, #16]
 80143b6:	4b25      	ldr	r3, [pc, #148]	; (801444c <HAL_PCD_MspInit+0xbc>)
 80143b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ba:	4a24      	ldr	r2, [pc, #144]	; (801444c <HAL_PCD_MspInit+0xbc>)
 80143bc:	f043 0301 	orr.w	r3, r3, #1
 80143c0:	6313      	str	r3, [r2, #48]	; 0x30
 80143c2:	4b22      	ldr	r3, [pc, #136]	; (801444c <HAL_PCD_MspInit+0xbc>)
 80143c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143c6:	f003 0301 	and.w	r3, r3, #1
 80143ca:	613b      	str	r3, [r7, #16]
 80143cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80143ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80143d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143d4:	2302      	movs	r3, #2
 80143d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143d8:	2300      	movs	r3, #0
 80143da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80143dc:	2303      	movs	r3, #3
 80143de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80143e0:	230a      	movs	r3, #10
 80143e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80143e4:	f107 0314 	add.w	r3, r7, #20
 80143e8:	4619      	mov	r1, r3
 80143ea:	4819      	ldr	r0, [pc, #100]	; (8014450 <HAL_PCD_MspInit+0xc0>)
 80143ec:	f7ed ffdc 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80143f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80143f6:	2300      	movs	r3, #0
 80143f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143fa:	2300      	movs	r3, #0
 80143fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80143fe:	f107 0314 	add.w	r3, r7, #20
 8014402:	4619      	mov	r1, r3
 8014404:	4812      	ldr	r0, [pc, #72]	; (8014450 <HAL_PCD_MspInit+0xc0>)
 8014406:	f7ed ffcf 	bl	80023a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801440a:	4b10      	ldr	r3, [pc, #64]	; (801444c <HAL_PCD_MspInit+0xbc>)
 801440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801440e:	4a0f      	ldr	r2, [pc, #60]	; (801444c <HAL_PCD_MspInit+0xbc>)
 8014410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014414:	6353      	str	r3, [r2, #52]	; 0x34
 8014416:	2300      	movs	r3, #0
 8014418:	60fb      	str	r3, [r7, #12]
 801441a:	4b0c      	ldr	r3, [pc, #48]	; (801444c <HAL_PCD_MspInit+0xbc>)
 801441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801441e:	4a0b      	ldr	r2, [pc, #44]	; (801444c <HAL_PCD_MspInit+0xbc>)
 8014420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014424:	6453      	str	r3, [r2, #68]	; 0x44
 8014426:	4b09      	ldr	r3, [pc, #36]	; (801444c <HAL_PCD_MspInit+0xbc>)
 8014428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801442a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801442e:	60fb      	str	r3, [r7, #12]
 8014430:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014432:	2200      	movs	r2, #0
 8014434:	2105      	movs	r1, #5
 8014436:	2043      	movs	r0, #67	; 0x43
 8014438:	f7ec ff7a 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801443c:	2043      	movs	r0, #67	; 0x43
 801443e:	f7ec ff93 	bl	8001368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014442:	bf00      	nop
 8014444:	3728      	adds	r7, #40	; 0x28
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}
 801444a:	bf00      	nop
 801444c:	40023800 	.word	0x40023800
 8014450:	40020000 	.word	0x40020000

08014454 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014468:	4619      	mov	r1, r3
 801446a:	4610      	mov	r0, r2
 801446c:	f7f3 f98b 	bl	8007786 <USBD_LL_SetupStage>
}
 8014470:	bf00      	nop
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	460b      	mov	r3, r1
 8014482:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801448a:	78fa      	ldrb	r2, [r7, #3]
 801448c:	6879      	ldr	r1, [r7, #4]
 801448e:	4613      	mov	r3, r2
 8014490:	00db      	lsls	r3, r3, #3
 8014492:	1a9b      	subs	r3, r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	440b      	add	r3, r1
 8014498:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801449c:	681a      	ldr	r2, [r3, #0]
 801449e:	78fb      	ldrb	r3, [r7, #3]
 80144a0:	4619      	mov	r1, r3
 80144a2:	f7f3 f9bb 	bl	800781c <USBD_LL_DataOutStage>
}
 80144a6:	bf00      	nop
 80144a8:	3708      	adds	r7, #8
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}

080144ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144ae:	b580      	push	{r7, lr}
 80144b0:	b082      	sub	sp, #8
 80144b2:	af00      	add	r7, sp, #0
 80144b4:	6078      	str	r0, [r7, #4]
 80144b6:	460b      	mov	r3, r1
 80144b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80144c0:	78fa      	ldrb	r2, [r7, #3]
 80144c2:	6879      	ldr	r1, [r7, #4]
 80144c4:	4613      	mov	r3, r2
 80144c6:	00db      	lsls	r3, r3, #3
 80144c8:	1a9b      	subs	r3, r3, r2
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	440b      	add	r3, r1
 80144ce:	3348      	adds	r3, #72	; 0x48
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	78fb      	ldrb	r3, [r7, #3]
 80144d4:	4619      	mov	r1, r3
 80144d6:	f7f3 fa12 	bl	80078fe <USBD_LL_DataInStage>
}
 80144da:	bf00      	nop
 80144dc:	3708      	adds	r7, #8
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}

080144e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144e2:	b580      	push	{r7, lr}
 80144e4:	b082      	sub	sp, #8
 80144e6:	af00      	add	r7, sp, #0
 80144e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7f3 fb20 	bl	8007b36 <USBD_LL_SOF>
}
 80144f6:	bf00      	nop
 80144f8:	3708      	adds	r7, #8
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}

080144fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80144fe:	b580      	push	{r7, lr}
 8014500:	b084      	sub	sp, #16
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014506:	2301      	movs	r3, #1
 8014508:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	68db      	ldr	r3, [r3, #12]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d102      	bne.n	8014518 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014512:	2300      	movs	r3, #0
 8014514:	73fb      	strb	r3, [r7, #15]
 8014516:	e008      	b.n	801452a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	2b02      	cmp	r3, #2
 801451e:	d102      	bne.n	8014526 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014520:	2301      	movs	r3, #1
 8014522:	73fb      	strb	r3, [r7, #15]
 8014524:	e001      	b.n	801452a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014526:	f7ec fb7d 	bl	8000c24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014530:	7bfa      	ldrb	r2, [r7, #15]
 8014532:	4611      	mov	r1, r2
 8014534:	4618      	mov	r0, r3
 8014536:	f7f3 fac8 	bl	8007aca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014540:	4618      	mov	r0, r3
 8014542:	f7f3 fa81 	bl	8007a48 <USBD_LL_Reset>
}
 8014546:	bf00      	nop
 8014548:	3710      	adds	r7, #16
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
	...

08014550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801455e:	4618      	mov	r0, r3
 8014560:	f7f3 fac3 	bl	8007aea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	6812      	ldr	r2, [r2, #0]
 8014572:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014576:	f043 0301 	orr.w	r3, r3, #1
 801457a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6a1b      	ldr	r3, [r3, #32]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d005      	beq.n	8014590 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014584:	4b04      	ldr	r3, [pc, #16]	; (8014598 <HAL_PCD_SuspendCallback+0x48>)
 8014586:	691b      	ldr	r3, [r3, #16]
 8014588:	4a03      	ldr	r2, [pc, #12]	; (8014598 <HAL_PCD_SuspendCallback+0x48>)
 801458a:	f043 0306 	orr.w	r3, r3, #6
 801458e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014590:	bf00      	nop
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	e000ed00 	.word	0xe000ed00

0801459c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7f3 fab2 	bl	8007b14 <USBD_LL_Resume>
}
 80145b0:	bf00      	nop
 80145b2:	3708      	adds	r7, #8
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}

080145b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	460b      	mov	r3, r1
 80145c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80145ca:	78fa      	ldrb	r2, [r7, #3]
 80145cc:	4611      	mov	r1, r2
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7f3 fad8 	bl	8007b84 <USBD_LL_IsoOUTIncomplete>
}
 80145d4:	bf00      	nop
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	460b      	mov	r3, r1
 80145e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80145ee:	78fa      	ldrb	r2, [r7, #3]
 80145f0:	4611      	mov	r1, r2
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7f3 fab9 	bl	8007b6a <USBD_LL_IsoINIncomplete>
}
 80145f8:	bf00      	nop
 80145fa:	3708      	adds	r7, #8
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801460e:	4618      	mov	r0, r3
 8014610:	f7f3 fac5 	bl	8007b9e <USBD_LL_DevConnected>
}
 8014614:	bf00      	nop
 8014616:	3708      	adds	r7, #8
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}

0801461c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801462a:	4618      	mov	r0, r3
 801462c:	f7f3 fac2 	bl	8007bb4 <USBD_LL_DevDisconnected>
}
 8014630:	bf00      	nop
 8014632:	3708      	adds	r7, #8
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d13c      	bne.n	80146c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014648:	4a20      	ldr	r2, [pc, #128]	; (80146cc <USBD_LL_Init+0x94>)
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	4a1e      	ldr	r2, [pc, #120]	; (80146cc <USBD_LL_Init+0x94>)
 8014654:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014658:	4b1c      	ldr	r3, [pc, #112]	; (80146cc <USBD_LL_Init+0x94>)
 801465a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801465e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014660:	4b1a      	ldr	r3, [pc, #104]	; (80146cc <USBD_LL_Init+0x94>)
 8014662:	2204      	movs	r2, #4
 8014664:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014666:	4b19      	ldr	r3, [pc, #100]	; (80146cc <USBD_LL_Init+0x94>)
 8014668:	2202      	movs	r2, #2
 801466a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801466c:	4b17      	ldr	r3, [pc, #92]	; (80146cc <USBD_LL_Init+0x94>)
 801466e:	2200      	movs	r2, #0
 8014670:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014672:	4b16      	ldr	r3, [pc, #88]	; (80146cc <USBD_LL_Init+0x94>)
 8014674:	2202      	movs	r2, #2
 8014676:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8014678:	4b14      	ldr	r3, [pc, #80]	; (80146cc <USBD_LL_Init+0x94>)
 801467a:	2201      	movs	r2, #1
 801467c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801467e:	4b13      	ldr	r3, [pc, #76]	; (80146cc <USBD_LL_Init+0x94>)
 8014680:	2200      	movs	r2, #0
 8014682:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014684:	4b11      	ldr	r3, [pc, #68]	; (80146cc <USBD_LL_Init+0x94>)
 8014686:	2200      	movs	r2, #0
 8014688:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801468a:	4b10      	ldr	r3, [pc, #64]	; (80146cc <USBD_LL_Init+0x94>)
 801468c:	2201      	movs	r2, #1
 801468e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014690:	4b0e      	ldr	r3, [pc, #56]	; (80146cc <USBD_LL_Init+0x94>)
 8014692:	2200      	movs	r2, #0
 8014694:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014696:	480d      	ldr	r0, [pc, #52]	; (80146cc <USBD_LL_Init+0x94>)
 8014698:	f7ee f849 	bl	800272e <HAL_PCD_Init>
 801469c:	4603      	mov	r3, r0
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d001      	beq.n	80146a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80146a2:	f7ec fabf 	bl	8000c24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80146a6:	2180      	movs	r1, #128	; 0x80
 80146a8:	4808      	ldr	r0, [pc, #32]	; (80146cc <USBD_LL_Init+0x94>)
 80146aa:	f7ef f9ae 	bl	8003a0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80146ae:	2240      	movs	r2, #64	; 0x40
 80146b0:	2100      	movs	r1, #0
 80146b2:	4806      	ldr	r0, [pc, #24]	; (80146cc <USBD_LL_Init+0x94>)
 80146b4:	f7ef f962 	bl	800397c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80146b8:	2280      	movs	r2, #128	; 0x80
 80146ba:	2101      	movs	r1, #1
 80146bc:	4803      	ldr	r0, [pc, #12]	; (80146cc <USBD_LL_Init+0x94>)
 80146be:	f7ef f95d 	bl	800397c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80146c2:	2300      	movs	r3, #0
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3708      	adds	r7, #8
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	2000c010 	.word	0x2000c010

080146d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b084      	sub	sp, #16
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146d8:	2300      	movs	r3, #0
 80146da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146dc:	2300      	movs	r3, #0
 80146de:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7ee f93e 	bl	8002968 <HAL_PCD_Start>
 80146ec:	4603      	mov	r3, r0
 80146ee:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80146f0:	7bfb      	ldrb	r3, [r7, #15]
 80146f2:	4618      	mov	r0, r3
 80146f4:	f000 f92e 	bl	8014954 <USBD_Get_USB_Status>
 80146f8:	4603      	mov	r3, r0
 80146fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80146fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3710      	adds	r7, #16
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}

08014706 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014706:	b580      	push	{r7, lr}
 8014708:	b084      	sub	sp, #16
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
 801470e:	4608      	mov	r0, r1
 8014710:	4611      	mov	r1, r2
 8014712:	461a      	mov	r2, r3
 8014714:	4603      	mov	r3, r0
 8014716:	70fb      	strb	r3, [r7, #3]
 8014718:	460b      	mov	r3, r1
 801471a:	70bb      	strb	r3, [r7, #2]
 801471c:	4613      	mov	r3, r2
 801471e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014720:	2300      	movs	r3, #0
 8014722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014724:	2300      	movs	r3, #0
 8014726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801472e:	78bb      	ldrb	r3, [r7, #2]
 8014730:	883a      	ldrh	r2, [r7, #0]
 8014732:	78f9      	ldrb	r1, [r7, #3]
 8014734:	f7ee fd13 	bl	800315e <HAL_PCD_EP_Open>
 8014738:	4603      	mov	r3, r0
 801473a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801473c:	7bfb      	ldrb	r3, [r7, #15]
 801473e:	4618      	mov	r0, r3
 8014740:	f000 f908 	bl	8014954 <USBD_Get_USB_Status>
 8014744:	4603      	mov	r3, r0
 8014746:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8014748:	7bbb      	ldrb	r3, [r7, #14]
}
 801474a:	4618      	mov	r0, r3
 801474c:	3710      	adds	r7, #16
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014752:	b580      	push	{r7, lr}
 8014754:	b084      	sub	sp, #16
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
 801475a:	460b      	mov	r3, r1
 801475c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801475e:	2300      	movs	r3, #0
 8014760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014762:	2300      	movs	r3, #0
 8014764:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801476c:	78fa      	ldrb	r2, [r7, #3]
 801476e:	4611      	mov	r1, r2
 8014770:	4618      	mov	r0, r3
 8014772:	f7ee fd5c 	bl	800322e <HAL_PCD_EP_Close>
 8014776:	4603      	mov	r3, r0
 8014778:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801477a:	7bfb      	ldrb	r3, [r7, #15]
 801477c:	4618      	mov	r0, r3
 801477e:	f000 f8e9 	bl	8014954 <USBD_Get_USB_Status>
 8014782:	4603      	mov	r3, r0
 8014784:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8014786:	7bbb      	ldrb	r3, [r7, #14]
}
 8014788:	4618      	mov	r0, r3
 801478a:	3710      	adds	r7, #16
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}

08014790 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b084      	sub	sp, #16
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	460b      	mov	r3, r1
 801479a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801479c:	2300      	movs	r3, #0
 801479e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147a0:	2300      	movs	r3, #0
 80147a2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80147aa:	78fa      	ldrb	r2, [r7, #3]
 80147ac:	4611      	mov	r1, r2
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7ee fe34 	bl	800341c <HAL_PCD_EP_SetStall>
 80147b4:	4603      	mov	r3, r0
 80147b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80147b8:	7bfb      	ldrb	r3, [r7, #15]
 80147ba:	4618      	mov	r0, r3
 80147bc:	f000 f8ca 	bl	8014954 <USBD_Get_USB_Status>
 80147c0:	4603      	mov	r3, r0
 80147c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80147c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3710      	adds	r7, #16
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}

080147ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80147ce:	b580      	push	{r7, lr}
 80147d0:	b084      	sub	sp, #16
 80147d2:	af00      	add	r7, sp, #0
 80147d4:	6078      	str	r0, [r7, #4]
 80147d6:	460b      	mov	r3, r1
 80147d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147da:	2300      	movs	r3, #0
 80147dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147de:	2300      	movs	r3, #0
 80147e0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80147e8:	78fa      	ldrb	r2, [r7, #3]
 80147ea:	4611      	mov	r1, r2
 80147ec:	4618      	mov	r0, r3
 80147ee:	f7ee fe79 	bl	80034e4 <HAL_PCD_EP_ClrStall>
 80147f2:	4603      	mov	r3, r0
 80147f4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80147f6:	7bfb      	ldrb	r3, [r7, #15]
 80147f8:	4618      	mov	r0, r3
 80147fa:	f000 f8ab 	bl	8014954 <USBD_Get_USB_Status>
 80147fe:	4603      	mov	r3, r0
 8014800:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8014802:	7bbb      	ldrb	r3, [r7, #14]
}
 8014804:	4618      	mov	r0, r3
 8014806:	3710      	adds	r7, #16
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}

0801480c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801480c:	b480      	push	{r7}
 801480e:	b085      	sub	sp, #20
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	460b      	mov	r3, r1
 8014816:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801481e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8014820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014824:	2b00      	cmp	r3, #0
 8014826:	da0b      	bge.n	8014840 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8014828:	78fb      	ldrb	r3, [r7, #3]
 801482a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801482e:	68f9      	ldr	r1, [r7, #12]
 8014830:	4613      	mov	r3, r2
 8014832:	00db      	lsls	r3, r3, #3
 8014834:	1a9b      	subs	r3, r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	440b      	add	r3, r1
 801483a:	333e      	adds	r3, #62	; 0x3e
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	e00b      	b.n	8014858 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8014840:	78fb      	ldrb	r3, [r7, #3]
 8014842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014846:	68f9      	ldr	r1, [r7, #12]
 8014848:	4613      	mov	r3, r2
 801484a:	00db      	lsls	r3, r3, #3
 801484c:	1a9b      	subs	r3, r3, r2
 801484e:	009b      	lsls	r3, r3, #2
 8014850:	440b      	add	r3, r1
 8014852:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014856:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014858:	4618      	mov	r0, r3
 801485a:	3714      	adds	r7, #20
 801485c:	46bd      	mov	sp, r7
 801485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014862:	4770      	bx	lr

08014864 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b084      	sub	sp, #16
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
 801486c:	460b      	mov	r3, r1
 801486e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014870:	2300      	movs	r3, #0
 8014872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014874:	2300      	movs	r3, #0
 8014876:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801487e:	78fa      	ldrb	r2, [r7, #3]
 8014880:	4611      	mov	r1, r2
 8014882:	4618      	mov	r0, r3
 8014884:	f7ee fc46 	bl	8003114 <HAL_PCD_SetAddress>
 8014888:	4603      	mov	r3, r0
 801488a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801488c:	7bfb      	ldrb	r3, [r7, #15]
 801488e:	4618      	mov	r0, r3
 8014890:	f000 f860 	bl	8014954 <USBD_Get_USB_Status>
 8014894:	4603      	mov	r3, r0
 8014896:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014898:	7bbb      	ldrb	r3, [r7, #14]
}
 801489a:	4618      	mov	r0, r3
 801489c:	3710      	adds	r7, #16
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}

080148a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80148a2:	b580      	push	{r7, lr}
 80148a4:	b086      	sub	sp, #24
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	60f8      	str	r0, [r7, #12]
 80148aa:	607a      	str	r2, [r7, #4]
 80148ac:	461a      	mov	r2, r3
 80148ae:	460b      	mov	r3, r1
 80148b0:	72fb      	strb	r3, [r7, #11]
 80148b2:	4613      	mov	r3, r2
 80148b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148b6:	2300      	movs	r3, #0
 80148b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148ba:	2300      	movs	r3, #0
 80148bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80148c4:	893b      	ldrh	r3, [r7, #8]
 80148c6:	7af9      	ldrb	r1, [r7, #11]
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	f7ee fd5d 	bl	8003388 <HAL_PCD_EP_Transmit>
 80148ce:	4603      	mov	r3, r0
 80148d0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80148d2:	7dfb      	ldrb	r3, [r7, #23]
 80148d4:	4618      	mov	r0, r3
 80148d6:	f000 f83d 	bl	8014954 <USBD_Get_USB_Status>
 80148da:	4603      	mov	r3, r0
 80148dc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80148de:	7dbb      	ldrb	r3, [r7, #22]
}
 80148e0:	4618      	mov	r0, r3
 80148e2:	3718      	adds	r7, #24
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}

080148e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b086      	sub	sp, #24
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	607a      	str	r2, [r7, #4]
 80148f2:	461a      	mov	r2, r3
 80148f4:	460b      	mov	r3, r1
 80148f6:	72fb      	strb	r3, [r7, #11]
 80148f8:	4613      	mov	r3, r2
 80148fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148fc:	2300      	movs	r3, #0
 80148fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014900:	2300      	movs	r3, #0
 8014902:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801490a:	893b      	ldrh	r3, [r7, #8]
 801490c:	7af9      	ldrb	r1, [r7, #11]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	f7ee fcd7 	bl	80032c2 <HAL_PCD_EP_Receive>
 8014914:	4603      	mov	r3, r0
 8014916:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8014918:	7dfb      	ldrb	r3, [r7, #23]
 801491a:	4618      	mov	r0, r3
 801491c:	f000 f81a 	bl	8014954 <USBD_Get_USB_Status>
 8014920:	4603      	mov	r3, r0
 8014922:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8014924:	7dbb      	ldrb	r3, [r7, #22]
}
 8014926:	4618      	mov	r0, r3
 8014928:	3718      	adds	r7, #24
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801492e:	b580      	push	{r7, lr}
 8014930:	b082      	sub	sp, #8
 8014932:	af00      	add	r7, sp, #0
 8014934:	6078      	str	r0, [r7, #4]
 8014936:	460b      	mov	r3, r1
 8014938:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014940:	78fa      	ldrb	r2, [r7, #3]
 8014942:	4611      	mov	r1, r2
 8014944:	4618      	mov	r0, r3
 8014946:	f7ee fd07 	bl	8003358 <HAL_PCD_EP_GetRxCount>
 801494a:	4603      	mov	r3, r0
}
 801494c:	4618      	mov	r0, r3
 801494e:	3708      	adds	r7, #8
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}

08014954 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014954:	b480      	push	{r7}
 8014956:	b085      	sub	sp, #20
 8014958:	af00      	add	r7, sp, #0
 801495a:	4603      	mov	r3, r0
 801495c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801495e:	2300      	movs	r3, #0
 8014960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014962:	79fb      	ldrb	r3, [r7, #7]
 8014964:	2b03      	cmp	r3, #3
 8014966:	d817      	bhi.n	8014998 <USBD_Get_USB_Status+0x44>
 8014968:	a201      	add	r2, pc, #4	; (adr r2, 8014970 <USBD_Get_USB_Status+0x1c>)
 801496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801496e:	bf00      	nop
 8014970:	08014981 	.word	0x08014981
 8014974:	08014987 	.word	0x08014987
 8014978:	0801498d 	.word	0x0801498d
 801497c:	08014993 	.word	0x08014993
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014980:	2300      	movs	r3, #0
 8014982:	73fb      	strb	r3, [r7, #15]
    break;
 8014984:	e00b      	b.n	801499e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014986:	2302      	movs	r3, #2
 8014988:	73fb      	strb	r3, [r7, #15]
    break;
 801498a:	e008      	b.n	801499e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801498c:	2301      	movs	r3, #1
 801498e:	73fb      	strb	r3, [r7, #15]
    break;
 8014990:	e005      	b.n	801499e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014992:	2302      	movs	r3, #2
 8014994:	73fb      	strb	r3, [r7, #15]
    break;
 8014996:	e002      	b.n	801499e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014998:	2302      	movs	r3, #2
 801499a:	73fb      	strb	r3, [r7, #15]
    break;
 801499c:	bf00      	nop
  }
  return usb_status;
 801499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3714      	adds	r7, #20
 80149a4:	46bd      	mov	sp, r7
 80149a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149aa:	4770      	bx	lr

080149ac <__libc_init_array>:
 80149ac:	b570      	push	{r4, r5, r6, lr}
 80149ae:	4e0d      	ldr	r6, [pc, #52]	; (80149e4 <__libc_init_array+0x38>)
 80149b0:	4c0d      	ldr	r4, [pc, #52]	; (80149e8 <__libc_init_array+0x3c>)
 80149b2:	1ba4      	subs	r4, r4, r6
 80149b4:	10a4      	asrs	r4, r4, #2
 80149b6:	2500      	movs	r5, #0
 80149b8:	42a5      	cmp	r5, r4
 80149ba:	d109      	bne.n	80149d0 <__libc_init_array+0x24>
 80149bc:	4e0b      	ldr	r6, [pc, #44]	; (80149ec <__libc_init_array+0x40>)
 80149be:	4c0c      	ldr	r4, [pc, #48]	; (80149f0 <__libc_init_array+0x44>)
 80149c0:	f000 ff2e 	bl	8015820 <_init>
 80149c4:	1ba4      	subs	r4, r4, r6
 80149c6:	10a4      	asrs	r4, r4, #2
 80149c8:	2500      	movs	r5, #0
 80149ca:	42a5      	cmp	r5, r4
 80149cc:	d105      	bne.n	80149da <__libc_init_array+0x2e>
 80149ce:	bd70      	pop	{r4, r5, r6, pc}
 80149d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80149d4:	4798      	blx	r3
 80149d6:	3501      	adds	r5, #1
 80149d8:	e7ee      	b.n	80149b8 <__libc_init_array+0xc>
 80149da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80149de:	4798      	blx	r3
 80149e0:	3501      	adds	r5, #1
 80149e2:	e7f2      	b.n	80149ca <__libc_init_array+0x1e>
 80149e4:	08017844 	.word	0x08017844
 80149e8:	08017844 	.word	0x08017844
 80149ec:	08017844 	.word	0x08017844
 80149f0:	08017848 	.word	0x08017848

080149f4 <malloc>:
 80149f4:	4b02      	ldr	r3, [pc, #8]	; (8014a00 <malloc+0xc>)
 80149f6:	4601      	mov	r1, r0
 80149f8:	6818      	ldr	r0, [r3, #0]
 80149fa:	f000 b87b 	b.w	8014af4 <_malloc_r>
 80149fe:	bf00      	nop
 8014a00:	20000180 	.word	0x20000180

08014a04 <free>:
 8014a04:	4b02      	ldr	r3, [pc, #8]	; (8014a10 <free+0xc>)
 8014a06:	4601      	mov	r1, r0
 8014a08:	6818      	ldr	r0, [r3, #0]
 8014a0a:	f000 b825 	b.w	8014a58 <_free_r>
 8014a0e:	bf00      	nop
 8014a10:	20000180 	.word	0x20000180

08014a14 <memcmp>:
 8014a14:	b530      	push	{r4, r5, lr}
 8014a16:	2400      	movs	r4, #0
 8014a18:	42a2      	cmp	r2, r4
 8014a1a:	d101      	bne.n	8014a20 <memcmp+0xc>
 8014a1c:	2000      	movs	r0, #0
 8014a1e:	e007      	b.n	8014a30 <memcmp+0x1c>
 8014a20:	5d03      	ldrb	r3, [r0, r4]
 8014a22:	3401      	adds	r4, #1
 8014a24:	190d      	adds	r5, r1, r4
 8014a26:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014a2a:	42ab      	cmp	r3, r5
 8014a2c:	d0f4      	beq.n	8014a18 <memcmp+0x4>
 8014a2e:	1b58      	subs	r0, r3, r5
 8014a30:	bd30      	pop	{r4, r5, pc}

08014a32 <memcpy>:
 8014a32:	b510      	push	{r4, lr}
 8014a34:	1e43      	subs	r3, r0, #1
 8014a36:	440a      	add	r2, r1
 8014a38:	4291      	cmp	r1, r2
 8014a3a:	d100      	bne.n	8014a3e <memcpy+0xc>
 8014a3c:	bd10      	pop	{r4, pc}
 8014a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a46:	e7f7      	b.n	8014a38 <memcpy+0x6>

08014a48 <memset>:
 8014a48:	4402      	add	r2, r0
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d100      	bne.n	8014a52 <memset+0xa>
 8014a50:	4770      	bx	lr
 8014a52:	f803 1b01 	strb.w	r1, [r3], #1
 8014a56:	e7f9      	b.n	8014a4c <memset+0x4>

08014a58 <_free_r>:
 8014a58:	b538      	push	{r3, r4, r5, lr}
 8014a5a:	4605      	mov	r5, r0
 8014a5c:	2900      	cmp	r1, #0
 8014a5e:	d045      	beq.n	8014aec <_free_r+0x94>
 8014a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a64:	1f0c      	subs	r4, r1, #4
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	bfb8      	it	lt
 8014a6a:	18e4      	addlt	r4, r4, r3
 8014a6c:	f000 f98e 	bl	8014d8c <__malloc_lock>
 8014a70:	4a1f      	ldr	r2, [pc, #124]	; (8014af0 <_free_r+0x98>)
 8014a72:	6813      	ldr	r3, [r2, #0]
 8014a74:	4610      	mov	r0, r2
 8014a76:	b933      	cbnz	r3, 8014a86 <_free_r+0x2e>
 8014a78:	6063      	str	r3, [r4, #4]
 8014a7a:	6014      	str	r4, [r2, #0]
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a82:	f000 b984 	b.w	8014d8e <__malloc_unlock>
 8014a86:	42a3      	cmp	r3, r4
 8014a88:	d90c      	bls.n	8014aa4 <_free_r+0x4c>
 8014a8a:	6821      	ldr	r1, [r4, #0]
 8014a8c:	1862      	adds	r2, r4, r1
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	bf04      	itt	eq
 8014a92:	681a      	ldreq	r2, [r3, #0]
 8014a94:	685b      	ldreq	r3, [r3, #4]
 8014a96:	6063      	str	r3, [r4, #4]
 8014a98:	bf04      	itt	eq
 8014a9a:	1852      	addeq	r2, r2, r1
 8014a9c:	6022      	streq	r2, [r4, #0]
 8014a9e:	6004      	str	r4, [r0, #0]
 8014aa0:	e7ec      	b.n	8014a7c <_free_r+0x24>
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	685a      	ldr	r2, [r3, #4]
 8014aa6:	b10a      	cbz	r2, 8014aac <_free_r+0x54>
 8014aa8:	42a2      	cmp	r2, r4
 8014aaa:	d9fa      	bls.n	8014aa2 <_free_r+0x4a>
 8014aac:	6819      	ldr	r1, [r3, #0]
 8014aae:	1858      	adds	r0, r3, r1
 8014ab0:	42a0      	cmp	r0, r4
 8014ab2:	d10b      	bne.n	8014acc <_free_r+0x74>
 8014ab4:	6820      	ldr	r0, [r4, #0]
 8014ab6:	4401      	add	r1, r0
 8014ab8:	1858      	adds	r0, r3, r1
 8014aba:	4282      	cmp	r2, r0
 8014abc:	6019      	str	r1, [r3, #0]
 8014abe:	d1dd      	bne.n	8014a7c <_free_r+0x24>
 8014ac0:	6810      	ldr	r0, [r2, #0]
 8014ac2:	6852      	ldr	r2, [r2, #4]
 8014ac4:	605a      	str	r2, [r3, #4]
 8014ac6:	4401      	add	r1, r0
 8014ac8:	6019      	str	r1, [r3, #0]
 8014aca:	e7d7      	b.n	8014a7c <_free_r+0x24>
 8014acc:	d902      	bls.n	8014ad4 <_free_r+0x7c>
 8014ace:	230c      	movs	r3, #12
 8014ad0:	602b      	str	r3, [r5, #0]
 8014ad2:	e7d3      	b.n	8014a7c <_free_r+0x24>
 8014ad4:	6820      	ldr	r0, [r4, #0]
 8014ad6:	1821      	adds	r1, r4, r0
 8014ad8:	428a      	cmp	r2, r1
 8014ada:	bf04      	itt	eq
 8014adc:	6811      	ldreq	r1, [r2, #0]
 8014ade:	6852      	ldreq	r2, [r2, #4]
 8014ae0:	6062      	str	r2, [r4, #4]
 8014ae2:	bf04      	itt	eq
 8014ae4:	1809      	addeq	r1, r1, r0
 8014ae6:	6021      	streq	r1, [r4, #0]
 8014ae8:	605c      	str	r4, [r3, #4]
 8014aea:	e7c7      	b.n	8014a7c <_free_r+0x24>
 8014aec:	bd38      	pop	{r3, r4, r5, pc}
 8014aee:	bf00      	nop
 8014af0:	20004338 	.word	0x20004338

08014af4 <_malloc_r>:
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	1ccd      	adds	r5, r1, #3
 8014af8:	f025 0503 	bic.w	r5, r5, #3
 8014afc:	3508      	adds	r5, #8
 8014afe:	2d0c      	cmp	r5, #12
 8014b00:	bf38      	it	cc
 8014b02:	250c      	movcc	r5, #12
 8014b04:	2d00      	cmp	r5, #0
 8014b06:	4606      	mov	r6, r0
 8014b08:	db01      	blt.n	8014b0e <_malloc_r+0x1a>
 8014b0a:	42a9      	cmp	r1, r5
 8014b0c:	d903      	bls.n	8014b16 <_malloc_r+0x22>
 8014b0e:	230c      	movs	r3, #12
 8014b10:	6033      	str	r3, [r6, #0]
 8014b12:	2000      	movs	r0, #0
 8014b14:	bd70      	pop	{r4, r5, r6, pc}
 8014b16:	f000 f939 	bl	8014d8c <__malloc_lock>
 8014b1a:	4a21      	ldr	r2, [pc, #132]	; (8014ba0 <_malloc_r+0xac>)
 8014b1c:	6814      	ldr	r4, [r2, #0]
 8014b1e:	4621      	mov	r1, r4
 8014b20:	b991      	cbnz	r1, 8014b48 <_malloc_r+0x54>
 8014b22:	4c20      	ldr	r4, [pc, #128]	; (8014ba4 <_malloc_r+0xb0>)
 8014b24:	6823      	ldr	r3, [r4, #0]
 8014b26:	b91b      	cbnz	r3, 8014b30 <_malloc_r+0x3c>
 8014b28:	4630      	mov	r0, r6
 8014b2a:	f000 f855 	bl	8014bd8 <_sbrk_r>
 8014b2e:	6020      	str	r0, [r4, #0]
 8014b30:	4629      	mov	r1, r5
 8014b32:	4630      	mov	r0, r6
 8014b34:	f000 f850 	bl	8014bd8 <_sbrk_r>
 8014b38:	1c43      	adds	r3, r0, #1
 8014b3a:	d124      	bne.n	8014b86 <_malloc_r+0x92>
 8014b3c:	230c      	movs	r3, #12
 8014b3e:	6033      	str	r3, [r6, #0]
 8014b40:	4630      	mov	r0, r6
 8014b42:	f000 f924 	bl	8014d8e <__malloc_unlock>
 8014b46:	e7e4      	b.n	8014b12 <_malloc_r+0x1e>
 8014b48:	680b      	ldr	r3, [r1, #0]
 8014b4a:	1b5b      	subs	r3, r3, r5
 8014b4c:	d418      	bmi.n	8014b80 <_malloc_r+0x8c>
 8014b4e:	2b0b      	cmp	r3, #11
 8014b50:	d90f      	bls.n	8014b72 <_malloc_r+0x7e>
 8014b52:	600b      	str	r3, [r1, #0]
 8014b54:	50cd      	str	r5, [r1, r3]
 8014b56:	18cc      	adds	r4, r1, r3
 8014b58:	4630      	mov	r0, r6
 8014b5a:	f000 f918 	bl	8014d8e <__malloc_unlock>
 8014b5e:	f104 000b 	add.w	r0, r4, #11
 8014b62:	1d23      	adds	r3, r4, #4
 8014b64:	f020 0007 	bic.w	r0, r0, #7
 8014b68:	1ac3      	subs	r3, r0, r3
 8014b6a:	d0d3      	beq.n	8014b14 <_malloc_r+0x20>
 8014b6c:	425a      	negs	r2, r3
 8014b6e:	50e2      	str	r2, [r4, r3]
 8014b70:	e7d0      	b.n	8014b14 <_malloc_r+0x20>
 8014b72:	428c      	cmp	r4, r1
 8014b74:	684b      	ldr	r3, [r1, #4]
 8014b76:	bf16      	itet	ne
 8014b78:	6063      	strne	r3, [r4, #4]
 8014b7a:	6013      	streq	r3, [r2, #0]
 8014b7c:	460c      	movne	r4, r1
 8014b7e:	e7eb      	b.n	8014b58 <_malloc_r+0x64>
 8014b80:	460c      	mov	r4, r1
 8014b82:	6849      	ldr	r1, [r1, #4]
 8014b84:	e7cc      	b.n	8014b20 <_malloc_r+0x2c>
 8014b86:	1cc4      	adds	r4, r0, #3
 8014b88:	f024 0403 	bic.w	r4, r4, #3
 8014b8c:	42a0      	cmp	r0, r4
 8014b8e:	d005      	beq.n	8014b9c <_malloc_r+0xa8>
 8014b90:	1a21      	subs	r1, r4, r0
 8014b92:	4630      	mov	r0, r6
 8014b94:	f000 f820 	bl	8014bd8 <_sbrk_r>
 8014b98:	3001      	adds	r0, #1
 8014b9a:	d0cf      	beq.n	8014b3c <_malloc_r+0x48>
 8014b9c:	6025      	str	r5, [r4, #0]
 8014b9e:	e7db      	b.n	8014b58 <_malloc_r+0x64>
 8014ba0:	20004338 	.word	0x20004338
 8014ba4:	2000433c 	.word	0x2000433c

08014ba8 <iprintf>:
 8014ba8:	b40f      	push	{r0, r1, r2, r3}
 8014baa:	4b0a      	ldr	r3, [pc, #40]	; (8014bd4 <iprintf+0x2c>)
 8014bac:	b513      	push	{r0, r1, r4, lr}
 8014bae:	681c      	ldr	r4, [r3, #0]
 8014bb0:	b124      	cbz	r4, 8014bbc <iprintf+0x14>
 8014bb2:	69a3      	ldr	r3, [r4, #24]
 8014bb4:	b913      	cbnz	r3, 8014bbc <iprintf+0x14>
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	f000 f85e 	bl	8014c78 <__sinit>
 8014bbc:	ab05      	add	r3, sp, #20
 8014bbe:	9a04      	ldr	r2, [sp, #16]
 8014bc0:	68a1      	ldr	r1, [r4, #8]
 8014bc2:	9301      	str	r3, [sp, #4]
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	f000 f90d 	bl	8014de4 <_vfiprintf_r>
 8014bca:	b002      	add	sp, #8
 8014bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bd0:	b004      	add	sp, #16
 8014bd2:	4770      	bx	lr
 8014bd4:	20000180 	.word	0x20000180

08014bd8 <_sbrk_r>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	4c06      	ldr	r4, [pc, #24]	; (8014bf4 <_sbrk_r+0x1c>)
 8014bdc:	2300      	movs	r3, #0
 8014bde:	4605      	mov	r5, r0
 8014be0:	4608      	mov	r0, r1
 8014be2:	6023      	str	r3, [r4, #0]
 8014be4:	f7ec f952 	bl	8000e8c <_sbrk>
 8014be8:	1c43      	adds	r3, r0, #1
 8014bea:	d102      	bne.n	8014bf2 <_sbrk_r+0x1a>
 8014bec:	6823      	ldr	r3, [r4, #0]
 8014bee:	b103      	cbz	r3, 8014bf2 <_sbrk_r+0x1a>
 8014bf0:	602b      	str	r3, [r5, #0]
 8014bf2:	bd38      	pop	{r3, r4, r5, pc}
 8014bf4:	2000ab6c 	.word	0x2000ab6c

08014bf8 <std>:
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	b510      	push	{r4, lr}
 8014bfc:	4604      	mov	r4, r0
 8014bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8014c02:	6083      	str	r3, [r0, #8]
 8014c04:	8181      	strh	r1, [r0, #12]
 8014c06:	6643      	str	r3, [r0, #100]	; 0x64
 8014c08:	81c2      	strh	r2, [r0, #14]
 8014c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c0e:	6183      	str	r3, [r0, #24]
 8014c10:	4619      	mov	r1, r3
 8014c12:	2208      	movs	r2, #8
 8014c14:	305c      	adds	r0, #92	; 0x5c
 8014c16:	f7ff ff17 	bl	8014a48 <memset>
 8014c1a:	4b05      	ldr	r3, [pc, #20]	; (8014c30 <std+0x38>)
 8014c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8014c1e:	4b05      	ldr	r3, [pc, #20]	; (8014c34 <std+0x3c>)
 8014c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8014c22:	4b05      	ldr	r3, [pc, #20]	; (8014c38 <std+0x40>)
 8014c24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014c26:	4b05      	ldr	r3, [pc, #20]	; (8014c3c <std+0x44>)
 8014c28:	6224      	str	r4, [r4, #32]
 8014c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8014c2c:	bd10      	pop	{r4, pc}
 8014c2e:	bf00      	nop
 8014c30:	08015321 	.word	0x08015321
 8014c34:	08015343 	.word	0x08015343
 8014c38:	0801537b 	.word	0x0801537b
 8014c3c:	0801539f 	.word	0x0801539f

08014c40 <_cleanup_r>:
 8014c40:	4901      	ldr	r1, [pc, #4]	; (8014c48 <_cleanup_r+0x8>)
 8014c42:	f000 b885 	b.w	8014d50 <_fwalk_reent>
 8014c46:	bf00      	nop
 8014c48:	08015679 	.word	0x08015679

08014c4c <__sfmoreglue>:
 8014c4c:	b570      	push	{r4, r5, r6, lr}
 8014c4e:	1e4a      	subs	r2, r1, #1
 8014c50:	2568      	movs	r5, #104	; 0x68
 8014c52:	4355      	muls	r5, r2
 8014c54:	460e      	mov	r6, r1
 8014c56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014c5a:	f7ff ff4b 	bl	8014af4 <_malloc_r>
 8014c5e:	4604      	mov	r4, r0
 8014c60:	b140      	cbz	r0, 8014c74 <__sfmoreglue+0x28>
 8014c62:	2100      	movs	r1, #0
 8014c64:	e9c0 1600 	strd	r1, r6, [r0]
 8014c68:	300c      	adds	r0, #12
 8014c6a:	60a0      	str	r0, [r4, #8]
 8014c6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014c70:	f7ff feea 	bl	8014a48 <memset>
 8014c74:	4620      	mov	r0, r4
 8014c76:	bd70      	pop	{r4, r5, r6, pc}

08014c78 <__sinit>:
 8014c78:	6983      	ldr	r3, [r0, #24]
 8014c7a:	b510      	push	{r4, lr}
 8014c7c:	4604      	mov	r4, r0
 8014c7e:	bb33      	cbnz	r3, 8014cce <__sinit+0x56>
 8014c80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014c84:	6503      	str	r3, [r0, #80]	; 0x50
 8014c86:	4b12      	ldr	r3, [pc, #72]	; (8014cd0 <__sinit+0x58>)
 8014c88:	4a12      	ldr	r2, [pc, #72]	; (8014cd4 <__sinit+0x5c>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	6282      	str	r2, [r0, #40]	; 0x28
 8014c8e:	4298      	cmp	r0, r3
 8014c90:	bf04      	itt	eq
 8014c92:	2301      	moveq	r3, #1
 8014c94:	6183      	streq	r3, [r0, #24]
 8014c96:	f000 f81f 	bl	8014cd8 <__sfp>
 8014c9a:	6060      	str	r0, [r4, #4]
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f000 f81b 	bl	8014cd8 <__sfp>
 8014ca2:	60a0      	str	r0, [r4, #8]
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	f000 f817 	bl	8014cd8 <__sfp>
 8014caa:	2200      	movs	r2, #0
 8014cac:	60e0      	str	r0, [r4, #12]
 8014cae:	2104      	movs	r1, #4
 8014cb0:	6860      	ldr	r0, [r4, #4]
 8014cb2:	f7ff ffa1 	bl	8014bf8 <std>
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	2109      	movs	r1, #9
 8014cba:	68a0      	ldr	r0, [r4, #8]
 8014cbc:	f7ff ff9c 	bl	8014bf8 <std>
 8014cc0:	2202      	movs	r2, #2
 8014cc2:	2112      	movs	r1, #18
 8014cc4:	68e0      	ldr	r0, [r4, #12]
 8014cc6:	f7ff ff97 	bl	8014bf8 <std>
 8014cca:	2301      	movs	r3, #1
 8014ccc:	61a3      	str	r3, [r4, #24]
 8014cce:	bd10      	pop	{r4, pc}
 8014cd0:	080177a4 	.word	0x080177a4
 8014cd4:	08014c41 	.word	0x08014c41

08014cd8 <__sfp>:
 8014cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cda:	4b1b      	ldr	r3, [pc, #108]	; (8014d48 <__sfp+0x70>)
 8014cdc:	681e      	ldr	r6, [r3, #0]
 8014cde:	69b3      	ldr	r3, [r6, #24]
 8014ce0:	4607      	mov	r7, r0
 8014ce2:	b913      	cbnz	r3, 8014cea <__sfp+0x12>
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	f7ff ffc7 	bl	8014c78 <__sinit>
 8014cea:	3648      	adds	r6, #72	; 0x48
 8014cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014cf0:	3b01      	subs	r3, #1
 8014cf2:	d503      	bpl.n	8014cfc <__sfp+0x24>
 8014cf4:	6833      	ldr	r3, [r6, #0]
 8014cf6:	b133      	cbz	r3, 8014d06 <__sfp+0x2e>
 8014cf8:	6836      	ldr	r6, [r6, #0]
 8014cfa:	e7f7      	b.n	8014cec <__sfp+0x14>
 8014cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014d00:	b16d      	cbz	r5, 8014d1e <__sfp+0x46>
 8014d02:	3468      	adds	r4, #104	; 0x68
 8014d04:	e7f4      	b.n	8014cf0 <__sfp+0x18>
 8014d06:	2104      	movs	r1, #4
 8014d08:	4638      	mov	r0, r7
 8014d0a:	f7ff ff9f 	bl	8014c4c <__sfmoreglue>
 8014d0e:	6030      	str	r0, [r6, #0]
 8014d10:	2800      	cmp	r0, #0
 8014d12:	d1f1      	bne.n	8014cf8 <__sfp+0x20>
 8014d14:	230c      	movs	r3, #12
 8014d16:	603b      	str	r3, [r7, #0]
 8014d18:	4604      	mov	r4, r0
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d1e:	4b0b      	ldr	r3, [pc, #44]	; (8014d4c <__sfp+0x74>)
 8014d20:	6665      	str	r5, [r4, #100]	; 0x64
 8014d22:	e9c4 5500 	strd	r5, r5, [r4]
 8014d26:	60a5      	str	r5, [r4, #8]
 8014d28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014d2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014d30:	2208      	movs	r2, #8
 8014d32:	4629      	mov	r1, r5
 8014d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014d38:	f7ff fe86 	bl	8014a48 <memset>
 8014d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014d44:	e7e9      	b.n	8014d1a <__sfp+0x42>
 8014d46:	bf00      	nop
 8014d48:	080177a4 	.word	0x080177a4
 8014d4c:	ffff0001 	.word	0xffff0001

08014d50 <_fwalk_reent>:
 8014d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d54:	4680      	mov	r8, r0
 8014d56:	4689      	mov	r9, r1
 8014d58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014d5c:	2600      	movs	r6, #0
 8014d5e:	b914      	cbnz	r4, 8014d66 <_fwalk_reent+0x16>
 8014d60:	4630      	mov	r0, r6
 8014d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014d6a:	3f01      	subs	r7, #1
 8014d6c:	d501      	bpl.n	8014d72 <_fwalk_reent+0x22>
 8014d6e:	6824      	ldr	r4, [r4, #0]
 8014d70:	e7f5      	b.n	8014d5e <_fwalk_reent+0xe>
 8014d72:	89ab      	ldrh	r3, [r5, #12]
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	d907      	bls.n	8014d88 <_fwalk_reent+0x38>
 8014d78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014d7c:	3301      	adds	r3, #1
 8014d7e:	d003      	beq.n	8014d88 <_fwalk_reent+0x38>
 8014d80:	4629      	mov	r1, r5
 8014d82:	4640      	mov	r0, r8
 8014d84:	47c8      	blx	r9
 8014d86:	4306      	orrs	r6, r0
 8014d88:	3568      	adds	r5, #104	; 0x68
 8014d8a:	e7ee      	b.n	8014d6a <_fwalk_reent+0x1a>

08014d8c <__malloc_lock>:
 8014d8c:	4770      	bx	lr

08014d8e <__malloc_unlock>:
 8014d8e:	4770      	bx	lr

08014d90 <__sfputc_r>:
 8014d90:	6893      	ldr	r3, [r2, #8]
 8014d92:	3b01      	subs	r3, #1
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	b410      	push	{r4}
 8014d98:	6093      	str	r3, [r2, #8]
 8014d9a:	da08      	bge.n	8014dae <__sfputc_r+0x1e>
 8014d9c:	6994      	ldr	r4, [r2, #24]
 8014d9e:	42a3      	cmp	r3, r4
 8014da0:	db01      	blt.n	8014da6 <__sfputc_r+0x16>
 8014da2:	290a      	cmp	r1, #10
 8014da4:	d103      	bne.n	8014dae <__sfputc_r+0x1e>
 8014da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014daa:	f000 bafd 	b.w	80153a8 <__swbuf_r>
 8014dae:	6813      	ldr	r3, [r2, #0]
 8014db0:	1c58      	adds	r0, r3, #1
 8014db2:	6010      	str	r0, [r2, #0]
 8014db4:	7019      	strb	r1, [r3, #0]
 8014db6:	4608      	mov	r0, r1
 8014db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dbc:	4770      	bx	lr

08014dbe <__sfputs_r>:
 8014dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dc0:	4606      	mov	r6, r0
 8014dc2:	460f      	mov	r7, r1
 8014dc4:	4614      	mov	r4, r2
 8014dc6:	18d5      	adds	r5, r2, r3
 8014dc8:	42ac      	cmp	r4, r5
 8014dca:	d101      	bne.n	8014dd0 <__sfputs_r+0x12>
 8014dcc:	2000      	movs	r0, #0
 8014dce:	e007      	b.n	8014de0 <__sfputs_r+0x22>
 8014dd0:	463a      	mov	r2, r7
 8014dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dd6:	4630      	mov	r0, r6
 8014dd8:	f7ff ffda 	bl	8014d90 <__sfputc_r>
 8014ddc:	1c43      	adds	r3, r0, #1
 8014dde:	d1f3      	bne.n	8014dc8 <__sfputs_r+0xa>
 8014de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014de4 <_vfiprintf_r>:
 8014de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014de8:	460c      	mov	r4, r1
 8014dea:	b09d      	sub	sp, #116	; 0x74
 8014dec:	4617      	mov	r7, r2
 8014dee:	461d      	mov	r5, r3
 8014df0:	4606      	mov	r6, r0
 8014df2:	b118      	cbz	r0, 8014dfc <_vfiprintf_r+0x18>
 8014df4:	6983      	ldr	r3, [r0, #24]
 8014df6:	b90b      	cbnz	r3, 8014dfc <_vfiprintf_r+0x18>
 8014df8:	f7ff ff3e 	bl	8014c78 <__sinit>
 8014dfc:	4b7c      	ldr	r3, [pc, #496]	; (8014ff0 <_vfiprintf_r+0x20c>)
 8014dfe:	429c      	cmp	r4, r3
 8014e00:	d158      	bne.n	8014eb4 <_vfiprintf_r+0xd0>
 8014e02:	6874      	ldr	r4, [r6, #4]
 8014e04:	89a3      	ldrh	r3, [r4, #12]
 8014e06:	0718      	lsls	r0, r3, #28
 8014e08:	d55e      	bpl.n	8014ec8 <_vfiprintf_r+0xe4>
 8014e0a:	6923      	ldr	r3, [r4, #16]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d05b      	beq.n	8014ec8 <_vfiprintf_r+0xe4>
 8014e10:	2300      	movs	r3, #0
 8014e12:	9309      	str	r3, [sp, #36]	; 0x24
 8014e14:	2320      	movs	r3, #32
 8014e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e1a:	2330      	movs	r3, #48	; 0x30
 8014e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e20:	9503      	str	r5, [sp, #12]
 8014e22:	f04f 0b01 	mov.w	fp, #1
 8014e26:	46b8      	mov	r8, r7
 8014e28:	4645      	mov	r5, r8
 8014e2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014e2e:	b10b      	cbz	r3, 8014e34 <_vfiprintf_r+0x50>
 8014e30:	2b25      	cmp	r3, #37	; 0x25
 8014e32:	d154      	bne.n	8014ede <_vfiprintf_r+0xfa>
 8014e34:	ebb8 0a07 	subs.w	sl, r8, r7
 8014e38:	d00b      	beq.n	8014e52 <_vfiprintf_r+0x6e>
 8014e3a:	4653      	mov	r3, sl
 8014e3c:	463a      	mov	r2, r7
 8014e3e:	4621      	mov	r1, r4
 8014e40:	4630      	mov	r0, r6
 8014e42:	f7ff ffbc 	bl	8014dbe <__sfputs_r>
 8014e46:	3001      	adds	r0, #1
 8014e48:	f000 80c2 	beq.w	8014fd0 <_vfiprintf_r+0x1ec>
 8014e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e4e:	4453      	add	r3, sl
 8014e50:	9309      	str	r3, [sp, #36]	; 0x24
 8014e52:	f898 3000 	ldrb.w	r3, [r8]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	f000 80ba 	beq.w	8014fd0 <_vfiprintf_r+0x1ec>
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e66:	9304      	str	r3, [sp, #16]
 8014e68:	9307      	str	r3, [sp, #28]
 8014e6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8014e70:	46a8      	mov	r8, r5
 8014e72:	2205      	movs	r2, #5
 8014e74:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014e78:	485e      	ldr	r0, [pc, #376]	; (8014ff4 <_vfiprintf_r+0x210>)
 8014e7a:	f7eb f9b9 	bl	80001f0 <memchr>
 8014e7e:	9b04      	ldr	r3, [sp, #16]
 8014e80:	bb78      	cbnz	r0, 8014ee2 <_vfiprintf_r+0xfe>
 8014e82:	06d9      	lsls	r1, r3, #27
 8014e84:	bf44      	itt	mi
 8014e86:	2220      	movmi	r2, #32
 8014e88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e8c:	071a      	lsls	r2, r3, #28
 8014e8e:	bf44      	itt	mi
 8014e90:	222b      	movmi	r2, #43	; 0x2b
 8014e92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e96:	782a      	ldrb	r2, [r5, #0]
 8014e98:	2a2a      	cmp	r2, #42	; 0x2a
 8014e9a:	d02a      	beq.n	8014ef2 <_vfiprintf_r+0x10e>
 8014e9c:	9a07      	ldr	r2, [sp, #28]
 8014e9e:	46a8      	mov	r8, r5
 8014ea0:	2000      	movs	r0, #0
 8014ea2:	250a      	movs	r5, #10
 8014ea4:	4641      	mov	r1, r8
 8014ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014eaa:	3b30      	subs	r3, #48	; 0x30
 8014eac:	2b09      	cmp	r3, #9
 8014eae:	d969      	bls.n	8014f84 <_vfiprintf_r+0x1a0>
 8014eb0:	b360      	cbz	r0, 8014f0c <_vfiprintf_r+0x128>
 8014eb2:	e024      	b.n	8014efe <_vfiprintf_r+0x11a>
 8014eb4:	4b50      	ldr	r3, [pc, #320]	; (8014ff8 <_vfiprintf_r+0x214>)
 8014eb6:	429c      	cmp	r4, r3
 8014eb8:	d101      	bne.n	8014ebe <_vfiprintf_r+0xda>
 8014eba:	68b4      	ldr	r4, [r6, #8]
 8014ebc:	e7a2      	b.n	8014e04 <_vfiprintf_r+0x20>
 8014ebe:	4b4f      	ldr	r3, [pc, #316]	; (8014ffc <_vfiprintf_r+0x218>)
 8014ec0:	429c      	cmp	r4, r3
 8014ec2:	bf08      	it	eq
 8014ec4:	68f4      	ldreq	r4, [r6, #12]
 8014ec6:	e79d      	b.n	8014e04 <_vfiprintf_r+0x20>
 8014ec8:	4621      	mov	r1, r4
 8014eca:	4630      	mov	r0, r6
 8014ecc:	f000 fad0 	bl	8015470 <__swsetup_r>
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	d09d      	beq.n	8014e10 <_vfiprintf_r+0x2c>
 8014ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ed8:	b01d      	add	sp, #116	; 0x74
 8014eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ede:	46a8      	mov	r8, r5
 8014ee0:	e7a2      	b.n	8014e28 <_vfiprintf_r+0x44>
 8014ee2:	4a44      	ldr	r2, [pc, #272]	; (8014ff4 <_vfiprintf_r+0x210>)
 8014ee4:	1a80      	subs	r0, r0, r2
 8014ee6:	fa0b f000 	lsl.w	r0, fp, r0
 8014eea:	4318      	orrs	r0, r3
 8014eec:	9004      	str	r0, [sp, #16]
 8014eee:	4645      	mov	r5, r8
 8014ef0:	e7be      	b.n	8014e70 <_vfiprintf_r+0x8c>
 8014ef2:	9a03      	ldr	r2, [sp, #12]
 8014ef4:	1d11      	adds	r1, r2, #4
 8014ef6:	6812      	ldr	r2, [r2, #0]
 8014ef8:	9103      	str	r1, [sp, #12]
 8014efa:	2a00      	cmp	r2, #0
 8014efc:	db01      	blt.n	8014f02 <_vfiprintf_r+0x11e>
 8014efe:	9207      	str	r2, [sp, #28]
 8014f00:	e004      	b.n	8014f0c <_vfiprintf_r+0x128>
 8014f02:	4252      	negs	r2, r2
 8014f04:	f043 0302 	orr.w	r3, r3, #2
 8014f08:	9207      	str	r2, [sp, #28]
 8014f0a:	9304      	str	r3, [sp, #16]
 8014f0c:	f898 3000 	ldrb.w	r3, [r8]
 8014f10:	2b2e      	cmp	r3, #46	; 0x2e
 8014f12:	d10e      	bne.n	8014f32 <_vfiprintf_r+0x14e>
 8014f14:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014f18:	2b2a      	cmp	r3, #42	; 0x2a
 8014f1a:	d138      	bne.n	8014f8e <_vfiprintf_r+0x1aa>
 8014f1c:	9b03      	ldr	r3, [sp, #12]
 8014f1e:	1d1a      	adds	r2, r3, #4
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	9203      	str	r2, [sp, #12]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	bfb8      	it	lt
 8014f28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014f2c:	f108 0802 	add.w	r8, r8, #2
 8014f30:	9305      	str	r3, [sp, #20]
 8014f32:	4d33      	ldr	r5, [pc, #204]	; (8015000 <_vfiprintf_r+0x21c>)
 8014f34:	f898 1000 	ldrb.w	r1, [r8]
 8014f38:	2203      	movs	r2, #3
 8014f3a:	4628      	mov	r0, r5
 8014f3c:	f7eb f958 	bl	80001f0 <memchr>
 8014f40:	b140      	cbz	r0, 8014f54 <_vfiprintf_r+0x170>
 8014f42:	2340      	movs	r3, #64	; 0x40
 8014f44:	1b40      	subs	r0, r0, r5
 8014f46:	fa03 f000 	lsl.w	r0, r3, r0
 8014f4a:	9b04      	ldr	r3, [sp, #16]
 8014f4c:	4303      	orrs	r3, r0
 8014f4e:	f108 0801 	add.w	r8, r8, #1
 8014f52:	9304      	str	r3, [sp, #16]
 8014f54:	f898 1000 	ldrb.w	r1, [r8]
 8014f58:	482a      	ldr	r0, [pc, #168]	; (8015004 <_vfiprintf_r+0x220>)
 8014f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f5e:	2206      	movs	r2, #6
 8014f60:	f108 0701 	add.w	r7, r8, #1
 8014f64:	f7eb f944 	bl	80001f0 <memchr>
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	d037      	beq.n	8014fdc <_vfiprintf_r+0x1f8>
 8014f6c:	4b26      	ldr	r3, [pc, #152]	; (8015008 <_vfiprintf_r+0x224>)
 8014f6e:	bb1b      	cbnz	r3, 8014fb8 <_vfiprintf_r+0x1d4>
 8014f70:	9b03      	ldr	r3, [sp, #12]
 8014f72:	3307      	adds	r3, #7
 8014f74:	f023 0307 	bic.w	r3, r3, #7
 8014f78:	3308      	adds	r3, #8
 8014f7a:	9303      	str	r3, [sp, #12]
 8014f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f7e:	444b      	add	r3, r9
 8014f80:	9309      	str	r3, [sp, #36]	; 0x24
 8014f82:	e750      	b.n	8014e26 <_vfiprintf_r+0x42>
 8014f84:	fb05 3202 	mla	r2, r5, r2, r3
 8014f88:	2001      	movs	r0, #1
 8014f8a:	4688      	mov	r8, r1
 8014f8c:	e78a      	b.n	8014ea4 <_vfiprintf_r+0xc0>
 8014f8e:	2300      	movs	r3, #0
 8014f90:	f108 0801 	add.w	r8, r8, #1
 8014f94:	9305      	str	r3, [sp, #20]
 8014f96:	4619      	mov	r1, r3
 8014f98:	250a      	movs	r5, #10
 8014f9a:	4640      	mov	r0, r8
 8014f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fa0:	3a30      	subs	r2, #48	; 0x30
 8014fa2:	2a09      	cmp	r2, #9
 8014fa4:	d903      	bls.n	8014fae <_vfiprintf_r+0x1ca>
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d0c3      	beq.n	8014f32 <_vfiprintf_r+0x14e>
 8014faa:	9105      	str	r1, [sp, #20]
 8014fac:	e7c1      	b.n	8014f32 <_vfiprintf_r+0x14e>
 8014fae:	fb05 2101 	mla	r1, r5, r1, r2
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	4680      	mov	r8, r0
 8014fb6:	e7f0      	b.n	8014f9a <_vfiprintf_r+0x1b6>
 8014fb8:	ab03      	add	r3, sp, #12
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	4622      	mov	r2, r4
 8014fbe:	4b13      	ldr	r3, [pc, #76]	; (801500c <_vfiprintf_r+0x228>)
 8014fc0:	a904      	add	r1, sp, #16
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f3af 8000 	nop.w
 8014fc8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014fcc:	4681      	mov	r9, r0
 8014fce:	d1d5      	bne.n	8014f7c <_vfiprintf_r+0x198>
 8014fd0:	89a3      	ldrh	r3, [r4, #12]
 8014fd2:	065b      	lsls	r3, r3, #25
 8014fd4:	f53f af7e 	bmi.w	8014ed4 <_vfiprintf_r+0xf0>
 8014fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fda:	e77d      	b.n	8014ed8 <_vfiprintf_r+0xf4>
 8014fdc:	ab03      	add	r3, sp, #12
 8014fde:	9300      	str	r3, [sp, #0]
 8014fe0:	4622      	mov	r2, r4
 8014fe2:	4b0a      	ldr	r3, [pc, #40]	; (801500c <_vfiprintf_r+0x228>)
 8014fe4:	a904      	add	r1, sp, #16
 8014fe6:	4630      	mov	r0, r6
 8014fe8:	f000 f888 	bl	80150fc <_printf_i>
 8014fec:	e7ec      	b.n	8014fc8 <_vfiprintf_r+0x1e4>
 8014fee:	bf00      	nop
 8014ff0:	080177c8 	.word	0x080177c8
 8014ff4:	08017808 	.word	0x08017808
 8014ff8:	080177e8 	.word	0x080177e8
 8014ffc:	080177a8 	.word	0x080177a8
 8015000:	0801780e 	.word	0x0801780e
 8015004:	08017812 	.word	0x08017812
 8015008:	00000000 	.word	0x00000000
 801500c:	08014dbf 	.word	0x08014dbf

08015010 <_printf_common>:
 8015010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015014:	4691      	mov	r9, r2
 8015016:	461f      	mov	r7, r3
 8015018:	688a      	ldr	r2, [r1, #8]
 801501a:	690b      	ldr	r3, [r1, #16]
 801501c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015020:	4293      	cmp	r3, r2
 8015022:	bfb8      	it	lt
 8015024:	4613      	movlt	r3, r2
 8015026:	f8c9 3000 	str.w	r3, [r9]
 801502a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801502e:	4606      	mov	r6, r0
 8015030:	460c      	mov	r4, r1
 8015032:	b112      	cbz	r2, 801503a <_printf_common+0x2a>
 8015034:	3301      	adds	r3, #1
 8015036:	f8c9 3000 	str.w	r3, [r9]
 801503a:	6823      	ldr	r3, [r4, #0]
 801503c:	0699      	lsls	r1, r3, #26
 801503e:	bf42      	ittt	mi
 8015040:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015044:	3302      	addmi	r3, #2
 8015046:	f8c9 3000 	strmi.w	r3, [r9]
 801504a:	6825      	ldr	r5, [r4, #0]
 801504c:	f015 0506 	ands.w	r5, r5, #6
 8015050:	d107      	bne.n	8015062 <_printf_common+0x52>
 8015052:	f104 0a19 	add.w	sl, r4, #25
 8015056:	68e3      	ldr	r3, [r4, #12]
 8015058:	f8d9 2000 	ldr.w	r2, [r9]
 801505c:	1a9b      	subs	r3, r3, r2
 801505e:	42ab      	cmp	r3, r5
 8015060:	dc28      	bgt.n	80150b4 <_printf_common+0xa4>
 8015062:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015066:	6822      	ldr	r2, [r4, #0]
 8015068:	3300      	adds	r3, #0
 801506a:	bf18      	it	ne
 801506c:	2301      	movne	r3, #1
 801506e:	0692      	lsls	r2, r2, #26
 8015070:	d42d      	bmi.n	80150ce <_printf_common+0xbe>
 8015072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015076:	4639      	mov	r1, r7
 8015078:	4630      	mov	r0, r6
 801507a:	47c0      	blx	r8
 801507c:	3001      	adds	r0, #1
 801507e:	d020      	beq.n	80150c2 <_printf_common+0xb2>
 8015080:	6823      	ldr	r3, [r4, #0]
 8015082:	68e5      	ldr	r5, [r4, #12]
 8015084:	f8d9 2000 	ldr.w	r2, [r9]
 8015088:	f003 0306 	and.w	r3, r3, #6
 801508c:	2b04      	cmp	r3, #4
 801508e:	bf08      	it	eq
 8015090:	1aad      	subeq	r5, r5, r2
 8015092:	68a3      	ldr	r3, [r4, #8]
 8015094:	6922      	ldr	r2, [r4, #16]
 8015096:	bf0c      	ite	eq
 8015098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801509c:	2500      	movne	r5, #0
 801509e:	4293      	cmp	r3, r2
 80150a0:	bfc4      	itt	gt
 80150a2:	1a9b      	subgt	r3, r3, r2
 80150a4:	18ed      	addgt	r5, r5, r3
 80150a6:	f04f 0900 	mov.w	r9, #0
 80150aa:	341a      	adds	r4, #26
 80150ac:	454d      	cmp	r5, r9
 80150ae:	d11a      	bne.n	80150e6 <_printf_common+0xd6>
 80150b0:	2000      	movs	r0, #0
 80150b2:	e008      	b.n	80150c6 <_printf_common+0xb6>
 80150b4:	2301      	movs	r3, #1
 80150b6:	4652      	mov	r2, sl
 80150b8:	4639      	mov	r1, r7
 80150ba:	4630      	mov	r0, r6
 80150bc:	47c0      	blx	r8
 80150be:	3001      	adds	r0, #1
 80150c0:	d103      	bne.n	80150ca <_printf_common+0xba>
 80150c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150ca:	3501      	adds	r5, #1
 80150cc:	e7c3      	b.n	8015056 <_printf_common+0x46>
 80150ce:	18e1      	adds	r1, r4, r3
 80150d0:	1c5a      	adds	r2, r3, #1
 80150d2:	2030      	movs	r0, #48	; 0x30
 80150d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80150d8:	4422      	add	r2, r4
 80150da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80150de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80150e2:	3302      	adds	r3, #2
 80150e4:	e7c5      	b.n	8015072 <_printf_common+0x62>
 80150e6:	2301      	movs	r3, #1
 80150e8:	4622      	mov	r2, r4
 80150ea:	4639      	mov	r1, r7
 80150ec:	4630      	mov	r0, r6
 80150ee:	47c0      	blx	r8
 80150f0:	3001      	adds	r0, #1
 80150f2:	d0e6      	beq.n	80150c2 <_printf_common+0xb2>
 80150f4:	f109 0901 	add.w	r9, r9, #1
 80150f8:	e7d8      	b.n	80150ac <_printf_common+0x9c>
	...

080150fc <_printf_i>:
 80150fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015100:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015104:	460c      	mov	r4, r1
 8015106:	7e09      	ldrb	r1, [r1, #24]
 8015108:	b085      	sub	sp, #20
 801510a:	296e      	cmp	r1, #110	; 0x6e
 801510c:	4617      	mov	r7, r2
 801510e:	4606      	mov	r6, r0
 8015110:	4698      	mov	r8, r3
 8015112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015114:	f000 80b3 	beq.w	801527e <_printf_i+0x182>
 8015118:	d822      	bhi.n	8015160 <_printf_i+0x64>
 801511a:	2963      	cmp	r1, #99	; 0x63
 801511c:	d036      	beq.n	801518c <_printf_i+0x90>
 801511e:	d80a      	bhi.n	8015136 <_printf_i+0x3a>
 8015120:	2900      	cmp	r1, #0
 8015122:	f000 80b9 	beq.w	8015298 <_printf_i+0x19c>
 8015126:	2958      	cmp	r1, #88	; 0x58
 8015128:	f000 8083 	beq.w	8015232 <_printf_i+0x136>
 801512c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015130:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015134:	e032      	b.n	801519c <_printf_i+0xa0>
 8015136:	2964      	cmp	r1, #100	; 0x64
 8015138:	d001      	beq.n	801513e <_printf_i+0x42>
 801513a:	2969      	cmp	r1, #105	; 0x69
 801513c:	d1f6      	bne.n	801512c <_printf_i+0x30>
 801513e:	6820      	ldr	r0, [r4, #0]
 8015140:	6813      	ldr	r3, [r2, #0]
 8015142:	0605      	lsls	r5, r0, #24
 8015144:	f103 0104 	add.w	r1, r3, #4
 8015148:	d52a      	bpl.n	80151a0 <_printf_i+0xa4>
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	6011      	str	r1, [r2, #0]
 801514e:	2b00      	cmp	r3, #0
 8015150:	da03      	bge.n	801515a <_printf_i+0x5e>
 8015152:	222d      	movs	r2, #45	; 0x2d
 8015154:	425b      	negs	r3, r3
 8015156:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801515a:	486f      	ldr	r0, [pc, #444]	; (8015318 <_printf_i+0x21c>)
 801515c:	220a      	movs	r2, #10
 801515e:	e039      	b.n	80151d4 <_printf_i+0xd8>
 8015160:	2973      	cmp	r1, #115	; 0x73
 8015162:	f000 809d 	beq.w	80152a0 <_printf_i+0x1a4>
 8015166:	d808      	bhi.n	801517a <_printf_i+0x7e>
 8015168:	296f      	cmp	r1, #111	; 0x6f
 801516a:	d020      	beq.n	80151ae <_printf_i+0xb2>
 801516c:	2970      	cmp	r1, #112	; 0x70
 801516e:	d1dd      	bne.n	801512c <_printf_i+0x30>
 8015170:	6823      	ldr	r3, [r4, #0]
 8015172:	f043 0320 	orr.w	r3, r3, #32
 8015176:	6023      	str	r3, [r4, #0]
 8015178:	e003      	b.n	8015182 <_printf_i+0x86>
 801517a:	2975      	cmp	r1, #117	; 0x75
 801517c:	d017      	beq.n	80151ae <_printf_i+0xb2>
 801517e:	2978      	cmp	r1, #120	; 0x78
 8015180:	d1d4      	bne.n	801512c <_printf_i+0x30>
 8015182:	2378      	movs	r3, #120	; 0x78
 8015184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015188:	4864      	ldr	r0, [pc, #400]	; (801531c <_printf_i+0x220>)
 801518a:	e055      	b.n	8015238 <_printf_i+0x13c>
 801518c:	6813      	ldr	r3, [r2, #0]
 801518e:	1d19      	adds	r1, r3, #4
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	6011      	str	r1, [r2, #0]
 8015194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801519c:	2301      	movs	r3, #1
 801519e:	e08c      	b.n	80152ba <_printf_i+0x1be>
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	6011      	str	r1, [r2, #0]
 80151a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80151a8:	bf18      	it	ne
 80151aa:	b21b      	sxthne	r3, r3
 80151ac:	e7cf      	b.n	801514e <_printf_i+0x52>
 80151ae:	6813      	ldr	r3, [r2, #0]
 80151b0:	6825      	ldr	r5, [r4, #0]
 80151b2:	1d18      	adds	r0, r3, #4
 80151b4:	6010      	str	r0, [r2, #0]
 80151b6:	0628      	lsls	r0, r5, #24
 80151b8:	d501      	bpl.n	80151be <_printf_i+0xc2>
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	e002      	b.n	80151c4 <_printf_i+0xc8>
 80151be:	0668      	lsls	r0, r5, #25
 80151c0:	d5fb      	bpl.n	80151ba <_printf_i+0xbe>
 80151c2:	881b      	ldrh	r3, [r3, #0]
 80151c4:	4854      	ldr	r0, [pc, #336]	; (8015318 <_printf_i+0x21c>)
 80151c6:	296f      	cmp	r1, #111	; 0x6f
 80151c8:	bf14      	ite	ne
 80151ca:	220a      	movne	r2, #10
 80151cc:	2208      	moveq	r2, #8
 80151ce:	2100      	movs	r1, #0
 80151d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80151d4:	6865      	ldr	r5, [r4, #4]
 80151d6:	60a5      	str	r5, [r4, #8]
 80151d8:	2d00      	cmp	r5, #0
 80151da:	f2c0 8095 	blt.w	8015308 <_printf_i+0x20c>
 80151de:	6821      	ldr	r1, [r4, #0]
 80151e0:	f021 0104 	bic.w	r1, r1, #4
 80151e4:	6021      	str	r1, [r4, #0]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d13d      	bne.n	8015266 <_printf_i+0x16a>
 80151ea:	2d00      	cmp	r5, #0
 80151ec:	f040 808e 	bne.w	801530c <_printf_i+0x210>
 80151f0:	4665      	mov	r5, ip
 80151f2:	2a08      	cmp	r2, #8
 80151f4:	d10b      	bne.n	801520e <_printf_i+0x112>
 80151f6:	6823      	ldr	r3, [r4, #0]
 80151f8:	07db      	lsls	r3, r3, #31
 80151fa:	d508      	bpl.n	801520e <_printf_i+0x112>
 80151fc:	6923      	ldr	r3, [r4, #16]
 80151fe:	6862      	ldr	r2, [r4, #4]
 8015200:	429a      	cmp	r2, r3
 8015202:	bfde      	ittt	le
 8015204:	2330      	movle	r3, #48	; 0x30
 8015206:	f805 3c01 	strble.w	r3, [r5, #-1]
 801520a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801520e:	ebac 0305 	sub.w	r3, ip, r5
 8015212:	6123      	str	r3, [r4, #16]
 8015214:	f8cd 8000 	str.w	r8, [sp]
 8015218:	463b      	mov	r3, r7
 801521a:	aa03      	add	r2, sp, #12
 801521c:	4621      	mov	r1, r4
 801521e:	4630      	mov	r0, r6
 8015220:	f7ff fef6 	bl	8015010 <_printf_common>
 8015224:	3001      	adds	r0, #1
 8015226:	d14d      	bne.n	80152c4 <_printf_i+0x1c8>
 8015228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801522c:	b005      	add	sp, #20
 801522e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015232:	4839      	ldr	r0, [pc, #228]	; (8015318 <_printf_i+0x21c>)
 8015234:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015238:	6813      	ldr	r3, [r2, #0]
 801523a:	6821      	ldr	r1, [r4, #0]
 801523c:	1d1d      	adds	r5, r3, #4
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	6015      	str	r5, [r2, #0]
 8015242:	060a      	lsls	r2, r1, #24
 8015244:	d50b      	bpl.n	801525e <_printf_i+0x162>
 8015246:	07ca      	lsls	r2, r1, #31
 8015248:	bf44      	itt	mi
 801524a:	f041 0120 	orrmi.w	r1, r1, #32
 801524e:	6021      	strmi	r1, [r4, #0]
 8015250:	b91b      	cbnz	r3, 801525a <_printf_i+0x15e>
 8015252:	6822      	ldr	r2, [r4, #0]
 8015254:	f022 0220 	bic.w	r2, r2, #32
 8015258:	6022      	str	r2, [r4, #0]
 801525a:	2210      	movs	r2, #16
 801525c:	e7b7      	b.n	80151ce <_printf_i+0xd2>
 801525e:	064d      	lsls	r5, r1, #25
 8015260:	bf48      	it	mi
 8015262:	b29b      	uxthmi	r3, r3
 8015264:	e7ef      	b.n	8015246 <_printf_i+0x14a>
 8015266:	4665      	mov	r5, ip
 8015268:	fbb3 f1f2 	udiv	r1, r3, r2
 801526c:	fb02 3311 	mls	r3, r2, r1, r3
 8015270:	5cc3      	ldrb	r3, [r0, r3]
 8015272:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015276:	460b      	mov	r3, r1
 8015278:	2900      	cmp	r1, #0
 801527a:	d1f5      	bne.n	8015268 <_printf_i+0x16c>
 801527c:	e7b9      	b.n	80151f2 <_printf_i+0xf6>
 801527e:	6813      	ldr	r3, [r2, #0]
 8015280:	6825      	ldr	r5, [r4, #0]
 8015282:	6961      	ldr	r1, [r4, #20]
 8015284:	1d18      	adds	r0, r3, #4
 8015286:	6010      	str	r0, [r2, #0]
 8015288:	0628      	lsls	r0, r5, #24
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	d501      	bpl.n	8015292 <_printf_i+0x196>
 801528e:	6019      	str	r1, [r3, #0]
 8015290:	e002      	b.n	8015298 <_printf_i+0x19c>
 8015292:	066a      	lsls	r2, r5, #25
 8015294:	d5fb      	bpl.n	801528e <_printf_i+0x192>
 8015296:	8019      	strh	r1, [r3, #0]
 8015298:	2300      	movs	r3, #0
 801529a:	6123      	str	r3, [r4, #16]
 801529c:	4665      	mov	r5, ip
 801529e:	e7b9      	b.n	8015214 <_printf_i+0x118>
 80152a0:	6813      	ldr	r3, [r2, #0]
 80152a2:	1d19      	adds	r1, r3, #4
 80152a4:	6011      	str	r1, [r2, #0]
 80152a6:	681d      	ldr	r5, [r3, #0]
 80152a8:	6862      	ldr	r2, [r4, #4]
 80152aa:	2100      	movs	r1, #0
 80152ac:	4628      	mov	r0, r5
 80152ae:	f7ea ff9f 	bl	80001f0 <memchr>
 80152b2:	b108      	cbz	r0, 80152b8 <_printf_i+0x1bc>
 80152b4:	1b40      	subs	r0, r0, r5
 80152b6:	6060      	str	r0, [r4, #4]
 80152b8:	6863      	ldr	r3, [r4, #4]
 80152ba:	6123      	str	r3, [r4, #16]
 80152bc:	2300      	movs	r3, #0
 80152be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80152c2:	e7a7      	b.n	8015214 <_printf_i+0x118>
 80152c4:	6923      	ldr	r3, [r4, #16]
 80152c6:	462a      	mov	r2, r5
 80152c8:	4639      	mov	r1, r7
 80152ca:	4630      	mov	r0, r6
 80152cc:	47c0      	blx	r8
 80152ce:	3001      	adds	r0, #1
 80152d0:	d0aa      	beq.n	8015228 <_printf_i+0x12c>
 80152d2:	6823      	ldr	r3, [r4, #0]
 80152d4:	079b      	lsls	r3, r3, #30
 80152d6:	d413      	bmi.n	8015300 <_printf_i+0x204>
 80152d8:	68e0      	ldr	r0, [r4, #12]
 80152da:	9b03      	ldr	r3, [sp, #12]
 80152dc:	4298      	cmp	r0, r3
 80152de:	bfb8      	it	lt
 80152e0:	4618      	movlt	r0, r3
 80152e2:	e7a3      	b.n	801522c <_printf_i+0x130>
 80152e4:	2301      	movs	r3, #1
 80152e6:	464a      	mov	r2, r9
 80152e8:	4639      	mov	r1, r7
 80152ea:	4630      	mov	r0, r6
 80152ec:	47c0      	blx	r8
 80152ee:	3001      	adds	r0, #1
 80152f0:	d09a      	beq.n	8015228 <_printf_i+0x12c>
 80152f2:	3501      	adds	r5, #1
 80152f4:	68e3      	ldr	r3, [r4, #12]
 80152f6:	9a03      	ldr	r2, [sp, #12]
 80152f8:	1a9b      	subs	r3, r3, r2
 80152fa:	42ab      	cmp	r3, r5
 80152fc:	dcf2      	bgt.n	80152e4 <_printf_i+0x1e8>
 80152fe:	e7eb      	b.n	80152d8 <_printf_i+0x1dc>
 8015300:	2500      	movs	r5, #0
 8015302:	f104 0919 	add.w	r9, r4, #25
 8015306:	e7f5      	b.n	80152f4 <_printf_i+0x1f8>
 8015308:	2b00      	cmp	r3, #0
 801530a:	d1ac      	bne.n	8015266 <_printf_i+0x16a>
 801530c:	7803      	ldrb	r3, [r0, #0]
 801530e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015312:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015316:	e76c      	b.n	80151f2 <_printf_i+0xf6>
 8015318:	08017819 	.word	0x08017819
 801531c:	0801782a 	.word	0x0801782a

08015320 <__sread>:
 8015320:	b510      	push	{r4, lr}
 8015322:	460c      	mov	r4, r1
 8015324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015328:	f000 fa46 	bl	80157b8 <_read_r>
 801532c:	2800      	cmp	r0, #0
 801532e:	bfab      	itete	ge
 8015330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015332:	89a3      	ldrhlt	r3, [r4, #12]
 8015334:	181b      	addge	r3, r3, r0
 8015336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801533a:	bfac      	ite	ge
 801533c:	6563      	strge	r3, [r4, #84]	; 0x54
 801533e:	81a3      	strhlt	r3, [r4, #12]
 8015340:	bd10      	pop	{r4, pc}

08015342 <__swrite>:
 8015342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015346:	461f      	mov	r7, r3
 8015348:	898b      	ldrh	r3, [r1, #12]
 801534a:	05db      	lsls	r3, r3, #23
 801534c:	4605      	mov	r5, r0
 801534e:	460c      	mov	r4, r1
 8015350:	4616      	mov	r6, r2
 8015352:	d505      	bpl.n	8015360 <__swrite+0x1e>
 8015354:	2302      	movs	r3, #2
 8015356:	2200      	movs	r2, #0
 8015358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801535c:	f000 f9b6 	bl	80156cc <_lseek_r>
 8015360:	89a3      	ldrh	r3, [r4, #12]
 8015362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801536a:	81a3      	strh	r3, [r4, #12]
 801536c:	4632      	mov	r2, r6
 801536e:	463b      	mov	r3, r7
 8015370:	4628      	mov	r0, r5
 8015372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015376:	f000 b869 	b.w	801544c <_write_r>

0801537a <__sseek>:
 801537a:	b510      	push	{r4, lr}
 801537c:	460c      	mov	r4, r1
 801537e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015382:	f000 f9a3 	bl	80156cc <_lseek_r>
 8015386:	1c43      	adds	r3, r0, #1
 8015388:	89a3      	ldrh	r3, [r4, #12]
 801538a:	bf15      	itete	ne
 801538c:	6560      	strne	r0, [r4, #84]	; 0x54
 801538e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015396:	81a3      	strheq	r3, [r4, #12]
 8015398:	bf18      	it	ne
 801539a:	81a3      	strhne	r3, [r4, #12]
 801539c:	bd10      	pop	{r4, pc}

0801539e <__sclose>:
 801539e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153a2:	f000 b8d3 	b.w	801554c <_close_r>
	...

080153a8 <__swbuf_r>:
 80153a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153aa:	460e      	mov	r6, r1
 80153ac:	4614      	mov	r4, r2
 80153ae:	4605      	mov	r5, r0
 80153b0:	b118      	cbz	r0, 80153ba <__swbuf_r+0x12>
 80153b2:	6983      	ldr	r3, [r0, #24]
 80153b4:	b90b      	cbnz	r3, 80153ba <__swbuf_r+0x12>
 80153b6:	f7ff fc5f 	bl	8014c78 <__sinit>
 80153ba:	4b21      	ldr	r3, [pc, #132]	; (8015440 <__swbuf_r+0x98>)
 80153bc:	429c      	cmp	r4, r3
 80153be:	d12a      	bne.n	8015416 <__swbuf_r+0x6e>
 80153c0:	686c      	ldr	r4, [r5, #4]
 80153c2:	69a3      	ldr	r3, [r4, #24]
 80153c4:	60a3      	str	r3, [r4, #8]
 80153c6:	89a3      	ldrh	r3, [r4, #12]
 80153c8:	071a      	lsls	r2, r3, #28
 80153ca:	d52e      	bpl.n	801542a <__swbuf_r+0x82>
 80153cc:	6923      	ldr	r3, [r4, #16]
 80153ce:	b363      	cbz	r3, 801542a <__swbuf_r+0x82>
 80153d0:	6923      	ldr	r3, [r4, #16]
 80153d2:	6820      	ldr	r0, [r4, #0]
 80153d4:	1ac0      	subs	r0, r0, r3
 80153d6:	6963      	ldr	r3, [r4, #20]
 80153d8:	b2f6      	uxtb	r6, r6
 80153da:	4283      	cmp	r3, r0
 80153dc:	4637      	mov	r7, r6
 80153de:	dc04      	bgt.n	80153ea <__swbuf_r+0x42>
 80153e0:	4621      	mov	r1, r4
 80153e2:	4628      	mov	r0, r5
 80153e4:	f000 f948 	bl	8015678 <_fflush_r>
 80153e8:	bb28      	cbnz	r0, 8015436 <__swbuf_r+0x8e>
 80153ea:	68a3      	ldr	r3, [r4, #8]
 80153ec:	3b01      	subs	r3, #1
 80153ee:	60a3      	str	r3, [r4, #8]
 80153f0:	6823      	ldr	r3, [r4, #0]
 80153f2:	1c5a      	adds	r2, r3, #1
 80153f4:	6022      	str	r2, [r4, #0]
 80153f6:	701e      	strb	r6, [r3, #0]
 80153f8:	6963      	ldr	r3, [r4, #20]
 80153fa:	3001      	adds	r0, #1
 80153fc:	4283      	cmp	r3, r0
 80153fe:	d004      	beq.n	801540a <__swbuf_r+0x62>
 8015400:	89a3      	ldrh	r3, [r4, #12]
 8015402:	07db      	lsls	r3, r3, #31
 8015404:	d519      	bpl.n	801543a <__swbuf_r+0x92>
 8015406:	2e0a      	cmp	r6, #10
 8015408:	d117      	bne.n	801543a <__swbuf_r+0x92>
 801540a:	4621      	mov	r1, r4
 801540c:	4628      	mov	r0, r5
 801540e:	f000 f933 	bl	8015678 <_fflush_r>
 8015412:	b190      	cbz	r0, 801543a <__swbuf_r+0x92>
 8015414:	e00f      	b.n	8015436 <__swbuf_r+0x8e>
 8015416:	4b0b      	ldr	r3, [pc, #44]	; (8015444 <__swbuf_r+0x9c>)
 8015418:	429c      	cmp	r4, r3
 801541a:	d101      	bne.n	8015420 <__swbuf_r+0x78>
 801541c:	68ac      	ldr	r4, [r5, #8]
 801541e:	e7d0      	b.n	80153c2 <__swbuf_r+0x1a>
 8015420:	4b09      	ldr	r3, [pc, #36]	; (8015448 <__swbuf_r+0xa0>)
 8015422:	429c      	cmp	r4, r3
 8015424:	bf08      	it	eq
 8015426:	68ec      	ldreq	r4, [r5, #12]
 8015428:	e7cb      	b.n	80153c2 <__swbuf_r+0x1a>
 801542a:	4621      	mov	r1, r4
 801542c:	4628      	mov	r0, r5
 801542e:	f000 f81f 	bl	8015470 <__swsetup_r>
 8015432:	2800      	cmp	r0, #0
 8015434:	d0cc      	beq.n	80153d0 <__swbuf_r+0x28>
 8015436:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801543a:	4638      	mov	r0, r7
 801543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801543e:	bf00      	nop
 8015440:	080177c8 	.word	0x080177c8
 8015444:	080177e8 	.word	0x080177e8
 8015448:	080177a8 	.word	0x080177a8

0801544c <_write_r>:
 801544c:	b538      	push	{r3, r4, r5, lr}
 801544e:	4c07      	ldr	r4, [pc, #28]	; (801546c <_write_r+0x20>)
 8015450:	4605      	mov	r5, r0
 8015452:	4608      	mov	r0, r1
 8015454:	4611      	mov	r1, r2
 8015456:	2200      	movs	r2, #0
 8015458:	6022      	str	r2, [r4, #0]
 801545a:	461a      	mov	r2, r3
 801545c:	f7eb fcc5 	bl	8000dea <_write>
 8015460:	1c43      	adds	r3, r0, #1
 8015462:	d102      	bne.n	801546a <_write_r+0x1e>
 8015464:	6823      	ldr	r3, [r4, #0]
 8015466:	b103      	cbz	r3, 801546a <_write_r+0x1e>
 8015468:	602b      	str	r3, [r5, #0]
 801546a:	bd38      	pop	{r3, r4, r5, pc}
 801546c:	2000ab6c 	.word	0x2000ab6c

08015470 <__swsetup_r>:
 8015470:	4b32      	ldr	r3, [pc, #200]	; (801553c <__swsetup_r+0xcc>)
 8015472:	b570      	push	{r4, r5, r6, lr}
 8015474:	681d      	ldr	r5, [r3, #0]
 8015476:	4606      	mov	r6, r0
 8015478:	460c      	mov	r4, r1
 801547a:	b125      	cbz	r5, 8015486 <__swsetup_r+0x16>
 801547c:	69ab      	ldr	r3, [r5, #24]
 801547e:	b913      	cbnz	r3, 8015486 <__swsetup_r+0x16>
 8015480:	4628      	mov	r0, r5
 8015482:	f7ff fbf9 	bl	8014c78 <__sinit>
 8015486:	4b2e      	ldr	r3, [pc, #184]	; (8015540 <__swsetup_r+0xd0>)
 8015488:	429c      	cmp	r4, r3
 801548a:	d10f      	bne.n	80154ac <__swsetup_r+0x3c>
 801548c:	686c      	ldr	r4, [r5, #4]
 801548e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015492:	b29a      	uxth	r2, r3
 8015494:	0715      	lsls	r5, r2, #28
 8015496:	d42c      	bmi.n	80154f2 <__swsetup_r+0x82>
 8015498:	06d0      	lsls	r0, r2, #27
 801549a:	d411      	bmi.n	80154c0 <__swsetup_r+0x50>
 801549c:	2209      	movs	r2, #9
 801549e:	6032      	str	r2, [r6, #0]
 80154a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154a4:	81a3      	strh	r3, [r4, #12]
 80154a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154aa:	e03e      	b.n	801552a <__swsetup_r+0xba>
 80154ac:	4b25      	ldr	r3, [pc, #148]	; (8015544 <__swsetup_r+0xd4>)
 80154ae:	429c      	cmp	r4, r3
 80154b0:	d101      	bne.n	80154b6 <__swsetup_r+0x46>
 80154b2:	68ac      	ldr	r4, [r5, #8]
 80154b4:	e7eb      	b.n	801548e <__swsetup_r+0x1e>
 80154b6:	4b24      	ldr	r3, [pc, #144]	; (8015548 <__swsetup_r+0xd8>)
 80154b8:	429c      	cmp	r4, r3
 80154ba:	bf08      	it	eq
 80154bc:	68ec      	ldreq	r4, [r5, #12]
 80154be:	e7e6      	b.n	801548e <__swsetup_r+0x1e>
 80154c0:	0751      	lsls	r1, r2, #29
 80154c2:	d512      	bpl.n	80154ea <__swsetup_r+0x7a>
 80154c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154c6:	b141      	cbz	r1, 80154da <__swsetup_r+0x6a>
 80154c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154cc:	4299      	cmp	r1, r3
 80154ce:	d002      	beq.n	80154d6 <__swsetup_r+0x66>
 80154d0:	4630      	mov	r0, r6
 80154d2:	f7ff fac1 	bl	8014a58 <_free_r>
 80154d6:	2300      	movs	r3, #0
 80154d8:	6363      	str	r3, [r4, #52]	; 0x34
 80154da:	89a3      	ldrh	r3, [r4, #12]
 80154dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80154e0:	81a3      	strh	r3, [r4, #12]
 80154e2:	2300      	movs	r3, #0
 80154e4:	6063      	str	r3, [r4, #4]
 80154e6:	6923      	ldr	r3, [r4, #16]
 80154e8:	6023      	str	r3, [r4, #0]
 80154ea:	89a3      	ldrh	r3, [r4, #12]
 80154ec:	f043 0308 	orr.w	r3, r3, #8
 80154f0:	81a3      	strh	r3, [r4, #12]
 80154f2:	6923      	ldr	r3, [r4, #16]
 80154f4:	b94b      	cbnz	r3, 801550a <__swsetup_r+0x9a>
 80154f6:	89a3      	ldrh	r3, [r4, #12]
 80154f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80154fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015500:	d003      	beq.n	801550a <__swsetup_r+0x9a>
 8015502:	4621      	mov	r1, r4
 8015504:	4630      	mov	r0, r6
 8015506:	f000 f917 	bl	8015738 <__smakebuf_r>
 801550a:	89a2      	ldrh	r2, [r4, #12]
 801550c:	f012 0301 	ands.w	r3, r2, #1
 8015510:	d00c      	beq.n	801552c <__swsetup_r+0xbc>
 8015512:	2300      	movs	r3, #0
 8015514:	60a3      	str	r3, [r4, #8]
 8015516:	6963      	ldr	r3, [r4, #20]
 8015518:	425b      	negs	r3, r3
 801551a:	61a3      	str	r3, [r4, #24]
 801551c:	6923      	ldr	r3, [r4, #16]
 801551e:	b953      	cbnz	r3, 8015536 <__swsetup_r+0xc6>
 8015520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015524:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015528:	d1ba      	bne.n	80154a0 <__swsetup_r+0x30>
 801552a:	bd70      	pop	{r4, r5, r6, pc}
 801552c:	0792      	lsls	r2, r2, #30
 801552e:	bf58      	it	pl
 8015530:	6963      	ldrpl	r3, [r4, #20]
 8015532:	60a3      	str	r3, [r4, #8]
 8015534:	e7f2      	b.n	801551c <__swsetup_r+0xac>
 8015536:	2000      	movs	r0, #0
 8015538:	e7f7      	b.n	801552a <__swsetup_r+0xba>
 801553a:	bf00      	nop
 801553c:	20000180 	.word	0x20000180
 8015540:	080177c8 	.word	0x080177c8
 8015544:	080177e8 	.word	0x080177e8
 8015548:	080177a8 	.word	0x080177a8

0801554c <_close_r>:
 801554c:	b538      	push	{r3, r4, r5, lr}
 801554e:	4c06      	ldr	r4, [pc, #24]	; (8015568 <_close_r+0x1c>)
 8015550:	2300      	movs	r3, #0
 8015552:	4605      	mov	r5, r0
 8015554:	4608      	mov	r0, r1
 8015556:	6023      	str	r3, [r4, #0]
 8015558:	f7eb fc63 	bl	8000e22 <_close>
 801555c:	1c43      	adds	r3, r0, #1
 801555e:	d102      	bne.n	8015566 <_close_r+0x1a>
 8015560:	6823      	ldr	r3, [r4, #0]
 8015562:	b103      	cbz	r3, 8015566 <_close_r+0x1a>
 8015564:	602b      	str	r3, [r5, #0]
 8015566:	bd38      	pop	{r3, r4, r5, pc}
 8015568:	2000ab6c 	.word	0x2000ab6c

0801556c <__sflush_r>:
 801556c:	898a      	ldrh	r2, [r1, #12]
 801556e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015572:	4605      	mov	r5, r0
 8015574:	0710      	lsls	r0, r2, #28
 8015576:	460c      	mov	r4, r1
 8015578:	d458      	bmi.n	801562c <__sflush_r+0xc0>
 801557a:	684b      	ldr	r3, [r1, #4]
 801557c:	2b00      	cmp	r3, #0
 801557e:	dc05      	bgt.n	801558c <__sflush_r+0x20>
 8015580:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015582:	2b00      	cmp	r3, #0
 8015584:	dc02      	bgt.n	801558c <__sflush_r+0x20>
 8015586:	2000      	movs	r0, #0
 8015588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801558c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801558e:	2e00      	cmp	r6, #0
 8015590:	d0f9      	beq.n	8015586 <__sflush_r+0x1a>
 8015592:	2300      	movs	r3, #0
 8015594:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015598:	682f      	ldr	r7, [r5, #0]
 801559a:	6a21      	ldr	r1, [r4, #32]
 801559c:	602b      	str	r3, [r5, #0]
 801559e:	d032      	beq.n	8015606 <__sflush_r+0x9a>
 80155a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80155a2:	89a3      	ldrh	r3, [r4, #12]
 80155a4:	075a      	lsls	r2, r3, #29
 80155a6:	d505      	bpl.n	80155b4 <__sflush_r+0x48>
 80155a8:	6863      	ldr	r3, [r4, #4]
 80155aa:	1ac0      	subs	r0, r0, r3
 80155ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80155ae:	b10b      	cbz	r3, 80155b4 <__sflush_r+0x48>
 80155b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80155b2:	1ac0      	subs	r0, r0, r3
 80155b4:	2300      	movs	r3, #0
 80155b6:	4602      	mov	r2, r0
 80155b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80155ba:	6a21      	ldr	r1, [r4, #32]
 80155bc:	4628      	mov	r0, r5
 80155be:	47b0      	blx	r6
 80155c0:	1c43      	adds	r3, r0, #1
 80155c2:	89a3      	ldrh	r3, [r4, #12]
 80155c4:	d106      	bne.n	80155d4 <__sflush_r+0x68>
 80155c6:	6829      	ldr	r1, [r5, #0]
 80155c8:	291d      	cmp	r1, #29
 80155ca:	d848      	bhi.n	801565e <__sflush_r+0xf2>
 80155cc:	4a29      	ldr	r2, [pc, #164]	; (8015674 <__sflush_r+0x108>)
 80155ce:	40ca      	lsrs	r2, r1
 80155d0:	07d6      	lsls	r6, r2, #31
 80155d2:	d544      	bpl.n	801565e <__sflush_r+0xf2>
 80155d4:	2200      	movs	r2, #0
 80155d6:	6062      	str	r2, [r4, #4]
 80155d8:	04d9      	lsls	r1, r3, #19
 80155da:	6922      	ldr	r2, [r4, #16]
 80155dc:	6022      	str	r2, [r4, #0]
 80155de:	d504      	bpl.n	80155ea <__sflush_r+0x7e>
 80155e0:	1c42      	adds	r2, r0, #1
 80155e2:	d101      	bne.n	80155e8 <__sflush_r+0x7c>
 80155e4:	682b      	ldr	r3, [r5, #0]
 80155e6:	b903      	cbnz	r3, 80155ea <__sflush_r+0x7e>
 80155e8:	6560      	str	r0, [r4, #84]	; 0x54
 80155ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155ec:	602f      	str	r7, [r5, #0]
 80155ee:	2900      	cmp	r1, #0
 80155f0:	d0c9      	beq.n	8015586 <__sflush_r+0x1a>
 80155f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155f6:	4299      	cmp	r1, r3
 80155f8:	d002      	beq.n	8015600 <__sflush_r+0x94>
 80155fa:	4628      	mov	r0, r5
 80155fc:	f7ff fa2c 	bl	8014a58 <_free_r>
 8015600:	2000      	movs	r0, #0
 8015602:	6360      	str	r0, [r4, #52]	; 0x34
 8015604:	e7c0      	b.n	8015588 <__sflush_r+0x1c>
 8015606:	2301      	movs	r3, #1
 8015608:	4628      	mov	r0, r5
 801560a:	47b0      	blx	r6
 801560c:	1c41      	adds	r1, r0, #1
 801560e:	d1c8      	bne.n	80155a2 <__sflush_r+0x36>
 8015610:	682b      	ldr	r3, [r5, #0]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d0c5      	beq.n	80155a2 <__sflush_r+0x36>
 8015616:	2b1d      	cmp	r3, #29
 8015618:	d001      	beq.n	801561e <__sflush_r+0xb2>
 801561a:	2b16      	cmp	r3, #22
 801561c:	d101      	bne.n	8015622 <__sflush_r+0xb6>
 801561e:	602f      	str	r7, [r5, #0]
 8015620:	e7b1      	b.n	8015586 <__sflush_r+0x1a>
 8015622:	89a3      	ldrh	r3, [r4, #12]
 8015624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015628:	81a3      	strh	r3, [r4, #12]
 801562a:	e7ad      	b.n	8015588 <__sflush_r+0x1c>
 801562c:	690f      	ldr	r7, [r1, #16]
 801562e:	2f00      	cmp	r7, #0
 8015630:	d0a9      	beq.n	8015586 <__sflush_r+0x1a>
 8015632:	0793      	lsls	r3, r2, #30
 8015634:	680e      	ldr	r6, [r1, #0]
 8015636:	bf08      	it	eq
 8015638:	694b      	ldreq	r3, [r1, #20]
 801563a:	600f      	str	r7, [r1, #0]
 801563c:	bf18      	it	ne
 801563e:	2300      	movne	r3, #0
 8015640:	eba6 0807 	sub.w	r8, r6, r7
 8015644:	608b      	str	r3, [r1, #8]
 8015646:	f1b8 0f00 	cmp.w	r8, #0
 801564a:	dd9c      	ble.n	8015586 <__sflush_r+0x1a>
 801564c:	4643      	mov	r3, r8
 801564e:	463a      	mov	r2, r7
 8015650:	6a21      	ldr	r1, [r4, #32]
 8015652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015654:	4628      	mov	r0, r5
 8015656:	47b0      	blx	r6
 8015658:	2800      	cmp	r0, #0
 801565a:	dc06      	bgt.n	801566a <__sflush_r+0xfe>
 801565c:	89a3      	ldrh	r3, [r4, #12]
 801565e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015662:	81a3      	strh	r3, [r4, #12]
 8015664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015668:	e78e      	b.n	8015588 <__sflush_r+0x1c>
 801566a:	4407      	add	r7, r0
 801566c:	eba8 0800 	sub.w	r8, r8, r0
 8015670:	e7e9      	b.n	8015646 <__sflush_r+0xda>
 8015672:	bf00      	nop
 8015674:	20400001 	.word	0x20400001

08015678 <_fflush_r>:
 8015678:	b538      	push	{r3, r4, r5, lr}
 801567a:	690b      	ldr	r3, [r1, #16]
 801567c:	4605      	mov	r5, r0
 801567e:	460c      	mov	r4, r1
 8015680:	b1db      	cbz	r3, 80156ba <_fflush_r+0x42>
 8015682:	b118      	cbz	r0, 801568c <_fflush_r+0x14>
 8015684:	6983      	ldr	r3, [r0, #24]
 8015686:	b90b      	cbnz	r3, 801568c <_fflush_r+0x14>
 8015688:	f7ff faf6 	bl	8014c78 <__sinit>
 801568c:	4b0c      	ldr	r3, [pc, #48]	; (80156c0 <_fflush_r+0x48>)
 801568e:	429c      	cmp	r4, r3
 8015690:	d109      	bne.n	80156a6 <_fflush_r+0x2e>
 8015692:	686c      	ldr	r4, [r5, #4]
 8015694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015698:	b17b      	cbz	r3, 80156ba <_fflush_r+0x42>
 801569a:	4621      	mov	r1, r4
 801569c:	4628      	mov	r0, r5
 801569e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156a2:	f7ff bf63 	b.w	801556c <__sflush_r>
 80156a6:	4b07      	ldr	r3, [pc, #28]	; (80156c4 <_fflush_r+0x4c>)
 80156a8:	429c      	cmp	r4, r3
 80156aa:	d101      	bne.n	80156b0 <_fflush_r+0x38>
 80156ac:	68ac      	ldr	r4, [r5, #8]
 80156ae:	e7f1      	b.n	8015694 <_fflush_r+0x1c>
 80156b0:	4b05      	ldr	r3, [pc, #20]	; (80156c8 <_fflush_r+0x50>)
 80156b2:	429c      	cmp	r4, r3
 80156b4:	bf08      	it	eq
 80156b6:	68ec      	ldreq	r4, [r5, #12]
 80156b8:	e7ec      	b.n	8015694 <_fflush_r+0x1c>
 80156ba:	2000      	movs	r0, #0
 80156bc:	bd38      	pop	{r3, r4, r5, pc}
 80156be:	bf00      	nop
 80156c0:	080177c8 	.word	0x080177c8
 80156c4:	080177e8 	.word	0x080177e8
 80156c8:	080177a8 	.word	0x080177a8

080156cc <_lseek_r>:
 80156cc:	b538      	push	{r3, r4, r5, lr}
 80156ce:	4c07      	ldr	r4, [pc, #28]	; (80156ec <_lseek_r+0x20>)
 80156d0:	4605      	mov	r5, r0
 80156d2:	4608      	mov	r0, r1
 80156d4:	4611      	mov	r1, r2
 80156d6:	2200      	movs	r2, #0
 80156d8:	6022      	str	r2, [r4, #0]
 80156da:	461a      	mov	r2, r3
 80156dc:	f7eb fbc8 	bl	8000e70 <_lseek>
 80156e0:	1c43      	adds	r3, r0, #1
 80156e2:	d102      	bne.n	80156ea <_lseek_r+0x1e>
 80156e4:	6823      	ldr	r3, [r4, #0]
 80156e6:	b103      	cbz	r3, 80156ea <_lseek_r+0x1e>
 80156e8:	602b      	str	r3, [r5, #0]
 80156ea:	bd38      	pop	{r3, r4, r5, pc}
 80156ec:	2000ab6c 	.word	0x2000ab6c

080156f0 <__swhatbuf_r>:
 80156f0:	b570      	push	{r4, r5, r6, lr}
 80156f2:	460e      	mov	r6, r1
 80156f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156f8:	2900      	cmp	r1, #0
 80156fa:	b096      	sub	sp, #88	; 0x58
 80156fc:	4614      	mov	r4, r2
 80156fe:	461d      	mov	r5, r3
 8015700:	da07      	bge.n	8015712 <__swhatbuf_r+0x22>
 8015702:	2300      	movs	r3, #0
 8015704:	602b      	str	r3, [r5, #0]
 8015706:	89b3      	ldrh	r3, [r6, #12]
 8015708:	061a      	lsls	r2, r3, #24
 801570a:	d410      	bmi.n	801572e <__swhatbuf_r+0x3e>
 801570c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015710:	e00e      	b.n	8015730 <__swhatbuf_r+0x40>
 8015712:	466a      	mov	r2, sp
 8015714:	f000 f862 	bl	80157dc <_fstat_r>
 8015718:	2800      	cmp	r0, #0
 801571a:	dbf2      	blt.n	8015702 <__swhatbuf_r+0x12>
 801571c:	9a01      	ldr	r2, [sp, #4]
 801571e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015722:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015726:	425a      	negs	r2, r3
 8015728:	415a      	adcs	r2, r3
 801572a:	602a      	str	r2, [r5, #0]
 801572c:	e7ee      	b.n	801570c <__swhatbuf_r+0x1c>
 801572e:	2340      	movs	r3, #64	; 0x40
 8015730:	2000      	movs	r0, #0
 8015732:	6023      	str	r3, [r4, #0]
 8015734:	b016      	add	sp, #88	; 0x58
 8015736:	bd70      	pop	{r4, r5, r6, pc}

08015738 <__smakebuf_r>:
 8015738:	898b      	ldrh	r3, [r1, #12]
 801573a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801573c:	079d      	lsls	r5, r3, #30
 801573e:	4606      	mov	r6, r0
 8015740:	460c      	mov	r4, r1
 8015742:	d507      	bpl.n	8015754 <__smakebuf_r+0x1c>
 8015744:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015748:	6023      	str	r3, [r4, #0]
 801574a:	6123      	str	r3, [r4, #16]
 801574c:	2301      	movs	r3, #1
 801574e:	6163      	str	r3, [r4, #20]
 8015750:	b002      	add	sp, #8
 8015752:	bd70      	pop	{r4, r5, r6, pc}
 8015754:	ab01      	add	r3, sp, #4
 8015756:	466a      	mov	r2, sp
 8015758:	f7ff ffca 	bl	80156f0 <__swhatbuf_r>
 801575c:	9900      	ldr	r1, [sp, #0]
 801575e:	4605      	mov	r5, r0
 8015760:	4630      	mov	r0, r6
 8015762:	f7ff f9c7 	bl	8014af4 <_malloc_r>
 8015766:	b948      	cbnz	r0, 801577c <__smakebuf_r+0x44>
 8015768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801576c:	059a      	lsls	r2, r3, #22
 801576e:	d4ef      	bmi.n	8015750 <__smakebuf_r+0x18>
 8015770:	f023 0303 	bic.w	r3, r3, #3
 8015774:	f043 0302 	orr.w	r3, r3, #2
 8015778:	81a3      	strh	r3, [r4, #12]
 801577a:	e7e3      	b.n	8015744 <__smakebuf_r+0xc>
 801577c:	4b0d      	ldr	r3, [pc, #52]	; (80157b4 <__smakebuf_r+0x7c>)
 801577e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015780:	89a3      	ldrh	r3, [r4, #12]
 8015782:	6020      	str	r0, [r4, #0]
 8015784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015788:	81a3      	strh	r3, [r4, #12]
 801578a:	9b00      	ldr	r3, [sp, #0]
 801578c:	6163      	str	r3, [r4, #20]
 801578e:	9b01      	ldr	r3, [sp, #4]
 8015790:	6120      	str	r0, [r4, #16]
 8015792:	b15b      	cbz	r3, 80157ac <__smakebuf_r+0x74>
 8015794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015798:	4630      	mov	r0, r6
 801579a:	f000 f831 	bl	8015800 <_isatty_r>
 801579e:	b128      	cbz	r0, 80157ac <__smakebuf_r+0x74>
 80157a0:	89a3      	ldrh	r3, [r4, #12]
 80157a2:	f023 0303 	bic.w	r3, r3, #3
 80157a6:	f043 0301 	orr.w	r3, r3, #1
 80157aa:	81a3      	strh	r3, [r4, #12]
 80157ac:	89a3      	ldrh	r3, [r4, #12]
 80157ae:	431d      	orrs	r5, r3
 80157b0:	81a5      	strh	r5, [r4, #12]
 80157b2:	e7cd      	b.n	8015750 <__smakebuf_r+0x18>
 80157b4:	08014c41 	.word	0x08014c41

080157b8 <_read_r>:
 80157b8:	b538      	push	{r3, r4, r5, lr}
 80157ba:	4c07      	ldr	r4, [pc, #28]	; (80157d8 <_read_r+0x20>)
 80157bc:	4605      	mov	r5, r0
 80157be:	4608      	mov	r0, r1
 80157c0:	4611      	mov	r1, r2
 80157c2:	2200      	movs	r2, #0
 80157c4:	6022      	str	r2, [r4, #0]
 80157c6:	461a      	mov	r2, r3
 80157c8:	f7eb faf2 	bl	8000db0 <_read>
 80157cc:	1c43      	adds	r3, r0, #1
 80157ce:	d102      	bne.n	80157d6 <_read_r+0x1e>
 80157d0:	6823      	ldr	r3, [r4, #0]
 80157d2:	b103      	cbz	r3, 80157d6 <_read_r+0x1e>
 80157d4:	602b      	str	r3, [r5, #0]
 80157d6:	bd38      	pop	{r3, r4, r5, pc}
 80157d8:	2000ab6c 	.word	0x2000ab6c

080157dc <_fstat_r>:
 80157dc:	b538      	push	{r3, r4, r5, lr}
 80157de:	4c07      	ldr	r4, [pc, #28]	; (80157fc <_fstat_r+0x20>)
 80157e0:	2300      	movs	r3, #0
 80157e2:	4605      	mov	r5, r0
 80157e4:	4608      	mov	r0, r1
 80157e6:	4611      	mov	r1, r2
 80157e8:	6023      	str	r3, [r4, #0]
 80157ea:	f7eb fb26 	bl	8000e3a <_fstat>
 80157ee:	1c43      	adds	r3, r0, #1
 80157f0:	d102      	bne.n	80157f8 <_fstat_r+0x1c>
 80157f2:	6823      	ldr	r3, [r4, #0]
 80157f4:	b103      	cbz	r3, 80157f8 <_fstat_r+0x1c>
 80157f6:	602b      	str	r3, [r5, #0]
 80157f8:	bd38      	pop	{r3, r4, r5, pc}
 80157fa:	bf00      	nop
 80157fc:	2000ab6c 	.word	0x2000ab6c

08015800 <_isatty_r>:
 8015800:	b538      	push	{r3, r4, r5, lr}
 8015802:	4c06      	ldr	r4, [pc, #24]	; (801581c <_isatty_r+0x1c>)
 8015804:	2300      	movs	r3, #0
 8015806:	4605      	mov	r5, r0
 8015808:	4608      	mov	r0, r1
 801580a:	6023      	str	r3, [r4, #0]
 801580c:	f7eb fb25 	bl	8000e5a <_isatty>
 8015810:	1c43      	adds	r3, r0, #1
 8015812:	d102      	bne.n	801581a <_isatty_r+0x1a>
 8015814:	6823      	ldr	r3, [r4, #0]
 8015816:	b103      	cbz	r3, 801581a <_isatty_r+0x1a>
 8015818:	602b      	str	r3, [r5, #0]
 801581a:	bd38      	pop	{r3, r4, r5, pc}
 801581c:	2000ab6c 	.word	0x2000ab6c

08015820 <_init>:
 8015820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015822:	bf00      	nop
 8015824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015826:	bc08      	pop	{r3}
 8015828:	469e      	mov	lr, r3
 801582a:	4770      	bx	lr

0801582c <_fini>:
 801582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582e:	bf00      	nop
 8015830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015832:	bc08      	pop	{r3}
 8015834:	469e      	mov	lr, r3
 8015836:	4770      	bx	lr
